
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	2003a080 	.word	0x2003a080
   4:	00012b3d 	.word	0x00012b3d

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	00021385 	.word	0x00021385
   c:	00012b91 	.word	0x00012b91
	(void)memset(res + 3, 0, 13);
  10:	00012b91 	.word	0x00012b91
  14:	00012b91 	.word	0x00012b91
  18:	00012b91 	.word	0x00012b91
	...
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  2c:	00012841 	.word	0x00012841
	memcpy(out, res, 3);
  30:	00012b91 	.word	0x00012b91
  34:	00000000 	.word	0x00000000
  38:	000127e9 	.word	0x000127e9
  3c:	0002106b 	.word	0x0002106b

00000040 <_irq_vector_table>:
  40:	00012afd 0002427d 00012afd 00012afd     .*..}B...*...*..
  50:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  60:	00024245 00012afd 00012afd 00024263     EB...*...*..cB..
  70:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  80:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  90:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  a0:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  b0:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  c0:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  d0:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  e0:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..
  f0:	00012afd 00012afd 00012afd 00012afd     .*...*...*...*..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_IDLE_STACK_SIZE+0x106>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_IDLE_STACK_SIZE+0x142>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_BT_DEVICE_APPEARANCE+0x1e>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_IDLE_STACK_SIZE+0xfa>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_IDLE_STACK_SIZE+0x11c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_IDLE_STACK_SIZE+0x1bc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_IDLE_STACK_SIZE+0x12e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_BT_DEVICE_APPEARANCE+0x1a>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x16>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_BT_DEVICE_APPEARANCE+0x16>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0xe>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0xe>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x12>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x12>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0xa>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0xa>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_IDLE_STACK_SIZE+0x1b4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_IDLE_STACK_SIZE+0x18c>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_IDLE_STACK_SIZE+0x138>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_IDLE_STACK_SIZE+0xfc>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b f844 	bl	b4a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000

00000428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     428:	4801      	ldr	r0, [pc, #4]	; (430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     42a:	7800      	ldrb	r0, [r0, #0]
     42c:	4770      	bx	lr
     42e:	0000      	.short	0x0000
     430:	20000008 	.word	0x20000008

00000434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     434:	4905      	ldr	r1, [pc, #20]	; (44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     436:	780a      	ldrb	r2, [r1, #0]
     438:	4290      	cmp	r0, r2
     43a:	d301      	bcc.n	440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     43c:	2000      	movs	r0, #0
     43e:	4770      	bx	lr
     440:	6849      	ldr	r1, [r1, #4]
     442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     44a:	4770      	bx	lr
     44c:	20000008 	.word	0x20000008
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4605      	mov	r5, r0
     454:	2a20      	cmp	r2, #32
     456:	d027      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     458:	4819      	ldr	r0, [pc, #100]	; (4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
     45a:	4c1a      	ldr	r4, [pc, #104]	; (4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>)
     45c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     468:	2920      	cmp	r1, #32
     46a:	d022      	beq.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     46c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     470:	7840      	ldrb	r0, [r0, #1]
     472:	784c      	ldrb	r4, [r1, #1]
     474:	7048      	strb	r0, [r1, #1]
     476:	4620      	mov	r0, r4
     478:	4601      	mov	r1, r0
     47a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     47e:	4291      	cmp	r1, r2
     480:	7005      	strb	r5, [r0, #0]
     482:	7840      	ldrb	r0, [r0, #1]
     484:	d1f8      	bne.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     48a:	2a20      	cmp	r2, #32
     48c:	bf1a      	itte	ne
     48e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     492:	7054      	strbne	r4, [r2, #1]
     494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     498:	2220      	movs	r2, #32
     49a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     49e:	f88c 2001 	strb.w	r2, [ip, #1]
     4a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	f240 2191 	movw	r1, #657	; 0x291
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f8e5 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	f883 0020 	strb.w	r0, [r3, #32]
     4bc:	e7db      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     4be:	0000      	.short	0x0000
     4c0:	200341a4 	.word	0x200341a4
     4c4:	20034224 	.word	0x20034224
     4c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	460c      	mov	r4, r1
     4ce:	8949      	ldrh	r1, [r1, #10]
     4d0:	b087      	sub	sp, #28
     4d2:	f501 61e1 	add.w	r1, r1, #1800	; 0x708
     4d6:	4615      	mov	r5, r2
     4d8:	4281      	cmp	r1, r0
     4da:	f200 80da 	bhi.w	692 <CONFIG_BT_HCI_TX_STACK_SIZE+0x92>
     4de:	aa05      	add	r2, sp, #20
     4e0:	a902      	add	r1, sp, #8
     4e2:	f002 f89f 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     4e6:	9802      	ldr	r0, [sp, #8]
     4e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     4ea:	4428      	add	r0, r5
     4ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4f0:	9004      	str	r0, [sp, #16]
     4f2:	48a9      	ldr	r0, [pc, #676]	; (798 <CONFIG_BT_HCI_TX_STACK_SIZE+0x198>)
     4f4:	4ea9      	ldr	r6, [pc, #676]	; (79c <CONFIG_BT_HCI_TX_STACK_SIZE+0x19c>)
     4f6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4fa:	9003      	str	r0, [sp, #12]
     4fc:	f890 5020 	ldrb.w	r5, [r0, #32]
     500:	2020      	movs	r0, #32
     502:	46e9      	mov	r9, sp
     504:	f10d 0804 	add.w	r8, sp, #4
     508:	f88d 0000 	strb.w	r0, [sp]
     50c:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     510:	2d20      	cmp	r5, #32
     512:	bf18      	it	ne
     514:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     518:	d026      	beq.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     51a:	bf00      	nop
     51c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     524:	6821      	ldr	r1, [r4, #0]
     526:	68c2      	ldr	r2, [r0, #12]
     528:	1a89      	subs	r1, r1, r2
     52a:	0209      	lsls	r1, r1, #8
     52c:	17ca      	asrs	r2, r1, #31
     52e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     532:	3008      	adds	r0, #8
     534:	1209      	asrs	r1, r1, #8
     536:	d417      	bmi.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     538:	8961      	ldrh	r1, [r4, #10]
     53a:	b171      	cbz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     53c:	8941      	ldrh	r1, [r0, #10]
     53e:	b961      	cbnz	r1, 55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
     540:	f000 fdb4 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     544:	f002 f852 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     548:	6821      	ldr	r1, [r4, #0]
     54a:	1a08      	subs	r0, r1, r0
     54c:	0200      	lsls	r0, r0, #8
     54e:	17c1      	asrs	r1, r0, #31
     550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     554:	1200      	asrs	r0, r0, #8
     556:	2833      	cmp	r0, #51	; 0x33
     558:	db06      	blt.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     55a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     55e:	f889 5000 	strb.w	r5, [r9]
     562:	7845      	ldrb	r5, [r0, #1]
     564:	2d20      	cmp	r5, #32
     566:	d1d9      	bne.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     568:	f899 0000 	ldrb.w	r0, [r9]
     56c:	f888 0000 	strb.w	r0, [r8]
     570:	46a1      	mov	r9, r4
     572:	2d20      	cmp	r5, #32
     574:	bf1c      	itt	ne
     576:	488a      	ldrne	r0, [pc, #552]	; (7a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a0>)
     578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     57c:	f000 8108 	beq.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     588:	f8d9 1004 	ldr.w	r1, [r9, #4]
     58c:	f8da 2008 	ldr.w	r2, [sl, #8]
     590:	4648      	mov	r0, r9
     592:	1a51      	subs	r1, r2, r1
     594:	0209      	lsls	r1, r1, #8
     596:	17ca      	asrs	r2, r1, #31
     598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     59c:	f10a 0708 	add.w	r7, sl, #8
     5a0:	1209      	asrs	r1, r1, #8
     5a2:	d415      	bmi.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     5a4:	8979      	ldrh	r1, [r7, #10]
     5a6:	2900      	cmp	r1, #0
     5a8:	f000 80f2 	beq.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     5ac:	8941      	ldrh	r1, [r0, #10]
     5ae:	2900      	cmp	r1, #0
     5b0:	f040 80ee 	bne.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     5b4:	f000 fd7a 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     5b8:	f002 f818 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5bc:	6839      	ldr	r1, [r7, #0]
     5be:	1a08      	subs	r0, r1, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c1      	asrs	r1, r0, #31
     5c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	2833      	cmp	r0, #51	; 0x33
     5cc:	f280 80e0 	bge.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     5d0:	f888 5000 	strb.w	r5, [r8]
     5d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     5dc:	4281      	cmp	r1, r0
     5de:	d906      	bls.n	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
     5e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5e4:	7845      	ldrb	r5, [r0, #1]
     5e6:	2d20      	cmp	r5, #32
     5e8:	d1ca      	bne.n	580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>
     5ea:	f000 b8d1 	b.w	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     5ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5fa:	8a68      	ldrh	r0, [r5, #18]
     5fc:	68ef      	ldr	r7, [r5, #12]
     5fe:	2800      	cmp	r0, #0
     600:	d13f      	bne.n	682 <CONFIG_BT_HCI_TX_STACK_SIZE+0x82>
     602:	8960      	ldrh	r0, [r4, #10]
     604:	b3e8      	cbz	r0, 682 <CONFIG_BT_HCI_TX_STACK_SIZE+0x82>
     606:	68a8      	ldr	r0, [r5, #8]
     608:	f00a ff75 	bl	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     60c:	8a69      	ldrh	r1, [r5, #18]
     60e:	7c2a      	ldrb	r2, [r5, #16]
     610:	4411      	add	r1, r2
     612:	1c49      	adds	r1, r1, #1
     614:	4a63      	ldr	r2, [pc, #396]	; (7a4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a4>)
     616:	1843      	adds	r3, r0, r1
     618:	4290      	cmp	r0, r2
     61a:	d904      	bls.n	626 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     61c:	f240 6116 	movw	r1, #1558	; 0x616
     620:	2070      	movs	r0, #112	; 0x70
     622:	f003 f82b 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     626:	4860      	ldr	r0, [pc, #384]	; (7a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a8>)
     628:	4281      	cmp	r1, r0
     62a:	dd04      	ble.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     62c:	f240 6117 	movw	r1, #1559	; 0x617
     630:	2070      	movs	r0, #112	; 0x70
     632:	f003 f823 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     636:	485d      	ldr	r0, [pc, #372]	; (7ac <CONFIG_BT_HCI_TX_STACK_SIZE+0x1ac>)
     638:	4281      	cmp	r1, r0
     63a:	da04      	bge.n	646 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     63c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     640:	2070      	movs	r0, #112	; 0x70
     642:	f003 f81b 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     646:	485a      	ldr	r0, [pc, #360]	; (7b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b0>)
     648:	4298      	cmp	r0, r3
     64a:	bfdc      	itt	le
     64c:	f503 03f7 	addle.w	r3, r3, #8093696	; 0x7b8000
     650:	f1a3 53f8 	suble.w	r3, r3, #520093696	; 0x1f000000
     654:	dd05      	ble.n	662 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     656:	2b00      	cmp	r3, #0
     658:	bfbc      	itt	lt
     65a:	f5a3 03f7 	sublt.w	r3, r3, #8093696	; 0x7b8000
     65e:	f103 53f8 	addlt.w	r3, r3, #520093696	; 0x1f000000
     662:	4618      	mov	r0, r3
     664:	f001 ffc2 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     668:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     66c:	1a39      	subs	r1, r7, r0
     66e:	0209      	lsls	r1, r1, #8
     670:	17ca      	asrs	r2, r1, #31
     672:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     676:	1209      	asrs	r1, r1, #8
     678:	2933      	cmp	r1, #51	; 0x33
     67a:	bfbc      	itt	lt
     67c:	3033      	addlt	r0, #51	; 0x33
     67e:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     682:	9804      	ldr	r0, [sp, #16]
     684:	1a38      	subs	r0, r7, r0
     686:	0200      	lsls	r0, r0, #8
     688:	17c1      	asrs	r1, r0, #31
     68a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     68e:	1200      	asrs	r0, r0, #8
     690:	d403      	bmi.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     692:	b00b      	add	sp, #44	; 0x2c
     694:	2000      	movs	r0, #0
     696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     69a:	e9d4 1000 	ldrd	r1, r0, [r4]
     69e:	1a40      	subs	r0, r0, r1
     6a0:	4438      	add	r0, r7
     6a2:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     6a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6aa:	e9c4 1000 	strd	r1, r0, [r4]
     6ae:	9803      	ldr	r0, [sp, #12]
     6b0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
     6b4:	466f      	mov	r7, sp
     6b6:	f890 5020 	ldrb.w	r5, [r0, #32]
     6ba:	2020      	movs	r0, #32
     6bc:	f10d 0a04 	add.w	sl, sp, #4
     6c0:	f88d 0000 	strb.w	r0, [sp]
     6c4:	2d20      	cmp	r5, #32
     6c6:	bf1c      	itt	ne
     6c8:	4835      	ldrne	r0, [pc, #212]	; (7a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a0>)
     6ca:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6ce:	d024      	beq.n	71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     6d0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6d4:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6d8:	6822      	ldr	r2, [r4, #0]
     6da:	68c1      	ldr	r1, [r0, #12]
     6dc:	1a51      	subs	r1, r2, r1
     6de:	0209      	lsls	r1, r1, #8
     6e0:	17ca      	asrs	r2, r1, #31
     6e2:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6e6:	3008      	adds	r0, #8
     6e8:	1209      	asrs	r1, r1, #8
     6ea:	d416      	bmi.n	71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     6ec:	8961      	ldrh	r1, [r4, #10]
     6ee:	b171      	cbz	r1, 70e <CONFIG_BT_HCI_TX_STACK_SIZE+0x10e>
     6f0:	8941      	ldrh	r1, [r0, #10]
     6f2:	b961      	cbnz	r1, 70e <CONFIG_BT_HCI_TX_STACK_SIZE+0x10e>
     6f4:	f000 fcda 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     6f8:	f001 ff78 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6fc:	6821      	ldr	r1, [r4, #0]
     6fe:	1a08      	subs	r0, r1, r0
     700:	0200      	lsls	r0, r0, #8
     702:	17c1      	asrs	r1, r0, #31
     704:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     708:	1200      	asrs	r0, r0, #8
     70a:	2833      	cmp	r0, #51	; 0x33
     70c:	db05      	blt.n	71a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     70e:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     712:	703d      	strb	r5, [r7, #0]
     714:	7845      	ldrb	r5, [r0, #1]
     716:	2d20      	cmp	r5, #32
     718:	d1da      	bne.n	6d0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xd0>
     71a:	7838      	ldrb	r0, [r7, #0]
     71c:	f88a 0000 	strb.w	r0, [sl]
     720:	4627      	mov	r7, r4
     722:	2d20      	cmp	r5, #32
     724:	bf1c      	itt	ne
     726:	481e      	ldrne	r0, [pc, #120]	; (7a0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a0>)
     728:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     72c:	d030      	beq.n	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     72e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     732:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     736:	6879      	ldr	r1, [r7, #4]
     738:	f8d9 2008 	ldr.w	r2, [r9, #8]
     73c:	4638      	mov	r0, r7
     73e:	1a51      	subs	r1, r2, r1
     740:	0209      	lsls	r1, r1, #8
     742:	17ca      	asrs	r2, r1, #31
     744:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     748:	f109 0808 	add.w	r8, r9, #8
     74c:	1209      	asrs	r1, r1, #8
     74e:	d412      	bmi.n	776 <CONFIG_BT_HCI_TX_STACK_SIZE+0x176>
     750:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     754:	b1e1      	cbz	r1, 790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     756:	8941      	ldrh	r1, [r0, #10]
     758:	b9d1      	cbnz	r1, 790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     75a:	f000 fca7 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     75e:	f001 ff45 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     762:	f8d8 1000 	ldr.w	r1, [r8]
     766:	1a08      	subs	r0, r1, r0
     768:	0200      	lsls	r0, r0, #8
     76a:	17c1      	asrs	r1, r0, #31
     76c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     770:	1200      	asrs	r0, r0, #8
     772:	2833      	cmp	r0, #51	; 0x33
     774:	da0c      	bge.n	790 <CONFIG_BT_HCI_TX_STACK_SIZE+0x190>
     776:	f88a 5000 	strb.w	r5, [sl]
     77a:	f899 0014 	ldrb.w	r0, [r9, #20]
     77e:	7b39      	ldrb	r1, [r7, #12]
     780:	4288      	cmp	r0, r1
     782:	f67f af34 	bls.w	5ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x106>
     786:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     78a:	7845      	ldrb	r5, [r0, #1]
     78c:	2d20      	cmp	r5, #32
     78e:	d1ce      	bne.n	72e <CONFIG_BT_HCI_TX_STACK_SIZE+0x12e>
     790:	b00b      	add	sp, #44	; 0x2c
     792:	2001      	movs	r0, #1
     794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     798:	20034224 	.word	0x20034224
     79c:	20033ea4 	.word	0x20033ea4
     7a0:	200341a4 	.word	0x200341a4
     7a4:	1e847fff 	.word	0x1e847fff
     7a8:	07a12000 	.word	0x07a12000
     7ac:	f85ee000 	.word	0xf85ee000
     7b0:	1e848000 	.word	0x1e848000
     7b4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7b8:	4604      	mov	r4, r0
     7ba:	483c      	ldr	r0, [pc, #240]	; (8ac <CONFIG_ISR_STACK_SIZE+0xac>)
     7bc:	460e      	mov	r6, r1
     7be:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7c2:	4f3b      	ldr	r7, [pc, #236]	; (8b0 <CONFIG_ISR_STACK_SIZE+0xb0>)
     7c4:	f890 5020 	ldrb.w	r5, [r0, #32]
     7c8:	2020      	movs	r0, #32
     7ca:	4698      	mov	r8, r3
     7cc:	4692      	mov	sl, r2
     7ce:	7010      	strb	r0, [r2, #0]
     7d0:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7d4:	2d20      	cmp	r5, #32
     7d6:	bf18      	it	ne
     7d8:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7dc:	d028      	beq.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     7de:	bf00      	nop
     7e0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7e4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7e8:	f100 0108 	add.w	r1, r0, #8
     7ec:	68c0      	ldr	r0, [r0, #12]
     7ee:	6822      	ldr	r2, [r4, #0]
     7f0:	1a10      	subs	r0, r2, r0
     7f2:	0200      	lsls	r0, r0, #8
     7f4:	17c2      	asrs	r2, r0, #31
     7f6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7fa:	1200      	asrs	r0, r0, #8
     7fc:	d418      	bmi.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     7fe:	8960      	ldrh	r0, [r4, #10]
     800:	b178      	cbz	r0, 822 <CONFIG_ISR_STACK_SIZE+0x22>
     802:	8948      	ldrh	r0, [r1, #10]
     804:	b968      	cbnz	r0, 822 <CONFIG_ISR_STACK_SIZE+0x22>
     806:	4608      	mov	r0, r1
     808:	f000 fc50 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     80c:	f001 feee 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     810:	6821      	ldr	r1, [r4, #0]
     812:	1a08      	subs	r0, r1, r0
     814:	0200      	lsls	r0, r0, #8
     816:	17c1      	asrs	r1, r0, #31
     818:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     81c:	1200      	asrs	r0, r0, #8
     81e:	2833      	cmp	r0, #51	; 0x33
     820:	db06      	blt.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
     822:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     826:	f88a 5000 	strb.w	r5, [sl]
     82a:	7845      	ldrb	r5, [r0, #1]
     82c:	2d20      	cmp	r5, #32
     82e:	d1d7      	bne.n	7e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e0>
     830:	f89a 0000 	ldrb.w	r0, [sl]
     834:	f888 0000 	strb.w	r0, [r8]
     838:	2d20      	cmp	r5, #32
     83a:	bf18      	it	ne
     83c:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     840:	d030      	beq.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     842:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     846:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     84a:	6861      	ldr	r1, [r4, #4]
     84c:	f8d9 2008 	ldr.w	r2, [r9, #8]
     850:	4620      	mov	r0, r4
     852:	1a51      	subs	r1, r2, r1
     854:	0209      	lsls	r1, r1, #8
     856:	17ca      	asrs	r2, r1, #31
     858:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     85c:	f109 0608 	add.w	r6, r9, #8
     860:	1209      	asrs	r1, r1, #8
     862:	d410      	bmi.n	886 <CONFIG_ISR_STACK_SIZE+0x86>
     864:	8971      	ldrh	r1, [r6, #10]
     866:	b1e9      	cbz	r1, 8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     868:	8941      	ldrh	r1, [r0, #10]
     86a:	b9d9      	cbnz	r1, 8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     86c:	f000 fc1e 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     870:	f001 febc 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     874:	6831      	ldr	r1, [r6, #0]
     876:	1a08      	subs	r0, r1, r0
     878:	0200      	lsls	r0, r0, #8
     87a:	17c1      	asrs	r1, r0, #31
     87c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     880:	1200      	asrs	r0, r0, #8
     882:	2833      	cmp	r0, #51	; 0x33
     884:	da0e      	bge.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     886:	f888 5000 	strb.w	r5, [r8]
     88a:	f899 0014 	ldrb.w	r0, [r9, #20]
     88e:	7b21      	ldrb	r1, [r4, #12]
     890:	4288      	cmp	r0, r1
     892:	d802      	bhi.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     894:	2000      	movs	r0, #0
     896:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     89a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     89e:	7845      	ldrb	r5, [r0, #1]
     8a0:	2d20      	cmp	r5, #32
     8a2:	d1ce      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     8a4:	2001      	movs	r0, #1
     8a6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8aa:	0000      	.short	0x0000
     8ac:	20034224 	.word	0x20034224
     8b0:	20033ea4 	.word	0x20033ea4
     8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8b8:	f04f 0800 	mov.w	r8, #0
     8bc:	b098      	sub	sp, #96	; 0x60
     8be:	4616      	mov	r6, r2
     8c0:	460d      	mov	r5, r1
     8c2:	46c3      	mov	fp, r8
     8c4:	f002 f90a 	bl	2adc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8c8:	4604      	mov	r4, r0
     8ca:	2d01      	cmp	r5, #1
     8cc:	bf18      	it	ne
     8ce:	2d02      	cmpne	r5, #2
     8d0:	d005      	beq.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
     8d2:	f640 1193 	movw	r1, #2451	; 0x993
     8d6:	f04f 0070 	mov.w	r0, #112	; 0x70
     8da:	f002 fecf 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8de:	49fd      	ldr	r1, [pc, #1012]	; (cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>)
     8e0:	2001      	movs	r0, #1
     8e2:	6008      	str	r0, [r1, #0]
     8e4:	49fc      	ldr	r1, [pc, #1008]	; (cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>)
     8e6:	6889      	ldr	r1, [r1, #8]
     8e8:	6008      	str	r0, [r1, #0]
     8ea:	2000      	movs	r0, #0
     8ec:	900c      	str	r0, [sp, #48]	; 0x30
     8ee:	1e40      	subs	r0, r0, #1
     8f0:	900e      	str	r0, [sp, #56]	; 0x38
     8f2:	49fa      	ldr	r1, [pc, #1000]	; (cdc <CONFIG_ISR_STACK_SIZE+0x4dc>)
     8f4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     8f8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     8fc:	3308      	adds	r3, #8
     8fe:	af0f      	add	r7, sp, #60	; 0x3c
     900:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     902:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     906:	a80f      	add	r0, sp, #60	; 0x3c
     908:	f000 fbd0 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
     90c:	900d      	str	r0, [sp, #52]	; 0x34
     90e:	48f3      	ldr	r0, [pc, #972]	; (cdc <CONFIG_ISR_STACK_SIZE+0x4dc>)
     910:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     914:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     918:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     91c:	f1b9 0f00 	cmp.w	r9, #0
     920:	bf14      	ite	ne
     922:	f04f 0a01 	movne.w	sl, #1
     926:	f04f 0a00 	moveq.w	sl, #0
     92a:	980f      	ldr	r0, [sp, #60]	; 0x3c
     92c:	9014      	str	r0, [sp, #80]	; 0x50
     92e:	f1ba 0f00 	cmp.w	sl, #0
     932:	d009      	beq.n	948 <CONFIG_ISR_STACK_SIZE+0x148>
     934:	48ea      	ldr	r0, [pc, #936]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     936:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     93a:	b928      	cbnz	r0, 948 <CONFIG_ISR_STACK_SIZE+0x148>
     93c:	f002 fe3a 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     940:	2800      	cmp	r0, #0
     942:	bf08      	it	eq
     944:	2701      	moveq	r7, #1
     946:	d000      	beq.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
     948:	2700      	movs	r7, #0
     94a:	48e6      	ldr	r0, [pc, #920]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     94c:	2200      	movs	r2, #0
     94e:	9215      	str	r2, [sp, #84]	; 0x54
     950:	7800      	ldrb	r0, [r0, #0]
     952:	4616      	mov	r6, r2
     954:	2801      	cmp	r0, #1
     956:	bf18      	it	ne
     958:	2803      	cmpne	r0, #3
     95a:	d140      	bne.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
     95c:	48e1      	ldr	r0, [pc, #900]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     95e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     962:	eba8 0009 	sub.w	r0, r8, r9
     966:	9015      	str	r0, [sp, #84]	; 0x54
     968:	45c8      	cmp	r8, r9
     96a:	d938      	bls.n	9de <CONFIG_ISR_STACK_SIZE+0x1de>
     96c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     96e:	ea6f 0108 	mvn.w	r1, r8
     972:	f8df e374 	ldr.w	lr, [pc, #884]	; ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>
     976:	1858      	adds	r0, r3, r1
     978:	f10d 0c0c 	add.w	ip, sp, #12
     97c:	aa17      	add	r2, sp, #92	; 0x5c
     97e:	4573      	cmp	r3, lr
     980:	d904      	bls.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     982:	f240 6116 	movw	r1, #1558	; 0x616
     986:	2070      	movs	r0, #112	; 0x70
     988:	f002 fe78 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     98c:	4bd7      	ldr	r3, [pc, #860]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     98e:	4299      	cmp	r1, r3
     990:	dd04      	ble.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
     992:	f240 6117 	movw	r1, #1559	; 0x617
     996:	2070      	movs	r0, #112	; 0x70
     998:	f002 fe70 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     99c:	4bd4      	ldr	r3, [pc, #848]	; (cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>)
     99e:	4299      	cmp	r1, r3
     9a0:	da04      	bge.n	9ac <CONFIG_ISR_STACK_SIZE+0x1ac>
     9a2:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     9a6:	2070      	movs	r0, #112	; 0x70
     9a8:	f002 fe68 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9ac:	49d1      	ldr	r1, [pc, #836]	; (cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>)
     9ae:	4281      	cmp	r1, r0
     9b0:	bfdc      	itt	le
     9b2:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9b6:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9ba:	dd05      	ble.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
     9bc:	2800      	cmp	r0, #0
     9be:	bfbc      	itt	lt
     9c0:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9c4:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9c8:	4661      	mov	r1, ip
     9ca:	f001 fe2b 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9ce:	9803      	ldr	r0, [sp, #12]
     9d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9d6:	9003      	str	r0, [sp, #12]
     9d8:	1a08      	subs	r0, r1, r0
     9da:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9de:	2f00      	cmp	r7, #0
     9e0:	bf18      	it	ne
     9e2:	2632      	movne	r6, #50	; 0x32
     9e4:	d104      	bne.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     9e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9ea:	2800      	cmp	r0, #0
     9ec:	bf18      	it	ne
     9ee:	2602      	movne	r6, #2
     9f0:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     9f4:	d008      	beq.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
     9f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
     9f8:	1b00      	subs	r0, r0, r4
     9fa:	0200      	lsls	r0, r0, #8
     9fc:	17c1      	asrs	r1, r0, #31
     9fe:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a02:	1200      	asrs	r0, r0, #8
     a04:	2801      	cmp	r0, #1
     a06:	da02      	bge.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
     a08:	2104      	movs	r1, #4
     a0a:	9818      	ldr	r0, [sp, #96]	; 0x60
     a0c:	e00b      	b.n	a26 <CONFIG_ISR_STACK_SIZE+0x226>
     a0e:	b147      	cbz	r7, a22 <CONFIG_ISR_STACK_SIZE+0x222>
     a10:	48b3      	ldr	r0, [pc, #716]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     a12:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a16:	b120      	cbz	r0, a22 <CONFIG_ISR_STACK_SIZE+0x222>
     a18:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a1c:	1c06      	adds	r6, r0, #0
     a1e:	bf18      	it	ne
     a20:	2602      	movne	r6, #2
     a22:	4620      	mov	r0, r4
     a24:	2101      	movs	r1, #1
     a26:	f1b9 0f00 	cmp.w	r9, #0
     a2a:	d002      	beq.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
     a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a2e:	2b1e      	cmp	r3, #30
     a30:	da02      	bge.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
     a32:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a36:	b113      	cbz	r3, a3e <CONFIG_ISR_STACK_SIZE+0x23e>
     a38:	f04f 0b01 	mov.w	fp, #1
     a3c:	1e49      	subs	r1, r1, #1
     a3e:	198b      	adds	r3, r1, r6
     a40:	49a8      	ldr	r1, [pc, #672]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     a42:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a46:	7809      	ldrb	r1, [r1, #0]
     a48:	9115      	str	r1, [sp, #84]	; 0x54
     a4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a4c:	1a89      	subs	r1, r1, r2
     a4e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     a52:	ebac 0100 	sub.w	r1, ip, r0
     a56:	0209      	lsls	r1, r1, #8
     a58:	17ce      	asrs	r6, r1, #31
     a5a:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     a5e:	1209      	asrs	r1, r1, #8
     a60:	4299      	cmp	r1, r3
     a62:	db18      	blt.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
     a64:	2a00      	cmp	r2, #0
     a66:	bf18      	it	ne
     a68:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a6c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a6e:	9705      	str	r7, [sp, #20]
     a70:	2700      	movs	r7, #0
     a72:	f001 ff2d 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a76:	1a30      	subs	r0, r6, r0
     a78:	0200      	lsls	r0, r0, #8
     a7a:	17c1      	asrs	r1, r0, #31
     a7c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a80:	1200      	asrs	r0, r0, #8
     a82:	283e      	cmp	r0, #62	; 0x3e
     a84:	da3f      	bge.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
     a86:	2d01      	cmp	r5, #1
     a88:	d020      	beq.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
     a8a:	1e70      	subs	r0, r6, #1
     a8c:	9905      	ldr	r1, [sp, #20]
     a8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a92:	b319      	cbz	r1, adc <CONFIG_ISR_STACK_SIZE+0x2dc>
     a94:	e02d      	b.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
     a96:	b182      	cbz	r2, aba <CONFIG_ISR_STACK_SIZE+0x2ba>
     a98:	f1be 0f00 	cmp.w	lr, #0
     a9c:	bf04      	itt	eq
     a9e:	9915      	ldreq	r1, [sp, #84]	; 0x54
     aa0:	2903      	cmpeq	r1, #3
     aa2:	d00a      	beq.n	aba <CONFIG_ISR_STACK_SIZE+0x2ba>
     aa4:	b927      	cbnz	r7, ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
     aa6:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     aaa:	2900      	cmp	r1, #0
     aac:	bf18      	it	ne
     aae:	1e9b      	subne	r3, r3, #2
     ab0:	2200      	movs	r2, #0
     ab2:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     ab6:	4690      	mov	r8, r2
     ab8:	e7c7      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
     aba:	bb07      	cbnz	r7, afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     abc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     ac0:	b1e9      	cbz	r1, afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     ac2:	2100      	movs	r1, #0
     ac4:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     ac8:	1e9b      	subs	r3, r3, #2
     aca:	e7be      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
     acc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ad0:	d120      	bne.n	b14 <CONFIG_ISR_STACK_SIZE+0x314>
     ad2:	f640 110c 	movw	r1, #2316	; 0x90c
     ad6:	2070      	movs	r0, #112	; 0x70
     ad8:	f002 fdd0 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     adc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     ae0:	d007      	beq.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
     ae2:	1a21      	subs	r1, r4, r0
     ae4:	0209      	lsls	r1, r1, #8
     ae6:	17ca      	asrs	r2, r1, #31
     ae8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     aec:	1209      	asrs	r1, r1, #8
     aee:	2904      	cmp	r1, #4
     af0:	dd03      	ble.n	afa <CONFIG_ISR_STACK_SIZE+0x2fa>
     af2:	4604      	mov	r4, r0
     af4:	f001 fef2 	bl	28dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     af8:	e00c      	b.n	b14 <CONFIG_ISR_STACK_SIZE+0x314>
     afa:	2900      	cmp	r1, #0
     afc:	dd0a      	ble.n	b14 <CONFIG_ISR_STACK_SIZE+0x314>
     afe:	b01b      	add	sp, #108	; 0x6c
     b00:	2000      	movs	r0, #0
     b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b06:	1e70      	subs	r0, r6, #1
     b08:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b0c:	4620      	mov	r0, r4
     b0e:	f001 fee5 	bl	28dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b12:	4657      	mov	r7, sl
     b14:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b18:	d028      	beq.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
     b1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b1c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     b20:	1b00      	subs	r0, r0, r4
     b22:	f08b 0301 	eor.w	r3, fp, #1
     b26:	4a74      	ldr	r2, [pc, #464]	; (cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>)
     b28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b2c:	ebac 0c04 	sub.w	ip, ip, r4
     b30:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b34:	4283      	cmp	r3, r0
     b36:	bf98      	it	ls
     b38:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b3c:	d2df      	bcs.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     b3e:	4562      	cmp	r2, ip
     b40:	d3dd      	bcc.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     b42:	4620      	mov	r0, r4
     b44:	f00a fcd7 	bl	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b48:	4967      	ldr	r1, [pc, #412]	; (ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>)
     b4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b4c:	1c4b      	adds	r3, r1, #1
     b4e:	1a16      	subs	r6, r2, r0
     b50:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b54:	bf24      	itt	cs
     b56:	eba0 0c02 	subcs.w	ip, r0, r2
     b5a:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b5e:	d310      	bcc.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
     b60:	42b1      	cmp	r1, r6
     b62:	d208      	bcs.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
     b64:	1a08      	subs	r0, r1, r0
     b66:	4410      	add	r0, r2
     b68:	1c46      	adds	r6, r0, #1
     b6a:	e00a      	b.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
     b6c:	f640 212b 	movw	r1, #2603	; 0xa2b
     b70:	2070      	movs	r0, #112	; 0x70
     b72:	f002 fd83 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b76:	4561      	cmp	r1, ip
     b78:	d22c      	bcs.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     b7a:	1a89      	subs	r1, r1, r2
     b7c:	4408      	add	r0, r1
     b7e:	1c40      	adds	r0, r0, #1
     b80:	4246      	negs	r6, r0
     b82:	4857      	ldr	r0, [pc, #348]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     b84:	7f80      	ldrb	r0, [r0, #30]
     b86:	b350      	cbz	r0, bde <CONFIG_ISR_STACK_SIZE+0x3de>
     b88:	4628      	mov	r0, r5
     b8a:	4645      	mov	r5, r8
     b8c:	f04f 0b00 	mov.w	fp, #0
     b90:	46d8      	mov	r8, fp
     b92:	2801      	cmp	r0, #1
     b94:	d005      	beq.n	ba2 <CONFIG_ISR_STACK_SIZE+0x3a2>
     b96:	2002      	movs	r0, #2
     b98:	f002 f8e8 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     b9c:	2001      	movs	r0, #1
     b9e:	f002 f8e5 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba2:	45a9      	cmp	r9, r5
     ba4:	d22c      	bcs.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
     ba6:	eba6 0105 	sub.w	r1, r6, r5
     baa:	f04f 0301 	mov.w	r3, #1
     bae:	f04f 0203 	mov.w	r2, #3
     bb2:	f04f 0002 	mov.w	r0, #2
     bb6:	f002 f811 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bba:	2800      	cmp	r0, #0
     bbc:	bf08      	it	eq
     bbe:	f04f 0801 	moveq.w	r8, #1
     bc2:	f1b9 0f00 	cmp.w	r9, #0
     bc6:	d035      	beq.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     bc8:	2301      	movs	r3, #1
     bca:	eba6 0109 	sub.w	r1, r6, r9
     bce:	2203      	movs	r2, #3
     bd0:	4618      	mov	r0, r3
     bd2:	e023      	b.n	c1c <CONFIG_ISR_STACK_SIZE+0x41c>
     bd4:	f640 310b 	movw	r1, #2827	; 0xb0b
     bd8:	2070      	movs	r0, #112	; 0x70
     bda:	f002 fd4f 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bde:	45c1      	cmp	r9, r8
     be0:	bf34      	ite	cc
     be2:	4640      	movcc	r0, r8
     be4:	4648      	movcs	r0, r9
     be6:	f1bb 0f00 	cmp.w	fp, #0
     bea:	bf14      	ite	ne
     bec:	2100      	movne	r1, #0
     bee:	211e      	moveq	r1, #30
     bf0:	4408      	add	r0, r1
     bf2:	42b0      	cmp	r0, r6
     bf4:	dbc8      	blt.n	b88 <CONFIG_ISR_STACK_SIZE+0x388>
     bf6:	f640 213e 	movw	r1, #2622	; 0xa3e
     bfa:	2070      	movs	r0, #112	; 0x70
     bfc:	f002 fd3e 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c00:	d910      	bls.n	c24 <CONFIG_ISR_STACK_SIZE+0x424>
     c02:	2301      	movs	r3, #1
     c04:	eba6 0109 	sub.w	r1, r6, r9
     c08:	2203      	movs	r2, #3
     c0a:	4618      	mov	r0, r3
     c0c:	f001 ffe6 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c10:	b328      	cbz	r0, c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c12:	b17d      	cbz	r5, c34 <CONFIG_ISR_STACK_SIZE+0x434>
     c14:	1b71      	subs	r1, r6, r5
     c16:	2301      	movs	r3, #1
     c18:	2203      	movs	r2, #3
     c1a:	2002      	movs	r0, #2
     c1c:	f001 ffde 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c20:	b1e8      	cbz	r0, c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c22:	e007      	b.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     c24:	ea55 0009 	orrs.w	r0, r5, r9
     c28:	d004      	beq.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
     c2a:	f640 1176 	movw	r1, #2422	; 0x976
     c2e:	2070      	movs	r0, #112	; 0x70
     c30:	f002 fd24 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c34:	2301      	movs	r3, #1
     c36:	2203      	movs	r2, #3
     c38:	4631      	mov	r1, r6
     c3a:	2000      	movs	r0, #0
     c3c:	f001 ffce 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c40:	b168      	cbz	r0, c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c42:	2501      	movs	r5, #1
     c44:	f1b8 0f00 	cmp.w	r8, #0
     c48:	d003      	beq.n	c52 <CONFIG_ISR_STACK_SIZE+0x452>
     c4a:	9814      	ldr	r0, [sp, #80]	; 0x50
     c4c:	900f      	str	r0, [sp, #60]	; 0x3c
     c4e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
     c56:	f1ba 0f00 	cmp.w	sl, #0
     c5a:	d10e      	bne.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c5c:	e009      	b.n	c72 <CONFIG_ISR_STACK_SIZE+0x472>
     c5e:	2002      	movs	r0, #2
     c60:	f002 f884 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c64:	2001      	movs	r0, #1
     c66:	f002 f881 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c6a:	b01b      	add	sp, #108	; 0x6c
     c6c:	2000      	movs	r0, #0
     c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c72:	481b      	ldr	r0, [pc, #108]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     c74:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c78:	b100      	cbz	r0, c7c <CONFIG_ISR_STACK_SIZE+0x47c>
     c7a:	b34f      	cbz	r7, cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
     c7c:	f8df a060 	ldr.w	sl, [pc, #96]	; ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>
     c80:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c84:	b118      	cbz	r0, c8e <CONFIG_ISR_STACK_SIZE+0x48e>
     c86:	f002 fb3f 	bl	3308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c8a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c8e:	b307      	cbz	r7, cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
     c90:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     c94:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     c98:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     c9c:	f8c8 0000 	str.w	r0, [r8]
     ca0:	2300      	movs	r3, #0
     ca2:	2203      	movs	r2, #3
     ca4:	2005      	movs	r0, #5
     ca6:	f001 ff99 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     caa:	b368      	cbz	r0, d08 <CONFIG_ISR_STACK_SIZE+0x508>
     cac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cb0:	2005      	movs	r0, #5
     cb2:	f002 f921 	bl	2ef8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cb6:	4912      	ldr	r1, [pc, #72]	; (d00 <CONFIG_ISR_STACK_SIZE+0x500>)
     cb8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     cbc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     cc0:	4910      	ldr	r1, [pc, #64]	; (d04 <CONFIG_ISR_STACK_SIZE+0x504>)
     cc2:	12e0      	asrs	r0, r4, #11
     cc4:	6008      	str	r0, [r1, #0]
     cc6:	4c06      	ldr	r4, [pc, #24]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     cc8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     ccc:	b3f0      	cbz	r0, d4c <CONFIG_ISR_STACK_SIZE+0x54c>
     cce:	e05b      	b.n	d88 <CONFIG_ISR_STACK_SIZE+0x588>
     cd0:	e01b      	b.n	d0a <CONFIG_ISR_STACK_SIZE+0x50a>
     cd2:	e01f      	b.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
     cd4:	40000508 	.word	0x40000508
     cd8:	20000010 	.word	0x20000010
     cdc:	20033ea4 	.word	0x20033ea4
     ce0:	20034224 	.word	0x20034224
     ce4:	20000012 	.word	0x20000012
     ce8:	1e847fff 	.word	0x1e847fff
     cec:	07a12000 	.word	0x07a12000
     cf0:	f85ee000 	.word	0xf85ee000
     cf4:	1e848000 	.word	0x1e848000
     cf8:	003fffff 	.word	0x003fffff
     cfc:	4001f508 	.word	0x4001f508
     d00:	4001f098 	.word	0x4001f098
     d04:	4001f504 	.word	0x4001f504
     d08:	e035      	b.n	d76 <CONFIG_ISR_STACK_SIZE+0x576>
     d0a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
     d0e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d12:	b358      	cbz	r0, d6c <CONFIG_ISR_STACK_SIZE+0x56c>
     d14:	4c2b      	ldr	r4, [pc, #172]	; (dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>)
     d16:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d1a:	b150      	cbz	r0, d32 <CONFIG_ISR_STACK_SIZE+0x532>
     d1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d20:	f8c8 0000 	str.w	r0, [r8]
     d24:	2005      	movs	r0, #5
     d26:	f002 f821 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d2a:	f002 fb55 	bl	33d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d2e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d32:	ac0c      	add	r4, sp, #48	; 0x30
     d34:	4824      	ldr	r0, [pc, #144]	; (dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>)
     d36:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d3a:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d3e:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d42:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d46:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d4a:	e000      	b.n	d4e <CONFIG_ISR_STACK_SIZE+0x54e>
     d4c:	e018      	b.n	d80 <CONFIG_ISR_STACK_SIZE+0x580>
     d4e:	ac10      	add	r4, sp, #64	; 0x40
     d50:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d54:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d58:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d5c:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d60:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d64:	b01b      	add	sp, #108	; 0x6c
     d66:	2001      	movs	r0, #1
     d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d6c:	f002 fae8 	bl	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d70:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d74:	e78b      	b.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
     d76:	f240 3151 	movw	r1, #849	; 0x351
     d7a:	2070      	movs	r0, #112	; 0x70
     d7c:	f002 fc7e 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d80:	f002 fb1c 	bl	33bc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d84:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d88:	eba6 0009 	sub.w	r0, r6, r9
     d8c:	f1a0 0119 	sub.w	r1, r0, #25
     d90:	2900      	cmp	r1, #0
     d92:	dc04      	bgt.n	d9e <CONFIG_ISR_STACK_SIZE+0x59e>
     d94:	f640 2168 	movw	r1, #2664	; 0xa68
     d98:	2070      	movs	r0, #112	; 0x70
     d9a:	f002 fc6f 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d9e:	2203      	movs	r2, #3
     da0:	2301      	movs	r3, #1
     da2:	4610      	mov	r0, r2
     da4:	f001 ff1a 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     da8:	b138      	cbz	r0, dba <CONFIG_ISR_STACK_SIZE+0x5ba>
     daa:	4808      	ldr	r0, [pc, #32]	; (dcc <CONFIG_ISR_STACK_SIZE+0x5cc>)
     dac:	6880      	ldr	r0, [r0, #8]
     dae:	f8c0 b000 	str.w	fp, [r0]
     db2:	4807      	ldr	r0, [pc, #28]	; (dd0 <CONFIG_ISR_STACK_SIZE+0x5d0>)
     db4:	f8c0 b000 	str.w	fp, [r0]
     db8:	e7bb      	b.n	d32 <CONFIG_ISR_STACK_SIZE+0x532>
     dba:	f640 2173 	movw	r1, #2675	; 0xa73
     dbe:	2070      	movs	r0, #112	; 0x70
     dc0:	f002 fc5c 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dc4:	20034224 	.word	0x20034224
     dc8:	20033ea4 	.word	0x20033ea4
     dcc:	20000010 	.word	0x20000010
     dd0:	40000508 	.word	0x40000508
     dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dd8:	4606      	mov	r6, r0
     dda:	b083      	sub	sp, #12
     ddc:	7808      	ldrb	r0, [r1, #0]
     dde:	7390      	strb	r0, [r2, #14]
     de0:	7acf      	ldrb	r7, [r1, #11]
     de2:	7357      	strb	r7, [r2, #13]
     de4:	7a88      	ldrb	r0, [r1, #10]
     de6:	7310      	strb	r0, [r2, #12]
     de8:	8908      	ldrh	r0, [r1, #8]
     dea:	4614      	mov	r4, r2
     dec:	8150      	strh	r0, [r2, #10]
     dee:	460d      	mov	r5, r1
     df0:	780a      	ldrb	r2, [r1, #0]
     df2:	495f      	ldr	r1, [pc, #380]	; (f70 <CONFIG_ISR_STACK_SIZE+0x770>)
     df4:	4699      	mov	r9, r3
     df6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     dfa:	424b      	negs	r3, r1
     dfc:	f1ac 0801 	sub.w	r8, ip, #1
     e00:	b15a      	cbz	r2, e1a <CONFIG_ISR_STACK_SIZE+0x61a>
     e02:	43c0      	mvns	r0, r0
     e04:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e08:	f104 0208 	add.w	r2, r4, #8
     e0c:	4288      	cmp	r0, r1
     e0e:	dd3d      	ble.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
     e10:	f240 6117 	movw	r1, #1559	; 0x617
     e14:	2070      	movs	r0, #112	; 0x70
     e16:	f002 fc31 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e1a:	68ee      	ldr	r6, [r5, #12]
     e1c:	686d      	ldr	r5, [r5, #4]
     e1e:	ea6f 0900 	mvn.w	r9, r0
     e22:	f104 0208 	add.w	r2, r4, #8
     e26:	eb06 0009 	add.w	r0, r6, r9
     e2a:	4546      	cmp	r6, r8
     e2c:	d904      	bls.n	e38 <CONFIG_ISR_STACK_SIZE+0x638>
     e2e:	f240 6116 	movw	r1, #1558	; 0x616
     e32:	2070      	movs	r0, #112	; 0x70
     e34:	f002 fc22 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e38:	4589      	cmp	r9, r1
     e3a:	dce9      	bgt.n	e10 <CONFIG_ISR_STACK_SIZE+0x610>
     e3c:	4599      	cmp	r9, r3
     e3e:	db28      	blt.n	e92 <CONFIG_ISR_STACK_SIZE+0x692>
     e40:	4584      	cmp	ip, r0
     e42:	bfdc      	itt	le
     e44:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e48:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e4c:	dd05      	ble.n	e5a <CONFIG_ISR_STACK_SIZE+0x65a>
     e4e:	2800      	cmp	r0, #0
     e50:	bfbc      	itt	lt
     e52:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e56:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e5a:	4621      	mov	r1, r4
     e5c:	f001 fbe2 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e60:	6820      	ldr	r0, [r4, #0]
     e62:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e66:	1970      	adds	r0, r6, r5
     e68:	1c40      	adds	r0, r0, #1
     e6a:	6021      	str	r1, [r4, #0]
     e6c:	2f00      	cmp	r7, #0
     e6e:	bf08      	it	eq
     e70:	307a      	addeq	r0, #122	; 0x7a
     e72:	d003      	beq.n	e7c <CONFIG_ISR_STACK_SIZE+0x67c>
     e74:	2f01      	cmp	r7, #1
     e76:	bf08      	it	eq
     e78:	3044      	addeq	r0, #68	; 0x44
     e7a:	d12d      	bne.n	ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
     e7c:	f001 fbb6 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e80:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e84:	6060      	str	r0, [r4, #4]
     e86:	b003      	add	sp, #12
     e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e8c:	4601      	mov	r1, r0
     e8e:	4298      	cmp	r0, r3
     e90:	da04      	bge.n	e9c <CONFIG_ISR_STACK_SIZE+0x69c>
     e92:	f44f 61c3 	mov.w	r1, #1560	; 0x618
     e96:	2070      	movs	r0, #112	; 0x70
     e98:	f002 fbf0 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e9c:	4584      	cmp	ip, r0
     e9e:	bfdc      	itt	le
     ea0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     ea4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     ea8:	dd05      	ble.n	eb6 <CONFIG_ISR_STACK_SIZE+0x6b6>
     eaa:	2800      	cmp	r0, #0
     eac:	bfbc      	itt	lt
     eae:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     eb2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     eb6:	4621      	mov	r1, r4
     eb8:	f001 fbb4 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ebc:	6820      	ldr	r0, [r4, #0]
     ebe:	2f00      	cmp	r7, #0
     ec0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ec4:	f108 0001 	add.w	r0, r8, #1
     ec8:	6021      	str	r1, [r4, #0]
     eca:	bf08      	it	eq
     ecc:	307a      	addeq	r0, #122	; 0x7a
     ece:	d008      	beq.n	ee2 <CONFIG_ISR_STACK_SIZE+0x6e2>
     ed0:	2f01      	cmp	r7, #1
     ed2:	bf08      	it	eq
     ed4:	3044      	addeq	r0, #68	; 0x44
     ed6:	d004      	beq.n	ee2 <CONFIG_ISR_STACK_SIZE+0x6e2>
     ed8:	f240 61be 	movw	r1, #1726	; 0x6be
     edc:	2070      	movs	r0, #112	; 0x70
     ede:	f002 fbcd 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ee2:	f001 fb83 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ee6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     eea:	6061      	str	r1, [r4, #4]
     eec:	8960      	ldrh	r0, [r4, #10]
     eee:	aa01      	add	r2, sp, #4
     ef0:	4669      	mov	r1, sp
     ef2:	f001 fb97 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ef6:	481f      	ldr	r0, [pc, #124]	; (f74 <CONFIG_ISR_STACK_SIZE+0x774>)
     ef8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     efc:	2920      	cmp	r1, #32
     efe:	d023      	beq.n	f48 <CONFIG_ISR_STACK_SIZE+0x748>
     f00:	6900      	ldr	r0, [r0, #16]
     f02:	1d40      	adds	r0, r0, #5
     f04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f08:	e9d4 2100 	ldrd	r2, r1, [r4]
     f0c:	1a89      	subs	r1, r1, r2
     f0e:	6020      	str	r0, [r4, #0]
     f10:	4408      	add	r0, r1
     f12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f16:	6060      	str	r0, [r4, #4]
     f18:	464b      	mov	r3, r9
     f1a:	4632      	mov	r2, r6
     f1c:	4621      	mov	r1, r4
     f1e:	68e8      	ldr	r0, [r5, #12]
     f20:	f7ff fad2 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     f24:	2800      	cmp	r0, #0
     f26:	bf1c      	itt	ne
     f28:	b003      	addne	sp, #12
     f2a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f2e:	e9d4 1000 	ldrd	r1, r0, [r4]
     f32:	1a40      	subs	r0, r0, r1
     f34:	4430      	add	r0, r6
     f36:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f3e:	e9c4 1000 	strd	r1, r0, [r4]
     f42:	b003      	add	sp, #12
     f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f48:	8960      	ldrh	r0, [r4, #10]
     f4a:	f106 0709 	add.w	r7, r6, #9
     f4e:	b120      	cbz	r0, f5a <CONFIG_ISR_STACK_SIZE+0x75a>
     f50:	f002 fb30 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f54:	2800      	cmp	r0, #0
     f56:	bf08      	it	eq
     f58:	3732      	addeq	r7, #50	; 0x32
     f5a:	4807      	ldr	r0, [pc, #28]	; (f78 <CONFIG_ISR_STACK_SIZE+0x778>)
     f5c:	7841      	ldrb	r1, [r0, #1]
     f5e:	9800      	ldr	r0, [sp, #0]
     f60:	4281      	cmp	r1, r0
     f62:	bf84      	itt	hi
     f64:	1a08      	subhi	r0, r1, r0
     f66:	4407      	addhi	r7, r0
     f68:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f6c:	e7cc      	b.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
     f6e:	0000      	.short	0x0000
     f70:	07a12000 	.word	0x07a12000
     f74:	20034224 	.word	0x20034224
     f78:	20000012 	.word	0x20000012
     f7c:	b510      	push	{r4, lr}
     f7e:	4c15      	ldr	r4, [pc, #84]	; (fd4 <CONFIG_ISR_STACK_SIZE+0x7d4>)
     f80:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f84:	2820      	cmp	r0, #32
     f86:	bf18      	it	ne
     f88:	bd10      	popne	{r4, pc}
     f8a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f8e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f92:	f890 1020 	ldrb.w	r1, [r0, #32]
     f96:	2920      	cmp	r1, #32
     f98:	d017      	beq.n	fca <CONFIG_ISR_STACK_SIZE+0x7ca>
     f9a:	f8df c03c 	ldr.w	ip, [pc, #60]	; fd8 <CONFIG_ISR_STACK_SIZE+0x7d8>
     f9e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     fa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     fa6:	785b      	ldrb	r3, [r3, #1]
     fa8:	f880 3020 	strb.w	r3, [r0, #32]
     fac:	2301      	movs	r3, #1
     fae:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     fb2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fb6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fba:	2002      	movs	r0, #2
     fbc:	f000 f8b0 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
     fc0:	2000      	movs	r0, #0
     fc2:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fc6:	77a0      	strb	r0, [r4, #30]
     fc8:	bd10      	pop	{r4, pc}
     fca:	f240 319e 	movw	r1, #926	; 0x39e
     fce:	2070      	movs	r0, #112	; 0x70
     fd0:	f002 fb54 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fd4:	20034224 	.word	0x20034224
     fd8:	200341a4 	.word	0x200341a4
     fdc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fe0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
     fe4:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     fe8:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     fec:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ff0:	2c20      	cmp	r4, #32
     ff2:	bf08      	it	eq
     ff4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     ff8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
     ffc:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    1000:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1004:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1008:	2607      	movs	r6, #7
    100a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    100e:	2801      	cmp	r0, #1
    1010:	d00e      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1012:	2804      	cmp	r0, #4
    1014:	bf08      	it	eq
    1016:	2602      	moveq	r6, #2
    1018:	d00a      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    101a:	2805      	cmp	r0, #5
    101c:	bf0c      	ite	eq
    101e:	2603      	moveq	r6, #3
    1020:	2806      	cmpne	r0, #6
    1022:	d005      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1024:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1028:	f04f 0070 	mov.w	r0, #112	; 0x70
    102c:	f002 fb26 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1030:	f1bb 0f00 	cmp.w	fp, #0
    1034:	bf18      	it	ne
    1036:	f3af 8000 	nopne.w
    103a:	f3ef 8010 	mrs	r0, PRIMASK
    103e:	b672      	cpsid	i
    1040:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1044:	784a      	ldrb	r2, [r1, #1]
    1046:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    104a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    104e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1052:	42a2      	cmp	r2, r4
    1054:	bf04      	itt	eq
    1056:	2220      	moveq	r2, #32
    1058:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    105c:	b1b8      	cbz	r0, 108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    105e:	462a      	mov	r2, r5
    1060:	4621      	mov	r1, r4
    1062:	2001      	movs	r0, #1
    1064:	f000 f85c 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1068:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    106c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    1070:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1074:	6840      	ldr	r0, [r0, #4]
    1076:	4631      	mov	r1, r6
    1078:	4790      	blx	r2
    107a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    107e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1082:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1086:	2c20      	cmp	r4, #32
    1088:	d1bc      	bne.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    108a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    108e:	4806      	ldr	r0, [pc, #24]	; (10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>)
    1090:	2800      	cmp	r0, #0
    1092:	bf18      	it	ne
    1094:	f3af 8000 	nopne.w
    1098:	b662      	cpsie	i
    109a:	e7e0      	b.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
    109c:	20034224 	.word	0x20034224
    10a0:	00000000 	.word	0x00000000
    10a4:	200341a4 	.word	0x200341a4
    10a8:	00000000 	.word	0x00000000
    10ac:	b510      	push	{r4, lr}
    10ae:	4604      	mov	r4, r0
    10b0:	6800      	ldr	r0, [r0, #0]
    10b2:	f00a fa20 	bl	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10b6:	4602      	mov	r2, r0
    10b8:	8960      	ldrh	r0, [r4, #10]
    10ba:	7a21      	ldrb	r1, [r4, #8]
    10bc:	4b14      	ldr	r3, [pc, #80]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    10be:	4408      	add	r0, r1
    10c0:	1c41      	adds	r1, r0, #1
    10c2:	1850      	adds	r0, r2, r1
    10c4:	429a      	cmp	r2, r3
    10c6:	d904      	bls.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
    10c8:	f240 6116 	movw	r1, #1558	; 0x616
    10cc:	2070      	movs	r0, #112	; 0x70
    10ce:	f002 fad5 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10d2:	4a10      	ldr	r2, [pc, #64]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10d4:	4291      	cmp	r1, r2
    10d6:	dd04      	ble.n	10e2 <CONFIG_FPROTECT_BLOCK_SIZE+0xe2>
    10d8:	f240 6117 	movw	r1, #1559	; 0x617
    10dc:	2070      	movs	r0, #112	; 0x70
    10de:	f002 facd 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    10e4:	4291      	cmp	r1, r2
    10e6:	da04      	bge.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    10e8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    10ec:	2070      	movs	r0, #112	; 0x70
    10ee:	f002 fac5 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10f2:	490a      	ldr	r1, [pc, #40]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10f4:	4281      	cmp	r1, r0
    10f6:	bfde      	ittt	le
    10f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    10fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1100:	bd10      	pople	{r4, pc}
    1102:	2800      	cmp	r0, #0
    1104:	bfbc      	itt	lt
    1106:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    110a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    110e:	bd10      	pop	{r4, pc}
    1110:	1e847fff 	.word	0x1e847fff
    1114:	07a12000 	.word	0x07a12000
    1118:	f85ee000 	.word	0xf85ee000
    111c:	1e848000 	.word	0x1e848000
    1120:	f8df c054 	ldr.w	ip, [pc, #84]	; 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
    1124:	b510      	push	{r4, lr}
    1126:	2300      	movs	r3, #0
    1128:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    112c:	2807      	cmp	r0, #7
    112e:	d21e      	bcs.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1130:	e8df f000 	tbb	[pc, r0]
    1134:	05050505 	.word	0x05050505
    1138:	00040404 	.word	0x00040404
    113c:	2301      	movs	r3, #1
    113e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1142:	2b00      	cmp	r3, #0
    1144:	bf08      	it	eq
    1146:	bd10      	popeq	{r4, pc}
    1148:	480c      	ldr	r0, [pc, #48]	; (117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>)
    114a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    114e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1152:	2820      	cmp	r0, #32
    1154:	bf0e      	itee	eq
    1156:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    115a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    115e:	7041      	strbne	r1, [r0, #1]
    1160:	2020      	movs	r0, #32
    1162:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1166:	7058      	strb	r0, [r3, #1]
    1168:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    116c:	bd10      	pop	{r4, pc}
    116e:	f240 2167 	movw	r1, #615	; 0x267
    1172:	2070      	movs	r0, #112	; 0x70
    1174:	f002 fa82 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1178:	200341a4 	.word	0x200341a4
    117c:	20034224 	.word	0x20034224
    1180:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1184:	b083      	sub	sp, #12
    1186:	485c      	ldr	r0, [pc, #368]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1188:	9904      	ldr	r1, [sp, #16]
    118a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    118e:	9001      	str	r0, [sp, #4]
    1190:	f890 4020 	ldrb.w	r4, [r0, #32]
    1194:	9803      	ldr	r0, [sp, #12]
    1196:	4625      	mov	r5, r4
    1198:	2801      	cmp	r0, #1
    119a:	bf18      	it	ne
    119c:	2802      	cmpne	r0, #2
    119e:	d005      	beq.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    11a0:	f640 21af 	movw	r1, #2735	; 0xaaf
    11a4:	f04f 0070 	mov.w	r0, #112	; 0x70
    11a8:	f002 fa68 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11ac:	2700      	movs	r7, #0
    11ae:	2d20      	cmp	r5, #32
    11b0:	d04a      	beq.n	1248 <CONFIG_FPROTECT_BLOCK_SIZE+0x248>
    11b2:	4851      	ldr	r0, [pc, #324]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    11b4:	9100      	str	r1, [sp, #0]
    11b6:	2600      	movs	r6, #0
    11b8:	7f80      	ldrb	r0, [r0, #30]
    11ba:	2800      	cmp	r0, #0
    11bc:	bf08      	it	eq
    11be:	2602      	moveq	r6, #2
    11c0:	f001 fb86 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11c4:	f8df a138 	ldr.w	sl, [pc, #312]	; 1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
    11c8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11cc:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11d0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
    11d4:	688a      	ldr	r2, [r1, #8]
    11d6:	68c9      	ldr	r1, [r1, #12]
    11d8:	1a12      	subs	r2, r2, r0
    11da:	1a09      	subs	r1, r1, r0
    11dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11e4:	4296      	cmp	r6, r2
    11e6:	bf98      	it	ls
    11e8:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11ec:	d201      	bcs.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    11ee:	4589      	cmp	r9, r1
    11f0:	d228      	bcs.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    11f2:	4a44      	ldr	r2, [pc, #272]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    11f4:	9900      	ldr	r1, [sp, #0]
    11f6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    11fa:	4622      	mov	r2, r4
    11fc:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1200:	784c      	ldrb	r4, [r1, #1]
    1202:	2c20      	cmp	r4, #32
    1204:	d016      	beq.n	1234 <CONFIG_FPROTECT_BLOCK_SIZE+0x234>
    1206:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    120a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    120e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1212:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1216:	eba8 0800 	sub.w	r8, r8, r0
    121a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    121e:	ebac 0100 	sub.w	r1, ip, r0
    1222:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1226:	4546      	cmp	r6, r8
    1228:	bf98      	it	ls
    122a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    122e:	d2e4      	bcs.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1230:	4589      	cmp	r9, r1
    1232:	d3e2      	bcc.n	11fa <CONFIG_FPROTECT_BLOCK_SIZE+0x1fa>
    1234:	2a20      	cmp	r2, #32
    1236:	d005      	beq.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
    1238:	2120      	movs	r1, #32
    123a:	2004      	movs	r0, #4
    123c:	9b00      	ldr	r3, [sp, #0]
    123e:	f7ff f907 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1242:	4604      	mov	r4, r0
    1244:	42ac      	cmp	r4, r5
    1246:	d115      	bne.n	1274 <CONFIG_FPROTECT_BLOCK_SIZE+0x274>
    1248:	482f      	ldr	r0, [pc, #188]	; (1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>)
    124a:	2800      	cmp	r0, #0
    124c:	bf18      	it	ne
    124e:	f3af 8000 	nopne.w
    1252:	f001 fb3d 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1256:	4c28      	ldr	r4, [pc, #160]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1258:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    125c:	2920      	cmp	r1, #32
    125e:	d00d      	beq.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1260:	68e1      	ldr	r1, [r4, #12]
    1262:	1c82      	adds	r2, r0, #2
    1264:	1a51      	subs	r1, r2, r1
    1266:	0209      	lsls	r1, r1, #8
    1268:	17ca      	asrs	r2, r1, #31
    126a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    126e:	1209      	asrs	r1, r1, #8
    1270:	2900      	cmp	r1, #0
    1272:	dd03      	ble.n	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
    1274:	b005      	add	sp, #20
    1276:	2000      	movs	r0, #0
    1278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    127c:	2d20      	cmp	r5, #32
    127e:	d00d      	beq.n	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
    1280:	462a      	mov	r2, r5
    1282:	9903      	ldr	r1, [sp, #12]
    1284:	f7ff fb16 	bl	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
    1288:	b358      	cbz	r0, 12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
    128a:	9801      	ldr	r0, [sp, #4]
    128c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    1290:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    1294:	b005      	add	sp, #20
    1296:	2001      	movs	r0, #1
    1298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    129c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    12a0:	b118      	cbz	r0, 12aa <CONFIG_FPROTECT_BLOCK_SIZE+0x2aa>
    12a2:	f002 f831 	bl	3308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    12a6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    12aa:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    12ae:	b150      	cbz	r0, 12c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c6>
    12b0:	4916      	ldr	r1, [pc, #88]	; (130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>)
    12b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12b6:	6008      	str	r0, [r1, #0]
    12b8:	2005      	movs	r0, #5
    12ba:	f001 fd57 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12be:	f002 f88b 	bl	33d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12c2:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12c6:	2004      	movs	r0, #4
    12c8:	f001 fd50 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12cc:	f001 fdb6 	bl	2e3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12d0:	2020      	movs	r0, #32
    12d2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12d6:	480e      	ldr	r0, [pc, #56]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    12d8:	6880      	ldr	r0, [r0, #8]
    12da:	6007      	str	r7, [r0, #0]
    12dc:	480d      	ldr	r0, [pc, #52]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    12de:	6007      	str	r7, [r0, #0]
    12e0:	e7d8      	b.n	1294 <CONFIG_FPROTECT_BLOCK_SIZE+0x294>
    12e2:	462a      	mov	r2, r5
    12e4:	2120      	movs	r1, #32
    12e6:	2004      	movs	r0, #4
    12e8:	9b04      	ldr	r3, [sp, #16]
    12ea:	f7ff f8b1 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12ee:	b005      	add	sp, #20
    12f0:	2000      	movs	r0, #0
    12f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12f6:	0000      	.short	0x0000
    12f8:	20034224 	.word	0x20034224
    12fc:	003fffff 	.word	0x003fffff
    1300:	20033ea4 	.word	0x20033ea4
    1304:	200341a4 	.word	0x200341a4
    1308:	00000000 	.word	0x00000000
    130c:	4001f508 	.word	0x4001f508
    1310:	20000010 	.word	0x20000010
    1314:	40000508 	.word	0x40000508

00001318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1318:	4906      	ldr	r1, [pc, #24]	; (1334 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    131a:	b510      	push	{r4, lr}
    131c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1320:	2a20      	cmp	r2, #32
    1322:	bf1c      	itt	ne
    1324:	7788      	strbne	r0, [r1, #30]
    1326:	bd10      	popne	{r4, pc}
    1328:	f240 31fd 	movw	r1, #1021	; 0x3fd
    132c:	2070      	movs	r0, #112	; 0x70
    132e:	f002 f9a5 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1332:	0000      	.short	0x0000
    1334:	20034224 	.word	0x20034224

00001338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    133c:	4e5b      	ldr	r6, [pc, #364]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    133e:	4681      	mov	r9, r0
    1340:	b085      	sub	sp, #20
    1342:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1346:	468a      	mov	sl, r1
    1348:	2820      	cmp	r0, #32
    134a:	d04d      	beq.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    134c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1350:	f106 040c 	add.w	r4, r6, #12
    1354:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1358:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    135c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1360:	2020      	movs	r0, #32
    1362:	f88d 0000 	strb.w	r0, [sp]
    1366:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    136a:	aa03      	add	r2, sp, #12
    136c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1370:	a901      	add	r1, sp, #4
    1372:	f890 5020 	ldrb.w	r5, [r0, #32]
    1376:	6930      	ldr	r0, [r6, #16]
    1378:	9002      	str	r0, [sp, #8]
    137a:	6830      	ldr	r0, [r6, #0]
    137c:	4448      	add	r0, r9
    137e:	f001 f951 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1382:	68f8      	ldr	r0, [r7, #12]
    1384:	9901      	ldr	r1, [sp, #4]
    1386:	4a4a      	ldr	r2, [pc, #296]	; (14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>)
    1388:	4408      	add	r0, r1
    138a:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    138e:	4291      	cmp	r1, r2
    1390:	d82f      	bhi.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    1392:	68b9      	ldr	r1, [r7, #8]
    1394:	1a41      	subs	r1, r0, r1
    1396:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    139a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    139e:	d228      	bcs.n	13f2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a>
    13a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13a4:	6060      	str	r0, [r4, #4]
    13a6:	4630      	mov	r0, r6
    13a8:	f884 a00c 	strb.w	sl, [r4, #12]
    13ac:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13b0:	46ea      	mov	sl, sp
    13b2:	2d20      	cmp	r5, #32
    13b4:	bf1c      	itt	ne
    13b6:	493f      	ldrne	r1, [pc, #252]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    13b8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13bc:	d03c      	beq.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13be:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13c2:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13c6:	6860      	ldr	r0, [r4, #4]
    13c8:	68ba      	ldr	r2, [r7, #8]
    13ca:	4621      	mov	r1, r4
    13cc:	1a10      	subs	r0, r2, r0
    13ce:	0200      	lsls	r0, r0, #8
    13d0:	17c2      	asrs	r2, r0, #31
    13d2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13d6:	f107 0608 	add.w	r6, r7, #8
    13da:	1200      	asrs	r0, r0, #8
    13dc:	d41b      	bmi.n	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
    13de:	8970      	ldrh	r0, [r6, #10]
    13e0:	b350      	cbz	r0, 1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13e2:	8948      	ldrh	r0, [r1, #10]
    13e4:	b148      	cbz	r0, 13fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x72>
    13e6:	e027      	b.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    13e8:	f640 3173 	movw	r1, #2931	; 0xb73
    13ec:	2070      	movs	r0, #112	; 0x70
    13ee:	f002 f945 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13f2:	b005      	add	sp, #20
    13f4:	2001      	movs	r0, #1
    13f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13fa:	4620      	mov	r0, r4
    13fc:	f7ff fe56 	bl	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1400:	f001 f8f4 	bl	25ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1404:	6831      	ldr	r1, [r6, #0]
    1406:	1a08      	subs	r0, r1, r0
    1408:	0200      	lsls	r0, r0, #8
    140a:	17c1      	asrs	r1, r0, #31
    140c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1410:	1200      	asrs	r0, r0, #8
    1412:	2833      	cmp	r0, #51	; 0x33
    1414:	da10      	bge.n	1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>
    1416:	f88a 5000 	strb.w	r5, [sl]
    141a:	7d39      	ldrb	r1, [r7, #20]
    141c:	7b20      	ldrb	r0, [r4, #12]
    141e:	4281      	cmp	r1, r0
    1420:	d805      	bhi.n	142e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa6>
    1422:	9802      	ldr	r0, [sp, #8]
    1424:	6060      	str	r0, [r4, #4]
    1426:	b005      	add	sp, #20
    1428:	2002      	movs	r0, #2
    142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    142e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1432:	7845      	ldrb	r5, [r0, #1]
    1434:	2d20      	cmp	r5, #32
    1436:	d1c2      	bne.n	13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
    1438:	2005      	movs	r0, #5
    143a:	f001 fc97 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    143e:	4c1b      	ldr	r4, [pc, #108]	; (14ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124>)
    1440:	f04f 30ff 	mov.w	r0, #4294967295
    1444:	60a0      	str	r0, [r4, #8]
    1446:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    144a:	f89d 2000 	ldrb.w	r2, [sp]
    144e:	2120      	movs	r1, #32
    1450:	2a20      	cmp	r2, #32
    1452:	bf13      	iteet	ne
    1454:	2005      	movne	r0, #5
    1456:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    145a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    145e:	f7fe fff7 	blne	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1462:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1466:	4913      	ldr	r1, [pc, #76]	; (14b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12c>)
    1468:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    146c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    1470:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1474:	7048      	strb	r0, [r1, #1]
    1476:	6820      	ldr	r0, [r4, #0]
    1478:	4448      	add	r0, r9
    147a:	6020      	str	r0, [r4, #0]
    147c:	2001      	movs	r0, #1
    147e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    1482:	7e60      	ldrb	r0, [r4, #25]
    1484:	2801      	cmp	r0, #1
    1486:	d105      	bne.n	1494 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10c>
    1488:	6920      	ldr	r0, [r4, #16]
    148a:	1e40      	subs	r0, r0, #1
    148c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1490:	f001 fabe 	bl	2a10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1494:	f89d 0000 	ldrb.w	r0, [sp]
    1498:	2820      	cmp	r0, #32
    149a:	d003      	beq.n	14a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11c>
    149c:	4806      	ldr	r0, [pc, #24]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    149e:	7840      	ldrb	r0, [r0, #1]
    14a0:	f002 f9bc 	bl	381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14a4:	b005      	add	sp, #20
    14a6:	2000      	movs	r0, #0
    14a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14ac:	20034224 	.word	0x20034224
    14b0:	07a11f9c 	.word	0x07a11f9c
    14b4:	200341a4 	.word	0x200341a4
    14b8:	20000010 	.word	0x20000010

000014bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    14bc:	4602      	mov	r2, r0
    14be:	4b14      	ldr	r3, [pc, #80]	; (1510 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    14c0:	b510      	push	{r4, lr}
    14c2:	4408      	add	r0, r1
    14c4:	429a      	cmp	r2, r3
    14c6:	d904      	bls.n	14d2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    14c8:	f240 6116 	movw	r1, #1558	; 0x616
    14cc:	2070      	movs	r0, #112	; 0x70
    14ce:	f002 f8d5 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14d2:	4a10      	ldr	r2, [pc, #64]	; (1514 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    14d4:	4291      	cmp	r1, r2
    14d6:	dd04      	ble.n	14e2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    14d8:	f240 6117 	movw	r1, #1559	; 0x617
    14dc:	2070      	movs	r0, #112	; 0x70
    14de:	f002 f8cd 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e2:	4a0d      	ldr	r2, [pc, #52]	; (1518 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    14e4:	4291      	cmp	r1, r2
    14e6:	da04      	bge.n	14f2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    14e8:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    14ec:	2070      	movs	r0, #112	; 0x70
    14ee:	f002 f8c5 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14f2:	490a      	ldr	r1, [pc, #40]	; (151c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    14f4:	4281      	cmp	r1, r0
    14f6:	bfde      	ittt	le
    14f8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    14fc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1500:	bd10      	pople	{r4, pc}
    1502:	2800      	cmp	r0, #0
    1504:	bfbc      	itt	lt
    1506:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    150a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    150e:	bd10      	pop	{r4, pc}
    1510:	1e847fff 	.word	0x1e847fff
    1514:	07a12000 	.word	0x07a12000
    1518:	f85ee000 	.word	0xf85ee000
    151c:	1e848000 	.word	0x1e848000

00001520 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1520:	4a10      	ldr	r2, [pc, #64]	; (1564 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1522:	1a0b      	subs	r3, r1, r0
    1524:	f102 0c01 	add.w	ip, r2, #1
    1528:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    152c:	bf3c      	itt	cc
    152e:	4618      	movcc	r0, r3
    1530:	4770      	bxcc	lr
    1532:	b510      	push	{r4, lr}
    1534:	1a44      	subs	r4, r0, r1
    1536:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    153a:	bf3c      	itt	cc
    153c:	4618      	movcc	r0, r3
    153e:	bd10      	popcc	{r4, pc}
    1540:	429a      	cmp	r2, r3
    1542:	d203      	bcs.n	154c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1544:	1a10      	subs	r0, r2, r0
    1546:	4408      	add	r0, r1
    1548:	1c40      	adds	r0, r0, #1
    154a:	bd10      	pop	{r4, pc}
    154c:	42a2      	cmp	r2, r4
    154e:	d204      	bcs.n	155a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1550:	1a51      	subs	r1, r2, r1
    1552:	4408      	add	r0, r1
    1554:	1c40      	adds	r0, r0, #1
    1556:	4240      	negs	r0, r0
    1558:	bd10      	pop	{r4, pc}
    155a:	f640 310b 	movw	r1, #2827	; 0xb0b
    155e:	2070      	movs	r0, #112	; 0x70
    1560:	f002 f88c 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1564:	1e847fff 	.word	0x1e847fff

00001568 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1568:	490e      	ldr	r1, [pc, #56]	; (15a4 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    156a:	b510      	push	{r4, lr}
    156c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1570:	2820      	cmp	r0, #32
    1572:	d012      	beq.n	159a <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1574:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1578:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    157c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1580:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    1584:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    1588:	6840      	ldr	r0, [r0, #4]
    158a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    158e:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    1592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1596:	2104      	movs	r1, #4
    1598:	4710      	bx	r2
    159a:	f640 01bb 	movw	r1, #2235	; 0x8bb
    159e:	2070      	movs	r0, #112	; 0x70
    15a0:	f002 f86c 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15a4:	20034224 	.word	0x20034224

000015a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    15a8:	b570      	push	{r4, r5, r6, lr}
    15aa:	4d6a      	ldr	r5, [pc, #424]	; (1754 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ac>)
    15ac:	496a      	ldr	r1, [pc, #424]	; (1758 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b0>)
    15ae:	2601      	movs	r6, #1
    15b0:	f505 7460 	add.w	r4, r5, #896	; 0x380
    15b4:	2808      	cmp	r0, #8
    15b6:	d27d      	bcs.n	16b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    15b8:	e8df f000 	tbb	[pc, r0]
    15bc:	a9976104 	.word	0xa9976104
    15c0:	b3ae43c6 	.word	0xb3ae43c6
    15c4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    15c8:	b918      	cbnz	r0, 15d2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    15ca:	f001 feb9 	bl	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15ce:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    15d2:	8ae0      	ldrh	r0, [r4, #22]
    15d4:	b110      	cbz	r0, 15dc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    15d6:	f001 ffed 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    15da:	b188      	cbz	r0, 1600 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    15dc:	f7ff fcce 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    15e0:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    15e4:	68a1      	ldr	r1, [r4, #8]
    15e6:	f1b1 3fff 	cmp.w	r1, #4294967295
    15ea:	d005      	beq.n	15f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    15ec:	2301      	movs	r3, #1
    15ee:	2203      	movs	r2, #3
    15f0:	2005      	movs	r0, #5
    15f2:	f001 faf3 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    15f6:	b140      	cbz	r0, 160a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    15f8:	7e60      	ldrb	r0, [r4, #25]
    15fa:	2801      	cmp	r0, #1
    15fc:	d110      	bne.n	1620 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    15fe:	e009      	b.n	1614 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    1600:	f640 016f 	movw	r1, #2159	; 0x86f
    1604:	2070      	movs	r0, #112	; 0x70
    1606:	f002 f839 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    160a:	f640 0174 	movw	r1, #2164	; 0x874
    160e:	2070      	movs	r0, #112	; 0x70
    1610:	f002 f834 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1614:	6920      	ldr	r0, [r4, #16]
    1616:	1e40      	subs	r0, r0, #1
    1618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    161c:	f001 f9f8 	bl	2a10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    1620:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1624:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1628:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    162c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1630:	6840      	ldr	r0, [r0, #4]
    1632:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1636:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    163a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    163e:	2101      	movs	r1, #1
    1640:	4710      	bx	r2
    1642:	f7ff fc9b 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    1646:	f04f 30ff 	mov.w	r0, #4294967295
    164a:	60a0      	str	r0, [r4, #8]
    164c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    1650:	b180      	cbz	r0, 1674 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xcc>
    1652:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1656:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    165a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    165e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1662:	6840      	ldr	r0, [r0, #4]
    1664:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1668:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    166c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1670:	2106      	movs	r1, #6
    1672:	4710      	bx	r2
    1674:	f640 0185 	movw	r1, #2181	; 0x885
    1678:	2070      	movs	r0, #112	; 0x70
    167a:	f001 ffff 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    167e:	f7ff fc7d 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    1682:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    1686:	f001 ff95 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    168a:	b118      	cbz	r0, 1694 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xec>
    168c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    1690:	b128      	cbz	r0, 169e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf6>
    1692:	e008      	b.n	16a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    1694:	f640 0195 	movw	r1, #2197	; 0x895
    1698:	2070      	movs	r0, #112	; 0x70
    169a:	f001 ffef 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    169e:	f001 fe4f 	bl	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16a2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16a6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16aa:	b168      	cbz	r0, 16c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x120>
    16ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16b0:	492a      	ldr	r1, [pc, #168]	; (175c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>)
    16b2:	e000      	b.n	16b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    16b4:	e048      	b.n	1748 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1a0>
    16b6:	6008      	str	r0, [r1, #0]
    16b8:	2005      	movs	r0, #5
    16ba:	f001 fb57 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16be:	f001 fe8b 	bl	33d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16c2:	2000      	movs	r0, #0
    16c4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    16c8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    16cc:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    16d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    16d4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    16d8:	6840      	ldr	r0, [r0, #4]
    16da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    16de:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    16e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16e6:	2100      	movs	r1, #0
    16e8:	4710      	bx	r2
    16ea:	f001 fbf1 	bl	2ed0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    16ee:	8ae0      	ldrh	r0, [r4, #22]
    16f0:	b110      	cbz	r0, 16f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x150>
    16f2:	f001 ff5f 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16f6:	b128      	cbz	r0, 1704 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    16f8:	4819      	ldr	r0, [pc, #100]	; (1760 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    16fa:	7800      	ldrb	r0, [r0, #0]
    16fc:	2803      	cmp	r0, #3
    16fe:	bf08      	it	eq
    1700:	7766      	strbeq	r6, [r4, #29]
    1702:	bd70      	pop	{r4, r5, r6, pc}
    1704:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    1708:	2070      	movs	r0, #112	; 0x70
    170a:	f001 ffb7 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    170e:	4815      	ldr	r0, [pc, #84]	; (1764 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    1710:	6006      	str	r6, [r0, #0]
    1712:	6888      	ldr	r0, [r1, #8]
    1714:	6006      	str	r6, [r0, #0]
    1716:	bd70      	pop	{r4, r5, r6, pc}
    1718:	7808      	ldrb	r0, [r1, #0]
    171a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    171e:	f002 b87d 	b.w	381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1722:	f7ff fc2b 	bl	f7c <CONFIG_ISR_STACK_SIZE+0x77c>
    1726:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    172a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    172e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1732:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1736:	6840      	ldr	r0, [r0, #4]
    1738:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    173c:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1744:	2105      	movs	r1, #5
    1746:	4710      	bx	r2
    1748:	f640 01b3 	movw	r1, #2227	; 0x8b3
    174c:	2070      	movs	r0, #112	; 0x70
    174e:	f001 ff95 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1752:	0000      	.short	0x0000
    1754:	20033ea4 	.word	0x20033ea4
    1758:	20000010 	.word	0x20000010
    175c:	4001f508 	.word	0x4001f508
    1760:	20000012 	.word	0x20000012
    1764:	40000508 	.word	0x40000508

00001768 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    1768:	4803      	ldr	r0, [pc, #12]	; (1778 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    176a:	b510      	push	{r4, lr}
    176c:	7840      	ldrb	r0, [r0, #1]
    176e:	f009 fec2 	bl	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1772:	b280      	uxth	r0, r0
    1774:	bd10      	pop	{r4, pc}
    1776:	0000      	.short	0x0000
    1778:	20000012 	.word	0x20000012

0000177c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    177c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1780:	4682      	mov	sl, r0
    1782:	48d1      	ldr	r0, [pc, #836]	; (1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>)
    1784:	b08b      	sub	sp, #44	; 0x2c
    1786:	6800      	ldr	r0, [r0, #0]
    1788:	4dd0      	ldr	r5, [pc, #832]	; (1acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x350>)
    178a:	05c0      	lsls	r0, r0, #23
    178c:	0dc0      	lsrs	r0, r0, #23
    178e:	d00e      	beq.n	17ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    1790:	3810      	subs	r0, #16
    1792:	b240      	sxtb	r0, r0
    1794:	2800      	cmp	r0, #0
    1796:	bfb8      	it	lt
    1798:	f000 000f 	andlt.w	r0, r0, #15
    179c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    17a0:	bfac      	ite	ge
    17a2:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    17a6:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    17aa:	0940      	lsrs	r0, r0, #5
    17ac:	d00d      	beq.n	17ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    17ae:	980c      	ldr	r0, [sp, #48]	; 0x30
    17b0:	f04f 0b00 	mov.w	fp, #0
    17b4:	7800      	ldrb	r0, [r0, #0]
    17b6:	2800      	cmp	r0, #0
    17b8:	bf18      	it	ne
    17ba:	2801      	cmpne	r0, #1
    17bc:	d018      	beq.n	17f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17be:	f240 715c 	movw	r1, #1884	; 0x75c
    17c2:	f04f 0070 	mov.w	r0, #112	; 0x70
    17c6:	f001 ff59 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17ca:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    17ce:	f04f 0b01 	mov.w	fp, #1
    17d2:	2820      	cmp	r0, #32
    17d4:	d007      	beq.n	17e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    17d6:	980c      	ldr	r0, [sp, #48]	; 0x30
    17d8:	7800      	ldrb	r0, [r0, #0]
    17da:	b148      	cbz	r0, 17f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17dc:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    17e0:	2070      	movs	r0, #112	; 0x70
    17e2:	f001 ff4b 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17e6:	f240 7155 	movw	r1, #1877	; 0x755
    17ea:	2070      	movs	r0, #112	; 0x70
    17ec:	f001 ff46 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17f0:	4cb7      	ldr	r4, [pc, #732]	; (1ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>)
    17f2:	b124      	cbz	r4, 17fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    17f4:	2100      	movs	r1, #0
    17f6:	f240 705f 	movw	r0, #1887	; 0x75f
    17fa:	f3af 8000 	nop.w
    17fe:	49b5      	ldr	r1, [pc, #724]	; (1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>)
    1800:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1804:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1808:	f04f 0801 	mov.w	r8, #1
    180c:	9000      	str	r0, [sp, #0]
    180e:	b124      	cbz	r4, 181a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1810:	2100      	movs	r1, #0
    1812:	f240 7067 	movw	r0, #1895	; 0x767
    1816:	f3af 8000 	nop.w
    181a:	f1b8 0f00 	cmp.w	r8, #0
    181e:	d009      	beq.n	1834 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1820:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1824:	f04f 0900 	mov.w	r9, #0
    1828:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    182c:	f1bb 0f00 	cmp.w	fp, #0
    1830:	d007      	beq.n	1842 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1832:	e02e      	b.n	1892 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    1834:	48a8      	ldr	r0, [pc, #672]	; (1ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1836:	2800      	cmp	r0, #0
    1838:	bf18      	it	ne
    183a:	f3af 8000 	nopne.w
    183e:	b662      	cpsie	i
    1840:	e7ee      	b.n	1820 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1842:	4637      	mov	r7, r6
    1844:	2001      	movs	r0, #1
    1846:	ea20 0607 	bic.w	r6, r0, r7
    184a:	48a4      	ldr	r0, [pc, #656]	; (1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    184c:	2240      	movs	r2, #64	; 0x40
    184e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1852:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1856:	f009 ffbc 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    185a:	b124      	cbz	r4, 1866 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    185c:	2100      	movs	r1, #0
    185e:	f240 50da 	movw	r0, #1498	; 0x5da
    1862:	f3af 8000 	nop.w
    1866:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    186a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    186e:	6a09      	ldr	r1, [r1, #32]
    1870:	6201      	str	r1, [r0, #32]
    1872:	b124      	cbz	r4, 187e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1874:	2100      	movs	r1, #0
    1876:	f240 50de 	movw	r0, #1502	; 0x5de
    187a:	f3af 8000 	nop.w
    187e:	b124      	cbz	r4, 188a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1880:	2100      	movs	r1, #0
    1882:	f240 7071 	movw	r0, #1905	; 0x771
    1886:	f3af 8000 	nop.w
    188a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    188e:	2800      	cmp	r0, #0
    1890:	d1bd      	bne.n	180e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1892:	b124      	cbz	r4, 189e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    1894:	2100      	movs	r1, #0
    1896:	f240 707b 	movw	r0, #1915	; 0x77b
    189a:	f3af 8000 	nop.w
    189e:	f001 f817 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18a2:	4680      	mov	r8, r0
    18a4:	4633      	mov	r3, r6
    18a6:	aa06      	add	r2, sp, #24
    18a8:	990c      	ldr	r1, [sp, #48]	; 0x30
    18aa:	f7ff fa93 	bl	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
    18ae:	b124      	cbz	r4, 18ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    18b0:	2100      	movs	r1, #0
    18b2:	f240 7082 	movw	r0, #1922	; 0x782
    18b6:	f3af 8000 	nop.w
    18ba:	4988      	ldr	r1, [pc, #544]	; (1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x360>)
    18bc:	a806      	add	r0, sp, #24
    18be:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    18c2:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    18c6:	2901      	cmp	r1, #1
    18c8:	bf18      	it	ne
    18ca:	2902      	cmpne	r1, #2
    18cc:	d13e      	bne.n	194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    18ce:	9906      	ldr	r1, [sp, #24]
    18d0:	9b07      	ldr	r3, [sp, #28]
    18d2:	eba1 0108 	sub.w	r1, r1, r8
    18d6:	4a82      	ldr	r2, [pc, #520]	; (1ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>)
    18d8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    18dc:	eba3 0308 	sub.w	r3, r3, r8
    18e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    18e4:	2902      	cmp	r1, #2
    18e6:	d36a      	bcc.n	19be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18e8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    18ec:	d267      	bcs.n	19be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18ee:	429a      	cmp	r2, r3
    18f0:	d365      	bcc.n	19be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x242>
    18f2:	f04f 0901 	mov.w	r9, #1
    18f6:	ab01      	add	r3, sp, #4
    18f8:	aa05      	add	r2, sp, #20
    18fa:	4631      	mov	r1, r6
    18fc:	f7fe ff5a 	bl	7b4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x1b4>
    1900:	2800      	cmp	r0, #0
    1902:	d064      	beq.n	19ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x252>
    1904:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1908:	f89d 2004 	ldrb.w	r2, [sp, #4]
    190c:	4633      	mov	r3, r6
    190e:	428a      	cmp	r2, r1
    1910:	d061      	beq.n	19d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x25a>
    1912:	2005      	movs	r0, #5
    1914:	f7fe fd9c 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1918:	ea4f 0100 	mov.w	r1, r0
    191c:	eb07 004a 	add.w	r0, r7, sl, lsl #1
    1920:	7041      	strb	r1, [r0, #1]
    1922:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1926:	2820      	cmp	r0, #32
    1928:	bf03      	ittte	eq
    192a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    192e:	f880 a020 	strbeq.w	sl, [r0, #32]
    1932:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1936:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    193a:	bf18      	it	ne
    193c:	f880 a001 	strbne.w	sl, [r0, #1]
    1940:	4632      	mov	r2, r6
    1942:	4651      	mov	r1, sl
    1944:	f05f 0003 	movs.w	r0, #3
    1948:	f7ff fbea 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    194c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1950:	f890 7023 	ldrb.w	r7, [r0, #35]	; 0x23
    1954:	b124      	cbz	r4, 1960 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e4>
    1956:	2100      	movs	r1, #0
    1958:	f240 7089 	movw	r0, #1929	; 0x789
    195c:	f3af 8000 	nop.w
    1960:	4860      	ldr	r0, [pc, #384]	; (1ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>)
    1962:	2800      	cmp	r0, #0
    1964:	bf18      	it	ne
    1966:	f3af 8000 	nopne.w
    196a:	f3ef 8810 	mrs	r8, PRIMASK
    196e:	b672      	cpsid	i
    1970:	b124      	cbz	r4, 197c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x200>
    1972:	2100      	movs	r1, #0
    1974:	f240 708f 	movw	r0, #1935	; 0x78f
    1978:	f3af 8000 	nop.w
    197c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1980:	2800      	cmp	r0, #0
    1982:	f47f af44 	bne.w	180e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1986:	b124      	cbz	r4, 1992 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x216>
    1988:	2100      	movs	r1, #0
    198a:	f240 7097 	movw	r0, #1943	; 0x797
    198e:	f3af 8000 	nop.w
    1992:	f10d 0e18 	add.w	lr, sp, #24
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    199c:	f100 0008 	add.w	r0, r0, #8
    19a0:	f1b9 0f00 	cmp.w	r9, #0
    19a4:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    19a8:	d042      	beq.n	1a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    19aa:	b124      	cbz	r4, 19b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x23a>
    19ac:	2100      	movs	r1, #0
    19ae:	f240 70a4 	movw	r0, #1956	; 0x7a4
    19b2:	f3af 8000 	nop.w
    19b6:	f1bb 0f00 	cmp.w	fp, #0
    19ba:	d12b      	bne.n	1a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19bc:	e015      	b.n	19ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26e>
    19be:	4632      	mov	r2, r6
    19c0:	4651      	mov	r1, sl
    19c2:	2004      	movs	r0, #4
    19c4:	f7ff fbac 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    19c8:	f04f 0901 	mov.w	r9, #1
    19cc:	e7be      	b.n	194c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    19ce:	4632      	mov	r2, r6
    19d0:	4651      	mov	r1, sl
    19d2:	2004      	movs	r0, #4
    19d4:	e7b8      	b.n	1948 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1cc>
    19d6:	2920      	cmp	r1, #32
    19d8:	bf19      	ittee	ne
    19da:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    19de:	7841      	ldrbne	r1, [r0, #1]
    19e0:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    19e4:	f890 1020 	ldrbeq.w	r1, [r0, #32]
    19e8:	e798      	b.n	191c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a0>
    19ea:	b19f      	cbz	r7, 1a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19ec:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    19f0:	2820      	cmp	r0, #32
    19f2:	d10f      	bne.n	1a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    19f4:	b124      	cbz	r4, 1a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    19f6:	2100      	movs	r1, #0
    19f8:	f240 70a9 	movw	r0, #1961	; 0x7a9
    19fc:	f3af 8000 	nop.w
    1a00:	4631      	mov	r1, r6
    1a02:	2002      	movs	r0, #2
    1a04:	f7ff fbbc 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1a08:	b920      	cbnz	r0, 1a14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    1a0a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a0c:	7800      	ldrb	r0, [r0, #0]
    1a0e:	b3e8      	cbz	r0, 1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x310>
    1a10:	2801      	cmp	r0, #1
    1a12:	d049      	beq.n	1aa8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    1a14:	b124      	cbz	r4, 1a20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a4>
    1a16:	2100      	movs	r1, #0
    1a18:	f240 70c6 	movw	r0, #1990	; 0x7c6
    1a1c:	f3af 8000 	nop.w
    1a20:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1a24:	2001      	movs	r0, #1
    1a26:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1a2a:	bf00      	nop
    1a2c:	f04f 0901 	mov.w	r9, #1
    1a30:	b124      	cbz	r4, 1a3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c0>
    1a32:	2100      	movs	r1, #0
    1a34:	f240 70cf 	movw	r0, #1999	; 0x7cf
    1a38:	f3af 8000 	nop.w
    1a3c:	f1b8 0f00 	cmp.w	r8, #0
    1a40:	d03b      	beq.n	1aba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33e>
    1a42:	b124      	cbz	r4, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    1a44:	2100      	movs	r1, #0
    1a46:	f240 70d3 	movw	r0, #2003	; 0x7d3
    1a4a:	f3af 8000 	nop.w
    1a4e:	f1b9 0f00 	cmp.w	r9, #0
    1a52:	d011      	beq.n	1a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a54:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1a58:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1a5c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1a60:	2820      	cmp	r0, #32
    1a62:	d009      	beq.n	1a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    1a64:	b124      	cbz	r4, 1a70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    1a66:	2100      	movs	r1, #0
    1a68:	f240 70da 	movw	r0, #2010	; 0x7da
    1a6c:	f3af 8000 	nop.w
    1a70:	481d      	ldr	r0, [pc, #116]	; (1ae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>)
    1a72:	7840      	ldrb	r0, [r0, #1]
    1a74:	f001 fed2 	bl	381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1a78:	b124      	cbz	r4, 1a84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x308>
    1a7a:	2100      	movs	r1, #0
    1a7c:	f240 70df 	movw	r0, #2015	; 0x7df
    1a80:	f3af 8000 	nop.w
    1a84:	b00d      	add	sp, #52	; 0x34
    1a86:	4648      	mov	r0, r9
    1a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a8c:	e7ff      	b.n	1a8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x312>
    1a8e:	b124      	cbz	r4, 1a9a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x31e>
    1a90:	2100      	movs	r1, #0
    1a92:	f240 70b1 	movw	r0, #1969	; 0x7b1
    1a96:	f3af 8000 	nop.w
    1a9a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1a9e:	4651      	mov	r1, sl
    1aa0:	2004      	movs	r0, #4
    1aa2:	f7ff fb3d 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1aa6:	e7c1      	b.n	1a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b0>
    1aa8:	2c00      	cmp	r4, #0
    1aaa:	f43f aeb0 	beq.w	180e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1aae:	2100      	movs	r1, #0
    1ab0:	f240 70bc 	movw	r0, #1980	; 0x7bc
    1ab4:	f3af 8000 	nop.w
    1ab8:	e6a9      	b.n	180e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1aba:	4807      	ldr	r0, [pc, #28]	; (1ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>)
    1abc:	2800      	cmp	r0, #0
    1abe:	bf18      	it	ne
    1ac0:	f3af 8000 	nopne.w
    1ac4:	b662      	cpsie	i
    1ac6:	e7bc      	b.n	1a42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c6>
    1ac8:	e000ed04 	.word	0xe000ed04
    1acc:	20034224 	.word	0x20034224
    1ad0:	00000000 	.word	0x00000000
    1ad4:	20033ea4 	.word	0x20033ea4
    1ad8:	00000000 	.word	0x00000000
    1adc:	200341a4 	.word	0x200341a4
    1ae0:	003fffff 	.word	0x003fffff
    1ae4:	00000000 	.word	0x00000000
    1ae8:	20000010 	.word	0x20000010

00001aec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1aec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1af0:	48a3      	ldr	r0, [pc, #652]	; (1d80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1af2:	b086      	sub	sp, #24
    1af4:	6800      	ldr	r0, [r0, #0]
    1af6:	05c0      	lsls	r0, r0, #23
    1af8:	0dc0      	lsrs	r0, r0, #23
    1afa:	d011      	beq.n	1b20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1afc:	3810      	subs	r0, #16
    1afe:	b240      	sxtb	r0, r0
    1b00:	2800      	cmp	r0, #0
    1b02:	bfb8      	it	lt
    1b04:	f000 000f 	andlt.w	r0, r0, #15
    1b08:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b0c:	bfac      	ite	ge
    1b0e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b12:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b16:	0940      	lsrs	r0, r0, #5
    1b18:	bf08      	it	eq
    1b1a:	f04f 0901 	moveq.w	r9, #1
    1b1e:	d001      	beq.n	1b24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1b20:	f04f 0900 	mov.w	r9, #0
    1b24:	9806      	ldr	r0, [sp, #24]
    1b26:	7800      	ldrb	r0, [r0, #0]
    1b28:	2800      	cmp	r0, #0
    1b2a:	f04f 0000 	mov.w	r0, #0
    1b2e:	bf1c      	itt	ne
    1b30:	b007      	addne	sp, #28
    1b32:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b36:	f8df a24c 	ldr.w	sl, [pc, #588]	; 1d84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1b3a:	4d93      	ldr	r5, [pc, #588]	; (1d88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>)
    1b3c:	4c93      	ldr	r4, [pc, #588]	; (1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>)
    1b3e:	f04f 0b00 	mov.w	fp, #0
    1b42:	9004      	str	r0, [sp, #16]
    1b44:	b125      	cbz	r5, 1b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1b46:	2100      	movs	r1, #0
    1b48:	f240 6065 	movw	r0, #1637	; 0x665
    1b4c:	f3af 8000 	nop.w
    1b50:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1b54:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1b58:	f04f 0800 	mov.w	r8, #0
    1b5c:	b125      	cbz	r5, 1b68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1b5e:	2100      	movs	r1, #0
    1b60:	f240 606a 	movw	r0, #1642	; 0x66a
    1b64:	f3af 8000 	nop.w
    1b68:	f1b9 0f00 	cmp.w	r9, #0
    1b6c:	d11d      	bne.n	1baa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1b6e:	4637      	mov	r7, r6
    1b70:	2001      	movs	r0, #1
    1b72:	ea20 0607 	bic.w	r6, r0, r7
    1b76:	4886      	ldr	r0, [pc, #536]	; (1d90 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>)
    1b78:	2240      	movs	r2, #64	; 0x40
    1b7a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1b7e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1b82:	f009 fe26 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1b86:	b125      	cbz	r5, 1b92 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1b88:	2100      	movs	r1, #0
    1b8a:	f240 50da 	movw	r0, #1498	; 0x5da
    1b8e:	f3af 8000 	nop.w
    1b92:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1b96:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1b9a:	6a09      	ldr	r1, [r1, #32]
    1b9c:	6201      	str	r1, [r0, #32]
    1b9e:	b125      	cbz	r5, 1baa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1ba0:	2100      	movs	r1, #0
    1ba2:	f240 50de 	movw	r0, #1502	; 0x5de
    1ba6:	f3af 8000 	nop.w
    1baa:	b125      	cbz	r5, 1bb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1bac:	2100      	movs	r1, #0
    1bae:	f240 6072 	movw	r0, #1650	; 0x672
    1bb2:	f3af 8000 	nop.w
    1bb6:	f000 fe8b 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1bba:	4607      	mov	r7, r0
    1bbc:	4633      	mov	r3, r6
    1bbe:	466a      	mov	r2, sp
    1bc0:	9906      	ldr	r1, [sp, #24]
    1bc2:	f7ff f907 	bl	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
    1bc6:	b125      	cbz	r5, 1bd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1bc8:	2100      	movs	r1, #0
    1bca:	f44f 60cf 	mov.w	r0, #1656	; 0x678
    1bce:	f3af 8000 	nop.w
    1bd2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1bd6:	2820      	cmp	r0, #32
    1bd8:	d014      	beq.n	1c04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1bda:	6920      	ldr	r0, [r4, #16]
    1bdc:	9900      	ldr	r1, [sp, #0]
    1bde:	1a09      	subs	r1, r1, r0
    1be0:	0209      	lsls	r1, r1, #8
    1be2:	17ca      	asrs	r2, r1, #31
    1be4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1be8:	1209      	asrs	r1, r1, #8
    1bea:	d50b      	bpl.n	1c04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1bec:	e9dd 2100 	ldrd	r2, r1, [sp]
    1bf0:	1a89      	subs	r1, r1, r2
    1bf2:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1bf6:	4408      	add	r0, r1
    1bf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1bfc:	e9cd 2000 	strd	r2, r0, [sp]
    1c00:	f04f 0801 	mov.w	r8, #1
    1c04:	b14d      	cbz	r5, 1c1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1c06:	2100      	movs	r1, #0
    1c08:	f240 6082 	movw	r0, #1666	; 0x682
    1c0c:	f3af 8000 	nop.w
    1c10:	2100      	movs	r1, #0
    1c12:	f44f 60d1 	mov.w	r0, #1672	; 0x688
    1c16:	f3af 8000 	nop.w
    1c1a:	9800      	ldr	r0, [sp, #0]
    1c1c:	9901      	ldr	r1, [sp, #4]
    1c1e:	1bc0      	subs	r0, r0, r7
    1c20:	1bc9      	subs	r1, r1, r7
    1c22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c2a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1c2e:	d205      	bcs.n	1c3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c30:	458a      	cmp	sl, r1
    1c32:	d303      	bcc.n	1c3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c34:	f1b9 0f00 	cmp.w	r9, #0
    1c38:	d10c      	bne.n	1c54 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1c3a:	e003      	b.n	1c44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1c3c:	f1b9 0f00 	cmp.w	r9, #0
    1c40:	d038      	beq.n	1cb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1c42:	e094      	b.n	1d6e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1c44:	4633      	mov	r3, r6
    1c46:	463a      	mov	r2, r7
    1c48:	4669      	mov	r1, sp
    1c4a:	4852      	ldr	r0, [pc, #328]	; (1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>)
    1c4c:	f7fe fc3c 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
    1c50:	ea48 0800 	orr.w	r8, r8, r0
    1c54:	f1b8 0f00 	cmp.w	r8, #0
    1c58:	d022      	beq.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    1c5a:	9800      	ldr	r0, [sp, #0]
    1c5c:	f009 fc4b 	bl	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c60:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1c64:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1c68:	4b4b      	ldr	r3, [pc, #300]	; (1d98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1c6a:	4411      	add	r1, r2
    1c6c:	1c49      	adds	r1, r1, #1
    1c6e:	1842      	adds	r2, r0, r1
    1c70:	4298      	cmp	r0, r3
    1c72:	d841      	bhi.n	1cf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    1c74:	4847      	ldr	r0, [pc, #284]	; (1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>)
    1c76:	4281      	cmp	r1, r0
    1c78:	dc5a      	bgt.n	1d30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    1c7a:	4240      	negs	r0, r0
    1c7c:	4281      	cmp	r1, r0
    1c7e:	db5f      	blt.n	1d40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    1c80:	1c58      	adds	r0, r3, #1
    1c82:	4290      	cmp	r0, r2
    1c84:	bfdc      	itt	le
    1c86:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1c8a:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1c8e:	dd05      	ble.n	1c9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    1c90:	2a00      	cmp	r2, #0
    1c92:	bfbc      	itt	lt
    1c94:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1c98:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1c9c:	9806      	ldr	r0, [sp, #24]
    1c9e:	60c2      	str	r2, [r0, #12]
    1ca0:	2001      	movs	r0, #1
    1ca2:	9004      	str	r0, [sp, #16]
    1ca4:	2d00      	cmp	r5, #0
    1ca6:	d062      	beq.n	1d6e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1ca8:	2100      	movs	r1, #0
    1caa:	f240 609b 	movw	r0, #1691	; 0x69b
    1cae:	f3af 8000 	nop.w
    1cb2:	e05c      	b.n	1d6e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22>
    1cb4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1cb8:	aa05      	add	r2, sp, #20
    1cba:	a904      	add	r1, sp, #16
    1cbc:	f000 fcb2 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1cc0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1cc4:	2820      	cmp	r0, #32
    1cc6:	d01c      	beq.n	1d02 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    1cc8:	6920      	ldr	r0, [r4, #16]
    1cca:	1d40      	adds	r0, r0, #5
    1ccc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1cd0:	e9dd 2100 	ldrd	r2, r1, [sp]
    1cd4:	1a89      	subs	r1, r1, r2
    1cd6:	4401      	add	r1, r0
    1cd8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1cdc:	e9cd 0100 	strd	r0, r1, [sp]
    1ce0:	f009 fc09 	bl	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1ce4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1ce8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1cec:	4b2a      	ldr	r3, [pc, #168]	; (1d98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>)
    1cee:	4411      	add	r1, r2
    1cf0:	1c49      	adds	r1, r1, #1
    1cf2:	1842      	adds	r2, r0, r1
    1cf4:	4298      	cmp	r0, r3
    1cf6:	d918      	bls.n	1d2a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    1cf8:	f240 6116 	movw	r1, #1558	; 0x616
    1cfc:	2070      	movs	r0, #112	; 0x70
    1cfe:	f001 fcbd 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d02:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1d06:	f107 0609 	add.w	r6, r7, #9
    1d0a:	b120      	cbz	r0, 1d16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    1d0c:	f001 fc52 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d10:	2800      	cmp	r0, #0
    1d12:	bf08      	it	eq
    1d14:	3632      	addeq	r6, #50	; 0x32
    1d16:	4821      	ldr	r0, [pc, #132]	; (1d9c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50>)
    1d18:	7841      	ldrb	r1, [r0, #1]
    1d1a:	9804      	ldr	r0, [sp, #16]
    1d1c:	4281      	cmp	r1, r0
    1d1e:	bf84      	itt	hi
    1d20:	1a08      	subhi	r0, r1, r0
    1d22:	4406      	addhi	r6, r0
    1d24:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1d28:	e7d2      	b.n	1cd0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    1d2a:	481a      	ldr	r0, [pc, #104]	; (1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>)
    1d2c:	4281      	cmp	r1, r0
    1d2e:	dd04      	ble.n	1d3a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    1d30:	f240 6117 	movw	r1, #1559	; 0x617
    1d34:	2070      	movs	r0, #112	; 0x70
    1d36:	f001 fca1 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d3a:	4819      	ldr	r0, [pc, #100]	; (1da0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x54>)
    1d3c:	4281      	cmp	r1, r0
    1d3e:	da04      	bge.n	1d4a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    1d40:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    1d44:	2070      	movs	r0, #112	; 0x70
    1d46:	f001 fc99 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d4a:	4816      	ldr	r0, [pc, #88]	; (1da4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58>)
    1d4c:	4290      	cmp	r0, r2
    1d4e:	bfdc      	itt	le
    1d50:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1d54:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1d58:	dd05      	ble.n	1d66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a>
    1d5a:	2a00      	cmp	r2, #0
    1d5c:	bfbc      	itt	lt
    1d5e:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1d62:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d66:	9806      	ldr	r0, [sp, #24]
    1d68:	60c2      	str	r2, [r0, #12]
    1d6a:	2001      	movs	r0, #1
    1d6c:	9004      	str	r0, [sp, #16]
    1d6e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1d72:	2800      	cmp	r0, #0
    1d74:	f47f aee6 	bne.w	1b44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1d78:	9804      	ldr	r0, [sp, #16]
    1d7a:	b007      	add	sp, #28
    1d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d80:	e000ed04 	.word	0xe000ed04
    1d84:	003fffff 	.word	0x003fffff
    1d88:	00000000 	.word	0x00000000
    1d8c:	20034224 	.word	0x20034224
    1d90:	200341a4 	.word	0x200341a4
    1d94:	07a12000 	.word	0x07a12000
    1d98:	1e847fff 	.word	0x1e847fff
    1d9c:	20000012 	.word	0x20000012
    1da0:	f85ee000 	.word	0xf85ee000
    1da4:	1e848000 	.word	0x1e848000

00001da8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1da8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dac:	4d80      	ldr	r5, [pc, #512]	; (1fb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x208>)
    1dae:	b08c      	sub	sp, #48	; 0x30
    1db0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1db4:	2000      	movs	r0, #0
    1db6:	9009      	str	r0, [sp, #36]	; 0x24
    1db8:	2001      	movs	r0, #1
    1dba:	4c7e      	ldr	r4, [pc, #504]	; (1fb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>)
    1dbc:	f04f 0800 	mov.w	r8, #0
    1dc0:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1dc4:	4683      	mov	fp, r0
    1dc6:	9008      	str	r0, [sp, #32]
    1dc8:	b124      	cbz	r4, 1dd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1dca:	2100      	movs	r1, #0
    1dcc:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1dd0:	f3af 8000 	nop.w
    1dd4:	9808      	ldr	r0, [sp, #32]
    1dd6:	b390      	cbz	r0, 1e3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x96>
    1dd8:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1ddc:	b124      	cbz	r4, 1de8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x40>
    1dde:	2100      	movs	r1, #0
    1de0:	f240 70f3 	movw	r0, #2035	; 0x7f3
    1de4:	f3af 8000 	nop.w
    1de8:	f895 902e 	ldrb.w	r9, [r5, #46]	; 0x2e
    1dec:	2240      	movs	r2, #64	; 0x40
    1dee:	ea2b 0609 	bic.w	r6, fp, r9
    1df2:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1df6:	eb07 1189 	add.w	r1, r7, r9, lsl #6
    1dfa:	4682      	mov	sl, r0
    1dfc:	f009 fce9 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1e00:	b124      	cbz	r4, 1e0c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x64>
    1e02:	2100      	movs	r1, #0
    1e04:	f240 50da 	movw	r0, #1498	; 0x5da
    1e08:	f3af 8000 	nop.w
    1e0c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1e10:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1e14:	9000      	str	r0, [sp, #0]
    1e16:	6a09      	ldr	r1, [r1, #32]
    1e18:	6201      	str	r1, [r0, #32]
    1e1a:	b124      	cbz	r4, 1e26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x7e>
    1e1c:	2100      	movs	r1, #0
    1e1e:	f240 50de 	movw	r0, #1502	; 0x5de
    1e22:	f3af 8000 	nop.w
    1e26:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1e2a:	b180      	cbz	r0, 1e4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa6>
    1e2c:	2c00      	cmp	r4, #0
    1e2e:	bf1c      	itt	ne
    1e30:	2100      	movne	r1, #0
    1e32:	f240 70f9 	movwne	r0, #2041	; 0x7f9
    1e36:	d0c7      	beq.n	1dc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1e38:	f3af 8000 	nop.w
    1e3c:	e7c4      	b.n	1dc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1e3e:	e7ff      	b.n	1e40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x98>
    1e40:	485d      	ldr	r0, [pc, #372]	; (1fb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1e42:	2800      	cmp	r0, #0
    1e44:	bf18      	it	ne
    1e46:	f3af 8000 	nopne.w
    1e4a:	b662      	cpsie	i
    1e4c:	e7c4      	b.n	1dd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x30>
    1e4e:	b124      	cbz	r4, 1e5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb2>
    1e50:	2100      	movs	r1, #0
    1e52:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1e56:	f3af 8000 	nop.w
    1e5a:	980c      	ldr	r0, [sp, #48]	; 0x30
    1e5c:	f81a 0010 	ldrb.w	r0, [sl, r0, lsl #1]
    1e60:	2803      	cmp	r0, #3
    1e62:	d178      	bne.n	1f56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1e64:	f8dd 9000 	ldr.w	r9, [sp]
    1e68:	f8cd 9018 	str.w	r9, [sp, #24]
    1e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
    1e6e:	f899 0020 	ldrb.w	r0, [r9, #32]
    1e72:	4288      	cmp	r0, r1
    1e74:	bf14      	ite	ne
    1e76:	f04f 0a00 	movne.w	sl, #0
    1e7a:	f04f 0a01 	moveq.w	sl, #1
    1e7e:	f109 0c20 	add.w	ip, r9, #32
    1e82:	4686      	mov	lr, r0
    1e84:	2220      	movs	r2, #32
    1e86:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1e8a:	e003      	b.n	1e94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xec>
    1e8c:	4602      	mov	r2, r0
    1e8e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1e92:	7840      	ldrb	r0, [r0, #1]
    1e94:	4288      	cmp	r0, r1
    1e96:	d002      	beq.n	1e9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1e98:	2820      	cmp	r0, #32
    1e9a:	d00a      	beq.n	1eb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1e9c:	e7f6      	b.n	1e8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xe4>
    1e9e:	2820      	cmp	r0, #32
    1ea0:	d007      	beq.n	1eb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10a>
    1ea2:	4586      	cmp	lr, r0
    1ea4:	d107      	bne.n	1eb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x10e>
    1ea6:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1eaa:	7840      	ldrb	r0, [r0, #1]
    1eac:	f88c 0000 	strb.w	r0, [ip]
    1eb0:	e007      	b.n	1ec2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    1eb2:	4640      	mov	r0, r8
    1eb4:	e00c      	b.n	1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x128>
    1eb6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1eba:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1ebe:	7840      	ldrb	r0, [r0, #1]
    1ec0:	7048      	strb	r0, [r1, #1]
    1ec2:	b124      	cbz	r4, 1ece <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x126>
    1ec4:	2100      	movs	r1, #0
    1ec6:	f240 5044 	movw	r0, #1348	; 0x544
    1eca:	f3af 8000 	nop.w
    1ece:	4658      	mov	r0, fp
    1ed0:	ea10 0f0a 	tst.w	r0, sl
    1ed4:	bf18      	it	ne
    1ed6:	f889 b023 	strbne.w	fp, [r9, #35]	; 0x23
    1eda:	b3e0      	cbz	r0, 1f56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1edc:	b124      	cbz	r4, 1ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x140>
    1ede:	2100      	movs	r1, #0
    1ee0:	f640 0002 	movw	r0, #2050	; 0x802
    1ee4:	f3af 8000 	nop.w
    1ee8:	4632      	mov	r2, r6
    1eea:	2001      	movs	r0, #1
    1eec:	990c      	ldr	r1, [sp, #48]	; 0x30
    1eee:	f7ff f917 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1ef2:	9806      	ldr	r0, [sp, #24]
    1ef4:	f890 9023 	ldrb.w	r9, [r0, #35]	; 0x23
    1ef8:	b124      	cbz	r4, 1f04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x15c>
    1efa:	2100      	movs	r1, #0
    1efc:	f640 000d 	movw	r0, #2061	; 0x80d
    1f00:	f3af 8000 	nop.w
    1f04:	482d      	ldr	r0, [pc, #180]	; (1fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x214>)
    1f06:	2800      	cmp	r0, #0
    1f08:	bf18      	it	ne
    1f0a:	f3af 8000 	nopne.w
    1f0e:	f3ef 8010 	mrs	r0, PRIMASK
    1f12:	b672      	cpsid	i
    1f14:	9008      	str	r0, [sp, #32]
    1f16:	b124      	cbz	r4, 1f22 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x17a>
    1f18:	2100      	movs	r1, #0
    1f1a:	f640 0012 	movw	r0, #2066	; 0x812
    1f1e:	f3af 8000 	nop.w
    1f22:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1f26:	b138      	cbz	r0, 1f38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x190>
    1f28:	2c00      	cmp	r4, #0
    1f2a:	bf1c      	itt	ne
    1f2c:	2100      	movne	r1, #0
    1f2e:	f640 0016 	movwne	r0, #2070	; 0x816
    1f32:	f43f af49 	beq.w	1dc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1f36:	e77f      	b.n	1e38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x90>
    1f38:	f1b9 0f00 	cmp.w	r9, #0
    1f3c:	d008      	beq.n	1f50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1f3e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1f42:	2820      	cmp	r0, #32
    1f44:	d104      	bne.n	1f50 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a8>
    1f46:	4631      	mov	r1, r6
    1f48:	2002      	movs	r0, #2
    1f4a:	f7ff f919 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1f4e:	b1f8      	cbz	r0, 1f90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    1f50:	b134      	cbz	r4, 1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b8>
    1f52:	2100      	movs	r1, #0
    1f54:	e000      	b.n	1f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1b0>
    1f56:	e009      	b.n	1f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c4>
    1f58:	f640 002a 	movw	r0, #2090	; 0x82a
    1f5c:	f3af 8000 	nop.w
    1f60:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
    1f64:	f885 b02b 	strb.w	fp, [r5, #43]	; 0x2b
    1f68:	2001      	movs	r0, #1
    1f6a:	9009      	str	r0, [sp, #36]	; 0x24
    1f6c:	b124      	cbz	r4, 1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    1f6e:	2100      	movs	r1, #0
    1f70:	f640 0033 	movw	r0, #2099	; 0x833
    1f74:	f3af 8000 	nop.w
    1f78:	9808      	ldr	r0, [sp, #32]
    1f7a:	b188      	cbz	r0, 1fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f8>
    1f7c:	b124      	cbz	r4, 1f88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e0>
    1f7e:	2100      	movs	r1, #0
    1f80:	f640 0037 	movw	r0, #2103	; 0x837
    1f84:	f3af 8000 	nop.w
    1f88:	9809      	ldr	r0, [sp, #36]	; 0x24
    1f8a:	b00d      	add	sp, #52	; 0x34
    1f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f90:	2c00      	cmp	r4, #0
    1f92:	d0f1      	beq.n	1f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    1f94:	2100      	movs	r1, #0
    1f96:	f640 0025 	movw	r0, #2085	; 0x825
    1f9a:	f3af 8000 	nop.w
    1f9e:	e7e6      	b.n	1f6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1fa0:	4805      	ldr	r0, [pc, #20]	; (1fb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x210>)
    1fa2:	2800      	cmp	r0, #0
    1fa4:	bf18      	it	ne
    1fa6:	f3af 8000 	nopne.w
    1faa:	b662      	cpsie	i
    1fac:	e7e6      	b.n	1f7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d4>
    1fae:	0000      	.short	0x0000
    1fb0:	20034224 	.word	0x20034224
	...

00001fc0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    1fc0:	2820      	cmp	r0, #32
    1fc2:	bf24      	itt	cs
    1fc4:	2000      	movcs	r0, #0
    1fc6:	4770      	bxcs	lr
    1fc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1fcc:	4b03      	ldr	r3, [pc, #12]	; (1fdc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    1fce:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    1fd2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    1fd6:	6042      	str	r2, [r0, #4]
    1fd8:	2001      	movs	r0, #1
    1fda:	4770      	bx	lr
    1fdc:	20033ea4 	.word	0x20033ea4

00001fe0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    1fe0:	b510      	push	{r4, lr}
    1fe2:	2820      	cmp	r0, #32
    1fe4:	d211      	bcs.n	200a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1fe6:	490e      	ldr	r1, [pc, #56]	; (2020 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    1fe8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    1fec:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    1ff0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    1ff4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    1ff8:	b13b      	cbz	r3, 200a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    1ffa:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    1ffe:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    2002:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2006:	2a01      	cmp	r2, #1
    2008:	d001      	beq.n	200e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    200a:	2000      	movs	r0, #0
    200c:	bd10      	pop	{r4, pc}
    200e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    2012:	4601      	mov	r1, r0
    2014:	2000      	movs	r0, #0
    2016:	f7ff f883 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    201a:	2001      	movs	r0, #1
    201c:	bd10      	pop	{r4, pc}
    201e:	0000      	.short	0x0000
    2020:	20034224 	.word	0x20034224

00002024 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    2024:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2028:	4e7e      	ldr	r6, [pc, #504]	; (2224 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x200>)
    202a:	4680      	mov	r8, r0
    202c:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2030:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    2034:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2038:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    203c:	2800      	cmp	r0, #0
    203e:	d065      	beq.n	210c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2040:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    2044:	4d78      	ldr	r5, [pc, #480]	; (2228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x204>)
    2046:	b125      	cbz	r5, 2052 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2048:	2100      	movs	r1, #0
    204a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    204e:	f3af 8000 	nop.w
    2052:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    2056:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    205a:	2801      	cmp	r0, #1
    205c:	d018      	beq.n	2090 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    205e:	b2c0      	uxtb	r0, r0
    2060:	2804      	cmp	r0, #4
    2062:	bf1c      	itt	ne
    2064:	2805      	cmpne	r0, #5
    2066:	2806      	cmpne	r0, #6
    2068:	d055      	beq.n	2116 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf2>
    206a:	b12d      	cbz	r5, 2078 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    206c:	f04f 0100 	mov.w	r1, #0
    2070:	f640 30c5 	movw	r0, #3013	; 0xbc5
    2074:	f3af 8000 	nop.w
    2078:	f001 fc26 	bl	38c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    207c:	b125      	cbz	r5, 2088 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    207e:	2100      	movs	r1, #0
    2080:	f640 30c9 	movw	r0, #3017	; 0xbc9
    2084:	f3af 8000 	nop.w
    2088:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    208c:	2801      	cmp	r0, #1
    208e:	d1e6      	bne.n	205e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    2090:	2401      	movs	r4, #1
    2092:	b125      	cbz	r5, 209e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2094:	2100      	movs	r1, #0
    2096:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    209a:	f3af 8000 	nop.w
    209e:	b3a4      	cbz	r4, 210a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe6>
    20a0:	2000      	movs	r0, #0
    20a2:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    20a6:	b125      	cbz	r5, 20b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x8e>
    20a8:	2100      	movs	r1, #0
    20aa:	f640 30d5 	movw	r0, #3029	; 0xbd5
    20ae:	f3af 8000 	nop.w
    20b2:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    20b6:	2001      	movs	r0, #1
    20b8:	ea20 090b 	bic.w	r9, r0, fp
    20bc:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    20c0:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    20c4:	2240      	movs	r2, #64	; 0x40
    20c6:	f009 fb84 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    20ca:	b125      	cbz	r5, 20d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb2>
    20cc:	2100      	movs	r1, #0
    20ce:	f240 50da 	movw	r0, #1498	; 0x5da
    20d2:	f3af 8000 	nop.w
    20d6:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    20da:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    20de:	6a00      	ldr	r0, [r0, #32]
    20e0:	f8ca 0020 	str.w	r0, [sl, #32]
    20e4:	b125      	cbz	r5, 20f0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xcc>
    20e6:	2100      	movs	r1, #0
    20e8:	f240 50de 	movw	r0, #1502	; 0x5de
    20ec:	f3af 8000 	nop.w
    20f0:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    20f4:	b1e0      	cbz	r0, 2130 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10c>
    20f6:	2d00      	cmp	r5, #0
    20f8:	bf1c      	itt	ne
    20fa:	2100      	movne	r1, #0
    20fc:	f640 30db 	movwne	r0, #3035	; 0xbdb
    2100:	d0c7      	beq.n	2092 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2102:	bf00      	nop
    2104:	f3af 8000 	nop.w
    2108:	e7c3      	b.n	2092 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    210a:	e00a      	b.n	2122 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xfe>
    210c:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    2110:	2070      	movs	r0, #112	; 0x70
    2112:	f001 fab3 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2116:	464a      	mov	r2, r9
    2118:	4641      	mov	r1, r8
    211a:	2001      	movs	r0, #1
    211c:	f7ff f800 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2120:	e7ac      	b.n	207c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2122:	4842      	ldr	r0, [pc, #264]	; (222c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2124:	2800      	cmp	r0, #0
    2126:	bf18      	it	ne
    2128:	f3af 8000 	nopne.w
    212c:	b662      	cpsie	i
    212e:	e7b7      	b.n	20a0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7c>
    2130:	b125      	cbz	r5, 213c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x118>
    2132:	2100      	movs	r1, #0
    2134:	f640 30df 	movw	r0, #3039	; 0xbdf
    2138:	f3af 8000 	nop.w
    213c:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    2140:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2144:	4640      	mov	r0, r8
    2146:	461c      	mov	r4, r3
    2148:	f04f 0b20 	mov.w	fp, #32
    214c:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    2150:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    2154:	e004      	b.n	2160 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13c>
    2156:	46a3      	mov	fp, r4
    2158:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    215c:	f89c 4001 	ldrb.w	r4, [ip, #1]
    2160:	4284      	cmp	r4, r0
    2162:	d002      	beq.n	216a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x146>
    2164:	2c20      	cmp	r4, #32
    2166:	d02b      	beq.n	21c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    2168:	e7f5      	b.n	2156 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x132>
    216a:	2c20      	cmp	r4, #32
    216c:	d028      	beq.n	21c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19c>
    216e:	42a3      	cmp	r3, r4
    2170:	d104      	bne.n	217c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x158>
    2172:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    2176:	7840      	ldrb	r0, [r0, #1]
    2178:	7008      	strb	r0, [r1, #0]
    217a:	e005      	b.n	2188 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x164>
    217c:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    2180:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    2184:	7840      	ldrb	r0, [r0, #1]
    2186:	7048      	strb	r0, [r1, #1]
    2188:	f1ba 0f00 	cmp.w	sl, #0
    218c:	d011      	beq.n	21b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    218e:	b125      	cbz	r5, 219a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x176>
    2190:	2100      	movs	r1, #0
    2192:	f240 503c 	movw	r0, #1340	; 0x53c
    2196:	f3af 8000 	nop.w
    219a:	f89a 0000 	ldrb.w	r0, [sl]
    219e:	42a0      	cmp	r0, r4
    21a0:	d107      	bne.n	21b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    21a2:	b125      	cbz	r5, 21ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18a>
    21a4:	2100      	movs	r1, #0
    21a6:	f240 503f 	movw	r0, #1343	; 0x53f
    21aa:	f3af 8000 	nop.w
    21ae:	f88a b000 	strb.w	fp, [sl]
    21b2:	b15d      	cbz	r5, 21cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    21b4:	2100      	movs	r1, #0
    21b6:	f240 5044 	movw	r0, #1348	; 0x544
    21ba:	f3af 8000 	nop.w
    21be:	e000      	b.n	21c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    21c0:	b125      	cbz	r5, 21cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a8>
    21c2:	2100      	movs	r1, #0
    21c4:	f640 30e3 	movw	r0, #3043	; 0xbe3
    21c8:	f3af 8000 	nop.w
    21cc:	4818      	ldr	r0, [pc, #96]	; (2230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    21ce:	2800      	cmp	r0, #0
    21d0:	bf18      	it	ne
    21d2:	f3af 8000 	nopne.w
    21d6:	f3ef 8410 	mrs	r4, PRIMASK
    21da:	b672      	cpsid	i
    21dc:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    21e0:	b138      	cbz	r0, 21f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ce>
    21e2:	2d00      	cmp	r5, #0
    21e4:	bf1c      	itt	ne
    21e6:	2100      	movne	r1, #0
    21e8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    21ec:	f43f af51 	beq.w	2092 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    21f0:	e788      	b.n	2104 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe0>
    21f2:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    21f6:	2001      	movs	r0, #1
    21f8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    21fc:	b154      	cbz	r4, 2214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1f0>
    21fe:	2d00      	cmp	r5, #0
    2200:	bf08      	it	eq
    2202:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2206:	2100      	movs	r1, #0
    2208:	f640 30f6 	movw	r0, #3062	; 0xbf6
    220c:	f3af 8000 	nop.w
    2210:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2214:	4805      	ldr	r0, [pc, #20]	; (222c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2216:	2800      	cmp	r0, #0
    2218:	bf18      	it	ne
    221a:	f3af 8000 	nopne.w
    221e:	b662      	cpsie	i
    2220:	e7ed      	b.n	21fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1da>
    2222:	0000      	.short	0x0000
    2224:	20034224 	.word	0x20034224
	...

00002234 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2234:	b570      	push	{r4, r5, r6, lr}
    2236:	460d      	mov	r5, r1
    2238:	4606      	mov	r6, r0
    223a:	f001 f9a9 	bl	3590 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    223e:	480f      	ldr	r0, [pc, #60]	; (227c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2240:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2244:	2400      	movs	r4, #0
    2246:	3880      	subs	r0, #128	; 0x80
    2248:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    224c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    2250:	b129      	cbz	r1, 225e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    2252:	1c61      	adds	r1, r4, #1
    2254:	b2cc      	uxtb	r4, r1
    2256:	2c20      	cmp	r4, #32
    2258:	d3f8      	bcc.n	224c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    225a:	2020      	movs	r0, #32
    225c:	bd70      	pop	{r4, r5, r6, pc}
    225e:	4808      	ldr	r0, [pc, #32]	; (2280 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    2260:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2264:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    2268:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    226c:	4621      	mov	r1, r4
    226e:	6045      	str	r5, [r0, #4]
    2270:	2001      	movs	r0, #1
    2272:	f7fe ff55 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    2276:	4620      	mov	r0, r4
    2278:	bd70      	pop	{r4, r5, r6, pc}
    227a:	0000      	.short	0x0000
    227c:	20034224 	.word	0x20034224
    2280:	20033ea4 	.word	0x20033ea4

00002284 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2288:	b083      	sub	sp, #12
    228a:	f000 fb21 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    228e:	4605      	mov	r5, r0
    2290:	f000 fdd4 	bl	2e3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2294:	4c63      	ldr	r4, [pc, #396]	; (2424 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a0>)
    2296:	68a0      	ldr	r0, [r4, #8]
    2298:	f1b0 3fff 	cmp.w	r0, #4294967295
    229c:	bf1c      	itt	ne
    229e:	f04f 30ff 	movne.w	r0, #4294967295
    22a2:	60a0      	strne	r0, [r4, #8]
    22a4:	7fa0      	ldrb	r0, [r4, #30]
    22a6:	f8df b180 	ldr.w	fp, [pc, #384]	; 2428 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a4>
    22aa:	b9a8      	cbnz	r0, 22d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    22ac:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    22b0:	1a08      	subs	r0, r1, r0
    22b2:	0200      	lsls	r0, r0, #8
    22b4:	17c1      	asrs	r1, r0, #31
    22b6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    22ba:	1200      	asrs	r0, r0, #8
    22bc:	f44f 710c 	mov.w	r1, #560	; 0x230
    22c0:	f009 f946 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    22c4:	6921      	ldr	r1, [r4, #16]
    22c6:	4408      	add	r0, r1
    22c8:	1a28      	subs	r0, r5, r0
    22ca:	0200      	lsls	r0, r0, #8
    22cc:	17c1      	asrs	r1, r0, #31
    22ce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    22d2:	1200      	asrs	r0, r0, #8
    22d4:	0fc0      	lsrs	r0, r0, #31
    22d6:	d00b      	beq.n	22f0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    22d8:	7e60      	ldrb	r0, [r4, #25]
    22da:	b1e8      	cbz	r0, 2318 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x94>
    22dc:	f000 fc04 	bl	2ae8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    22e0:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    22e4:	b1f0      	cbz	r0, 2324 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    22e6:	f240 4154 	movw	r1, #1108	; 0x454
    22ea:	2070      	movs	r0, #112	; 0x70
    22ec:	f001 f9c6 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22f0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    22f4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    22f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22fc:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2300:	6840      	ldr	r0, [r0, #4]
    2302:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2306:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    230a:	2108      	movs	r1, #8
    230c:	4790      	blx	r2
    230e:	f240 4143 	movw	r1, #1091	; 0x443
    2312:	2070      	movs	r0, #112	; 0x70
    2314:	f001 f9b2 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2318:	1ce8      	adds	r0, r5, #3
    231a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    231e:	f000 fadd 	bl	28dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2322:	e7dd      	b.n	22e0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x5c>
    2324:	f04f 0a01 	mov.w	sl, #1
    2328:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    232c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2330:	2820      	cmp	r0, #32
    2332:	d024      	beq.n	237e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    2334:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2338:	2020      	movs	r0, #32
    233a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    233e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2342:	2600      	movs	r6, #0
    2344:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2348:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    234c:	4837      	ldr	r0, [pc, #220]	; (242c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    234e:	6026      	str	r6, [r4, #0]
    2350:	7800      	ldrb	r0, [r0, #0]
    2352:	2802      	cmp	r0, #2
    2354:	bf16      	itet	ne
    2356:	2803      	cmpne	r0, #3
    2358:	2001      	moveq	r0, #1
    235a:	2000      	movne	r0, #0
    235c:	7720      	strb	r0, [r4, #28]
    235e:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2362:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    2366:	f899 0020 	ldrb.w	r0, [r9, #32]
    236a:	2820      	cmp	r0, #32
    236c:	d031      	beq.n	23d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    236e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2372:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2376:	7d81      	ldrb	r1, [r0, #22]
    2378:	2901      	cmp	r1, #1
    237a:	d005      	beq.n	2388 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    237c:	e029      	b.n	23d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    237e:	f240 4157 	movw	r1, #1111	; 0x457
    2382:	2070      	movs	r0, #112	; 0x70
    2384:	f001 f97a 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2388:	46ab      	mov	fp, r5
    238a:	f100 0508 	add.w	r5, r0, #8
    238e:	8a40      	ldrh	r0, [r0, #18]
    2390:	aa01      	add	r2, sp, #4
    2392:	4669      	mov	r1, sp
    2394:	f000 f946 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2398:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    239c:	2820      	cmp	r0, #32
    239e:	d004      	beq.n	23aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x126>
    23a0:	6920      	ldr	r0, [r4, #16]
    23a2:	1d40      	adds	r0, r0, #5
    23a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23a8:	e00b      	b.n	23c2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13e>
    23aa:	8968      	ldrh	r0, [r5, #10]
    23ac:	f10b 0b09 	add.w	fp, fp, #9
    23b0:	b128      	cbz	r0, 23be <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x13a>
    23b2:	f001 f8ff 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    23b6:	2800      	cmp	r0, #0
    23b8:	bf08      	it	eq
    23ba:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    23be:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    23c2:	e9d5 2100 	ldrd	r2, r1, [r5]
    23c6:	1a89      	subs	r1, r1, r2
    23c8:	6028      	str	r0, [r5, #0]
    23ca:	4408      	add	r0, r1
    23cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23d0:	6068      	str	r0, [r5, #4]
    23d2:	4639      	mov	r1, r7
    23d4:	2001      	movs	r0, #1
    23d6:	f7fe fed3 	bl	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    23da:	2800      	cmp	r0, #0
    23dc:	d0f9      	beq.n	23d2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    23de:	4814      	ldr	r0, [pc, #80]	; (2430 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>)
    23e0:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    23e4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    23e8:	2802      	cmp	r0, #2
    23ea:	d104      	bne.n	23f6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x172>
    23ec:	463a      	mov	r2, r7
    23ee:	4641      	mov	r1, r8
    23f0:	2006      	movs	r0, #6
    23f2:	f7fe fe95 	bl	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    23f6:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    23fa:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    23fe:	2820      	cmp	r0, #32
    2400:	d003      	beq.n	240a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x186>
    2402:	480c      	ldr	r0, [pc, #48]	; (2434 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    2404:	7840      	ldrb	r0, [r0, #1]
    2406:	f001 fa09 	bl	381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    240a:	7f20      	ldrb	r0, [r4, #28]
    240c:	2800      	cmp	r0, #0
    240e:	bf04      	itt	eq
    2410:	b003      	addeq	sp, #12
    2412:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2416:	f000 fd5b 	bl	2ed0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    241a:	7726      	strb	r6, [r4, #28]
    241c:	7766      	strb	r6, [r4, #29]
    241e:	b003      	add	sp, #12
    2420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2424:	20034224 	.word	0x20034224
    2428:	20033ea4 	.word	0x20033ea4
    242c:	20000012 	.word	0x20000012
    2430:	200341a4 	.word	0x200341a4
    2434:	20000010 	.word	0x20000010

00002438 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2438:	b510      	push	{r4, lr}
    243a:	4c30      	ldr	r4, [pc, #192]	; (24fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc4>)
    243c:	b082      	sub	sp, #8
    243e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2442:	2920      	cmp	r1, #32
    2444:	d008      	beq.n	2458 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    2446:	68a1      	ldr	r1, [r4, #8]
    2448:	f1b1 3fff 	cmp.w	r1, #4294967295
    244c:	d009      	beq.n	2462 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    244e:	f640 21e8 	movw	r1, #2792	; 0xae8
    2452:	2070      	movs	r0, #112	; 0x70
    2454:	f001 f912 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2458:	f640 21e7 	movw	r1, #2791	; 0xae7
    245c:	2070      	movs	r0, #112	; 0x70
    245e:	f001 f90d 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2462:	6862      	ldr	r2, [r4, #4]
    2464:	4601      	mov	r1, r0
    2466:	4b26      	ldr	r3, [pc, #152]	; (2500 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc8>)
    2468:	1850      	adds	r0, r2, r1
    246a:	429a      	cmp	r2, r3
    246c:	d904      	bls.n	2478 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    246e:	f240 6116 	movw	r1, #1558	; 0x616
    2472:	2070      	movs	r0, #112	; 0x70
    2474:	f001 f902 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2478:	4a22      	ldr	r2, [pc, #136]	; (2504 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    247a:	4291      	cmp	r1, r2
    247c:	dd04      	ble.n	2488 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    247e:	f240 6117 	movw	r1, #1559	; 0x617
    2482:	2070      	movs	r0, #112	; 0x70
    2484:	f001 f8fa 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2488:	4a1f      	ldr	r2, [pc, #124]	; (2508 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    248a:	4291      	cmp	r1, r2
    248c:	da04      	bge.n	2498 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    248e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
    2492:	2070      	movs	r0, #112	; 0x70
    2494:	f001 f8f2 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2498:	491c      	ldr	r1, [pc, #112]	; (250c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    249a:	4281      	cmp	r1, r0
    249c:	bfdc      	itt	le
    249e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    24a2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    24a6:	dd05      	ble.n	24b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    24a8:	2800      	cmp	r0, #0
    24aa:	bfbc      	itt	lt
    24ac:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    24b0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    24b4:	aa01      	add	r2, sp, #4
    24b6:	4669      	mov	r1, sp
    24b8:	f000 f8b4 	bl	2624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    24c0:	280f      	cmp	r0, #15
    24c2:	bf8c      	ite	hi
    24c4:	2001      	movhi	r0, #1
    24c6:	2000      	movls	r0, #0
    24c8:	9900      	ldr	r1, [sp, #0]
    24ca:	4408      	add	r0, r1
    24cc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    24d0:	60a1      	str	r1, [r4, #8]
    24d2:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    24d6:	2800      	cmp	r0, #0
    24d8:	bf04      	itt	eq
    24da:	b002      	addeq	sp, #8
    24dc:	bd10      	popeq	{r4, pc}
    24de:	2301      	movs	r3, #1
    24e0:	2203      	movs	r2, #3
    24e2:	2005      	movs	r0, #5
    24e4:	f000 fb7a 	bl	2bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    24e8:	2800      	cmp	r0, #0
    24ea:	bf1c      	itt	ne
    24ec:	b002      	addne	sp, #8
    24ee:	bd10      	popne	{r4, pc}
    24f0:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
    24f4:	2070      	movs	r0, #112	; 0x70
    24f6:	f001 f8c1 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fa:	0000      	.short	0x0000
    24fc:	20034224 	.word	0x20034224
    2500:	1e847fff 	.word	0x1e847fff
    2504:	07a12000 	.word	0x07a12000
    2508:	f85ee000 	.word	0xf85ee000
    250c:	1e848000 	.word	0x1e848000

00002510 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2510:	b570      	push	{r4, r5, r6, lr}
    2512:	4c1e      	ldr	r4, [pc, #120]	; (258c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    2514:	2120      	movs	r1, #32
    2516:	f884 1020 	strb.w	r1, [r4, #32]
    251a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    251e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    2522:	2000      	movs	r0, #0
    2524:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2528:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    252c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2530:	1e42      	subs	r2, r0, #1
    2532:	60a2      	str	r2, [r4, #8]
    2534:	6020      	str	r0, [r4, #0]
    2536:	77a0      	strb	r0, [r4, #30]
    2538:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    253c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    2540:	7720      	strb	r0, [r4, #28]
    2542:	7760      	strb	r0, [r4, #29]
    2544:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    2548:	4911      	ldr	r1, [pc, #68]	; (2590 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    254a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    254e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    2552:	7008      	strb	r0, [r1, #0]
    2554:	7048      	strb	r0, [r1, #1]
    2556:	8048      	strh	r0, [r1, #2]
    2558:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    255c:	2210      	movs	r2, #16
    255e:	7088      	strb	r0, [r1, #2]
    2560:	f801 0f04 	strb.w	r0, [r1, #4]!
    2564:	1e52      	subs	r2, r2, #1
    2566:	d1fa      	bne.n	255e <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2568:	4d0a      	ldr	r5, [pc, #40]	; (2594 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    256a:	2601      	movs	r6, #1
    256c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    2570:	20ff      	movs	r0, #255	; 0xff
    2572:	7028      	strb	r0, [r5, #0]
    2574:	4808      	ldr	r0, [pc, #32]	; (2598 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2576:	f001 f933 	bl	37e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    257a:	7068      	strb	r0, [r5, #1]
    257c:	f001 f98e 	bl	389c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    2580:	60a8      	str	r0, [r5, #8]
    2582:	f000 fcd3 	bl	2f2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2586:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	20034224 	.word	0x20034224
    2590:	20000012 	.word	0x20000012
    2594:	20000010 	.word	0x20000010
    2598:	00000fdd 	.word	0x00000fdd

0000259c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	4604      	mov	r4, r0
    25a0:	4615      	mov	r5, r2
    25a2:	4608      	mov	r0, r1
    25a4:	f008 ff9c 	bl	b4e0 <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>
    25a8:	4a0f      	ldr	r2, [pc, #60]	; (25e8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    25aa:	1b01      	subs	r1, r0, r4
    25ac:	f102 0c01 	add.w	ip, r2, #1
    25b0:	ebb1 0f9c 	cmp.w	r1, ip, lsr #2
    25b4:	bf24      	itt	cs
    25b6:	1a23      	subcs	r3, r4, r0
    25b8:	ebb3 0f9c 	cmpcs.w	r3, ip, lsr #2
    25bc:	d30b      	bcc.n	25d6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    25be:	428a      	cmp	r2, r1
    25c0:	d203      	bcs.n	25ca <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    25c2:	1b11      	subs	r1, r2, r4
    25c4:	4408      	add	r0, r1
    25c6:	1c41      	adds	r1, r0, #1
    25c8:	e005      	b.n	25d6 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    25ca:	429a      	cmp	r2, r3
    25cc:	d207      	bcs.n	25de <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    25ce:	1a10      	subs	r0, r2, r0
    25d0:	4420      	add	r0, r4
    25d2:	1c40      	adds	r0, r0, #1
    25d4:	4241      	negs	r1, r0
    25d6:	f101 000f 	add.w	r0, r1, #15
    25da:	1a28      	subs	r0, r5, r0
    25dc:	bd70      	pop	{r4, r5, r6, pc}
    25de:	f640 310b 	movw	r1, #2827	; 0xb0b
    25e2:	2070      	movs	r0, #112	; 0x70
    25e4:	f001 f84a 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25e8:	1e847fff 	.word	0x1e847fff

000025ec <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    25ec:	0b41      	lsrs	r1, r0, #13
    25ee:	f248 6237 	movw	r2, #34359	; 0x8637
    25f2:	4351      	muls	r1, r2
    25f4:	0c0a      	lsrs	r2, r1, #16
    25f6:	4b09      	ldr	r3, [pc, #36]	; (261c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    25f8:	0251      	lsls	r1, r2, #9
    25fa:	fb02 0203 	mla	r2, r2, r3, r0
    25fe:	4808      	ldr	r0, [pc, #32]	; (2620 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2600:	4350      	muls	r0, r2
    2602:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    2606:	306e      	adds	r0, #110	; 0x6e
    2608:	0d40      	lsrs	r0, r0, #21
    260a:	425b      	negs	r3, r3
    260c:	fb10 f303 	smulbb	r3, r0, r3
    2610:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2614:	bf88      	it	hi
    2616:	1c49      	addhi	r1, r1, #1
    2618:	4408      	add	r0, r1
    261a:	4770      	bx	lr
    261c:	ffffc2f7 	.word	0xffffc2f7
    2620:	00010c6f 	.word	0x00010c6f

00002624 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2624:	0b43      	lsrs	r3, r0, #13
    2626:	f248 6c37 	movw	ip, #34359	; 0x8637
    262a:	fb03 f30c 	mul.w	r3, r3, ip
    262e:	b430      	push	{r4, r5}
    2630:	0c1b      	lsrs	r3, r3, #16
    2632:	f8df c044 	ldr.w	ip, [pc, #68]	; 2678 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    2636:	025c      	lsls	r4, r3, #9
    2638:	fb03 030c 	mla	r3, r3, ip, r0
    263c:	480f      	ldr	r0, [pc, #60]	; (267c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    263e:	4358      	muls	r0, r3
    2640:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2644:	eb04 000c 	add.w	r0, r4, ip
    2648:	f643 5409 	movw	r4, #15625	; 0x3d09
    264c:	fb1c f404 	smulbb	r4, ip, r4
    2650:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2654:	f643 5508 	movw	r5, #15624	; 0x3d08
    2658:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    265c:	442c      	add	r4, r5
    265e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    2662:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2666:	bf84      	itt	hi
    2668:	f04f 0c00 	movhi.w	ip, #0
    266c:	1c40      	addhi	r0, r0, #1
    266e:	6008      	str	r0, [r1, #0]
    2670:	f882 c000 	strb.w	ip, [r2]
    2674:	bc30      	pop	{r4, r5}
    2676:	4770      	bx	lr
    2678:	ffffc2f7 	.word	0xffffc2f7
    267c:	00010c6f 	.word	0x00010c6f

00002680 <MPSL_IRQ_RTC0_Handler>:
    2680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2684:	4c38      	ldr	r4, [pc, #224]	; (2768 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2686:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    268a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 276c <MPSL_IRQ_RTC0_Handler+0xec>
    268e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2692:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2696:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    269a:	f04f 0500 	mov.w	r5, #0
    269e:	bf1c      	itt	ne
    26a0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    26a4:	2800      	cmpne	r0, #0
    26a6:	d017      	beq.n	26d8 <MPSL_IRQ_RTC0_Handler+0x58>
    26a8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26ac:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26b0:	482f      	ldr	r0, [pc, #188]	; (2770 <MPSL_IRQ_RTC0_Handler+0xf0>)
    26b2:	6800      	ldr	r0, [r0, #0]
    26b4:	f8d8 1000 	ldr.w	r1, [r8]
    26b8:	eba0 0001 	sub.w	r0, r0, r1
    26bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26c0:	2802      	cmp	r0, #2
    26c2:	d302      	bcc.n	26ca <MPSL_IRQ_RTC0_Handler+0x4a>
    26c4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    26c8:	d306      	bcc.n	26d8 <MPSL_IRQ_RTC0_Handler+0x58>
    26ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    26ce:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    26d2:	2004      	movs	r0, #4
    26d4:	f7fe ff68 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    26d8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    26dc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    26e0:	bf1c      	itt	ne
    26e2:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    26e6:	2800      	cmpne	r0, #0
    26e8:	d017      	beq.n	271a <MPSL_IRQ_RTC0_Handler+0x9a>
    26ea:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    26ee:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    26f2:	4820      	ldr	r0, [pc, #128]	; (2774 <MPSL_IRQ_RTC0_Handler+0xf4>)
    26f4:	6800      	ldr	r0, [r0, #0]
    26f6:	f8d8 1000 	ldr.w	r1, [r8]
    26fa:	eba0 0001 	sub.w	r0, r0, r1
    26fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2702:	2802      	cmp	r0, #2
    2704:	d302      	bcc.n	270c <MPSL_IRQ_RTC0_Handler+0x8c>
    2706:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    270a:	d306      	bcc.n	271a <MPSL_IRQ_RTC0_Handler+0x9a>
    270c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2710:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2714:	2005      	movs	r0, #5
    2716:	f7fe ff47 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    271a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    271e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2722:	bf1a      	itte	ne
    2724:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2728:	2800      	cmpne	r0, #0
    272a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    272e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2732:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2736:	4810      	ldr	r0, [pc, #64]	; (2778 <MPSL_IRQ_RTC0_Handler+0xf8>)
    2738:	6800      	ldr	r0, [r0, #0]
    273a:	f8d8 1000 	ldr.w	r1, [r8]
    273e:	eba0 0001 	sub.w	r0, r0, r1
    2742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2746:	2802      	cmp	r0, #2
    2748:	d304      	bcc.n	2754 <MPSL_IRQ_RTC0_Handler+0xd4>
    274a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    274e:	bf38      	it	cc
    2750:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2754:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2758:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    275c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2760:	2006      	movs	r0, #6
    2762:	f7fe bf21 	b.w	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2766:	0000      	.short	0x0000
    2768:	4000b000 	.word	0x4000b000
    276c:	4000b504 	.word	0x4000b504
    2770:	4000b540 	.word	0x4000b540
    2774:	4000b544 	.word	0x4000b544
    2778:	4000b548 	.word	0x4000b548

0000277c <MPSL_IRQ_TIMER0_Handler>:
    277c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2780:	4d3a      	ldr	r5, [pc, #232]	; (286c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2782:	7828      	ldrb	r0, [r5, #0]
    2784:	2804      	cmp	r0, #4
    2786:	d06c      	beq.n	2862 <MPSL_IRQ_TIMER0_Handler+0xe6>
    2788:	1ce8      	adds	r0, r5, #3
    278a:	2201      	movs	r2, #1
    278c:	7801      	ldrb	r1, [r0, #0]
    278e:	b159      	cbz	r1, 27a8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    2790:	2901      	cmp	r1, #1
    2792:	bf08      	it	eq
    2794:	706a      	strbeq	r2, [r5, #1]
    2796:	d002      	beq.n	279e <MPSL_IRQ_TIMER0_Handler+0x22>
    2798:	7869      	ldrb	r1, [r5, #1]
    279a:	2900      	cmp	r1, #0
    279c:	d05c      	beq.n	2858 <MPSL_IRQ_TIMER0_Handler+0xdc>
    279e:	2102      	movs	r1, #2
    27a0:	7001      	strb	r1, [r0, #0]
    27a2:	7840      	ldrb	r0, [r0, #1]
    27a4:	f000 fae2 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27a8:	4c31      	ldr	r4, [pc, #196]	; (2870 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    27aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27ae:	f04f 0800 	mov.w	r8, #0
    27b2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    27b6:	f44f 7680 	mov.w	r6, #256	; 0x100
    27ba:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    27be:	bf1c      	itt	ne
    27c0:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    27c4:	2800      	cmpne	r0, #0
    27c6:	d008      	beq.n	27da <MPSL_IRQ_TIMER0_Handler+0x5e>
    27c8:	f04f 0003 	mov.w	r0, #3
    27cc:	f000 face 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27d0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27d4:	2003      	movs	r0, #3
    27d6:	f7fe fee7 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27de:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    27e2:	bf1c      	itt	ne
    27e4:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    27e8:	2800      	cmpne	r0, #0
    27ea:	d008      	beq.n	27fe <MPSL_IRQ_TIMER0_Handler+0x82>
    27ec:	f04f 0002 	mov.w	r0, #2
    27f0:	f000 fabc 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27f4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27f8:	2002      	movs	r0, #2
    27fa:	f7fe fed5 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2802:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2806:	bf1c      	itt	ne
    2808:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    280c:	2800      	cmpne	r0, #0
    280e:	d008      	beq.n	2822 <MPSL_IRQ_TIMER0_Handler+0xa6>
    2810:	f04f 0001 	mov.w	r0, #1
    2814:	f000 faaa 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2818:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    281c:	2001      	movs	r0, #1
    281e:	f7fe fec3 	bl	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2822:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2826:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    282a:	bf1a      	itte	ne
    282c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2830:	2800      	cmpne	r0, #0
    2832:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2836:	f04f 0000 	mov.w	r0, #0
    283a:	f000 fa97 	bl	2d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    283e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2842:	2004      	movs	r0, #4
    2844:	7028      	strb	r0, [r5, #0]
    2846:	f8c5 8008 	str.w	r8, [r5, #8]
    284a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    284e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2852:	2000      	movs	r0, #0
    2854:	f7fe bea8 	b.w	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2858:	f240 3166 	movw	r1, #870	; 0x366
    285c:	206c      	movs	r0, #108	; 0x6c
    285e:	f000 ff0d 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2866:	2007      	movs	r0, #7
    2868:	f7fe be9e 	b.w	15a8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    286c:	2000001c 	.word	0x2000001c
    2870:	40008000 	.word	0x40008000
    2874:	2201      	movs	r2, #1
    2876:	0213      	lsls	r3, r2, #8
    2878:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    287c:	2000      	movs	r0, #0
    287e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    2882:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2886:	f3bf 8f4f 	dsb	sy
    288a:	f3bf 8f6f 	isb	sy
    288e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    2892:	490c      	ldr	r1, [pc, #48]	; (28c4 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2894:	604a      	str	r2, [r1, #4]
    2896:	1e43      	subs	r3, r0, #1
    2898:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    289c:	4b0a      	ldr	r3, [pc, #40]	; (28c8 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    289e:	6018      	str	r0, [r3, #0]
    28a0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    28a4:	1d1b      	adds	r3, r3, #4
    28a6:	6018      	str	r0, [r3, #0]
    28a8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    28ac:	1d1b      	adds	r3, r3, #4
    28ae:	6018      	str	r0, [r3, #0]
    28b0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    28b4:	1d1b      	adds	r3, r3, #4
    28b6:	6018      	str	r0, [r3, #0]
    28b8:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    28bc:	610a      	str	r2, [r1, #16]
    28be:	4903      	ldr	r1, [pc, #12]	; (28cc <MPSL_IRQ_TIMER0_Handler+0x150>)
    28c0:	7048      	strb	r0, [r1, #1]
    28c2:	4770      	bx	lr
    28c4:	40008000 	.word	0x40008000
    28c8:	40008540 	.word	0x40008540
    28cc:	2000001c 	.word	0x2000001c

000028d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    28d0:	4801      	ldr	r0, [pc, #4]	; (28d8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    28d2:	6800      	ldr	r0, [r0, #0]
    28d4:	4770      	bx	lr
    28d6:	0000      	.short	0x0000
    28d8:	4000b504 	.word	0x4000b504

000028dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    28dc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    28e0:	4e41      	ldr	r6, [pc, #260]	; (29e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    28e2:	4604      	mov	r4, r0
    28e4:	1ef7      	subs	r7, r6, #3
    28e6:	f896 c000 	ldrb.w	ip, [r6]
    28ea:	68f8      	ldr	r0, [r7, #12]
    28ec:	f1bc 0f01 	cmp.w	ip, #1
    28f0:	bf04      	itt	eq
    28f2:	42a0      	cmpeq	r0, r4
    28f4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    28f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    28fc:	4a3b      	ldr	r2, [pc, #236]	; (29ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    28fe:	6011      	str	r1, [r2, #0]
    2900:	493b      	ldr	r1, [pc, #236]	; (29f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    2902:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2906:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    290a:	4a3a      	ldr	r2, [pc, #232]	; (29f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    290c:	f04f 0500 	mov.w	r5, #0
    2910:	f1bc 0f00 	cmp.w	ip, #0
    2914:	d057      	beq.n	29c6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    2916:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    291a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    291e:	6015      	str	r5, [r2, #0]
    2920:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2924:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    2928:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    292c:	f04f 0801 	mov.w	r8, #1
    2930:	2a00      	cmp	r2, #0
    2932:	bf04      	itt	eq
    2934:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    2938:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    293c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2940:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2944:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2948:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    294c:	4a2a      	ldr	r2, [pc, #168]	; (29f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    294e:	f8d2 a000 	ldr.w	sl, [r2]
    2952:	eba4 0a0a 	sub.w	sl, r4, sl
    2956:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    295a:	f1bb 0f02 	cmp.w	fp, #2
    295e:	d33c      	bcc.n	29da <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2960:	f04f 0a02 	mov.w	sl, #2
    2964:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2968:	d237      	bcs.n	29da <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    296a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    296e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2972:	f1bc 0f00 	cmp.w	ip, #0
    2976:	d005      	beq.n	2984 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2978:	6811      	ldr	r1, [r2, #0]
    297a:	1a41      	subs	r1, r0, r1
    297c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2980:	2902      	cmp	r1, #2
    2982:	d3f9      	bcc.n	2978 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2984:	f8c7 8008 	str.w	r8, [r7, #8]
    2988:	703d      	strb	r5, [r7, #0]
    298a:	f7ff ff73 	bl	2874 <MPSL_IRQ_TIMER0_Handler+0xf8>
    298e:	481b      	ldr	r0, [pc, #108]	; (29fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2990:	6005      	str	r5, [r0, #0]
    2992:	1d00      	adds	r0, r0, #4
    2994:	f8c0 a000 	str.w	sl, [r0]
    2998:	4919      	ldr	r1, [pc, #100]	; (2a00 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    299a:	2004      	movs	r0, #4
    299c:	6008      	str	r0, [r1, #0]
    299e:	4919      	ldr	r1, [pc, #100]	; (2a04 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    29a0:	f8c1 800c 	str.w	r8, [r1, #12]
    29a4:	68ba      	ldr	r2, [r7, #8]
    29a6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    29aa:	0181      	lsls	r1, r0, #6
    29ac:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    29b0:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    29b4:	4a14      	ldr	r2, [pc, #80]	; (2a08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    29b6:	0741      	lsls	r1, r0, #29
    29b8:	6011      	str	r1, [r2, #0]
    29ba:	60fc      	str	r4, [r7, #12]
    29bc:	7070      	strb	r0, [r6, #1]
    29be:	f886 8000 	strb.w	r8, [r6]
    29c2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    29c6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    29ca:	4b10      	ldr	r3, [pc, #64]	; (2a0c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    29cc:	601d      	str	r5, [r3, #0]
    29ce:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    29d2:	6015      	str	r5, [r2, #0]
    29d4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    29d8:	e7a4      	b.n	2924 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    29da:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    29de:	f240 11ef 	movw	r1, #495	; 0x1ef
    29e2:	206c      	movs	r0, #108	; 0x6c
    29e4:	f000 fe4a 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29e8:	2000001f 	.word	0x2000001f
    29ec:	4001f508 	.word	0x4001f508
    29f0:	4000b000 	.word	0x4000b000
    29f4:	4000b544 	.word	0x4000b544
    29f8:	4000b504 	.word	0x4000b504
    29fc:	40008504 	.word	0x40008504
    2a00:	40008510 	.word	0x40008510
    2a04:	40008000 	.word	0x40008000
    2a08:	4001f504 	.word	0x4001f504
    2a0c:	4000b540 	.word	0x4000b540

00002a10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a14:	4c2b      	ldr	r4, [pc, #172]	; (2ac4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2a16:	68e1      	ldr	r1, [r4, #12]
    2a18:	4281      	cmp	r1, r0
    2a1a:	bf14      	ite	ne
    2a1c:	2201      	movne	r2, #1
    2a1e:	2200      	moveq	r2, #0
    2a20:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2ac8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2a24:	f89c 7000 	ldrb.w	r7, [ip]
    2a28:	2f02      	cmp	r7, #2
    2a2a:	d002      	beq.n	2a32 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2a2c:	2a00      	cmp	r2, #0
    2a2e:	d038      	beq.n	2aa2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2a30:	e003      	b.n	2a3a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2a32:	2a00      	cmp	r2, #0
    2a34:	bf08      	it	eq
    2a36:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a3a:	7862      	ldrb	r2, [r4, #1]
    2a3c:	b382      	cbz	r2, 2aa0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2a3e:	4b23      	ldr	r3, [pc, #140]	; (2acc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a44:	601a      	str	r2, [r3, #0]
    2a46:	4b22      	ldr	r3, [pc, #136]	; (2ad0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2a48:	1395      	asrs	r5, r2, #14
    2a4a:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2a4e:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2a52:	2600      	movs	r6, #0
    2a54:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2a58:	4a1e      	ldr	r2, [pc, #120]	; (2ad4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2a5a:	f8d2 8000 	ldr.w	r8, [r2]
    2a5e:	eba0 0808 	sub.w	r8, r0, r8
    2a62:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2a66:	f1b8 0f02 	cmp.w	r8, #2
    2a6a:	d324      	bcc.n	2ab6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a6c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2a70:	d221      	bcs.n	2ab6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2a72:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2a76:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2a7a:	b12f      	cbz	r7, 2a88 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2a7c:	6813      	ldr	r3, [r2, #0]
    2a7e:	1acb      	subs	r3, r1, r3
    2a80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2a84:	2b02      	cmp	r3, #2
    2a86:	d3f9      	bcc.n	2a7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2a88:	4b13      	ldr	r3, [pc, #76]	; (2ad8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2a8a:	2102      	movs	r1, #2
    2a8c:	074a      	lsls	r2, r1, #29
    2a8e:	601a      	str	r2, [r3, #0]
    2a90:	60e0      	str	r0, [r4, #12]
    2a92:	2004      	movs	r0, #4
    2a94:	f88c 0001 	strb.w	r0, [ip, #1]
    2a98:	f88c 1000 	strb.w	r1, [ip]
    2a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2aa0:	e004      	b.n	2aac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2aa2:	f240 11fd 	movw	r1, #509	; 0x1fd
    2aa6:	206c      	movs	r0, #108	; 0x6c
    2aa8:	f000 fde8 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aac:	f240 2101 	movw	r1, #513	; 0x201
    2ab0:	206c      	movs	r0, #108	; 0x6c
    2ab2:	f000 fde3 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ab6:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2aba:	f240 210d 	movw	r1, #525	; 0x20d
    2abe:	206c      	movs	r0, #108	; 0x6c
    2ac0:	f000 fddc 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ac4:	2000001c 	.word	0x2000001c
    2ac8:	2000001f 	.word	0x2000001f
    2acc:	4001f508 	.word	0x4001f508
    2ad0:	4000b000 	.word	0x4000b000
    2ad4:	4000b504 	.word	0x4000b504
    2ad8:	4001f504 	.word	0x4001f504

00002adc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2adc:	4801      	ldr	r0, [pc, #4]	; (2ae4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2ade:	68c0      	ldr	r0, [r0, #12]
    2ae0:	4770      	bx	lr
    2ae2:	0000      	.short	0x0000
    2ae4:	2000001c 	.word	0x2000001c

00002ae8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aec:	4833      	ldr	r0, [pc, #204]	; (2bbc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2aee:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2af2:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2af6:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2bc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2afa:	4a32      	ldr	r2, [pc, #200]	; (2bc4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2afc:	2100      	movs	r1, #0
    2afe:	f89c 3000 	ldrb.w	r3, [ip]
    2b02:	b163      	cbz	r3, 2b1e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2b04:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2b08:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2b0c:	6011      	str	r1, [r2, #0]
    2b0e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2b12:	bf00      	nop
    2b14:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2b18:	2201      	movs	r2, #1
    2b1a:	b980      	cbnz	r0, 2b3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2b1c:	e009      	b.n	2b32 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2b1e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2b22:	4c29      	ldr	r4, [pc, #164]	; (2bc8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2b24:	6021      	str	r1, [r4, #0]
    2b26:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2b2a:	6011      	str	r1, [r2, #0]
    2b2c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2b30:	e7f0      	b.n	2b14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2b32:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2b36:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2b3a:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2b3e:	2b02      	cmp	r3, #2
    2b40:	d004      	beq.n	2b4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2b42:	f240 2119 	movw	r1, #537	; 0x219
    2b46:	206c      	movs	r0, #108	; 0x6c
    2b48:	f000 fd98 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b4c:	4e1f      	ldr	r6, [pc, #124]	; (2bcc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2b4e:	6830      	ldr	r0, [r6, #0]
    2b50:	4c1f      	ldr	r4, [pc, #124]	; (2bd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2b52:	1cc0      	adds	r0, r0, #3
    2b54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b58:	68e3      	ldr	r3, [r4, #12]
    2b5a:	4d1e      	ldr	r5, [pc, #120]	; (2bd4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2b5c:	4298      	cmp	r0, r3
    2b5e:	d00b      	beq.n	2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b60:	6837      	ldr	r7, [r6, #0]
    2b62:	1bdf      	subs	r7, r3, r7
    2b64:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2b68:	2f04      	cmp	r7, #4
    2b6a:	d305      	bcc.n	2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b6c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2b70:	d202      	bcs.n	2b78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2b72:	f7ff feb3 	bl	28dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2b76:	e01b      	b.n	2bb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2b78:	6830      	ldr	r0, [r6, #0]
    2b7a:	1a18      	subs	r0, r3, r0
    2b7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2b80:	2802      	cmp	r0, #2
    2b82:	d313      	bcc.n	2bac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b84:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2b88:	d210      	bcs.n	2bac <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2b8a:	4b13      	ldr	r3, [pc, #76]	; (2bd8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2b8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b90:	6018      	str	r0, [r3, #0]
    2b92:	60a2      	str	r2, [r4, #8]
    2b94:	7021      	strb	r1, [r4, #0]
    2b96:	606a      	str	r2, [r5, #4]
    2b98:	60ea      	str	r2, [r5, #12]
    2b9a:	0040      	lsls	r0, r0, #1
    2b9c:	1f19      	subs	r1, r3, #4
    2b9e:	6008      	str	r0, [r1, #0]
    2ba0:	2004      	movs	r0, #4
    2ba2:	f88c 0001 	strb.w	r0, [ip, #1]
    2ba6:	f88c 2000 	strb.w	r2, [ip]
    2baa:	e001      	b.n	2bb0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2bac:	60a2      	str	r2, [r4, #8]
    2bae:	7021      	strb	r1, [r4, #0]
    2bb0:	68a0      	ldr	r0, [r4, #8]
    2bb2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bba:	0000      	.short	0x0000
    2bbc:	4000b000 	.word	0x4000b000
    2bc0:	2000001f 	.word	0x2000001f
    2bc4:	4000b544 	.word	0x4000b544
    2bc8:	4000b540 	.word	0x4000b540
    2bcc:	4000b504 	.word	0x4000b504
    2bd0:	2000001c 	.word	0x2000001c
    2bd4:	40008000 	.word	0x40008000
    2bd8:	4001f508 	.word	0x4001f508

00002bdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2be0:	f8df c174 	ldr.w	ip, [pc, #372]	; 2d58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2be4:	2701      	movs	r7, #1
    2be6:	f04f 0800 	mov.w	r8, #0
    2bea:	f89c 5000 	ldrb.w	r5, [ip]
    2bee:	f89c c001 	ldrb.w	ip, [ip, #1]
    2bf2:	2807      	cmp	r0, #7
    2bf4:	d27e      	bcs.n	2cf4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2bf6:	e8df f000 	tbb	[pc, r0]
    2bfa:	0404      	.short	0x0404
    2bfc:	6a6a0404 	.word	0x6a6a0404
    2c00:	006a      	.short	0x006a
    2c02:	4c56      	ldr	r4, [pc, #344]	; (2d5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2c04:	68e6      	ldr	r6, [r4, #12]
    2c06:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2c0a:	bf04      	itt	eq
    2c0c:	7864      	ldrbeq	r4, [r4, #1]
    2c0e:	2c00      	cmpeq	r4, #0
    2c10:	d002      	beq.n	2c18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2c12:	2d02      	cmp	r5, #2
    2c14:	d005      	beq.n	2c22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2c16:	e03c      	b.n	2c92 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2c18:	f44f 7113 	mov.w	r1, #588	; 0x24c
    2c1c:	206c      	movs	r0, #108	; 0x6c
    2c1e:	f000 fd2d 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c22:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2c26:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2c2a:	f1ac 0404 	sub.w	r4, ip, #4
    2c2e:	0624      	lsls	r4, r4, #24
    2c30:	0da4      	lsrs	r4, r4, #22
    2c32:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2c36:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2c3a:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2c3e:	2400      	movs	r4, #0
    2c40:	2d01      	cmp	r5, #1
    2c42:	d002      	beq.n	2c4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2c44:	2d02      	cmp	r5, #2
    2c46:	d011      	beq.n	2c6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2c48:	e020      	b.n	2c8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c4a:	f1bc 0f04 	cmp.w	ip, #4
    2c4e:	d205      	bcs.n	2c5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2c50:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c54:	f1ba 0f00 	cmp.w	sl, #0
    2c58:	d118      	bne.n	2c8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c5a:	e004      	b.n	2c66 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2c5c:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c60:	f1ba 0f00 	cmp.w	sl, #0
    2c64:	d112      	bne.n	2c8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c66:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2c6a:	e00f      	b.n	2c8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c6c:	f1bc 0f04 	cmp.w	ip, #4
    2c70:	d205      	bcs.n	2c7e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2c72:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2c76:	f1ba 0f00 	cmp.w	sl, #0
    2c7a:	d107      	bne.n	2c8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c7c:	e004      	b.n	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2c7e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2c82:	f1ba 0f00 	cmp.w	sl, #0
    2c86:	d101      	bne.n	2c8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2c88:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2c8c:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2c90:	d1d5      	bne.n	2c3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2c92:	4c33      	ldr	r4, [pc, #204]	; (2d60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2c94:	f100 0c10 	add.w	ip, r0, #16
    2c98:	fa07 fc0c 	lsl.w	ip, r7, ip
    2c9c:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2ca0:	0080      	lsls	r0, r0, #2
    2ca2:	4420      	add	r0, r4
    2ca4:	b152      	cbz	r2, 2cbc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2ca6:	6407      	str	r7, [r0, #64]	; 0x40
    2ca8:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2cac:	1b8d      	subs	r5, r1, r6
    2cae:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2cb2:	42aa      	cmp	r2, r5
    2cb4:	bf98      	it	ls
    2cb6:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2cba:	d243      	bcs.n	2d44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2cbc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2cc0:	2b01      	cmp	r3, #1
    2cc2:	bf08      	it	eq
    2cc4:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2cc8:	2001      	movs	r0, #1
    2cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cce:	b135      	cbz	r5, 2cde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2cd0:	4584      	cmp	ip, r0
    2cd2:	d104      	bne.n	2cde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2cd4:	f240 216f 	movw	r1, #623	; 0x26f
    2cd8:	206c      	movs	r0, #108	; 0x6c
    2cda:	f000 fccf 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cde:	1f00      	subs	r0, r0, #4
    2ce0:	b2c0      	uxtb	r0, r0
    2ce2:	2b01      	cmp	r3, #1
    2ce4:	bf0c      	ite	eq
    2ce6:	2401      	moveq	r4, #1
    2ce8:	2400      	movne	r4, #0
    2cea:	2803      	cmp	r0, #3
    2cec:	d306      	bcc.n	2cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2cee:	f240 1149 	movw	r1, #329	; 0x149
    2cf2:	e000      	b.n	2cf6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2cf4:	e02b      	b.n	2d4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2cf6:	206c      	movs	r0, #108	; 0x6c
    2cf8:	f000 fcc0 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cfc:	f8df c064 	ldr.w	ip, [pc, #100]	; 2d64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2d00:	f100 0310 	add.w	r3, r0, #16
    2d04:	fa07 f303 	lsl.w	r3, r7, r3
    2d08:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2d0c:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2d10:	0080      	lsls	r0, r0, #2
    2d12:	4460      	add	r0, ip
    2d14:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2d18:	b14a      	cbz	r2, 2d2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2d1a:	4d13      	ldr	r5, [pc, #76]	; (2d68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2d1c:	682e      	ldr	r6, [r5, #0]
    2d1e:	1b8d      	subs	r5, r1, r6
    2d20:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2d24:	42aa      	cmp	r2, r5
    2d26:	bf98      	it	ls
    2d28:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2d2c:	d20a      	bcs.n	2d44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2d2e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2d32:	2c00      	cmp	r4, #0
    2d34:	bf18      	it	ne
    2d36:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2d3a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2d3e:	2001      	movs	r0, #1
    2d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d44:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2d48:	2000      	movs	r0, #0
    2d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d4e:	f44f 711d 	mov.w	r1, #628	; 0x274
    2d52:	206c      	movs	r0, #108	; 0x6c
    2d54:	f000 fc92 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d58:	2000001f 	.word	0x2000001f
    2d5c:	2000001c 	.word	0x2000001c
    2d60:	40008000 	.word	0x40008000
    2d64:	4000b000 	.word	0x4000b000
    2d68:	4000b504 	.word	0x4000b504

00002d6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d6e:	2701      	movs	r7, #1
    2d70:	2400      	movs	r4, #0
    2d72:	2807      	cmp	r0, #7
    2d74:	d24c      	bcs.n	2e10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2d76:	e8df f000 	tbb	[pc, r0]
    2d7a:	0404      	.short	0x0404
    2d7c:	16160404 	.word	0x16160404
    2d80:	0016      	.short	0x0016
    2d82:	4a26      	ldr	r2, [pc, #152]	; (2e1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2d84:	f100 0110 	add.w	r1, r0, #16
    2d88:	fa07 f101 	lsl.w	r1, r7, r1
    2d8c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2d90:	0081      	lsls	r1, r0, #2
    2d92:	4411      	add	r1, r2
    2d94:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2d98:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2d9c:	4920      	ldr	r1, [pc, #128]	; (2e20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2d9e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2da2:	9000      	str	r0, [sp, #0]
    2da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2da6:	4d1f      	ldr	r5, [pc, #124]	; (2e24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2da8:	1f01      	subs	r1, r0, #4
    2daa:	b2ce      	uxtb	r6, r1
    2dac:	7829      	ldrb	r1, [r5, #0]
    2dae:	b179      	cbz	r1, 2dd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2db0:	786a      	ldrb	r2, [r5, #1]
    2db2:	4282      	cmp	r2, r0
    2db4:	d10c      	bne.n	2dd0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2db6:	4a1c      	ldr	r2, [pc, #112]	; (2e28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2db8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2dbc:	6010      	str	r0, [r2, #0]
    2dbe:	2901      	cmp	r1, #1
    2dc0:	bf08      	it	eq
    2dc2:	f7ff fd57 	bleq	2874 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2dc6:	702c      	strb	r4, [r5, #0]
    2dc8:	4918      	ldr	r1, [pc, #96]	; (2e2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2dca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2dce:	60c8      	str	r0, [r1, #12]
    2dd0:	f106 0010 	add.w	r0, r6, #16
    2dd4:	fa07 f100 	lsl.w	r1, r7, r0
    2dd8:	4815      	ldr	r0, [pc, #84]	; (2e30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2dda:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2dde:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2de2:	00b0      	lsls	r0, r6, #2
    2de4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2de8:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2dec:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2df0:	4a10      	ldr	r2, [pc, #64]	; (2e34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2df2:	6812      	ldr	r2, [r2, #0]
    2df4:	1a89      	subs	r1, r1, r2
    2df6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2dfa:	2902      	cmp	r1, #2
    2dfc:	bf24      	itt	cs
    2dfe:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2e02:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2e06:	480c      	ldr	r0, [pc, #48]	; (2e38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2e08:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2e0c:	9000      	str	r0, [sp, #0]
    2e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e10:	f240 21ed 	movw	r1, #749	; 0x2ed
    2e14:	206c      	movs	r0, #108	; 0x6c
    2e16:	f000 fc31 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e1a:	0000      	.short	0x0000
    2e1c:	40008000 	.word	0x40008000
    2e20:	40008140 	.word	0x40008140
    2e24:	2000001f 	.word	0x2000001f
    2e28:	4001f508 	.word	0x4001f508
    2e2c:	2000001c 	.word	0x2000001c
    2e30:	4000b000 	.word	0x4000b000
    2e34:	4000b504 	.word	0x4000b504
    2e38:	4000b140 	.word	0x4000b140

00002e3c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2e3c:	491e      	ldr	r1, [pc, #120]	; (2eb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2e3e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2e42:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2e46:	481d      	ldr	r0, [pc, #116]	; (2ebc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2e48:	4a1d      	ldr	r2, [pc, #116]	; (2ec0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2e4a:	f890 c000 	ldrb.w	ip, [r0]
    2e4e:	2000      	movs	r0, #0
    2e50:	f1bc 0f00 	cmp.w	ip, #0
    2e54:	d00a      	beq.n	2e6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2e56:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2e5a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e5e:	6010      	str	r0, [r2, #0]
    2e60:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e64:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2e68:	b981      	cbnz	r1, 2e8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2e6a:	e009      	b.n	2e80 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2e6c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2e70:	4b14      	ldr	r3, [pc, #80]	; (2ec4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2e72:	6018      	str	r0, [r3, #0]
    2e74:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e78:	6010      	str	r0, [r2, #0]
    2e7a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2e7e:	e7f1      	b.n	2e64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2e80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2e88:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2e8c:	490e      	ldr	r1, [pc, #56]	; (2ec8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2e8e:	f04f 32ff 	mov.w	r2, #4294967295
    2e92:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2e96:	4a0d      	ldr	r2, [pc, #52]	; (2ecc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2e98:	6010      	str	r0, [r2, #0]
    2e9a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2e9e:	1d12      	adds	r2, r2, #4
    2ea0:	6010      	str	r0, [r2, #0]
    2ea2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2ea6:	1d12      	adds	r2, r2, #4
    2ea8:	6010      	str	r0, [r2, #0]
    2eaa:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2eae:	1d12      	adds	r2, r2, #4
    2eb0:	6010      	str	r0, [r2, #0]
    2eb2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2eb6:	4770      	bx	lr
    2eb8:	4000b000 	.word	0x4000b000
    2ebc:	2000001f 	.word	0x2000001f
    2ec0:	4000b544 	.word	0x4000b544
    2ec4:	4000b540 	.word	0x4000b540
    2ec8:	40008000 	.word	0x40008000
    2ecc:	40008540 	.word	0x40008540

00002ed0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2ed0:	4808      	ldr	r0, [pc, #32]	; (2ef4 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2ed2:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2ed6:	2800      	cmp	r0, #0
    2ed8:	bfb8      	it	lt
    2eda:	4770      	bxlt	lr
    2edc:	f000 011f 	and.w	r1, r0, #31
    2ee0:	2201      	movs	r2, #1
    2ee2:	fa02 f101 	lsl.w	r1, r2, r1
    2ee6:	0940      	lsrs	r0, r0, #5
    2ee8:	0080      	lsls	r0, r0, #2
    2eea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2eee:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2ef2:	4770      	bx	lr
    2ef4:	2000001c 	.word	0x2000001c

00002ef8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2ef8:	b510      	push	{r4, lr}
    2efa:	2807      	cmp	r0, #7
    2efc:	d20d      	bcs.n	2f1a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2efe:	e8df f000 	tbb	[pc, r0]
    2f02:	0404      	.short	0x0404
    2f04:	06060404 	.word	0x06060404
    2f08:	0006      	.short	0x0006
    2f0a:	4906      	ldr	r1, [pc, #24]	; (2f24 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2f0c:	e002      	b.n	2f14 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2f0e:	1f00      	subs	r0, r0, #4
    2f10:	4905      	ldr	r1, [pc, #20]	; (2f28 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2f12:	b2c0      	uxtb	r0, r0
    2f14:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2f18:	bd10      	pop	{r4, pc}
    2f1a:	f44f 7126 	mov.w	r1, #664	; 0x298
    2f1e:	206c      	movs	r0, #108	; 0x6c
    2f20:	f000 fbac 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f24:	40008140 	.word	0x40008140
    2f28:	4000b140 	.word	0x4000b140

00002f2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2f2c:	b570      	push	{r4, r5, r6, lr}
    2f2e:	4819      	ldr	r0, [pc, #100]	; (2f94 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2f30:	2400      	movs	r4, #0
    2f32:	2104      	movs	r1, #4
    2f34:	7004      	strb	r4, [r0, #0]
    2f36:	1ec0      	subs	r0, r0, #3
    2f38:	7001      	strb	r1, [r0, #0]
    2f3a:	0589      	lsls	r1, r1, #22
    2f3c:	60c1      	str	r1, [r0, #12]
    2f3e:	f7ff fc99 	bl	2874 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2f42:	2501      	movs	r5, #1
    2f44:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2f48:	02eb      	lsls	r3, r5, #11
    2f4a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2f4e:	f3bf 8f4f 	dsb	sy
    2f52:	f3bf 8f6f 	isb	sy
    2f56:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    2f5a:	4a0f      	ldr	r2, [pc, #60]	; (2f98 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    2f5c:	6055      	str	r5, [r2, #4]
    2f5e:	6095      	str	r5, [r2, #8]
    2f60:	480e      	ldr	r0, [pc, #56]	; (2f9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    2f62:	6801      	ldr	r1, [r0, #0]
    2f64:	2900      	cmp	r1, #0
    2f66:	d1fc      	bne.n	2f62 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    2f68:	1e48      	subs	r0, r1, #1
    2f6a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2f6e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    2f72:	480b      	ldr	r0, [pc, #44]	; (2fa0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    2f74:	6004      	str	r4, [r0, #0]
    2f76:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    2f7a:	1d00      	adds	r0, r0, #4
    2f7c:	6004      	str	r4, [r0, #0]
    2f7e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    2f82:	1d00      	adds	r0, r0, #4
    2f84:	6004      	str	r4, [r0, #0]
    2f86:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    2f8a:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    2f8e:	6015      	str	r5, [r2, #0]
    2f90:	bd70      	pop	{r4, r5, r6, pc}
    2f92:	0000      	.short	0x0000
    2f94:	2000001f 	.word	0x2000001f
    2f98:	4000b000 	.word	0x4000b000
    2f9c:	4000b504 	.word	0x4000b504
    2fa0:	4000b540 	.word	0x4000b540

00002fa4 <MPSL_IRQ_CLOCK_Handler>:
    2fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fa8:	4c16      	ldr	r4, [pc, #88]	; (3004 <MPSL_IRQ_CLOCK_Handler+0x60>)
    2faa:	7a60      	ldrb	r0, [r4, #9]
    2fac:	2800      	cmp	r0, #0
    2fae:	d027      	beq.n	3000 <MPSL_IRQ_CLOCK_Handler+0x5c>
    2fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
    2fb4:	058d      	lsls	r5, r1, #22
    2fb6:	4628      	mov	r0, r5
    2fb8:	f008 faee 	bl	b598 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fbc:	4680      	mov	r8, r0
    2fbe:	f44f 7182 	mov.w	r1, #260	; 0x104
    2fc2:	4628      	mov	r0, r5
    2fc4:	f008 fae8 	bl	b598 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    2fc8:	2600      	movs	r6, #0
    2fca:	4607      	mov	r7, r0
    2fcc:	f1b8 0f00 	cmp.w	r8, #0
    2fd0:	d009      	beq.n	2fe6 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fd2:	2001      	movs	r0, #1
    2fd4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2fd8:	7920      	ldrb	r0, [r4, #4]
    2fda:	b120      	cbz	r0, 2fe6 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fdc:	7126      	strb	r6, [r4, #4]
    2fde:	69e0      	ldr	r0, [r4, #28]
    2fe0:	b108      	cbz	r0, 2fe6 <MPSL_IRQ_CLOCK_Handler+0x42>
    2fe2:	4780      	blx	r0
    2fe4:	61e6      	str	r6, [r4, #28]
    2fe6:	b137      	cbz	r7, 2ff6 <MPSL_IRQ_CLOCK_Handler+0x52>
    2fe8:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    2fec:	2002      	movs	r0, #2
    2fee:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    2ff2:	f000 fa8b 	bl	350c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    2ff6:	4640      	mov	r0, r8
    2ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2ffc:	f000 b85a 	b.w	30b4 <MPSL_IRQ_CLOCK_Handler+0x110>
    3000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3004:	2000002c 	.word	0x2000002c
    3008:	b510      	push	{r4, lr}
    300a:	f008 fb6f 	bl	b6ec <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    300e:	b930      	cbnz	r0, 301e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3010:	f008 fb8d 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3014:	b918      	cbnz	r0, 301e <MPSL_IRQ_CLOCK_Handler+0x7a>
    3016:	f008 fbc0 	bl	b79a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    301a:	2800      	cmp	r0, #0
    301c:	d002      	beq.n	3024 <MPSL_IRQ_CLOCK_Handler+0x80>
    301e:	4902      	ldr	r1, [pc, #8]	; (3028 <MPSL_IRQ_CLOCK_Handler+0x84>)
    3020:	2002      	movs	r0, #2
    3022:	6008      	str	r0, [r1, #0]
    3024:	bd10      	pop	{r4, pc}
    3026:	0000      	.short	0x0000
    3028:	40000c34 	.word	0x40000c34
    302c:	b570      	push	{r4, r5, r6, lr}
    302e:	f000 f987 	bl	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3032:	f000 fabf 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3036:	4c09      	ldr	r4, [pc, #36]	; (305c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    3038:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    303c:	b130      	cbz	r0, 304c <MPSL_IRQ_CLOCK_Handler+0xa8>
    303e:	f7ff ffe3 	bl	3008 <MPSL_IRQ_CLOCK_Handler+0x64>
    3042:	2001      	movs	r0, #1
    3044:	6128      	str	r0, [r5, #16]
    3046:	2004      	movs	r0, #4
    3048:	72a0      	strb	r0, [r4, #10]
    304a:	e004      	b.n	3056 <MPSL_IRQ_CLOCK_Handler+0xb2>
    304c:	2003      	movs	r0, #3
    304e:	72a0      	strb	r0, [r4, #10]
    3050:	2001      	movs	r0, #1
    3052:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3056:	2000      	movs	r0, #0
    3058:	71e0      	strb	r0, [r4, #7]
    305a:	bd70      	pop	{r4, r5, r6, pc}
    305c:	2000002c 	.word	0x2000002c
    3060:	b570      	push	{r4, r5, r6, lr}
    3062:	4c13      	ldr	r4, [pc, #76]	; (30b0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3064:	79a0      	ldrb	r0, [r4, #6]
    3066:	b1f0      	cbz	r0, 30a6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3068:	2801      	cmp	r0, #1
    306a:	d003      	beq.n	3074 <MPSL_IRQ_CLOCK_Handler+0xd0>
    306c:	79e1      	ldrb	r1, [r4, #7]
    306e:	1e40      	subs	r0, r0, #1
    3070:	4281      	cmp	r1, r0
    3072:	da18      	bge.n	30a6 <MPSL_IRQ_CLOCK_Handler+0x102>
    3074:	f000 fa9e 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3078:	4605      	mov	r5, r0
    307a:	f000 fb6f 	bl	375c <mpsl_temperature_get>
    307e:	79a1      	ldrb	r1, [r4, #6]
    3080:	2901      	cmp	r1, #1
    3082:	d902      	bls.n	308a <MPSL_IRQ_CLOCK_Handler+0xe6>
    3084:	79e1      	ldrb	r1, [r4, #7]
    3086:	1c49      	adds	r1, r1, #1
    3088:	71e1      	strb	r1, [r4, #7]
    308a:	b10d      	cbz	r5, 3090 <MPSL_IRQ_CLOCK_Handler+0xec>
    308c:	6961      	ldr	r1, [r4, #20]
    308e:	e000      	b.n	3092 <MPSL_IRQ_CLOCK_Handler+0xee>
    3090:	6921      	ldr	r1, [r4, #16]
    3092:	1a41      	subs	r1, r0, r1
    3094:	2902      	cmp	r1, #2
    3096:	da02      	bge.n	309e <MPSL_IRQ_CLOCK_Handler+0xfa>
    3098:	f111 0f02 	cmn.w	r1, #2
    309c:	dc07      	bgt.n	30ae <MPSL_IRQ_CLOCK_Handler+0x10a>
    309e:	b10d      	cbz	r5, 30a4 <MPSL_IRQ_CLOCK_Handler+0x100>
    30a0:	6160      	str	r0, [r4, #20]
    30a2:	e000      	b.n	30a6 <MPSL_IRQ_CLOCK_Handler+0x102>
    30a4:	6120      	str	r0, [r4, #16]
    30a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    30aa:	f7ff bfbf 	b.w	302c <MPSL_IRQ_CLOCK_Handler+0x88>
    30ae:	bd70      	pop	{r4, r5, r6, pc}
    30b0:	2000002c 	.word	0x2000002c
    30b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    30b8:	4606      	mov	r6, r0
    30ba:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    30be:	f44f 7186 	mov.w	r1, #268	; 0x10c
    30c2:	4628      	mov	r0, r5
    30c4:	f008 fa68 	bl	b598 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30c8:	4680      	mov	r8, r0
    30ca:	f44f 7188 	mov.w	r1, #272	; 0x110
    30ce:	4628      	mov	r0, r5
    30d0:	f008 fa62 	bl	b598 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    30d4:	4c27      	ldr	r4, [pc, #156]	; (3174 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    30d6:	4682      	mov	sl, r0
    30d8:	7827      	ldrb	r7, [r4, #0]
    30da:	f104 0008 	add.w	r0, r4, #8
    30de:	f008 facf 	bl	b680 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    30e2:	b110      	cbz	r0, 30ea <MPSL_IRQ_CLOCK_Handler+0x146>
    30e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    30e8:	e016      	b.n	3118 <MPSL_IRQ_CLOCK_Handler+0x174>
    30ea:	f04f 0901 	mov.w	r9, #1
    30ee:	b146      	cbz	r6, 3102 <MPSL_IRQ_CLOCK_Handler+0x15e>
    30f0:	7aa0      	ldrb	r0, [r4, #10]
    30f2:	2803      	cmp	r0, #3
    30f4:	d105      	bne.n	3102 <MPSL_IRQ_CLOCK_Handler+0x15e>
    30f6:	2004      	movs	r0, #4
    30f8:	72a0      	strb	r0, [r4, #10]
    30fa:	f7ff ff85 	bl	3008 <MPSL_IRQ_CLOCK_Handler+0x64>
    30fe:	f8c5 9010 	str.w	r9, [r5, #16]
    3102:	2600      	movs	r6, #0
    3104:	f1b8 0f00 	cmp.w	r8, #0
    3108:	d018      	beq.n	313c <MPSL_IRQ_CLOCK_Handler+0x198>
    310a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    310e:	7aa0      	ldrb	r0, [r4, #10]
    3110:	2804      	cmp	r0, #4
    3112:	d004      	beq.n	311e <MPSL_IRQ_CLOCK_Handler+0x17a>
    3114:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    3118:	206d      	movs	r0, #109	; 0x6d
    311a:	f000 faaf 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    311e:	f008 fae5 	bl	b6ec <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    3122:	b928      	cbnz	r0, 3130 <MPSL_IRQ_CLOCK_Handler+0x18c>
    3124:	f008 fb03 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3128:	b910      	cbnz	r0, 3130 <MPSL_IRQ_CLOCK_Handler+0x18c>
    312a:	f008 fb36 	bl	b79a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    312e:	b108      	cbz	r0, 3134 <MPSL_IRQ_CLOCK_Handler+0x190>
    3130:	4811      	ldr	r0, [pc, #68]	; (3178 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    3132:	6006      	str	r6, [r0, #0]
    3134:	2002      	movs	r0, #2
    3136:	72a0      	strb	r0, [r4, #10]
    3138:	f000 f8e6 	bl	3308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    313c:	f1ba 0f00 	cmp.w	sl, #0
    3140:	d008      	beq.n	3154 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    3142:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    3146:	7aa0      	ldrb	r0, [r4, #10]
    3148:	2802      	cmp	r0, #2
    314a:	d101      	bne.n	3150 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    314c:	f7ff ff88 	bl	3060 <MPSL_IRQ_CLOCK_Handler+0xbc>
    3150:	f8c5 9014 	str.w	r9, [r5, #20]
    3154:	b13f      	cbz	r7, 3166 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3156:	7026      	strb	r6, [r4, #0]
    3158:	7aa0      	ldrb	r0, [r4, #10]
    315a:	2802      	cmp	r0, #2
    315c:	d101      	bne.n	3162 <MPSL_IRQ_CLOCK_Handler+0x1be>
    315e:	f7ff ff65 	bl	302c <MPSL_IRQ_CLOCK_Handler+0x88>
    3162:	f000 f8d1 	bl	3308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3166:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    316a:	4802      	ldr	r0, [pc, #8]	; (3174 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    316c:	3008      	adds	r0, #8
    316e:	f008 ba9e 	b.w	b6ae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    3172:	0000      	.short	0x0000
    3174:	2000002c 	.word	0x2000002c
    3178:	40000c34 	.word	0x40000c34
    317c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3180:	4c5c      	ldr	r4, [pc, #368]	; (32f4 <MPSL_IRQ_CLOCK_Handler+0x350>)
    3182:	f04f 0800 	mov.w	r8, #0
    3186:	4606      	mov	r6, r0
    3188:	f8c4 8018 	str.w	r8, [r4, #24]
    318c:	7843      	ldrb	r3, [r0, #1]
    318e:	7882      	ldrb	r2, [r0, #2]
    3190:	7800      	ldrb	r0, [r0, #0]
    3192:	72e0      	strb	r0, [r4, #11]
    3194:	7163      	strb	r3, [r4, #5]
    3196:	2701      	movs	r7, #1
    3198:	71a2      	strb	r2, [r4, #6]
    319a:	07bd      	lsls	r5, r7, #30
    319c:	f884 8007 	strb.w	r8, [r4, #7]
    31a0:	2805      	cmp	r0, #5
    31a2:	d224      	bcs.n	31ee <MPSL_IRQ_CLOCK_Handler+0x24a>
    31a4:	e8df f000 	tbb	[pc, r0]
    31a8:	1f05030f 	.word	0x1f05030f
    31ac:	0021      	.short	0x0021
    31ae:	61a7      	str	r7, [r4, #24]
    31b0:	e009      	b.n	31c6 <MPSL_IRQ_CLOCK_Handler+0x222>
    31b2:	f000 f8c5 	bl	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    31b6:	2101      	movs	r1, #1
    31b8:	4628      	mov	r0, r5
    31ba:	f008 f9f2 	bl	b5a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    31be:	2800      	cmp	r0, #0
    31c0:	d0f9      	beq.n	31b6 <MPSL_IRQ_CLOCK_Handler+0x212>
    31c2:	2002      	movs	r0, #2
    31c4:	61a0      	str	r0, [r4, #24]
    31c6:	f008 fa18 	bl	b5fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    31ca:	b1b0      	cbz	r0, 31fa <MPSL_IRQ_CLOCK_Handler+0x256>
    31cc:	f000 fa0c 	bl	35e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    31d0:	7e21      	ldrb	r1, [r4, #24]
    31d2:	f001 0103 	and.w	r1, r1, #3
    31d6:	4288      	cmp	r0, r1
    31d8:	d10f      	bne.n	31fa <MPSL_IRQ_CLOCK_Handler+0x256>
    31da:	79b0      	ldrb	r0, [r6, #6]
    31dc:	b150      	cbz	r0, 31f4 <MPSL_IRQ_CLOCK_Handler+0x250>
    31de:	2002      	movs	r0, #2
    31e0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    31e4:	e06a      	b.n	32bc <MPSL_IRQ_CLOCK_Handler+0x318>
    31e6:	4844      	ldr	r0, [pc, #272]	; (32f8 <MPSL_IRQ_CLOCK_Handler+0x354>)
    31e8:	e7ec      	b.n	31c4 <MPSL_IRQ_CLOCK_Handler+0x220>
    31ea:	4844      	ldr	r0, [pc, #272]	; (32fc <MPSL_IRQ_CLOCK_Handler+0x358>)
    31ec:	e7ea      	b.n	31c4 <MPSL_IRQ_CLOCK_Handler+0x220>
    31ee:	f44f 714c 	mov.w	r1, #816	; 0x330
    31f2:	e049      	b.n	3288 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    31f4:	f000 f9cc 	bl	3590 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    31f8:	e060      	b.n	32bc <MPSL_IRQ_CLOCK_Handler+0x318>
    31fa:	60ef      	str	r7, [r5, #12]
    31fc:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3200:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3204:	69a0      	ldr	r0, [r4, #24]
    3206:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    320a:	f008 fa5b 	bl	b6c4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    320e:	b940      	cbnz	r0, 3222 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3210:	f008 fa62 	bl	b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3214:	b928      	cbnz	r0, 3222 <MPSL_IRQ_CLOCK_Handler+0x27e>
    3216:	f008 fa76 	bl	b706 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    321a:	b910      	cbnz	r0, 3222 <MPSL_IRQ_CLOCK_Handler+0x27e>
    321c:	f008 fa87 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3220:	b138      	cbz	r0, 3232 <MPSL_IRQ_CLOCK_Handler+0x28e>
    3222:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3226:	4836      	ldr	r0, [pc, #216]	; (3300 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    3228:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    322c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    3230:	6001      	str	r1, [r0, #0]
    3232:	f008 fa47 	bl	b6c4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3236:	b940      	cbnz	r0, 324a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3238:	f008 fa4e 	bl	b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    323c:	b928      	cbnz	r0, 324a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    323e:	f008 fa62 	bl	b706 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3242:	b910      	cbnz	r0, 324a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    3244:	f008 fa73 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3248:	b110      	cbz	r0, 3250 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    324a:	482d      	ldr	r0, [pc, #180]	; (3300 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    324c:	3010      	adds	r0, #16
    324e:	6007      	str	r7, [r0, #0]
    3250:	60af      	str	r7, [r5, #8]
    3252:	2002      	movs	r0, #2
    3254:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3258:	79b0      	ldrb	r0, [r6, #6]
    325a:	bb78      	cbnz	r0, 32bc <MPSL_IRQ_CLOCK_Handler+0x318>
    325c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    3260:	f010 0f02 	tst.w	r0, #2
    3264:	d00e      	beq.n	3284 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3266:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3304 <MPSL_IRQ_CLOCK_Handler+0x360>
    326a:	f8d9 1000 	ldr.w	r1, [r9]
    326e:	43c9      	mvns	r1, r1
    3270:	f341 1700 	sbfx	r7, r1, #4, #1
    3274:	f8d9 1000 	ldr.w	r1, [r9]
    3278:	f041 0110 	orr.w	r1, r1, #16
    327c:	f8c9 1000 	str.w	r1, [r9]
    3280:	1c7f      	adds	r7, r7, #1
    3282:	e007      	b.n	3294 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3284:	f240 21f1 	movw	r1, #753	; 0x2f1
    3288:	206d      	movs	r0, #109	; 0x6d
    328a:	f000 f9f7 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    328e:	bf00      	nop
    3290:	f000 fb1a 	bl	38c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3294:	4651      	mov	r1, sl
    3296:	4628      	mov	r0, r5
    3298:	f008 f97e 	bl	b598 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    329c:	2800      	cmp	r0, #0
    329e:	d0f7      	beq.n	3290 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    32a0:	f000 f976 	bl	3590 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32a4:	b92f      	cbnz	r7, 32b2 <MPSL_IRQ_CLOCK_Handler+0x30e>
    32a6:	f8d9 1000 	ldr.w	r1, [r9]
    32aa:	f021 0110 	bic.w	r1, r1, #16
    32ae:	f8c9 1000 	str.w	r1, [r9]
    32b2:	2002      	movs	r0, #2
    32b4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    32b8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    32bc:	79a0      	ldrb	r0, [r4, #6]
    32be:	b170      	cbz	r0, 32de <MPSL_IRQ_CLOCK_Handler+0x33a>
    32c0:	7830      	ldrb	r0, [r6, #0]
    32c2:	b960      	cbnz	r0, 32de <MPSL_IRQ_CLOCK_Handler+0x33a>
    32c4:	f000 f976 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32c8:	4606      	mov	r6, r0
    32ca:	f000 fa47 	bl	375c <mpsl_temperature_get>
    32ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    32d2:	b116      	cbz	r6, 32da <MPSL_IRQ_CLOCK_Handler+0x336>
    32d4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    32d8:	e001      	b.n	32de <MPSL_IRQ_CLOCK_Handler+0x33a>
    32da:	e9c4 0204 	strd	r0, r2, [r4, #16]
    32de:	2101      	movs	r1, #1
    32e0:	4628      	mov	r0, r5
    32e2:	f008 f95e 	bl	b5a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    32e6:	b108      	cbz	r0, 32ec <MPSL_IRQ_CLOCK_Handler+0x348>
    32e8:	f000 f95e 	bl	35a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    32ec:	f884 800a 	strb.w	r8, [r4, #10]
    32f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32f4:	2000002c 	.word	0x2000002c
    32f8:	00020001 	.word	0x00020001
    32fc:	00030001 	.word	0x00030001
    3300:	4000053c 	.word	0x4000053c
    3304:	e000ed10 	.word	0xe000ed10

00003308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    3308:	b510      	push	{r4, lr}
    330a:	f3ef 8410 	mrs	r4, PRIMASK
    330e:	b672      	cpsid	i
    3310:	480a      	ldr	r0, [pc, #40]	; (333c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    3312:	7841      	ldrb	r1, [r0, #1]
    3314:	b129      	cbz	r1, 3322 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    3316:	7841      	ldrb	r1, [r0, #1]
    3318:	1e49      	subs	r1, r1, #1
    331a:	7041      	strb	r1, [r0, #1]
    331c:	7841      	ldrb	r1, [r0, #1]
    331e:	b129      	cbz	r1, 332c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    3320:	e008      	b.n	3334 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3322:	f240 110d 	movw	r1, #269	; 0x10d
    3326:	206d      	movs	r0, #109	; 0x6d
    3328:	f000 f9a8 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    332c:	7880      	ldrb	r0, [r0, #2]
    332e:	b908      	cbnz	r0, 3334 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    3330:	f000 f94e 	bl	35d0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3334:	2c00      	cmp	r4, #0
    3336:	d100      	bne.n	333a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    3338:	b662      	cpsie	i
    333a:	bd10      	pop	{r4, pc}
    333c:	2000002c 	.word	0x2000002c

00003340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    3340:	b510      	push	{r4, lr}
    3342:	f3ef 8410 	mrs	r4, PRIMASK
    3346:	b672      	cpsid	i
    3348:	4806      	ldr	r0, [pc, #24]	; (3364 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    334a:	7841      	ldrb	r1, [r0, #1]
    334c:	1c49      	adds	r1, r1, #1
    334e:	7041      	strb	r1, [r0, #1]
    3350:	7840      	ldrb	r0, [r0, #1]
    3352:	2801      	cmp	r0, #1
    3354:	d101      	bne.n	335a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3356:	f008 f93b 	bl	b5d0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    335a:	2c00      	cmp	r4, #0
    335c:	d100      	bne.n	3360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    335e:	b662      	cpsie	i
    3360:	bd10      	pop	{r4, pc}
    3362:	0000      	.short	0x0000
    3364:	2000002c 	.word	0x2000002c

00003368 <mpsl_clock_hfclk_release>:
    3368:	4805      	ldr	r0, [pc, #20]	; (3380 <mpsl_clock_hfclk_release+0x18>)
    336a:	b510      	push	{r4, lr}
    336c:	78c1      	ldrb	r1, [r0, #3]
    336e:	b121      	cbz	r1, 337a <mpsl_clock_hfclk_release+0x12>
    3370:	2100      	movs	r1, #0
    3372:	7101      	strb	r1, [r0, #4]
    3374:	70c1      	strb	r1, [r0, #3]
    3376:	f7ff ffc7 	bl	3308 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    337a:	2000      	movs	r0, #0
    337c:	bd10      	pop	{r4, pc}
    337e:	0000      	.short	0x0000
    3380:	2000002c 	.word	0x2000002c

00003384 <mpsl_clock_hfclk_request>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	4c0c      	ldr	r4, [pc, #48]	; (33b8 <mpsl_clock_hfclk_request+0x34>)
    3388:	78e1      	ldrb	r1, [r4, #3]
    338a:	b961      	cbnz	r1, 33a6 <mpsl_clock_hfclk_request+0x22>
    338c:	2501      	movs	r5, #1
    338e:	70e5      	strb	r5, [r4, #3]
    3390:	61e0      	str	r0, [r4, #28]
    3392:	f7ff ffd5 	bl	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3396:	f000 f90d 	bl	35b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    339a:	b130      	cbz	r0, 33aa <mpsl_clock_hfclk_request+0x26>
    339c:	69e0      	ldr	r0, [r4, #28]
    339e:	b110      	cbz	r0, 33a6 <mpsl_clock_hfclk_request+0x22>
    33a0:	4780      	blx	r0
    33a2:	2000      	movs	r0, #0
    33a4:	61e0      	str	r0, [r4, #28]
    33a6:	2000      	movs	r0, #0
    33a8:	bd70      	pop	{r4, r5, r6, pc}
    33aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    33ae:	7125      	strb	r5, [r4, #4]
    33b0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    33b4:	e7f7      	b.n	33a6 <mpsl_clock_hfclk_request+0x22>
    33b6:	0000      	.short	0x0000
    33b8:	2000002c 	.word	0x2000002c

000033bc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    33bc:	f3ef 8010 	mrs	r0, PRIMASK
    33c0:	b672      	cpsid	i
    33c2:	4904      	ldr	r1, [pc, #16]	; (33d4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    33c4:	788a      	ldrb	r2, [r1, #2]
    33c6:	1c52      	adds	r2, r2, #1
    33c8:	708a      	strb	r2, [r1, #2]
    33ca:	2800      	cmp	r0, #0
    33cc:	d100      	bne.n	33d0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    33ce:	b662      	cpsie	i
    33d0:	4770      	bx	lr
    33d2:	0000      	.short	0x0000
    33d4:	2000002c 	.word	0x2000002c

000033d8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    33d8:	b510      	push	{r4, lr}
    33da:	f3ef 8410 	mrs	r4, PRIMASK
    33de:	b672      	cpsid	i
    33e0:	480a      	ldr	r0, [pc, #40]	; (340c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    33e2:	7881      	ldrb	r1, [r0, #2]
    33e4:	b129      	cbz	r1, 33f2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    33e6:	7881      	ldrb	r1, [r0, #2]
    33e8:	1e49      	subs	r1, r1, #1
    33ea:	7081      	strb	r1, [r0, #2]
    33ec:	7841      	ldrb	r1, [r0, #1]
    33ee:	b129      	cbz	r1, 33fc <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    33f0:	e008      	b.n	3404 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    33f2:	f240 1125 	movw	r1, #293	; 0x125
    33f6:	206d      	movs	r0, #109	; 0x6d
    33f8:	f000 f940 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33fc:	7880      	ldrb	r0, [r0, #2]
    33fe:	b908      	cbnz	r0, 3404 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3400:	f000 f8e6 	bl	35d0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    3404:	2c00      	cmp	r4, #0
    3406:	d100      	bne.n	340a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    3408:	b662      	cpsie	i
    340a:	bd10      	pop	{r4, pc}
    340c:	2000002c 	.word	0x2000002c

00003410 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    3410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3414:	0004      	movs	r4, r0
    3416:	f06f 0015 	mvn.w	r0, #21
    341a:	d03c      	beq.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    341c:	7821      	ldrb	r1, [r4, #0]
    341e:	2904      	cmp	r1, #4
    3420:	d839      	bhi.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3422:	2900      	cmp	r1, #0
    3424:	7861      	ldrb	r1, [r4, #1]
    3426:	d038      	beq.n	349a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    3428:	2900      	cmp	r1, #0
    342a:	d134      	bne.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    342c:	78a1      	ldrb	r1, [r4, #2]
    342e:	2900      	cmp	r1, #0
    3430:	d131      	bne.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3432:	2000      	movs	r0, #0
    3434:	f008 f87b 	bl	b52e <MPSL_IRQ_RADIO_Handler+0x1e>
    3438:	2000      	movs	r0, #0
    343a:	f008 f86b 	bl	b514 <MPSL_IRQ_RADIO_Handler+0x4>
    343e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    3442:	f04f 31ff 	mov.w	r1, #4294967295
    3446:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    344a:	2600      	movs	r6, #0
    344c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    3450:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3454:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3458:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    345c:	4f14      	ldr	r7, [pc, #80]	; (34b0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    345e:	707e      	strb	r6, [r7, #1]
    3460:	88a0      	ldrh	r0, [r4, #4]
    3462:	81b8      	strh	r0, [r7, #12]
    3464:	f008 f8ab 	bl	b5be <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3468:	2501      	movs	r5, #1
    346a:	b108      	cbz	r0, 3470 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    346c:	70fd      	strb	r5, [r7, #3]
    346e:	707d      	strb	r5, [r7, #1]
    3470:	2101      	movs	r1, #1
    3472:	4640      	mov	r0, r8
    3474:	f008 f895 	bl	b5a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3478:	b108      	cbz	r0, 347e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    347a:	f000 f895 	bl	35a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    347e:	4620      	mov	r0, r4
    3480:	f7ff fe7c 	bl	317c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3484:	727d      	strb	r5, [r7, #9]
    3486:	2000      	movs	r0, #0
    3488:	f008 f844 	bl	b514 <MPSL_IRQ_RADIO_Handler+0x4>
    348c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3490:	4630      	mov	r0, r6
    3492:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    349a:	2900      	cmp	r1, #0
    349c:	d0fb      	beq.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    349e:	2920      	cmp	r1, #32
    34a0:	d8f9      	bhi.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34a2:	78a1      	ldrb	r1, [r4, #2]
    34a4:	2921      	cmp	r1, #33	; 0x21
    34a6:	d8f6      	bhi.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34a8:	2901      	cmp	r1, #1
    34aa:	d1c2      	bne.n	3432 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    34ac:	e7f3      	b.n	3496 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34ae:	0000      	.short	0x0000
    34b0:	2000002c 	.word	0x2000002c

000034b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    34b4:	4801      	ldr	r0, [pc, #4]	; (34bc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    34b6:	8980      	ldrh	r0, [r0, #12]
    34b8:	4770      	bx	lr
    34ba:	0000      	.short	0x0000
    34bc:	2000002c 	.word	0x2000002c

000034c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    34c0:	b510      	push	{r4, lr}
    34c2:	480d      	ldr	r0, [pc, #52]	; (34f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34c4:	f008 f8dc 	bl	b680 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    34c8:	490b      	ldr	r1, [pc, #44]	; (34f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34ca:	3908      	subs	r1, #8
    34cc:	b148      	cbz	r0, 34e2 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    34ce:	2001      	movs	r0, #1
    34d0:	7008      	strb	r0, [r1, #0]
    34d2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    34d6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    34da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34de:	f7ff bf2f 	b.w	3340 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    34e2:	7a88      	ldrb	r0, [r1, #10]
    34e4:	2802      	cmp	r0, #2
    34e6:	d101      	bne.n	34ec <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    34e8:	f7ff fda0 	bl	302c <MPSL_IRQ_CLOCK_Handler+0x88>
    34ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34f0:	4801      	ldr	r0, [pc, #4]	; (34f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    34f2:	f008 b8dc 	b.w	b6ae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    34f6:	0000      	.short	0x0000
    34f8:	20000034 	.word	0x20000034

000034fc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    34fc:	4802      	ldr	r0, [pc, #8]	; (3508 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    34fe:	7a80      	ldrb	r0, [r0, #10]
    3500:	2800      	cmp	r0, #0
    3502:	d000      	beq.n	3506 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3504:	2001      	movs	r0, #1
    3506:	4770      	bx	lr
    3508:	2000002c 	.word	0x2000002c

0000350c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    350e:	4d1f      	ldr	r5, [pc, #124]	; (358c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3510:	7ae8      	ldrb	r0, [r5, #11]
    3512:	2800      	cmp	r0, #0
    3514:	d10f      	bne.n	3536 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3516:	7e28      	ldrb	r0, [r5, #24]
    3518:	f000 0003 	and.w	r0, r0, #3
    351c:	f008 f85d 	bl	b5da <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    3520:	2800      	cmp	r0, #0
    3522:	d008      	beq.n	3536 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3524:	f3ef 8110 	mrs	r1, PRIMASK
    3528:	b672      	cpsid	i
    352a:	f7ff ffe7 	bl	34fc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    352e:	b118      	cbz	r0, 3538 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    3530:	2900      	cmp	r1, #0
    3532:	d100      	bne.n	3536 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3534:	b662      	cpsie	i
    3536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3538:	2601      	movs	r6, #1
    353a:	72ae      	strb	r6, [r5, #10]
    353c:	b901      	cbnz	r1, 3540 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    353e:	b662      	cpsie	i
    3540:	2018      	movs	r0, #24
    3542:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    3546:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    354a:	61a6      	str	r6, [r4, #24]
    354c:	f44f 7020 	mov.w	r0, #640	; 0x280
    3550:	f8ad 0000 	strh.w	r0, [sp]
    3554:	f8bd 0000 	ldrh.w	r0, [sp]
    3558:	1e41      	subs	r1, r0, #1
    355a:	f8ad 1000 	strh.w	r1, [sp]
    355e:	d2f9      	bcs.n	3554 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    3560:	2700      	movs	r7, #0
    3562:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3566:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    356a:	4808      	ldr	r0, [pc, #32]	; (358c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    356c:	3008      	adds	r0, #8
    356e:	f008 f89a 	bl	b6a6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    3572:	702f      	strb	r7, [r5, #0]
    3574:	f7ff fd5a 	bl	302c <MPSL_IRQ_CLOCK_Handler+0x88>
    3578:	6166      	str	r6, [r4, #20]
    357a:	7968      	ldrb	r0, [r5, #5]
    357c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    3580:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3584:	2018      	movs	r0, #24
    3586:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    358c:	2000002c 	.word	0x2000002c

00003590 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    3590:	b510      	push	{r4, lr}
    3592:	4c04      	ldr	r4, [pc, #16]	; (35a4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3594:	7e20      	ldrb	r0, [r4, #24]
    3596:	f000 0003 	and.w	r0, r0, #3
    359a:	f008 f81e 	bl	b5da <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    359e:	2800      	cmp	r0, #0
    35a0:	d0f8      	beq.n	3594 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    35a2:	bd10      	pop	{r4, pc}
    35a4:	2000002c 	.word	0x2000002c

000035a8 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    35a8:	4901      	ldr	r1, [pc, #4]	; (35b0 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    35aa:	2001      	movs	r0, #1
    35ac:	7008      	strb	r0, [r1, #0]
    35ae:	4770      	bx	lr
    35b0:	20000298 	.word	0x20000298

000035b4 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    35b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35b8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    35bc:	b918      	cbnz	r0, 35c6 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    35be:	4803      	ldr	r0, [pc, #12]	; (35cc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    35c0:	7800      	ldrb	r0, [r0, #0]
    35c2:	2800      	cmp	r0, #0
    35c4:	d000      	beq.n	35c8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    35c6:	2001      	movs	r0, #1
    35c8:	4770      	bx	lr
    35ca:	0000      	.short	0x0000
    35cc:	20000298 	.word	0x20000298

000035d0 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    35d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    35d4:	2101      	movs	r1, #1
    35d6:	6041      	str	r1, [r0, #4]
    35d8:	2100      	movs	r1, #0
    35da:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    35de:	4801      	ldr	r0, [pc, #4]	; (35e4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    35e0:	7001      	strb	r1, [r0, #0]
    35e2:	4770      	bx	lr
    35e4:	20000298 	.word	0x20000298

000035e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    35e8:	4802      	ldr	r0, [pc, #8]	; (35f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    35ea:	6800      	ldr	r0, [r0, #0]
    35ec:	f000 0003 	and.w	r0, r0, #3
    35f0:	4770      	bx	lr
    35f2:	0000      	.short	0x0000
    35f4:	4000041c 	.word	0x4000041c
    35f8:	b510      	push	{r4, lr}
    35fa:	b131      	cbz	r1, 360a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    35fc:	2901      	cmp	r1, #1
    35fe:	d007      	beq.n	3610 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    3600:	f44f 7142 	mov.w	r1, #776	; 0x308
    3604:	a005      	add	r0, pc, #20	; (adr r0, 361c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3606:	f000 f80f 	bl	3628 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    360a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    360e:	e001      	b.n	3614 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    3610:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3614:	f000 0001 	and.w	r0, r0, #1
    3618:	bd10      	pop	{r4, pc}
    361a:	0000      	.short	0x0000
    361c:	5f66726e 	.word	0x5f66726e
    3620:	636f6c63 	.word	0x636f6c63
    3624:	00682e6b 	.word	0x00682e6b

00003628 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    3628:	4a02      	ldr	r2, [pc, #8]	; (3634 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    362a:	6852      	ldr	r2, [r2, #4]
    362c:	b102      	cbz	r2, 3630 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    362e:	4710      	bx	r2
    3630:	e7fe      	b.n	3630 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    3632:	0000      	.short	0x0000
    3634:	2000004c 	.word	0x2000004c
    3638:	4806      	ldr	r0, [pc, #24]	; (3654 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    363a:	b510      	push	{r4, lr}
    363c:	2100      	movs	r1, #0
    363e:	6001      	str	r1, [r0, #0]
    3640:	2101      	movs	r1, #1
    3642:	6001      	str	r1, [r0, #0]
    3644:	4608      	mov	r0, r1
    3646:	f007 ffef 	bl	b628 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    364e:	2001      	movs	r0, #1
    3650:	f007 bfdd 	b.w	b60e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3654:	40001ffc 	.word	0x40001ffc
    3658:	4807      	ldr	r0, [pc, #28]	; (3678 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    365a:	b510      	push	{r4, lr}
    365c:	2101      	movs	r1, #1
    365e:	6041      	str	r1, [r0, #4]
    3660:	1e89      	subs	r1, r1, #2
    3662:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3666:	200c      	movs	r0, #12
    3668:	f007 ffde 	bl	b628 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    366c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3670:	200c      	movs	r0, #12
    3672:	f007 bfcc 	b.w	b60e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3676:	0000      	.short	0x0000
    3678:	4000c000 	.word	0x4000c000

0000367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    367c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    367e:	4a10      	ldr	r2, [pc, #64]	; (36c0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3680:	6855      	ldr	r5, [r2, #4]
    3682:	b1e5      	cbz	r5, 36be <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3684:	2200      	movs	r2, #0
    3686:	4603      	mov	r3, r0
    3688:	466e      	mov	r6, sp
    368a:	240a      	movs	r4, #10
    368c:	e003      	b.n	3696 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    368e:	fbb0 f0f4 	udiv	r0, r0, r4
    3692:	1c52      	adds	r2, r2, #1
    3694:	b2d2      	uxtb	r2, r2
    3696:	2800      	cmp	r0, #0
    3698:	d1f9      	bne.n	368e <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    369a:	54b0      	strb	r0, [r6, r2]
    369c:	e00a      	b.n	36b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    369e:	bf00      	nop
    36a0:	fbb3 f0f4 	udiv	r0, r3, r4
    36a4:	fb04 3010 	mls	r0, r4, r0, r3
    36a8:	fbb3 f3f4 	udiv	r3, r3, r4
    36ac:	1e52      	subs	r2, r2, #1
    36ae:	b2d2      	uxtb	r2, r2
    36b0:	3030      	adds	r0, #48	; 0x30
    36b2:	54b0      	strb	r0, [r6, r2]
    36b4:	2a00      	cmp	r2, #0
    36b6:	d1f3      	bne.n	36a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    36b8:	4630      	mov	r0, r6
    36ba:	47a8      	blx	r5
    36bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    36be:	e7fe      	b.n	36be <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    36c0:	2000004c 	.word	0x2000004c

000036c4 <mpsl_init>:
    36c4:	b570      	push	{r4, r5, r6, lr}
    36c6:	4c17      	ldr	r4, [pc, #92]	; (3724 <mpsl_init+0x60>)
    36c8:	4606      	mov	r6, r0
    36ca:	460d      	mov	r5, r1
    36cc:	7860      	ldrb	r0, [r4, #1]
    36ce:	b110      	cbz	r0, 36d6 <mpsl_init+0x12>
    36d0:	f04f 30ff 	mov.w	r0, #4294967295
    36d4:	bd70      	pop	{r4, r5, r6, pc}
    36d6:	b906      	cbnz	r6, 36da <mpsl_init+0x16>
    36d8:	4e13      	ldr	r6, [pc, #76]	; (3728 <mpsl_init+0x64>)
    36da:	6062      	str	r2, [r4, #4]
    36dc:	7025      	strb	r5, [r4, #0]
    36de:	f7ff ffab 	bl	3638 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    36e2:	f7ff ffb9 	bl	3658 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    36e6:	4630      	mov	r0, r6
    36e8:	f7ff fe92 	bl	3410 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    36ec:	0006      	movs	r6, r0
    36ee:	d1f1      	bne.n	36d4 <mpsl_init+0x10>
    36f0:	f7fe ff0e 	bl	2510 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    36f4:	f7ff ff0a 	bl	350c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    36f8:	f007 fed8 	bl	b4ac <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    36fc:	4628      	mov	r0, r5
    36fe:	f007 ff86 	bl	b60e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3702:	2001      	movs	r0, #1
    3704:	2d00      	cmp	r5, #0
    3706:	db09      	blt.n	371c <mpsl_init+0x58>
    3708:	f005 011f 	and.w	r1, r5, #31
    370c:	fa00 f101 	lsl.w	r1, r0, r1
    3710:	096a      	lsrs	r2, r5, #5
    3712:	0092      	lsls	r2, r2, #2
    3714:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    3718:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    371c:	7060      	strb	r0, [r4, #1]
    371e:	4630      	mov	r0, r6
    3720:	bd70      	pop	{r4, r5, r6, pc}
    3722:	0000      	.short	0x0000
    3724:	2000004c 	.word	0x2000004c
    3728:	0000b64a 	.word	0x0000b64a

0000372c <mpsl_is_initialized>:
    372c:	4801      	ldr	r0, [pc, #4]	; (3734 <mpsl_is_initialized+0x8>)
    372e:	7840      	ldrb	r0, [r0, #1]
    3730:	4770      	bx	lr
    3732:	0000      	.short	0x0000
    3734:	2000004c 	.word	0x2000004c

00003738 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    3738:	4807      	ldr	r0, [pc, #28]	; (3758 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    373a:	f990 0000 	ldrsb.w	r0, [r0]
    373e:	2800      	cmp	r0, #0
    3740:	db09      	blt.n	3756 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    3742:	f000 021f 	and.w	r2, r0, #31
    3746:	2101      	movs	r1, #1
    3748:	4091      	lsls	r1, r2
    374a:	0940      	lsrs	r0, r0, #5
    374c:	0080      	lsls	r0, r0, #2
    374e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3752:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3756:	4770      	bx	lr
    3758:	2000004c 	.word	0x2000004c

0000375c <mpsl_temperature_get>:
    375c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3760:	2601      	movs	r6, #1
    3762:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3766:	0331      	lsls	r1, r6, #12
    3768:	f04f 0800 	mov.w	r8, #0
    376c:	4640      	mov	r0, r8
    376e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    3772:	f3bf 8f4f 	dsb	sy
    3776:	f3bf 8f6f 	isb	sy
    377a:	4c16      	ldr	r4, [pc, #88]	; (37d4 <mpsl_temperature_get+0x78>)
    377c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3780:	200c      	movs	r0, #12
    3782:	f007 ff70 	bl	b666 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3786:	4d14      	ldr	r5, [pc, #80]	; (37d8 <mpsl_temperature_get+0x7c>)
    3788:	6828      	ldr	r0, [r5, #0]
    378a:	43c0      	mvns	r0, r0
    378c:	f340 1700 	sbfx	r7, r0, #4, #1
    3790:	6828      	ldr	r0, [r5, #0]
    3792:	f040 0010 	orr.w	r0, r0, #16
    3796:	6028      	str	r0, [r5, #0]
    3798:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    379c:	6026      	str	r6, [r4, #0]
    379e:	1c7f      	adds	r7, r7, #1
    37a0:	e002      	b.n	37a8 <mpsl_temperature_get+0x4c>
    37a2:	bf00      	nop
    37a4:	f000 f890 	bl	38c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    37a8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    37ac:	2800      	cmp	r0, #0
    37ae:	d0f9      	beq.n	37a4 <mpsl_temperature_get+0x48>
    37b0:	b91f      	cbnz	r7, 37ba <mpsl_temperature_get+0x5e>
    37b2:	6828      	ldr	r0, [r5, #0]
    37b4:	f020 0010 	bic.w	r0, r0, #16
    37b8:	6028      	str	r0, [r5, #0]
    37ba:	4808      	ldr	r0, [pc, #32]	; (37dc <mpsl_temperature_get+0x80>)
    37bc:	6805      	ldr	r5, [r0, #0]
    37be:	6066      	str	r6, [r4, #4]
    37c0:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    37c4:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    37c8:	200c      	movs	r0, #12
    37ca:	f007 ff4c 	bl	b666 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    37ce:	4628      	mov	r0, r5
    37d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37d4:	4000c000 	.word	0x4000c000
    37d8:	e000ed10 	.word	0xe000ed10
    37dc:	4000c508 	.word	0x4000c508

000037e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    37e0:	b510      	push	{r4, lr}
    37e2:	4602      	mov	r2, r0
    37e4:	2005      	movs	r0, #5
    37e6:	490c      	ldr	r1, [pc, #48]	; (3818 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    37e8:	e004      	b.n	37f4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    37ea:	bf00      	nop
    37ec:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    37f0:	791b      	ldrb	r3, [r3, #4]
    37f2:	b133      	cbz	r3, 3802 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    37f4:	1e40      	subs	r0, r0, #1
    37f6:	b2c0      	uxtb	r0, r0
    37f8:	d2f8      	bcs.n	37ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    37fa:	214b      	movs	r1, #75	; 0x4b
    37fc:	2069      	movs	r0, #105	; 0x69
    37fe:	f7ff ff3d 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3802:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3806:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    380a:	2200      	movs	r2, #0
    380c:	714a      	strb	r2, [r1, #5]
    380e:	718a      	strb	r2, [r1, #6]
    3810:	2201      	movs	r2, #1
    3812:	710a      	strb	r2, [r1, #4]
    3814:	bd10      	pop	{r4, pc}
    3816:	0000      	.short	0x0000
    3818:	20034258 	.word	0x20034258

0000381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    381c:	b510      	push	{r4, lr}
    381e:	2805      	cmp	r0, #5
    3820:	d301      	bcc.n	3826 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3822:	215a      	movs	r1, #90	; 0x5a
    3824:	e006      	b.n	3834 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3826:	490a      	ldr	r1, [pc, #40]	; (3850 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3828:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    382c:	7901      	ldrb	r1, [r0, #4]
    382e:	2901      	cmp	r1, #1
    3830:	d003      	beq.n	383a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3832:	215b      	movs	r1, #91	; 0x5b
    3834:	2069      	movs	r0, #105	; 0x69
    3836:	f7ff ff21 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    383a:	7941      	ldrb	r1, [r0, #5]
    383c:	7982      	ldrb	r2, [r0, #6]
    383e:	1c49      	adds	r1, r1, #1
    3840:	b2c9      	uxtb	r1, r1
    3842:	428a      	cmp	r2, r1
    3844:	d000      	beq.n	3848 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3846:	7141      	strb	r1, [r0, #5]
    3848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    384c:	f7ff bf74 	b.w	3738 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3850:	20034258 	.word	0x20034258

00003854 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3854:	b570      	push	{r4, r5, r6, lr}
    3856:	2505      	movs	r5, #5
    3858:	4e0e      	ldr	r6, [pc, #56]	; (3894 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    385a:	4c0f      	ldr	r4, [pc, #60]	; (3898 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    385c:	e016      	b.n	388c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    385e:	7821      	ldrb	r1, [r4, #0]
    3860:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3864:	7902      	ldrb	r2, [r0, #4]
    3866:	2a01      	cmp	r2, #1
    3868:	d108      	bne.n	387c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    386a:	7942      	ldrb	r2, [r0, #5]
    386c:	7983      	ldrb	r3, [r0, #6]
    386e:	429a      	cmp	r2, r3
    3870:	d004      	beq.n	387c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3872:	7942      	ldrb	r2, [r0, #5]
    3874:	7182      	strb	r2, [r0, #6]
    3876:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    387a:	4780      	blx	r0
    387c:	7820      	ldrb	r0, [r4, #0]
    387e:	1c40      	adds	r0, r0, #1
    3880:	b2c0      	uxtb	r0, r0
    3882:	7020      	strb	r0, [r4, #0]
    3884:	2805      	cmp	r0, #5
    3886:	d301      	bcc.n	388c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3888:	2000      	movs	r0, #0
    388a:	7020      	strb	r0, [r4, #0]
    388c:	1e6d      	subs	r5, r5, #1
    388e:	b2ed      	uxtb	r5, r5
    3890:	d2e5      	bcs.n	385e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3892:	bd70      	pop	{r4, r5, r6, pc}
    3894:	20034258 	.word	0x20034258
    3898:	20000299 	.word	0x20000299

0000389c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    389c:	b500      	push	{lr}
    389e:	f007 ff11 	bl	b6c4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    38a2:	b940      	cbnz	r0, 38b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38a4:	f007 ff18 	bl	b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    38a8:	b928      	cbnz	r0, 38b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38aa:	f007 ff2c 	bl	b706 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    38ae:	b910      	cbnz	r0, 38b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    38b0:	f007 ff3d 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38b4:	b108      	cbz	r0, 38ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    38b6:	4802      	ldr	r0, [pc, #8]	; (38c0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    38b8:	bd00      	pop	{pc}
    38ba:	4802      	ldr	r0, [pc, #8]	; (38c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    38bc:	bd00      	pop	{pc}
    38be:	0000      	.short	0x0000
    38c0:	4000050c 	.word	0x4000050c
    38c4:	4001e700 	.word	0x4001e700

000038c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    38c8:	b510      	push	{r4, lr}
    38ca:	f007 ff30 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    38ce:	b330      	cbz	r0, 391e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    38d0:	f3ef 8010 	mrs	r0, PRIMASK
    38d4:	b1c8      	cbz	r0, 390a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    38d6:	2100      	movs	r1, #0
    38d8:	b672      	cpsid	i
    38da:	4812      	ldr	r0, [pc, #72]	; (3924 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    38dc:	6802      	ldr	r2, [r0, #0]
    38de:	6803      	ldr	r3, [r0, #0]
    38e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    38e4:	f043 0310 	orr.w	r3, r3, #16
    38e8:	6003      	str	r3, [r0, #0]
    38ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38ee:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    38f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    38f6:	431c      	orrs	r4, r3
    38f8:	d000      	beq.n	38fc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    38fa:	bf40      	sev
    38fc:	bf20      	wfe
    38fe:	bf00      	nop
    3900:	bf00      	nop
    3902:	bf00      	nop
    3904:	bf00      	nop
    3906:	b112      	cbz	r2, 390e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3908:	e005      	b.n	3916 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    390a:	2101      	movs	r1, #1
    390c:	e7e4      	b.n	38d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    390e:	6802      	ldr	r2, [r0, #0]
    3910:	f022 0210 	bic.w	r2, r2, #16
    3914:	6002      	str	r2, [r0, #0]
    3916:	2900      	cmp	r1, #0
    3918:	d000      	beq.n	391c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    391a:	b662      	cpsie	i
    391c:	bd10      	pop	{r4, pc}
    391e:	bf20      	wfe
    3920:	bd10      	pop	{r4, pc}
    3922:	0000      	.short	0x0000
    3924:	e000ed10 	.word	0xe000ed10

00003928 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3928:	0000b99f 0000b9bb 0000b9a9 0000b9b5     ................
    3938:	0000b9a3 0000b99d 0000b99b 0000b9c1     ................
    3948:	0000b9af 0000b995 0000b98d 0000b991     ................
    3958:	0000b987                                ....

0000395c <mpsl_fem_disable>:
    395c:	4801      	ldr	r0, [pc, #4]	; (3964 <mpsl_fem_disable+0x8>)
    395e:	6800      	ldr	r0, [r0, #0]
    3960:	6800      	ldr	r0, [r0, #0]
    3962:	4700      	bx	r0
    3964:	20000054 	.word	0x20000054

00003968 <mpsl_fem_lna_configuration_clear>:
    3968:	4801      	ldr	r0, [pc, #4]	; (3970 <mpsl_fem_lna_configuration_clear+0x8>)
    396a:	6800      	ldr	r0, [r0, #0]
    396c:	6900      	ldr	r0, [r0, #16]
    396e:	4700      	bx	r0
    3970:	20000054 	.word	0x20000054

00003974 <mpsl_fem_lna_configuration_set>:
    3974:	4a01      	ldr	r2, [pc, #4]	; (397c <mpsl_fem_lna_configuration_set+0x8>)
    3976:	6812      	ldr	r2, [r2, #0]
    3978:	6892      	ldr	r2, [r2, #8]
    397a:	4710      	bx	r2
    397c:	20000054 	.word	0x20000054

00003980 <mpsl_fem_pa_configuration_clear>:
    3980:	4801      	ldr	r0, [pc, #4]	; (3988 <mpsl_fem_pa_configuration_clear+0x8>)
    3982:	6800      	ldr	r0, [r0, #0]
    3984:	68c0      	ldr	r0, [r0, #12]
    3986:	4700      	bx	r0
    3988:	20000054 	.word	0x20000054

0000398c <mpsl_fem_pa_configuration_set>:
    398c:	4a01      	ldr	r2, [pc, #4]	; (3994 <mpsl_fem_pa_configuration_set+0x8>)
    398e:	6812      	ldr	r2, [r2, #0]
    3990:	6852      	ldr	r2, [r2, #4]
    3992:	4710      	bx	r2
    3994:	20000054 	.word	0x20000054

00003998 <mpsl_fem_pa_is_configured>:
    3998:	4901      	ldr	r1, [pc, #4]	; (39a0 <mpsl_fem_pa_is_configured+0x8>)
    399a:	6809      	ldr	r1, [r1, #0]
    399c:	6a09      	ldr	r1, [r1, #32]
    399e:	4708      	bx	r1
    39a0:	20000054 	.word	0x20000054

000039a4 <mpsl_fem_device_config_254_apply_get>:
    39a4:	4801      	ldr	r0, [pc, #4]	; (39ac <mpsl_fem_device_config_254_apply_get+0x8>)
    39a6:	7800      	ldrb	r0, [r0, #0]
    39a8:	4770      	bx	lr
    39aa:	0000      	.short	0x0000
    39ac:	2000029a 	.word	0x2000029a
    39b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    39b2:	4c17      	ldr	r4, [pc, #92]	; (3a10 <mpsl_fem_device_config_254_apply_get+0x6c>)
    39b4:	79a0      	ldrb	r0, [r4, #6]
    39b6:	2802      	cmp	r0, #2
    39b8:	d200      	bcs.n	39bc <mpsl_fem_device_config_254_apply_get+0x18>
    39ba:	2002      	movs	r0, #2
    39bc:	f88d 0001 	strb.w	r0, [sp, #1]
    39c0:	7960      	ldrb	r0, [r4, #5]
    39c2:	2803      	cmp	r0, #3
    39c4:	d200      	bcs.n	39c8 <mpsl_fem_device_config_254_apply_get+0x24>
    39c6:	2003      	movs	r0, #3
    39c8:	f88d 0000 	strb.w	r0, [sp]
    39cc:	7920      	ldrb	r0, [r4, #4]
    39ce:	f8ad 0004 	strh.w	r0, [sp, #4]
    39d2:	78e0      	ldrb	r0, [r4, #3]
    39d4:	f8ad 0002 	strh.w	r0, [sp, #2]
    39d8:	4668      	mov	r0, sp
    39da:	f006 f8fb 	bl	9bd4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    39de:	b108      	cbz	r0, 39e4 <mpsl_fem_device_config_254_apply_get+0x40>
    39e0:	21ae      	movs	r1, #174	; 0xae
    39e2:	e010      	b.n	3a06 <mpsl_fem_device_config_254_apply_get+0x62>
    39e4:	68a0      	ldr	r0, [r4, #8]
    39e6:	9002      	str	r0, [sp, #8]
    39e8:	a802      	add	r0, sp, #8
    39ea:	f006 f909 	bl	9c00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    39ee:	b108      	cbz	r0, 39f4 <mpsl_fem_device_config_254_apply_get+0x50>
    39f0:	21b2      	movs	r1, #178	; 0xb2
    39f2:	e008      	b.n	3a06 <mpsl_fem_device_config_254_apply_get+0x62>
    39f4:	4807      	ldr	r0, [pc, #28]	; (3a14 <mpsl_fem_device_config_254_apply_get+0x70>)
    39f6:	6800      	ldr	r0, [r0, #0]
    39f8:	9003      	str	r0, [sp, #12]
    39fa:	a803      	add	r0, sp, #12
    39fc:	f00a fef4 	bl	e7e8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3a00:	2800      	cmp	r0, #0
    3a02:	d003      	beq.n	3a0c <mpsl_fem_device_config_254_apply_get+0x68>
    3a04:	21b6      	movs	r1, #182	; 0xb6
    3a06:	2003      	movs	r0, #3
    3a08:	f000 f8ce 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3a0c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3a0e:	0000      	.short	0x0000
    3a10:	20000064 	.word	0x20000064
    3a14:	00003c90 	.word	0x00003c90

00003a18 <sdc_build_revision_get>:
    3a18:	b510      	push	{r4, lr}
    3a1a:	b128      	cbz	r0, 3a28 <sdc_build_revision_get+0x10>
    3a1c:	2214      	movs	r2, #20
    3a1e:	4904      	ldr	r1, [pc, #16]	; (3a30 <sdc_build_revision_get+0x18>)
    3a20:	f007 fed7 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a24:	2000      	movs	r0, #0
    3a26:	bd10      	pop	{r4, pc}
    3a28:	f06f 0015 	mvn.w	r0, #21
    3a2c:	bd10      	pop	{r4, pc}
    3a2e:	0000      	.short	0x0000
    3a30:	00003cc2 	.word	0x00003cc2

00003a34 <sdc_cfg_set>:
    3a34:	b570      	push	{r4, r5, r6, lr}
    3a36:	f06f 052c 	mvn.w	r5, #44	; 0x2c
    3a3a:	bbb0      	cbnz	r0, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3a3c:	4c1d      	ldr	r4, [pc, #116]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a3e:	78a0      	ldrb	r0, [r4, #2]
    3a40:	b108      	cbz	r0, 3a46 <sdc_cfg_set+0x12>
    3a42:	11a8      	asrs	r0, r5, #6
    3a44:	bd70      	pop	{r4, r5, r6, pc}
    3a46:	b321      	cbz	r1, 3a92 <sdc_cfg_set+0x5e>
    3a48:	f06f 0015 	mvn.w	r0, #21
    3a4c:	2a00      	cmp	r2, #0
    3a4e:	d0f9      	beq.n	3a44 <sdc_cfg_set+0x10>
    3a50:	2908      	cmp	r1, #8
    3a52:	d22a      	bcs.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3a54:	e8df f001 	tbb	[pc, r1]
    3a58:	0a070429 	.word	0x0a070429
    3a5c:	1e14110e 	.word	0x1e14110e
    3a60:	7810      	ldrb	r0, [r2, #0]
    3a62:	7320      	strb	r0, [r4, #12]
    3a64:	e018      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a66:	7810      	ldrb	r0, [r2, #0]
    3a68:	7360      	strb	r0, [r4, #13]
    3a6a:	e015      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a6c:	6810      	ldr	r0, [r2, #0]
    3a6e:	f8c4 000f 	str.w	r0, [r4, #15]
    3a72:	e011      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a74:	6810      	ldr	r0, [r2, #0]
    3a76:	6160      	str	r0, [r4, #20]
    3a78:	e00e      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a7a:	7810      	ldrb	r0, [r2, #0]
    3a7c:	73a0      	strb	r0, [r4, #14]
    3a7e:	e00b      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a80:	7921      	ldrb	r1, [r4, #4]
    3a82:	b111      	cbz	r1, 3a8a <sdc_cfg_set+0x56>
    3a84:	7811      	ldrb	r1, [r2, #0]
    3a86:	2902      	cmp	r1, #2
    3a88:	d3dc      	bcc.n	3a44 <sdc_cfg_set+0x10>
    3a8a:	490a      	ldr	r1, [pc, #40]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a8c:	7810      	ldrb	r0, [r2, #0]
    3a8e:	310c      	adds	r1, #12
    3a90:	7308      	strb	r0, [r1, #12]
    3a92:	e001      	b.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a94:	8810      	ldrh	r0, [r2, #0]
    3a96:	8360      	strh	r0, [r4, #26]
    3a98:	4906      	ldr	r1, [pc, #24]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3a9a:	2201      	movs	r2, #1
    3a9c:	310c      	adds	r1, #12
    3a9e:	2000      	movs	r0, #0
    3aa0:	f007 ff90 	bl	b9c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3aa4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3aa8:	db01      	blt.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
    3aaa:	4628      	mov	r0, r5
    3aac:	bd70      	pop	{r4, r5, r6, pc}
    3aae:	2101      	movs	r1, #1
    3ab0:	70e1      	strb	r1, [r4, #3]
    3ab2:	bd70      	pop	{r4, r5, r6, pc}
    3ab4:	20000058 	.word	0x20000058

00003ab8 <sdc_enable>:
    3ab8:	b538      	push	{r3, r4, r5, lr}
    3aba:	460d      	mov	r5, r1
    3abc:	0004      	movs	r4, r0
    3abe:	d020      	beq.n	3b02 <sdc_enable+0x4a>
    3ac0:	b1fd      	cbz	r5, 3b02 <sdc_enable+0x4a>
    3ac2:	f000 f933 	bl	3d2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3ac6:	b1f8      	cbz	r0, 3b08 <sdc_enable+0x50>
    3ac8:	4620      	mov	r0, r4
    3aca:	f7ff fe89 	bl	37e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3ace:	4c10      	ldr	r4, [pc, #64]	; (3b10 <sdc_enable+0x58>)
    3ad0:	2200      	movs	r2, #0
    3ad2:	f104 010c 	add.w	r1, r4, #12
    3ad6:	7020      	strb	r0, [r4, #0]
    3ad8:	4628      	mov	r0, r5
    3ada:	f007 ff73 	bl	b9c4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3ade:	f00b fa72 	bl	efc6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3ae2:	2100      	movs	r1, #0
    3ae4:	7820      	ldrb	r0, [r4, #0]
    3ae6:	f006 fae3 	bl	a0b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3aea:	7860      	ldrb	r0, [r4, #1]
    3aec:	f88d 0000 	strb.w	r0, [sp]
    3af0:	4668      	mov	r0, sp
    3af2:	f00a fe6d 	bl	e7d0 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>
    3af6:	f7ff ff5b 	bl	39b0 <mpsl_fem_device_config_254_apply_get+0xc>
    3afa:	2001      	movs	r0, #1
    3afc:	70a0      	strb	r0, [r4, #2]
    3afe:	2000      	movs	r0, #0
    3b00:	bd38      	pop	{r3, r4, r5, pc}
    3b02:	f06f 0015 	mvn.w	r0, #21
    3b06:	bd38      	pop	{r3, r4, r5, pc}
    3b08:	f04f 30ff 	mov.w	r0, #4294967295
    3b0c:	bd38      	pop	{r3, r4, r5, pc}
    3b0e:	0000      	.short	0x0000
    3b10:	20000058 	.word	0x20000058

00003b14 <sdc_init>:
    3b14:	b570      	push	{r4, r5, r6, lr}
    3b16:	0005      	movs	r5, r0
    3b18:	d00b      	beq.n	3b32 <sdc_init+0x1e>
    3b1a:	f7ff fe07 	bl	372c <mpsl_is_initialized>
    3b1e:	f04f 34ff 	mov.w	r4, #4294967295
    3b22:	b120      	cbz	r0, 3b2e <sdc_init+0x1a>
    3b24:	f7ff fcc6 	bl	34b4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3b28:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3b2c:	d904      	bls.n	3b38 <sdc_init+0x24>
    3b2e:	4620      	mov	r0, r4
    3b30:	bd70      	pop	{r4, r5, r6, pc}
    3b32:	f06f 0015 	mvn.w	r0, #21
    3b36:	bd70      	pop	{r4, r5, r6, pc}
    3b38:	2200      	movs	r2, #0
    3b3a:	4b16      	ldr	r3, [pc, #88]	; (3b94 <sdc_init+0x80>)
    3b3c:	4611      	mov	r1, r2
    3b3e:	bf00      	nop
    3b40:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    3b44:	4284      	cmp	r4, r0
    3b46:	d303      	bcc.n	3b50 <sdc_init+0x3c>
    3b48:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b4c:	7882      	ldrb	r2, [r0, #2]
    3b4e:	e003      	b.n	3b58 <sdc_init+0x44>
    3b50:	1c49      	adds	r1, r1, #1
    3b52:	b2c9      	uxtb	r1, r1
    3b54:	290c      	cmp	r1, #12
    3b56:	d3f3      	bcc.n	3b40 <sdc_init+0x2c>
    3b58:	4c0f      	ldr	r4, [pc, #60]	; (3b98 <sdc_init+0x84>)
    3b5a:	4810      	ldr	r0, [pc, #64]	; (3b9c <sdc_init+0x88>)
    3b5c:	7062      	strb	r2, [r4, #1]
    3b5e:	60a5      	str	r5, [r4, #8]
    3b60:	f000 f9f6 	bl	3f50 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3b64:	2000      	movs	r0, #0
    3b66:	70a0      	strb	r0, [r4, #2]
    3b68:	70e0      	strb	r0, [r4, #3]
    3b6a:	7120      	strb	r0, [r4, #4]
    3b6c:	f3ef 8410 	mrs	r4, PRIMASK
    3b70:	b672      	cpsid	i
    3b72:	480b      	ldr	r0, [pc, #44]	; (3ba0 <sdc_init+0x8c>)
    3b74:	f06f 010c 	mvn.w	r1, #12
    3b78:	f000 fd6c 	bl	4654 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3b7c:	4809      	ldr	r0, [pc, #36]	; (3ba4 <sdc_init+0x90>)
    3b7e:	f000 fe2d 	bl	47dc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3b82:	b118      	cbz	r0, 3b8c <sdc_init+0x78>
    3b84:	21c4      	movs	r1, #196	; 0xc4
    3b86:	2003      	movs	r0, #3
    3b88:	f000 f80e 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b8c:	b904      	cbnz	r4, 3b90 <sdc_init+0x7c>
    3b8e:	b662      	cpsie	i
    3b90:	2000      	movs	r0, #0
    3b92:	bd70      	pop	{r4, r5, r6, pc}
    3b94:	00003c92 	.word	0x00003c92
    3b98:	20000058 	.word	0x20000058
    3b9c:	000039b1 	.word	0x000039b1
    3ba0:	4000c000 	.word	0x4000c000
    3ba4:	00003d59 	.word	0x00003d59

00003ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3ba8:	b50e      	push	{r1, r2, r3, lr}
    3baa:	b672      	cpsid	i
    3bac:	4a15      	ldr	r2, [pc, #84]	; (3c04 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3bae:	6895      	ldr	r5, [r2, #8]
    3bb0:	b1d5      	cbz	r5, 3be8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3bb2:	2200      	movs	r2, #0
    3bb4:	4603      	mov	r3, r0
    3bb6:	466e      	mov	r6, sp
    3bb8:	240a      	movs	r4, #10
    3bba:	e003      	b.n	3bc4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3bbc:	fbb0 f0f4 	udiv	r0, r0, r4
    3bc0:	1c52      	adds	r2, r2, #1
    3bc2:	b2d2      	uxtb	r2, r2
    3bc4:	2800      	cmp	r0, #0
    3bc6:	d1f9      	bne.n	3bbc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3bc8:	54b0      	strb	r0, [r6, r2]
    3bca:	e009      	b.n	3be0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3bcc:	fbb3 f0f4 	udiv	r0, r3, r4
    3bd0:	fb04 3010 	mls	r0, r4, r0, r3
    3bd4:	fbb3 f3f4 	udiv	r3, r3, r4
    3bd8:	1e52      	subs	r2, r2, #1
    3bda:	b2d2      	uxtb	r2, r2
    3bdc:	3030      	adds	r0, #48	; 0x30
    3bde:	54b0      	strb	r0, [r6, r2]
    3be0:	2a00      	cmp	r2, #0
    3be2:	d1f3      	bne.n	3bcc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3be4:	4630      	mov	r0, r6
    3be6:	47a8      	blx	r5
    3be8:	f3bf 8f4f 	dsb	sy
    3bec:	4806      	ldr	r0, [pc, #24]	; (3c08 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3bee:	6801      	ldr	r1, [r0, #0]
    3bf0:	4a06      	ldr	r2, [pc, #24]	; (3c0c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3bf2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3bf6:	4311      	orrs	r1, r2
    3bf8:	6001      	str	r1, [r0, #0]
    3bfa:	f3bf 8f4f 	dsb	sy
    3bfe:	bf00      	nop
    3c00:	e7fd      	b.n	3bfe <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3c02:	0000      	.short	0x0000
    3c04:	20000058 	.word	0x20000058
    3c08:	e000ed0c 	.word	0xe000ed0c
    3c0c:	05fa0004 	.word	0x05fa0004

00003c10 <sdc_support_adv>:
    3c10:	4806      	ldr	r0, [pc, #24]	; (3c2c <sdc_support_adv+0x1c>)
    3c12:	b510      	push	{r4, lr}
    3c14:	78c1      	ldrb	r1, [r0, #3]
    3c16:	7880      	ldrb	r0, [r0, #2]
    3c18:	4301      	orrs	r1, r0
    3c1a:	d002      	beq.n	3c22 <sdc_support_adv+0x12>
    3c1c:	f04f 30ff 	mov.w	r0, #4294967295
    3c20:	bd10      	pop	{r4, pc}
    3c22:	f006 fa65 	bl	a0f0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3c26:	2000      	movs	r0, #0
    3c28:	bd10      	pop	{r4, pc}
    3c2a:	0000      	.short	0x0000
    3c2c:	20000058 	.word	0x20000058

00003c30 <sdc_support_dle>:
    3c30:	4806      	ldr	r0, [pc, #24]	; (3c4c <sdc_support_dle+0x1c>)
    3c32:	b510      	push	{r4, lr}
    3c34:	78c1      	ldrb	r1, [r0, #3]
    3c36:	7880      	ldrb	r0, [r0, #2]
    3c38:	4301      	orrs	r1, r0
    3c3a:	d002      	beq.n	3c42 <sdc_support_dle+0x12>
    3c3c:	f04f 30ff 	mov.w	r0, #4294967295
    3c40:	bd10      	pop	{r4, pc}
    3c42:	f005 fff5 	bl	9c30 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3c46:	2000      	movs	r0, #0
    3c48:	bd10      	pop	{r4, pc}
    3c4a:	0000      	.short	0x0000
    3c4c:	20000058 	.word	0x20000058

00003c50 <sdc_support_le_2m_phy>:
    3c50:	4806      	ldr	r0, [pc, #24]	; (3c6c <sdc_support_le_2m_phy+0x1c>)
    3c52:	b510      	push	{r4, lr}
    3c54:	78c1      	ldrb	r1, [r0, #3]
    3c56:	7880      	ldrb	r0, [r0, #2]
    3c58:	4301      	orrs	r1, r0
    3c5a:	d002      	beq.n	3c62 <sdc_support_le_2m_phy+0x12>
    3c5c:	f04f 30ff 	mov.w	r0, #4294967295
    3c60:	bd10      	pop	{r4, pc}
    3c62:	f00a ff26 	bl	eab2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3c66:	2000      	movs	r0, #0
    3c68:	bd10      	pop	{r4, pc}
    3c6a:	0000      	.short	0x0000
    3c6c:	20000058 	.word	0x20000058

00003c70 <sdc_support_slave>:
    3c70:	4806      	ldr	r0, [pc, #24]	; (3c8c <sdc_support_slave+0x1c>)
    3c72:	b510      	push	{r4, lr}
    3c74:	78c1      	ldrb	r1, [r0, #3]
    3c76:	7880      	ldrb	r0, [r0, #2]
    3c78:	4301      	orrs	r1, r0
    3c7a:	d002      	beq.n	3c82 <sdc_support_slave+0x12>
    3c7c:	f04f 30ff 	mov.w	r0, #4294967295
    3c80:	bd10      	pop	{r4, pc}
    3c82:	f006 fa47 	bl	a114 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3c86:	2000      	movs	r0, #0
    3c88:	bd10      	pop	{r4, pc}
    3c8a:	0000      	.short	0x0000
    3c8c:	20000058 	.word	0x20000058
    3c90:	00010001 	.word	0x00010001
    3c94:	0002000b 	.word	0x0002000b
    3c98:	0005000a 	.word	0x0005000a
    3c9c:	000a0009 	.word	0x000a0009
    3ca0:	00140008 	.word	0x00140008
    3ca4:	001e0007 	.word	0x001e0007
    3ca8:	00320006 	.word	0x00320006
    3cac:	004b0005 	.word	0x004b0005
    3cb0:	00640004 	.word	0x00640004
    3cb4:	00960003 	.word	0x00960003
    3cb8:	00fa0002 	.word	0x00fa0002
    3cbc:	01f40001 	.word	0x01f40001
    3cc0:	473f0000 	.word	0x473f0000
    3cc4:	95818e70 	.word	0x95818e70
    3cc8:	d39d864e 	.word	0xd39d864e
    3ccc:	f68895a2 	.word	0xf68895a2
    3cd0:	537f0a30 	.word	0x537f0a30
    3cd4:	0000fd49 	.word	0x0000fd49

00003cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3cd8:	4a05      	ldr	r2, [pc, #20]	; (3cf0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3cda:	b510      	push	{r4, lr}
    3cdc:	6852      	ldr	r2, [r2, #4]
    3cde:	b112      	cbz	r2, 3ce6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ce4:	4710      	bx	r2
    3ce6:	2183      	movs	r1, #131	; 0x83
    3ce8:	2004      	movs	r0, #4
    3cea:	f7ff ff5d 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cee:	0000      	.short	0x0000
    3cf0:	20034280 	.word	0x20034280

00003cf4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3cf4:	4a05      	ldr	r2, [pc, #20]	; (3d0c <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3cf6:	b510      	push	{r4, lr}
    3cf8:	6812      	ldr	r2, [r2, #0]
    3cfa:	b112      	cbz	r2, 3d02 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d00:	4710      	bx	r2
    3d02:	217d      	movs	r1, #125	; 0x7d
    3d04:	2004      	movs	r0, #4
    3d06:	f7ff ff4f 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d0a:	0000      	.short	0x0000
    3d0c:	20034280 	.word	0x20034280

00003d10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3d10:	4a05      	ldr	r2, [pc, #20]	; (3d28 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3d12:	b510      	push	{r4, lr}
    3d14:	6892      	ldr	r2, [r2, #8]
    3d16:	b112      	cbz	r2, 3d1e <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d1c:	4710      	bx	r2
    3d1e:	2189      	movs	r1, #137	; 0x89
    3d20:	2004      	movs	r0, #4
    3d22:	f7ff ff41 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d26:	0000      	.short	0x0000
    3d28:	20034280 	.word	0x20034280

00003d2c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3d2c:	4805      	ldr	r0, [pc, #20]	; (3d44 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3d2e:	6801      	ldr	r1, [r0, #0]
    3d30:	b129      	cbz	r1, 3d3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d32:	6841      	ldr	r1, [r0, #4]
    3d34:	b119      	cbz	r1, 3d3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d36:	6880      	ldr	r0, [r0, #8]
    3d38:	b108      	cbz	r0, 3d3e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3d3a:	2001      	movs	r0, #1
    3d3c:	4770      	bx	lr
    3d3e:	2000      	movs	r0, #0
    3d40:	4770      	bx	lr
    3d42:	0000      	.short	0x0000
    3d44:	20034280 	.word	0x20034280

00003d48 <sdc_rand_source_register>:
    3d48:	4902      	ldr	r1, [pc, #8]	; (3d54 <sdc_rand_source_register+0xc>)
    3d4a:	c80d      	ldmia	r0, {r0, r2, r3}
    3d4c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3d50:	2000      	movs	r0, #0
    3d52:	4770      	bx	lr
    3d54:	20034280 	.word	0x20034280

00003d58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d5a:	4c12      	ldr	r4, [pc, #72]	; (3da4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3d5c:	2600      	movs	r6, #0
    3d5e:	6825      	ldr	r5, [r4, #0]
    3d60:	e011      	b.n	3d86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d62:	9800      	ldr	r0, [sp, #0]
    3d64:	2802      	cmp	r0, #2
    3d66:	d002      	beq.n	3d6e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3d68:	2803      	cmp	r0, #3
    3d6a:	d10c      	bne.n	3d86 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3d6c:	e006      	b.n	3d7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3d6e:	6820      	ldr	r0, [r4, #0]
    3d70:	b110      	cbz	r0, 3d78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3d72:	2000      	movs	r0, #0
    3d74:	6026      	str	r6, [r4, #0]
    3d76:	e005      	b.n	3d84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3d78:	2128      	movs	r1, #40	; 0x28
    3d7a:	e00c      	b.n	3d96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3d7c:	6820      	ldr	r0, [r4, #0]
    3d7e:	b168      	cbz	r0, 3d9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3d80:	2001      	movs	r0, #1
    3d82:	6026      	str	r6, [r4, #0]
    3d84:	47a8      	blx	r5
    3d86:	4668      	mov	r0, sp
    3d88:	f000 fcfa 	bl	4780 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3d8c:	2800      	cmp	r0, #0
    3d8e:	d0e8      	beq.n	3d62 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3d90:	2805      	cmp	r0, #5
    3d92:	d005      	beq.n	3da0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3d94:	2135      	movs	r1, #53	; 0x35
    3d96:	2004      	movs	r0, #4
    3d98:	f7ff ff06 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d9c:	212d      	movs	r1, #45	; 0x2d
    3d9e:	e7fa      	b.n	3d96 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3da2:	0000      	.short	0x0000
    3da4:	20000074 	.word	0x20000074
    3da8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3daa:	4c21      	ldr	r4, [pc, #132]	; (3e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dac:	4605      	mov	r5, r0
    3dae:	7820      	ldrb	r0, [r4, #0]
    3db0:	b140      	cbz	r0, 3dc4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3db2:	78a2      	ldrb	r2, [r4, #2]
    3db4:	1c61      	adds	r1, r4, #1
    3db6:	4628      	mov	r0, r5
    3db8:	1c92      	adds	r2, r2, #2
    3dba:	f007 fd0a 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3dbe:	2000      	movs	r0, #0
    3dc0:	7020      	strb	r0, [r4, #0]
    3dc2:	e025      	b.n	3e10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3dc4:	481a      	ldr	r0, [pc, #104]	; (3e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dc6:	3844      	subs	r0, #68	; 0x44
    3dc8:	f005 ff68 	bl	9c9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3dcc:	2800      	cmp	r0, #0
    3dce:	d020      	beq.n	3e12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3dd0:	4c17      	ldr	r4, [pc, #92]	; (3e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dd2:	3c44      	subs	r4, #68	; 0x44
    3dd4:	7820      	ldrb	r0, [r4, #0]
    3dd6:	2811      	cmp	r0, #17
    3dd8:	d104      	bne.n	3de4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x8c>
    3dda:	210a      	movs	r1, #10
    3ddc:	203e      	movs	r0, #62	; 0x3e
    3dde:	f007 fe71 	bl	bac4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3de2:	b118      	cbz	r0, 3dec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    3de4:	7820      	ldrb	r0, [r4, #0]
    3de6:	2808      	cmp	r0, #8
    3de8:	d006      	beq.n	3df8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa0>
    3dea:	e00a      	b.n	3e02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xaa>
    3dec:	4910      	ldr	r1, [pc, #64]	; (3e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3dee:	4628      	mov	r0, r5
    3df0:	3944      	subs	r1, #68	; 0x44
    3df2:	f008 f870 	bl	bed6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3df6:	e00b      	b.n	3e10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb8>
    3df8:	2105      	movs	r1, #5
    3dfa:	203e      	movs	r0, #62	; 0x3e
    3dfc:	f007 fe62 	bl	bac4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3e00:	b140      	cbz	r0, 3e14 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xbc>
    3e02:	490b      	ldr	r1, [pc, #44]	; (3e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>)
    3e04:	4628      	mov	r0, r5
    3e06:	3944      	subs	r1, #68	; 0x44
    3e08:	f007 feba 	bl	bb80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3e0c:	2800      	cmp	r0, #0
    3e0e:	d000      	beq.n	3e12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3e10:	2001      	movs	r0, #1
    3e12:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3e14:	88a0      	ldrh	r0, [r4, #4]
    3e16:	f8ad 0000 	strh.w	r0, [sp]
    3e1a:	a901      	add	r1, sp, #4
    3e1c:	4668      	mov	r0, sp
    3e1e:	f008 f974 	bl	c10a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3e22:	2800      	cmp	r0, #0
    3e24:	d0f5      	beq.n	3e12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xba>
    3e26:	2198      	movs	r1, #152	; 0x98
    3e28:	2008      	movs	r0, #8
    3e2a:	f7ff febd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e2e:	0000      	.short	0x0000
    3e30:	20034360 	.word	0x20034360
    3e34:	b570      	push	{r4, r5, r6, lr}
    3e36:	780a      	ldrb	r2, [r1, #0]
    3e38:	7082      	strb	r2, [r0, #2]
    3e3a:	b33a      	cbz	r2, 3e8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3e3c:	2a01      	cmp	r2, #1
    3e3e:	d825      	bhi.n	3e8c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x134>
    3e40:	2313      	movs	r3, #19
    3e42:	7003      	strb	r3, [r0, #0]
    3e44:	2300      	movs	r3, #0
    3e46:	e00a      	b.n	3e5e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x106>
    3e48:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3e4c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3e50:	78a6      	ldrb	r6, [r4, #2]
    3e52:	70ee      	strb	r6, [r5, #3]
    3e54:	8864      	ldrh	r4, [r4, #2]
    3e56:	0a24      	lsrs	r4, r4, #8
    3e58:	1c5b      	adds	r3, r3, #1
    3e5a:	712c      	strb	r4, [r5, #4]
    3e5c:	b2db      	uxtb	r3, r3
    3e5e:	4293      	cmp	r3, r2
    3e60:	d3f2      	bcc.n	3e48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf0>
    3e62:	2300      	movs	r3, #0
    3e64:	e00b      	b.n	3e7e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x126>
    3e66:	bf00      	nop
    3e68:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3e6c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3e70:	792e      	ldrb	r6, [r5, #4]
    3e72:	7166      	strb	r6, [r4, #5]
    3e74:	88ad      	ldrh	r5, [r5, #4]
    3e76:	0a2d      	lsrs	r5, r5, #8
    3e78:	1c5b      	adds	r3, r3, #1
    3e7a:	71a5      	strb	r5, [r4, #6]
    3e7c:	b2db      	uxtb	r3, r3
    3e7e:	4293      	cmp	r3, r2
    3e80:	d3f2      	bcc.n	3e68 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x110>
    3e82:	2101      	movs	r1, #1
    3e84:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3e88:	b2c0      	uxtb	r0, r0
    3e8a:	bd70      	pop	{r4, r5, r6, pc}
    3e8c:	2000      	movs	r0, #0
    3e8e:	bd70      	pop	{r4, r5, r6, pc}

00003e90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3e90:	2101      	movs	r1, #1
    3e92:	4a0c      	ldr	r2, [pc, #48]	; (3ec4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3e94:	2840      	cmp	r0, #64	; 0x40
    3e96:	d20c      	bcs.n	3eb2 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3e98:	2820      	cmp	r0, #32
    3e9a:	d803      	bhi.n	3ea4 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3e9c:	1e40      	subs	r0, r0, #1
    3e9e:	4081      	lsls	r1, r0
    3ea0:	6810      	ldr	r0, [r2, #0]
    3ea2:	e002      	b.n	3eaa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3ea4:	3821      	subs	r0, #33	; 0x21
    3ea6:	4081      	lsls	r1, r0
    3ea8:	6850      	ldr	r0, [r2, #4]
    3eaa:	4201      	tst	r1, r0
    3eac:	d107      	bne.n	3ebe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3eae:	2000      	movs	r0, #0
    3eb0:	4770      	bx	lr
    3eb2:	28ff      	cmp	r0, #255	; 0xff
    3eb4:	d003      	beq.n	3ebe <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3eb6:	3840      	subs	r0, #64	; 0x40
    3eb8:	4081      	lsls	r1, r0
    3eba:	6890      	ldr	r0, [r2, #8]
    3ebc:	e7f5      	b.n	3eaa <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3ebe:	2001      	movs	r0, #1
    3ec0:	4770      	bx	lr
    3ec2:	0000      	.short	0x0000
    3ec4:	20000078 	.word	0x20000078

00003ec8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3ec8:	2101      	movs	r1, #1
    3eca:	1e40      	subs	r0, r0, #1
    3ecc:	4081      	lsls	r1, r0
    3ece:	4804      	ldr	r0, [pc, #16]	; (3ee0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3ed0:	68c0      	ldr	r0, [r0, #12]
    3ed2:	4201      	tst	r1, r0
    3ed4:	d001      	beq.n	3eda <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3ed6:	2001      	movs	r0, #1
    3ed8:	4770      	bx	lr
    3eda:	2000      	movs	r0, #0
    3edc:	4770      	bx	lr
    3ede:	0000      	.short	0x0000
    3ee0:	20000078 	.word	0x20000078

00003ee4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3ee4:	4901      	ldr	r1, [pc, #4]	; (3eec <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3ee6:	6800      	ldr	r0, [r0, #0]
    3ee8:	60c8      	str	r0, [r1, #12]
    3eea:	4770      	bx	lr
    3eec:	20000078 	.word	0x20000078

00003ef0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3ef0:	4904      	ldr	r1, [pc, #16]	; (3f04 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3ef2:	6802      	ldr	r2, [r0, #0]
    3ef4:	6840      	ldr	r0, [r0, #4]
    3ef6:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3efa:	600a      	str	r2, [r1, #0]
    3efc:	4a02      	ldr	r2, [pc, #8]	; (3f08 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3efe:	4310      	orrs	r0, r2
    3f00:	6048      	str	r0, [r1, #4]
    3f02:	4770      	bx	lr
    3f04:	20000078 	.word	0x20000078
    3f08:	024007f8 	.word	0x024007f8

00003f0c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3f0c:	4901      	ldr	r1, [pc, #4]	; (3f14 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3f0e:	6800      	ldr	r0, [r0, #0]
    3f10:	6088      	str	r0, [r1, #8]
    3f12:	4770      	bx	lr
    3f14:	20000078 	.word	0x20000078

00003f18 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3f18:	4805      	ldr	r0, [pc, #20]	; (3f30 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3f1a:	f04f 31ff 	mov.w	r1, #4294967295
    3f1e:	6001      	str	r1, [r0, #0]
    3f20:	0cc9      	lsrs	r1, r1, #19
    3f22:	6041      	str	r1, [r0, #4]
    3f24:	2100      	movs	r1, #0
    3f26:	6081      	str	r1, [r0, #8]
    3f28:	211f      	movs	r1, #31
    3f2a:	60c1      	str	r1, [r0, #12]
    3f2c:	4770      	bx	lr
    3f2e:	0000      	.short	0x0000
    3f30:	20000078 	.word	0x20000078

00003f34 <sdc_hci_cmd_cb_reset>:
    3f34:	b510      	push	{r4, lr}
    3f36:	f7ff ffef 	bl	3f18 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3f3a:	f00a fd2f 	bl	e99c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3f3e:	4604      	mov	r4, r0
    3f40:	4802      	ldr	r0, [pc, #8]	; (3f4c <sdc_hci_cmd_cb_reset+0x18>)
    3f42:	6800      	ldr	r0, [r0, #0]
    3f44:	b100      	cbz	r0, 3f48 <sdc_hci_cmd_cb_reset+0x14>
    3f46:	4780      	blx	r0
    3f48:	4620      	mov	r0, r4
    3f4a:	bd10      	pop	{r4, pc}
    3f4c:	20000088 	.word	0x20000088

00003f50 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    3f50:	4901      	ldr	r1, [pc, #4]	; (3f58 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    3f52:	6008      	str	r0, [r1, #0]
    3f54:	4770      	bx	lr
    3f56:	0000      	.short	0x0000
    3f58:	20000088 	.word	0x20000088

00003f5c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    3f5c:	2102      	movs	r1, #2
    3f5e:	8001      	strh	r1, [r0, #0]
    3f60:	8041      	strh	r1, [r0, #2]
    3f62:	2100      	movs	r1, #0
    3f64:	7101      	strb	r1, [r0, #4]
    3f66:	213f      	movs	r1, #63	; 0x3f
    3f68:	7141      	strb	r1, [r0, #5]
    3f6a:	f247 0147 	movw	r1, #28743	; 0x7047
    3f6e:	80c1      	strh	r1, [r0, #6]
    3f70:	4901      	ldr	r1, [pc, #4]	; (3f78 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    3f72:	6081      	str	r1, [r0, #8]
    3f74:	2000      	movs	r0, #0
    3f76:	4770      	bx	lr
    3f78:	4e95818e 	.word	0x4e95818e

00003f7c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    3f7c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    3f7e:	4604      	mov	r4, r0
    3f80:	4669      	mov	r1, sp
    3f82:	f008 fc28 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    3f86:	b170      	cbz	r0, 3fa6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    3f88:	f240 2112 	movw	r1, #530	; 0x212
    3f8c:	e008      	b.n	3fa0 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    3f8e:	bf00      	nop
    3f90:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    3f94:	4621      	mov	r1, r4
    3f96:	f000 f8a9 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    3f9a:	b120      	cbz	r0, 3fa6 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    3f9c:	f240 2117 	movw	r1, #535	; 0x217
    3fa0:	2017      	movs	r0, #23
    3fa2:	f7ff fe01 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fa6:	4668      	mov	r0, sp
    3fa8:	f000 f850 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3fac:	2800      	cmp	r0, #0
    3fae:	d0ef      	beq.n	3f90 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    3fb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00003fb4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    3fb4:	b510      	push	{r4, lr}
    3fb6:	2802      	cmp	r0, #2
    3fb8:	d304      	bcc.n	3fc4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    3fba:	f240 116b 	movw	r1, #363	; 0x16b
    3fbe:	2017      	movs	r0, #23
    3fc0:	f7ff fdf2 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3fc4:	4901      	ldr	r1, [pc, #4]	; (3fcc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    3fc6:	5c08      	ldrb	r0, [r1, r0]
    3fc8:	bd10      	pop	{r4, pc}
    3fca:	0000      	.short	0x0000
    3fcc:	2003428c 	.word	0x2003428c

00003fd0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    3fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fd2:	4605      	mov	r5, r0
    3fd4:	9000      	str	r0, [sp, #0]
    3fd6:	4291      	cmp	r1, r2
    3fd8:	d201      	bcs.n	3fde <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    3fda:	4614      	mov	r4, r2
    3fdc:	e000      	b.n	3fe0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x10>
    3fde:	460c      	mov	r4, r1
    3fe0:	b155      	cbz	r5, 3ff8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    3fe2:	2700      	movs	r7, #0
    3fe4:	1ce8      	adds	r0, r5, #3
    3fe6:	f020 0003 	bic.w	r0, r0, #3
    3fea:	42a8      	cmp	r0, r5
    3fec:	d006      	beq.n	3ffc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
    3fee:	f240 113f 	movw	r1, #319	; 0x13f
    3ff2:	2017      	movs	r0, #23
    3ff4:	f7ff fdd8 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ff8:	2701      	movs	r7, #1
    3ffa:	e7f3      	b.n	3fe4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x14>
    3ffc:	4e12      	ldr	r6, [pc, #72]	; (4048 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    3ffe:	4668      	mov	r0, sp
    4000:	7031      	strb	r1, [r6, #0]
    4002:	7072      	strb	r2, [r6, #1]
    4004:	4639      	mov	r1, r7
    4006:	f000 f8ed 	bl	41e4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    400a:	2000      	movs	r0, #0
    400c:	4603      	mov	r3, r0
    400e:	9900      	ldr	r1, [sp, #0]
    4010:	1cc9      	adds	r1, r1, #3
    4012:	f021 0103 	bic.w	r1, r1, #3
    4016:	9100      	str	r1, [sp, #0]
    4018:	b967      	cbnz	r7, 4034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    401a:	eb06 0280 	add.w	r2, r6, r0, lsl #2
    401e:	60d1      	str	r1, [r2, #12]
    4020:	2100      	movs	r1, #0
    4022:	e005      	b.n	4030 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    4024:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    4028:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    402c:	1c49      	adds	r1, r1, #1
    402e:	b2c9      	uxtb	r1, r1
    4030:	42a1      	cmp	r1, r4
    4032:	d3f7      	bcc.n	4024 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
    4034:	9900      	ldr	r1, [sp, #0]
    4036:	1c40      	adds	r0, r0, #1
    4038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    403c:	b2c0      	uxtb	r0, r0
    403e:	9100      	str	r1, [sp, #0]
    4040:	2802      	cmp	r0, #2
    4042:	d3e4      	bcc.n	400e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3e>
    4044:	1b48      	subs	r0, r1, r5
    4046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4048:	2003428c 	.word	0x2003428c

0000404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	4604      	mov	r4, r0
    4050:	f008 fc2b 	bl	c8aa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4054:	b108      	cbz	r0, 405a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    4056:	2010      	movs	r0, #16
    4058:	bd70      	pop	{r4, r5, r6, pc}
    405a:	7825      	ldrb	r5, [r4, #0]
    405c:	f000 f8fe 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4060:	4602      	mov	r2, r0
    4062:	480c      	ldr	r0, [pc, #48]	; (4094 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4064:	8861      	ldrh	r1, [r4, #2]
    4066:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    406a:	e00e      	b.n	408a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    406c:	68c3      	ldr	r3, [r0, #12]
    406e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4072:	b143      	cbz	r3, 4086 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4074:	1c4a      	adds	r2, r1, #1
    4076:	8062      	strh	r2, [r4, #2]
    4078:	80a1      	strh	r1, [r4, #4]
    407a:	68c0      	ldr	r0, [r0, #12]
    407c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4080:	60a0      	str	r0, [r4, #8]
    4082:	2000      	movs	r0, #0
    4084:	bd70      	pop	{r4, r5, r6, pc}
    4086:	1c49      	adds	r1, r1, #1
    4088:	b289      	uxth	r1, r1
    408a:	4291      	cmp	r1, r2
    408c:	d3ee      	bcc.n	406c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    408e:	8061      	strh	r1, [r4, #2]
    4090:	2005      	movs	r0, #5
    4092:	bd70      	pop	{r4, r5, r6, pc}
    4094:	2003428c 	.word	0x2003428c

00004098 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    409c:	b121      	cbz	r1, 40a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    409e:	2901      	cmp	r1, #1
    40a0:	d002      	beq.n	40a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    40a2:	2000      	movs	r0, #0
    40a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40a8:	4c0f      	ldr	r4, [pc, #60]	; (40e8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    40aa:	2700      	movs	r7, #0
    40ac:	463b      	mov	r3, r7
    40ae:	f64f 76ff 	movw	r6, #65535	; 0xffff
    40b2:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    40b6:	f814 c001 	ldrb.w	ip, [r4, r1]
    40ba:	e00a      	b.n	40d2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    40bc:	19dc      	adds	r4, r3, r7
    40be:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    40c2:	b2a4      	uxth	r4, r4
    40c4:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    40c8:	f1be 0f00 	cmp.w	lr, #0
    40cc:	d004      	beq.n	40d8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    40ce:	1c5b      	adds	r3, r3, #1
    40d0:	b29b      	uxth	r3, r3
    40d2:	459c      	cmp	ip, r3
    40d4:	d8f2      	bhi.n	40bc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    40d6:	4634      	mov	r4, r6
    40d8:	8004      	strh	r4, [r0, #0]
    40da:	4620      	mov	r0, r4
    40dc:	42b4      	cmp	r4, r6
    40de:	d0e0      	beq.n	40a2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    40e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40e4:	f000 b834 	b.w	4150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    40e8:	2003428c 	.word	0x2003428c

000040ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    40ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40f0:	4606      	mov	r6, r0
    40f2:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    40f6:	460c      	mov	r4, r1
    40f8:	f243 0702 	movw	r7, #12290	; 0x3002
    40fc:	38ff      	subs	r0, #255	; 0xff
    40fe:	d020      	beq.n	4142 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4100:	2c02      	cmp	r4, #2
    4102:	d302      	bcc.n	410a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    4104:	2007      	movs	r0, #7
    4106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    410a:	4630      	mov	r0, r6
    410c:	f000 f85a 	bl	41c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    4110:	0005      	movs	r5, r0
    4112:	d016      	beq.n	4142 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    4114:	480c      	ldr	r0, [pc, #48]	; (4148 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    4116:	4629      	mov	r1, r5
    4118:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    411c:	4630      	mov	r0, r6
    411e:	4790      	blx	r2
    4120:	480a      	ldr	r0, [pc, #40]	; (414c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    4122:	2100      	movs	r1, #0
    4124:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    4128:	68f8      	ldr	r0, [r7, #12]
    412a:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    412e:	4620      	mov	r0, r4
    4130:	f000 f88a 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4134:	4602      	mov	r2, r0
    4136:	4629      	mov	r1, r5
    4138:	6878      	ldr	r0, [r7, #4]
    413a:	f008 fb19 	bl	c770 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    413e:	2000      	movs	r0, #0
    4140:	e7e1      	b.n	4106 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4142:	4638      	mov	r0, r7
    4144:	e7df      	b.n	4106 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    4146:	0000      	.short	0x0000
    4148:	0000427c 	.word	0x0000427c
    414c:	2003428c 	.word	0x2003428c
    4150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4154:	4690      	mov	r8, r2
    4156:	460d      	mov	r5, r1
    4158:	4607      	mov	r7, r0
    415a:	f008 fb4d 	bl	c7f8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    415e:	b148      	cbz	r0, 4174 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4160:	4816      	ldr	r0, [pc, #88]	; (41bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    4162:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4166:	68f0      	ldr	r0, [r6, #12]
    4168:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    416c:	b128      	cbz	r0, 417a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    416e:	f240 1109 	movw	r1, #265	; 0x109
    4172:	e015      	b.n	41a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4174:	f44f 7184 	mov.w	r1, #264	; 0x108
    4178:	e012      	b.n	41a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    417a:	6870      	ldr	r0, [r6, #4]
    417c:	2800      	cmp	r0, #0
    417e:	d01a      	beq.n	41b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4180:	4628      	mov	r0, r5
    4182:	f000 f861 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4186:	4601      	mov	r1, r0
    4188:	6870      	ldr	r0, [r6, #4]
    418a:	f008 faa3 	bl	c6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    418e:	0004      	movs	r4, r0
    4190:	d010      	beq.n	41b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    4192:	68f0      	ldr	r0, [r6, #12]
    4194:	2d02      	cmp	r5, #2
    4196:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    419a:	d304      	bcc.n	41a6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    419c:	f44f 718a 	mov.w	r1, #276	; 0x114
    41a0:	2017      	movs	r0, #23
    41a2:	f7ff fd01 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41a6:	4806      	ldr	r0, [pc, #24]	; (41c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    41a8:	4642      	mov	r2, r8
    41aa:	4621      	mov	r1, r4
    41ac:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    41b0:	4638      	mov	r0, r7
    41b2:	4798      	blx	r3
    41b4:	4620      	mov	r0, r4
    41b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41ba:	0000      	.short	0x0000
    41bc:	2003428c 	.word	0x2003428c
    41c0:	00004274 	.word	0x00004274
    41c4:	b570      	push	{r4, r5, r6, lr}
    41c6:	460c      	mov	r4, r1
    41c8:	4605      	mov	r5, r0
    41ca:	f008 fb15 	bl	c7f8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    41ce:	2800      	cmp	r0, #0
    41d0:	d005      	beq.n	41de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    41d2:	4803      	ldr	r0, [pc, #12]	; (41e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    41d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    41d8:	68c0      	ldr	r0, [r0, #12]
    41da:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    41de:	bd70      	pop	{r4, r5, r6, pc}
    41e0:	2003428c 	.word	0x2003428c
    41e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    41e8:	4e16      	ldr	r6, [pc, #88]	; (4244 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    41ea:	4688      	mov	r8, r1
    41ec:	4605      	mov	r5, r0
    41ee:	2400      	movs	r4, #0
    41f0:	6828      	ldr	r0, [r5, #0]
    41f2:	1cc0      	adds	r0, r0, #3
    41f4:	f020 0003 	bic.w	r0, r0, #3
    41f8:	6028      	str	r0, [r5, #0]
    41fa:	4620      	mov	r0, r4
    41fc:	f000 f824 	bl	4248 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4200:	5d31      	ldrb	r1, [r6, r4]
    4202:	4348      	muls	r0, r1
    4204:	f1b8 0f00 	cmp.w	r8, #0
    4208:	d001      	beq.n	420e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    420a:	2200      	movs	r2, #0
    420c:	e000      	b.n	4210 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    420e:	682a      	ldr	r2, [r5, #0]
    4210:	4601      	mov	r1, r0
    4212:	9200      	str	r2, [sp, #0]
    4214:	b132      	cbz	r2, 4224 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    4216:	2700      	movs	r7, #0
    4218:	ea4f 000d 	mov.w	r0, sp
    421c:	f008 fa87 	bl	c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4220:	b11f      	cbz	r7, 422a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    4222:	e006      	b.n	4232 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    4224:	2701      	movs	r7, #1
    4226:	2000      	movs	r0, #0
    4228:	e7f8      	b.n	421c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    422a:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    422e:	9a00      	ldr	r2, [sp, #0]
    4230:	604a      	str	r2, [r1, #4]
    4232:	6829      	ldr	r1, [r5, #0]
    4234:	1c64      	adds	r4, r4, #1
    4236:	4408      	add	r0, r1
    4238:	b2e4      	uxtb	r4, r4
    423a:	6028      	str	r0, [r5, #0]
    423c:	2c02      	cmp	r4, #2
    423e:	d3d7      	bcc.n	41f0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    4240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4244:	2003428c 	.word	0x2003428c
    4248:	4903      	ldr	r1, [pc, #12]	; (4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    424a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    424e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    4252:	1cc0      	adds	r0, r0, #3
    4254:	4008      	ands	r0, r1
    4256:	4770      	bx	lr
    4258:	00004270 	.word	0x00004270
    425c:	4803      	ldr	r0, [pc, #12]	; (426c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    425e:	7801      	ldrb	r1, [r0, #0]
    4260:	7840      	ldrb	r0, [r0, #1]
    4262:	4281      	cmp	r1, r0
    4264:	d300      	bcc.n	4268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    4266:	4608      	mov	r0, r1
    4268:	4770      	bx	lr
    426a:	0000      	.short	0x0000
    426c:	2003428c 	.word	0x2003428c
    4270:	00e80210 	.word	0x00e80210
    4274:	0000c80d 	.word	0x0000c80d
    4278:	0000c80d 	.word	0x0000c80d
    427c:	0000dfe9 	.word	0x0000dfe9
    4280:	0000d58b 	.word	0x0000d58b

00004284 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4284:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4288:	4c26      	ldr	r4, [pc, #152]	; (4324 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    428a:	4680      	mov	r8, r0
    428c:	b081      	sub	sp, #4
    428e:	6820      	ldr	r0, [r4, #0]
    4290:	469a      	mov	sl, r3
    4292:	4693      	mov	fp, r2
    4294:	b158      	cbz	r0, 42ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4296:	7a02      	ldrb	r2, [r0, #8]
    4298:	4542      	cmp	r2, r8
    429a:	d903      	bls.n	42a4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    429c:	6841      	ldr	r1, [r0, #4]
    429e:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    42a2:	b140      	cbz	r0, 42b6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    42a4:	f243 0002 	movw	r0, #12290	; 0x3002
    42a8:	b005      	add	sp, #20
    42aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    42ae:	21a5      	movs	r1, #165	; 0xa5
    42b0:	2018      	movs	r0, #24
    42b2:	f7ff fc79 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42b6:	4619      	mov	r1, r3
    42b8:	9802      	ldr	r0, [sp, #8]
    42ba:	f008 fabf 	bl	c83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    42be:	b286      	uxth	r6, r0
    42c0:	4658      	mov	r0, fp
    42c2:	990e      	ldr	r1, [sp, #56]	; 0x38
    42c4:	f008 fab1 	bl	c82a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    42c8:	b285      	uxth	r5, r0
    42ca:	1970      	adds	r0, r6, r5
    42cc:	1d00      	adds	r0, r0, #4
    42ce:	b287      	uxth	r7, r0
    42d0:	6820      	ldr	r0, [r4, #0]
    42d2:	46a1      	mov	r9, r4
    42d4:	4639      	mov	r1, r7
    42d6:	6800      	ldr	r0, [r0, #0]
    42d8:	f008 f9fc 	bl	c6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    42dc:	0004      	movs	r4, r0
    42de:	d01f      	beq.n	4320 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    42e0:	8067      	strh	r7, [r4, #2]
    42e2:	8025      	strh	r5, [r4, #0]
    42e4:	4629      	mov	r1, r5
    42e6:	1d20      	adds	r0, r4, #4
    42e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    42ea:	4607      	mov	r7, r0
    42ec:	465a      	mov	r2, fp
    42ee:	2301      	movs	r3, #1
    42f0:	9500      	str	r5, [sp, #0]
    42f2:	f008 f94e 	bl	c592 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    42f6:	8820      	ldrh	r0, [r4, #0]
    42f8:	4631      	mov	r1, r6
    42fa:	4438      	add	r0, r7
    42fc:	2301      	movs	r3, #1
    42fe:	9a02      	ldr	r2, [sp, #8]
    4300:	f8cd a000 	str.w	sl, [sp]
    4304:	f008 f945 	bl	c592 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4308:	8820      	ldrh	r0, [r4, #0]
    430a:	19c1      	adds	r1, r0, r7
    430c:	4638      	mov	r0, r7
    430e:	f008 f971 	bl	c5f4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    4312:	f8d9 0000 	ldr.w	r0, [r9]
    4316:	6841      	ldr	r1, [r0, #4]
    4318:	2000      	movs	r0, #0
    431a:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    431e:	e7c3      	b.n	42a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4320:	2004      	movs	r0, #4
    4322:	e7c1      	b.n	42a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    4324:	2000008c 	.word	0x2000008c

00004328 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    4328:	b570      	push	{r4, r5, r6, lr}
    432a:	4c14      	ldr	r4, [pc, #80]	; (437c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    432c:	6823      	ldr	r3, [r4, #0]
    432e:	b18b      	cbz	r3, 4354 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    4330:	7a19      	ldrb	r1, [r3, #8]
    4332:	4281      	cmp	r1, r0
    4334:	d912      	bls.n	435c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    4336:	685a      	ldr	r2, [r3, #4]
    4338:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    433c:	b171      	cbz	r1, 435c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    433e:	2500      	movs	r5, #0
    4340:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    4344:	884a      	ldrh	r2, [r1, #2]
    4346:	6818      	ldr	r0, [r3, #0]
    4348:	f008 fa12 	bl	c770 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    434c:	6821      	ldr	r1, [r4, #0]
    434e:	2000      	movs	r0, #0
    4350:	7a0a      	ldrb	r2, [r1, #8]
    4352:	e00c      	b.n	436e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4354:	21c8      	movs	r1, #200	; 0xc8
    4356:	2018      	movs	r0, #24
    4358:	f7ff fc26 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    435c:	f243 0002 	movw	r0, #12290	; 0x3002
    4360:	bd70      	pop	{r4, r5, r6, pc}
    4362:	684b      	ldr	r3, [r1, #4]
    4364:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4368:	b933      	cbnz	r3, 4378 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    436a:	1c40      	adds	r0, r0, #1
    436c:	b2c0      	uxtb	r0, r0
    436e:	4282      	cmp	r2, r0
    4370:	d8f7      	bhi.n	4362 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    4372:	6808      	ldr	r0, [r1, #0]
    4374:	f008 f9f1 	bl	c75a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4378:	2000      	movs	r0, #0
    437a:	bd70      	pop	{r4, r5, r6, pc}
    437c:	2000008c 	.word	0x2000008c

00004380 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4384:	460d      	mov	r5, r1
    4386:	0004      	movs	r4, r0
    4388:	4690      	mov	r8, r2
    438a:	f04f 0600 	mov.w	r6, #0
    438e:	d009      	beq.n	43a4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4390:	2700      	movs	r7, #0
    4392:	1ce0      	adds	r0, r4, #3
    4394:	f020 0003 	bic.w	r0, r0, #3
    4398:	42a0      	cmp	r0, r4
    439a:	d005      	beq.n	43a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    439c:	2186      	movs	r1, #134	; 0x86
    439e:	2018      	movs	r0, #24
    43a0:	f7ff fc02 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43a4:	2701      	movs	r7, #1
    43a6:	e7f4      	b.n	4392 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    43a8:	b1cd      	cbz	r5, 43de <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    43aa:	4611      	mov	r1, r2
    43ac:	2000      	movs	r0, #0
    43ae:	f008 f9be 	bl	c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    43b2:	300c      	adds	r0, #12
    43b4:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    43b8:	b98f      	cbnz	r7, 43de <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    43ba:	4f0a      	ldr	r7, [pc, #40]	; (43e4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    43bc:	f104 000c 	add.w	r0, r4, #12
    43c0:	00aa      	lsls	r2, r5, #2
    43c2:	603c      	str	r4, [r7, #0]
    43c4:	7225      	strb	r5, [r4, #8]
    43c6:	6060      	str	r0, [r4, #4]
    43c8:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    43cc:	6020      	str	r0, [r4, #0]
    43ce:	2100      	movs	r1, #0
    43d0:	6860      	ldr	r0, [r4, #4]
    43d2:	f007 fa78 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43d6:	4641      	mov	r1, r8
    43d8:	6838      	ldr	r0, [r7, #0]
    43da:	f008 f9a8 	bl	c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    43de:	4630      	mov	r0, r6
    43e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43e4:	2000008c 	.word	0x2000008c

000043e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    43e8:	b570      	push	{r4, r5, r6, lr}
    43ea:	4d08      	ldr	r5, [pc, #32]	; (440c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    43ec:	6828      	ldr	r0, [r5, #0]
    43ee:	2800      	cmp	r0, #0
    43f0:	d00a      	beq.n	4408 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    43f2:	2400      	movs	r4, #0
    43f4:	e004      	b.n	4400 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    43f6:	4620      	mov	r0, r4
    43f8:	f7ff ff96 	bl	4328 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    43fc:	1c64      	adds	r4, r4, #1
    43fe:	b2e4      	uxtb	r4, r4
    4400:	6828      	ldr	r0, [r5, #0]
    4402:	7a00      	ldrb	r0, [r0, #8]
    4404:	42a0      	cmp	r0, r4
    4406:	d8f6      	bhi.n	43f6 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    4408:	bd70      	pop	{r4, r5, r6, pc}
    440a:	0000      	.short	0x0000
    440c:	2000008c 	.word	0x2000008c

00004410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    4410:	4909      	ldr	r1, [pc, #36]	; (4438 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    4412:	b510      	push	{r4, lr}
    4414:	4602      	mov	r2, r0
    4416:	6809      	ldr	r1, [r1, #0]
    4418:	2000      	movs	r0, #0
    441a:	b149      	cbz	r1, 4430 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    441c:	7a0b      	ldrb	r3, [r1, #8]
    441e:	4293      	cmp	r3, r2
    4420:	d905      	bls.n	442e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    4422:	6849      	ldr	r1, [r1, #4]
    4424:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4428:	2900      	cmp	r1, #0
    442a:	d000      	beq.n	442e <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    442c:	1d08      	adds	r0, r1, #4
    442e:	bd10      	pop	{r4, pc}
    4430:	21ee      	movs	r1, #238	; 0xee
    4432:	2018      	movs	r0, #24
    4434:	f7ff fbb8 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4438:	2000008c 	.word	0x2000008c

0000443c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    443c:	490a      	ldr	r1, [pc, #40]	; (4468 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    443e:	b510      	push	{r4, lr}
    4440:	4602      	mov	r2, r0
    4442:	6809      	ldr	r1, [r1, #0]
    4444:	2000      	movs	r0, #0
    4446:	b159      	cbz	r1, 4460 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4448:	7a0b      	ldrb	r3, [r1, #8]
    444a:	4293      	cmp	r3, r2
    444c:	d907      	bls.n	445e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    444e:	6849      	ldr	r1, [r1, #4]
    4450:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4454:	2900      	cmp	r1, #0
    4456:	d002      	beq.n	445e <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4458:	f831 0b04 	ldrh.w	r0, [r1], #4
    445c:	4408      	add	r0, r1
    445e:	bd10      	pop	{r4, pc}
    4460:	21fc      	movs	r1, #252	; 0xfc
    4462:	2018      	movs	r0, #24
    4464:	f7ff fba0 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4468:	2000008c 	.word	0x2000008c

0000446c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    446c:	b570      	push	{r4, r5, r6, lr}
    446e:	4606      	mov	r6, r0
    4470:	4809      	ldr	r0, [pc, #36]	; (4498 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x2c>)
    4472:	460d      	mov	r5, r1
    4474:	8800      	ldrh	r0, [r0, #0]
    4476:	b10a      	cbz	r2, 447c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x10>
    4478:	0844      	lsrs	r4, r0, #1
    447a:	e000      	b.n	447e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x12>
    447c:	0884      	lsrs	r4, r0, #2
    447e:	4621      	mov	r1, r4
    4480:	6828      	ldr	r0, [r5, #0]
    4482:	f008 f927 	bl	c6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4486:	2100      	movs	r1, #0
    4488:	792a      	ldrb	r2, [r5, #4]
    448a:	f364 411f 	bfi	r1, r4, #16, #16
    448e:	1c52      	adds	r2, r2, #1
    4490:	712a      	strb	r2, [r5, #4]
    4492:	e9c6 0100 	strd	r0, r1, [r6]
    4496:	bd70      	pop	{r4, r5, r6, pc}
    4498:	20000090 	.word	0x20000090

0000449c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    449c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44a0:	4688      	mov	r8, r1
    44a2:	0005      	movs	r5, r0
    44a4:	d00a      	beq.n	44bc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x20>
    44a6:	2700      	movs	r7, #0
    44a8:	1ce9      	adds	r1, r5, #3
    44aa:	2000      	movs	r0, #0
    44ac:	f021 0103 	bic.w	r1, r1, #3
    44b0:	42a9      	cmp	r1, r5
    44b2:	d005      	beq.n	44c0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    44b4:	212e      	movs	r1, #46	; 0x2e
    44b6:	2009      	movs	r0, #9
    44b8:	f7ff fb76 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44bc:	2701      	movs	r7, #1
    44be:	e7f3      	b.n	44a8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xc>
    44c0:	491d      	ldr	r1, [pc, #116]	; (4538 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    44c2:	eb00 06c8 	add.w	r6, r0, r8, lsl #3
    44c6:	b907      	cbnz	r7, 44ca <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x2e>
    44c8:	604d      	str	r5, [r1, #4]
    44ca:	2a1f      	cmp	r2, #31
    44cc:	d804      	bhi.n	44d8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x3c>
    44ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
    44d2:	ea00 0082 	and.w	r0, r0, r2, lsl #2
    44d6:	e007      	b.n	44e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4c>
    44d8:	207c      	movs	r0, #124	; 0x7c
    44da:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
    44de:	d201      	bcs.n	44e4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    44e0:	0050      	lsls	r0, r2, #1
    44e2:	e000      	b.n	44e6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    44e4:	207c      	movs	r0, #124	; 0x7c
    44e6:	b280      	uxth	r0, r0
    44e8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    44ec:	1cc0      	adds	r0, r0, #3
    44ee:	4010      	ands	r0, r2
    44f0:	2400      	movs	r4, #0
    44f2:	8008      	strh	r0, [r1, #0]
    44f4:	46a2      	mov	sl, r4
    44f6:	4689      	mov	r9, r1
    44f8:	e016      	b.n	4528 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    44fa:	19a8      	adds	r0, r5, r6
    44fc:	9000      	str	r0, [sp, #0]
    44fe:	b10f      	cbz	r7, 4504 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x68>
    4500:	2000      	movs	r0, #0
    4502:	e000      	b.n	4506 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x6a>
    4504:	4668      	mov	r0, sp
    4506:	f8b9 1000 	ldrh.w	r1, [r9]
    450a:	f008 f910 	bl	c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    450e:	b947      	cbnz	r7, 4522 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x86>
    4510:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4514:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
    4518:	f883 a004 	strb.w	sl, [r3, #4]
    451c:	9a00      	ldr	r2, [sp, #0]
    451e:	f841 2034 	str.w	r2, [r1, r4, lsl #3]
    4522:	1c64      	adds	r4, r4, #1
    4524:	4406      	add	r6, r0
    4526:	b2e4      	uxtb	r4, r4
    4528:	4544      	cmp	r4, r8
    452a:	d3e6      	bcc.n	44fa <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5e>
    452c:	1df6      	adds	r6, r6, #7
    452e:	f026 0007 	bic.w	r0, r6, #7
    4532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4536:	0000      	.short	0x0000
    4538:	20000090 	.word	0x20000090

0000453c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    453c:	4906      	ldr	r1, [pc, #24]	; (4558 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x1c>)
    453e:	b510      	push	{r4, lr}
    4540:	684a      	ldr	r2, [r1, #4]
    4542:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
    4546:	2000      	movs	r0, #0
    4548:	7120      	strb	r0, [r4, #4]
    454a:	8809      	ldrh	r1, [r1, #0]
    454c:	4620      	mov	r0, r4
    454e:	f008 f8ee 	bl	c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4552:	4620      	mov	r0, r4
    4554:	bd10      	pop	{r4, pc}
    4556:	0000      	.short	0x0000
    4558:	20000090 	.word	0x20000090
    455c:	4909      	ldr	r1, [pc, #36]	; (4584 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x48>)
    455e:	b510      	push	{r4, lr}
    4560:	4807      	ldr	r0, [pc, #28]	; (4580 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    4562:	6008      	str	r0, [r1, #0]
    4564:	4b08      	ldr	r3, [pc, #32]	; (4588 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x4c>)
    4566:	2011      	movs	r0, #17
    4568:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    456c:	2200      	movs	r2, #0
    456e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4572:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4576:	1c40      	adds	r0, r0, #1
    4578:	b2c0      	uxtb	r0, r0
    457a:	2814      	cmp	r0, #20
    457c:	d3f4      	bcc.n	4568 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x2c>
    457e:	bd10      	pop	{r4, pc}
    4580:	fffe0000 	.word	0xfffe0000
    4584:	4001f508 	.word	0x4001f508
    4588:	4001f000 	.word	0x4001f000
    458c:	b570      	push	{r4, r5, r6, lr}
    458e:	2420      	movs	r4, #32
    4590:	2100      	movs	r1, #0
    4592:	2301      	movs	r3, #1
    4594:	fa20 f201 	lsr.w	r2, r0, r1
    4598:	07d2      	lsls	r2, r2, #31
    459a:	d020      	beq.n	45de <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    459c:	b24a      	sxtb	r2, r1
    459e:	2a00      	cmp	r2, #0
    45a0:	db10      	blt.n	45c4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x88>
    45a2:	bf00      	nop
    45a4:	ea4f 1652 	mov.w	r6, r2, lsr #5
    45a8:	ea4f 0686 	mov.w	r6, r6, lsl #2
    45ac:	f002 051f 	and.w	r5, r2, #31
    45b0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    45b4:	fa03 f505 	lsl.w	r5, r3, r5
    45b8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    45bc:	f3bf 8f4f 	dsb	sy
    45c0:	f3bf 8f6f 	isb	sy
    45c4:	db0b      	blt.n	45de <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xa2>
    45c6:	f002 051f 	and.w	r5, r2, #31
    45ca:	ea4f 1252 	mov.w	r2, r2, lsr #5
    45ce:	ea4f 0282 	mov.w	r2, r2, lsl #2
    45d2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    45d6:	fa03 f505 	lsl.w	r5, r3, r5
    45da:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    45de:	f101 0101 	add.w	r1, r1, #1
    45e2:	42a1      	cmp	r1, r4
    45e4:	d3d6      	bcc.n	4594 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x58>
    45e6:	bd70      	pop	{r4, r5, r6, pc}
    45e8:	b570      	push	{r4, r5, r6, lr}
    45ea:	0042      	lsls	r2, r0, #1
    45ec:	f04f 0100 	mov.w	r1, #0
    45f0:	d501      	bpl.n	45f6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xba>
    45f2:	4a14      	ldr	r2, [pc, #80]	; (4644 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x108>)
    45f4:	6011      	str	r1, [r2, #0]
    45f6:	f3c0 3280 	ubfx	r2, r0, #14, #1
    45fa:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    45fe:	429a      	cmp	r2, r3
    4600:	d003      	beq.n	460a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xce>
    4602:	2164      	movs	r1, #100	; 0x64
    4604:	201b      	movs	r0, #27
    4606:	f7ff facf 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    460a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    460e:	d014      	beq.n	463a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xfe>
    4610:	4a0d      	ldr	r2, [pc, #52]	; (4648 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x10c>)
    4612:	2001      	movs	r0, #1
    4614:	6050      	str	r0, [r2, #4]
    4616:	1e83      	subs	r3, r0, #2
    4618:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    461c:	4a0b      	ldr	r2, [pc, #44]	; (464c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x110>)
    461e:	6090      	str	r0, [r2, #8]
    4620:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4624:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4628:	4c09      	ldr	r4, [pc, #36]	; (4650 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x114>)
    462a:	6021      	str	r1, [r4, #0]
    462c:	1d25      	adds	r5, r4, #4
    462e:	6028      	str	r0, [r5, #0]
    4630:	6090      	str	r0, [r2, #8]
    4632:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4636:	6021      	str	r1, [r4, #0]
    4638:	6028      	str	r0, [r5, #0]
    463a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    463e:	f7ff bf8d 	b.w	455c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    4642:	0000      	.short	0x0000
    4644:	4001e504 	.word	0x4001e504
    4648:	4000e000 	.word	0x4000e000
    464c:	4000f000 	.word	0x4000f000
    4650:	4000f500 	.word	0x4000f500

00004654 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4654:	b570      	push	{r4, r5, r6, lr}
    4656:	4c0a      	ldr	r4, [pc, #40]	; (4680 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4658:	460d      	mov	r5, r1
    465a:	6020      	str	r0, [r4, #0]
    465c:	f7ff ffc4 	bl	45e8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xac>
    4660:	6820      	ldr	r0, [r4, #0]
    4662:	f7ff ff93 	bl	458c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x50>
    4666:	f000 f877 	bl	4758 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    466a:	f7ff ff77 	bl	455c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x20>
    466e:	f008 f911 	bl	c894 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4672:	4628      	mov	r0, r5
    4674:	f000 f8aa 	bl	47cc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    467c:	f000 b8c2 	b.w	4804 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    4680:	20000098 	.word	0x20000098

00004684 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    4684:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    4688:	4e2f      	ldr	r6, [pc, #188]	; (4748 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    468a:	4683      	mov	fp, r0
    468c:	6830      	ldr	r0, [r6, #0]
    468e:	9001      	str	r0, [sp, #4]
    4690:	2701      	movs	r7, #1
    4692:	482e      	ldr	r0, [pc, #184]	; (474c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    4694:	f006 fff4 	bl	b680 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4698:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 474c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    469c:	b920      	cbnz	r0, 46a8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    469e:	2700      	movs	r7, #0
    46a0:	f108 0001 	add.w	r0, r8, #1
    46a4:	f007 f803 	bl	b6ae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    46a8:	4c29      	ldr	r4, [pc, #164]	; (4750 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    46aa:	2500      	movs	r5, #0
    46ac:	f04f 0903 	mov.w	r9, #3
    46b0:	2001      	movs	r0, #1
    46b2:	6060      	str	r0, [r4, #4]
    46b4:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    46b8:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    46bc:	f8c6 b000 	str.w	fp, [r6]
    46c0:	6020      	str	r0, [r4, #0]
    46c2:	f8df a090 	ldr.w	sl, [pc, #144]	; 4754 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    46c6:	e017      	b.n	46f8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    46c8:	f8da 0000 	ldr.w	r0, [sl]
    46cc:	06c0      	lsls	r0, r0, #27
    46ce:	d513      	bpl.n	46f8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    46d0:	200e      	movs	r0, #14
    46d2:	f008 f8d0 	bl	c876 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    46d6:	f3ef 8010 	mrs	r0, PRIMASK
    46da:	9000      	str	r0, [sp, #0]
    46dc:	b672      	cpsid	i
    46de:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    46e2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    46e6:	b920      	cbnz	r0, 46f2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    46e8:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    46ec:	b908      	cbnz	r0, 46f2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    46ee:	f7ff f8eb 	bl	38c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    46f2:	9800      	ldr	r0, [sp, #0]
    46f4:	b900      	cbnz	r0, 46f8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    46f6:	b662      	cpsie	i
    46f8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    46fc:	b918      	cbnz	r0, 4706 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    46fe:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4702:	2800      	cmp	r0, #0
    4704:	d0e0      	beq.n	46c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4706:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    470a:	2800      	cmp	r0, #0
    470c:	d1d0      	bne.n	46b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    470e:	b137      	cbz	r7, 471e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    4710:	9801      	ldr	r0, [sp, #4]
    4712:	6030      	str	r0, [r6, #0]
    4714:	f108 0001 	add.w	r0, r8, #1
    4718:	f006 ffb2 	bl	b680 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    471c:	e011      	b.n	4742 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    471e:	f108 0001 	add.w	r0, r8, #1
    4722:	f006 ffad 	bl	b680 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4726:	2800      	cmp	r0, #0
    4728:	d1ba      	bne.n	46a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    472a:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    472e:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4732:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4736:	200e      	movs	r0, #14
    4738:	f008 f89d 	bl	c876 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x28>
    473c:	4803      	ldr	r0, [pc, #12]	; (474c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    473e:	f006 ffb6 	bl	b6ae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4742:	2000      	movs	r0, #0
    4744:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4748:	4000e504 	.word	0x4000e504
    474c:	2000029b 	.word	0x2000029b
    4750:	4000e000 	.word	0x4000e000
    4754:	e000ed10 	.word	0xe000ed10

00004758 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4758:	b510      	push	{r4, lr}
    475a:	4808      	ldr	r0, [pc, #32]	; (477c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    475c:	f006 ffa3 	bl	b6a6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4760:	b108      	cbz	r0, 4766 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    4762:	2124      	movs	r1, #36	; 0x24
    4764:	e006      	b.n	4774 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    4766:	4805      	ldr	r0, [pc, #20]	; (477c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4768:	1c40      	adds	r0, r0, #1
    476a:	f006 ff9c 	bl	b6a6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    476e:	2800      	cmp	r0, #0
    4770:	d003      	beq.n	477a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    4772:	2128      	movs	r1, #40	; 0x28
    4774:	201d      	movs	r0, #29
    4776:	f7ff fa17 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    477a:	bd10      	pop	{r4, pc}
    477c:	2000029b 	.word	0x2000029b

00004780 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    4780:	b570      	push	{r4, r5, r6, lr}
    4782:	4911      	ldr	r1, [pc, #68]	; (47c8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    4784:	680a      	ldr	r2, [r1, #0]
    4786:	b1ea      	cbz	r2, 47c4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    4788:	2300      	movs	r3, #0
    478a:	461d      	mov	r5, r3
    478c:	2401      	movs	r4, #1
    478e:	684a      	ldr	r2, [r1, #4]
    4790:	1c52      	adds	r2, r2, #1
    4792:	604a      	str	r2, [r1, #4]
    4794:	2a09      	cmp	r2, #9
    4796:	d300      	bcc.n	479a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    4798:	604d      	str	r5, [r1, #4]
    479a:	790e      	ldrb	r6, [r1, #4]
    479c:	fa04 f206 	lsl.w	r2, r4, r6
    47a0:	680e      	ldr	r6, [r1, #0]
    47a2:	4216      	tst	r6, r2
    47a4:	d00b      	beq.n	47be <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    47a6:	f3ef 8310 	mrs	r3, PRIMASK
    47aa:	b672      	cpsid	i
    47ac:	680c      	ldr	r4, [r1, #0]
    47ae:	4394      	bics	r4, r2
    47b0:	600c      	str	r4, [r1, #0]
    47b2:	b903      	cbnz	r3, 47b6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    47b4:	b662      	cpsie	i
    47b6:	6849      	ldr	r1, [r1, #4]
    47b8:	6001      	str	r1, [r0, #0]
    47ba:	2000      	movs	r0, #0
    47bc:	bd70      	pop	{r4, r5, r6, pc}
    47be:	1c5b      	adds	r3, r3, #1
    47c0:	2b09      	cmp	r3, #9
    47c2:	d3e4      	bcc.n	478e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    47c4:	2005      	movs	r0, #5
    47c6:	bd70      	pop	{r4, r5, r6, pc}
    47c8:	2000009c 	.word	0x2000009c

000047cc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    47cc:	4802      	ldr	r0, [pc, #8]	; (47d8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    47ce:	2100      	movs	r1, #0
    47d0:	6001      	str	r1, [r0, #0]
    47d2:	6041      	str	r1, [r0, #4]
    47d4:	4770      	bx	lr
    47d6:	0000      	.short	0x0000
    47d8:	2000009c 	.word	0x2000009c

000047dc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    47dc:	b510      	push	{r4, lr}
    47de:	4c08      	ldr	r4, [pc, #32]	; (4800 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    47e0:	7861      	ldrb	r1, [r4, #1]
    47e2:	b109      	cbz	r1, 47e8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    47e4:	200f      	movs	r0, #15
    47e6:	bd10      	pop	{r4, pc}
    47e8:	f7fe fffa 	bl	37e0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    47ec:	7020      	strb	r0, [r4, #0]
    47ee:	28ff      	cmp	r0, #255	; 0xff
    47f0:	d001      	beq.n	47f6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    47f2:	2000      	movs	r0, #0
    47f4:	bd10      	pop	{r4, pc}
    47f6:	2176      	movs	r1, #118	; 0x76
    47f8:	201f      	movs	r0, #31
    47fa:	f7ff f9d5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47fe:	0000      	.short	0x0000
    4800:	200000a4 	.word	0x200000a4

00004804 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4804:	4901      	ldr	r1, [pc, #4]	; (480c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4806:	2000      	movs	r0, #0
    4808:	7048      	strb	r0, [r1, #1]
    480a:	4770      	bx	lr
    480c:	200000a4 	.word	0x200000a4

00004810 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4810:	4806      	ldr	r0, [pc, #24]	; (482c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4812:	4a07      	ldr	r2, [pc, #28]	; (4830 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4814:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4816:	8852      	ldrh	r2, [r2, #2]
    4818:	4291      	cmp	r1, r2
    481a:	d104      	bne.n	4826 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    481c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4820:	b108      	cbz	r0, 4826 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4822:	2000      	movs	r0, #0
    4824:	4770      	bx	lr
    4826:	2001      	movs	r0, #1
    4828:	4770      	bx	lr
    482a:	0000      	.short	0x0000
    482c:	20034462 	.word	0x20034462
    4830:	20000288 	.word	0x20000288

00004834 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4834:	4901      	ldr	r1, [pc, #4]	; (483c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4836:	8048      	strh	r0, [r1, #2]
    4838:	4770      	bx	lr
    483a:	0000      	.short	0x0000
    483c:	20000288 	.word	0x20000288

00004840 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4840:	4808      	ldr	r0, [pc, #32]	; (4864 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4842:	4a09      	ldr	r2, [pc, #36]	; (4868 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4844:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4846:	8852      	ldrh	r2, [r2, #2]
    4848:	4291      	cmp	r1, r2
    484a:	d109      	bne.n	4860 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    484c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4850:	8481      	strh	r1, [r0, #36]	; 0x24
    4852:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4856:	b119      	cbz	r1, 4860 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4858:	2100      	movs	r1, #0
    485a:	7001      	strb	r1, [r0, #0]
    485c:	2001      	movs	r0, #1
    485e:	4770      	bx	lr
    4860:	2000      	movs	r0, #0
    4862:	4770      	bx	lr
    4864:	20034462 	.word	0x20034462
    4868:	20000288 	.word	0x20000288

0000486c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    486c:	4807      	ldr	r0, [pc, #28]	; (488c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    486e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4872:	2901      	cmp	r1, #1
    4874:	d007      	beq.n	4886 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4876:	2101      	movs	r1, #1
    4878:	7001      	strb	r1, [r0, #0]
    487a:	4805      	ldr	r0, [pc, #20]	; (4890 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    487c:	4903      	ldr	r1, [pc, #12]	; (488c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    487e:	8800      	ldrh	r0, [r0, #0]
    4880:	8488      	strh	r0, [r1, #36]	; 0x24
    4882:	2001      	movs	r0, #1
    4884:	4770      	bx	lr
    4886:	2000      	movs	r0, #0
    4888:	4770      	bx	lr
    488a:	0000      	.short	0x0000
    488c:	20034462 	.word	0x20034462
    4890:	20000288 	.word	0x20000288

00004894 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4894:	4906      	ldr	r1, [pc, #24]	; (48b0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4896:	4b07      	ldr	r3, [pc, #28]	; (48b4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4898:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    489a:	885b      	ldrh	r3, [r3, #2]
    489c:	429a      	cmp	r2, r3
    489e:	d105      	bne.n	48ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    48a0:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    48a4:	b112      	cbz	r2, 48ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    48a6:	6001      	str	r1, [r0, #0]
    48a8:	2001      	movs	r0, #1
    48aa:	4770      	bx	lr
    48ac:	2000      	movs	r0, #0
    48ae:	4770      	bx	lr
    48b0:	20034462 	.word	0x20034462
    48b4:	20000288 	.word	0x20000288

000048b8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    48b8:	4909      	ldr	r1, [pc, #36]	; (48e0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    48ba:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    48bc:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    48c0:	3bff      	subs	r3, #255	; 0xff
    48c2:	d002      	beq.n	48ca <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    48c4:	2100      	movs	r1, #0
    48c6:	6001      	str	r1, [r0, #0]
    48c8:	e007      	b.n	48da <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    48ca:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    48ce:	4904      	ldr	r1, [pc, #16]	; (48e0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    48d0:	2a01      	cmp	r2, #1
    48d2:	d002      	beq.n	48da <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    48d4:	6001      	str	r1, [r0, #0]
    48d6:	2001      	movs	r0, #1
    48d8:	4770      	bx	lr
    48da:	2000      	movs	r0, #0
    48dc:	4770      	bx	lr
    48de:	0000      	.short	0x0000
    48e0:	20034462 	.word	0x20034462

000048e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    48e4:	4901      	ldr	r1, [pc, #4]	; (48ec <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    48e6:	8008      	strh	r0, [r1, #0]
    48e8:	4770      	bx	lr
    48ea:	0000      	.short	0x0000
    48ec:	20000288 	.word	0x20000288

000048f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    48f0:	4905      	ldr	r1, [pc, #20]	; (4908 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    48f2:	2000      	movs	r0, #0
    48f4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    48f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    48fc:	8488      	strh	r0, [r1, #36]	; 0x24
    48fe:	4903      	ldr	r1, [pc, #12]	; (490c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4900:	8008      	strh	r0, [r1, #0]
    4902:	8048      	strh	r0, [r1, #2]
    4904:	4770      	bx	lr
    4906:	0000      	.short	0x0000
    4908:	20034462 	.word	0x20034462
    490c:	20000288 	.word	0x20000288
    4910:	4905      	ldr	r1, [pc, #20]	; (4928 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4912:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4914:	4282      	cmp	r2, r0
    4916:	d105      	bne.n	4924 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4918:	2000      	movs	r0, #0
    491a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    491e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4922:	8488      	strh	r0, [r1, #36]	; 0x24
    4924:	4770      	bx	lr
    4926:	0000      	.short	0x0000
    4928:	20034462 	.word	0x20034462

0000492c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    492c:	4a0a      	ldr	r2, [pc, #40]	; (4958 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    492e:	b110      	cbz	r0, 4936 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4930:	2801      	cmp	r0, #1
    4932:	d007      	beq.n	4944 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4934:	e00e      	b.n	4954 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4936:	7850      	ldrb	r0, [r2, #1]
    4938:	b160      	cbz	r0, 4954 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    493a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    493e:	6008      	str	r0, [r1, #0]
    4940:	88d0      	ldrh	r0, [r2, #6]
    4942:	e004      	b.n	494e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4944:	7810      	ldrb	r0, [r2, #0]
    4946:	b128      	cbz	r0, 4954 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4948:	6890      	ldr	r0, [r2, #8]
    494a:	6008      	str	r0, [r1, #0]
    494c:	8990      	ldrh	r0, [r2, #12]
    494e:	8088      	strh	r0, [r1, #4]
    4950:	2001      	movs	r0, #1
    4952:	4770      	bx	lr
    4954:	2000      	movs	r0, #0
    4956:	4770      	bx	lr
    4958:	2000029d 	.word	0x2000029d

0000495c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    495c:	4a08      	ldr	r2, [pc, #32]	; (4980 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    495e:	2301      	movs	r3, #1
    4960:	b138      	cbz	r0, 4972 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4962:	2801      	cmp	r0, #1
    4964:	d104      	bne.n	4970 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4966:	7013      	strb	r3, [r2, #0]
    4968:	6808      	ldr	r0, [r1, #0]
    496a:	6090      	str	r0, [r2, #8]
    496c:	8888      	ldrh	r0, [r1, #4]
    496e:	8190      	strh	r0, [r2, #12]
    4970:	4770      	bx	lr
    4972:	7053      	strb	r3, [r2, #1]
    4974:	6808      	ldr	r0, [r1, #0]
    4976:	f8c2 0002 	str.w	r0, [r2, #2]
    497a:	8888      	ldrh	r0, [r1, #4]
    497c:	80d0      	strh	r0, [r2, #6]
    497e:	4770      	bx	lr
    4980:	2000029d 	.word	0x2000029d

00004984 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4984:	4906      	ldr	r1, [pc, #24]	; (49a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4986:	b110      	cbz	r0, 498e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4988:	2801      	cmp	r0, #1
    498a:	d002      	beq.n	4992 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    498c:	e005      	b.n	499a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    498e:	7848      	ldrb	r0, [r1, #1]
    4990:	e000      	b.n	4994 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4992:	7808      	ldrb	r0, [r1, #0]
    4994:	b108      	cbz	r0, 499a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4996:	2001      	movs	r0, #1
    4998:	4770      	bx	lr
    499a:	2000      	movs	r0, #0
    499c:	4770      	bx	lr
    499e:	0000      	.short	0x0000
    49a0:	2000029d 	.word	0x2000029d

000049a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    49a4:	4901      	ldr	r1, [pc, #4]	; (49ac <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    49a6:	7448      	strb	r0, [r1, #17]
    49a8:	4770      	bx	lr
    49aa:	0000      	.short	0x0000
    49ac:	20033e92 	.word	0x20033e92

000049b0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    49b0:	4801      	ldr	r0, [pc, #4]	; (49b8 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    49b2:	78c0      	ldrb	r0, [r0, #3]
    49b4:	4770      	bx	lr
    49b6:	0000      	.short	0x0000
    49b8:	200000c0 	.word	0x200000c0

000049bc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    49bc:	4801      	ldr	r0, [pc, #4]	; (49c4 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    49be:	7900      	ldrb	r0, [r0, #4]
    49c0:	4770      	bx	lr
    49c2:	0000      	.short	0x0000
    49c4:	200000c0 	.word	0x200000c0

000049c8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    49c8:	b578      	push	{r3, r4, r5, r6, lr}
    49ca:	4913      	ldr	r1, [pc, #76]	; (4a18 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    49cc:	7c4a      	ldrb	r2, [r1, #17]
    49ce:	b30a      	cbz	r2, 4a14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    49d0:	7c0a      	ldrb	r2, [r1, #16]
    49d2:	f88d 2000 	strb.w	r2, [sp]
    49d6:	9a00      	ldr	r2, [sp, #0]
    49d8:	9200      	str	r2, [sp, #0]
    49da:	f89d 2000 	ldrb.w	r2, [sp]
    49de:	b1ca      	cbz	r2, 4a14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    49e0:	2300      	movs	r3, #0
    49e2:	f101 0210 	add.w	r2, r1, #16
    49e6:	241a      	movs	r4, #26
    49e8:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    49ec:	7c0e      	ldrb	r6, [r1, #16]
    49ee:	f88d 6000 	strb.w	r6, [sp]
    49f2:	9e00      	ldr	r6, [sp, #0]
    49f4:	9600      	str	r6, [sp, #0]
    49f6:	f89d 6000 	ldrb.w	r6, [sp]
    49fa:	b14e      	cbz	r6, 4a10 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    49fc:	7013      	strb	r3, [r2, #0]
    49fe:	7043      	strb	r3, [r0, #1]
    4a00:	7004      	strb	r4, [r0, #0]
    4a02:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4a06:	6046      	str	r6, [r0, #4]
    4a08:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4a0c:	6086      	str	r6, [r0, #8]
    4a0e:	e7ed      	b.n	49ec <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4a10:	2001      	movs	r0, #1
    4a12:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a14:	2000      	movs	r0, #0
    4a16:	bd78      	pop	{r3, r4, r5, r6, pc}
    4a18:	20033e92 	.word	0x20033e92

00004a1c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4a1c:	b510      	push	{r4, lr}
    4a1e:	4604      	mov	r4, r0
    4a20:	f000 f946 	bl	4cb0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4a24:	b118      	cbz	r0, 4a2e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4a26:	21bd      	movs	r1, #189	; 0xbd
    4a28:	2027      	movs	r0, #39	; 0x27
    4a2a:	f7ff f8bd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a2e:	4803      	ldr	r0, [pc, #12]	; (4a3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4a30:	2101      	movs	r1, #1
    4a32:	f008 fb0c 	bl	d04e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4a36:	4802      	ldr	r0, [pc, #8]	; (4a40 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4a38:	62c4      	str	r4, [r0, #44]	; 0x2c
    4a3a:	bd10      	pop	{r4, pc}
    4a3c:	20033e70 	.word	0x20033e70
    4a40:	200000c0 	.word	0x200000c0

00004a44 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4a44:	4901      	ldr	r1, [pc, #4]	; (4a4c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4a46:	2001      	movs	r0, #1
    4a48:	7188      	strb	r0, [r1, #6]
    4a4a:	4770      	bx	lr
    4a4c:	200000c0 	.word	0x200000c0

00004a50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a54:	4d57      	ldr	r5, [pc, #348]	; (4bb4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x164>)
    4a56:	9c08      	ldr	r4, [sp, #32]
    4a58:	782e      	ldrb	r6, [r5, #0]
    4a5a:	2e00      	cmp	r6, #0
    4a5c:	d16e      	bne.n	4b3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a5e:	2a00      	cmp	r2, #0
    4a60:	d06c      	beq.n	4b3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a62:	2b00      	cmp	r3, #0
    4a64:	d06a      	beq.n	4b3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a66:	2c00      	cmp	r4, #0
    4a68:	d068      	beq.n	4b3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4a6a:	f105 0614 	add.w	r6, r5, #20
    4a6e:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4a72:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4a76:	2700      	movs	r7, #0
    4a78:	71af      	strb	r7, [r5, #6]
    4a7a:	716f      	strb	r7, [r5, #5]
    4a7c:	70ef      	strb	r7, [r5, #3]
    4a7e:	70af      	strb	r7, [r5, #2]
    4a80:	712f      	strb	r7, [r5, #4]
    4a82:	81af      	strh	r7, [r5, #12]
    4a84:	81ef      	strh	r7, [r5, #14]
    4a86:	f000 f94b 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4a8a:	4606      	mov	r6, r0
    4a8c:	f000 f942 	bl	4d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4a90:	4604      	mov	r4, r0
    4a92:	f005 ffd1 	bl	aa38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4a96:	f005 fca9 	bl	a3ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4a9a:	f994 0066 	ldrsb.w	r0, [r4, #102]	; 0x66
    4a9e:	f006 f853 	bl	ab48 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4aa2:	f104 0010 	add.w	r0, r4, #16
    4aa6:	f006 f93d 	bl	ad24 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4aaa:	f104 000c 	add.w	r0, r4, #12
    4aae:	f006 f92d 	bl	ad0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4ab2:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4ab6:	f006 f94f 	bl	ad58 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4aba:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4abe:	6840      	ldr	r0, [r0, #4]
    4ac0:	f890 016c 	ldrb.w	r0, [r0, #364]	; 0x16c
    4ac4:	b108      	cbz	r0, 4aca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x7a>
    4ac6:	f005 ff05 	bl	a8d4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4aca:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4ace:	2001      	movs	r0, #1
    4ad0:	f005 fe30 	bl	a734 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4ad4:	2800      	cmp	r0, #0
    4ad6:	d066      	beq.n	4ba6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x156>
    4ad8:	46ba      	mov	sl, r7
    4ada:	2001      	movs	r0, #1
    4adc:	f005 ff3a 	bl	a954 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    4ae0:	4835      	ldr	r0, [pc, #212]	; (4bb8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x168>)
    4ae2:	f005 fea3 	bl	a82c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4ae6:	8820      	ldrh	r0, [r4, #0]
    4ae8:	f7ff fca8 	bl	443c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4aec:	6328      	str	r0, [r5, #48]	; 0x30
    4aee:	8820      	ldrh	r0, [r4, #0]
    4af0:	f7ff fc8e 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4af4:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4af8:	6368      	str	r0, [r5, #52]	; 0x34
    4afa:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 4bbc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    4afe:	c98e      	ldmia	r1, {r1, r2, r3, r7}
    4b00:	f109 0808 	add.w	r8, r9, #8
    4b04:	e888 008e 	stmia.w	r8, {r1, r2, r3, r7}
    4b08:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4b0a:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4b0e:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4b10:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4b14:	f000 f976 	bl	4e04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4b18:	4601      	mov	r1, r0
    4b1a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    4b1c:	f008 f81a 	bl	cb54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4b20:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    4b22:	4281      	cmp	r1, r0
    4b24:	d200      	bcs.n	4b28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd8>
    4b26:	4608      	mov	r0, r1
    4b28:	7228      	strb	r0, [r5, #8]
    4b2a:	46a8      	mov	r8, r5
    4b2c:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    4b30:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    4b32:	7cf7      	ldrb	r7, [r6, #19]
    4b34:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
    4b36:	2908      	cmp	r1, #8
    4b38:	d104      	bne.n	4b44 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf4>
    4b3a:	e002      	b.n	4b42 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf2>
    4b3c:	f44f 718a 	mov.w	r1, #276	; 0x114
    4b40:	e035      	b.n	4bae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4b42:	2104      	movs	r1, #4
    4b44:	f008 f806 	bl	cb54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4b48:	b90f      	cbnz	r7, 4b4e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4b4a:	1d00      	adds	r0, r0, #4
    4b4c:	b280      	uxth	r0, r0
    4b4e:	4285      	cmp	r5, r0
    4b50:	d200      	bcs.n	4b54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x104>
    4b52:	4628      	mov	r0, r5
    4b54:	b2c0      	uxtb	r0, r0
    4b56:	f888 0009 	strb.w	r0, [r8, #9]
    4b5a:	7cf2      	ldrb	r2, [r6, #19]
    4b5c:	b102      	cbz	r2, 4b60 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4b5e:	2204      	movs	r2, #4
    4b60:	4410      	add	r0, r2
    4b62:	b2c0      	uxtb	r0, r0
    4b64:	f888 0007 	strb.w	r0, [r8, #7]
    4b68:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
    4b6c:	1d09      	adds	r1, r1, #4
    4b6e:	4281      	cmp	r1, r0
    4b70:	d202      	bcs.n	4b78 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x128>
    4b72:	f240 11a1 	movw	r1, #417	; 0x1a1
    4b76:	e01a      	b.n	4bae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15e>
    4b78:	4655      	mov	r5, sl
    4b7a:	2001      	movs	r0, #1
    4b7c:	f000 fb46 	bl	520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    4b80:	480f      	ldr	r0, [pc, #60]	; (4bc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>)
    4b82:	6800      	ldr	r0, [r0, #0]
    4b84:	2803      	cmp	r0, #3
    4b86:	d010      	beq.n	4baa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4b88:	280b      	cmp	r0, #11
    4b8a:	d00e      	beq.n	4baa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x15a>
    4b8c:	4648      	mov	r0, r9
    4b8e:	f840 5f52 	str.w	r5, [r0, #82]!
    4b92:	6045      	str	r5, [r0, #4]
    4b94:	4809      	ldr	r0, [pc, #36]	; (4bbc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>)
    4b96:	88b1      	ldrh	r1, [r6, #4]
    4b98:	3052      	adds	r0, #82	; 0x52
    4b9a:	8041      	strh	r1, [r0, #2]
    4b9c:	8821      	ldrh	r1, [r4, #0]
    4b9e:	8001      	strh	r1, [r0, #0]
    4ba0:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4ba4:	7101      	strb	r1, [r0, #4]
    4ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4baa:	f240 11b1 	movw	r1, #433	; 0x1b1
    4bae:	2027      	movs	r0, #39	; 0x27
    4bb0:	f7fe fffa 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bb4:	200000c0 	.word	0x200000c0
    4bb8:	00005438 	.word	0x00005438
    4bbc:	20033e40 	.word	0x20033e40
    4bc0:	40001550 	.word	0x40001550

00004bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4bc8:	4605      	mov	r5, r0
    4bca:	f000 f8a9 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4bce:	4e33      	ldr	r6, [pc, #204]	; (4c9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4bd0:	4604      	mov	r4, r0
    4bd2:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4bd4:	7847      	ldrb	r7, [r0, #1]
    4bd6:	b10d      	cbz	r5, 4bdc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4bd8:	2d01      	cmp	r5, #1
    4bda:	d103      	bne.n	4be4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4bdc:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4bde:	f006 ff49 	bl	ba74 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4be2:	7070      	strb	r0, [r6, #1]
    4be4:	7870      	ldrb	r0, [r6, #1]
    4be6:	f04f 0800 	mov.w	r8, #0
    4bea:	f04f 0901 	mov.w	r9, #1
    4bee:	b150      	cbz	r0, 4c06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4bf0:	2801      	cmp	r0, #1
    4bf2:	d01a      	beq.n	4c2a <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4bf4:	2802      	cmp	r0, #2
    4bf6:	d034      	beq.n	4c62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4bf8:	2803      	cmp	r0, #3
    4bfa:	d048      	beq.n	4c8e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4bfc:	f240 31f1 	movw	r1, #1009	; 0x3f1
    4c00:	2027      	movs	r0, #39	; 0x27
    4c02:	f7fe ffd1 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c06:	2d01      	cmp	r5, #1
    4c08:	d032      	beq.n	4c70 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4c0a:	f000 f8e7 	bl	4ddc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4c0e:	4639      	mov	r1, r7
    4c10:	2201      	movs	r2, #1
    4c12:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c14:	f007 fb52 	bl	c2bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4c18:	e028      	b.n	4c6c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4c1a:	bf00      	nop
    4c1c:	f884 8008 	strb.w	r8, [r4, #8]
    4c20:	e031      	b.n	4c86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4c22:	bf00      	nop
    4c24:	f884 9008 	strb.w	r9, [r4, #8]
    4c28:	e02d      	b.n	4c86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4c2a:	2d01      	cmp	r5, #1
    4c2c:	d008      	beq.n	4c40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4c2e:	f000 f8d5 	bl	4ddc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4c32:	4639      	mov	r1, r7
    4c34:	2200      	movs	r2, #0
    4c36:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c38:	f007 fb40 	bl	c2bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4c3c:	2d02      	cmp	r5, #2
    4c3e:	d00b      	beq.n	4c58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c40:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4c44:	1c40      	adds	r0, r0, #1
    4c46:	f141 0100 	adc.w	r1, r1, #0
    4c4a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4c4e:	7a20      	ldrb	r0, [r4, #8]
    4c50:	2801      	cmp	r0, #1
    4c52:	d003      	beq.n	4c5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4c54:	f884 9008 	strb.w	r9, [r4, #8]
    4c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c5c:	f884 8008 	strb.w	r8, [r4, #8]
    4c60:	e7fa      	b.n	4c58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c62:	2d01      	cmp	r5, #1
    4c64:	d004      	beq.n	4c70 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4c66:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c68:	f007 fd2e 	bl	c6c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4c6c:	2d02      	cmp	r5, #2
    4c6e:	d0f3      	beq.n	4c58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c70:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4c74:	1c40      	adds	r0, r0, #1
    4c76:	f141 0100 	adc.w	r1, r1, #0
    4c7a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4c7e:	7a20      	ldrb	r0, [r4, #8]
    4c80:	2801      	cmp	r0, #1
    4c82:	d1cf      	bne.n	4c24 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4c84:	e7ca      	b.n	4c1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4c86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c8a:	f004 bee9 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4c8e:	2d01      	cmp	r5, #1
    4c90:	d0e2      	beq.n	4c58 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4c92:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4c94:	f007 fd18 	bl	c6c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4c98:	e7f5      	b.n	4c86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4c9a:	0000      	.short	0x0000
    4c9c:	200000c0 	.word	0x200000c0

00004ca0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4ca0:	4802      	ldr	r0, [pc, #8]	; (4cac <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4ca2:	89c0      	ldrh	r0, [r0, #14]
    4ca4:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4ca8:	4770      	bx	lr
    4caa:	0000      	.short	0x0000
    4cac:	200000c0 	.word	0x200000c0

00004cb0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4cb0:	4804      	ldr	r0, [pc, #16]	; (4cc4 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4cb2:	7800      	ldrb	r0, [r0, #0]
    4cb4:	b108      	cbz	r0, 4cba <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4cb6:	200c      	movs	r0, #12
    4cb8:	4770      	bx	lr
    4cba:	4903      	ldr	r1, [pc, #12]	; (4cc8 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4cbc:	2000      	movs	r0, #0
    4cbe:	7448      	strb	r0, [r1, #17]
    4cc0:	4770      	bx	lr
    4cc2:	0000      	.short	0x0000
    4cc4:	200000c0 	.word	0x200000c0
    4cc8:	20033e92 	.word	0x20033e92

00004ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4ccc:	480c      	ldr	r0, [pc, #48]	; (4d00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4cce:	b510      	push	{r4, lr}
    4cd0:	7801      	ldrb	r1, [r0, #0]
    4cd2:	b149      	cbz	r1, 4ce8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4cd4:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4cd8:	7800      	ldrb	r0, [r0, #0]
    4cda:	2802      	cmp	r0, #2
    4cdc:	d008      	beq.n	4cf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4cde:	f240 11cd 	movw	r1, #461	; 0x1cd
    4ce2:	2027      	movs	r0, #39	; 0x27
    4ce4:	f7fe ff60 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cec:	f000 b9a6 	b.w	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    4cf0:	6848      	ldr	r0, [r1, #4]
    4cf2:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4cfa:	f005 bd9f 	b.w	a83c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4cfe:	0000      	.short	0x0000
    4d00:	200000c0 	.word	0x200000c0
    4d04:	4a02      	ldr	r2, [pc, #8]	; (4d10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4d06:	8993      	ldrh	r3, [r2, #12]
    4d08:	4303      	orrs	r3, r0
    4d0a:	8193      	strh	r3, [r2, #12]
    4d0c:	6952      	ldr	r2, [r2, #20]
    4d0e:	4710      	bx	r2
    4d10:	200000c0 	.word	0x200000c0
    4d14:	4801      	ldr	r0, [pc, #4]	; (4d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4d16:	6840      	ldr	r0, [r0, #4]
    4d18:	4770      	bx	lr
    4d1a:	0000      	.short	0x0000
    4d1c:	200000f8 	.word	0x200000f8
    4d20:	4801      	ldr	r0, [pc, #4]	; (4d28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4d22:	6840      	ldr	r0, [r0, #4]
    4d24:	3068      	adds	r0, #104	; 0x68
    4d26:	4770      	bx	lr
    4d28:	200000f8 	.word	0x200000f8
    4d2c:	4a01      	ldr	r2, [pc, #4]	; (4d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4d2e:	2100      	movs	r1, #0
    4d30:	6952      	ldr	r2, [r2, #20]
    4d32:	4710      	bx	r2
    4d34:	200000c0 	.word	0x200000c0
    4d38:	b570      	push	{r4, r5, r6, lr}
    4d3a:	f7ff fff1 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d3e:	4604      	mov	r4, r0
    4d40:	f7ff ffe8 	bl	4d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4d44:	4605      	mov	r5, r0
    4d46:	4621      	mov	r1, r4
    4d48:	f007 ff87 	bl	cc5a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4d4c:	7fa9      	ldrb	r1, [r5, #30]
    4d4e:	2901      	cmp	r1, #1
    4d50:	d114      	bne.n	4d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4d52:	2800      	cmp	r0, #0
    4d54:	d012      	beq.n	4d7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb0>
    4d56:	480a      	ldr	r0, [pc, #40]	; (4d80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    4d58:	6842      	ldr	r2, [r0, #4]
    4d5a:	8828      	ldrh	r0, [r5, #0]
    4d5c:	f8a2 01ee 	strh.w	r0, [r2, #494]	; 0x1ee
    4d60:	7a60      	ldrb	r0, [r4, #9]
    4d62:	f882 01f0 	strb.w	r0, [r2, #496]	; 0x1f0
    4d66:	7aa0      	ldrb	r0, [r4, #10]
    4d68:	f882 01f1 	strb.w	r0, [r2, #497]	; 0x1f1
    4d6c:	f502 72f6 	add.w	r2, r2, #492	; 0x1ec
    4d70:	2001      	movs	r0, #1
    4d72:	7010      	strb	r0, [r2, #0]
    4d74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4d78:	f004 be72 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4d7c:	bd70      	pop	{r4, r5, r6, pc}
    4d7e:	0000      	.short	0x0000
    4d80:	200000f8 	.word	0x200000f8
    4d84:	b570      	push	{r4, r5, r6, lr}
    4d86:	4605      	mov	r5, r0
    4d88:	2901      	cmp	r1, #1
    4d8a:	d818      	bhi.n	4dbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4d8c:	4c12      	ldr	r4, [pc, #72]	; (4dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    4d8e:	69a1      	ldr	r1, [r4, #24]
    4d90:	4788      	blx	r1
    4d92:	b1a0      	cbz	r0, 4dbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4d94:	7960      	ldrb	r0, [r4, #5]
    4d96:	b990      	cbnz	r0, 4dbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4d98:	b9e5      	cbnz	r5, 4dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4d9a:	f104 0010 	add.w	r0, r4, #16
    4d9e:	7801      	ldrb	r1, [r0, #0]
    4da0:	06c8      	lsls	r0, r1, #27
    4da2:	d405      	bmi.n	4db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4da4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4da6:	7800      	ldrb	r0, [r0, #0]
    4da8:	06c0      	lsls	r0, r0, #27
    4daa:	d401      	bmi.n	4db0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4dac:	2001      	movs	r0, #1
    4dae:	e000      	b.n	4db2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    4db0:	2000      	movs	r0, #0
    4db2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4db4:	b92a      	cbnz	r2, 4dc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4db6:	8962      	ldrh	r2, [r4, #10]
    4db8:	b11a      	cbz	r2, 4dc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4dba:	06c9      	lsls	r1, r1, #27
    4dbc:	d401      	bmi.n	4dc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4dbe:	2001      	movs	r0, #1
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
    4dc2:	89a1      	ldrh	r1, [r4, #12]
    4dc4:	078a      	lsls	r2, r1, #30
    4dc6:	d503      	bpl.n	4dd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    4dc8:	6a22      	ldr	r2, [r4, #32]
    4dca:	78d2      	ldrb	r2, [r2, #3]
    4dcc:	2a02      	cmp	r2, #2
    4dce:	d001      	beq.n	4dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4dd0:	4308      	orrs	r0, r1
    4dd2:	d1f4      	bne.n	4dbe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4dd4:	2000      	movs	r0, #0
    4dd6:	bd70      	pop	{r4, r5, r6, pc}
    4dd8:	200000c0 	.word	0x200000c0
    4ddc:	b510      	push	{r4, lr}
    4dde:	4c08      	ldr	r4, [pc, #32]	; (4e00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    4de0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4de2:	b138      	cbz	r0, 4df4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4de4:	8962      	ldrh	r2, [r4, #10]
    4de6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4de8:	1cd2      	adds	r2, r2, #3
    4dea:	f006 fcf2 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4dee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4df0:	6260      	str	r0, [r4, #36]	; 0x24
    4df2:	bd10      	pop	{r4, pc}
    4df4:	f44f 6187 	mov.w	r1, #1080	; 0x438
    4df8:	2027      	movs	r0, #39	; 0x27
    4dfa:	f7fe fed5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dfe:	0000      	.short	0x0000
    4e00:	200000c0 	.word	0x200000c0
    4e04:	b510      	push	{r4, lr}
    4e06:	f7ff ff85 	bl	4d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4e0a:	4604      	mov	r4, r0
    4e0c:	f7ff ff88 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e10:	4601      	mov	r1, r0
    4e12:	7b42      	ldrb	r2, [r0, #13]
    4e14:	4815      	ldr	r0, [pc, #84]	; (4e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    4e16:	2a24      	cmp	r2, #36	; 0x24
    4e18:	d00e      	beq.n	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4e1a:	7b89      	ldrb	r1, [r1, #14]
    4e1c:	2924      	cmp	r1, #36	; 0x24
    4e1e:	d00b      	beq.n	4e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4e20:	2a1f      	cmp	r2, #31
    4e22:	d00d      	beq.n	4e40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4e24:	2a20      	cmp	r2, #32
    4e26:	d00b      	beq.n	4e40 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4e28:	2922      	cmp	r1, #34	; 0x22
    4e2a:	d00f      	beq.n	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4e2c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4e30:	2804      	cmp	r0, #4
    4e32:	d100      	bne.n	4e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    4e34:	2008      	movs	r0, #8
    4e36:	bd10      	pop	{r4, pc}
    4e38:	6840      	ldr	r0, [r0, #4]
    4e3a:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    4e3e:	e00e      	b.n	4e5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    4e40:	2922      	cmp	r1, #34	; 0x22
    4e42:	d003      	beq.n	4e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4e44:	6840      	ldr	r0, [r0, #4]
    4e46:	f890 01a8 	ldrb.w	r0, [r0, #424]	; 0x1a8
    4e4a:	e005      	b.n	4e58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4e4c:	6841      	ldr	r1, [r0, #4]
    4e4e:	f891 01a8 	ldrb.w	r0, [r1, #424]	; 0x1a8
    4e52:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    4e56:	4008      	ands	r0, r1
    4e58:	f007 fd78 	bl	c94c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4e5c:	4601      	mov	r1, r0
    4e5e:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    4e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e66:	f007 bd89 	b.w	c97c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4e6a:	0000      	.short	0x0000
    4e6c:	200000f8 	.word	0x200000f8
    4e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e74:	4688      	mov	r8, r1
    4e76:	4606      	mov	r6, r0
    4e78:	f7ff ff52 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4e7c:	4c4a      	ldr	r4, [pc, #296]	; (4fa8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>)
    4e7e:	2700      	movs	r7, #0
    4e80:	4605      	mov	r5, r0
    4e82:	f88d 7000 	strb.w	r7, [sp]
    4e86:	7820      	ldrb	r0, [r4, #0]
    4e88:	2802      	cmp	r0, #2
    4e8a:	d004      	beq.n	4e96 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    4e8c:	f240 4189 	movw	r1, #1161	; 0x489
    4e90:	2027      	movs	r0, #39	; 0x27
    4e92:	f7fe fe89 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e96:	7ba0      	ldrb	r0, [r4, #14]
    4e98:	0640      	lsls	r0, r0, #25
    4e9a:	d406      	bmi.n	4eaa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    4e9c:	2040      	movs	r0, #64	; 0x40
    4e9e:	f7ff ff45 	bl	4d2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4ea2:	89e0      	ldrh	r0, [r4, #14]
    4ea4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    4ea8:	81e0      	strh	r0, [r4, #14]
    4eaa:	7ce8      	ldrb	r0, [r5, #19]
    4eac:	b3c6      	cbz	r6, 4f20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    4eae:	f005 fb15 	bl	a4dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    4eb2:	f005 faf9 	bl	a4a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    4eb6:	b968      	cbnz	r0, 4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4eb8:	7ce8      	ldrb	r0, [r5, #19]
    4eba:	b158      	cbz	r0, 4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4ebc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ebe:	7841      	ldrb	r1, [r0, #1]
    4ec0:	b141      	cbz	r1, 4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4ec2:	7800      	ldrb	r0, [r0, #0]
    4ec4:	7a29      	ldrb	r1, [r5, #8]
    4ec6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4eca:	4288      	cmp	r0, r1
    4ecc:	d102      	bne.n	4ed4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    4ece:	2001      	movs	r0, #1
    4ed0:	70a0      	strb	r0, [r4, #2]
    4ed2:	e04a      	b.n	4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    4ed4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ed6:	7841      	ldrb	r1, [r0, #1]
    4ed8:	8161      	strh	r1, [r4, #10]
    4eda:	b121      	cbz	r1, 4ee6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    4edc:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4ede:	f007 fbc0 	bl	c662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    4ee2:	62a0      	str	r0, [r4, #40]	; 0x28
    4ee4:	e000      	b.n	4ee8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    4ee6:	62a7      	str	r7, [r4, #40]	; 0x28
    4ee8:	89e0      	ldrh	r0, [r4, #14]
    4eea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4eee:	81e0      	strh	r0, [r4, #14]
    4ef0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4ef2:	79e9      	ldrb	r1, [r5, #7]
    4ef4:	7800      	ldrb	r0, [r0, #0]
    4ef6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4efa:	4288      	cmp	r0, r1
    4efc:	d005      	beq.n	4f0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    4efe:	f000 f937 	bl	5170 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a4>
    4f02:	89e0      	ldrh	r0, [r4, #14]
    4f04:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    4f08:	81e0      	strh	r0, [r4, #14]
    4f0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    4f0c:	7a29      	ldrb	r1, [r5, #8]
    4f0e:	7800      	ldrb	r0, [r0, #0]
    4f10:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4f14:	4288      	cmp	r0, r1
    4f16:	d10e      	bne.n	4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    4f18:	4668      	mov	r0, sp
    4f1a:	f000 f8e5 	bl	50e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>
    4f1e:	e00a      	b.n	4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    4f20:	e7ff      	b.n	4f22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    4f22:	b108      	cbz	r0, 4f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    4f24:	f005 fad4 	bl	a4d0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    4f28:	78e0      	ldrb	r0, [r4, #3]
    4f2a:	1c40      	adds	r0, r0, #1
    4f2c:	70e0      	strb	r0, [r4, #3]
    4f2e:	89e0      	ldrh	r0, [r4, #14]
    4f30:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    4f34:	81e0      	strh	r0, [r4, #14]
    4f36:	4d1d      	ldr	r5, [pc, #116]	; (4fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e0>)
    4f38:	f1b8 0f00 	cmp.w	r8, #0
    4f3c:	d104      	bne.n	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    4f3e:	78e1      	ldrb	r1, [r4, #3]
    4f40:	2001      	movs	r0, #1
    4f42:	f7ff ff1f 	bl	4d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    4f46:	b1a0      	cbz	r0, 4f72 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a6>
    4f48:	f89d 0000 	ldrb.w	r0, [sp]
    4f4c:	b110      	cbz	r0, 4f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x288>
    4f4e:	2000      	movs	r0, #0
    4f50:	f7ff fe38 	bl	4bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4f54:	b136      	cbz	r6, 4f64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    4f56:	70e7      	strb	r7, [r4, #3]
    4f58:	7968      	ldrb	r0, [r5, #5]
    4f5a:	1c40      	adds	r0, r0, #1
    4f5c:	7168      	strb	r0, [r5, #5]
    4f5e:	f7ff feeb 	bl	4d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f62:	e002      	b.n	4f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x29e>
    4f64:	79a8      	ldrb	r0, [r5, #6]
    4f66:	1c40      	adds	r0, r0, #1
    4f68:	71a8      	strb	r0, [r5, #6]
    4f6a:	f000 f867 	bl	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    4f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4f72:	f89d 0000 	ldrb.w	r0, [sp]
    4f76:	b110      	cbz	r0, 4f7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b2>
    4f78:	2001      	movs	r0, #1
    4f7a:	f7ff fe23 	bl	4bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4f7e:	2000      	movs	r0, #0
    4f80:	f000 f98e 	bl	52a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d4>
    4f84:	f89d 0000 	ldrb.w	r0, [sp]
    4f88:	b110      	cbz	r0, 4f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2c4>
    4f8a:	2002      	movs	r0, #2
    4f8c:	f7ff fe1a 	bl	4bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    4f90:	b136      	cbz	r6, 4fa0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    4f92:	70e7      	strb	r7, [r4, #3]
    4f94:	7968      	ldrb	r0, [r5, #5]
    4f96:	1c40      	adds	r0, r0, #1
    4f98:	7168      	strb	r0, [r5, #5]
    4f9a:	f7ff fecd 	bl	4d38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4f9e:	e7e6      	b.n	4f6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    4fa0:	79a8      	ldrb	r0, [r5, #6]
    4fa2:	1c40      	adds	r0, r0, #1
    4fa4:	71a8      	strb	r0, [r5, #6]
    4fa6:	e7e2      	b.n	4f6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    4fa8:	200000c0 	.word	0x200000c0
    4fac:	20033e92 	.word	0x20033e92
    4fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fb4:	460e      	mov	r6, r1
    4fb6:	4680      	mov	r8, r0
    4fb8:	f7ff feb2 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4fbc:	4d1e      	ldr	r5, [pc, #120]	; (5038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36c>)
    4fbe:	4604      	mov	r4, r0
    4fc0:	7828      	ldrb	r0, [r5, #0]
    4fc2:	2801      	cmp	r0, #1
    4fc4:	d004      	beq.n	4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x304>
    4fc6:	f240 4147 	movw	r1, #1095	; 0x447
    4fca:	2027      	movs	r0, #39	; 0x27
    4fcc:	f7fe fdec 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4fd0:	7860      	ldrb	r0, [r4, #1]
    4fd2:	2701      	movs	r7, #1
    4fd4:	b130      	cbz	r0, 4fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x318>
    4fd6:	2000      	movs	r0, #0
    4fd8:	7060      	strb	r0, [r4, #1]
    4fda:	4601      	mov	r1, r0
    4fdc:	2004      	movs	r0, #4
    4fde:	f7ff fe91 	bl	4d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4fe2:	70e7      	strb	r7, [r4, #3]
    4fe4:	6a29      	ldr	r1, [r5, #32]
    4fe6:	7808      	ldrb	r0, [r1, #0]
    4fe8:	43c0      	mvns	r0, r0
    4fea:	0780      	lsls	r0, r0, #30
    4fec:	d109      	bne.n	5002 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x336>
    4fee:	79a0      	ldrb	r0, [r4, #6]
    4ff0:	b9d0      	cbnz	r0, 5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    4ff2:	2002      	movs	r0, #2
    4ff4:	f7ff fe86 	bl	4d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    4ff8:	6a28      	ldr	r0, [r5, #32]
    4ffa:	7800      	ldrb	r0, [r0, #0]
    4ffc:	43c0      	mvns	r0, r0
    4ffe:	0780      	lsls	r0, r0, #30
    5000:	d012      	beq.n	5028 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35c>
    5002:	6a28      	ldr	r0, [r5, #32]
    5004:	7840      	ldrb	r0, [r0, #1]
    5006:	b110      	cbz	r0, 500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x342>
    5008:	2002      	movs	r0, #2
    500a:	71a0      	strb	r0, [r4, #6]
    500c:	e000      	b.n	5010 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    500e:	71a7      	strb	r7, [r4, #6]
    5010:	ea36 0608 	bics.w	r6, r6, r8
    5014:	d004      	beq.n	5020 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    5016:	2100      	movs	r1, #0
    5018:	4608      	mov	r0, r1
    501a:	f7ff feb3 	bl	4d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    501e:	b128      	cbz	r0, 502c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x360>
    5020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5024:	f000 b80a 	b.w	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5028:	2003      	movs	r0, #3
    502a:	e7ee      	b.n	500a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x33e>
    502c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5030:	2000      	movs	r0, #0
    5032:	f000 b8eb 	b.w	520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5036:	0000      	.short	0x0000
    5038:	200000c0 	.word	0x200000c0
    503c:	b510      	push	{r4, lr}
    503e:	f005 fae5 	bl	a60c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    5042:	f005 f9d3 	bl	a3ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5046:	4c0d      	ldr	r4, [pc, #52]	; (507c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5048:	89e0      	ldrh	r0, [r4, #14]
    504a:	f7ff fe6f 	bl	4d2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    504e:	69e2      	ldr	r2, [r4, #28]
    5050:	7961      	ldrb	r1, [r4, #5]
    5052:	78a0      	ldrb	r0, [r4, #2]
    5054:	4790      	blx	r2
    5056:	480a      	ldr	r0, [pc, #40]	; (5080 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5058:	7c40      	ldrb	r0, [r0, #17]
    505a:	b158      	cbz	r0, 5074 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>
    505c:	4808      	ldr	r0, [pc, #32]	; (5080 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    505e:	3852      	subs	r0, #82	; 0x52
    5060:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5064:	6081      	str	r1, [r0, #8]
    5066:	6841      	ldr	r1, [r0, #4]
    5068:	60c1      	str	r1, [r0, #12]
    506a:	4805      	ldr	r0, [pc, #20]	; (5080 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    506c:	2101      	movs	r1, #1
    506e:	7401      	strb	r1, [r0, #16]
    5070:	f004 fcf6 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5074:	2000      	movs	r0, #0
    5076:	7020      	strb	r0, [r4, #0]
    5078:	bd10      	pop	{r4, pc}
    507a:	0000      	.short	0x0000
    507c:	200000c0 	.word	0x200000c0
    5080:	20033e92 	.word	0x20033e92
    5084:	4808      	ldr	r0, [pc, #32]	; (50a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3dc>)
    5086:	b510      	push	{r4, lr}
    5088:	7800      	ldrb	r0, [r0, #0]
    508a:	2802      	cmp	r0, #2
    508c:	d004      	beq.n	5098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>
    508e:	f240 2101 	movw	r1, #513	; 0x201
    5092:	2027      	movs	r0, #39	; 0x27
    5094:	f7fe fd88 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5098:	4904      	ldr	r1, [pc, #16]	; (50ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>)
    509a:	2001      	movs	r0, #1
    509c:	71c8      	strb	r0, [r1, #7]
    509e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    50a2:	f7ff bfcb 	b.w	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    50a6:	0000      	.short	0x0000
    50a8:	200000c0 	.word	0x200000c0
    50ac:	20033e92 	.word	0x20033e92
    50b0:	b430      	push	{r4, r5}
    50b2:	4b0c      	ldr	r3, [pc, #48]	; (50e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    50b4:	b942      	cbnz	r2, 50c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    50b6:	79da      	ldrb	r2, [r3, #7]
    50b8:	2aff      	cmp	r2, #255	; 0xff
    50ba:	d105      	bne.n	50c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>
    50bc:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    50c0:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    50c4:	42a2      	cmp	r2, r4
    50c6:	d00b      	beq.n	50e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    50c8:	b131      	cbz	r1, 50d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    50ca:	79da      	ldrb	r2, [r3, #7]
    50cc:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
    50d0:	bc30      	pop	{r4, r5}
    50d2:	4610      	mov	r0, r2
    50d4:	f005 be2e 	b.w	ad34 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    50d8:	22ff      	movs	r2, #255	; 0xff
    50da:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    50de:	e7f7      	b.n	50d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    50e0:	bc30      	pop	{r4, r5}
    50e2:	4770      	bx	lr
    50e4:	200000c0 	.word	0x200000c0
    50e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    50ec:	4607      	mov	r7, r0
    50ee:	f7ff fe17 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    50f2:	4604      	mov	r4, r0
    50f4:	481d      	ldr	r0, [pc, #116]	; (516c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a0>)
    50f6:	2600      	movs	r6, #0
    50f8:	2501      	movs	r5, #1
    50fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
    50fc:	780a      	ldrb	r2, [r1, #0]
    50fe:	f002 0203 	and.w	r2, r2, #3
    5102:	2a01      	cmp	r2, #1
    5104:	d015      	beq.n	5132 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    5106:	2a02      	cmp	r2, #2
    5108:	d013      	beq.n	5132 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x466>
    510a:	2a03      	cmp	r2, #3
    510c:	d003      	beq.n	5116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44a>
    510e:	7941      	ldrb	r1, [r0, #5]
    5110:	f041 0104 	orr.w	r1, r1, #4
    5114:	e024      	b.n	5160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x494>
    5116:	7065      	strb	r5, [r4, #1]
    5118:	89c2      	ldrh	r2, [r0, #14]
    511a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    511e:	81c2      	strh	r2, [r0, #14]
    5120:	2001      	movs	r0, #1
    5122:	f7ff fdef 	bl	4d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5126:	e01d      	b.n	5164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5128:	7226      	strb	r6, [r4, #8]
    512a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    512e:	7225      	strb	r5, [r4, #8]
    5130:	e7fb      	b.n	512a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5132:	7849      	ldrb	r1, [r1, #1]
    5134:	b1b1      	cbz	r1, 5164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5136:	89c2      	ldrh	r2, [r0, #14]
    5138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    513c:	81c2      	strh	r2, [r0, #14]
    513e:	6a82      	ldr	r2, [r0, #40]	; 0x28
    5140:	2a00      	cmp	r2, #0
    5142:	d0f2      	beq.n	512a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5144:	29fb      	cmp	r1, #251	; 0xfb
    5146:	d808      	bhi.n	515a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48e>
    5148:	7980      	ldrb	r0, [r0, #6]
    514a:	b120      	cbz	r0, 5156 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48a>
    514c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5150:	2020      	movs	r0, #32
    5152:	f7ff bdeb 	b.w	4d2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5156:	703d      	strb	r5, [r7, #0]
    5158:	e7e7      	b.n	512a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    515a:	7941      	ldrb	r1, [r0, #5]
    515c:	f041 0110 	orr.w	r1, r1, #16
    5160:	7141      	strb	r1, [r0, #5]
    5162:	e7e2      	b.n	512a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45e>
    5164:	7a20      	ldrb	r0, [r4, #8]
    5166:	2801      	cmp	r0, #1
    5168:	d1e1      	bne.n	512e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x462>
    516a:	e7dd      	b.n	5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    516c:	200000c0 	.word	0x200000c0
    5170:	b570      	push	{r4, r5, r6, lr}
    5172:	f7ff fdd5 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5176:	4604      	mov	r4, r0
    5178:	7980      	ldrb	r0, [r0, #6]
    517a:	2800      	cmp	r0, #0
    517c:	d02e      	beq.n	51dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    517e:	2802      	cmp	r0, #2
    5180:	d10d      	bne.n	519e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d2>
    5182:	481c      	ldr	r0, [pc, #112]	; (51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x528>)
    5184:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5186:	f007 f872 	bl	c26e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    518a:	b340      	cbz	r0, 51de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x512>
    518c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5190:	1c40      	adds	r0, r0, #1
    5192:	f141 0100 	adc.w	r1, r1, #0
    5196:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    519a:	f004 fc61 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    519e:	2500      	movs	r5, #0
    51a0:	71a5      	strb	r5, [r4, #6]
    51a2:	78e0      	ldrb	r0, [r4, #3]
    51a4:	b120      	cbz	r0, 51b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    51a6:	70e5      	strb	r5, [r4, #3]
    51a8:	2100      	movs	r1, #0
    51aa:	2010      	movs	r0, #16
    51ac:	f7ff fdaa 	bl	4d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    51b0:	78a0      	ldrb	r0, [r4, #2]
    51b2:	b170      	cbz	r0, 51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    51b4:	70a5      	strb	r5, [r4, #2]
    51b6:	f7ff fb43 	bl	4840 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    51ba:	b198      	cbz	r0, 51e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>
    51bc:	2100      	movs	r1, #0
    51be:	2008      	movs	r0, #8
    51c0:	f7ff fda0 	bl	4d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    51c4:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    51c8:	1c40      	adds	r0, r0, #1
    51ca:	f141 0100 	adc.w	r1, r1, #0
    51ce:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    51d2:	79e0      	ldrb	r0, [r4, #7]
    51d4:	2801      	cmp	r0, #1
    51d6:	d00a      	beq.n	51ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x522>
    51d8:	2001      	movs	r0, #1
    51da:	71e0      	strb	r0, [r4, #7]
    51dc:	bd70      	pop	{r4, r5, r6, pc}
    51de:	f44f 7163 	mov.w	r1, #908	; 0x38c
    51e2:	e001      	b.n	51e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    51e4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
    51e8:	2027      	movs	r0, #39	; 0x27
    51ea:	f7fe fcdd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    51ee:	71e5      	strb	r5, [r4, #7]
    51f0:	bd70      	pop	{r4, r5, r6, pc}
    51f2:	0000      	.short	0x0000
    51f4:	200000c0 	.word	0x200000c0
    51f8:	4803      	ldr	r0, [pc, #12]	; (5208 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>)
    51fa:	7800      	ldrb	r0, [r0, #0]
    51fc:	2800      	cmp	r0, #0
    51fe:	d001      	beq.n	5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x538>
    5200:	f7ff bf1c 	b.w	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    5204:	4770      	bx	lr
    5206:	0000      	.short	0x0000
    5208:	200000c0 	.word	0x200000c0
    520c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5210:	4681      	mov	r9, r0
    5212:	f7ff fd7f 	bl	4d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5216:	4606      	mov	r6, r0
    5218:	f7ff fd82 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    521c:	4c1d      	ldr	r4, [pc, #116]	; (5294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c8>)
    521e:	4605      	mov	r5, r0
    5220:	464a      	mov	r2, r9
    5222:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5224:	6260      	str	r0, [r4, #36]	; 0x24
    5226:	2101      	movs	r1, #1
    5228:	4630      	mov	r0, r6
    522a:	f7ff ff41 	bl	50b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    522e:	7ce8      	ldrb	r0, [r5, #19]
    5230:	f04f 0800 	mov.w	r8, #0
    5234:	b1c0      	cbz	r0, 5268 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59c>
    5236:	7a67      	ldrb	r7, [r4, #9]
    5238:	4817      	ldr	r0, [pc, #92]	; (5298 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    523a:	f005 fc8b 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    523e:	4817      	ldr	r0, [pc, #92]	; (529c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5d0>)
    5240:	2101      	movs	r1, #1
    5242:	7601      	strb	r1, [r0, #24]
    5244:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5248:	e9c0 1204 	strd	r1, r2, [r0, #16]
    524c:	4a12      	ldr	r2, [pc, #72]	; (5298 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5cc>)
    524e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5250:	f005 f8bc 	bl	a3cc <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    5254:	f896 0063 	ldrb.w	r0, [r6, #99]	; 0x63
    5258:	f007 fb82 	bl	c960 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    525c:	4602      	mov	r2, r0
    525e:	4639      	mov	r1, r7
    5260:	2001      	movs	r0, #1
    5262:	f005 f8e1 	bl	a428 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5266:	e004      	b.n	5272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a6>
    5268:	6a60      	ldr	r0, [r4, #36]	; 0x24
    526a:	f005 fc73 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    526e:	f005 f8bd 	bl	a3ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5272:	f1b9 0f00 	cmp.w	r9, #0
    5276:	d102      	bne.n	527e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b2>
    5278:	4640      	mov	r0, r8
    527a:	f005 fb03 	bl	a884 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    527e:	2100      	movs	r1, #0
    5280:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    5284:	2201      	movs	r2, #1
    5286:	4608      	mov	r0, r1
    5288:	f005 fcee 	bl	ac68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    528c:	2002      	movs	r0, #2
    528e:	7020      	strb	r0, [r4, #0]
    5290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5294:	200000c0 	.word	0x200000c0
    5298:	20033d40 	.word	0x20033d40
    529c:	20033e48 	.word	0x20033e48
    52a0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    52a4:	4604      	mov	r4, r0
    52a6:	f7ff fd3b 	bl	4d20 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    52aa:	4605      	mov	r5, r0
    52ac:	f7ff fd32 	bl	4d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    52b0:	4606      	mov	r6, r0
    52b2:	f8df 9178 	ldr.w	r9, [pc, #376]	; 542c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    52b6:	4622      	mov	r2, r4
    52b8:	2100      	movs	r1, #0
    52ba:	f7ff fef9 	bl	50b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e4>
    52be:	79a8      	ldrb	r0, [r5, #6]
    52c0:	2701      	movs	r7, #1
    52c2:	f04f 0800 	mov.w	r8, #0
    52c6:	f1a9 0420 	sub.w	r4, r9, #32
    52ca:	b140      	cbz	r0, 52de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x612>
    52cc:	2801      	cmp	r0, #1
    52ce:	d01f      	beq.n	5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    52d0:	2802      	cmp	r0, #2
    52d2:	d030      	beq.n	5336 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x66a>
    52d4:	2803      	cmp	r0, #3
    52d6:	d03c      	beq.n	5352 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x686>
    52d8:	f240 219e 	movw	r1, #670	; 0x29e
    52dc:	e058      	b.n	5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    52de:	7a20      	ldrb	r0, [r4, #8]
    52e0:	2148      	movs	r1, #72	; 0x48
    52e2:	f8ad 0004 	strh.w	r0, [sp, #4]
    52e6:	5388      	strh	r0, [r1, r6]
    52e8:	4648      	mov	r0, r9
    52ea:	f7ff fad3 	bl	4894 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    52ee:	b128      	cbz	r0, 52fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>
    52f0:	2080      	movs	r0, #128	; 0x80
    52f2:	6a21      	ldr	r1, [r4, #32]
    52f4:	f7ff fd06 	bl	4d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52f8:	70af      	strb	r7, [r5, #2]
    52fa:	e02e      	b.n	535a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    52fc:	466a      	mov	r2, sp
    52fe:	a901      	add	r1, sp, #4
    5300:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5302:	f007 fb45 	bl	c990 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5306:	6220      	str	r0, [r4, #32]
    5308:	b110      	cbz	r0, 5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    530a:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    530e:	b111      	cbz	r1, 5316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x64a>
    5310:	4847      	ldr	r0, [pc, #284]	; (5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5312:	6220      	str	r0, [r4, #32]
    5314:	e021      	b.n	535a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5316:	f89d 1000 	ldrb.w	r1, [sp]
    531a:	b931      	cbnz	r1, 532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    531c:	f8a0 8000 	strh.w	r8, [r0]
    5320:	f880 8002 	strb.w	r8, [r0, #2]
    5324:	2101      	movs	r1, #1
    5326:	f007 fe92 	bl	d04e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    532a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    532e:	6a20      	ldr	r0, [r4, #32]
    5330:	f007 fe51 	bl	cfd6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5334:	e011      	b.n	535a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    5336:	f8b6 0048 	ldrh.w	r0, [r6, #72]	; 0x48
    533a:	f8ad 0004 	strh.w	r0, [sp, #4]
    533e:	466a      	mov	r2, sp
    5340:	a901      	add	r1, sp, #4
    5342:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5344:	f007 fb24 	bl	c990 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5348:	6220      	str	r0, [r4, #32]
    534a:	b930      	cbnz	r0, 535a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68e>
    534c:	f240 218f 	movw	r1, #655	; 0x28f
    5350:	e01e      	b.n	5390 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    5352:	4648      	mov	r0, r9
    5354:	f7ff fa9e 	bl	4894 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5358:	b1c0      	cbz	r0, 538c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c0>
    535a:	6a20      	ldr	r0, [r4, #32]
    535c:	2308      	movs	r3, #8
    535e:	7801      	ldrb	r1, [r0, #0]
    5360:	f021 0108 	bic.w	r1, r1, #8
    5364:	7001      	strb	r1, [r0, #0]
    5366:	79ea      	ldrb	r2, [r5, #7]
    5368:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    536c:	4311      	orrs	r1, r2
    536e:	f021 0104 	bic.w	r1, r1, #4
    5372:	7001      	strb	r1, [r0, #0]
    5374:	7a2a      	ldrb	r2, [r5, #8]
    5376:	2304      	movs	r3, #4
    5378:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    537c:	4311      	orrs	r1, r2
    537e:	f021 0110 	bic.w	r1, r1, #16
    5382:	7001      	strb	r1, [r0, #0]
    5384:	43c9      	mvns	r1, r1
    5386:	0789      	lsls	r1, r1, #30
    5388:	d005      	beq.n	5396 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ca>
    538a:	e007      	b.n	539c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    538c:	f44f 7126 	mov.w	r1, #664	; 0x298
    5390:	2027      	movs	r0, #39	; 0x27
    5392:	f7fe fc09 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5396:	78c0      	ldrb	r0, [r0, #3]
    5398:	2802      	cmp	r0, #2
    539a:	d00f      	beq.n	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    539c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    539e:	f007 f88b 	bl	c4b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    53a2:	b108      	cbz	r0, 53a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6dc>
    53a4:	2101      	movs	r1, #1
    53a6:	e00a      	b.n	53be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    53a8:	6a20      	ldr	r0, [r4, #32]
    53aa:	7800      	ldrb	r0, [r0, #0]
    53ac:	43c0      	mvns	r0, r0
    53ae:	0780      	lsls	r0, r0, #30
    53b0:	d004      	beq.n	53bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    53b2:	f7ff fa2d 	bl	4810 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    53b6:	f080 0101 	eor.w	r1, r0, #1
    53ba:	e000      	b.n	53be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f2>
    53bc:	2100      	movs	r1, #0
    53be:	6a20      	ldr	r0, [r4, #32]
    53c0:	7802      	ldrb	r2, [r0, #0]
    53c2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    53c6:	7001      	strb	r1, [r0, #0]
    53c8:	7ca9      	ldrb	r1, [r5, #18]
    53ca:	b1d1      	cbz	r1, 5402 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    53cc:	7841      	ldrb	r1, [r0, #1]
    53ce:	b1c1      	cbz	r1, 5402 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    53d0:	4818      	ldr	r0, [pc, #96]	; (5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    53d2:	f005 fbbf 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    53d6:	4816      	ldr	r0, [pc, #88]	; (5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    53d8:	3828      	subs	r0, #40	; 0x28
    53da:	f880 8018 	strb.w	r8, [r0, #24]
    53de:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    53e2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    53e6:	4913      	ldr	r1, [pc, #76]	; (5434 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    53e8:	6a22      	ldr	r2, [r4, #32]
    53ea:	f004 ffef 	bl	a3cc <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>
    53ee:	f896 0062 	ldrb.w	r0, [r6, #98]	; 0x62
    53f2:	f007 fab5 	bl	c960 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    53f6:	4602      	mov	r2, r0
    53f8:	21fb      	movs	r1, #251	; 0xfb
    53fa:	2000      	movs	r0, #0
    53fc:	f005 f814 	bl	a428 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>
    5400:	e003      	b.n	540a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73e>
    5402:	f005 fba7 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5406:	f004 fff1 	bl	a3ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    540a:	2201      	movs	r2, #1
    540c:	f896 3063 	ldrb.w	r3, [r6, #99]	; 0x63
    5410:	4611      	mov	r1, r2
    5412:	2000      	movs	r0, #0
    5414:	f005 fc28 	bl	ac68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5418:	7127      	strb	r7, [r4, #4]
    541a:	6a20      	ldr	r0, [r4, #32]
    541c:	8801      	ldrh	r1, [r0, #0]
    541e:	8221      	strh	r1, [r4, #16]
    5420:	7880      	ldrb	r0, [r0, #2]
    5422:	74a0      	strb	r0, [r4, #18]
    5424:	7027      	strb	r7, [r4, #0]
    5426:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    542a:	0000      	.short	0x0000
    542c:	200000e0 	.word	0x200000e0
    5430:	20033e70 	.word	0x20033e70
    5434:	20033d40 	.word	0x20033d40
    5438:	00005085 	.word	0x00005085
    543c:	00004e71 	.word	0x00004e71
    5440:	00004fb1 	.word	0x00004fb1
    5444:	000051f9 	.word	0x000051f9

00005448 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5448:	4800      	ldr	r0, [pc, #0]	; (544c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    544a:	4770      	bx	lr
    544c:	2003465b 	.word	0x2003465b

00005450 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    5450:	4904      	ldr	r1, [pc, #16]	; (5464 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    5452:	788a      	ldrb	r2, [r1, #2]
    5454:	4282      	cmp	r2, r0
    5456:	d903      	bls.n	5460 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5458:	4408      	add	r0, r1
    545a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    545e:	4770      	bx	lr
    5460:	2000      	movs	r0, #0
    5462:	4770      	bx	lr
    5464:	20034488 	.word	0x20034488

00005468 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5468:	4904      	ldr	r1, [pc, #16]	; (547c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    546a:	788a      	ldrb	r2, [r1, #2]
    546c:	4282      	cmp	r2, r0
    546e:	d903      	bls.n	5478 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5470:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    5474:	3083      	adds	r0, #131	; 0x83
    5476:	4770      	bx	lr
    5478:	2000      	movs	r0, #0
    547a:	4770      	bx	lr
    547c:	20034488 	.word	0x20034488

00005480 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5480:	4a05      	ldr	r2, [pc, #20]	; (5498 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    5482:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5486:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    548a:	6802      	ldr	r2, [r0, #0]
    548c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5490:	8880      	ldrh	r0, [r0, #4]
    5492:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    5496:	4770      	bx	lr
    5498:	20034488 	.word	0x20034488

0000549c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54a0:	460e      	mov	r6, r1
    54a2:	4607      	mov	r7, r0
    54a4:	4615      	mov	r5, r2
    54a6:	2106      	movs	r1, #6
    54a8:	4630      	mov	r0, r6
    54aa:	f007 fc5f 	bl	cd6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    54ae:	4c0d      	ldr	r4, [pc, #52]	; (54e4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    54b0:	b160      	cbz	r0, 54cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    54b2:	2000      	movs	r0, #0
    54b4:	e004      	b.n	54c0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    54b6:	1821      	adds	r1, r4, r0
    54b8:	1c40      	adds	r0, r0, #1
    54ba:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    54be:	b2c0      	uxtb	r0, r0
    54c0:	78a1      	ldrb	r1, [r4, #2]
    54c2:	4281      	cmp	r1, r0
    54c4:	d8f7      	bhi.n	54b6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    54c6:	2001      	movs	r0, #1
    54c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54cc:	4631      	mov	r1, r6
    54ce:	4638      	mov	r0, r7
    54d0:	f007 fa6d 	bl	c9ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    54d4:	2808      	cmp	r0, #8
    54d6:	d003      	beq.n	54e0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    54d8:	4420      	add	r0, r4
    54da:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    54de:	e7f2      	b.n	54c6 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    54e0:	2000      	movs	r0, #0
    54e2:	e7f1      	b.n	54c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    54e4:	20034488 	.word	0x20034488

000054e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    54e8:	4904      	ldr	r1, [pc, #16]	; (54fc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    54ea:	788a      	ldrb	r2, [r1, #2]
    54ec:	4282      	cmp	r2, r0
    54ee:	d903      	bls.n	54f8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    54f0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    54f4:	1cc0      	adds	r0, r0, #3
    54f6:	4770      	bx	lr
    54f8:	2000      	movs	r0, #0
    54fa:	4770      	bx	lr
    54fc:	20034488 	.word	0x20034488

00005500 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5500:	b510      	push	{r4, lr}
    5502:	f240 12d3 	movw	r2, #467	; 0x1d3
    5506:	2100      	movs	r1, #0
    5508:	4808      	ldr	r0, [pc, #32]	; (552c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    550a:	f006 f9dc 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    550e:	2208      	movs	r2, #8
    5510:	21ff      	movs	r1, #255	; 0xff
    5512:	4807      	ldr	r0, [pc, #28]	; (5530 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5514:	f006 f9d7 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5518:	4805      	ldr	r0, [pc, #20]	; (5530 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    551a:	2100      	movs	r1, #0
    551c:	1f00      	subs	r0, r0, #4
    551e:	7001      	strb	r1, [r0, #0]
    5520:	7041      	strb	r1, [r0, #1]
    5522:	f44f 7161 	mov.w	r1, #900	; 0x384
    5526:	8041      	strh	r1, [r0, #2]
    5528:	bd10      	pop	{r4, pc}
    552a:	0000      	.short	0x0000
    552c:	20034488 	.word	0x20034488
    5530:	20000290 	.word	0x20000290

00005534 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5534:	4901      	ldr	r1, [pc, #4]	; (553c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5536:	7008      	strb	r0, [r1, #0]
    5538:	4770      	bx	lr
    553a:	0000      	.short	0x0000
    553c:	2000028c 	.word	0x2000028c

00005540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5540:	4801      	ldr	r0, [pc, #4]	; (5548 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5542:	7800      	ldrb	r0, [r0, #0]
    5544:	4770      	bx	lr
    5546:	0000      	.short	0x0000
    5548:	2000028c 	.word	0x2000028c

0000554c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    554c:	4b0b      	ldr	r3, [pc, #44]	; (557c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    554e:	b510      	push	{r4, lr}
    5550:	789c      	ldrb	r4, [r3, #2]
    5552:	4284      	cmp	r4, r0
    5554:	d90f      	bls.n	5576 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5556:	4418      	add	r0, r3
    5558:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    555c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5560:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5564:	700b      	strb	r3, [r1, #0]
    5566:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    556a:	6011      	str	r1, [r2, #0]
    556c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5570:	8090      	strh	r0, [r2, #4]
    5572:	2001      	movs	r0, #1
    5574:	bd10      	pop	{r4, pc}
    5576:	2000      	movs	r0, #0
    5578:	bd10      	pop	{r4, pc}
    557a:	0000      	.short	0x0000
    557c:	20034488 	.word	0x20034488

00005580 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5580:	4907      	ldr	r1, [pc, #28]	; (55a0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5582:	788a      	ldrb	r2, [r1, #2]
    5584:	4282      	cmp	r2, r0
    5586:	d909      	bls.n	559c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5588:	4408      	add	r0, r1
    558a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    558e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    5592:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5596:	f000 0001 	and.w	r0, r0, #1
    559a:	4770      	bx	lr
    559c:	2000      	movs	r0, #0
    559e:	4770      	bx	lr
    55a0:	20034488 	.word	0x20034488

000055a4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    55a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    55a8:	4698      	mov	r8, r3
    55aa:	4691      	mov	r9, r2
    55ac:	460c      	mov	r4, r1
    55ae:	4605      	mov	r5, r0
    55b0:	f000 f938 	bl	5824 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    55b4:	4606      	mov	r6, r0
    55b6:	2810      	cmp	r0, #16
    55b8:	d006      	beq.n	55c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    55ba:	f000 f903 	bl	57c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    55be:	2810      	cmp	r0, #16
    55c0:	d002      	beq.n	55c8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    55c2:	2012      	movs	r0, #18
    55c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55c8:	4f18      	ldr	r7, [pc, #96]	; (562c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    55ca:	78b8      	ldrb	r0, [r7, #2]
    55cc:	2808      	cmp	r0, #8
    55ce:	d22a      	bcs.n	5626 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    55d0:	2e10      	cmp	r6, #16
    55d2:	d105      	bne.n	55e0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    55d4:	2200      	movs	r2, #0
    55d6:	4621      	mov	r1, r4
    55d8:	4628      	mov	r0, r5
    55da:	f000 f907 	bl	57ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    55de:	4606      	mov	r6, r0
    55e0:	78bc      	ldrb	r4, [r7, #2]
    55e2:	2210      	movs	r2, #16
    55e4:	1c60      	adds	r0, r4, #1
    55e6:	70b8      	strb	r0, [r7, #2]
    55e8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    55ec:	1ce8      	adds	r0, r5, #3
    55ee:	4649      	mov	r1, r9
    55f0:	f007 fb26 	bl	cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    55f4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    55f8:	2210      	movs	r2, #16
    55fa:	4641      	mov	r1, r8
    55fc:	f007 fb20 	bl	cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5600:	2110      	movs	r1, #16
    5602:	4640      	mov	r0, r8
    5604:	f007 fbb2 	bl	cd6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5608:	443c      	add	r4, r7
    560a:	2110      	movs	r1, #16
    560c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5610:	4648      	mov	r0, r9
    5612:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5616:	f007 fba9 	bl	cd6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    561a:	77e0      	strb	r0, [r4, #31]
    561c:	f804 6c29 	strb.w	r6, [r4, #-41]
    5620:	2000      	movs	r0, #0
    5622:	73e0      	strb	r0, [r4, #15]
    5624:	e7ce      	b.n	55c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5626:	2007      	movs	r0, #7
    5628:	e7cc      	b.n	55c4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    562a:	0000      	.short	0x0000
    562c:	20034488 	.word	0x20034488

00005630 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5630:	4806      	ldr	r0, [pc, #24]	; (564c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5632:	b510      	push	{r4, lr}
    5634:	7880      	ldrb	r0, [r0, #2]
    5636:	1e40      	subs	r0, r0, #1
    5638:	b244      	sxtb	r4, r0
    563a:	e004      	b.n	5646 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    563c:	b2e0      	uxtb	r0, r4
    563e:	f000 f939 	bl	58b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    5642:	1e64      	subs	r4, r4, #1
    5644:	b264      	sxtb	r4, r4
    5646:	2c00      	cmp	r4, #0
    5648:	daf8      	bge.n	563c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    564a:	bd10      	pop	{r4, pc}
    564c:	20034488 	.word	0x20034488

00005650 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5650:	4801      	ldr	r0, [pc, #4]	; (5658 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5652:	8840      	ldrh	r0, [r0, #2]
    5654:	4770      	bx	lr
    5656:	0000      	.short	0x0000
    5658:	2000028c 	.word	0x2000028c

0000565c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    565c:	b138      	cbz	r0, 566e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    565e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5662:	4288      	cmp	r0, r1
    5664:	d803      	bhi.n	566e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5666:	4903      	ldr	r1, [pc, #12]	; (5674 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5668:	8048      	strh	r0, [r1, #2]
    566a:	2001      	movs	r0, #1
    566c:	4770      	bx	lr
    566e:	2000      	movs	r0, #0
    5670:	4770      	bx	lr
    5672:	0000      	.short	0x0000
    5674:	2000028c 	.word	0x2000028c

00005678 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5678:	4905      	ldr	r1, [pc, #20]	; (5690 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    567a:	788a      	ldrb	r2, [r1, #2]
    567c:	4282      	cmp	r2, r0
    567e:	d903      	bls.n	5688 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5680:	4408      	add	r0, r1
    5682:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5686:	b108      	cbz	r0, 568c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5688:	2000      	movs	r0, #0
    568a:	4770      	bx	lr
    568c:	2001      	movs	r0, #1
    568e:	4770      	bx	lr
    5690:	20034488 	.word	0x20034488

00005694 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    5694:	b570      	push	{r4, r5, r6, lr}
    5696:	460d      	mov	r5, r1
    5698:	4606      	mov	r6, r0
    569a:	f000 f8c3 	bl	5824 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    569e:	4c10      	ldr	r4, [pc, #64]	; (56e0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    56a0:	2810      	cmp	r0, #16
    56a2:	d007      	beq.n	56b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    56a4:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    56a8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    56ac:	07c9      	lsls	r1, r1, #31
    56ae:	d001      	beq.n	56b4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    56b0:	2001      	movs	r0, #1
    56b2:	bd70      	pop	{r4, r5, r6, pc}
    56b4:	7861      	ldrb	r1, [r4, #1]
    56b6:	2908      	cmp	r1, #8
    56b8:	d210      	bcs.n	56dc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    56ba:	2810      	cmp	r0, #16
    56bc:	d008      	beq.n	56d0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    56be:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    56c2:	2101      	movs	r1, #1
    56c4:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    56c8:	7860      	ldrb	r0, [r4, #1]
    56ca:	1c40      	adds	r0, r0, #1
    56cc:	7060      	strb	r0, [r4, #1]
    56ce:	e7ef      	b.n	56b0 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    56d0:	2201      	movs	r2, #1
    56d2:	4629      	mov	r1, r5
    56d4:	4630      	mov	r0, r6
    56d6:	f000 f889 	bl	57ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xd0>
    56da:	e7f5      	b.n	56c8 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    56dc:	2000      	movs	r0, #0
    56de:	bd70      	pop	{r4, r5, r6, pc}
    56e0:	20034488 	.word	0x20034488

000056e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    56e4:	b570      	push	{r4, r5, r6, lr}
    56e6:	4d0b      	ldr	r5, [pc, #44]	; (5714 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    56e8:	7828      	ldrb	r0, [r5, #0]
    56ea:	1e40      	subs	r0, r0, #1
    56ec:	b244      	sxtb	r4, r0
    56ee:	e00a      	b.n	5706 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    56f0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    56f4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    56f8:	07c0      	lsls	r0, r0, #31
    56fa:	d002      	beq.n	5702 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    56fc:	b2e0      	uxtb	r0, r4
    56fe:	f000 f921 	bl	5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    5702:	1e64      	subs	r4, r4, #1
    5704:	b264      	sxtb	r4, r4
    5706:	2c00      	cmp	r4, #0
    5708:	daf2      	bge.n	56f0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    570a:	4903      	ldr	r1, [pc, #12]	; (5718 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    570c:	2000      	movs	r0, #0
    570e:	7048      	strb	r0, [r1, #1]
    5710:	bd70      	pop	{r4, r5, r6, pc}
    5712:	0000      	.short	0x0000
    5714:	20034488 	.word	0x20034488
    5718:	2000028c 	.word	0x2000028c

0000571c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5720:	2400      	movs	r4, #0
    5722:	4625      	mov	r5, r4
    5724:	4e18      	ldr	r6, [pc, #96]	; (5788 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5726:	e029      	b.n	577c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5728:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    572c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5730:	07c0      	lsls	r0, r0, #31
    5732:	d021      	beq.n	5778 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5734:	4628      	mov	r0, r5
    5736:	f000 f845 	bl	57c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    573a:	4603      	mov	r3, r0
    573c:	f7ff fed4 	bl	54e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5740:	4601      	mov	r1, r0
    5742:	2000      	movs	r0, #0
    5744:	2b10      	cmp	r3, #16
    5746:	d009      	beq.n	575c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5748:	18f2      	adds	r2, r6, r3
    574a:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    574e:	f1bc 0f01 	cmp.w	ip, #1
    5752:	d002      	beq.n	575a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5754:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5758:	b102      	cbz	r2, 575c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    575a:	2001      	movs	r0, #1
    575c:	1e40      	subs	r0, r0, #1
    575e:	4201      	tst	r1, r0
    5760:	d10a      	bne.n	5778 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5762:	480a      	ldr	r0, [pc, #40]	; (578c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5764:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5768:	5503      	strb	r3, [r0, r4]
    576a:	4620      	mov	r0, r4
    576c:	1c64      	adds	r4, r4, #1
    576e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5772:	b2e4      	uxtb	r4, r4
    5774:	f005 fbea 	bl	af4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5778:	1c6d      	adds	r5, r5, #1
    577a:	b2ed      	uxtb	r5, r5
    577c:	7830      	ldrb	r0, [r6, #0]
    577e:	42a8      	cmp	r0, r5
    5780:	d8d2      	bhi.n	5728 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5786:	0000      	.short	0x0000
    5788:	20034488 	.word	0x20034488
    578c:	20000290 	.word	0x20000290
    5790:	b570      	push	{r4, r5, r6, lr}
    5792:	4b0a      	ldr	r3, [pc, #40]	; (57bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5794:	781b      	ldrb	r3, [r3, #0]
    5796:	b173      	cbz	r3, 57b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    5798:	4b09      	ldr	r3, [pc, #36]	; (57c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    579a:	789c      	ldrb	r4, [r3, #2]
    579c:	b15c      	cbz	r4, 57b6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9a>
    579e:	1845      	adds	r5, r0, r1
    57a0:	4621      	mov	r1, r4
    57a2:	b10a      	cbz	r2, 57a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    57a4:	1cd8      	adds	r0, r3, #3
    57a6:	e001      	b.n	57ac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    57a8:	4805      	ldr	r0, [pc, #20]	; (57c0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>)
    57aa:	3083      	adds	r0, #131	; 0x83
    57ac:	462a      	mov	r2, r5
    57ae:	f004 fd2f 	bl	a210 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    57b2:	2001      	movs	r0, #1
    57b4:	bd70      	pop	{r4, r5, r6, pc}
    57b6:	2000      	movs	r0, #0
    57b8:	bd70      	pop	{r4, r5, r6, pc}
    57ba:	0000      	.short	0x0000
    57bc:	2000028c 	.word	0x2000028c
    57c0:	20034488 	.word	0x20034488
    57c4:	4908      	ldr	r1, [pc, #32]	; (57e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>)
    57c6:	b510      	push	{r4, lr}
    57c8:	4603      	mov	r3, r0
    57ca:	2000      	movs	r0, #0
    57cc:	788a      	ldrb	r2, [r1, #2]
    57ce:	e006      	b.n	57de <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc2>
    57d0:	180c      	adds	r4, r1, r0
    57d2:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    57d6:	429c      	cmp	r4, r3
    57d8:	d004      	beq.n	57e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>
    57da:	1c40      	adds	r0, r0, #1
    57dc:	b2c0      	uxtb	r0, r0
    57de:	4282      	cmp	r2, r0
    57e0:	d8f6      	bhi.n	57d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb4>
    57e2:	2010      	movs	r0, #16
    57e4:	bd10      	pop	{r4, pc}
    57e6:	0000      	.short	0x0000
    57e8:	20034488 	.word	0x20034488
    57ec:	b570      	push	{r4, r5, r6, lr}
    57ee:	4b0c      	ldr	r3, [pc, #48]	; (5820 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>)
    57f0:	4604      	mov	r4, r0
    57f2:	7818      	ldrb	r0, [r3, #0]
    57f4:	1c45      	adds	r5, r0, #1
    57f6:	701d      	strb	r5, [r3, #0]
    57f8:	2810      	cmp	r0, #16
    57fa:	d303      	bcc.n	5804 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe8>
    57fc:	2146      	movs	r1, #70	; 0x46
    57fe:	2028      	movs	r0, #40	; 0x28
    5800:	f7fe f9d2 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5804:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5808:	680d      	ldr	r5, [r1, #0]
    580a:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    580e:	8889      	ldrh	r1, [r1, #4]
    5810:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5814:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5818:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    581c:	bd70      	pop	{r4, r5, r6, pc}
    581e:	0000      	.short	0x0000
    5820:	20034488 	.word	0x20034488
    5824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5828:	460f      	mov	r7, r1
    582a:	4606      	mov	r6, r0
    582c:	2400      	movs	r4, #0
    582e:	4d0d      	ldr	r5, [pc, #52]	; (5864 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>)
    5830:	e00f      	b.n	5852 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x136>
    5832:	bf00      	nop
    5834:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5838:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    583c:	42b1      	cmp	r1, r6
    583e:	d106      	bne.n	584e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5840:	2206      	movs	r2, #6
    5842:	4639      	mov	r1, r7
    5844:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5848:	f005 ffb1 	bl	b7ae <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    584c:	b138      	cbz	r0, 585e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x142>
    584e:	1c64      	adds	r4, r4, #1
    5850:	b2e4      	uxtb	r4, r4
    5852:	7828      	ldrb	r0, [r5, #0]
    5854:	42a0      	cmp	r0, r4
    5856:	d8ed      	bhi.n	5834 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x118>
    5858:	2010      	movs	r0, #16
    585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    585e:	4620      	mov	r0, r4
    5860:	e7fb      	b.n	585a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5862:	0000      	.short	0x0000
    5864:	20034488 	.word	0x20034488
    5868:	b570      	push	{r4, r5, r6, lr}
    586a:	4605      	mov	r5, r0
    586c:	f7ff ffaa 	bl	57c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    5870:	2810      	cmp	r0, #16
    5872:	d11c      	bne.n	58ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5874:	4c0e      	ldr	r4, [pc, #56]	; (58b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>)
    5876:	7820      	ldrb	r0, [r4, #0]
    5878:	1e40      	subs	r0, r0, #1
    587a:	b2c0      	uxtb	r0, r0
    587c:	7020      	strb	r0, [r4, #0]
    587e:	42a8      	cmp	r0, r5
    5880:	d015      	beq.n	58ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    5882:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    588a:	f502 7080 	add.w	r0, r2, #256	; 0x100
    588e:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5892:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5896:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    589a:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    589e:	7820      	ldrb	r0, [r4, #0]
    58a0:	f7ff ff90 	bl	57c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    58a4:	2810      	cmp	r0, #16
    58a6:	d002      	beq.n	58ae <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x192>
    58a8:	4420      	add	r0, r4
    58aa:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    58ae:	bd70      	pop	{r4, r5, r6, pc}
    58b0:	20034488 	.word	0x20034488
    58b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58b8:	4c21      	ldr	r4, [pc, #132]	; (5940 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>)
    58ba:	4606      	mov	r6, r0
    58bc:	19a7      	adds	r7, r4, r6
    58be:	78a0      	ldrb	r0, [r4, #2]
    58c0:	1e40      	subs	r0, r0, #1
    58c2:	b2c5      	uxtb	r5, r0
    58c4:	70a5      	strb	r5, [r4, #2]
    58c6:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    58ca:	42ae      	cmp	r6, r5
    58cc:	d02a      	beq.n	5924 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x208>
    58ce:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    58d2:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    58d6:	f10a 0103 	add.w	r1, sl, #3
    58da:	f109 0003 	add.w	r0, r9, #3
    58de:	2210      	movs	r2, #16
    58e0:	f005 ff77 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    58e4:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    58e8:	f109 0083 	add.w	r0, r9, #131	; 0x83
    58ec:	2210      	movs	r2, #16
    58ee:	f005 ff70 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    58f2:	1960      	adds	r0, r4, r5
    58f4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    58f8:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    58fc:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5900:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5904:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5908:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    590c:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5910:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5914:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5918:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    591c:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5920:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5924:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5928:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    592c:	07c0      	lsls	r0, r0, #31
    592e:	d104      	bne.n	593a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21e>
    5930:	4640      	mov	r0, r8
    5932:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5936:	f7ff bf97 	b.w	5868 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    593e:	0000      	.short	0x0000
    5940:	20034488 	.word	0x20034488
    5944:	4905      	ldr	r1, [pc, #20]	; (595c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x240>)
    5946:	784a      	ldrb	r2, [r1, #1]
    5948:	1e52      	subs	r2, r2, #1
    594a:	704a      	strb	r2, [r1, #1]
    594c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5950:	2200      	movs	r2, #0
    5952:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5956:	f7ff bf87 	b.w	5868 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x14c>
    595a:	0000      	.short	0x0000
    595c:	20034488 	.word	0x20034488

00005960 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>:
    5960:	b5f0      	push	{r4, r5, r6, r7, lr}
    5962:	f06f 021f 	mvn.w	r2, #31
    5966:	0c01      	lsrs	r1, r0, #16
    5968:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    596c:	251f      	movs	r5, #31
    596e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    5972:	3854      	subs	r0, #84	; 0x54
    5974:	d00d      	beq.n	5992 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5976:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    597a:	3855      	subs	r0, #85	; 0x55
    597c:	d009      	beq.n	5992 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    597e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    5982:	38aa      	subs	r0, #170	; 0xaa
    5984:	d005      	beq.n	5992 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    5986:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    598a:	38aa      	subs	r0, #170	; 0xaa
    598c:	d001      	beq.n	5992 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x32>
    598e:	2001      	movs	r0, #1
    5990:	e000      	b.n	5994 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x34>
    5992:	2000      	movs	r0, #0
    5994:	2200      	movs	r2, #0
    5996:	4613      	mov	r3, r2
    5998:	ea4f 0402 	mov.w	r4, r2
    599c:	ea82 0701 	eor.w	r7, r2, r1
    59a0:	43ff      	mvns	r7, r7
    59a2:	431f      	orrs	r7, r3
    59a4:	1c7f      	adds	r7, r7, #1
    59a6:	d00f      	beq.n	59c8 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x68>
    59a8:	f006 0701 	and.w	r7, r6, #1
    59ac:	0852      	lsrs	r2, r2, #1
    59ae:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    59b2:	f005 0701 	and.w	r7, r5, #1
    59b6:	085b      	lsrs	r3, r3, #1
    59b8:	0876      	lsrs	r6, r6, #1
    59ba:	086d      	lsrs	r5, r5, #1
    59bc:	1c64      	adds	r4, r4, #1
    59be:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    59c2:	2c16      	cmp	r4, #22
    59c4:	d3ea      	bcc.n	599c <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ+0x3c>
    59c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59c8:	2000      	movs	r0, #0
    59ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000059cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    59cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59d0:	4604      	mov	r4, r0
    59d2:	f100 0568 	add.w	r5, r0, #104	; 0x68
    59d6:	f04f 0901 	mov.w	r9, #1
    59da:	b171      	cbz	r1, 59fa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    59dc:	f104 077e 	add.w	r7, r4, #126	; 0x7e
    59e0:	1e7e      	subs	r6, r7, #1
    59e2:	2901      	cmp	r1, #1
    59e4:	d021      	beq.n	5a2a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    59e6:	2902      	cmp	r1, #2
    59e8:	d046      	beq.n	5a78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    59ea:	2903      	cmp	r1, #3
    59ec:	d11b      	bne.n	5a26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    59ee:	4639      	mov	r1, r7
    59f0:	4630      	mov	r0, r6
    59f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59f6:	f007 ba40 	b.w	ce7a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    59fa:	f44f 7204 	mov.w	r2, #528	; 0x210
    59fe:	2100      	movs	r1, #0
    5a00:	f005 ff61 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5a04:	f004 fbf4 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5a08:	f644 112b 	movw	r1, #18731	; 0x492b
    5a0c:	4008      	ands	r0, r1
    5a0e:	f885 9015 	strb.w	r9, [r5, #21]
    5a12:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5a16:	0a00      	lsrs	r0, r0, #8
    5a18:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5a1c:	20fe      	movs	r0, #254	; 0xfe
    5a1e:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5a22:	207f      	movs	r0, #127	; 0x7f
    5a24:	7268      	strb	r0, [r5, #9]
    5a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a2a:	f04f 0800 	mov.w	r8, #0
    5a2e:	f8a4 8106 	strh.w	r8, [r4, #262]	; 0x106
    5a32:	f884 80fb 	strb.w	r8, [r4, #251]	; 0xfb
    5a36:	6861      	ldr	r1, [r4, #4]
    5a38:	4814      	ldr	r0, [pc, #80]	; (5a8c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5a3a:	460a      	mov	r2, r1
    5a3c:	4408      	add	r0, r1
    5a3e:	fbb0 f0f1 	udiv	r0, r0, r1
    5a42:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    5a46:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5a4a:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    5a4e:	8963      	ldrh	r3, [r4, #10]
    5a50:	4628      	mov	r0, r5
    5a52:	f000 f81d 	bl	5a90 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5a56:	4639      	mov	r1, r7
    5a58:	4630      	mov	r0, r6
    5a5a:	f007 fa0e 	bl	ce7a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5a5e:	f005 fe82 	bl	b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5a62:	b118      	cbz	r0, 5a6c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5a64:	68e0      	ldr	r0, [r4, #12]
    5a66:	f7ff ff7b 	bl	5960 <sym_33EXASPJCVGTQTCQK5EBKSNPDNE4NBE7D7W6NSQ>
    5a6a:	b110      	cbz	r0, 5a72 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5a6c:	f884 816c 	strb.w	r8, [r4, #364]	; 0x16c
    5a70:	e7d9      	b.n	5a26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5a72:	f884 916c 	strb.w	r9, [r4, #364]	; 0x16c
    5a76:	e7d6      	b.n	5a26 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5a78:	6841      	ldr	r1, [r0, #4]
    5a7a:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
    5a7e:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    5a82:	4628      	mov	r0, r5
    5a84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a88:	f000 b802 	b.w	5a90 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5a8c:	01c9c37f 	.word	0x01c9c37f
    5a90:	b530      	push	{r4, r5, lr}
    5a92:	2400      	movs	r4, #0
    5a94:	8684      	strh	r4, [r0, #52]	; 0x34
    5a96:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5a98:	4d13      	ldr	r5, [pc, #76]	; (5ae8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5a9a:	434c      	muls	r4, r1
    5a9c:	fbb4 f4f2 	udiv	r4, r4, r2
    5aa0:	8704      	strh	r4, [r0, #56]	; 0x38
    5aa2:	f242 7410 	movw	r4, #10000	; 0x2710
    5aa6:	4363      	muls	r3, r4
    5aa8:	fbb3 f3f2 	udiv	r3, r3, r2
    5aac:	1c5b      	adds	r3, r3, #1
    5aae:	b29b      	uxth	r3, r3
    5ab0:	fb03 f402 	mul.w	r4, r3, r2
    5ab4:	86c3      	strh	r3, [r0, #54]	; 0x36
    5ab6:	42ac      	cmp	r4, r5
    5ab8:	d901      	bls.n	5abe <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5aba:	1e5b      	subs	r3, r3, #1
    5abc:	86c3      	strh	r3, [r0, #54]	; 0x36
    5abe:	4b0b      	ldr	r3, [pc, #44]	; (5aec <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5ac0:	f240 2471 	movw	r4, #625	; 0x271
    5ac4:	fbb3 f3f2 	udiv	r3, r3, r2
    5ac8:	1c5b      	adds	r3, r3, #1
    5aca:	8783      	strh	r3, [r0, #60]	; 0x3c
    5acc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5ace:	4363      	muls	r3, r4
    5ad0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5ad4:	1e5b      	subs	r3, r3, #1
    5ad6:	fbb3 f3f2 	udiv	r3, r3, r2
    5ada:	62c3      	str	r3, [r0, #44]	; 0x2c
    5adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5ade:	434b      	muls	r3, r1
    5ae0:	fbb3 f1f2 	udiv	r1, r3, r2
    5ae4:	6281      	str	r1, [r0, #40]	; 0x28
    5ae6:	bd30      	pop	{r4, r5, pc}
    5ae8:	01e84800 	.word	0x01e84800
    5aec:	02625a00 	.word	0x02625a00
    5af0:	b570      	push	{r4, r5, r6, lr}
    5af2:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5af6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5afa:	2401      	movs	r4, #1
    5afc:	fb03 2101 	mla	r1, r3, r1, r2
    5b00:	2225      	movs	r2, #37	; 0x25
    5b02:	fbb1 f3f2 	udiv	r3, r1, r2
    5b06:	fb02 1113 	mls	r1, r2, r3, r1
    5b0a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5b0e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5b12:	f001 0307 	and.w	r3, r1, #7
    5b16:	7d92      	ldrb	r2, [r2, #22]
    5b18:	fa04 f303 	lsl.w	r3, r4, r3
    5b1c:	421a      	tst	r2, r3
    5b1e:	d003      	beq.n	5b28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x15c>
    5b20:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5b24:	2000      	movs	r0, #0
    5b26:	bd70      	pop	{r4, r5, r6, pc}
    5b28:	f890 2020 	ldrb.w	r2, [r0, #32]
    5b2c:	fbb1 f3f2 	udiv	r3, r1, r2
    5b30:	fb02 1113 	mls	r1, r2, r3, r1
    5b34:	1c49      	adds	r1, r1, #1
    5b36:	b2c9      	uxtb	r1, r1
    5b38:	2300      	movs	r3, #0
    5b3a:	18c5      	adds	r5, r0, r3
    5b3c:	7eea      	ldrb	r2, [r5, #27]
    5b3e:	428a      	cmp	r2, r1
    5b40:	d311      	bcc.n	5b66 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19a>
    5b42:	f895 5016 	ldrb.w	r5, [r5, #22]
    5b46:	2200      	movs	r2, #0
    5b48:	fa04 f602 	lsl.w	r6, r4, r2
    5b4c:	4235      	tst	r5, r6
    5b4e:	d001      	beq.n	5b54 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x188>
    5b50:	1e49      	subs	r1, r1, #1
    5b52:	b2c9      	uxtb	r1, r1
    5b54:	b121      	cbz	r1, 5b60 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x194>
    5b56:	1c52      	adds	r2, r2, #1
    5b58:	b2d2      	uxtb	r2, r2
    5b5a:	2a08      	cmp	r2, #8
    5b5c:	d3f4      	bcc.n	5b48 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x17c>
    5b5e:	e004      	b.n	5b6a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x19e>
    5b60:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5b64:	e7dc      	b.n	5b20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x154>
    5b66:	1a89      	subs	r1, r1, r2
    5b68:	b2c9      	uxtb	r1, r1
    5b6a:	1c5b      	adds	r3, r3, #1
    5b6c:	b2db      	uxtb	r3, r3
    5b6e:	2b05      	cmp	r3, #5
    5b70:	d3e3      	bcc.n	5b3a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x16e>
    5b72:	201f      	movs	r0, #31
    5b74:	bd70      	pop	{r4, r5, r6, pc}
	...

00005b78 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5b78:	7841      	ldrb	r1, [r0, #1]
    5b7a:	b141      	cbz	r1, 5b8e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5b7c:	78c0      	ldrb	r0, [r0, #3]
    5b7e:	2819      	cmp	r0, #25
    5b80:	d203      	bcs.n	5b8a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5b82:	4a04      	ldr	r2, [pc, #16]	; (5b94 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5b84:	5c10      	ldrb	r0, [r2, r0]
    5b86:	4288      	cmp	r0, r1
    5b88:	d101      	bne.n	5b8e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5b8a:	2001      	movs	r0, #1
    5b8c:	4770      	bx	lr
    5b8e:	2000      	movs	r0, #0
    5b90:	4770      	bx	lr
    5b92:	0000      	.short	0x0000
    5b94:	0000f220 	.word	0x0000f220

00005b98 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5b98:	b50c      	push	{r2, r3, lr}
    5b9a:	a20b      	add	r2, pc, #44	; (adr r2, 5bc8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5b9c:	e9d2 1200 	ldrd	r1, r2, [r2]
    5ba0:	e9cd 1200 	strd	r1, r2, [sp]
    5ba4:	7901      	ldrb	r1, [r0, #4]
    5ba6:	7940      	ldrb	r0, [r0, #5]
    5ba8:	f001 0207 	and.w	r2, r1, #7
    5bac:	4669      	mov	r1, sp
    5bae:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5bb2:	2a01      	cmp	r2, #1
    5bb4:	d804      	bhi.n	5bc0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5bb6:	f000 0007 	and.w	r0, r0, #7
    5bba:	5c08      	ldrb	r0, [r1, r0]
    5bbc:	2801      	cmp	r0, #1
    5bbe:	d901      	bls.n	5bc4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5bc0:	2000      	movs	r0, #0
    5bc2:	bd0c      	pop	{r2, r3, pc}
    5bc4:	2001      	movs	r0, #1
    5bc6:	bd0c      	pop	{r2, r3, pc}
    5bc8:	02010100 	.word	0x02010100
    5bcc:	03020201 	.word	0x03020201

00005bd0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5bd0:	b510      	push	{r4, lr}
    5bd2:	2201      	movs	r2, #1
    5bd4:	70c1      	strb	r1, [r0, #3]
    5bd6:	2919      	cmp	r1, #25
    5bd8:	d202      	bcs.n	5be0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5bda:	4a06      	ldr	r2, [pc, #24]	; (5bf4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5bdc:	5c52      	ldrb	r2, [r2, r1]
    5bde:	e006      	b.n	5bee <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5be0:	29ff      	cmp	r1, #255	; 0xff
    5be2:	d004      	beq.n	5bee <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5be4:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    5be8:	202a      	movs	r0, #42	; 0x2a
    5bea:	f7fd ffdd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bee:	7042      	strb	r2, [r0, #1]
    5bf0:	bd10      	pop	{r4, pc}
    5bf2:	0000      	.short	0x0000
    5bf4:	0000f220 	.word	0x0000f220

00005bf8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bfc:	ea5f 0900 	movs.w	r9, r0
    5c00:	d006      	beq.n	5c10 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5c02:	4d21      	ldr	r5, [pc, #132]	; (5c88 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5c04:	f105 0010 	add.w	r0, r5, #16
    5c08:	7b69      	ldrb	r1, [r5, #13]
    5c0a:	4682      	mov	sl, r0
    5c0c:	b119      	cbz	r1, 5c16 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5c0e:	e00b      	b.n	5c28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5c10:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    5c14:	e005      	b.n	5c22 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5c16:	2100      	movs	r1, #0
    5c18:	f007 fb18 	bl	d24c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5c1c:	b120      	cbz	r0, 5c28 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5c1e:	f240 31d3 	movw	r1, #979	; 0x3d3
    5c22:	202b      	movs	r0, #43	; 0x2b
    5c24:	f7fd ffc0 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c28:	8a2e      	ldrh	r6, [r5, #16]
    5c2a:	2000      	movs	r0, #0
    5c2c:	f7fe f9c2 	bl	3fb4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5c30:	4f16      	ldr	r7, [pc, #88]	; (5c8c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5c32:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5c90 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5c36:	4604      	mov	r4, r0
    5c38:	6838      	ldr	r0, [r7, #0]
    5c3a:	b158      	cbz	r0, 5c54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5c3c:	8a28      	ldrh	r0, [r5, #16]
    5c3e:	42a0      	cmp	r0, r4
    5c40:	d308      	bcc.n	5c54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5c42:	1b00      	subs	r0, r0, r4
    5c44:	b2c0      	uxtb	r0, r0
    5c46:	2101      	movs	r1, #1
    5c48:	f006 fdbb 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5c4c:	b148      	cbz	r0, 5c62 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5c4e:	4649      	mov	r1, r9
    5c50:	683a      	ldr	r2, [r7, #0]
    5c52:	e004      	b.n	5c5e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5c54:	f8d8 2000 	ldr.w	r2, [r8]
    5c58:	b11a      	cbz	r2, 5c62 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5c5a:	8a28      	ldrh	r0, [r5, #16]
    5c5c:	4649      	mov	r1, r9
    5c5e:	4790      	blx	r2
    5c60:	b968      	cbnz	r0, 5c7e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5c62:	2100      	movs	r1, #0
    5c64:	4650      	mov	r0, sl
    5c66:	f007 faf1 	bl	d24c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5c6a:	b910      	cbnz	r0, 5c72 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5c6c:	8a28      	ldrh	r0, [r5, #16]
    5c6e:	42b0      	cmp	r0, r6
    5c70:	d1e2      	bne.n	5c38 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5c72:	4808      	ldr	r0, [pc, #32]	; (5c94 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5c74:	6801      	ldr	r1, [r0, #0]
    5c76:	b129      	cbz	r1, 5c84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5c78:	4648      	mov	r0, r9
    5c7a:	4788      	blx	r1
    5c7c:	b110      	cbz	r0, 5c84 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5c7e:	2001      	movs	r0, #1
    5c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c84:	2000      	movs	r0, #0
    5c86:	e7fb      	b.n	5c80 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5c88:	200342a0 	.word	0x200342a0
    5c8c:	2000023c 	.word	0x2000023c
    5c90:	20000240 	.word	0x20000240
    5c94:	20000248 	.word	0x20000248

00005c98 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5c98:	b570      	push	{r4, r5, r6, lr}
    5c9a:	0005      	movs	r5, r0
    5c9c:	460c      	mov	r4, r1
    5c9e:	d02e      	beq.n	5cfe <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5ca0:	4818      	ldr	r0, [pc, #96]	; (5d04 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5ca2:	6802      	ldr	r2, [r0, #0]
    5ca4:	b35a      	cbz	r2, 5cfe <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5ca6:	4628      	mov	r0, r5
    5ca8:	4790      	blx	r2
    5caa:	b340      	cbz	r0, 5cfe <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5cac:	7820      	ldrb	r0, [r4, #0]
    5cae:	2811      	cmp	r0, #17
    5cb0:	d002      	beq.n	5cb8 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5cb2:	2814      	cmp	r0, #20
    5cb4:	d003      	beq.n	5cbe <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5cb6:	e020      	b.n	5cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cb8:	7920      	ldrb	r0, [r4, #4]
    5cba:	b1f0      	cbz	r0, 5cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cbc:	e00a      	b.n	5cd4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5cbe:	7920      	ldrb	r0, [r4, #4]
    5cc0:	b120      	cbz	r0, 5ccc <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5cc2:	4628      	mov	r0, r5
    5cc4:	f007 fcba 	bl	d63c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5cc8:	b120      	cbz	r0, 5cd4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5cca:	e016      	b.n	5cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ccc:	490e      	ldr	r1, [pc, #56]	; (5d08 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5cce:	2000      	movs	r0, #0
    5cd0:	7348      	strb	r0, [r1, #13]
    5cd2:	e012      	b.n	5cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cd4:	88e4      	ldrh	r4, [r4, #6]
    5cd6:	2100      	movs	r1, #0
    5cd8:	4620      	mov	r0, r4
    5cda:	f006 fd72 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5cde:	b160      	cbz	r0, 5cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ce0:	8800      	ldrh	r0, [r0, #0]
    5ce2:	f006 fde7 	bl	c8b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5ce6:	2100      	movs	r1, #0
    5ce8:	4620      	mov	r0, r4
    5cea:	f7fe f9ff 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5cee:	b120      	cbz	r0, 5cfa <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5cf0:	f44f 719a 	mov.w	r1, #308	; 0x134
    5cf4:	202b      	movs	r0, #43	; 0x2b
    5cf6:	f7fd ff57 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cfa:	2001      	movs	r0, #1
    5cfc:	bd70      	pop	{r4, r5, r6, pc}
    5cfe:	2000      	movs	r0, #0
    5d00:	bd70      	pop	{r4, r5, r6, pc}
    5d02:	0000      	.short	0x0000
    5d04:	20000238 	.word	0x20000238
    5d08:	200342a0 	.word	0x200342a0

00005d0c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5d0c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d10:	b087      	sub	sp, #28
    5d12:	460c      	mov	r4, r1
    5d14:	a902      	add	r1, sp, #8
    5d16:	9807      	ldr	r0, [sp, #28]
    5d18:	f006 fe8c 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5d1c:	2800      	cmp	r0, #0
    5d1e:	d17d      	bne.n	5e1c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5d20:	f8df 9120 	ldr.w	r9, [pc, #288]	; 5e44 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5d24:	f04f 0a01 	mov.w	sl, #1
    5d28:	4680      	mov	r8, r0
    5d2a:	9803      	ldr	r0, [sp, #12]
    5d2c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    5d30:	2800      	cmp	r0, #0
    5d32:	d00c      	beq.n	5d4e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5d34:	f8d9 2000 	ldr.w	r2, [r9]
    5d38:	b162      	cbz	r2, 5d54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5d3a:	4621      	mov	r1, r4
    5d3c:	9807      	ldr	r0, [sp, #28]
    5d3e:	4790      	blx	r2
    5d40:	b140      	cbz	r0, 5d54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5d42:	4620      	mov	r0, r4
    5d44:	f000 f91a 	bl	5f7c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5d48:	2800      	cmp	r0, #0
    5d4a:	d1ee      	bne.n	5d2a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5d4c:	2001      	movs	r0, #1
    5d4e:	b009      	add	sp, #36	; 0x24
    5d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5d54:	9d03      	ldr	r5, [sp, #12]
    5d56:	f895 012c 	ldrb.w	r0, [r5, #300]	; 0x12c
    5d5a:	3568      	adds	r5, #104	; 0x68
    5d5c:	b950      	cbnz	r0, 5d74 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5d5e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5d62:	f88d 0004 	strb.w	r0, [sp, #4]
    5d66:	9801      	ldr	r0, [sp, #4]
    5d68:	9001      	str	r0, [sp, #4]
    5d6a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5d6e:	b108      	cbz	r0, 5d74 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5d70:	2001      	movs	r0, #1
    5d72:	e000      	b.n	5d76 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5d74:	2000      	movs	r0, #0
    5d76:	4683      	mov	fp, r0
    5d78:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    5d7c:	b1c0      	cbz	r0, 5db0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5d7e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    5d82:	0780      	lsls	r0, r0, #30
    5d84:	d514      	bpl.n	5db0 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5d86:	f884 8001 	strb.w	r8, [r4, #1]
    5d8a:	f884 a000 	strb.w	sl, [r4]
    5d8e:	f884 8004 	strb.w	r8, [r4, #4]
    5d92:	9907      	ldr	r1, [sp, #28]
    5d94:	f8a4 1005 	strh.w	r1, [r4, #5]
    5d98:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    5d9c:	71e1      	strb	r1, [r4, #7]
    5d9e:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    5da2:	8121      	strh	r1, [r4, #8]
    5da4:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5da8:	8161      	strh	r1, [r4, #10]
    5daa:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    5dae:	e7c8      	b.n	5d42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5db0:	9807      	ldr	r0, [sp, #28]
    5db2:	f7fe fb43 	bl	443c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5db6:	0007      	movs	r7, r0
    5db8:	d00d      	beq.n	5dd6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5dba:	f006 fb10 	bl	c3de <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5dbe:	0006      	movs	r6, r0
    5dc0:	d015      	beq.n	5dee <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5dc2:	f884 8001 	strb.w	r8, [r4, #1]
    5dc6:	200d      	movs	r0, #13
    5dc8:	7020      	strb	r0, [r4, #0]
    5dca:	9807      	ldr	r0, [sp, #28]
    5dcc:	80e0      	strh	r0, [r4, #6]
    5dce:	8126      	strh	r6, [r4, #8]
    5dd0:	f884 a004 	strb.w	sl, [r4, #4]
    5dd4:	e007      	b.n	5de6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5dd6:	f240 213a 	movw	r1, #570	; 0x23a
    5dda:	e02d      	b.n	5e38 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5ddc:	2100      	movs	r1, #0
    5dde:	4638      	mov	r0, r7
    5de0:	460a      	mov	r2, r1
    5de2:	f006 fc0a 	bl	c5fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5de6:	1e76      	subs	r6, r6, #1
    5de8:	b2b6      	uxth	r6, r6
    5dea:	d2f7      	bcs.n	5ddc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5dec:	e7a9      	b.n	5d42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5dee:	9807      	ldr	r0, [sp, #28]
    5df0:	f7fe fb0e 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5df4:	b1f0      	cbz	r0, 5e34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5df6:	f1bb 0f00 	cmp.w	fp, #0
    5dfa:	d020      	beq.n	5e3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5dfc:	f006 fa27 	bl	c24e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5e00:	b160      	cbz	r0, 5e1c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5e02:	9807      	ldr	r0, [sp, #28]
    5e04:	f006 fd56 	bl	c8b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5e08:	2100      	movs	r1, #0
    5e0a:	9807      	ldr	r0, [sp, #28]
    5e0c:	f7fe f96e 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5e10:	f884 8001 	strb.w	r8, [r4, #1]
    5e14:	210a      	movs	r1, #10
    5e16:	4640      	mov	r0, r8
    5e18:	7021      	strb	r1, [r4, #0]
    5e1a:	e000      	b.n	5e1e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5e1c:	e00f      	b.n	5e3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5e1e:	f884 8004 	strb.w	r8, [r4, #4]
    5e22:	9907      	ldr	r1, [sp, #28]
    5e24:	f8a4 1005 	strh.w	r1, [r4, #5]
    5e28:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    5e2c:	71e1      	strb	r1, [r4, #7]
    5e2e:	3524      	adds	r5, #36	; 0x24
    5e30:	7028      	strb	r0, [r5, #0]
    5e32:	e786      	b.n	5d42 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5e34:	f44f 7116 	mov.w	r1, #600	; 0x258
    5e38:	202b      	movs	r0, #43	; 0x2b
    5e3a:	f7fd feb5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e3e:	2000      	movs	r0, #0
    5e40:	e785      	b.n	5d4e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5e42:	0000      	.short	0x0000
    5e44:	20000244 	.word	0x20000244

00005e48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e4c:	4c12      	ldr	r4, [pc, #72]	; (5e98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e4e:	4607      	mov	r7, r0
    5e50:	460e      	mov	r6, r1
    5e52:	7de0      	ldrb	r0, [r4, #23]
    5e54:	b110      	cbz	r0, 5e5c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5e56:	8b20      	ldrh	r0, [r4, #24]
    5e58:	2800      	cmp	r0, #0
    5e5a:	d012      	beq.n	5e82 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e5c:	480e      	ldr	r0, [pc, #56]	; (5e98 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5e5e:	300e      	adds	r0, #14
    5e60:	4680      	mov	r8, r0
    5e62:	f007 f99d 	bl	d1a0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e66:	b9a8      	cbnz	r0, 5e94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e68:	89e5      	ldrh	r5, [r4, #14]
    5e6a:	89e0      	ldrh	r0, [r4, #14]
    5e6c:	4632      	mov	r2, r6
    5e6e:	4639      	mov	r1, r7
    5e70:	f007 f9a5 	bl	d1be <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    5e74:	b138      	cbz	r0, 5e86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5e76:	7de0      	ldrb	r0, [r4, #23]
    5e78:	b110      	cbz	r0, 5e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5e7a:	8b20      	ldrh	r0, [r4, #24]
    5e7c:	1e40      	subs	r0, r0, #1
    5e7e:	8320      	strh	r0, [r4, #24]
    5e80:	2001      	movs	r0, #1
    5e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e86:	4640      	mov	r0, r8
    5e88:	f007 f98a 	bl	d1a0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5e8c:	b910      	cbnz	r0, 5e94 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5e8e:	89e0      	ldrh	r0, [r4, #14]
    5e90:	42a8      	cmp	r0, r5
    5e92:	d1ea      	bne.n	5e6a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5e94:	2000      	movs	r0, #0
    5e96:	e7f4      	b.n	5e82 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5e98:	200342a0 	.word	0x200342a0

00005e9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    5e9c:	b510      	push	{r4, lr}
    5e9e:	7901      	ldrb	r1, [r0, #4]
    5ea0:	b119      	cbz	r1, 5eaa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    5ea2:	2901      	cmp	r1, #1
    5ea4:	d006      	beq.n	5eb4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    5ea6:	2000      	movs	r0, #0
    5ea8:	bd10      	pop	{r4, pc}
    5eaa:	8842      	ldrh	r2, [r0, #2]
    5eac:	6883      	ldr	r3, [r0, #8]
    5eae:	8800      	ldrh	r0, [r0, #0]
    5eb0:	2102      	movs	r1, #2
    5eb2:	e003      	b.n	5ebc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    5eb4:	8842      	ldrh	r2, [r0, #2]
    5eb6:	6883      	ldr	r3, [r0, #8]
    5eb8:	8800      	ldrh	r0, [r0, #0]
    5eba:	2101      	movs	r1, #1
    5ebc:	f000 f808 	bl	5ed0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    5ec0:	b910      	cbnz	r0, 5ec8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    5ec2:	4902      	ldr	r1, [pc, #8]	; (5ecc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    5ec4:	2001      	movs	r0, #1
    5ec6:	7008      	strb	r0, [r1, #0]
    5ec8:	2001      	movs	r0, #1
    5eca:	bd10      	pop	{r4, pc}
    5ecc:	200342a0 	.word	0x200342a0
    5ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5ed4:	468a      	mov	sl, r1
    5ed6:	4699      	mov	r9, r3
    5ed8:	4615      	mov	r5, r2
    5eda:	4604      	mov	r4, r0
    5edc:	a901      	add	r1, sp, #4
    5ede:	f006 fda9 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5ee2:	bbe0      	cbnz	r0, 5f5e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    5ee4:	9f02      	ldr	r7, [sp, #8]
    5ee6:	f04f 0800 	mov.w	r8, #0
    5eea:	3768      	adds	r7, #104	; 0x68
    5eec:	b18d      	cbz	r5, 5f12 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    5eee:	4620      	mov	r0, r4
    5ef0:	f7fe faa4 	bl	443c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5ef4:	0004      	movs	r4, r0
    5ef6:	d00f      	beq.n	5f18 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    5ef8:	4629      	mov	r1, r5
    5efa:	f006 faaf 	bl	c45c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5efe:	0006      	movs	r6, r0
    5f00:	d003      	beq.n	5f0a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    5f02:	481d      	ldr	r0, [pc, #116]	; (5f78 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    5f04:	8880      	ldrh	r0, [r0, #4]
    5f06:	42a8      	cmp	r0, r5
    5f08:	d208      	bcs.n	5f1c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    5f0a:	2000      	movs	r0, #0
    5f0c:	b004      	add	sp, #16
    5f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f12:	2001      	movs	r0, #1
    5f14:	7538      	strb	r0, [r7, #20]
    5f16:	e029      	b.n	5f6c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    5f18:	2189      	movs	r1, #137	; 0x89
    5f1a:	e02a      	b.n	5f72 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    5f1c:	4620      	mov	r0, r4
    5f1e:	4631      	mov	r1, r6
    5f20:	aa03      	add	r2, sp, #12
    5f22:	f006 fa94 	bl	c44e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    5f26:	9803      	ldr	r0, [sp, #12]
    5f28:	f8a0 8000 	strh.w	r8, [r0]
    5f2c:	f880 8002 	strb.w	r8, [r0, #2]
    5f30:	7d39      	ldrb	r1, [r7, #20]
    5f32:	b109      	cbz	r1, 5f38 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    5f34:	f04f 0a02 	mov.w	sl, #2
    5f38:	4651      	mov	r1, sl
    5f3a:	f007 f888 	bl	d04e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5f3e:	4631      	mov	r1, r6
    5f40:	2603      	movs	r6, #3
    5f42:	4620      	mov	r0, r4
    5f44:	464a      	mov	r2, r9
    5f46:	462b      	mov	r3, r5
    5f48:	9600      	str	r6, [sp, #0]
    5f4a:	f006 f969 	bl	c220 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    5f4e:	4620      	mov	r0, r4
    5f50:	4629      	mov	r1, r5
    5f52:	f006 fa20 	bl	c396 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    5f56:	b158      	cbz	r0, 5f70 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    5f58:	4644      	mov	r4, r8
    5f5a:	a801      	add	r0, sp, #4
    5f5c:	e000      	b.n	5f60 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    5f5e:	e005      	b.n	5f6c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    5f60:	f007 f921 	bl	d1a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    5f64:	9802      	ldr	r0, [sp, #8]
    5f66:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
    5f6a:	753c      	strb	r4, [r7, #20]
    5f6c:	2001      	movs	r0, #1
    5f6e:	e7cd      	b.n	5f0c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    5f70:	219f      	movs	r1, #159	; 0x9f
    5f72:	202b      	movs	r0, #43	; 0x2b
    5f74:	f7fd fe18 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f78:	200342a0 	.word	0x200342a0
    5f7c:	b510      	push	{r4, lr}
    5f7e:	492c      	ldr	r1, [pc, #176]	; (6030 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    5f80:	b086      	sub	sp, #24
    5f82:	7d8a      	ldrb	r2, [r1, #22]
    5f84:	7801      	ldrb	r1, [r0, #0]
    5f86:	07d3      	lsls	r3, r2, #31
    5f88:	d101      	bne.n	5f8e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    5f8a:	2919      	cmp	r1, #25
    5f8c:	d004      	beq.n	5f98 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    5f8e:	2918      	cmp	r1, #24
    5f90:	d01e      	beq.n	5fd0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    5f92:	2912      	cmp	r1, #18
    5f94:	d045      	beq.n	6022 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    5f96:	e049      	b.n	602c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    5f98:	8880      	ldrh	r0, [r0, #4]
    5f9a:	f8ad 0000 	strh.w	r0, [sp]
    5f9e:	a902      	add	r1, sp, #8
    5fa0:	f006 fd48 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5fa4:	b108      	cbz	r0, 5faa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    5fa6:	2158      	movs	r1, #88	; 0x58
    5fa8:	e035      	b.n	6016 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5faa:	9803      	ldr	r0, [sp, #12]
    5fac:	f810 1f5e 	ldrb.w	r1, [r0, #94]!
    5fb0:	f88d 1002 	strb.w	r1, [sp, #2]
    5fb4:	7841      	ldrb	r1, [r0, #1]
    5fb6:	f88d 1003 	strb.w	r1, [sp, #3]
    5fba:	8840      	ldrh	r0, [r0, #2]
    5fbc:	f8ad 0004 	strh.w	r0, [sp, #4]
    5fc0:	2102      	movs	r1, #2
    5fc2:	4668      	mov	r0, sp
    5fc4:	f008 fd10 	bl	e9e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    5fc8:	b340      	cbz	r0, 601c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    5fca:	f240 114d 	movw	r1, #333	; 0x14d
    5fce:	e022      	b.n	6016 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5fd0:	0791      	lsls	r1, r2, #30
    5fd2:	d42b      	bmi.n	602c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    5fd4:	8884      	ldrh	r4, [r0, #4]
    5fd6:	a903      	add	r1, sp, #12
    5fd8:	4620      	mov	r0, r4
    5fda:	f008 fb70 	bl	e6be <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    5fde:	b110      	cbz	r0, 5fe6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    5fe0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    5fe4:	e017      	b.n	6016 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    5fe6:	f8ad 4000 	strh.w	r4, [sp]
    5fea:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    5fee:	f8ad 0002 	strh.w	r0, [sp, #2]
    5ff2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    5ff6:	f8ad 0004 	strh.w	r0, [sp, #4]
    5ffa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    5ffe:	f8ad 0006 	strh.w	r0, [sp, #6]
    6002:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    6006:	f8ad 0008 	strh.w	r0, [sp, #8]
    600a:	4668      	mov	r0, sp
    600c:	f008 fbf4 	bl	e7f8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    6010:	b120      	cbz	r0, 601c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    6012:	f240 115d 	movw	r1, #349	; 0x15d
    6016:	202b      	movs	r0, #43	; 0x2b
    6018:	f7fd fdc6 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    601c:	2001      	movs	r0, #1
    601e:	b006      	add	sp, #24
    6020:	bd10      	pop	{r4, pc}
    6022:	0751      	lsls	r1, r2, #29
    6024:	d402      	bmi.n	602c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6026:	7b80      	ldrb	r0, [r0, #14]
    6028:	07c0      	lsls	r0, r0, #31
    602a:	d0f7      	beq.n	601c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    602c:	2000      	movs	r0, #0
    602e:	e7f6      	b.n	601e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    6030:	200342a0 	.word	0x200342a0

00006034 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6034:	b570      	push	{r4, r5, r6, lr}
    6036:	4604      	mov	r4, r0
    6038:	7c00      	ldrb	r0, [r0, #16]
    603a:	b300      	cbz	r0, 607e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    603c:	2802      	cmp	r0, #2
    603e:	d01e      	beq.n	607e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6040:	f05f 0001 	movs.w	r0, #1
    6044:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6048:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    604c:	460d      	mov	r5, r1
    604e:	b1c0      	cbz	r0, 6082 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    6050:	7de0      	ldrb	r0, [r4, #23]
    6052:	b1f0      	cbz	r0, 6092 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    6054:	f8d4 0011 	ldr.w	r0, [r4, #17]
    6058:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    605c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    6060:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    6064:	7c20      	ldrb	r0, [r4, #16]
    6066:	f007 fa57 	bl	d518 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    606a:	7620      	strb	r0, [r4, #24]
    606c:	2008      	movs	r0, #8
    606e:	7660      	strb	r0, [r4, #25]
    6070:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6074:	4629      	mov	r1, r5
    6076:	f007 fa3b 	bl	d4f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    607a:	b9a8      	cbnz	r0, 60a8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    607c:	e00e      	b.n	609c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    607e:	2000      	movs	r0, #0
    6080:	e7e0      	b.n	6044 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    6082:	2000      	movs	r0, #0
    6084:	f7fe fc52 	bl	492c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6088:	2800      	cmp	r0, #0
    608a:	d1eb      	bne.n	6064 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    608c:	f240 417f 	movw	r1, #1151	; 0x47f
    6090:	e001      	b.n	6096 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    6092:	f240 4183 	movw	r1, #1155	; 0x483
    6096:	202d      	movs	r0, #45	; 0x2d
    6098:	f7fd fd86 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    609c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    60a0:	4629      	mov	r1, r5
    60a2:	f007 fa2e 	bl	d502 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    60a6:	b100      	cbz	r0, 60aa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    60a8:	2001      	movs	r0, #1
    60aa:	76a0      	strb	r0, [r4, #26]
    60ac:	7e20      	ldrb	r0, [r4, #24]
    60ae:	b910      	cbnz	r0, 60b6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    60b0:	78a0      	ldrb	r0, [r4, #2]
    60b2:	0740      	lsls	r0, r0, #29
    60b4:	d506      	bpl.n	60c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    60b6:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    60ba:	f104 0150 	add.w	r1, r4, #80	; 0x50
    60be:	f006 fc76 	bl	c9ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    60c2:	7660      	strb	r0, [r4, #25]
    60c4:	2500      	movs	r5, #0
    60c6:	6425      	str	r5, [r4, #64]	; 0x40
    60c8:	f005 fa03 	bl	b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    60cc:	6460      	str	r0, [r4, #68]	; 0x44
    60ce:	2100      	movs	r1, #0
    60d0:	4620      	mov	r0, r4
    60d2:	f007 fb6f 	bl	d7b4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    60d6:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    60da:	78a0      	ldrb	r0, [r4, #2]
    60dc:	0740      	lsls	r0, r0, #29
    60de:	d508      	bpl.n	60f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    60e0:	7e20      	ldrb	r0, [r4, #24]
    60e2:	2800      	cmp	r0, #0
    60e4:	d005      	beq.n	60f2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    60e6:	4620      	mov	r0, r4
    60e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    60ec:	2100      	movs	r1, #0
    60ee:	f000 bdcd 	b.w	6c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    60f2:	bd70      	pop	{r4, r5, r6, pc}

000060f4 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    60f4:	b508      	push	{r3, lr}
    60f6:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
    60fa:	f88d 2000 	strb.w	r2, [sp]
    60fe:	9a00      	ldr	r2, [sp, #0]
    6100:	9200      	str	r2, [sp, #0]
    6102:	f89d 3000 	ldrb.w	r3, [sp]
    6106:	2200      	movs	r2, #0
    6108:	b163      	cbz	r3, 6124 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    610a:	704a      	strb	r2, [r1, #1]
    610c:	2317      	movs	r3, #23
    610e:	700b      	strb	r3, [r1, #0]
    6110:	f850 3fa9 	ldr.w	r3, [r0, #169]!
    6114:	604b      	str	r3, [r1, #4]
    6116:	6843      	ldr	r3, [r0, #4]
    6118:	608b      	str	r3, [r1, #8]
    611a:	7a03      	ldrb	r3, [r0, #8]
    611c:	730b      	strb	r3, [r1, #12]
    611e:	f800 2c01 	strb.w	r2, [r0, #-1]
    6122:	e03b      	b.n	619c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6124:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    6128:	f88d 3000 	strb.w	r3, [sp]
    612c:	9b00      	ldr	r3, [sp, #0]
    612e:	9300      	str	r3, [sp, #0]
    6130:	f89d 3000 	ldrb.w	r3, [sp]
    6134:	b143      	cbz	r3, 6148 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6136:	704a      	strb	r2, [r1, #1]
    6138:	2305      	movs	r3, #5
    613a:	700b      	strb	r3, [r1, #0]
    613c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    6140:	604b      	str	r3, [r1, #4]
    6142:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    6146:	e029      	b.n	619c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6148:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    614c:	f88d 3000 	strb.w	r3, [sp]
    6150:	9b00      	ldr	r3, [sp, #0]
    6152:	9300      	str	r3, [sp, #0]
    6154:	f89d 3000 	ldrb.w	r3, [sp]
    6158:	b11b      	cbz	r3, 6162 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    615a:	bf00      	nop
    615c:	f007 fb01 	bl	d762 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    6160:	e01c      	b.n	619c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6162:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    6166:	f88d 3000 	strb.w	r3, [sp]
    616a:	9b00      	ldr	r3, [sp, #0]
    616c:	9300      	str	r3, [sp, #0]
    616e:	f89d 3000 	ldrb.w	r3, [sp]
    6172:	b1ab      	cbz	r3, 61a0 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    6174:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
    6178:	f88d 3000 	strb.w	r3, [sp]
    617c:	9b00      	ldr	r3, [sp, #0]
    617e:	9300      	str	r3, [sp, #0]
    6180:	f89d 3000 	ldrb.w	r3, [sp]
    6184:	2b00      	cmp	r3, #0
    6186:	d1e9      	bne.n	615c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    6188:	704a      	strb	r2, [r1, #1]
    618a:	2314      	movs	r3, #20
    618c:	700b      	strb	r3, [r1, #0]
    618e:	f850 3f9c 	ldr.w	r3, [r0, #156]!
    6192:	604b      	str	r3, [r1, #4]
    6194:	8883      	ldrh	r3, [r0, #4]
    6196:	810b      	strh	r3, [r1, #8]
    6198:	f800 2c02 	strb.w	r2, [r0, #-2]
    619c:	2001      	movs	r0, #1
    619e:	bd08      	pop	{r3, pc}
    61a0:	2000      	movs	r0, #0
    61a2:	bd08      	pop	{r3, pc}

000061a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    61a4:	b530      	push	{r4, r5, lr}
    61a6:	460c      	mov	r4, r1
    61a8:	b08d      	sub	sp, #52	; 0x34
    61aa:	4605      	mov	r5, r0
    61ac:	4601      	mov	r1, r0
    61ae:	2220      	movs	r2, #32
    61b0:	a802      	add	r0, sp, #8
    61b2:	f005 fb0e 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    61b6:	a80a      	add	r0, sp, #40	; 0x28
    61b8:	f007 fba9 	bl	d90e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    61bc:	7aa0      	ldrb	r0, [r4, #10]
    61be:	f88d 0018 	strb.w	r0, [sp, #24]
    61c2:	7820      	ldrb	r0, [r4, #0]
    61c4:	f88d 0008 	strb.w	r0, [sp, #8]
    61c8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    61cc:	f8ad 0000 	strh.w	r0, [sp]
    61d0:	f89d 0000 	ldrb.w	r0, [sp]
    61d4:	f000 0101 	and.w	r1, r0, #1
    61d8:	f3c0 0240 	ubfx	r2, r0, #1, #1
    61dc:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    61e0:	f3c0 0280 	ubfx	r2, r0, #2, #1
    61e4:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    61e8:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    61ec:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    61f0:	f3c0 1200 	ubfx	r2, r0, #4, #1
    61f4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    61f8:	f3c0 1240 	ubfx	r2, r0, #5, #1
    61fc:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    6200:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6204:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6208:	f8ad 000a 	strh.w	r0, [sp, #10]
    620c:	7d20      	ldrb	r0, [r4, #20]
    620e:	2801      	cmp	r0, #1
    6210:	d006      	beq.n	6220 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6212:	2802      	cmp	r0, #2
    6214:	d004      	beq.n	6220 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6216:	f240 2185 	movw	r1, #645	; 0x285
    621a:	2006      	movs	r0, #6
    621c:	f7fd fcc4 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6220:	f88d 000c 	strb.w	r0, [sp, #12]
    6224:	7a61      	ldrb	r1, [r4, #9]
    6226:	a80a      	add	r0, sp, #40	; 0x28
    6228:	f007 fb58 	bl	d8dc <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    622c:	7d20      	ldrb	r0, [r4, #20]
    622e:	2101      	movs	r1, #1
    6230:	2802      	cmp	r0, #2
    6232:	d102      	bne.n	623a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6234:	7d60      	ldrb	r0, [r4, #21]
    6236:	1c40      	adds	r0, r0, #1
    6238:	b2c1      	uxtb	r1, r0
    623a:	7ea0      	ldrb	r0, [r4, #26]
    623c:	1c40      	adds	r0, r0, #1
    623e:	b2c2      	uxtb	r2, r0
    6240:	a80a      	add	r0, sp, #40	; 0x28
    6242:	f007 fb12 	bl	d86a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6246:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    624a:	0700      	lsls	r0, r0, #28
    624c:	d501      	bpl.n	6252 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    624e:	2000      	movs	r0, #0
    6250:	e020      	b.n	6294 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    6252:	a80a      	add	r0, sp, #40	; 0x28
    6254:	f007 fb1b 	bl	d88e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6258:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    625c:	2228      	movs	r2, #40	; 0x28
    625e:	f000 fdbd 	bl	6ddc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    6262:	f240 2171 	movw	r1, #625	; 0x271
    6266:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    626a:	fbb0 f0f1 	udiv	r0, r0, r1
    626e:	4348      	muls	r0, r1
    6270:	f8d4 1002 	ldr.w	r1, [r4, #2]
    6274:	f240 2371 	movw	r3, #625	; 0x271
    6278:	0a0a      	lsrs	r2, r1, #8
    627a:	f240 2171 	movw	r1, #625	; 0x271
    627e:	434a      	muls	r2, r1
    6280:	f8d4 1005 	ldr.w	r1, [r4, #5]
    6284:	0a09      	lsrs	r1, r1, #8
    6286:	4359      	muls	r1, r3
    6288:	4290      	cmp	r0, r2
    628a:	d801      	bhi.n	6290 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    628c:	9204      	str	r2, [sp, #16]
    628e:	e004      	b.n	629a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6290:	4288      	cmp	r0, r1
    6292:	d801      	bhi.n	6298 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    6294:	9004      	str	r0, [sp, #16]
    6296:	e000      	b.n	629a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    6298:	9104      	str	r1, [sp, #16]
    629a:	7ca0      	ldrb	r0, [r4, #18]
    629c:	f88d 0017 	strb.w	r0, [sp, #23]
    62a0:	7e20      	ldrb	r0, [r4, #24]
    62a2:	2801      	cmp	r0, #1
    62a4:	d000      	beq.n	62a8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    62a6:	2000      	movs	r0, #0
    62a8:	f88d 0014 	strb.w	r0, [sp, #20]
    62ac:	f895 0074 	ldrb.w	r0, [r5, #116]	; 0x74
    62b0:	f895 0075 	ldrb.w	r0, [r5, #117]	; 0x75
    62b4:	2220      	movs	r2, #32
    62b6:	a902      	add	r1, sp, #8
    62b8:	4628      	mov	r0, r5
    62ba:	f005 fa8a 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    62be:	980a      	ldr	r0, [sp, #40]	; 0x28
    62c0:	6228      	str	r0, [r5, #32]
    62c2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    62c6:	84a8      	strh	r0, [r5, #36]	; 0x24
    62c8:	7ae0      	ldrb	r0, [r4, #11]
    62ca:	b168      	cbz	r0, 62e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    62cc:	2802      	cmp	r0, #2
    62ce:	d00b      	beq.n	62e8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x144>
    62d0:	f05f 0001 	movs.w	r0, #1
    62d4:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    62d8:	68e0      	ldr	r0, [r4, #12]
    62da:	6528      	str	r0, [r5, #80]	; 0x50
    62dc:	8a20      	ldrh	r0, [r4, #16]
    62de:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    62e2:	b00d      	add	sp, #52	; 0x34
    62e4:	2000      	movs	r0, #0
    62e6:	bd30      	pop	{r4, r5, pc}
    62e8:	2000      	movs	r0, #0
    62ea:	e7f3      	b.n	62d4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x130>

000062ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    62ec:	4a0a      	ldr	r2, [pc, #40]	; (6318 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    62ee:	b510      	push	{r4, lr}
    62f0:	2100      	movs	r1, #0
    62f2:	7011      	strb	r1, [r2, #0]
    62f4:	4c09      	ldr	r4, [pc, #36]	; (631c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    62f6:	6060      	str	r0, [r4, #4]
    62f8:	f000 f822 	bl	6340 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    62fc:	b110      	cbz	r0, 6304 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    62fe:	f44f 7148 	mov.w	r1, #800	; 0x320
    6302:	e004      	b.n	630e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6304:	68a0      	ldr	r0, [r4, #8]
    6306:	2800      	cmp	r0, #0
    6308:	d104      	bne.n	6314 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    630a:	f240 3123 	movw	r1, #803	; 0x323
    630e:	202d      	movs	r0, #45	; 0x2d
    6310:	f7fd fc4a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6314:	bd10      	pop	{r4, pc}
    6316:	0000      	.short	0x0000
    6318:	200342bc 	.word	0x200342bc
    631c:	20000100 	.word	0x20000100

00006320 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6320:	4902      	ldr	r1, [pc, #8]	; (632c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6322:	4801      	ldr	r0, [pc, #4]	; (6328 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6324:	6088      	str	r0, [r1, #8]
    6326:	4770      	bx	lr
    6328:	00006dc4 	.word	0x00006dc4
    632c:	20000100 	.word	0x20000100

00006330 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6330:	4902      	ldr	r1, [pc, #8]	; (633c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6332:	6008      	str	r0, [r1, #0]
    6334:	6889      	ldr	r1, [r1, #8]
    6336:	6809      	ldr	r1, [r1, #0]
    6338:	4708      	bx	r1
    633a:	0000      	.short	0x0000
    633c:	20000100 	.word	0x20000100

00006340 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6340:	4808      	ldr	r0, [pc, #32]	; (6364 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6342:	b510      	push	{r4, lr}
    6344:	7801      	ldrb	r1, [r0, #0]
    6346:	b111      	cbz	r1, 634e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6348:	240c      	movs	r4, #12
    634a:	4620      	mov	r0, r4
    634c:	bd10      	pop	{r4, pc}
    634e:	2400      	movs	r4, #0
    6350:	6004      	str	r4, [r0, #0]
    6352:	6044      	str	r4, [r0, #4]
    6354:	6084      	str	r4, [r0, #8]
    6356:	60c4      	str	r4, [r0, #12]
    6358:	f004 f92e 	bl	a5b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    635c:	f003 ff70 	bl	a240 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6360:	e7f3      	b.n	634a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    6362:	0000      	.short	0x0000
    6364:	200342bc 	.word	0x200342bc

00006368 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    6368:	4904      	ldr	r1, [pc, #16]	; (637c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    636a:	b510      	push	{r4, lr}
    636c:	7809      	ldrb	r1, [r1, #0]
    636e:	2901      	cmp	r1, #1
    6370:	d101      	bne.n	6376 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    6372:	f000 fb77 	bl	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6376:	2000      	movs	r0, #0
    6378:	bd10      	pop	{r4, pc}
    637a:	0000      	.short	0x0000
    637c:	200342bc 	.word	0x200342bc

00006380 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    6380:	4902      	ldr	r1, [pc, #8]	; (638c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    6382:	4801      	ldr	r0, [pc, #4]	; (6388 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    6384:	6008      	str	r0, [r1, #0]
    6386:	4770      	bx	lr
    6388:	00006bb1 	.word	0x00006bb1
    638c:	2000010c 	.word	0x2000010c
    6390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6394:	000f      	movs	r7, r1
    6396:	4604      	mov	r4, r0
    6398:	d023      	beq.n	63e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    639a:	f104 0020 	add.w	r0, r4, #32
    639e:	4605      	mov	r5, r0
    63a0:	f007 fa9e 	bl	d8e0 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    63a4:	b9b0      	cbnz	r0, 63d4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    63a6:	78a0      	ldrb	r0, [r4, #2]
    63a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    63ac:	b350      	cbz	r0, 6404 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    63ae:	4628      	mov	r0, r5
    63b0:	f007 fa6d 	bl	d88e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    63b4:	4606      	mov	r6, r0
    63b6:	4628      	mov	r0, r5
    63b8:	f007 fa92 	bl	d8e0 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    63bc:	1a30      	subs	r0, r6, r0
    63be:	b2c0      	uxtb	r0, r0
    63c0:	f007 fae3 	bl	d98a <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    63c4:	4601      	mov	r1, r0
    63c6:	4835      	ldr	r0, [pc, #212]	; (649c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    63c8:	6842      	ldr	r2, [r0, #4]
    63ca:	4411      	add	r1, r2
    63cc:	6041      	str	r1, [r0, #4]
    63ce:	4628      	mov	r0, r5
    63d0:	f007 faa4 	bl	d91c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    63d4:	4628      	mov	r0, r5
    63d6:	f007 fa66 	bl	d8a6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    63da:	4601      	mov	r1, r0
    63dc:	4620      	mov	r0, r4
    63de:	f007 fa25 	bl	d82c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    63e2:	4d2f      	ldr	r5, [pc, #188]	; (64a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    63e4:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    63e8:	2100      	movs	r1, #0
    63ea:	6868      	ldr	r0, [r5, #4]
    63ec:	8001      	strh	r1, [r0, #0]
    63ee:	f007 fa33 	bl	d858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    63f2:	8860      	ldrh	r0, [r4, #2]
    63f4:	2813      	cmp	r0, #19
    63f6:	d013      	beq.n	6420 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    63f8:	dc09      	bgt.n	640e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    63fa:	2810      	cmp	r0, #16
    63fc:	d036      	beq.n	646c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    63fe:	2812      	cmp	r0, #18
    6400:	d109      	bne.n	6416 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6402:	e031      	b.n	6468 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6404:	4620      	mov	r0, r4
    6406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    640a:	f000 bb2b 	b.w	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    640e:	2815      	cmp	r0, #21
    6410:	d00f      	beq.n	6432 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6412:	281d      	cmp	r0, #29
    6414:	d00d      	beq.n	6432 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6416:	f240 6196 	movw	r1, #1686	; 0x696
    641a:	202d      	movs	r0, #45	; 0x2d
    641c:	f7fd fbc4 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6420:	2100      	movs	r1, #0
    6422:	6868      	ldr	r0, [r5, #4]
    6424:	f006 fe75 	bl	d112 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6428:	2101      	movs	r1, #1
    642a:	6868      	ldr	r0, [r5, #4]
    642c:	f007 fa14 	bl	d858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6430:	e020      	b.n	6474 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6432:	2101      	movs	r1, #1
    6434:	6868      	ldr	r0, [r5, #4]
    6436:	f006 fe6c 	bl	d112 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    643a:	2101      	movs	r1, #1
    643c:	6868      	ldr	r0, [r5, #4]
    643e:	f007 fa0b 	bl	d858 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6442:	b136      	cbz	r6, 6452 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6444:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6448:	6868      	ldr	r0, [r5, #4]
    644a:	f006 fe7d 	bl	d148 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    644e:	2101      	movs	r1, #1
    6450:	e006      	b.n	6460 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    6452:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6456:	6868      	ldr	r0, [r5, #4]
    6458:	f006 fe76 	bl	d148 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    645c:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    6460:	6868      	ldr	r0, [r5, #4]
    6462:	f006 fe77 	bl	d154 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6466:	e005      	b.n	6474 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6468:	2106      	movs	r1, #6
    646a:	e000      	b.n	646e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    646c:	2102      	movs	r1, #2
    646e:	6868      	ldr	r0, [r5, #4]
    6470:	f006 fe4f 	bl	d112 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6474:	4620      	mov	r0, r4
    6476:	f000 fc7f 	bl	6d78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    647a:	8860      	ldrh	r0, [r4, #2]
    647c:	281d      	cmp	r0, #29
    647e:	d006      	beq.n	648e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6480:	2815      	cmp	r0, #21
    6482:	d004      	beq.n	648e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    6484:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    6486:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6488:	6868      	ldr	r0, [r5, #4]
    648a:	f006 fe32 	bl	d0f2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    648e:	4639      	mov	r1, r7
    6490:	4620      	mov	r0, r4
    6492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6496:	f000 b9e5 	b.w	6864 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    649a:	0000      	.short	0x0000
    649c:	200342bc 	.word	0x200342bc
    64a0:	20000100 	.word	0x20000100
    64a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64a8:	4d28      	ldr	r5, [pc, #160]	; (654c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1cc>)
    64aa:	4680      	mov	r8, r0
    64ac:	7828      	ldrb	r0, [r5, #0]
    64ae:	2802      	cmp	r0, #2
    64b0:	d005      	beq.n	64be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    64b2:	7828      	ldrb	r0, [r5, #0]
    64b4:	2803      	cmp	r0, #3
    64b6:	d002      	beq.n	64be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    64b8:	f640 4191 	movw	r1, #3217	; 0xc91
    64bc:	e01f      	b.n	64fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x17e>
    64be:	4c24      	ldr	r4, [pc, #144]	; (6550 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d0>)
    64c0:	6820      	ldr	r0, [r4, #0]
    64c2:	7b01      	ldrb	r1, [r0, #12]
    64c4:	b109      	cbz	r1, 64ca <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    64c6:	f007 f9bc 	bl	d842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    64ca:	6860      	ldr	r0, [r4, #4]
    64cc:	2700      	movs	r7, #0
    64ce:	f1b8 0f00 	cmp.w	r8, #0
    64d2:	7800      	ldrb	r0, [r0, #0]
    64d4:	f000 060f 	and.w	r6, r0, #15
    64d8:	d01f      	beq.n	651a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64da:	f004 fa7b 	bl	a9d4 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>
    64de:	b1e0      	cbz	r0, 651a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64e0:	4639      	mov	r1, r7
    64e2:	6860      	ldr	r0, [r4, #4]
    64e4:	f006 fdcb 	bl	d07e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    64e8:	b1b8      	cbz	r0, 651a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19a>
    64ea:	782a      	ldrb	r2, [r5, #0]
    64ec:	6820      	ldr	r0, [r4, #0]
    64ee:	4631      	mov	r1, r6
    64f0:	2a02      	cmp	r2, #2
    64f2:	d007      	beq.n	6504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    64f4:	782a      	ldrb	r2, [r5, #0]
    64f6:	2a03      	cmp	r2, #3
    64f8:	d004      	beq.n	6504 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x184>
    64fa:	f640 416a 	movw	r1, #3178	; 0xc6a
    64fe:	202d      	movs	r0, #45	; 0x2d
    6500:	f7fd fb52 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6504:	68a2      	ldr	r2, [r4, #8]
    6506:	782b      	ldrb	r3, [r5, #0]
    6508:	6952      	ldr	r2, [r2, #20]
    650a:	f06f 0607 	mvn.w	r6, #7
    650e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6512:	58d2      	ldr	r2, [r2, r3]
    6514:	4790      	blx	r2
    6516:	4606      	mov	r6, r0
    6518:	e000      	b.n	651c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x19c>
    651a:	2601      	movs	r6, #1
    651c:	7ba8      	ldrb	r0, [r5, #14]
    651e:	b118      	cbz	r0, 6528 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1a8>
    6520:	f004 f84a 	bl	a5b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6524:	f003 fe8c 	bl	a240 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6528:	2e00      	cmp	r6, #0
    652a:	d00d      	beq.n	6548 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c8>
    652c:	6820      	ldr	r0, [r4, #0]
    652e:	f007 fa42 	bl	d9b6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6532:	b120      	cbz	r0, 653e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1be>
    6534:	68a0      	ldr	r0, [r4, #8]
    6536:	6880      	ldr	r0, [r0, #8]
    6538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    653c:	4700      	bx	r0
    653e:	6820      	ldr	r0, [r4, #0]
    6540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6544:	f000 ba8e 	b.w	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    654c:	200342bc 	.word	0x200342bc
    6550:	20000100 	.word	0x20000100
    6554:	b510      	push	{r4, lr}
    6556:	2903      	cmp	r1, #3
    6558:	d002      	beq.n	6560 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    655a:	2905      	cmp	r1, #5
    655c:	d10a      	bne.n	6574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    655e:	e002      	b.n	6566 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e6>
    6560:	f000 fb5a 	bl	6c18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x58c>
    6564:	e003      	b.n	656e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ee>
    6566:	4904      	ldr	r1, [pc, #16]	; (6578 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>)
    6568:	6809      	ldr	r1, [r1, #0]
    656a:	b109      	cbz	r1, 6570 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f0>
    656c:	4788      	blx	r1
    656e:	b108      	cbz	r0, 6574 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f4>
    6570:	2000      	movs	r0, #0
    6572:	bd10      	pop	{r4, pc}
    6574:	2001      	movs	r0, #1
    6576:	bd10      	pop	{r4, pc}
    6578:	2000010c 	.word	0x2000010c
    657c:	4a09      	ldr	r2, [pc, #36]	; (65a4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x224>)
    657e:	0003      	movs	r3, r0
    6580:	6810      	ldr	r0, [r2, #0]
    6582:	d001      	beq.n	6588 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    6584:	f000 ba6e 	b.w	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6588:	2900      	cmp	r1, #0
    658a:	d009      	beq.n	65a0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    658c:	6891      	ldr	r1, [r2, #8]
    658e:	4a06      	ldr	r2, [pc, #24]	; (65a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x228>)
    6590:	6909      	ldr	r1, [r1, #16]
    6592:	7812      	ldrb	r2, [r2, #0]
    6594:	f06f 030f 	mvn.w	r3, #15
    6598:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    659c:	5889      	ldr	r1, [r1, r2]
    659e:	4708      	bx	r1
    65a0:	4770      	bx	lr
    65a2:	0000      	.short	0x0000
    65a4:	20000100 	.word	0x20000100
    65a8:	200342bc 	.word	0x200342bc
    65ac:	b570      	push	{r4, r5, r6, lr}
    65ae:	4604      	mov	r4, r0
    65b0:	8840      	ldrh	r0, [r0, #2]
    65b2:	2500      	movs	r5, #0
    65b4:	2810      	cmp	r0, #16
    65b6:	d014      	beq.n	65e2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x262>
    65b8:	4e14      	ldr	r6, [pc, #80]	; (660c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x28c>)
    65ba:	7bb0      	ldrb	r0, [r6, #14]
    65bc:	b120      	cbz	r0, 65c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x248>
    65be:	f003 fe5f 	bl	a280 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    65c2:	2040      	movs	r0, #64	; 0x40
    65c4:	f004 f808 	bl	a5d8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    65c8:	4811      	ldr	r0, [pc, #68]	; (6610 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    65ca:	6840      	ldr	r0, [r0, #4]
    65cc:	f004 fac2 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65d0:	78a0      	ldrb	r0, [r4, #2]
    65d2:	0740      	lsls	r0, r0, #29
    65d4:	d413      	bmi.n	65fe <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x27e>
    65d6:	7be0      	ldrb	r0, [r4, #15]
    65d8:	2801      	cmp	r0, #1
    65da:	d008      	beq.n	65ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    65dc:	2803      	cmp	r0, #3
    65de:	d006      	beq.n	65ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x26e>
    65e0:	e006      	b.n	65f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x270>
    65e2:	4620      	mov	r0, r4
    65e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65e8:	2101      	movs	r1, #1
    65ea:	f7ff bed1 	b.w	6390 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    65ee:	2510      	movs	r5, #16
    65f0:	2100      	movs	r1, #0
    65f2:	f045 020e 	orr.w	r2, r5, #14
    65f6:	7923      	ldrb	r3, [r4, #4]
    65f8:	4608      	mov	r0, r1
    65fa:	f004 fb35 	bl	ac68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    65fe:	2000      	movs	r0, #0
    6600:	f004 f940 	bl	a884 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6604:	2002      	movs	r0, #2
    6606:	7030      	strb	r0, [r6, #0]
    6608:	bd70      	pop	{r4, r5, r6, pc}
    660a:	0000      	.short	0x0000
    660c:	200342bc 	.word	0x200342bc
    6610:	20000100 	.word	0x20000100
    6614:	b510      	push	{r4, lr}
    6616:	4c12      	ldr	r4, [pc, #72]	; (6660 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e0>)
    6618:	6820      	ldr	r0, [r4, #0]
    661a:	f000 f825 	bl	6668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    661e:	6820      	ldr	r0, [r4, #0]
    6620:	f007 f9c9 	bl	d9b6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6624:	2800      	cmp	r0, #0
    6626:	6820      	ldr	r0, [r4, #0]
    6628:	d00b      	beq.n	6642 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c2>
    662a:	490e      	ldr	r1, [pc, #56]	; (6664 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    662c:	780a      	ldrb	r2, [r1, #0]
    662e:	2a02      	cmp	r2, #2
    6630:	d00b      	beq.n	664a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6632:	780a      	ldrb	r2, [r1, #0]
    6634:	2a03      	cmp	r2, #3
    6636:	d008      	beq.n	664a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ca>
    6638:	f640 31a5 	movw	r1, #2981	; 0xba5
    663c:	202d      	movs	r0, #45	; 0x2d
    663e:	f7fd fab3 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6646:	f000 ba0d 	b.w	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    664a:	68a2      	ldr	r2, [r4, #8]
    664c:	7809      	ldrb	r1, [r1, #0]
    664e:	68d2      	ldr	r2, [r2, #12]
    6650:	f06f 0307 	mvn.w	r3, #7
    6654:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6658:	5851      	ldr	r1, [r2, r1]
    665a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    665e:	4708      	bx	r1
    6660:	20000100 	.word	0x20000100
    6664:	200342bc 	.word	0x200342bc
    6668:	b510      	push	{r4, lr}
    666a:	7b01      	ldrb	r1, [r0, #12]
    666c:	b109      	cbz	r1, 6672 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f2>
    666e:	f007 f8e8 	bl	d842 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    6672:	4805      	ldr	r0, [pc, #20]	; (6688 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x308>)
    6674:	7b80      	ldrb	r0, [r0, #14]
    6676:	2800      	cmp	r0, #0
    6678:	d005      	beq.n	6686 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x306>
    667a:	f003 ff9d 	bl	a5b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    667e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6682:	f003 bddd 	b.w	a240 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6686:	bd10      	pop	{r4, pc}
    6688:	200342bc 	.word	0x200342bc

0000668c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    668c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6690:	4d5a      	ldr	r5, [pc, #360]	; (67fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    6692:	4604      	mov	r4, r0
    6694:	7828      	ldrb	r0, [r5, #0]
    6696:	bbe8      	cbnz	r0, 6714 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x88>
    6698:	7820      	ldrb	r0, [r4, #0]
    669a:	28ff      	cmp	r0, #255	; 0xff
    669c:	d049      	beq.n	6732 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    669e:	f04f 0900 	mov.w	r9, #0
    66a2:	f8a5 900c 	strh.w	r9, [r5, #12]
    66a6:	f8c5 9004 	str.w	r9, [r5, #4]
    66aa:	f885 9001 	strb.w	r9, [r5, #1]
    66ae:	f885 9002 	strb.w	r9, [r5, #2]
    66b2:	f884 9061 	strb.w	r9, [r4, #97]	; 0x61
    66b6:	4648      	mov	r0, r9
    66b8:	f004 f94c 	bl	a954 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>
    66bc:	4b50      	ldr	r3, [pc, #320]	; (6800 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    66be:	f8df a144 	ldr.w	sl, [pc, #324]	; 6804 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    66c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    66c4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    66c8:	f8da 0008 	ldr.w	r0, [sl, #8]
    66cc:	6840      	ldr	r0, [r0, #4]
    66ce:	9003      	str	r0, [sp, #12]
    66d0:	4668      	mov	r0, sp
    66d2:	f004 f8ab 	bl	a82c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    66d6:	f004 f9af 	bl	aa38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    66da:	f003 ff6d 	bl	a5b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    66de:	f003 fdaf 	bl	a240 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    66e2:	4847      	ldr	r0, [pc, #284]	; (6800 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    66e4:	1f40      	subs	r0, r0, #5
    66e6:	f004 fb11 	bl	ad0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    66ea:	4845      	ldr	r0, [pc, #276]	; (6800 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    66ec:	3808      	subs	r0, #8
    66ee:	f004 fb19 	bl	ad24 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    66f2:	f104 0020 	add.w	r0, r4, #32
    66f6:	4606      	mov	r6, r0
    66f8:	f007 f910 	bl	d91c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    66fc:	4630      	mov	r0, r6
    66fe:	f007 f8d2 	bl	d8a6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    6702:	4601      	mov	r1, r0
    6704:	4620      	mov	r0, r4
    6706:	f007 f891 	bl	d82c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    670a:	f994 000e 	ldrsb.w	r0, [r4, #14]
    670e:	f004 fa1b 	bl	ab48 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    6712:	e000      	b.n	6716 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    6714:	e00d      	b.n	6732 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6716:	7921      	ldrb	r1, [r4, #4]
    6718:	2000      	movs	r0, #0
    671a:	f004 f80b 	bl	a734 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    671e:	2601      	movs	r6, #1
    6720:	60a8      	str	r0, [r5, #8]
    6722:	b150      	cbz	r0, 673a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    6724:	210f      	movs	r1, #15
    6726:	2005      	movs	r0, #5
    6728:	f003 ff6a 	bl	a600 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>
    672c:	7ea0      	ldrb	r0, [r4, #26]
    672e:	b958      	cbnz	r0, 6748 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    6730:	e005      	b.n	673e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb2>
    6732:	200c      	movs	r0, #12
    6734:	b004      	add	sp, #16
    6736:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    673a:	702e      	strb	r6, [r5, #0]
    673c:	e05b      	b.n	67f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16a>
    673e:	7e20      	ldrb	r0, [r4, #24]
    6740:	b910      	cbnz	r0, 6748 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xbc>
    6742:	78a0      	ldrb	r0, [r4, #2]
    6744:	0740      	lsls	r0, r0, #29
    6746:	d52b      	bpl.n	67a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6748:	f004 fec3 	bl	b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    674c:	4683      	mov	fp, r0
    674e:	4659      	mov	r1, fp
    6750:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6752:	f7fa fee5 	bl	1520 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6756:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 6808 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    675a:	4607      	mov	r7, r0
    675c:	fb90 f1f8 	sdiv	r1, r0, r8
    6760:	fb08 7011 	mls	r0, r8, r1, r7
    6764:	4241      	negs	r1, r0
    6766:	4658      	mov	r0, fp
    6768:	f7fa fea8 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    676c:	6460      	str	r0, [r4, #68]	; 0x44
    676e:	fb97 f0f8 	sdiv	r0, r7, r8
    6772:	6c21      	ldr	r1, [r4, #64]	; 0x40
    6774:	4408      	add	r0, r1
    6776:	6420      	str	r0, [r4, #64]	; 0x40
    6778:	f7fe ff6a 	bl	5650 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    677c:	6c21      	ldr	r1, [r4, #64]	; 0x40
    677e:	4288      	cmp	r0, r1
    6780:	d80e      	bhi.n	67a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6782:	e9c4 9b10 	strd	r9, fp, [r4, #64]	; 0x40
    6786:	2101      	movs	r1, #1
    6788:	4620      	mov	r0, r4
    678a:	f007 f813 	bl	d7b4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    678e:	78a0      	ldrb	r0, [r4, #2]
    6790:	0740      	lsls	r0, r0, #29
    6792:	d505      	bpl.n	67a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6794:	7e20      	ldrb	r0, [r4, #24]
    6796:	b118      	cbz	r0, 67a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x114>
    6798:	2101      	movs	r1, #1
    679a:	4620      	mov	r0, r4
    679c:	f000 fa76 	bl	6c8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>
    67a0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    67a4:	f104 0049 	add.w	r0, r4, #73	; 0x49
    67a8:	f004 faa4 	bl	acf4 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>
    67ac:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
    67b0:	2802      	cmp	r0, #2
    67b2:	d10a      	bne.n	67ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    67b4:	4622      	mov	r2, r4
    67b6:	e9d2 3719 	ldrd	r3, r7, [r2, #100]	; 0x64
    67ba:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
    67be:	e9c4 370c 	strd	r3, r7, [r4, #48]	; 0x30
    67c2:	e9c4 0119 	strd	r0, r1, [r4, #100]	; 0x64
    67c6:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
    67ca:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    67ce:	2802      	cmp	r0, #2
    67d0:	d109      	bne.n	67e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15a>
    67d2:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    67d6:	e9d4 231b 	ldrd	r2, r3, [r4, #108]	; 0x6c
    67da:	e9c4 101b 	strd	r1, r0, [r4, #108]	; 0x6c
    67de:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    67e2:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
    67e6:	f7fe ff99 	bl	571c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    67ea:	2103      	movs	r1, #3
    67ec:	f8da 0004 	ldr.w	r0, [sl, #4]
    67f0:	f006 f8d0 	bl	c994 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    67f4:	73a8      	strb	r0, [r5, #14]
    67f6:	2000      	movs	r0, #0
    67f8:	e79c      	b.n	6734 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa8>
    67fa:	0000      	.short	0x0000
    67fc:	200342bc 	.word	0x200342bc
    6800:	00006da4 	.word	0x00006da4
    6804:	20000100 	.word	0x20000100
    6808:	000f4240 	.word	0x000f4240
    680c:	b510      	push	{r4, lr}
    680e:	4604      	mov	r4, r0
    6810:	f7ff ff3c 	bl	668c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6814:	2800      	cmp	r0, #0
    6816:	d108      	bne.n	682a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    6818:	4804      	ldr	r0, [pc, #16]	; (682c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    681a:	7800      	ldrb	r0, [r0, #0]
    681c:	2801      	cmp	r0, #1
    681e:	d003      	beq.n	6828 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    6820:	2100      	movs	r1, #0
    6822:	4620      	mov	r0, r4
    6824:	f7ff fdb4 	bl	6390 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6828:	2000      	movs	r0, #0
    682a:	bd10      	pop	{r4, pc}
    682c:	200342bc 	.word	0x200342bc
    6830:	480a      	ldr	r0, [pc, #40]	; (685c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    6832:	b510      	push	{r4, lr}
    6834:	490a      	ldr	r1, [pc, #40]	; (6860 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    6836:	6804      	ldr	r4, [r0, #0]
    6838:	7808      	ldrb	r0, [r1, #0]
    683a:	2800      	cmp	r0, #0
    683c:	d00d      	beq.n	685a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    683e:	7808      	ldrb	r0, [r1, #0]
    6840:	2802      	cmp	r0, #2
    6842:	d002      	beq.n	684a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    6844:	7808      	ldrb	r0, [r1, #0]
    6846:	2803      	cmp	r0, #3
    6848:	d102      	bne.n	6850 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    684a:	4620      	mov	r0, r4
    684c:	f7ff ff0c 	bl	6668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>
    6850:	4620      	mov	r0, r4
    6852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6856:	f000 b905 	b.w	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    685a:	bd10      	pop	{r4, pc}
    685c:	20000100 	.word	0x20000100
    6860:	200342bc 	.word	0x200342bc
    6864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6868:	4604      	mov	r4, r0
    686a:	4827      	ldr	r0, [pc, #156]	; (6908 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    686c:	460d      	mov	r5, r1
    686e:	6840      	ldr	r0, [r0, #4]
    6870:	f004 f970 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6874:	4e25      	ldr	r6, [pc, #148]	; (690c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    6876:	2004      	movs	r0, #4
    6878:	7030      	strb	r0, [r6, #0]
    687a:	b325      	cbz	r5, 68c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    687c:	8860      	ldrh	r0, [r4, #2]
    687e:	2810      	cmp	r0, #16
    6880:	d02a      	beq.n	68d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    6882:	f104 0020 	add.w	r0, r4, #32
    6886:	4680      	mov	r8, r0
    6888:	68b5      	ldr	r5, [r6, #8]
    688a:	f007 f800 	bl	d88e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    688e:	4607      	mov	r7, r0
    6890:	4640      	mov	r0, r8
    6892:	f007 f825 	bl	d8e0 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6896:	1a38      	subs	r0, r7, r0
    6898:	1e40      	subs	r0, r0, #1
    689a:	b2c0      	uxtb	r0, r0
    689c:	8861      	ldrh	r1, [r4, #2]
    689e:	2228      	movs	r2, #40	; 0x28
    68a0:	f000 fabc 	bl	6e1c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    68a4:	4405      	add	r5, r0
    68a6:	78a0      	ldrb	r0, [r4, #2]
    68a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    68ac:	b130      	cbz	r0, 68bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    68ae:	6870      	ldr	r0, [r6, #4]
    68b0:	4405      	add	r5, r0
    68b2:	f007 f86e 	bl	d992 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    68b6:	4428      	add	r0, r5
    68b8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    68bc:	7922      	ldrb	r2, [r4, #4]
    68be:	4629      	mov	r1, r5
    68c0:	2000      	movs	r0, #0
    68c2:	f004 f955 	bl	ab70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    68c6:	8860      	ldrh	r0, [r4, #2]
    68c8:	2813      	cmp	r0, #19
    68ca:	d013      	beq.n	68f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68cc:	dc09      	bgt.n	68e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    68ce:	2810      	cmp	r0, #16
    68d0:	d018      	beq.n	6904 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    68d2:	2812      	cmp	r0, #18
    68d4:	d109      	bne.n	68ea <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    68d6:	e00d      	b.n	68f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68d8:	7921      	ldrb	r1, [r4, #4]
    68da:	2000      	movs	r0, #0
    68dc:	f003 fede 	bl	a69c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    68e0:	e7f1      	b.n	68c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    68e2:	2815      	cmp	r0, #21
    68e4:	d006      	beq.n	68f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68e6:	281d      	cmp	r0, #29
    68e8:	d004      	beq.n	68f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    68ea:	f640 511c 	movw	r1, #3356	; 0xd1c
    68ee:	202d      	movs	r0, #45	; 0x2d
    68f0:	f7fd f95a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    68f4:	7923      	ldrb	r3, [r4, #4]
    68f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    68fa:	2201      	movs	r2, #1
    68fc:	4611      	mov	r1, r2
    68fe:	2000      	movs	r0, #0
    6900:	f004 b9b2 	b.w	ac68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6908:	20000100 	.word	0x20000100
    690c:	200342bc 	.word	0x200342bc
    6910:	b510      	push	{r4, lr}
    6912:	4604      	mov	r4, r0
    6914:	7800      	ldrb	r0, [r0, #0]
    6916:	460b      	mov	r3, r1
    6918:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
    691c:	29ff      	cmp	r1, #255	; 0xff
    691e:	d010      	beq.n	6942 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    6920:	f104 02ab 	add.w	r2, r4, #171	; 0xab
    6924:	1e51      	subs	r1, r2, #1
    6926:	4618      	mov	r0, r3
    6928:	f7fe fe10 	bl	554c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    692c:	b130      	cbz	r0, 693c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    692e:	f894 00aa 	ldrb.w	r0, [r4, #170]	; 0xaa
    6932:	f040 0002 	orr.w	r0, r0, #2
    6936:	f884 00aa 	strb.w	r0, [r4, #170]	; 0xaa
    693a:	e011      	b.n	6960 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    693c:	f640 712c 	movw	r1, #3884	; 0xf2c
    6940:	e01d      	b.n	697e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f2>
    6942:	4810      	ldr	r0, [pc, #64]	; (6984 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>)
    6944:	6840      	ldr	r0, [r0, #4]
    6946:	7801      	ldrb	r1, [r0, #0]
    6948:	f3c1 1180 	ubfx	r1, r1, #6, #1
    694c:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    6950:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6954:	f8c4 10ab 	str.w	r1, [r4, #171]	; 0xab
    6958:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    695c:	f8a4 00af 	strh.w	r0, [r4, #175]	; 0xaf
    6960:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6964:	287f      	cmp	r0, #127	; 0x7f
    6966:	d008      	beq.n	697a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ee>
    6968:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
    696c:	207f      	movs	r0, #127	; 0x7f
    696e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6972:	3492      	adds	r4, #146	; 0x92
    6974:	2001      	movs	r0, #1
    6976:	75a0      	strb	r0, [r4, #22]
    6978:	bd10      	pop	{r4, pc}
    697a:	f640 51ce 	movw	r1, #3534	; 0xdce
    697e:	202d      	movs	r0, #45	; 0x2d
    6980:	f7fd f912 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6984:	20000100 	.word	0x20000100
    6988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    698c:	4604      	mov	r4, r0
    698e:	8840      	ldrh	r0, [r0, #2]
    6990:	4617      	mov	r7, r2
    6992:	4688      	mov	r8, r1
    6994:	2903      	cmp	r1, #3
    6996:	d006      	beq.n	69a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    6998:	f000 0501 	and.w	r5, r0, #1
    699c:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    69a0:	b118      	cbz	r0, 69aa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    69a2:	2001      	movs	r0, #1
    69a4:	e002      	b.n	69ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x320>
    69a6:	f3c0 0540 	ubfx	r5, r0, #1, #1
    69aa:	2000      	movs	r0, #0
    69ac:	4681      	mov	r9, r0
    69ae:	f003 fe21 	bl	a5f4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    69b2:	4606      	mov	r6, r0
    69b4:	f1b8 0f03 	cmp.w	r8, #3
    69b8:	d025      	beq.n	6a06 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37a>
    69ba:	2001      	movs	r0, #1
    69bc:	4680      	mov	r8, r0
    69be:	ea35 0509 	bics.w	r5, r5, r9
    69c2:	d046      	beq.n	6a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    69c4:	4825      	ldr	r0, [pc, #148]	; (6a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d0>)
    69c6:	7b80      	ldrb	r0, [r0, #14]
    69c8:	b138      	cbz	r0, 69da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    69ca:	f005 ffe6 	bl	c99a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    69ce:	7038      	strb	r0, [r7, #0]
    69d0:	28ff      	cmp	r0, #255	; 0xff
    69d2:	d002      	beq.n	69da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    69d4:	f7fe fdd4 	bl	5580 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    69d8:	4306      	orrs	r6, r0
    69da:	4d21      	ldr	r5, [pc, #132]	; (6a60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>)
    69dc:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    69e0:	6868      	ldr	r0, [r5, #4]
    69e2:	7801      	ldrb	r1, [r0, #0]
    69e4:	f3c1 1180 	ubfx	r1, r1, #6, #1
    69e8:	4291      	cmp	r1, r2
    69ea:	d106      	bne.n	69fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36e>
    69ec:	2206      	movs	r2, #6
    69ee:	f104 0150 	add.w	r1, r4, #80	; 0x50
    69f2:	1cc0      	adds	r0, r0, #3
    69f4:	f004 fedb 	bl	b7ae <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    69f8:	b138      	cbz	r0, 6a0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    69fa:	2000      	movs	r0, #0
    69fc:	7839      	ldrb	r1, [r7, #0]
    69fe:	29ff      	cmp	r1, #255	; 0xff
    6a00:	d009      	beq.n	6a16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38a>
    6a02:	b9b8      	cbnz	r0, 6a34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6a04:	e003      	b.n	6a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    6a06:	2002      	movs	r0, #2
    6a08:	e7d8      	b.n	69bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    6a0a:	2001      	movs	r0, #1
    6a0c:	e7f6      	b.n	69fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    6a0e:	7e60      	ldrb	r0, [r4, #25]
    6a10:	4288      	cmp	r0, r1
    6a12:	d00f      	beq.n	6a34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6a14:	e008      	b.n	6a28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6a16:	b138      	cbz	r0, 6a28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6a18:	6869      	ldr	r1, [r5, #4]
    6a1a:	f811 0b03 	ldrb.w	r0, [r1], #3
    6a1e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6a22:	f006 fe85 	bl	d730 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6a26:	b128      	cbz	r0, 6a34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    6a28:	2000      	movs	r0, #0
    6a2a:	78a1      	ldrb	r1, [r4, #2]
    6a2c:	0749      	lsls	r1, r1, #29
    6a2e:	d503      	bpl.n	6a38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    6a30:	b990      	cbnz	r0, 6a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6a32:	e00e      	b.n	6a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6a34:	2001      	movs	r0, #1
    6a36:	e7f8      	b.n	6a2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39e>
    6a38:	b976      	cbnz	r6, 6a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6a3a:	7be0      	ldrb	r0, [r4, #15]
    6a3c:	b108      	cbz	r0, 6a42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    6a3e:	4540      	cmp	r0, r8
    6a40:	d107      	bne.n	6a52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c6>
    6a42:	6869      	ldr	r1, [r5, #4]
    6a44:	f811 0b03 	ldrb.w	r0, [r1], #3
    6a48:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6a4c:	f006 fe70 	bl	d730 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6a50:	b110      	cbz	r0, 6a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    6a52:	2000      	movs	r0, #0
    6a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a58:	2001      	movs	r0, #1
    6a5a:	e7fb      	b.n	6a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    6a5c:	200342bc 	.word	0x200342bc
    6a60:	20000100 	.word	0x20000100
    6a64:	b570      	push	{r4, r5, r6, lr}
    6a66:	4604      	mov	r4, r0
    6a68:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6a6a:	4d10      	ldr	r5, [pc, #64]	; (6aac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>)
    6a6c:	1c40      	adds	r0, r0, #1
    6a6e:	62a0      	str	r0, [r4, #40]	; 0x28
    6a70:	7ba8      	ldrb	r0, [r5, #14]
    6a72:	2600      	movs	r6, #0
    6a74:	b120      	cbz	r0, 6a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f4>
    6a76:	f003 fd9f 	bl	a5b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a7a:	f003 fbe1 	bl	a240 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a7e:	73ae      	strb	r6, [r5, #14]
    6a80:	702e      	strb	r6, [r5, #0]
    6a82:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6a86:	b108      	cbz	r0, 6a8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    6a88:	2101      	movs	r1, #1
    6a8a:	e00a      	b.n	6aa2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    6a8c:	7b60      	ldrb	r0, [r4, #13]
    6a8e:	b138      	cbz	r0, 6aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6a90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6a92:	4288      	cmp	r0, r1
    6a94:	d804      	bhi.n	6aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6a96:	2101      	movs	r1, #1
    6a98:	4620      	mov	r0, r4
    6a9a:	f006 ffa1 	bl	d9e0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6a9e:	bd70      	pop	{r4, r5, r6, pc}
    6aa0:	2100      	movs	r1, #0
    6aa2:	4620      	mov	r0, r4
    6aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6aa8:	f006 bf9a 	b.w	d9e0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6aac:	200342bc 	.word	0x200342bc
    6ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ab4:	4604      	mov	r4, r0
    6ab6:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6aba:	4690      	mov	r8, r2
    6abc:	460d      	mov	r5, r1
    6abe:	f88d 0000 	strb.w	r0, [sp]
    6ac2:	9800      	ldr	r0, [sp, #0]
    6ac4:	9000      	str	r0, [sp, #0]
    6ac6:	f89d 0000 	ldrb.w	r0, [sp]
    6aca:	b110      	cbz	r0, 6ad2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x446>
    6acc:	f640 31d9 	movw	r1, #3033	; 0xbd9
    6ad0:	e058      	b.n	6b84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    6ad2:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    6ad6:	8828      	ldrh	r0, [r5, #0]
    6ad8:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6adc:	2b00      	cmp	r3, #0
    6ade:	d163      	bne.n	6ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    6ae0:	6868      	ldr	r0, [r5, #4]
    6ae2:	f005 ffb8 	bl	ca56 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6ae6:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    6aea:	8928      	ldrh	r0, [r5, #8]
    6aec:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    6af0:	8968      	ldrh	r0, [r5, #10]
    6af2:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    6af6:	f895 016d 	ldrb.w	r0, [r5, #365]	; 0x16d
    6afa:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    6afe:	7e21      	ldrb	r1, [r4, #24]
    6b00:	f104 0649 	add.w	r6, r4, #73	; 0x49
    6b04:	2700      	movs	r7, #0
    6b06:	f104 0980 	add.w	r9, r4, #128	; 0x80
    6b0a:	b129      	cbz	r1, 6b18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x48c>
    6b0c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6b10:	4631      	mov	r1, r6
    6b12:	f006 fcf6 	bl	d502 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    6b16:	b940      	cbnz	r0, 6b2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49e>
    6b18:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6b1c:	b170      	cbz	r0, 6b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6b1e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6b22:	4631      	mov	r1, r6
    6b24:	f006 fce4 	bl	d4f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa4>
    6b28:	b140      	cbz	r0, 6b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b0>
    6b2a:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6b2e:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
    6b32:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6b36:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    6b3a:	e003      	b.n	6b44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b8>
    6b3c:	f8c4 7086 	str.w	r7, [r4, #134]	; 0x86
    6b40:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
    6b44:	4819      	ldr	r0, [pc, #100]	; (6bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>)
    6b46:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6b4a:	6840      	ldr	r0, [r0, #4]
    6b4c:	7801      	ldrb	r1, [r0, #0]
    6b4e:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6b52:	f884 107f 	strb.w	r1, [r4, #127]	; 0x7f
    6b56:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6b5a:	d016      	beq.n	6b8a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fe>
    6b5c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    6b60:	8880      	ldrh	r0, [r0, #4]
    6b62:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    6b66:	464a      	mov	r2, r9
    6b68:	f104 017f 	add.w	r1, r4, #127	; 0x7f
    6b6c:	4640      	mov	r0, r8
    6b6e:	f7fe fced 	bl	554c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6b72:	b128      	cbz	r0, 6b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    6b74:	f814 0f7f 	ldrb.w	r0, [r4, #127]!
    6b78:	f040 0002 	orr.w	r0, r0, #2
    6b7c:	7020      	strb	r0, [r4, #0]
    6b7e:	e00c      	b.n	6b9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    6b80:	f640 31fa 	movw	r1, #3066	; 0xbfa
    6b84:	202d      	movs	r0, #45	; 0x2d
    6b86:	f7fd f80f 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b8a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    6b8e:	8880      	ldrh	r0, [r0, #4]
    6b90:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    6b94:	f844 7f8c 	str.w	r7, [r4, #140]!
    6b98:	80a7      	strh	r7, [r4, #4]
    6b9a:	8828      	ldrh	r0, [r5, #0]
    6b9c:	f7fd fc38 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6ba0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ba4:	f005 bce3 	b.w	c56e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bac:	20000100 	.word	0x20000100
    6bb0:	b538      	push	{r3, r4, r5, lr}
    6bb2:	4604      	mov	r4, r0
    6bb4:	20ff      	movs	r0, #255	; 0xff
    6bb6:	f88d 0000 	strb.w	r0, [sp]
    6bba:	2501      	movs	r5, #1
    6bbc:	466a      	mov	r2, sp
    6bbe:	2105      	movs	r1, #5
    6bc0:	4620      	mov	r0, r4
    6bc2:	f7ff fee1 	bl	6988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6bc6:	b300      	cbz	r0, 6c0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57e>
    6bc8:	4a11      	ldr	r2, [pc, #68]	; (6c10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x584>)
    6bca:	69e0      	ldr	r0, [r4, #28]
    6bcc:	6852      	ldr	r2, [r2, #4]
    6bce:	f810 1f7d 	ldrb.w	r1, [r0, #125]!
    6bd2:	7812      	ldrb	r2, [r2, #0]
    6bd4:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6bd8:	4011      	ands	r1, r2
    6bda:	7001      	strb	r1, [r0, #0]
    6bdc:	2201      	movs	r2, #1
    6bde:	4620      	mov	r0, r4
    6be0:	69e1      	ldr	r1, [r4, #28]
    6be2:	f000 f881 	bl	6ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    6be6:	2300      	movs	r3, #0
    6be8:	f89d 2000 	ldrb.w	r2, [sp]
    6bec:	4620      	mov	r0, r4
    6bee:	69e1      	ldr	r1, [r4, #28]
    6bf0:	f7ff ff5e 	bl	6ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    6bf4:	2001      	movs	r0, #1
    6bf6:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
    6bfa:	4a06      	ldr	r2, [pc, #24]	; (6c14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x588>)
    6bfc:	2100      	movs	r1, #0
    6bfe:	69e0      	ldr	r0, [r4, #28]
    6c00:	7011      	strb	r1, [r2, #0]
    6c02:	2105      	movs	r1, #5
    6c04:	f000 fa1a 	bl	703c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6c08:	e000      	b.n	6c0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x580>
    6c0a:	2500      	movs	r5, #0
    6c0c:	4628      	mov	r0, r5
    6c0e:	bd38      	pop	{r3, r4, r5, pc}
    6c10:	20000100 	.word	0x20000100
    6c14:	200342bc 	.word	0x200342bc
    6c18:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6c1a:	4604      	mov	r4, r0
    6c1c:	20ff      	movs	r0, #255	; 0xff
    6c1e:	f88d 0000 	strb.w	r0, [sp]
    6c22:	2501      	movs	r5, #1
    6c24:	466a      	mov	r2, sp
    6c26:	2103      	movs	r1, #3
    6c28:	4620      	mov	r0, r4
    6c2a:	f7ff fead 	bl	6988 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>
    6c2e:	b328      	cbz	r0, 6c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f0>
    6c30:	7b20      	ldrb	r0, [r4, #12]
    6c32:	b168      	cbz	r0, 6c50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6c34:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    6c38:	f88d 0004 	strb.w	r0, [sp, #4]
    6c3c:	9801      	ldr	r0, [sp, #4]
    6c3e:	9001      	str	r0, [sp, #4]
    6c40:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6c44:	b920      	cbnz	r0, 6c50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5c4>
    6c46:	f89d 1000 	ldrb.w	r1, [sp]
    6c4a:	4620      	mov	r0, r4
    6c4c:	f7ff fe60 	bl	6910 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    6c50:	4e0c      	ldr	r6, [pc, #48]	; (6c84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    6c52:	2100      	movs	r1, #0
    6c54:	6870      	ldr	r0, [r6, #4]
    6c56:	8001      	strh	r1, [r0, #0]
    6c58:	2104      	movs	r1, #4
    6c5a:	f006 fa5a 	bl	d112 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6c5e:	4620      	mov	r0, r4
    6c60:	f000 f88a 	bl	6d78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ec>
    6c64:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    6c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6c68:	6870      	ldr	r0, [r6, #4]
    6c6a:	f006 fa89 	bl	d180 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6c6e:	4906      	ldr	r1, [pc, #24]	; (6c88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    6c70:	2005      	movs	r0, #5
    6c72:	7008      	strb	r0, [r1, #0]
    6c74:	6870      	ldr	r0, [r6, #4]
    6c76:	f003 ff6d 	bl	ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6c7a:	e000      	b.n	6c7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f2>
    6c7c:	2500      	movs	r5, #0
    6c7e:	4628      	mov	r0, r5
    6c80:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6c82:	0000      	.short	0x0000
    6c84:	20000100 	.word	0x20000100
    6c88:	200342bc 	.word	0x200342bc
    6c8c:	b570      	push	{r4, r5, r6, lr}
    6c8e:	4604      	mov	r4, r0
    6c90:	460e      	mov	r6, r1
    6c92:	7e40      	ldrb	r0, [r0, #25]
    6c94:	f7fe fc28 	bl	54e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6c98:	0005      	movs	r5, r0
    6c9a:	d019      	beq.n	6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6c9c:	2110      	movs	r1, #16
    6c9e:	f006 f865 	bl	cd6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6ca2:	2800      	cmp	r0, #0
    6ca4:	d114      	bne.n	6cd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>
    6ca6:	2001      	movs	r0, #1
    6ca8:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    6cac:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6cb0:	4632      	mov	r2, r6
    6cb2:	460c      	mov	r4, r1
    6cb4:	4628      	mov	r0, r5
    6cb6:	f005 fe12 	bl	c8de <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6cba:	4621      	mov	r1, r4
    6cbc:	4c05      	ldr	r4, [pc, #20]	; (6cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>)
    6cbe:	6860      	ldr	r0, [r4, #4]
    6cc0:	f006 fa42 	bl	d148 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6cc4:	6860      	ldr	r0, [r4, #4]
    6cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6cca:	2101      	movs	r1, #1
    6ccc:	f006 ba42 	b.w	d154 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6cd0:	bd70      	pop	{r4, r5, r6, pc}
    6cd2:	0000      	.short	0x0000
    6cd4:	20000100 	.word	0x20000100
    6cd8:	4802      	ldr	r0, [pc, #8]	; (6ce4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    6cda:	2101      	movs	r1, #1
    6cdc:	6800      	ldr	r0, [r0, #0]
    6cde:	f7ff bb57 	b.w	6390 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6ce2:	0000      	.short	0x0000
    6ce4:	20000100 	.word	0x20000100
    6ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cec:	4e21      	ldr	r6, [pc, #132]	; (6d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    6cee:	4680      	mov	r8, r0
    6cf0:	460c      	mov	r4, r1
    6cf2:	6870      	ldr	r0, [r6, #4]
    6cf4:	4615      	mov	r5, r2
    6cf6:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6cfa:	60e1      	str	r1, [r4, #12]
    6cfc:	8881      	ldrh	r1, [r0, #4]
    6cfe:	8221      	strh	r1, [r4, #16]
    6d00:	7981      	ldrb	r1, [r0, #6]
    6d02:	74a1      	strb	r1, [r4, #18]
    6d04:	8940      	ldrh	r0, [r0, #10]
    6d06:	f005 fea2 	bl	ca4e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6d0a:	4607      	mov	r7, r0
    6d0c:	6060      	str	r0, [r4, #4]
    6d0e:	6870      	ldr	r0, [r6, #4]
    6d10:	4639      	mov	r1, r7
    6d12:	7d80      	ldrb	r0, [r0, #22]
    6d14:	f006 f825 	bl	cd62 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6d18:	82a0      	strh	r0, [r4, #20]
    6d1a:	6870      	ldr	r0, [r6, #4]
    6d1c:	4639      	mov	r1, r7
    6d1e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6d22:	f006 f81a 	bl	cd5a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6d26:	61a0      	str	r0, [r4, #24]
    6d28:	6870      	ldr	r0, [r6, #4]
    6d2a:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6d2e:	8121      	strh	r1, [r4, #8]
    6d30:	8841      	ldrh	r1, [r0, #2]
    6d32:	8161      	strh	r1, [r4, #10]
    6d34:	6841      	ldr	r1, [r0, #4]
    6d36:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    6d3a:	7a01      	ldrb	r1, [r0, #8]
    6d3c:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
    6d40:	7a41      	ldrb	r1, [r0, #9]
    6d42:	f001 011f 	and.w	r1, r1, #31
    6d46:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
    6d4a:	7a40      	ldrb	r0, [r0, #9]
    6d4c:	0940      	lsrs	r0, r0, #5
    6d4e:	f884 016d 	strb.w	r0, [r4, #365]	; 0x16d
    6d52:	f104 005a 	add.w	r0, r4, #90	; 0x5a
    6d56:	2101      	movs	r1, #1
    6d58:	7205      	strb	r5, [r0, #8]
    6d5a:	7245      	strb	r5, [r0, #9]
    6d5c:	7281      	strb	r1, [r0, #10]
    6d5e:	2100      	movs	r1, #0
    6d60:	3836      	subs	r0, #54	; 0x36
    6d62:	f006 fb48 	bl	d3f6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    6d66:	f898 000e 	ldrb.w	r0, [r8, #14]
    6d6a:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
    6d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d72:	0000      	.short	0x0000
    6d74:	20000100 	.word	0x20000100
    6d78:	b570      	push	{r4, r5, r6, lr}
    6d7a:	4d07      	ldr	r5, [pc, #28]	; (6d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x70c>)
    6d7c:	4604      	mov	r4, r0
    6d7e:	f100 0149 	add.w	r1, r0, #73	; 0x49
    6d82:	6868      	ldr	r0, [r5, #4]
    6d84:	f006 f9ed 	bl	d162 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    6d88:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    6d8c:	6868      	ldr	r0, [r5, #4]
    6d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d92:	f006 b9ec 	b.w	d16e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    6d96:	0000      	.short	0x0000
    6d98:	20000100 	.word	0x20000100
    6d9c:	d6555555 	.word	0xd6555555
    6da0:	008e89be 	.word	0x008e89be
    6da4:	00006615 	.word	0x00006615
    6da8:	000064a5 	.word	0x000064a5
    6dac:	0000657d 	.word	0x0000657d
    6db0:	00000000 	.word	0x00000000
    6db4:	00006555 	.word	0x00006555
    6db8:	000065ad 	.word	0x000065ad
    6dbc:	0000d757 	.word	0x0000d757
    6dc0:	0000d75d 	.word	0x0000d75d
    6dc4:	0000680d 	.word	0x0000680d
    6dc8:	00006831 	.word	0x00006831
    6dcc:	00006cd9 	.word	0x00006cd9
    6dd0:	00006dc0 	.word	0x00006dc0
    6dd4:	00006db8 	.word	0x00006db8
    6dd8:	00006db4 	.word	0x00006db4

00006ddc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    6ddc:	b510      	push	{r4, lr}
    6dde:	1e42      	subs	r2, r0, #1
    6de0:	2a02      	cmp	r2, #2
    6de2:	d901      	bls.n	6de8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    6de4:	21ca      	movs	r1, #202	; 0xca
    6de6:	e009      	b.n	6dfc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    6de8:	1e40      	subs	r0, r0, #1
    6dea:	2910      	cmp	r1, #16
    6dec:	d009      	beq.n	6e02 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    6dee:	2912      	cmp	r1, #18
    6df0:	d00c      	beq.n	6e0c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6df2:	2913      	cmp	r1, #19
    6df4:	d00a      	beq.n	6e0c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    6df6:	2915      	cmp	r1, #21
    6df8:	d005      	beq.n	6e06 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    6dfa:	21d8      	movs	r1, #216	; 0xd8
    6dfc:	202f      	movs	r0, #47	; 0x2f
    6dfe:	f7fc fed3 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e02:	4905      	ldr	r1, [pc, #20]	; (6e18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6e04:	e004      	b.n	6e10 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6e06:	4904      	ldr	r1, [pc, #16]	; (6e18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6e08:	1d89      	adds	r1, r1, #6
    6e0a:	e001      	b.n	6e10 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    6e0c:	4902      	ldr	r1, [pc, #8]	; (6e18 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    6e0e:	1f89      	subs	r1, r1, #6
    6e10:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    6e14:	bd10      	pop	{r4, pc}
    6e16:	0000      	.short	0x0000
    6e18:	0000d9aa 	.word	0x0000d9aa

00006e1c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    6e1c:	1e42      	subs	r2, r0, #1
    6e1e:	b510      	push	{r4, lr}
    6e20:	b2d2      	uxtb	r2, r2
    6e22:	2a01      	cmp	r2, #1
    6e24:	d903      	bls.n	6e2e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6e26:	291d      	cmp	r1, #29
    6e28:	d001      	beq.n	6e2e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    6e2a:	21ee      	movs	r1, #238	; 0xee
    6e2c:	e00d      	b.n	6e4a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    6e2e:	2913      	cmp	r1, #19
    6e30:	d013      	beq.n	6e5a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6e32:	dc04      	bgt.n	6e3e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    6e34:	2910      	cmp	r1, #16
    6e36:	d00b      	beq.n	6e50 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    6e38:	2912      	cmp	r1, #18
    6e3a:	d104      	bne.n	6e46 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    6e3c:	e00d      	b.n	6e5a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    6e3e:	2915      	cmp	r1, #21
    6e40:	d008      	beq.n	6e54 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    6e42:	291d      	cmp	r1, #29
    6e44:	d00e      	beq.n	6e64 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    6e46:	f44f 7181 	mov.w	r1, #258	; 0x102
    6e4a:	202f      	movs	r0, #47	; 0x2f
    6e4c:	f7fc feac 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e50:	4807      	ldr	r0, [pc, #28]	; (6e70 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e52:	e004      	b.n	6e5e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6e54:	4806      	ldr	r0, [pc, #24]	; (6e70 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e56:	3008      	adds	r0, #8
    6e58:	e001      	b.n	6e5e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    6e5a:	4805      	ldr	r0, [pc, #20]	; (6e70 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    6e5c:	1d00      	adds	r0, r0, #4
    6e5e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    6e62:	bd10      	pop	{r4, pc}
    6e64:	f240 315a 	movw	r1, #858	; 0x35a
    6e68:	fb10 f001 	smulbb	r0, r0, r1
    6e6c:	bd10      	pop	{r4, pc}
    6e6e:	0000      	.short	0x0000
    6e70:	0000d998 	.word	0x0000d998

00006e74 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    6e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e78:	4604      	mov	r4, r0
    6e7a:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    6e7e:	4615      	mov	r5, r2
    6e80:	460f      	mov	r7, r1
    6e82:	2800      	cmp	r0, #0
    6e84:	d15d      	bne.n	6f42 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    6e86:	4621      	mov	r1, r4
    6e88:	4844      	ldr	r0, [pc, #272]	; (6f9c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x128>)
    6e8a:	f7fb f9d3 	bl	2234 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    6e8e:	4606      	mov	r6, r0
    6e90:	2820      	cmp	r0, #32
    6e92:	d056      	beq.n	6f42 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xce>
    6e94:	2234      	movs	r2, #52	; 0x34
    6e96:	2100      	movs	r1, #0
    6e98:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6e9c:	f004 fd13 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ea0:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    6ea4:	2601      	movs	r6, #1
    6ea6:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
    6eaa:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    6eae:	b15f      	cbz	r7, 6ec8 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    6eb0:	2101      	movs	r1, #1
    6eb2:	f507 708e 	add.w	r0, r7, #284	; 0x11c
    6eb6:	f7fc ff2b 	bl	3d10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    6eba:	f897 011c 	ldrb.w	r0, [r7, #284]	; 0x11c
    6ebe:	f000 0007 	and.w	r0, r0, #7
    6ec2:	1c40      	adds	r0, r0, #1
    6ec4:	f887 011c 	strb.w	r0, [r7, #284]	; 0x11c
    6ec8:	4620      	mov	r0, r4
    6eca:	f006 ff13 	bl	dcf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    6ece:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    6ed2:	2003      	movs	r0, #3
    6ed4:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    6ed8:	f884 60d7 	strb.w	r6, [r4, #215]	; 0xd7
    6edc:	2700      	movs	r7, #0
    6ede:	f804 7fcc 	strb.w	r7, [r4, #204]!
    6ee2:	f7fa fc41 	bl	1768 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    6ee6:	8921      	ldrh	r1, [r4, #8]
    6ee8:	3ccc      	subs	r4, #204	; 0xcc
    6eea:	4288      	cmp	r0, r1
    6eec:	d800      	bhi.n	6ef0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    6eee:	4608      	mov	r0, r1
    6ef0:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    6ef4:	fa1f f880 	uxth.w	r8, r0
    6ef8:	4620      	mov	r0, r4
    6efa:	f006 fb9f 	bl	d63c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6efe:	b318      	cbz	r0, 6f48 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd4>
    6f00:	4827      	ldr	r0, [pc, #156]	; (6fa0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x12c>)
    6f02:	7800      	ldrb	r0, [r0, #0]
    6f04:	f000 f8e4 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    6f08:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    6f0c:	b281      	uxth	r1, r0
    6f0e:	4628      	mov	r0, r5
    6f10:	f004 fb1e 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    6f14:	4428      	add	r0, r5
    6f16:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
    6f1a:	34b8      	adds	r4, #184	; 0xb8
    6f1c:	f004 fad9 	bl	b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f20:	4641      	mov	r1, r8
    6f22:	f7fa facb 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6f26:	6220      	str	r0, [r4, #32]
    6f28:	f804 7c03 	strb.w	r7, [r4, #-3]
    6f2c:	7126      	strb	r6, [r4, #4]
    6f2e:	2001      	movs	r0, #1
    6f30:	f006 fd2b 	bl	d98a <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6f34:	f200 1007 	addw	r0, r0, #263	; 0x107
    6f38:	1a28      	subs	r0, r5, r0
    6f3a:	62a7      	str	r7, [r4, #40]	; 0x28
    6f3c:	60a0      	str	r0, [r4, #8]
    6f3e:	3cb8      	subs	r4, #184	; 0xb8
    6f40:	e017      	b.n	6f72 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfe>
    6f42:	200c      	movs	r0, #12
    6f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f48:	4620      	mov	r0, r4
    6f4a:	f006 fe81 	bl	dc50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    6f4e:	f844 0fd0 	str.w	r0, [r4, #208]!
    6f52:	f804 6c1b 	strb.w	r6, [r4, #-27]
    6f56:	f004 fabc 	bl	b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6f5a:	4606      	mov	r6, r0
    6f5c:	2000      	movs	r0, #0
    6f5e:	f006 ff78 	bl	de52 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    6f62:	eb00 0108 	add.w	r1, r0, r8
    6f66:	4630      	mov	r0, r6
    6f68:	f7fa faa8 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    6f6c:	6125      	str	r5, [r4, #16]
    6f6e:	60a0      	str	r0, [r4, #8]
    6f70:	3cd0      	subs	r4, #208	; 0xd0
    6f72:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    6f76:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    6f7a:	f006 feb9 	bl	dcf0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    6f7e:	b138      	cbz	r0, 6f90 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x11c>
    6f80:	f8a4 70dc 	strh.w	r7, [r4, #220]	; 0xdc
    6f84:	2100      	movs	r1, #0
    6f86:	4620      	mov	r0, r4
    6f88:	f006 fbb8 	bl	d6fc <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    6f8c:	2000      	movs	r0, #0
    6f8e:	e7d9      	b.n	6f44 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    6f90:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
    6f94:	2030      	movs	r0, #48	; 0x30
    6f96:	f7fc fe07 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f9a:	0000      	.short	0x0000
    6f9c:	00007789 	.word	0x00007789
    6fa0:	20000110 	.word	0x20000110

00006fa4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    6fa4:	4804      	ldr	r0, [pc, #16]	; (6fb8 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x14>)
    6fa6:	2101      	movs	r1, #1
    6fa8:	2200      	movs	r2, #0
    6faa:	7001      	strb	r1, [r0, #0]
    6fac:	7042      	strb	r2, [r0, #1]
    6fae:	70c1      	strb	r1, [r0, #3]
    6fb0:	7082      	strb	r2, [r0, #2]
    6fb2:	f006 bd57 	b.w	da64 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    6fb6:	0000      	.short	0x0000
    6fb8:	20000110 	.word	0x20000110

00006fbc <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>:
    6fbc:	4901      	ldr	r1, [pc, #4]	; (6fc4 <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI+0x8>)
    6fbe:	7008      	strb	r0, [r1, #0]
    6fc0:	4770      	bx	lr
    6fc2:	0000      	.short	0x0000
    6fc4:	20000110 	.word	0x20000110

00006fc8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    6fc8:	4901      	ldr	r1, [pc, #4]	; (6fd0 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    6fca:	7048      	strb	r0, [r1, #1]
    6fcc:	4770      	bx	lr
    6fce:	0000      	.short	0x0000
    6fd0:	20000110 	.word	0x20000110

00006fd4 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    6fd4:	4905      	ldr	r1, [pc, #20]	; (6fec <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    6fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6fda:	fbb1 f1f2 	udiv	r1, r1, r2
    6fde:	b510      	push	{r4, lr}
    6fe0:	f201 218b 	addw	r1, r1, #651	; 0x28b
    6fe4:	f006 fa20 	bl	d428 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    6fe8:	b280      	uxth	r0, r0
    6fea:	bd10      	pop	{r4, pc}
    6fec:	0001527d 	.word	0x0001527d

00006ff0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    6ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ff4:	4c10      	ldr	r4, [pc, #64]	; (7038 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    6ff6:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    6ffa:	f003 fcb1 	bl	a960 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    6ffe:	4606      	mov	r6, r0
    7000:	7860      	ldrb	r0, [r4, #1]
    7002:	b128      	cbz	r0, 7010 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7004:	4632      	mov	r2, r6
    7006:	4639      	mov	r1, r7
    7008:	4628      	mov	r0, r5
    700a:	f005 fd2a 	bl	ca62 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    700e:	4605      	mov	r5, r0
    7010:	6860      	ldr	r0, [r4, #4]
    7012:	4285      	cmp	r5, r0
    7014:	d005      	beq.n	7022 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    7016:	68e1      	ldr	r1, [r4, #12]
    7018:	1a28      	subs	r0, r5, r0
    701a:	4408      	add	r0, r1
    701c:	60e0      	str	r0, [r4, #12]
    701e:	f7fb fa0b 	bl	2438 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7022:	6065      	str	r5, [r4, #4]
    7024:	42ae      	cmp	r6, r5
    7026:	d801      	bhi.n	702c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    7028:	78a0      	ldrb	r0, [r4, #2]
    702a:	b110      	cbz	r0, 7032 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    702c:	2000      	movs	r0, #0
    702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7032:	2001      	movs	r0, #1
    7034:	e7fb      	b.n	702e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    7036:	0000      	.short	0x0000
    7038:	20000110 	.word	0x20000110

0000703c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    703c:	b570      	push	{r4, r5, r6, lr}
    703e:	4c22      	ldr	r4, [pc, #136]	; (70c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    7040:	4605      	mov	r5, r0
    7042:	2906      	cmp	r1, #6
    7044:	d23c      	bcs.n	70c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    7046:	e8df f001 	tbb	[pc, r1]
    704a:	0b05      	.short	0x0b05
    704c:	250f0e03 	.word	0x250f0e03
    7050:	2100      	movs	r1, #0
    7052:	e000      	b.n	7056 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    7054:	2101      	movs	r1, #1
    7056:	4628      	mov	r0, r5
    7058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    705c:	f000 b94c 	b.w	72f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2bc>
    7060:	2003      	movs	r0, #3
    7062:	f885 012c 	strb.w	r0, [r5, #300]	; 0x12c
    7066:	bd70      	pop	{r4, r5, r6, pc}
    7068:	f003 fcae 	bl	a9c8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    706c:	f8c5 0168 	str.w	r0, [r5, #360]	; 0x168
    7070:	f895 0063 	ldrb.w	r0, [r5, #99]	; 0x63
    7074:	f008 f826 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7078:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
    707c:	1a08      	subs	r0, r1, r0
    707e:	6861      	ldr	r1, [r4, #4]
    7080:	4401      	add	r1, r0
    7082:	6061      	str	r1, [r4, #4]
    7084:	68a1      	ldr	r1, [r4, #8]
    7086:	4408      	add	r0, r1
    7088:	60a0      	str	r0, [r4, #8]
    708a:	4628      	mov	r0, r5
    708c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7090:	f000 b8d2 	b.w	7238 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    7094:	f003 fc64 	bl	a960 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7098:	4601      	mov	r1, r0
    709a:	2200      	movs	r2, #0
    709c:	69a0      	ldr	r0, [r4, #24]
    709e:	f006 fe8d 	bl	ddbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f2>
    70a2:	69a0      	ldr	r0, [r4, #24]
    70a4:	4909      	ldr	r1, [pc, #36]	; (70cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    70a6:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
    70aa:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    70ae:	f7fa ff87 	bl	1fc0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    70b2:	2800      	cmp	r0, #0
    70b4:	d1d7      	bne.n	7066 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    70b6:	f240 717a 	movw	r1, #1914	; 0x77a
    70ba:	2030      	movs	r0, #48	; 0x30
    70bc:	f7fc fd74 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70c0:	f240 7191 	movw	r1, #1937	; 0x791
    70c4:	e7f9      	b.n	70ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    70c6:	0000      	.short	0x0000
    70c8:	20000110 	.word	0x20000110
    70cc:	0000de7d 	.word	0x0000de7d
    70d0:	b510      	push	{r4, lr}
    70d2:	280c      	cmp	r0, #12
    70d4:	d304      	bcc.n	70e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    70d6:	f44f 7140 	mov.w	r1, #768	; 0x300
    70da:	2006      	movs	r0, #6
    70dc:	f7fc fd64 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70e0:	4901      	ldr	r1, [pc, #4]	; (70e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    70e2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    70e6:	bd10      	pop	{r4, pc}
    70e8:	0000df5e 	.word	0x0000df5e
    70ec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    70ee:	4c18      	ldr	r4, [pc, #96]	; (7150 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    70f0:	2001      	movs	r0, #1
    70f2:	70a0      	strb	r0, [r4, #2]
    70f4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    70f8:	e00b      	b.n	7112 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    70fa:	2100      	movs	r1, #0
    70fc:	f005 fb61 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7100:	0006      	movs	r6, r0
    7102:	d010      	beq.n	7126 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7104:	f896 0160 	ldrb.w	r0, [r6, #352]	; 0x160
    7108:	f7fa ff8c 	bl	2024 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    710c:	4630      	mov	r0, r6
    710e:	f006 fe48 	bl	dda2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7112:	4669      	mov	r1, sp
    7114:	2000      	movs	r0, #0
    7116:	f005 fb5e 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    711a:	b180      	cbz	r0, 713e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    711c:	f240 1111 	movw	r1, #273	; 0x111
    7120:	2030      	movs	r0, #48	; 0x30
    7122:	f7fc fd41 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7126:	f240 1131 	movw	r1, #305	; 0x131
    712a:	e7f9      	b.n	7120 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    712c:	9802      	ldr	r0, [sp, #8]
    712e:	b130      	cbz	r0, 713e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7130:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    7134:	b119      	cbz	r1, 713e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    7136:	8800      	ldrh	r0, [r0, #0]
    7138:	42a8      	cmp	r0, r5
    713a:	d1de      	bne.n	70fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    713c:	e004      	b.n	7148 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    713e:	4668      	mov	r0, sp
    7140:	f7fc ff84 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7144:	2800      	cmp	r0, #0
    7146:	d0f1      	beq.n	712c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    7148:	2000      	movs	r0, #0
    714a:	70a0      	strb	r0, [r4, #2]
    714c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    714e:	0000      	.short	0x0000
    7150:	20000110 	.word	0x20000110
    7154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7158:	4604      	mov	r4, r0
    715a:	4836      	ldr	r0, [pc, #216]	; (7234 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    715c:	461e      	mov	r6, r3
    715e:	4690      	mov	r8, r2
    7160:	78c0      	ldrb	r0, [r0, #3]
    7162:	4689      	mov	r9, r1
    7164:	2500      	movs	r5, #0
    7166:	b368      	cbz	r0, 71c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7168:	f7fc f9c8 	bl	34fc <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    716c:	b350      	cbz	r0, 71c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    716e:	f8b4 0118 	ldrh.w	r0, [r4, #280]	; 0x118
    7172:	2802      	cmp	r0, #2
    7174:	d326      	bcc.n	71c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7176:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    717a:	2802      	cmp	r0, #2
    717c:	d022      	beq.n	71c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    717e:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
    7182:	b9f8      	cbnz	r0, 71c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7184:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7188:	f7ff ffa2 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    718c:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7190:	b281      	uxth	r1, r0
    7192:	8031      	strh	r1, [r6, #0]
    7194:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7198:	2700      	movs	r7, #0
    719a:	2801      	cmp	r0, #1
    719c:	d015      	beq.n	71ca <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    719e:	6860      	ldr	r0, [r4, #4]
    71a0:	f004 f9d6 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71a4:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    71a8:	b280      	uxth	r0, r0
    71aa:	4442      	add	r2, r8
    71ac:	eba2 0109 	sub.w	r1, r2, r9
    71b0:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
    71b4:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    71b8:	1a82      	subs	r2, r0, r2
    71ba:	fb01 7502 	mla	r5, r1, r2, r7
    71be:	2001      	movs	r0, #1
    71c0:	f884 0142 	strb.w	r0, [r4, #322]	; 0x142
    71c4:	4628      	mov	r0, r5
    71c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71ca:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    71ce:	2803      	cmp	r0, #3
    71d0:	d02c      	beq.n	722c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    71d2:	2101      	movs	r1, #1
    71d4:	2000      	movs	r0, #0
    71d6:	f005 fcfe 	bl	cbd6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    71da:	69a1      	ldr	r1, [r4, #24]
    71dc:	1847      	adds	r7, r0, r1
    71de:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    71e2:	8831      	ldrh	r1, [r6, #0]
    71e4:	34c8      	adds	r4, #200	; 0xc8
    71e6:	f004 f9b3 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
    71ec:	6e21      	ldr	r1, [r4, #96]	; 0x60
    71ee:	1a82      	subs	r2, r0, r2
    71f0:	fb01 5502 	mla	r5, r1, r2, r5
    71f4:	65a0      	str	r0, [r4, #88]	; 0x58
    71f6:	8831      	ldrh	r1, [r6, #0]
    71f8:	4638      	mov	r0, r7
    71fa:	f004 f9a9 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71fe:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7200:	66a0      	str	r0, [r4, #104]	; 0x68
    7202:	1a41      	subs	r1, r0, r1
    7204:	440d      	add	r5, r1
    7206:	8831      	ldrh	r1, [r6, #0]
    7208:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    720c:	f004 f9a0 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7210:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    7212:	4442      	add	r2, r8
    7214:	eba2 0109 	sub.w	r1, r2, r9
    7218:	6e22      	ldr	r2, [r4, #96]	; 0x60
    721a:	1a89      	subs	r1, r1, r2
    721c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    721e:	1e49      	subs	r1, r1, #1
    7220:	1a82      	subs	r2, r0, r2
    7222:	fb01 5502 	mla	r5, r1, r2, r5
    7226:	66e0      	str	r0, [r4, #108]	; 0x6c
    7228:	3cc8      	subs	r4, #200	; 0xc8
    722a:	e7c8      	b.n	71be <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    722c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7230:	e7d3      	b.n	71da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    7232:	0000      	.short	0x0000
    7234:	20000110 	.word	0x20000110
    7238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    723c:	4604      	mov	r4, r0
    723e:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    7242:	2800      	cmp	r0, #0
    7244:	d053      	beq.n	72ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    7246:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    724a:	2803      	cmp	r0, #3
    724c:	d14f      	bne.n	72ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b2>
    724e:	4829      	ldr	r0, [pc, #164]	; (72f4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2b8>)
    7250:	f894 9063 	ldrb.w	r9, [r4, #99]	; 0x63
    7254:	7800      	ldrb	r0, [r0, #0]
    7256:	f7ff ff3b 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    725a:	4605      	mov	r5, r0
    725c:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7260:	f7ff ff36 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7264:	4428      	add	r0, r5
    7266:	b286      	uxth	r6, r0
    7268:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    726c:	f7ff ff30 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7270:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7274:	fa1f f880 	uxth.w	r8, r0
    7278:	4648      	mov	r0, r9
    727a:	f007 ff23 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    727e:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7282:	1a0d      	subs	r5, r1, r0
    7284:	4648      	mov	r0, r9
    7286:	f007 ff2b 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    728a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    728e:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    7292:	fbb0 f0fa 	udiv	r0, r0, sl
    7296:	1a2d      	subs	r5, r5, r0
    7298:	4648      	mov	r0, r9
    729a:	f007 ff13 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    729e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
    72a2:	1a0f      	subs	r7, r1, r0
    72a4:	4648      	mov	r0, r9
    72a6:	f007 ff1b 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    72aa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    72ae:	4401      	add	r1, r0
    72b0:	fbb1 f0fa 	udiv	r0, r1, sl
    72b4:	1a39      	subs	r1, r7, r0
    72b6:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    72ba:	4370      	muls	r0, r6
    72bc:	fbb0 f2f8 	udiv	r2, r0, r8
    72c0:	2029      	movs	r0, #41	; 0x29
    72c2:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    72c6:	3260      	adds	r2, #96	; 0x60
    72c8:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    72cc:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    72d0:	42a9      	cmp	r1, r5
    72d2:	d801      	bhi.n	72d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x29c>
    72d4:	4285      	cmp	r5, r0
    72d6:	d901      	bls.n	72dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a0>
    72d8:	f7fc f8f2 	bl	34c0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    72dc:	4631      	mov	r1, r6
    72de:	6860      	ldr	r0, [r4, #4]
    72e0:	f004 f936 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    72e4:	2100      	movs	r1, #0
    72e6:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    72ea:	f884 1142 	strb.w	r1, [r4, #322]	; 0x142
    72ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    72f2:	0000      	.short	0x0000
    72f4:	20000110 	.word	0x20000110
    72f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72fa:	460e      	mov	r6, r1
    72fc:	4604      	mov	r4, r0
    72fe:	f003 fb2f 	bl	a960 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7302:	2500      	movs	r5, #0
    7304:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
    7308:	2e01      	cmp	r6, #1
    730a:	d102      	bne.n	7312 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2d6>
    730c:	480f      	ldr	r0, [pc, #60]	; (734c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x310>)
    730e:	7880      	ldrb	r0, [r0, #2]
    7310:	b168      	cbz	r0, 732e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2f2>
    7312:	2004      	movs	r0, #4
    7314:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    7318:	f006 fcd1 	bl	dcbe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    731c:	f8a4 515e 	strh.w	r5, [r4, #350]	; 0x15e
    7320:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    7324:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7328:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    732c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    732e:	9500      	str	r5, [sp, #0]
    7330:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    7334:	2301      	movs	r3, #1
    7336:	2200      	movs	r2, #0
    7338:	4620      	mov	r0, r4
    733a:	f000 f809 	bl	7350 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    733e:	2800      	cmp	r0, #0
    7340:	d0ea      	beq.n	7318 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2dc>
    7342:	f240 61e2 	movw	r1, #1762	; 0x6e2
    7346:	2030      	movs	r0, #48	; 0x30
    7348:	f7fc fc2e 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    734c:	20000110 	.word	0x20000110
    7350:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7354:	4604      	mov	r4, r0
    7356:	b085      	sub	sp, #20
    7358:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    735c:	f8df b424 	ldr.w	fp, [pc, #1060]	; 7784 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x748>
    7360:	e9cd 3000 	strd	r3, r0, [sp]
    7364:	4699      	mov	r9, r3
    7366:	460f      	mov	r7, r1
    7368:	f89b 0000 	ldrb.w	r0, [fp]
    736c:	f7ff feb0 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7370:	4605      	mov	r5, r0
    7372:	f894 016d 	ldrb.w	r0, [r4, #365]	; 0x16d
    7376:	f7ff feab 	bl	70d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    737a:	4428      	add	r0, r5
    737c:	f8ad 0008 	strh.w	r0, [sp, #8]
    7380:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    7384:	280d      	cmp	r0, #13
    7386:	d004      	beq.n	7392 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x356>
    7388:	2000      	movs	r0, #0
    738a:	9003      	str	r0, [sp, #12]
    738c:	9807      	ldr	r0, [sp, #28]
    738e:	b110      	cbz	r0, 7396 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x35a>
    7390:	e02e      	b.n	73f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    7392:	2001      	movs	r0, #1
    7394:	e7f9      	b.n	738a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x34e>
    7396:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    739a:	2803      	cmp	r0, #3
    739c:	d128      	bne.n	73f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    739e:	9803      	ldr	r0, [sp, #12]
    73a0:	b330      	cbz	r0, 73f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    73a2:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    73a6:	42b8      	cmp	r0, r7
    73a8:	d122      	bne.n	73f0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3b4>
    73aa:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
    73ae:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
    73b2:	6860      	ldr	r0, [r4, #4]
    73b4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    73b8:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    73bc:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    73c0:	4408      	add	r0, r1
    73c2:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    73c6:	4620      	mov	r0, r4
    73c8:	f006 fddf 	bl	df8a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    73cc:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    73d0:	61a0      	str	r0, [r4, #24]
    73d2:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
    73d6:	82a0      	strh	r0, [r4, #20]
    73d8:	f8d4 0194 	ldr.w	r0, [r4, #404]	; 0x194
    73dc:	6060      	str	r0, [r4, #4]
    73de:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    73e2:	8120      	strh	r0, [r4, #8]
    73e4:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    73e8:	8160      	strh	r0, [r4, #10]
    73ea:	2002      	movs	r0, #2
    73ec:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    73f0:	f8b4 006c 	ldrh.w	r0, [r4, #108]	; 0x6c
    73f4:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    73f8:	1a38      	subs	r0, r7, r0
    73fa:	fa0f fa80 	sxth.w	sl, r0
    73fe:	f8b4 015c 	ldrh.w	r0, [r4, #348]	; 0x15c
    7402:	1a38      	subs	r0, r7, r0
    7404:	fa0f f880 	sxth.w	r8, r0
    7408:	f1b8 0f00 	cmp.w	r8, #0
    740c:	da06      	bge.n	741c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3e0>
    740e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    7412:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
    7416:	2001      	movs	r0, #1
    7418:	46d0      	mov	r8, sl
    741a:	9000      	str	r0, [sp, #0]
    741c:	ab02      	add	r3, sp, #8
    741e:	4652      	mov	r2, sl
    7420:	4641      	mov	r1, r8
    7422:	4620      	mov	r0, r4
    7424:	f7ff fe96 	bl	7154 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    7428:	9004      	str	r0, [sp, #16]
    742a:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    742e:	b140      	cbz	r0, 7442 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x406>
    7430:	2801      	cmp	r0, #1
    7432:	d07c      	beq.n	752e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f2>
    7434:	2802      	cmp	r0, #2
    7436:	d05a      	beq.n	74ee <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4b2>
    7438:	2803      	cmp	r0, #3
    743a:	d079      	beq.n	7530 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f4>
    743c:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    7440:	e19c      	b.n	777c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    7442:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7446:	b3e8      	cbz	r0, 74c4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    7448:	2101      	movs	r1, #1
    744a:	2000      	movs	r0, #0
    744c:	f005 fbc3 	bl	cbd6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7450:	4606      	mov	r6, r0
    7452:	69a0      	ldr	r0, [r4, #24]
    7454:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7458:	4430      	add	r0, r6
    745a:	f004 f879 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    745e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7462:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7466:	6860      	ldr	r0, [r4, #4]
    7468:	f004 f872 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    746c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7470:	a901      	add	r1, sp, #4
    7472:	4668      	mov	r0, sp
    7474:	f003 f9d2 	bl	a81c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    7478:	e9dd 1200 	ldrd	r1, r2, [sp]
    747c:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7480:	f7fb f88c 	bl	259c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    7484:	4682      	mov	sl, r0
    7486:	4620      	mov	r0, r4
    7488:	f006 fc0b 	bl	dca2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    748c:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7490:	f8d4 8164 	ldr.w	r8, [r4, #356]	; 0x164
    7494:	f007 fe24 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    7498:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    749c:	4401      	add	r1, r0
    749e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    74a2:	fbb1 f0f0 	udiv	r0, r1, r0
    74a6:	69a1      	ldr	r1, [r4, #24]
    74a8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    74ac:	4431      	add	r1, r6
    74ae:	1a08      	subs	r0, r1, r0
    74b0:	1a81      	subs	r1, r0, r2
    74b2:	4441      	add	r1, r8
    74b4:	3920      	subs	r1, #32
    74b6:	eba1 060a 	sub.w	r6, r1, sl
    74ba:	0050      	lsls	r0, r2, #1
    74bc:	8aa1      	ldrh	r1, [r4, #20]
    74be:	3060      	adds	r0, #96	; 0x60
    74c0:	4401      	add	r1, r0
    74c2:	e000      	b.n	74c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    74c4:	e010      	b.n	74e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4ac>
    74c6:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    74ca:	f006 fbff 	bl	dccc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    74ce:	3020      	adds	r0, #32
    74d0:	f8cb 0010 	str.w	r0, [fp, #16]
    74d4:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    74d8:	4659      	mov	r1, fp
    74da:	1a30      	subs	r0, r6, r0
    74dc:	f5b0 7fd7 	cmp.w	r0, #430	; 0x1ae
    74e0:	d85c      	bhi.n	759c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x560>
    74e2:	f240 41f9 	movw	r1, #1273	; 0x4f9
    74e6:	e149      	b.n	777c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    74e8:	f240 41d7 	movw	r1, #1239	; 0x4d7
    74ec:	e146      	b.n	777c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    74ee:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    74f2:	69a0      	ldr	r0, [r4, #24]
    74f4:	4408      	add	r0, r1
    74f6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    74fa:	f004 f829 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    74fe:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    7502:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7506:	6860      	ldr	r0, [r4, #4]
    7508:	f004 f822 	bl	b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    750c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    7510:	4620      	mov	r0, r4
    7512:	f006 fbc6 	bl	dca2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d8>
    7516:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    751a:	bb10      	cbnz	r0, 7562 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    751c:	f1b9 0f00 	cmp.w	r9, #0
    7520:	d01f      	beq.n	7562 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x526>
    7522:	f894 8063 	ldrb.w	r8, [r4, #99]	; 0x63
    7526:	4640      	mov	r0, r8
    7528:	f007 fdda 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    752c:	e001      	b.n	7532 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    752e:	e036      	b.n	759e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x562>
    7530:	e052      	b.n	75d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x59c>
    7532:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7536:	4401      	add	r1, r0
    7538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    753c:	fbb1 f0f0 	udiv	r0, r1, r0
    7540:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    7544:	69a2      	ldr	r2, [r4, #24]
    7546:	4408      	add	r0, r1
    7548:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    754c:	4411      	add	r1, r2
    754e:	1a0e      	subs	r6, r1, r0
    7550:	4640      	mov	r0, r8
    7552:	f007 fdb7 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7556:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    755a:	1a08      	subs	r0, r1, r0
    755c:	4406      	add	r6, r0
    755e:	3e20      	subs	r6, #32
    7560:	e006      	b.n	7570 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x534>
    7562:	69a1      	ldr	r1, [r4, #24]
    7564:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    7568:	4408      	add	r0, r1
    756a:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    756e:	1a46      	subs	r6, r0, r1
    7570:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    7574:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    7578:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    757c:	fb01 0002 	mla	r0, r1, r2, r0
    7580:	0040      	lsls	r0, r0, #1
    7582:	8aa1      	ldrh	r1, [r4, #20]
    7584:	3060      	adds	r0, #96	; 0x60
    7586:	4401      	add	r1, r0
    7588:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    758c:	f006 fb9e 	bl	dccc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    7590:	f8cb 0010 	str.w	r0, [fp, #16]
    7594:	2001      	movs	r0, #1
    7596:	4659      	mov	r1, fp
    7598:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    759c:	e066      	b.n	766c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    759e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    75a2:	6860      	ldr	r0, [r4, #4]
    75a4:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
    75a8:	1a46      	subs	r6, r0, r1
    75aa:	eb02 000a 	add.w	r0, r2, sl
    75ae:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
    75b2:	f8d4 c120 	ldr.w	ip, [r4, #288]	; 0x120
    75b6:	1a80      	subs	r0, r0, r2
    75b8:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
    75bc:	1e40      	subs	r0, r0, #1
    75be:	fb0c 3202 	mla	r2, ip, r2, r3
    75c2:	fb00 2001 	mla	r0, r0, r1, r2
    75c6:	0040      	lsls	r0, r0, #1
    75c8:	8aa1      	ldrh	r1, [r4, #20]
    75ca:	3060      	adds	r0, #96	; 0x60
    75cc:	4401      	add	r1, r0
    75ce:	fb06 f608 	mul.w	r6, r6, r8
    75d2:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    75d6:	e044      	b.n	7662 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x626>
    75d8:	6860      	ldr	r0, [r4, #4]
    75da:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    75de:	fb00 f008 	mul.w	r0, r0, r8
    75e2:	fb08 0611 	mls	r6, r8, r1, r0
    75e6:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
    75ea:	2824      	cmp	r0, #36	; 0x24
    75ec:	d003      	beq.n	75f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ba>
    75ee:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    75f2:	2824      	cmp	r0, #36	; 0x24
    75f4:	d109      	bne.n	760a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    75f6:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
    75fa:	1a38      	subs	r0, r7, r0
    75fc:	b200      	sxth	r0, r0
    75fe:	2800      	cmp	r0, #0
    7600:	db03      	blt.n	760a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    7602:	f894 018f 	ldrb.w	r0, [r4, #399]	; 0x18f
    7606:	b100      	cbz	r0, 760a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5ce>
    7608:	9001      	str	r0, [sp, #4]
    760a:	9800      	ldr	r0, [sp, #0]
    760c:	b1f8      	cbz	r0, 764e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    760e:	f8b4 0106 	ldrh.w	r0, [r4, #262]	; 0x106
    7612:	b9e0      	cbnz	r0, 764e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x612>
    7614:	f8d4 0168 	ldr.w	r0, [r4, #360]	; 0x168
    7618:	2800      	cmp	r0, #0
    761a:	d07d      	beq.n	7718 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    761c:	f8d4 0164 	ldr.w	r0, [r4, #356]	; 0x164
    7620:	2800      	cmp	r0, #0
    7622:	d079      	beq.n	7718 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6dc>
    7624:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7628:	f007 fd5a 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    762c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7630:	4401      	add	r1, r0
    7632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7636:	fbb1 f0f0 	udiv	r0, r1, r0
    763a:	1a36      	subs	r6, r6, r0
    763c:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7640:	f007 fd40 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7644:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
    7648:	1a08      	subs	r0, r1, r0
    764a:	4406      	add	r6, r0
    764c:	3e20      	subs	r6, #32
    764e:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
    7652:	eb01 000a 	add.w	r0, r1, sl
    7656:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    765a:	4348      	muls	r0, r1
    765c:	0041      	lsls	r1, r0, #1
    765e:	3160      	adds	r1, #96	; 0x60
    7660:	9801      	ldr	r0, [sp, #4]
    7662:	f006 fb33 	bl	dccc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x202>
    7666:	4659      	mov	r1, fp
    7668:	f8cb 0010 	str.w	r0, [fp, #16]
    766c:	9804      	ldr	r0, [sp, #16]
    766e:	6909      	ldr	r1, [r1, #16]
    7670:	1a33      	subs	r3, r6, r0
    7672:	f8d4 6134 	ldr.w	r6, [r4, #308]	; 0x134
    7676:	6860      	ldr	r0, [r4, #4]
    7678:	1b80      	subs	r0, r0, r6
    767a:	f2a0 203d 	subw	r0, r0, #573	; 0x23d
    767e:	f8cb 0014 	str.w	r0, [fp, #20]
    7682:	4281      	cmp	r1, r0
    7684:	d800      	bhi.n	7688 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64c>
    7686:	4608      	mov	r0, r1
    7688:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    768c:	2000      	movs	r0, #0
    768e:	7028      	strb	r0, [r5, #0]
    7690:	2064      	movs	r0, #100	; 0x64
    7692:	8128      	strh	r0, [r5, #8]
    7694:	f8d4 0158 	ldr.w	r0, [r4, #344]	; 0x158
    7698:	4619      	mov	r1, r3
    769a:	34dc      	adds	r4, #220	; 0xdc
    769c:	f7f9 ff0e 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    76a0:	60e8      	str	r0, [r5, #12]
    76a2:	f854 0cb4 	ldr.w	r0, [r4, #-180]
    76a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    76a8:	4408      	add	r0, r1
    76aa:	6068      	str	r0, [r5, #4]
    76ac:	68e8      	ldr	r0, [r5, #12]
    76ae:	67e0      	str	r0, [r4, #124]	; 0x7c
    76b0:	f8a4 7080 	strh.w	r7, [r4, #128]	; 0x80
    76b4:	2001      	movs	r0, #1
    76b6:	72a8      	strb	r0, [r5, #10]
    76b8:	8aa1      	ldrh	r1, [r4, #20]
    76ba:	3cdc      	subs	r4, #220	; 0xdc
    76bc:	1bc9      	subs	r1, r1, r7
    76be:	b209      	sxth	r1, r1
    76c0:	2900      	cmp	r1, #0
    76c2:	dd01      	ble.n	76c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x68c>
    76c4:	2103      	movs	r1, #3
    76c6:	72a9      	strb	r1, [r5, #10]
    76c8:	9903      	ldr	r1, [sp, #12]
    76ca:	b331      	cbz	r1, 771a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    76cc:	f1b9 0f00 	cmp.w	r9, #0
    76d0:	d027      	beq.n	7722 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    76d2:	bf00      	nop
    76d4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
    76d8:	b392      	cbz	r2, 7740 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x704>
    76da:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
    76de:	bf00      	nop
    76e0:	f8a4 111a 	strh.w	r1, [r4, #282]	; 0x11a
    76e4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    76e8:	1c49      	adds	r1, r1, #1
    76ea:	434b      	muls	r3, r1
    76ec:	4293      	cmp	r3, r2
    76ee:	d218      	bcs.n	7722 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    76f0:	7aa9      	ldrb	r1, [r5, #10]
    76f2:	1e49      	subs	r1, r1, #1
    76f4:	2900      	cmp	r1, #0
    76f6:	dd14      	ble.n	7722 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    76f8:	72a8      	strb	r0, [r5, #10]
    76fa:	f8b4 011a 	ldrh.w	r0, [r4, #282]	; 0x11a
    76fe:	2101      	movs	r1, #1
    7700:	1c40      	adds	r0, r0, #1
    7702:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    7706:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    770a:	f7fc fae5 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    770e:	f894 011c 	ldrb.w	r0, [r4, #284]	; 0x11c
    7712:	f000 0007 	and.w	r0, r0, #7
    7716:	e001      	b.n	771c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e0>
    7718:	e013      	b.n	7742 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x706>
    771a:	e015      	b.n	7748 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70c>
    771c:	1c40      	adds	r0, r0, #1
    771e:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
    7722:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    7726:	4629      	mov	r1, r5
    7728:	f006 fae2 	bl	dcf0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    772c:	b320      	cbz	r0, 7778 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x73c>
    772e:	9807      	ldr	r0, [sp, #28]
    7730:	f080 0001 	eor.w	r0, r0, #1
    7734:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
    7738:	2000      	movs	r0, #0
    773a:	b009      	add	sp, #36	; 0x24
    773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7740:	e018      	b.n	7774 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x738>
    7742:	f240 514b 	movw	r1, #1355	; 0x54b
    7746:	e019      	b.n	777c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x740>
    7748:	f1b9 0f00 	cmp.w	r9, #0
    774c:	d1c2      	bne.n	76d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x698>
    774e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    7752:	2800      	cmp	r0, #0
    7754:	d0e5      	beq.n	7722 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    7756:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    775a:	6860      	ldr	r0, [r4, #4]
    775c:	1a41      	subs	r1, r0, r1
    775e:	4628      	mov	r0, r5
    7760:	f005 fa4b 	bl	cbfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    7764:	0400      	lsls	r0, r0, #16
    7766:	0c00      	lsrs	r0, r0, #16
    7768:	d0db      	beq.n	7722 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6e6>
    776a:	9912      	ldr	r1, [sp, #72]	; 0x48
    776c:	b101      	cbz	r1, 7770 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x734>
    776e:	8008      	strh	r0, [r1, #0]
    7770:	2001      	movs	r0, #1
    7772:	e7e2      	b.n	773a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6fe>
    7774:	2100      	movs	r1, #0
    7776:	e7b3      	b.n	76e0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6a4>
    7778:	f240 51ab 	movw	r1, #1451	; 0x5ab
    777c:	2030      	movs	r0, #48	; 0x30
    777e:	f7fc fa13 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7782:	0000      	.short	0x0000
    7784:	20000110 	.word	0x20000110
    7788:	b570      	push	{r4, r5, r6, lr}
    778a:	b140      	cbz	r0, 779e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x762>
    778c:	2909      	cmp	r1, #9
    778e:	d24a      	bcs.n	7826 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ea>
    7790:	e8df f001 	tbb	[pc, r1]
    7794:	3d3d1707 	.word	0x3d3d1707
    7798:	412b4939 	.word	0x412b4939
    779c:	0045      	.short	0x0045
    779e:	21d5      	movs	r1, #213	; 0xd5
    77a0:	e03e      	b.n	7820 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    77a2:	4922      	ldr	r1, [pc, #136]	; (782c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f0>)
    77a4:	4604      	mov	r4, r0
    77a6:	6188      	str	r0, [r1, #24]
    77a8:	f7fe fdc2 	bl	6330 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    77ac:	b110      	cbz	r0, 77b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x778>
    77ae:	f240 2187 	movw	r1, #647	; 0x287
    77b2:	e035      	b.n	7820 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    77b4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    77b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77bc:	38f6      	subs	r0, #246	; 0xf6
    77be:	f7fa be3b 	b.w	2438 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    77c2:	4605      	mov	r5, r0
    77c4:	f005 ff3a 	bl	d63c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    77c8:	b9a8      	cbnz	r0, 77f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ba>
    77ca:	4628      	mov	r0, r5
    77cc:	f006 fa40 	bl	dc50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    77d0:	4604      	mov	r4, r0
    77d2:	f8d5 00d0 	ldr.w	r0, [r5, #208]	; 0xd0
    77d6:	42a0      	cmp	r0, r4
    77d8:	d20b      	bcs.n	77f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    77da:	1a20      	subs	r0, r4, r0
    77dc:	2104      	movs	r1, #4
    77de:	f7f9 fdab 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    77e2:	b130      	cbz	r0, 77f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7b6>
    77e4:	4628      	mov	r0, r5
    77e6:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    77ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    77ee:	f005 bef6 	b.w	d5de <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    77f2:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
    77f6:	4628      	mov	r0, r5
    77f8:	f7fe fdb6 	bl	6368 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    77fc:	2800      	cmp	r0, #0
    77fe:	d014      	beq.n	782a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7ee>
    7800:	f240 21bb 	movw	r1, #699	; 0x2bb
    7804:	e00c      	b.n	7820 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    7806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    780a:	f003 baab 	b.w	ad64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    780e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7812:	f006 b9b7 	b.w	db84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    7816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    781a:	f006 ba10 	b.w	dc3e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    781e:	21f7      	movs	r1, #247	; 0xf7
    7820:	2030      	movs	r0, #48	; 0x30
    7822:	f7fc f9c1 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7826:	21fb      	movs	r1, #251	; 0xfb
    7828:	e7fa      	b.n	7820 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e4>
    782a:	bd70      	pop	{r4, r5, r6, pc}
    782c:	20000110 	.word	0x20000110
    7830:	b570      	push	{r4, r5, r6, lr}
    7832:	4604      	mov	r4, r0
    7834:	f7f9 ff98 	bl	1768 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7838:	2864      	cmp	r0, #100	; 0x64
    783a:	d901      	bls.n	7840 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x804>
    783c:	4605      	mov	r5, r0
    783e:	e000      	b.n	7842 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x806>
    7840:	2564      	movs	r5, #100	; 0x64
    7842:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    7846:	2128      	movs	r1, #40	; 0x28
    7848:	f006 f99a 	bl	db80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    784c:	4428      	add	r0, r5
    784e:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
    7852:	f200 2037 	addw	r0, r0, #567	; 0x237
    7856:	180e      	adds	r6, r1, r0
    7858:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
    785c:	2128      	movs	r1, #40	; 0x28
    785e:	f006 f98f 	bl	db80 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7862:	f200 229b 	addw	r2, r0, #667	; 0x29b
    7866:	4620      	mov	r0, r4
    7868:	6a61      	ldr	r1, [r4, #36]	; 0x24
    786a:	f005 fd51 	bl	d310 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    786e:	4605      	mov	r5, r0
    7870:	4632      	mov	r2, r6
    7872:	4620      	mov	r0, r4
    7874:	6861      	ldr	r1, [r4, #4]
    7876:	f005 fd4b 	bl	d310 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    787a:	4907      	ldr	r1, [pc, #28]	; (7898 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x85c>)
    787c:	4285      	cmp	r5, r0
    787e:	6088      	str	r0, [r1, #8]
    7880:	d200      	bcs.n	7884 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x848>
    7882:	4628      	mov	r0, r5
    7884:	6048      	str	r0, [r1, #4]
    7886:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    788a:	f5a0 70b2 	sub.w	r0, r0, #356	; 0x164
    788e:	60c8      	str	r0, [r1, #12]
    7890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7894:	f7fa bdd0 	b.w	2438 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7898:	20000110 	.word	0x20000110
    789c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    789e:	4604      	mov	r4, r0
    78a0:	f003 fe17 	bl	b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    78a4:	4601      	mov	r1, r0
    78a6:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    78aa:	f7f9 fe39 	bl	1520 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    78ae:	6861      	ldr	r1, [r4, #4]
    78b0:	b111      	cbz	r1, 78b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87c>
    78b2:	fbb0 f0f1 	udiv	r0, r0, r1
    78b6:	e000      	b.n	78ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x87e>
    78b8:	2000      	movs	r0, #0
    78ba:	f894 1076 	ldrb.w	r1, [r4, #118]	; 0x76
    78be:	290d      	cmp	r1, #13
    78c0:	d00c      	beq.n	78dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a0>
    78c2:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
    78c6:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    78ca:	1813      	adds	r3, r2, r0
    78cc:	1acb      	subs	r3, r1, r3
    78ce:	b21b      	sxth	r3, r3
    78d0:	2b00      	cmp	r3, #0
    78d2:	db06      	blt.n	78e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8a6>
    78d4:	1c49      	adds	r1, r1, #1
    78d6:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
    78da:	e006      	b.n	78ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8ae>
    78dc:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    78e0:	e00c      	b.n	78fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c0>
    78e2:	1c40      	adds	r0, r0, #1
    78e4:	4410      	add	r0, r2
    78e6:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    78ea:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
    78ee:	b940      	cbnz	r0, 7902 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    78f0:	f8b4 013e 	ldrh.w	r0, [r4, #318]	; 0x13e
    78f4:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    78f8:	4288      	cmp	r0, r1
    78fa:	d102      	bne.n	7902 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c6>
    78fc:	1c40      	adds	r0, r0, #1
    78fe:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    7902:	f8b4 015e 	ldrh.w	r0, [r4, #350]	; 0x15e
    7906:	1c40      	adds	r0, r0, #1
    7908:	f8a4 015e 	strh.w	r0, [r4, #350]	; 0x15e
    790c:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    7910:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    7914:	1a40      	subs	r0, r0, r1
    7916:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    791a:	1e40      	subs	r0, r0, #1
    791c:	4408      	add	r0, r1
    791e:	b285      	uxth	r5, r0
    7920:	e023      	b.n	796a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92e>
    7922:	a801      	add	r0, sp, #4
    7924:	2300      	movs	r3, #0
    7926:	9000      	str	r0, [sp, #0]
    7928:	461a      	mov	r2, r3
    792a:	4620      	mov	r0, r4
    792c:	f7ff fd10 	bl	7350 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    7930:	2800      	cmp	r0, #0
    7932:	d036      	beq.n	79a2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x966>
    7934:	2801      	cmp	r0, #1
    7936:	d004      	beq.n	7942 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x906>
    7938:	f240 6162 	movw	r1, #1634	; 0x662
    793c:	2030      	movs	r0, #48	; 0x30
    793e:	f7fc f933 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7942:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    7946:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
    794a:	1a0a      	subs	r2, r1, r0
    794c:	b212      	sxth	r2, r2
    794e:	2a00      	cmp	r2, #0
    7950:	da06      	bge.n	7960 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x924>
    7952:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    7956:	440a      	add	r2, r1
    7958:	1aaa      	subs	r2, r5, r2
    795a:	b212      	sxth	r2, r2
    795c:	2a00      	cmp	r2, #0
    795e:	db02      	blt.n	7966 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x92a>
    7960:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    7964:	4408      	add	r0, r1
    7966:	f8a4 013e 	strh.w	r0, [r4, #318]	; 0x13e
    796a:	f8b4 113e 	ldrh.w	r1, [r4, #318]	; 0x13e
    796e:	1a68      	subs	r0, r5, r1
    7970:	b200      	sxth	r0, r0
    7972:	2800      	cmp	r0, #0
    7974:	dad5      	bge.n	7922 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8e6>
    7976:	f894 0079 	ldrb.w	r0, [r4, #121]	; 0x79
    797a:	b180      	cbz	r0, 799e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x962>
    797c:	f05f 0008 	movs.w	r0, #8
    7980:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    7984:	2001      	movs	r0, #1
    7986:	f884 008c 	strb.w	r0, [r4, #140]	; 0x8c
    798a:	4620      	mov	r0, r4
    798c:	f006 fb32 	bl	dff4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    7990:	4620      	mov	r0, r4
    7992:	f006 fa06 	bl	dda2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7996:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    799a:	f002 b861 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    799e:	203e      	movs	r0, #62	; 0x3e
    79a0:	e7ee      	b.n	7980 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x944>
    79a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000079a4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    79a4:	4806      	ldr	r0, [pc, #24]	; (79c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    79a6:	4905      	ldr	r1, [pc, #20]	; (79bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    79a8:	6501      	str	r1, [r0, #80]	; 0x50
    79aa:	4906      	ldr	r1, [pc, #24]	; (79c4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    79ac:	6541      	str	r1, [r0, #84]	; 0x54
    79ae:	4807      	ldr	r0, [pc, #28]	; (79cc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    79b0:	4905      	ldr	r1, [pc, #20]	; (79c8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    79b2:	6501      	str	r1, [r0, #80]	; 0x50
    79b4:	4906      	ldr	r1, [pc, #24]	; (79d0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    79b6:	6541      	str	r1, [r0, #84]	; 0x54
    79b8:	4770      	bx	lr
    79ba:	0000      	.short	0x0000
    79bc:	00008e49 	.word	0x00008e49
    79c0:	20000140 	.word	0x20000140
    79c4:	00008f09 	.word	0x00008f09
    79c8:	00009555 	.word	0x00009555
    79cc:	200001a4 	.word	0x200001a4
    79d0:	00009585 	.word	0x00009585

000079d4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    79d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79d6:	460d      	mov	r5, r1
    79d8:	4607      	mov	r7, r0
    79da:	2100      	movs	r1, #0
    79dc:	f004 fef1 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    79e0:	1e04      	subs	r4, r0, #0
    79e2:	d04f      	beq.n	7a84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    79e4:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    79e8:	2800      	cmp	r0, #0
    79ea:	d04b      	beq.n	7a84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    79ec:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    79f0:	f88d 0000 	strb.w	r0, [sp]
    79f4:	9800      	ldr	r0, [sp, #0]
    79f6:	9000      	str	r0, [sp, #0]
    79f8:	f89d 0000 	ldrb.w	r0, [sp]
    79fc:	2600      	movs	r6, #0
    79fe:	b1d8      	cbz	r0, 7a38 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7a00:	706e      	strb	r6, [r5, #1]
    7a02:	2007      	movs	r0, #7
    7a04:	7028      	strb	r0, [r5, #0]
    7a06:	e00b      	b.n	7a20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7a08:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    7a0c:	83a6      	strh	r6, [r4, #28]
    7a0e:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    7a12:	6068      	str	r0, [r5, #4]
    7a14:	f8d4 01b6 	ldr.w	r0, [r4, #438]	; 0x1b6
    7a18:	60a8      	str	r0, [r5, #8]
    7a1a:	f8b4 01ba 	ldrh.w	r0, [r4, #442]	; 0x1ba
    7a1e:	81a8      	strh	r0, [r5, #12]
    7a20:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    7a24:	f88d 0000 	strb.w	r0, [sp]
    7a28:	9800      	ldr	r0, [sp, #0]
    7a2a:	9000      	str	r0, [sp, #0]
    7a2c:	f89d 0000 	ldrb.w	r0, [sp]
    7a30:	2800      	cmp	r0, #0
    7a32:	d1e9      	bne.n	7a08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7a34:	712e      	strb	r6, [r5, #4]
    7a36:	e10b      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7a38:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7a3c:	b3a0      	cbz	r0, 7aa8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7a3e:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
    7a42:	280b      	cmp	r0, #11
    7a44:	d016      	beq.n	7a74 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7a46:	280c      	cmp	r0, #12
    7a48:	d004      	beq.n	7a54 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7a4a:	f640 21ce 	movw	r1, #2766	; 0xace
    7a4e:	2031      	movs	r0, #49	; 0x31
    7a50:	f7fc f8aa 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a54:	8820      	ldrh	r0, [r4, #0]
    7a56:	f7fc fcdb 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7a5a:	4607      	mov	r7, r0
    7a5c:	f004 fd6c 	bl	c538 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7a60:	b978      	cbnz	r0, 7a82 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7a62:	706e      	strb	r6, [r5, #1]
    7a64:	200c      	movs	r0, #12
    7a66:	7028      	strb	r0, [r5, #0]
    7a68:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7a6c:	7128      	strb	r0, [r5, #4]
    7a6e:	8820      	ldrh	r0, [r4, #0]
    7a70:	80e8      	strh	r0, [r5, #6]
    7a72:	e013      	b.n	7a9c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7a74:	8820      	ldrh	r0, [r4, #0]
    7a76:	f7fc fccb 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7a7a:	4607      	mov	r7, r0
    7a7c:	f004 fd5c 	bl	c538 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7a80:	b108      	cbz	r0, 7a86 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7a82:	2000      	movs	r0, #0
    7a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a86:	706e      	strb	r6, [r5, #1]
    7a88:	200b      	movs	r0, #11
    7a8a:	7028      	strb	r0, [r5, #0]
    7a8c:	f894 01be 	ldrb.w	r0, [r4, #446]	; 0x1be
    7a90:	7128      	strb	r0, [r5, #4]
    7a92:	8820      	ldrh	r0, [r4, #0]
    7a94:	80e8      	strh	r0, [r5, #6]
    7a96:	f894 01c2 	ldrb.w	r0, [r4, #450]	; 0x1c2
    7a9a:	7228      	strb	r0, [r5, #8]
    7a9c:	f884 61bc 	strb.w	r6, [r4, #444]	; 0x1bc
    7aa0:	4638      	mov	r0, r7
    7aa2:	f004 fd5e 	bl	c562 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7aa6:	e0d3      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7aa8:	e7ff      	b.n	7aaa <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7aaa:	f894 01f2 	ldrb.w	r0, [r4, #498]	; 0x1f2
    7aae:	f88d 0000 	strb.w	r0, [sp]
    7ab2:	9800      	ldr	r0, [sp, #0]
    7ab4:	9000      	str	r0, [sp, #0]
    7ab6:	f89d 0000 	ldrb.w	r0, [sp]
    7aba:	b130      	cbz	r0, 7aca <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7abc:	706e      	strb	r6, [r5, #1]
    7abe:	200e      	movs	r0, #14
    7ac0:	7028      	strb	r0, [r5, #0]
    7ac2:	80af      	strh	r7, [r5, #4]
    7ac4:	f884 61f2 	strb.w	r6, [r4, #498]	; 0x1f2
    7ac8:	e0c2      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7aca:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7ace:	f88d 0000 	strb.w	r0, [sp]
    7ad2:	9800      	ldr	r0, [sp, #0]
    7ad4:	9000      	str	r0, [sp, #0]
    7ad6:	f89d 0000 	ldrb.w	r0, [sp]
    7ada:	b198      	cbz	r0, 7b04 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7adc:	706e      	strb	r6, [r5, #1]
    7ade:	2008      	movs	r0, #8
    7ae0:	7028      	strb	r0, [r5, #0]
    7ae2:	8820      	ldrh	r0, [r4, #0]
    7ae4:	80a8      	strh	r0, [r5, #4]
    7ae6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
    7aea:	f8c5 1006 	str.w	r1, [r5, #6]
    7aee:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
    7af2:	f8c5 100a 	str.w	r1, [r5, #10]
    7af6:	f8b4 01d0 	ldrh.w	r0, [r4, #464]	; 0x1d0
    7afa:	81e8      	strh	r0, [r5, #14]
    7afc:	f504 74e2 	add.w	r4, r4, #452	; 0x1c4
    7b00:	7026      	strb	r6, [r4, #0]
    7b02:	e0a5      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b04:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7b08:	f88d 0000 	strb.w	r0, [sp]
    7b0c:	9800      	ldr	r0, [sp, #0]
    7b0e:	9000      	str	r0, [sp, #0]
    7b10:	f89d 0000 	ldrb.w	r0, [sp]
    7b14:	b1a0      	cbz	r0, 7b40 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7b16:	706e      	strb	r6, [r5, #1]
    7b18:	2016      	movs	r0, #22
    7b1a:	7028      	strb	r0, [r5, #0]
    7b1c:	e005      	b.n	7b2a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7b1e:	bf00      	nop
    7b20:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
    7b24:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7b28:	6068      	str	r0, [r5, #4]
    7b2a:	f894 01ec 	ldrb.w	r0, [r4, #492]	; 0x1ec
    7b2e:	f88d 0000 	strb.w	r0, [sp]
    7b32:	9800      	ldr	r0, [sp, #0]
    7b34:	9000      	str	r0, [sp, #0]
    7b36:	f89d 0000 	ldrb.w	r0, [sp]
    7b3a:	2800      	cmp	r0, #0
    7b3c:	d1f0      	bne.n	7b20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7b3e:	e087      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b40:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7b44:	f88d 0000 	strb.w	r0, [sp]
    7b48:	9800      	ldr	r0, [sp, #0]
    7b4a:	9000      	str	r0, [sp, #0]
    7b4c:	f89d 0000 	ldrb.w	r0, [sp]
    7b50:	b170      	cbz	r0, 7b70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7b52:	706e      	strb	r6, [r5, #1]
    7b54:	2006      	movs	r0, #6
    7b56:	7028      	strb	r0, [r5, #0]
    7b58:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7b5c:	6068      	str	r0, [r5, #4]
    7b5e:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
    7b62:	60a8      	str	r0, [r5, #8]
    7b64:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7b68:	60e8      	str	r0, [r5, #12]
    7b6a:	f504 7401 	add.w	r4, r4, #516	; 0x204
    7b6e:	e03a      	b.n	7be6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7b70:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7b74:	f88d 0000 	strb.w	r0, [sp]
    7b78:	9800      	ldr	r0, [sp, #0]
    7b7a:	9000      	str	r0, [sp, #0]
    7b7c:	f89d 0000 	ldrb.w	r0, [sp]
    7b80:	b1d0      	cbz	r0, 7bb8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7b82:	706e      	strb	r6, [r5, #1]
    7b84:	2012      	movs	r0, #18
    7b86:	7028      	strb	r0, [r5, #0]
    7b88:	e00b      	b.n	7ba2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7b8a:	bf00      	nop
    7b8c:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    7b90:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    7b94:	6068      	str	r0, [r5, #4]
    7b96:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
    7b9a:	60a8      	str	r0, [r5, #8]
    7b9c:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7ba0:	60e8      	str	r0, [r5, #12]
    7ba2:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    7ba6:	f88d 0000 	strb.w	r0, [sp]
    7baa:	9800      	ldr	r0, [sp, #0]
    7bac:	9000      	str	r0, [sp, #0]
    7bae:	f89d 0000 	ldrb.w	r0, [sp]
    7bb2:	2800      	cmp	r0, #0
    7bb4:	d1ea      	bne.n	7b8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7bb6:	e04b      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bb8:	f894 01e0 	ldrb.w	r0, [r4, #480]	; 0x1e0
    7bbc:	f88d 0000 	strb.w	r0, [sp]
    7bc0:	9800      	ldr	r0, [sp, #0]
    7bc2:	9000      	str	r0, [sp, #0]
    7bc4:	f89d 0000 	ldrb.w	r0, [sp]
    7bc8:	b180      	cbz	r0, 7bec <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7bca:	706e      	strb	r6, [r5, #1]
    7bcc:	2018      	movs	r0, #24
    7bce:	7028      	strb	r0, [r5, #0]
    7bd0:	f8d4 01e2 	ldr.w	r0, [r4, #482]	; 0x1e2
    7bd4:	6068      	str	r0, [r5, #4]
    7bd6:	f8d4 01e6 	ldr.w	r0, [r4, #486]	; 0x1e6
    7bda:	60a8      	str	r0, [r5, #8]
    7bdc:	f8b4 01ea 	ldrh.w	r0, [r4, #490]	; 0x1ea
    7be0:	81a8      	strh	r0, [r5, #12]
    7be2:	f504 74f1 	add.w	r4, r4, #482	; 0x1e2
    7be6:	f804 6c02 	strb.w	r6, [r4, #-2]
    7bea:	e031      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bec:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7bf0:	f88d 0000 	strb.w	r0, [sp]
    7bf4:	9800      	ldr	r0, [sp, #0]
    7bf6:	9000      	str	r0, [sp, #0]
    7bf8:	f89d 0000 	ldrb.w	r0, [sp]
    7bfc:	b138      	cbz	r0, 7c0e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7bfe:	2019      	movs	r0, #25
    7c00:	7028      	strb	r0, [r5, #0]
    7c02:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7c06:	6068      	str	r0, [r5, #4]
    7c08:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7c0c:	e020      	b.n	7c50 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c0e:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7c12:	f88d 0000 	strb.w	r0, [sp]
    7c16:	9800      	ldr	r0, [sp, #0]
    7c18:	9000      	str	r0, [sp, #0]
    7c1a:	f89d 0000 	ldrb.w	r0, [sp]
    7c1e:	2800      	cmp	r0, #0
    7c20:	f43f af30 	beq.w	7a84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7c24:	706e      	strb	r6, [r5, #1]
    7c26:	2013      	movs	r0, #19
    7c28:	7028      	strb	r0, [r5, #0]
    7c2a:	e007      	b.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7c2c:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7c30:	f8d4 01fc 	ldr.w	r0, [r4, #508]	; 0x1fc
    7c34:	6068      	str	r0, [r5, #4]
    7c36:	f8b4 0200 	ldrh.w	r0, [r4, #512]	; 0x200
    7c3a:	8128      	strh	r0, [r5, #8]
    7c3c:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7c40:	f88d 0000 	strb.w	r0, [sp]
    7c44:	9800      	ldr	r0, [sp, #0]
    7c46:	9000      	str	r0, [sp, #0]
    7c48:	f89d 0000 	ldrb.w	r0, [sp]
    7c4c:	2800      	cmp	r0, #0
    7c4e:	d1ed      	bne.n	7c2c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7c50:	2001      	movs	r0, #1
    7c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007c54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7c54:	481b      	ldr	r0, [pc, #108]	; (7cc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7c56:	491a      	ldr	r1, [pc, #104]	; (7cc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7c58:	6081      	str	r1, [r0, #8]
    7c5a:	491b      	ldr	r1, [pc, #108]	; (7cc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7c5c:	6041      	str	r1, [r0, #4]
    7c5e:	491b      	ldr	r1, [pc, #108]	; (7ccc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7c60:	6001      	str	r1, [r0, #0]
    7c62:	491b      	ldr	r1, [pc, #108]	; (7cd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7c64:	6281      	str	r1, [r0, #40]	; 0x28
    7c66:	491b      	ldr	r1, [pc, #108]	; (7cd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7c68:	62c1      	str	r1, [r0, #44]	; 0x2c
    7c6a:	491b      	ldr	r1, [pc, #108]	; (7cd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7c6c:	60c1      	str	r1, [r0, #12]
    7c6e:	491b      	ldr	r1, [pc, #108]	; (7cdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7c70:	6181      	str	r1, [r0, #24]
    7c72:	491b      	ldr	r1, [pc, #108]	; (7ce0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7c74:	6301      	str	r1, [r0, #48]	; 0x30
    7c76:	491b      	ldr	r1, [pc, #108]	; (7ce4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7c78:	6201      	str	r1, [r0, #32]
    7c7a:	491b      	ldr	r1, [pc, #108]	; (7ce8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7c7c:	64c1      	str	r1, [r0, #76]	; 0x4c
    7c7e:	491b      	ldr	r1, [pc, #108]	; (7cec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7c80:	6481      	str	r1, [r0, #72]	; 0x48
    7c82:	491b      	ldr	r1, [pc, #108]	; (7cf0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7c84:	6441      	str	r1, [r0, #68]	; 0x44
    7c86:	491b      	ldr	r1, [pc, #108]	; (7cf4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7c88:	6341      	str	r1, [r0, #52]	; 0x34
    7c8a:	491b      	ldr	r1, [pc, #108]	; (7cf8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7c8c:	61c1      	str	r1, [r0, #28]
    7c8e:	481c      	ldr	r0, [pc, #112]	; (7d00 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7c90:	491a      	ldr	r1, [pc, #104]	; (7cfc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7c92:	6081      	str	r1, [r0, #8]
    7c94:	491b      	ldr	r1, [pc, #108]	; (7d04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7c96:	61c1      	str	r1, [r0, #28]
    7c98:	491b      	ldr	r1, [pc, #108]	; (7d08 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7c9a:	6241      	str	r1, [r0, #36]	; 0x24
    7c9c:	491b      	ldr	r1, [pc, #108]	; (7d0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7c9e:	62c1      	str	r1, [r0, #44]	; 0x2c
    7ca0:	491b      	ldr	r1, [pc, #108]	; (7d10 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7ca2:	6101      	str	r1, [r0, #16]
    7ca4:	491b      	ldr	r1, [pc, #108]	; (7d14 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7ca6:	6141      	str	r1, [r0, #20]
    7ca8:	491b      	ldr	r1, [pc, #108]	; (7d18 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7caa:	6441      	str	r1, [r0, #68]	; 0x44
    7cac:	6341      	str	r1, [r0, #52]	; 0x34
    7cae:	491b      	ldr	r1, [pc, #108]	; (7d1c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7cb0:	6181      	str	r1, [r0, #24]
    7cb2:	491b      	ldr	r1, [pc, #108]	; (7d20 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7cb4:	6301      	str	r1, [r0, #48]	; 0x30
    7cb6:	491b      	ldr	r1, [pc, #108]	; (7d24 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7cb8:	6481      	str	r1, [r0, #72]	; 0x48
    7cba:	491b      	ldr	r1, [pc, #108]	; (7d28 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7cbc:	64c1      	str	r1, [r0, #76]	; 0x4c
    7cbe:	4770      	bx	lr
    7cc0:	000092a9 	.word	0x000092a9
    7cc4:	20000140 	.word	0x20000140
    7cc8:	00008c11 	.word	0x00008c11
    7ccc:	00008c6d 	.word	0x00008c6d
    7cd0:	00008fd1 	.word	0x00008fd1
    7cd4:	00009015 	.word	0x00009015
    7cd8:	00008d19 	.word	0x00008d19
    7cdc:	00009281 	.word	0x00009281
    7ce0:	000093c5 	.word	0x000093c5
    7ce4:	00008dc5 	.word	0x00008dc5
    7ce8:	00008fa5 	.word	0x00008fa5
    7cec:	00008f79 	.word	0x00008f79
    7cf0:	00009241 	.word	0x00009241
    7cf4:	00009271 	.word	0x00009271
    7cf8:	000092dd 	.word	0x000092dd
    7cfc:	0000973d 	.word	0x0000973d
    7d00:	200001a4 	.word	0x200001a4
    7d04:	00009765 	.word	0x00009765
    7d08:	00009525 	.word	0x00009525
    7d0c:	000095fd 	.word	0x000095fd
    7d10:	000094f9 	.word	0x000094f9
    7d14:	000096a5 	.word	0x000096a5
    7d18:	00009681 	.word	0x00009681
    7d1c:	000096c9 	.word	0x000096c9
    7d20:	000097bd 	.word	0x000097bd
    7d24:	000095b5 	.word	0x000095b5
    7d28:	000095e5 	.word	0x000095e5

00007d2c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7d2c:	4806      	ldr	r0, [pc, #24]	; (7d48 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7d2e:	4905      	ldr	r1, [pc, #20]	; (7d44 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7d30:	6581      	str	r1, [r0, #88]	; 0x58
    7d32:	4906      	ldr	r1, [pc, #24]	; (7d4c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7d34:	6601      	str	r1, [r0, #96]	; 0x60
    7d36:	4807      	ldr	r0, [pc, #28]	; (7d54 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7d38:	4905      	ldr	r1, [pc, #20]	; (7d50 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7d3a:	6581      	str	r1, [r0, #88]	; 0x58
    7d3c:	4906      	ldr	r1, [pc, #24]	; (7d58 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7d3e:	65c1      	str	r1, [r0, #92]	; 0x5c
    7d40:	4770      	bx	lr
    7d42:	0000      	.short	0x0000
    7d44:	00009035 	.word	0x00009035
    7d48:	20000140 	.word	0x20000140
    7d4c:	000090fd 	.word	0x000090fd
    7d50:	00009629 	.word	0x00009629
    7d54:	200001a4 	.word	0x200001a4
    7d58:	00009659 	.word	0x00009659

00007d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d60:	2701      	movs	r7, #1
    7d62:	4c73      	ldr	r4, [pc, #460]	; (7f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4>)
    7d64:	2500      	movs	r5, #0
    7d66:	f367 0107 	bfi	r1, r7, #0, #8
    7d6a:	8065      	strh	r5, [r4, #2]
    7d6c:	7065      	strb	r5, [r4, #1]
    7d6e:	7025      	strb	r5, [r4, #0]
    7d70:	60a0      	str	r0, [r4, #8]
    7d72:	4689      	mov	r9, r1
    7d74:	4680      	mov	r8, r0
    7d76:	f880 70fb 	strb.w	r7, [r0, #251]	; 0xfb
    7d7a:	8800      	ldrh	r0, [r0, #0]
    7d7c:	f7fc fb5e 	bl	443c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7d80:	b180      	cbz	r0, 7da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7d82:	68a0      	ldr	r0, [r4, #8]
    7d84:	8800      	ldrh	r0, [r0, #0]
    7d86:	f7fc fdad 	bl	48e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7d8a:	68a0      	ldr	r0, [r4, #8]
    7d8c:	8800      	ldrh	r0, [r0, #0]
    7d8e:	f7fc fd51 	bl	4834 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7d92:	68a0      	ldr	r0, [r4, #8]
    7d94:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7d98:	b1a9      	cbz	r1, 7dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7d9a:	3068      	adds	r0, #104	; 0x68
    7d9c:	f006 f939 	bl	e012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7da0:	b128      	cbz	r0, 7dae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52>
    7da2:	e010      	b.n	7dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7da4:	f640 31a9 	movw	r1, #2985	; 0xba9
    7da8:	2031      	movs	r0, #49	; 0x31
    7daa:	f7fb fefd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7dae:	68a0      	ldr	r0, [r4, #8]
    7db0:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    7db4:	b139      	cbz	r1, 7dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a>
    7db6:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    7dba:	2301      	movs	r3, #1
    7dbc:	4619      	mov	r1, r3
    7dbe:	3068      	adds	r0, #104	; 0x68
    7dc0:	f004 fe62 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7dc4:	b180      	cbz	r0, 7de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c>
    7dc6:	68a0      	ldr	r0, [r4, #8]
    7dc8:	3068      	adds	r0, #104	; 0x68
    7dca:	f006 f922 	bl	e012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7dce:	b128      	cbz	r0, 7ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    7dd0:	68a0      	ldr	r0, [r4, #8]
    7dd2:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    7dd6:	bf00      	nop
    7dd8:	f000 fb88 	bl	84ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>
    7ddc:	68a0      	ldr	r0, [r4, #8]
    7dde:	f890 10fd 	ldrb.w	r1, [r0, #253]	; 0xfd
    7de2:	b189      	cbz	r1, 7e08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac>
    7de4:	80a5      	strh	r5, [r4, #4]
    7de6:	e01e      	b.n	7e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    7de8:	68a0      	ldr	r0, [r4, #8]
    7dea:	f8a0 50a0 	strh.w	r5, [r0, #160]	; 0xa0
    7dee:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    7df2:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    7df6:	2100      	movs	r1, #0
    7df8:	2002      	movs	r0, #2
    7dfa:	f000 fe03 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    7dfe:	68a0      	ldr	r0, [r4, #8]
    7e00:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7e04:	2002      	movs	r0, #2
    7e06:	e7e7      	b.n	7dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c>
    7e08:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    7e0c:	f88d 1000 	strb.w	r1, [sp]
    7e10:	9900      	ldr	r1, [sp, #0]
    7e12:	9100      	str	r1, [sp, #0]
    7e14:	f89d 1000 	ldrb.w	r1, [sp]
    7e18:	b919      	cbnz	r1, 7e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc6>
    7e1a:	8b81      	ldrh	r1, [r0, #28]
    7e1c:	8902      	ldrh	r2, [r0, #8]
    7e1e:	4291      	cmp	r1, r2
    7e20:	d800      	bhi.n	7e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8>
    7e22:	8901      	ldrh	r1, [r0, #8]
    7e24:	80a1      	strh	r1, [r4, #4]
    7e26:	f830 1ff6 	ldrh.w	r1, [r0, #246]!
    7e2a:	1e49      	subs	r1, r1, #1
    7e2c:	b28e      	uxth	r6, r1
    7e2e:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    7e32:	4431      	add	r1, r6
    7e34:	f820 195c 	strh.w	r1, [r0], #-92
    7e38:	8801      	ldrh	r1, [r0, #0]
    7e3a:	4431      	add	r1, r6
    7e3c:	8001      	strh	r1, [r0, #0]
    7e3e:	f001 fceb 	bl	9818 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1818>
    7e42:	b120      	cbz	r0, 7e4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf2>
    7e44:	68a0      	ldr	r0, [r4, #8]
    7e46:	f850 1f90 	ldr.w	r1, [r0, #144]!
    7e4a:	4431      	add	r1, r6
    7e4c:	6001      	str	r1, [r0, #0]
    7e4e:	68a0      	ldr	r0, [r4, #8]
    7e50:	f8b0 10f2 	ldrh.w	r1, [r0, #242]	; 0xf2
    7e54:	2901      	cmp	r1, #1
    7e56:	d802      	bhi.n	7e5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x102>
    7e58:	1c49      	adds	r1, r1, #1
    7e5a:	f8a0 10f2 	strh.w	r1, [r0, #242]	; 0xf2
    7e5e:	b10e      	cbz	r6, 7e64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    7e60:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    7e64:	f880 50fa 	strb.w	r5, [r0, #250]	; 0xfa
    7e68:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    7e6c:	290b      	cmp	r1, #11
    7e6e:	d001      	beq.n	7e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118>
    7e70:	290c      	cmp	r1, #12
    7e72:	d118      	bne.n	7ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    7e74:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    7e78:	f8b0 318c 	ldrh.w	r3, [r0, #396]	; 0x18c
    7e7c:	1ad2      	subs	r2, r2, r3
    7e7e:	b212      	sxth	r2, r2
    7e80:	2a00      	cmp	r2, #0
    7e82:	db10      	blt.n	7ea6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a>
    7e84:	f8d0 118e 	ldr.w	r1, [r0, #398]	; 0x18e
    7e88:	f8c0 107e 	str.w	r1, [r0, #126]	; 0x7e
    7e8c:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
    7e90:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    7e94:	2103      	movs	r1, #3
    7e96:	f7fd fd99 	bl	59cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7e9a:	68a0      	ldr	r0, [r4, #8]
    7e9c:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    7ea0:	f880 70b6 	strb.w	r7, [r0, #182]	; 0xb6
    7ea4:	e024      	b.n	7ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7ea6:	2924      	cmp	r1, #36	; 0x24
    7ea8:	d10f      	bne.n	7eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    7eaa:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    7eae:	f8b0 218c 	ldrh.w	r2, [r0, #396]	; 0x18c
    7eb2:	1a89      	subs	r1, r1, r2
    7eb4:	b209      	sxth	r1, r1
    7eb6:	2900      	cmp	r1, #0
    7eb8:	db07      	blt.n	7eca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e>
    7eba:	f000 fe4f 	bl	8b5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5c>
    7ebe:	68a0      	ldr	r0, [r4, #8]
    7ec0:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    7ec4:	f880 51a6 	strb.w	r5, [r0, #422]	; 0x1a6
    7ec8:	e012      	b.n	7ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7eca:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    7ece:	2924      	cmp	r1, #36	; 0x24
    7ed0:	d001      	beq.n	7ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17a>
    7ed2:	2925      	cmp	r1, #37	; 0x25
    7ed4:	d10c      	bne.n	7ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7ed6:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    7eda:	f8b0 018c 	ldrh.w	r0, [r0, #396]	; 0x18c
    7ede:	1a08      	subs	r0, r1, r0
    7ee0:	b200      	sxth	r0, r0
    7ee2:	2800      	cmp	r0, #0
    7ee4:	db04      	blt.n	7ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7ee6:	f000 fe39 	bl	8b5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb5c>
    7eea:	68a0      	ldr	r0, [r4, #8]
    7eec:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    7ef0:	68a0      	ldr	r0, [r4, #8]
    7ef2:	4601      	mov	r1, r0
    7ef4:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    7ef8:	3068      	adds	r0, #104	; 0x68
    7efa:	f004 ff9d 	bl	ce38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    7efe:	480d      	ldr	r0, [pc, #52]	; (7f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d8>)
    7f00:	9000      	str	r0, [sp, #0]
    7f02:	4b0d      	ldr	r3, [pc, #52]	; (7f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc>)
    7f04:	4a0d      	ldr	r2, [pc, #52]	; (7f3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0>)
    7f06:	4641      	mov	r1, r8
    7f08:	4648      	mov	r0, r9
    7f0a:	f7fc fda1 	bl	4a50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    7f0e:	68a0      	ldr	r0, [r4, #8]
    7f10:	2301      	movs	r3, #1
    7f12:	2105      	movs	r1, #5
    7f14:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    7f18:	3068      	adds	r0, #104	; 0x68
    7f1a:	f004 fdb5 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7f1e:	2800      	cmp	r0, #0
    7f20:	d003      	beq.n	7f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ce>
    7f22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f26:	f7fc bd8d 	b.w	4a44 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    7f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f2e:	0000      	.short	0x0000
    7f30:	2000012c 	.word	0x2000012c
    7f34:	0000869d 	.word	0x0000869d
    7f38:	000081b5 	.word	0x000081b5
    7f3c:	00008aa9 	.word	0x00008aa9
    7f40:	b570      	push	{r4, r5, r6, lr}
    7f42:	4c0f      	ldr	r4, [pc, #60]	; (7f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x224>)
    7f44:	68a5      	ldr	r5, [r4, #8]
    7f46:	f895 1075 	ldrb.w	r1, [r5, #117]	; 0x75
    7f4a:	2920      	cmp	r1, #32
    7f4c:	d002      	beq.n	7f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    7f4e:	2926      	cmp	r1, #38	; 0x26
    7f50:	d003      	beq.n	7f5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fe>
    7f52:	e011      	b.n	7f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    7f54:	f000 fe38 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    7f58:	e008      	b.n	7f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x210>
    7f5a:	f895 2076 	ldrb.w	r2, [r5, #118]	; 0x76
    7f5e:	2301      	movs	r3, #1
    7f60:	210b      	movs	r1, #11
    7f62:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7f66:	f004 fd8f 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7f6a:	b138      	cbz	r0, 7f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x220>
    7f6c:	68a1      	ldr	r1, [r4, #8]
    7f6e:	2000      	movs	r0, #0
    7f70:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    7f74:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    7f78:	2000      	movs	r0, #0
    7f7a:	bd70      	pop	{r4, r5, r6, pc}
    7f7c:	202a      	movs	r0, #42	; 0x2a
    7f7e:	e7e9      	b.n	7f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>
    7f80:	2000012c 	.word	0x2000012c
    7f84:	4804      	ldr	r0, [pc, #16]	; (7f98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    7f86:	2100      	movs	r1, #0
    7f88:	6880      	ldr	r0, [r0, #8]
    7f8a:	f820 1fa8 	strh.w	r1, [r0, #168]!
    7f8e:	7881      	ldrb	r1, [r0, #2]
    7f90:	1c49      	adds	r1, r1, #1
    7f92:	7081      	strb	r1, [r0, #2]
    7f94:	4770      	bx	lr
    7f96:	0000      	.short	0x0000
    7f98:	2000012c 	.word	0x2000012c
    7f9c:	4807      	ldr	r0, [pc, #28]	; (7fbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    7f9e:	b510      	push	{r4, lr}
    7fa0:	6881      	ldr	r1, [r0, #8]
    7fa2:	f811 0faa 	ldrb.w	r0, [r1, #170]!
    7fa6:	1e40      	subs	r0, r0, #1
    7fa8:	b240      	sxtb	r0, r0
    7faa:	7008      	strb	r0, [r1, #0]
    7fac:	2800      	cmp	r0, #0
    7fae:	da04      	bge.n	7fba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    7fb0:	f240 118f 	movw	r1, #399	; 0x18f
    7fb4:	2031      	movs	r0, #49	; 0x31
    7fb6:	f7fb fdf7 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fba:	bd10      	pop	{r4, pc}
    7fbc:	2000012c 	.word	0x2000012c
    7fc0:	4917      	ldr	r1, [pc, #92]	; (8020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    7fc2:	b510      	push	{r4, lr}
    7fc4:	6889      	ldr	r1, [r1, #8]
    7fc6:	f891 2076 	ldrb.w	r2, [r1, #118]	; 0x76
    7fca:	b1b8      	cbz	r0, 7ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a0>
    7fcc:	2a10      	cmp	r2, #16
    7fce:	d006      	beq.n	7fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    7fd0:	2a14      	cmp	r2, #20
    7fd2:	d007      	beq.n	7fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    7fd4:	2a15      	cmp	r2, #21
    7fd6:	d008      	beq.n	7fea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28e>
    7fd8:	2a1b      	cmp	r2, #27
    7fda:	d11c      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fdc:	e008      	b.n	7ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x294>
    7fde:	2101      	movs	r1, #1
    7fe0:	200b      	movs	r0, #11
    7fe2:	e007      	b.n	7ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    7fe4:	f001 fa4a 	bl	947c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x147c>
    7fe8:	e006      	b.n	7ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    7fea:	f000 fd29 	bl	8a40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa40>
    7fee:	e003      	b.n	7ff8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x29c>
    7ff0:	2101      	movs	r1, #1
    7ff2:	2006      	movs	r0, #6
    7ff4:	f000 fd06 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    7ff8:	2001      	movs	r0, #1
    7ffa:	bd10      	pop	{r4, pc}
    7ffc:	2a21      	cmp	r2, #33	; 0x21
    7ffe:	d10a      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    8000:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8004:	2802      	cmp	r0, #2
    8006:	d008      	beq.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    8008:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    800c:	2801      	cmp	r0, #1
    800e:	d102      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    8010:	f891 01a7 	ldrb.w	r0, [r1, #423]	; 0x1a7
    8014:	b108      	cbz	r0, 801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    8016:	2000      	movs	r0, #0
    8018:	bd10      	pop	{r4, pc}
    801a:	2101      	movs	r1, #1
    801c:	2017      	movs	r0, #23
    801e:	e7e9      	b.n	7ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    8020:	2000012c 	.word	0x2000012c
    8024:	b510      	push	{r4, lr}
    8026:	bbe8      	cbnz	r0, 80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    8028:	4c31      	ldr	r4, [pc, #196]	; (80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>)
    802a:	68a0      	ldr	r0, [r4, #8]
    802c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8030:	07ca      	lsls	r2, r1, #31
    8032:	d002      	beq.n	803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    8034:	2101      	movs	r1, #1
    8036:	2009      	movs	r0, #9
    8038:	e052      	b.n	80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    803a:	078a      	lsls	r2, r1, #30
    803c:	d50a      	bpl.n	8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>
    803e:	2101      	movs	r1, #1
    8040:	200c      	movs	r0, #12
    8042:	f000 fcdf 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    8046:	68a0      	ldr	r0, [r4, #8]
    8048:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    804c:	f041 0101 	orr.w	r1, r1, #1
    8050:	7001      	strb	r1, [r0, #0]
    8052:	e047      	b.n	80e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
    8054:	074a      	lsls	r2, r1, #29
    8056:	d502      	bpl.n	805e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5e>
    8058:	2101      	movs	r1, #1
    805a:	2013      	movs	r0, #19
    805c:	e040      	b.n	80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    805e:	070a      	lsls	r2, r1, #28
    8060:	d505      	bpl.n	806e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
    8062:	f810 1fe1 	ldrb.w	r1, [r0, #225]!
    8066:	7141      	strb	r1, [r0, #5]
    8068:	2101      	movs	r1, #1
    806a:	2007      	movs	r0, #7
    806c:	e038      	b.n	80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
    806e:	f011 0f30 	tst.w	r1, #48	; 0x30
    8072:	d03b      	beq.n	80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    8074:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    8078:	b9a1      	cbnz	r1, 80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>
    807a:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    807e:	b1e1      	cbz	r1, 80ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    8080:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8084:	2924      	cmp	r1, #36	; 0x24
    8086:	d02f      	beq.n	80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    8088:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    808c:	2924      	cmp	r1, #36	; 0x24
    808e:	d02b      	beq.n	80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
    8090:	f05f 0300 	movs.w	r3, #0
    8094:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    8098:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    809c:	f005 f92a 	bl	d2f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    80a0:	68a1      	ldr	r1, [r4, #8]
    80a2:	e000      	b.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
    80a4:	e022      	b.n	80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    80a6:	f811 0f77 	ldrb.w	r0, [r1, #119]!
    80aa:	f020 0020 	bic.w	r0, r0, #32
    80ae:	f040 0010 	orr.w	r0, r0, #16
    80b2:	7008      	strb	r0, [r1, #0]
    80b4:	2000      	movs	r0, #0
    80b6:	f881 0125 	strb.w	r0, [r1, #293]	; 0x125
    80ba:	68a0      	ldr	r0, [r4, #8]
    80bc:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    80c0:	06c9      	lsls	r1, r1, #27
    80c2:	d513      	bpl.n	80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
    80c4:	f005 f931 	bl	d32a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    80c8:	f000 f906 	bl	82d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d8>
    80cc:	68a1      	ldr	r1, [r4, #8]
    80ce:	f101 0024 	add.w	r0, r1, #36	; 0x24
    80d2:	8bc2      	ldrh	r2, [r0, #30]
    80d4:	f821 2fe6 	strh.w	r2, [r1, #230]!
    80d8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    80da:	8048      	strh	r0, [r1, #2]
    80dc:	2101      	movs	r1, #1
    80de:	2015      	movs	r0, #21
    80e0:	f000 fc90 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    80e4:	2001      	movs	r0, #1
    80e6:	bd10      	pop	{r4, pc}
    80e8:	2301      	movs	r3, #1
    80ea:	e7d3      	b.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    80ec:	2000      	movs	r0, #0
    80ee:	bd10      	pop	{r4, pc}
    80f0:	2000012c 	.word	0x2000012c
    80f4:	b570      	push	{r4, r5, r6, lr}
    80f6:	460d      	mov	r5, r1
    80f8:	4606      	mov	r6, r0
    80fa:	f004 ff48 	bl	cf8e <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    80fe:	4604      	mov	r4, r0
    8100:	4630      	mov	r0, r6
    8102:	f004 ff50 	bl	cfa6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    8106:	4629      	mov	r1, r5
    8108:	f000 f81e 	bl	8148 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x148>
    810c:	b1b8      	cbz	r0, 813e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e>
    810e:	4620      	mov	r0, r4
    8110:	f004 fd53 	bl	cbba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8114:	0001      	movs	r1, r0
    8116:	d00d      	beq.n	8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>
    8118:	480a      	ldr	r0, [pc, #40]	; (8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>)
    811a:	6880      	ldr	r0, [r0, #8]
    811c:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8120:	428a      	cmp	r2, r1
    8122:	d007      	beq.n	8134 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x134>
    8124:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8128:	2901      	cmp	r1, #1
    812a:	d005      	beq.n	8138 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x138>
    812c:	f890 005f 	ldrb.w	r0, [r0, #95]	; 0x5f
    8130:	4220      	tst	r0, r4
    8132:	d004      	beq.n	813e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e>
    8134:	2001      	movs	r0, #1
    8136:	bd70      	pop	{r4, r5, r6, pc}
    8138:	f890 01a9 	ldrb.w	r0, [r0, #425]	; 0x1a9
    813c:	e7f8      	b.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    813e:	2000      	movs	r0, #0
    8140:	bd70      	pop	{r4, r5, r6, pc}
    8142:	0000      	.short	0x0000
    8144:	2000012c 	.word	0x2000012c
    8148:	b570      	push	{r4, r5, r6, lr}
    814a:	460d      	mov	r5, r1
    814c:	4604      	mov	r4, r0
    814e:	f004 fd34 	bl	cbba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    8152:	b350      	cbz	r0, 81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    8154:	4916      	ldr	r1, [pc, #88]	; (81b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b0>)
    8156:	6889      	ldr	r1, [r1, #8]
    8158:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    815c:	4282      	cmp	r2, r0
    815e:	d024      	beq.n	81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    8160:	f891 31a6 	ldrb.w	r3, [r1, #422]	; 0x1a6
    8164:	2b01      	cmp	r3, #1
    8166:	d005      	beq.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    8168:	f891 305e 	ldrb.w	r3, [r1, #94]	; 0x5e
    816c:	4223      	tst	r3, r4
    816e:	d013      	beq.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    8170:	b11d      	cbz	r5, 817a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a>
    8172:	e01a      	b.n	81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    8174:	f891 31a8 	ldrb.w	r3, [r1, #424]	; 0x1a8
    8178:	e7f8      	b.n	816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    817a:	f891 105b 	ldrb.w	r1, [r1, #91]	; 0x5b
    817e:	4221      	tst	r1, r4
    8180:	d113      	bne.n	81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    8182:	b15a      	cbz	r2, 819c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c>
    8184:	2a04      	cmp	r2, #4
    8186:	d00e      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    8188:	2804      	cmp	r0, #4
    818a:	d00c      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    818c:	2a08      	cmp	r2, #8
    818e:	d00a      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    8190:	2808      	cmp	r0, #8
    8192:	d008      	beq.n	81a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a6>
    8194:	4282      	cmp	r2, r0
    8196:	d908      	bls.n	81aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1aa>
    8198:	2000      	movs	r0, #0
    819a:	bd70      	pop	{r4, r5, r6, pc}
    819c:	f240 1165 	movw	r1, #357	; 0x165
    81a0:	2006      	movs	r0, #6
    81a2:	f7fb fd01 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81a6:	4282      	cmp	r2, r0
    81a8:	d3f6      	bcc.n	8198 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x198>
    81aa:	2001      	movs	r0, #1
    81ac:	bd70      	pop	{r4, r5, r6, pc}
    81ae:	0000      	.short	0x0000
    81b0:	2000012c 	.word	0x2000012c
    81b4:	490c      	ldr	r1, [pc, #48]	; (81e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>)
    81b6:	4602      	mov	r2, r0
    81b8:	7848      	ldrb	r0, [r1, #1]
    81ba:	b998      	cbnz	r0, 81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>
    81bc:	4608      	mov	r0, r1
    81be:	6880      	ldr	r0, [r0, #8]
    81c0:	b142      	cbz	r2, 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    81c2:	7889      	ldrb	r1, [r1, #2]
    81c4:	0709      	lsls	r1, r1, #28
    81c6:	d503      	bpl.n	81d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>
    81c8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    81cc:	2808      	cmp	r0, #8
    81ce:	d009      	beq.n	81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>
    81d0:	2001      	movs	r0, #1
    81d2:	4770      	bx	lr
    81d4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    81d8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    81da:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
    81dc:	428a      	cmp	r2, r1
    81de:	d801      	bhi.n	81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>
    81e0:	f7fe bf06 	b.w	6ff0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    81e4:	2000      	movs	r0, #0
    81e6:	4770      	bx	lr
    81e8:	2000012c 	.word	0x2000012c
    81ec:	b570      	push	{r4, r5, r6, lr}
    81ee:	4c39      	ldr	r4, [pc, #228]	; (82d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d4>)
    81f0:	4605      	mov	r5, r0
    81f2:	68a0      	ldr	r0, [r4, #8]
    81f4:	3068      	adds	r0, #104	; 0x68
    81f6:	f005 ff0c 	bl	e012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    81fa:	2800      	cmp	r0, #0
    81fc:	d169      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    81fe:	2d00      	cmp	r5, #0
    8200:	d167      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    8202:	68a0      	ldr	r0, [r4, #8]
    8204:	2301      	movs	r3, #1
    8206:	4619      	mov	r1, r3
    8208:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    820c:	3068      	adds	r0, #104	; 0x68
    820e:	f004 fc3b 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8212:	2800      	cmp	r0, #0
    8214:	d15d      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    8216:	68a0      	ldr	r0, [r4, #8]
    8218:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    821c:	b149      	cbz	r1, 8232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    821e:	2100      	movs	r1, #0
    8220:	f8a0 10a0 	strh.w	r1, [r0, #160]	; 0xa0
    8224:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
    8228:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    822c:	2100      	movs	r1, #0
    822e:	2002      	movs	r0, #2
    8230:	e045      	b.n	82be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    8232:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8236:	2301      	movs	r3, #1
    8238:	2104      	movs	r1, #4
    823a:	3068      	adds	r0, #104	; 0x68
    823c:	f004 fc24 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8240:	4605      	mov	r5, r0
    8242:	f7ff feef 	bl	8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    8246:	2800      	cmp	r0, #0
    8248:	d143      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    824a:	4628      	mov	r0, r5
    824c:	f7ff feb8 	bl	7fc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    8250:	2800      	cmp	r0, #0
    8252:	d13e      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    8254:	68a0      	ldr	r0, [r4, #8]
    8256:	2301      	movs	r3, #1
    8258:	2100      	movs	r1, #0
    825a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    825e:	3068      	adds	r0, #104	; 0x68
    8260:	f004 fc12 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8264:	b178      	cbz	r0, 8286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    8266:	68a0      	ldr	r0, [r4, #8]
    8268:	2301      	movs	r3, #1
    826a:	2104      	movs	r1, #4
    826c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8270:	3068      	adds	r0, #104	; 0x68
    8272:	f004 fc09 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8276:	b930      	cbnz	r0, 8286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    8278:	68a0      	ldr	r0, [r4, #8]
    827a:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    827e:	b110      	cbz	r0, 8286 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x286>
    8280:	2100      	movs	r1, #0
    8282:	2012      	movs	r0, #18
    8284:	e01b      	b.n	82be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    8286:	68a0      	ldr	r0, [r4, #8]
    8288:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    828c:	290a      	cmp	r1, #10
    828e:	d01a      	beq.n	82c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c6>
    8290:	2d00      	cmp	r5, #0
    8292:	d11e      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    8294:	f000 fb16 	bl	88c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c4>
    8298:	2800      	cmp	r0, #0
    829a:	d11a      	bne.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    829c:	68a0      	ldr	r0, [r4, #8]
    829e:	2301      	movs	r3, #1
    82a0:	2100      	movs	r1, #0
    82a2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    82a6:	3068      	adds	r0, #104	; 0x68
    82a8:	f004 fbee 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    82ac:	2800      	cmp	r0, #0
    82ae:	d010      	beq.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    82b0:	68a0      	ldr	r0, [r4, #8]
    82b2:	f890 0184 	ldrb.w	r0, [r0, #388]	; 0x184
    82b6:	2800      	cmp	r0, #0
    82b8:	d00b      	beq.n	82d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d2>
    82ba:	2100      	movs	r1, #0
    82bc:	20ff      	movs	r0, #255	; 0xff
    82be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82c2:	f000 bb9f 	b.w	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    82c6:	f810 1fe2 	ldrb.w	r1, [r0, #226]!
    82ca:	7101      	strb	r1, [r0, #4]
    82cc:	2100      	movs	r1, #0
    82ce:	2007      	movs	r0, #7
    82d0:	e7f5      	b.n	82be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    82d2:	bd70      	pop	{r4, r5, r6, pc}
    82d4:	2000012c 	.word	0x2000012c
    82d8:	480a      	ldr	r0, [pc, #40]	; (8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>)
    82da:	b510      	push	{r4, lr}
    82dc:	6881      	ldr	r1, [r0, #8]
    82de:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    82e2:	2801      	cmp	r0, #1
    82e4:	d009      	beq.n	82fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fa>
    82e6:	8808      	ldrh	r0, [r1, #0]
    82e8:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    82ec:	3124      	adds	r1, #36	; 0x24
    82ee:	f004 ffdd 	bl	d2ac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    82f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82f6:	f001 bbb3 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    82fa:	2002      	movs	r0, #2
    82fc:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    8300:	bd10      	pop	{r4, pc}
    8302:	0000      	.short	0x0000
    8304:	2000012c 	.word	0x2000012c
    8308:	b570      	push	{r4, r5, r6, lr}
    830a:	4c25      	ldr	r4, [pc, #148]	; (83a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>)
    830c:	0005      	movs	r5, r0
    830e:	d12f      	bne.n	8370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x370>
    8310:	f000 f8a4 	bl	845c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x45c>
    8314:	f000 f848 	bl	83a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a8>
    8318:	0005      	movs	r5, r0
    831a:	d129      	bne.n	8370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x370>
    831c:	8860      	ldrh	r0, [r4, #2]
    831e:	0741      	lsls	r1, r0, #29
    8320:	d506      	bpl.n	8330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    8322:	68a1      	ldr	r1, [r4, #8]
    8324:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    8328:	2907      	cmp	r1, #7
    832a:	d101      	bne.n	8330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    832c:	2101      	movs	r1, #1
    832e:	7021      	strb	r1, [r4, #0]
    8330:	0780      	lsls	r0, r0, #30
    8332:	d512      	bpl.n	835a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35a>
    8334:	68e0      	ldr	r0, [r4, #12]
    8336:	78c0      	ldrb	r0, [r0, #3]
    8338:	2819      	cmp	r0, #25
    833a:	d205      	bcs.n	8348 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x348>
    833c:	4919      	ldr	r1, [pc, #100]	; (83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>)
    833e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8342:	b109      	cbz	r1, 8348 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x348>
    8344:	4788      	blx	r1
    8346:	e008      	b.n	835a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x35a>
    8348:	28ff      	cmp	r0, #255	; 0xff
    834a:	d004      	beq.n	8356 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x356>
    834c:	f240 713c 	movw	r1, #1852	; 0x73c
    8350:	2031      	movs	r0, #49	; 0x31
    8352:	f7fb fc29 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8356:	f001 f8c3 	bl	94e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e0>
    835a:	78a0      	ldrb	r0, [r4, #2]
    835c:	06c0      	lsls	r0, r0, #27
    835e:	d507      	bpl.n	8370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x370>
    8360:	68a0      	ldr	r0, [r4, #8]
    8362:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8366:	290b      	cmp	r1, #11
    8368:	d102      	bne.n	8370 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x370>
    836a:	210c      	movs	r1, #12
    836c:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    8370:	7860      	ldrb	r0, [r4, #1]
    8372:	0700      	lsls	r0, r0, #28
    8374:	d511      	bpl.n	839a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39a>
    8376:	68a0      	ldr	r0, [r4, #8]
    8378:	2301      	movs	r3, #1
    837a:	2105      	movs	r1, #5
    837c:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8380:	3068      	adds	r0, #104	; 0x68
    8382:	f004 fb81 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8386:	b128      	cbz	r0, 8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>
    8388:	68a1      	ldr	r1, [r4, #8]
    838a:	2508      	movs	r5, #8
    838c:	2000      	movs	r0, #0
    838e:	f881 01bc 	strb.w	r0, [r1, #444]	; 0x1bc
    8392:	e002      	b.n	839a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39a>
    8394:	2000      	movs	r0, #0
    8396:	f7fc fc15 	bl	4bc4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    839a:	4628      	mov	r0, r5
    839c:	bd70      	pop	{r4, r5, r6, pc}
    839e:	0000      	.short	0x0000
    83a0:	2000012c 	.word	0x2000012c
    83a4:	200001a4 	.word	0x200001a4
    83a8:	b570      	push	{r4, r5, r6, lr}
    83aa:	4c2a      	ldr	r4, [pc, #168]	; (8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    83ac:	2000      	movs	r0, #0
    83ae:	78a1      	ldrb	r1, [r4, #2]
    83b0:	07c9      	lsls	r1, r1, #31
    83b2:	d015      	beq.n	83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>
    83b4:	6920      	ldr	r0, [r4, #16]
    83b6:	2301      	movs	r3, #1
    83b8:	2105      	movs	r1, #5
    83ba:	78c5      	ldrb	r5, [r0, #3]
    83bc:	68a0      	ldr	r0, [r4, #8]
    83be:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    83c2:	3068      	adds	r0, #104	; 0x68
    83c4:	f004 fb60 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83c8:	b158      	cbz	r0, 83e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e2>
    83ca:	1ead      	subs	r5, r5, #2
    83cc:	2d0a      	cmp	r5, #10
    83ce:	d206      	bcs.n	83de <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3de>
    83d0:	e8df f005 	tbb	[pc, r5]
    83d4:	05050707 	.word	0x05050707
    83d8:	05050707 	.word	0x05050707
    83dc:	0707      	.short	0x0707
    83de:	2008      	movs	r0, #8
    83e0:	bd70      	pop	{r4, r5, r6, pc}
    83e2:	6920      	ldr	r0, [r4, #16]
    83e4:	f7fd fbc8 	bl	5b78 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    83e8:	b138      	cbz	r0, 83fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3fa>
    83ea:	6920      	ldr	r0, [r4, #16]
    83ec:	78c5      	ldrb	r5, [r0, #3]
    83ee:	b145      	cbz	r5, 8402 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x402>
    83f0:	2d01      	cmp	r5, #1
    83f2:	d006      	beq.n	8402 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x402>
    83f4:	2d16      	cmp	r5, #22
    83f6:	d118      	bne.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    83f8:	e003      	b.n	8402 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x402>
    83fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83fe:	f000 bd0b 	b.w	8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    8402:	68a0      	ldr	r0, [r4, #8]
    8404:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    8408:	f004 fb8c 	bl	cb24 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    840c:	b168      	cbz	r0, 842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    840e:	68a1      	ldr	r1, [r4, #8]
    8410:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    8414:	281f      	cmp	r0, #31
    8416:	d008      	beq.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    8418:	2820      	cmp	r0, #32
    841a:	d003      	beq.n	8424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>
    841c:	2d16      	cmp	r5, #22
    841e:	d00c      	beq.n	843a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43a>
    8420:	2002      	movs	r0, #2
    8422:	bd70      	pop	{r4, r5, r6, pc}
    8424:	2026      	movs	r0, #38	; 0x26
    8426:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    842a:	2d19      	cmp	r5, #25
    842c:	d207      	bcs.n	843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    842e:	480a      	ldr	r0, [pc, #40]	; (8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>)
    8430:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8434:	b118      	cbz	r0, 843e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x43e>
    8436:	4780      	blx	r0
    8438:	e003      	b.n	8442 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x442>
    843a:	2020      	movs	r0, #32
    843c:	bd70      	pop	{r4, r5, r6, pc}
    843e:	f000 fceb 	bl	8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    8442:	68a2      	ldr	r2, [r4, #8]
    8444:	e9f2 1330 	ldrd	r1, r3, [r2, #192]!	; 0xc0
    8448:	1c49      	adds	r1, r1, #1
    844a:	f143 0300 	adc.w	r3, r3, #0
    844e:	e9c2 1300 	strd	r1, r3, [r2]
    8452:	bd70      	pop	{r4, r5, r6, pc}
    8454:	2000012c 	.word	0x2000012c
    8458:	20000140 	.word	0x20000140
    845c:	b570      	push	{r4, r5, r6, lr}
    845e:	4c22      	ldr	r4, [pc, #136]	; (84e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e8>)
    8460:	78a0      	ldrb	r0, [r4, #2]
    8462:	0700      	lsls	r0, r0, #28
    8464:	d53e      	bpl.n	84e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e4>
    8466:	68a0      	ldr	r0, [r4, #8]
    8468:	3068      	adds	r0, #104	; 0x68
    846a:	f005 fdd2 	bl	e012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    846e:	b148      	cbz	r0, 8484 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x484>
    8470:	68a0      	ldr	r0, [r4, #8]
    8472:	21fe      	movs	r1, #254	; 0xfe
    8474:	2500      	movs	r5, #0
    8476:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    847a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    847e:	2919      	cmp	r1, #25
    8480:	d10c      	bne.n	849c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49c>
    8482:	e004      	b.n	848e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48e>
    8484:	f240 7146 	movw	r1, #1862	; 0x746
    8488:	2031      	movs	r0, #49	; 0x31
    848a:	f7fb fb8d 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    848e:	f880 50ab 	strb.w	r5, [r0, #171]	; 0xab
    8492:	f7ff fd83 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    8496:	68a0      	ldr	r0, [r4, #8]
    8498:	f880 5076 	strb.w	r5, [r0, #118]	; 0x76
    849c:	68a0      	ldr	r0, [r4, #8]
    849e:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    84a2:	291f      	cmp	r1, #31
    84a4:	d002      	beq.n	84ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ac>
    84a6:	2927      	cmp	r1, #39	; 0x27
    84a8:	d113      	bne.n	84d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d2>
    84aa:	e00b      	b.n	84c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c4>
    84ac:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    84b0:	f004 fb38 	bl	cb24 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    84b4:	b108      	cbz	r0, 84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    84b6:	2026      	movs	r0, #38	; 0x26
    84b8:	e000      	b.n	84bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4bc>
    84ba:	2020      	movs	r0, #32
    84bc:	68a1      	ldr	r1, [r4, #8]
    84be:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    84c2:	e006      	b.n	84d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d2>
    84c4:	2101      	movs	r1, #1
    84c6:	f880 1185 	strb.w	r1, [r0, #389]	; 0x185
    84ca:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    84ce:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    84d2:	68a0      	ldr	r0, [r4, #8]
    84d4:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    84d8:	2908      	cmp	r1, #8
    84da:	d103      	bne.n	84e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e4>
    84dc:	2102      	movs	r1, #2
    84de:	7021      	strb	r1, [r4, #0]
    84e0:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    84e4:	bd70      	pop	{r4, r5, r6, pc}
    84e6:	0000      	.short	0x0000
    84e8:	2000012c 	.word	0x2000012c
    84ec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    84ee:	4605      	mov	r5, r0
    84f0:	4668      	mov	r0, sp
    84f2:	f7fc f9e1 	bl	48b8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    84f6:	b318      	cbz	r0, 8540 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x540>
    84f8:	2222      	movs	r2, #34	; 0x22
    84fa:	2100      	movs	r1, #0
    84fc:	9800      	ldr	r0, [sp, #0]
    84fe:	f003 f9e2 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8502:	2103      	movs	r1, #3
    8504:	9800      	ldr	r0, [sp, #0]
    8506:	f004 fda2 	bl	d04e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    850a:	9800      	ldr	r0, [sp, #0]
    850c:	7801      	ldrb	r1, [r0, #0]
    850e:	f021 0110 	bic.w	r1, r1, #16
    8512:	7001      	strb	r1, [r0, #0]
    8514:	4629      	mov	r1, r5
    8516:	f7fd fb5b 	bl	5bd0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    851a:	2100      	movs	r1, #0
    851c:	4c5e      	ldr	r4, [pc, #376]	; (8698 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x698>)
    851e:	f644 162f 	movw	r6, #18735	; 0x492f
    8522:	2d0e      	cmp	r5, #14
    8524:	d07e      	beq.n	8624 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x624>
    8526:	dc0e      	bgt.n	8546 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x546>
    8528:	f1a5 0502 	sub.w	r5, r5, #2
    852c:	2d0c      	cmp	r5, #12
    852e:	d21c      	bcs.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    8530:	e8df f005 	tbb	[pc, r5]
    8534:	a7451b1e 	.word	0xa7451b1e
    8538:	511b1ea7 	.word	0x511b1ea7
    853c:	3723a71b 	.word	0x3723a71b
    8540:	f640 116b 	movw	r1, #2411	; 0x96b
    8544:	e0a3      	b.n	868e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68e>
    8546:	2d15      	cmp	r5, #21
    8548:	d058      	beq.n	85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>
    854a:	dc08      	bgt.n	855e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55e>
    854c:	2d11      	cmp	r5, #17
    854e:	d01f      	beq.n	8590 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x590>
    8550:	2d12      	cmp	r5, #18
    8552:	d01c      	beq.n	858e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58e>
    8554:	2d13      	cmp	r5, #19
    8556:	d01a      	beq.n	858e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58e>
    8558:	2d14      	cmp	r5, #20
    855a:	d106      	bne.n	856a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56a>
    855c:	e04e      	b.n	85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>
    855e:	2d16      	cmp	r5, #22
    8560:	d023      	beq.n	85aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5aa>
    8562:	2d17      	cmp	r5, #23
    8564:	d065      	beq.n	8632 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x632>
    8566:	2dff      	cmp	r5, #255	; 0xff
    8568:	d07e      	beq.n	8668 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x668>
    856a:	f640 11dd 	movw	r1, #2525	; 0x9dd
    856e:	e08e      	b.n	868e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68e>
    8570:	68a1      	ldr	r1, [r4, #8]
    8572:	9800      	ldr	r0, [sp, #0]
    8574:	f891 10e6 	ldrb.w	r1, [r1, #230]	; 0xe6
    8578:	e015      	b.n	85a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a6>
    857a:	9800      	ldr	r0, [sp, #0]
    857c:	220b      	movs	r2, #11
    857e:	7102      	strb	r2, [r0, #4]
    8580:	2259      	movs	r2, #89	; 0x59
    8582:	7142      	strb	r2, [r0, #5]
    8584:	7181      	strb	r1, [r0, #6]
    8586:	215b      	movs	r1, #91	; 0x5b
    8588:	71c1      	strb	r1, [r0, #7]
    858a:	2112      	movs	r1, #18
    858c:	7201      	strb	r1, [r0, #8]
    858e:	e078      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    8590:	2103      	movs	r1, #3
    8592:	9800      	ldr	r0, [sp, #0]
    8594:	f004 fd37 	bl	d006 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    8598:	2106      	movs	r1, #6
    859a:	9800      	ldr	r0, [sp, #0]
    859c:	f004 fd35 	bl	d00a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    85a0:	e06f      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    85a2:	9800      	ldr	r0, [sp, #0]
    85a4:	2106      	movs	r1, #6
    85a6:	7101      	strb	r1, [r0, #4]
    85a8:	e06b      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    85aa:	9800      	ldr	r0, [sp, #0]
    85ac:	f8d4 1008 	ldr.w	r1, [r4, #8]
    85b0:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
    85b4:	7102      	strb	r2, [r0, #4]
    85b6:	f891 11a9 	ldrb.w	r1, [r1, #425]	; 0x1a9
    85ba:	7141      	strb	r1, [r0, #5]
    85bc:	e061      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    85be:	68a1      	ldr	r1, [r4, #8]
    85c0:	9800      	ldr	r0, [sp, #0]
    85c2:	f501 7188 	add.w	r1, r1, #272	; 0x110
    85c6:	f004 fd33 	bl	d030 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    85ca:	68a1      	ldr	r1, [r4, #8]
    85cc:	9800      	ldr	r0, [sp, #0]
    85ce:	31dc      	adds	r1, #220	; 0xdc
    85d0:	f004 fd2b 	bl	d02a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    85d4:	e055      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    85d6:	9101      	str	r1, [sp, #4]
    85d8:	9102      	str	r1, [sp, #8]
    85da:	f001 fe09 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    85de:	68a1      	ldr	r1, [r4, #8]
    85e0:	4030      	ands	r0, r6
    85e2:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    85e6:	4001      	ands	r1, r0
    85e8:	f88d 1004 	strb.w	r1, [sp, #4]
    85ec:	0a00      	lsrs	r0, r0, #8
    85ee:	f88d 0005 	strb.w	r0, [sp, #5]
    85f2:	a901      	add	r1, sp, #4
    85f4:	9800      	ldr	r0, [sp, #0]
    85f6:	f004 fd25 	bl	d044 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    85fa:	e042      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    85fc:	68a0      	ldr	r0, [r4, #8]
    85fe:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
    8602:	9800      	ldr	r0, [sp, #0]
    8604:	f004 fd2b 	bl	d05e <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8608:	68a0      	ldr	r0, [r4, #8]
    860a:	f8b0 10e8 	ldrh.w	r1, [r0, #232]	; 0xe8
    860e:	9800      	ldr	r0, [sp, #0]
    8610:	f004 fd29 	bl	d066 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8614:	68a0      	ldr	r0, [r4, #8]
    8616:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40
    861a:	9800      	ldr	r0, [sp, #0]
    861c:	f004 fd27 	bl	d06e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    8620:	68a0      	ldr	r0, [r4, #8]
    8622:	e000      	b.n	8626 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x626>
    8624:	e010      	b.n	8648 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x648>
    8626:	f8b0 10e6 	ldrh.w	r1, [r0, #230]	; 0xe6
    862a:	9800      	ldr	r0, [sp, #0]
    862c:	f004 fd23 	bl	d076 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8630:	e027      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    8632:	68a1      	ldr	r1, [r4, #8]
    8634:	f891 01a6 	ldrb.w	r0, [r1, #422]	; 0x1a6
    8638:	2801      	cmp	r0, #1
    863a:	9800      	ldr	r0, [sp, #0]
    863c:	d0b8      	beq.n	85b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b0>
    863e:	f811 2f5e 	ldrb.w	r2, [r1, #94]!
    8642:	7102      	strb	r2, [r0, #4]
    8644:	7849      	ldrb	r1, [r1, #1]
    8646:	e7b8      	b.n	85ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ba>
    8648:	9101      	str	r1, [sp, #4]
    864a:	9102      	str	r1, [sp, #8]
    864c:	f001 fdd0 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8650:	68a1      	ldr	r1, [r4, #8]
    8652:	4030      	ands	r0, r6
    8654:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
    8658:	4001      	ands	r1, r0
    865a:	f88d 1004 	strb.w	r1, [sp, #4]
    865e:	0a00      	lsrs	r0, r0, #8
    8660:	f88d 0005 	strb.w	r0, [sp, #5]
    8664:	a901      	add	r1, sp, #4
    8666:	e000      	b.n	866a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66a>
    8668:	e003      	b.n	8672 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x672>
    866a:	9800      	ldr	r0, [sp, #0]
    866c:	f004 fce5 	bl	d03a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    8670:	e007      	b.n	8682 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x682>
    8672:	68a0      	ldr	r0, [r4, #8]
    8674:	f890 2187 	ldrb.w	r2, [r0, #391]	; 0x187
    8678:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    867c:	9800      	ldr	r0, [sp, #0]
    867e:	f004 fcc6 	bl	d00e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8682:	f7fc f8f3 	bl	486c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8686:	2800      	cmp	r0, #0
    8688:	d104      	bne.n	8694 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x694>
    868a:	f640 11e1 	movw	r1, #2529	; 0x9e1
    868e:	2031      	movs	r0, #49	; 0x31
    8690:	f7fb fa8a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8694:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8696:	0000      	.short	0x0000
    8698:	2000012c 	.word	0x2000012c
    869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86a0:	4c87      	ldr	r4, [pc, #540]	; (88c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c0>)
    86a2:	4682      	mov	sl, r0
    86a4:	4689      	mov	r9, r1
    86a6:	68a0      	ldr	r0, [r4, #8]
    86a8:	8800      	ldrh	r0, [r0, #0]
    86aa:	f7fb fec7 	bl	443c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    86ae:	0006      	movs	r6, r0
    86b0:	d00a      	beq.n	86c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c8>
    86b2:	8860      	ldrh	r0, [r4, #2]
    86b4:	f04f 0500 	mov.w	r5, #0
    86b8:	05c0      	lsls	r0, r0, #23
    86ba:	68a0      	ldr	r0, [r4, #8]
    86bc:	d509      	bpl.n	86d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d2>
    86be:	f8a0 509c 	strh.w	r5, [r0, #156]	; 0x9c
    86c2:	f880 5104 	strb.w	r5, [r0, #260]	; 0x104
    86c6:	e008      	b.n	86da <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6da>
    86c8:	f640 5181 	movw	r1, #3457	; 0xd81
    86cc:	2031      	movs	r0, #49	; 0x31
    86ce:	f7fb fa6b 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86d2:	f830 1f9c 	ldrh.w	r1, [r0, #156]!
    86d6:	1c49      	adds	r1, r1, #1
    86d8:	8001      	strh	r1, [r0, #0]
    86da:	f001 f89d 	bl	9818 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1818>
    86de:	f04f 0801 	mov.w	r8, #1
    86e2:	b320      	cbz	r0, 872e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72e>
    86e4:	8860      	ldrh	r0, [r4, #2]
    86e6:	0500      	lsls	r0, r0, #20
    86e8:	d506      	bpl.n	86f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f8>
    86ea:	68a0      	ldr	r0, [r4, #8]
    86ec:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    86f0:	b111      	cbz	r1, 86f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f8>
    86f2:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    86f6:	e01a      	b.n	872e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72e>
    86f8:	68a0      	ldr	r0, [r4, #8]
    86fa:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    86fe:	1c49      	adds	r1, r1, #1
    8700:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    8704:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
    8708:	428b      	cmp	r3, r1
    870a:	d301      	bcc.n	8710 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x710>
    870c:	1a5a      	subs	r2, r3, r1
    870e:	e000      	b.n	8712 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x712>
    8710:	2200      	movs	r2, #0
    8712:	88a7      	ldrh	r7, [r4, #4]
    8714:	1d7f      	adds	r7, r7, #5
    8716:	42ba      	cmp	r2, r7
    8718:	d801      	bhi.n	871e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71e>
    871a:	f880 809a 	strb.w	r8, [r0, #154]	; 0x9a
    871e:	4299      	cmp	r1, r3
    8720:	d305      	bcc.n	872e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72e>
    8722:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    8726:	f880 81f2 	strb.w	r8, [r0, #498]	; 0x1f2
    872a:	f001 f999 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    872e:	8860      	ldrh	r0, [r4, #2]
    8730:	f04f 0702 	mov.w	r7, #2
    8734:	f410 7f40 	tst.w	r0, #768	; 0x300
    8738:	d00e      	beq.n	8758 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x758>
    873a:	68a0      	ldr	r0, [r4, #8]
    873c:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    8740:	b111      	cbz	r1, 8748 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x748>
    8742:	2903      	cmp	r1, #3
    8744:	d108      	bne.n	8758 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x758>
    8746:	e002      	b.n	874e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74e>
    8748:	f880 8079 	strb.w	r8, [r0, #121]	; 0x79
    874c:	e001      	b.n	8752 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x752>
    874e:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    8752:	2101      	movs	r1, #1
    8754:	f7fe fc72 	bl	703c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8758:	68a0      	ldr	r0, [r4, #8]
    875a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    875e:	2901      	cmp	r1, #1
    8760:	d104      	bne.n	876c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76c>
    8762:	8861      	ldrh	r1, [r4, #2]
    8764:	0549      	lsls	r1, r1, #21
    8766:	d501      	bpl.n	876c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76c>
    8768:	f880 7079 	strb.w	r7, [r0, #121]	; 0x79
    876c:	f1ba 0f00 	cmp.w	sl, #0
    8770:	d175      	bne.n	885e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x85e>
    8772:	78a1      	ldrb	r1, [r4, #2]
    8774:	0649      	lsls	r1, r1, #25
    8776:	d502      	bpl.n	877e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x77e>
    8778:	f8a0 5118 	strh.w	r5, [r0, #280]	; 0x118
    877c:	e004      	b.n	8788 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x788>
    877e:	f8b0 1118 	ldrh.w	r1, [r0, #280]	; 0x118
    8782:	1c49      	adds	r1, r1, #1
    8784:	f8a0 1118 	strh.w	r1, [r0, #280]	; 0x118
    8788:	4648      	mov	r0, r9
    878a:	f7ff fdbd 	bl	8308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x308>
    878e:	ea40 0009 	orr.w	r0, r0, r9
    8792:	4681      	mov	r9, r0
    8794:	f7ff fd2a 	bl	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    8798:	68a7      	ldr	r7, [r4, #8]
    879a:	f8b7 00f8 	ldrh.w	r0, [r7, #248]	; 0xf8
    879e:	1c40      	adds	r0, r0, #1
    87a0:	f8a7 00f8 	strh.w	r0, [r7, #248]	; 0xf8
    87a4:	f897 00fc 	ldrb.w	r0, [r7, #252]	; 0xfc
    87a8:	b128      	cbz	r0, 87b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7b6>
    87aa:	f7fc fa79 	bl	4ca0 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    87ae:	b1a8      	cbz	r0, 87dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7dc>
    87b0:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    87b4:	e012      	b.n	87dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7dc>
    87b6:	f7fc f901 	bl	49bc <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    87ba:	b108      	cbz	r0, 87c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c0>
    87bc:	f8a7 50f8 	strh.w	r5, [r7, #248]	; 0xf8
    87c0:	f7fc f8f6 	bl	49b0 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    87c4:	b150      	cbz	r0, 87dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7dc>
    87c6:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    87ca:	1c40      	adds	r0, r0, #1
    87cc:	b2c0      	uxtb	r0, r0
    87ce:	f887 0104 	strb.w	r0, [r7, #260]	; 0x104
    87d2:	2802      	cmp	r0, #2
    87d4:	d902      	bls.n	87dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7dc>
    87d6:	f827 5ff8 	strh.w	r5, [r7, #248]!
    87da:	733d      	strb	r5, [r7, #12]
    87dc:	68a0      	ldr	r0, [r4, #8]
    87de:	2301      	movs	r3, #1
    87e0:	2100      	movs	r1, #0
    87e2:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    87e6:	3068      	adds	r0, #104	; 0x68
    87e8:	f004 f94e 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    87ec:	b920      	cbnz	r0, 87f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7f8>
    87ee:	68a0      	ldr	r0, [r4, #8]
    87f0:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    87f4:	280c      	cmp	r0, #12
    87f6:	d15f      	bne.n	88b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b8>
    87f8:	68a0      	ldr	r0, [r4, #8]
    87fa:	2301      	movs	r3, #1
    87fc:	2100      	movs	r1, #0
    87fe:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8802:	3068      	adds	r0, #104	; 0x68
    8804:	f004 f940 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8808:	b350      	cbz	r0, 8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    880a:	68a0      	ldr	r0, [r4, #8]
    880c:	2301      	movs	r3, #1
    880e:	2100      	movs	r1, #0
    8810:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    8814:	3068      	adds	r0, #104	; 0x68
    8816:	f004 f937 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    881a:	b308      	cbz	r0, 8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    881c:	68a0      	ldr	r0, [r4, #8]
    881e:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    8822:	2902      	cmp	r1, #2
    8824:	d148      	bne.n	88b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b8>
    8826:	f890 0104 	ldrb.w	r0, [r0, #260]	; 0x104
    882a:	b9c8      	cbnz	r0, 8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    882c:	4630      	mov	r0, r6
    882e:	f003 fd0e 	bl	c24e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8832:	b1a8      	cbz	r0, 8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    8834:	68a0      	ldr	r0, [r4, #8]
    8836:	3068      	adds	r0, #104	; 0x68
    8838:	f005 fbeb 	bl	e012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    883c:	b980      	cbnz	r0, 8860 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x860>
    883e:	68a1      	ldr	r1, [r4, #8]
    8840:	f8b1 00f2 	ldrh.w	r0, [r1, #242]	; 0xf2
    8844:	2801      	cmp	r0, #1
    8846:	d937      	bls.n	88b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b8>
    8848:	f881 80fa 	strb.w	r8, [r1, #250]	; 0xfa
    884c:	f8b1 209e 	ldrh.w	r2, [r1, #158]	; 0x9e
    8850:	f8b1 009c 	ldrh.w	r0, [r1, #156]	; 0x9c
    8854:	1e93      	subs	r3, r2, #2
    8856:	4298      	cmp	r0, r3
    8858:	db03      	blt.n	8862 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x862>
    885a:	2001      	movs	r0, #1
    885c:	e004      	b.n	8868 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x868>
    885e:	e01d      	b.n	889c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x89c>
    8860:	e02a      	b.n	88b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8b8>
    8862:	1a10      	subs	r0, r2, r0
    8864:	1e40      	subs	r0, r0, #1
    8866:	b280      	uxth	r0, r0
    8868:	f8b1 20f8 	ldrh.w	r2, [r1, #248]	; 0xf8
    886c:	88a3      	ldrh	r3, [r4, #4]
    886e:	429a      	cmp	r2, r3
    8870:	d301      	bcc.n	8876 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x876>
    8872:	2201      	movs	r2, #1
    8874:	e002      	b.n	887c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x87c>
    8876:	1a9a      	subs	r2, r3, r2
    8878:	1c52      	adds	r2, r2, #1
    887a:	b292      	uxth	r2, r2
    887c:	4290      	cmp	r0, r2
    887e:	d900      	bls.n	8882 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x882>
    8880:	4610      	mov	r0, r2
    8882:	2801      	cmp	r0, #1
    8884:	d102      	bne.n	888c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88c>
    8886:	bf00      	nop
    8888:	f881 50fa 	strb.w	r5, [r1, #250]	; 0xfa
    888c:	68a1      	ldr	r1, [r4, #8]
    888e:	f8b1 206c 	ldrh.w	r2, [r1, #108]	; 0x6c
    8892:	4410      	add	r0, r2
    8894:	f8a1 00f4 	strh.w	r0, [r1, #244]	; 0xf4
    8898:	f001 f87e 	bl	9998 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1998>
    889c:	78a0      	ldrb	r0, [r4, #2]
    889e:	464a      	mov	r2, r9
    88a0:	f3c0 1180 	ubfx	r1, r0, #6, #1
    88a4:	4650      	mov	r0, sl
    88a6:	f000 ffcb 	bl	9840 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1840>
    88aa:	68a0      	ldr	r0, [r4, #8]
    88ac:	f880 50fb 	strb.w	r5, [r0, #251]	; 0xfb
    88b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    88b4:	f7fb bfc4 	b.w	4840 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    88b8:	2001      	movs	r0, #1
    88ba:	68a1      	ldr	r1, [r4, #8]
    88bc:	e7e4      	b.n	8888 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x888>
    88be:	0000      	.short	0x0000
    88c0:	2000012c 	.word	0x2000012c
    88c4:	b570      	push	{r4, r5, r6, lr}
    88c6:	4c4e      	ldr	r4, [pc, #312]	; (8a00 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa00>)
    88c8:	2301      	movs	r3, #1
    88ca:	2100      	movs	r1, #0
    88cc:	68a0      	ldr	r0, [r4, #8]
    88ce:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    88d2:	3068      	adds	r0, #104	; 0x68
    88d4:	f004 f8d8 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88d8:	2800      	cmp	r0, #0
    88da:	d076      	beq.n	89ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9ca>
    88dc:	68a0      	ldr	r0, [r4, #8]
    88de:	f890 11ad 	ldrb.w	r1, [r0, #429]	; 0x1ad
    88e2:	2500      	movs	r5, #0
    88e4:	b139      	cbz	r1, 88f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8f6>
    88e6:	2100      	movs	r1, #0
    88e8:	200e      	movs	r0, #14
    88ea:	f000 f88b 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    88ee:	68a0      	ldr	r0, [r4, #8]
    88f0:	f880 51ad 	strb.w	r5, [r0, #429]	; 0x1ad
    88f4:	e082      	b.n	89fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fc>
    88f6:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    88fa:	b119      	cbz	r1, 8904 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x904>
    88fc:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    8900:	0789      	lsls	r1, r1, #30
    8902:	d00a      	beq.n	891a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x91a>
    8904:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    8908:	b111      	cbz	r1, 8910 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x910>
    890a:	f890 119d 	ldrb.w	r1, [r0, #413]	; 0x19d
    890e:	b189      	cbz	r1, 8934 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x934>
    8910:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    8914:	2901      	cmp	r1, #1
    8916:	d02f      	beq.n	8978 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x978>
    8918:	e06a      	b.n	89f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f0>
    891a:	2100      	movs	r1, #0
    891c:	200c      	movs	r0, #12
    891e:	f000 f871 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    8922:	68a0      	ldr	r0, [r4, #8]
    8924:	f810 1fae 	ldrb.w	r1, [r0, #174]!
    8928:	f041 0101 	orr.w	r1, r1, #1
    892c:	7001      	strb	r1, [r0, #0]
    892e:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8932:	e063      	b.n	89fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fc>
    8934:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8938:	2924      	cmp	r1, #36	; 0x24
    893a:	d01b      	beq.n	8974 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x974>
    893c:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    8940:	2924      	cmp	r1, #36	; 0x24
    8942:	d017      	beq.n	8974 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x974>
    8944:	f05f 0300 	movs.w	r3, #0
    8948:	f500 72c7 	add.w	r2, r0, #398	; 0x18e
    894c:	f500 71ce 	add.w	r1, r0, #412	; 0x19c
    8950:	f004 fcd0 	bl	d2f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8954:	68a0      	ldr	r0, [r4, #8]
    8956:	f880 519c 	strb.w	r5, [r0, #412]	; 0x19c
    895a:	2100      	movs	r1, #0
    895c:	2014      	movs	r0, #20
    895e:	f000 f851 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    8962:	68a1      	ldr	r1, [r4, #8]
    8964:	f101 0024 	add.w	r0, r1, #36	; 0x24
    8968:	8bc2      	ldrh	r2, [r0, #30]
    896a:	f821 2fe6 	strh.w	r2, [r1, #230]!
    896e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8970:	8048      	strh	r0, [r1, #2]
    8972:	e043      	b.n	89fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9fc>
    8974:	2301      	movs	r3, #1
    8976:	e7e7      	b.n	8948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x948>
    8978:	f890 11a7 	ldrb.w	r1, [r0, #423]	; 0x1a7
    897c:	bb21      	cbnz	r1, 89c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c8>
    897e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8982:	2301      	movs	r3, #1
    8984:	210b      	movs	r1, #11
    8986:	3068      	adds	r0, #104	; 0x68
    8988:	f004 f87e 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    898c:	b9e0      	cbnz	r0, 89c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c8>
    898e:	68a0      	ldr	r0, [r4, #8]
    8990:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
    8994:	f005 fb45 	bl	e022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8998:	4605      	mov	r5, r0
    899a:	68a0      	ldr	r0, [r4, #8]
    899c:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    89a0:	f005 fb3f 	bl	e022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    89a4:	4606      	mov	r6, r0
    89a6:	68a0      	ldr	r0, [r4, #8]
    89a8:	f890 11a8 	ldrb.w	r1, [r0, #424]	; 0x1a8
    89ac:	4628      	mov	r0, r5
    89ae:	f005 fb43 	bl	e038 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    89b2:	b158      	cbz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    89b4:	68a0      	ldr	r0, [r4, #8]
    89b6:	f890 11a9 	ldrb.w	r1, [r0, #425]	; 0x1a9
    89ba:	4630      	mov	r0, r6
    89bc:	f005 fb3c 	bl	e038 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    89c0:	b120      	cbz	r0, 89cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9cc>
    89c2:	2000      	movs	r0, #0
    89c4:	f000 f900 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    89c8:	e012      	b.n	89f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f0>
    89ca:	e012      	b.n	89f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f2>
    89cc:	68a0      	ldr	r0, [r4, #8]
    89ce:	2301      	movs	r3, #1
    89d0:	2103      	movs	r1, #3
    89d2:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    89d6:	3068      	adds	r0, #104	; 0x68
    89d8:	f004 f856 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89dc:	b940      	cbnz	r0, 89f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f0>
    89de:	68a0      	ldr	r0, [r4, #8]
    89e0:	2301      	movs	r3, #1
    89e2:	2102      	movs	r1, #2
    89e4:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    89e8:	3068      	adds	r0, #104	; 0x68
    89ea:	f004 f84d 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89ee:	b108      	cbz	r0, 89f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9f4>
    89f0:	2000      	movs	r0, #0
    89f2:	bd70      	pop	{r4, r5, r6, pc}
    89f4:	2100      	movs	r1, #0
    89f6:	2016      	movs	r0, #22
    89f8:	f000 f804 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    89fc:	2001      	movs	r0, #1
    89fe:	bd70      	pop	{r4, r5, r6, pc}
    8a00:	2000012c 	.word	0x2000012c
    8a04:	b570      	push	{r4, r5, r6, lr}
    8a06:	4c0d      	ldr	r4, [pc, #52]	; (8a3c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa3c>)
    8a08:	4606      	mov	r6, r0
    8a0a:	460d      	mov	r5, r1
    8a0c:	68a0      	ldr	r0, [r4, #8]
    8a0e:	3068      	adds	r0, #104	; 0x68
    8a10:	f005 faff 	bl	e012 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8a14:	b120      	cbz	r0, 8a20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa20>
    8a16:	f640 11f4 	movw	r1, #2548	; 0x9f4
    8a1a:	2031      	movs	r0, #49	; 0x31
    8a1c:	f7fb f8c4 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a20:	68a2      	ldr	r2, [r4, #8]
    8a22:	2000      	movs	r0, #0
    8a24:	f882 60e4 	strb.w	r6, [r2, #228]	; 0xe4
    8a28:	b115      	cbz	r5, 8a30 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa30>
    8a2a:	f8a2 00a8 	strh.w	r0, [r2, #168]	; 0xa8
    8a2e:	bd70      	pop	{r4, r5, r6, pc}
    8a30:	f822 0fa2 	strh.w	r0, [r2, #162]!
    8a34:	2001      	movs	r0, #1
    8a36:	7110      	strb	r0, [r2, #4]
    8a38:	bd70      	pop	{r4, r5, r6, pc}
    8a3a:	0000      	.short	0x0000
    8a3c:	2000012c 	.word	0x2000012c
    8a40:	b570      	push	{r4, r5, r6, lr}
    8a42:	4c18      	ldr	r4, [pc, #96]	; (8aa4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa4>)
    8a44:	2500      	movs	r5, #0
    8a46:	68a0      	ldr	r0, [r4, #8]
    8a48:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    8a4c:	2901      	cmp	r1, #1
    8a4e:	d00a      	beq.n	8a66 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa66>
    8a50:	2902      	cmp	r1, #2
    8a52:	d125      	bne.n	8aa0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa0>
    8a54:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    8a58:	b1a9      	cbz	r1, 8a86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa86>
    8a5a:	2106      	movs	r1, #6
    8a5c:	f880 10e6 	strb.w	r1, [r0, #230]	; 0xe6
    8a60:	2101      	movs	r1, #1
    8a62:	2002      	movs	r0, #2
    8a64:	e017      	b.n	8a96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa96>
    8a66:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    8a6a:	2900      	cmp	r1, #0
    8a6c:	d118      	bne.n	8aa0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa0>
    8a6e:	f100 03c8 	add.w	r3, r0, #200	; 0xc8
    8a72:	f500 7184 	add.w	r1, r0, #264	; 0x108
    8a76:	2200      	movs	r2, #0
    8a78:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    8a7c:	f003 ffbc 	bl	c9f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8a80:	2101      	movs	r1, #1
    8a82:	2005      	movs	r0, #5
    8a84:	e007      	b.n	8a96 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa96>
    8a86:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8a8a:	0740      	lsls	r0, r0, #29
    8a8c:	d501      	bpl.n	8a92 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa92>
    8a8e:	2011      	movs	r0, #17
    8a90:	e000      	b.n	8a94 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa94>
    8a92:	200d      	movs	r0, #13
    8a94:	2101      	movs	r1, #1
    8a96:	f7ff ffb5 	bl	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    8a9a:	68a0      	ldr	r0, [r4, #8]
    8a9c:	f880 5173 	strb.w	r5, [r0, #371]	; 0x173
    8aa0:	bd70      	pop	{r4, r5, r6, pc}
    8aa2:	0000      	.short	0x0000
    8aa4:	2000012c 	.word	0x2000012c
    8aa8:	b570      	push	{r4, r5, r6, lr}
    8aaa:	4a2b      	ldr	r2, [pc, #172]	; (8b58 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb58>)
    8aac:	4603      	mov	r3, r0
    8aae:	8850      	ldrh	r0, [r2, #2]
    8ab0:	4318      	orrs	r0, r3
    8ab2:	8050      	strh	r0, [r2, #2]
    8ab4:	4610      	mov	r0, r2
    8ab6:	2b40      	cmp	r3, #64	; 0x40
    8ab8:	6880      	ldr	r0, [r0, #8]
    8aba:	d00d      	beq.n	8ad8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xad8>
    8abc:	079e      	lsls	r6, r3, #30
    8abe:	f04f 0500 	mov.w	r5, #0
    8ac2:	f04f 0401 	mov.w	r4, #1
    8ac6:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8aca:	d50c      	bpl.n	8ae6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae6>
    8acc:	b14e      	cbz	r6, 8ae2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae2>
    8ace:	f640 41ee 	movw	r1, #3310	; 0xcee
    8ad2:	2031      	movs	r0, #49	; 0x31
    8ad4:	f7fb f868 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8adc:	2104      	movs	r1, #4
    8ade:	f7fe baad 	b.w	703c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8ae2:	60d1      	str	r1, [r2, #12]
    8ae4:	e01c      	b.n	8b20 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb20>
    8ae6:	b1c6      	cbz	r6, 8b1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb1a>
    8ae8:	6111      	str	r1, [r2, #16]
    8aea:	78c9      	ldrb	r1, [r1, #3]
    8aec:	2906      	cmp	r1, #6
    8aee:	d002      	beq.n	8af6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaf6>
    8af0:	290b      	cmp	r1, #11
    8af2:	d112      	bne.n	8b1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb1a>
    8af4:	e009      	b.n	8b0a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0a>
    8af6:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8afa:	2917      	cmp	r1, #23
    8afc:	d10d      	bne.n	8b1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb1a>
    8afe:	2100      	movs	r1, #0
    8b00:	e9c0 112e 	strd	r1, r1, [r0, #184]	; 0xb8
    8b04:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
    8b08:	e007      	b.n	8b1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb1a>
    8b0a:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8b0e:	2911      	cmp	r1, #17
    8b10:	d103      	bne.n	8b1a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb1a>
    8b12:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
    8b16:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    8b1a:	0799      	lsls	r1, r3, #30
    8b1c:	d516      	bpl.n	8b4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4c>
    8b1e:	68d1      	ldr	r1, [r2, #12]
    8b20:	78c9      	ldrb	r1, [r1, #3]
    8b22:	2905      	cmp	r1, #5
    8b24:	d002      	beq.n	8b2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2c>
    8b26:	290b      	cmp	r1, #11
    8b28:	d110      	bne.n	8b4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4c>
    8b2a:	e009      	b.n	8b40 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb40>
    8b2c:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8b30:	2915      	cmp	r1, #21
    8b32:	d10b      	bne.n	8b4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4c>
    8b34:	2100      	movs	r1, #0
    8b36:	e9e0 1130 	strd	r1, r1, [r0, #192]!	; 0xc0
    8b3a:	f800 4c45 	strb.w	r4, [r0, #-69]
    8b3e:	e005      	b.n	8b4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4c>
    8b40:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    8b44:	2910      	cmp	r1, #16
    8b46:	d101      	bne.n	8b4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4c>
    8b48:	f880 507b 	strb.w	r5, [r0, #123]	; 0x7b
    8b4c:	0698      	lsls	r0, r3, #26
    8b4e:	d501      	bpl.n	8b54 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb54>
    8b50:	2008      	movs	r0, #8
    8b52:	7050      	strb	r0, [r2, #1]
    8b54:	bd70      	pop	{r4, r5, r6, pc}
    8b56:	0000      	.short	0x0000
    8b58:	2000012c 	.word	0x2000012c
    8b5c:	b570      	push	{r4, r5, r6, lr}
    8b5e:	4c19      	ldr	r4, [pc, #100]	; (8bc4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc4>)
    8b60:	68a0      	ldr	r0, [r4, #8]
    8b62:	f890 118e 	ldrb.w	r1, [r0, #398]	; 0x18e
    8b66:	b109      	cbz	r1, 8b6c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6c>
    8b68:	2601      	movs	r6, #1
    8b6a:	e000      	b.n	8b6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb6e>
    8b6c:	2600      	movs	r6, #0
    8b6e:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    8b72:	b10a      	cbz	r2, 8b78 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb78>
    8b74:	2501      	movs	r5, #1
    8b76:	e000      	b.n	8b7a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb7a>
    8b78:	2500      	movs	r5, #0
    8b7a:	b90e      	cbnz	r6, 8b80 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb80>
    8b7c:	f890 1062 	ldrb.w	r1, [r0, #98]	; 0x62
    8b80:	b90d      	cbnz	r5, 8b86 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb86>
    8b82:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
    8b86:	f100 035a 	add.w	r3, r0, #90	; 0x5a
    8b8a:	7219      	strb	r1, [r3, #8]
    8b8c:	725a      	strb	r2, [r3, #9]
    8b8e:	2101      	movs	r1, #1
    8b90:	7299      	strb	r1, [r3, #10]
    8b92:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    8b96:	2801      	cmp	r0, #1
    8b98:	d001      	beq.n	8b9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb9e>
    8b9a:	b906      	cbnz	r6, 8b9e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb9e>
    8b9c:	b115      	cbz	r5, 8ba4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba4>
    8b9e:	2000      	movs	r0, #0
    8ba0:	f000 f812 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    8ba4:	68a0      	ldr	r0, [r4, #8]
    8ba6:	f004 fbc0 	bl	d32a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8baa:	2800      	cmp	r0, #0
    8bac:	d008      	beq.n	8bc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc0>
    8bae:	68a1      	ldr	r1, [r4, #8]
    8bb0:	f501 72e9 	add.w	r2, r1, #466	; 0x1d2
    8bb4:	8808      	ldrh	r0, [r1, #0]
    8bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8bba:	3124      	adds	r1, #36	; 0x24
    8bbc:	f004 bb76 	b.w	d2ac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8bc0:	bd70      	pop	{r4, r5, r6, pc}
    8bc2:	0000      	.short	0x0000
    8bc4:	2000012c 	.word	0x2000012c
    8bc8:	b510      	push	{r4, lr}
    8bca:	4c10      	ldr	r4, [pc, #64]	; (8c0c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0c>)
    8bcc:	68a1      	ldr	r1, [r4, #8]
    8bce:	880a      	ldrh	r2, [r1, #0]
    8bd0:	f8a1 21fe 	strh.w	r2, [r1, #510]	; 0x1fe
    8bd4:	f881 01fc 	strb.w	r0, [r1, #508]	; 0x1fc
    8bd8:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
    8bdc:	f005 fa21 	bl	e022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8be0:	68a1      	ldr	r1, [r4, #8]
    8be2:	f881 0200 	strb.w	r0, [r1, #512]	; 0x200
    8be6:	f891 0063 	ldrb.w	r0, [r1, #99]	; 0x63
    8bea:	f005 fa1a 	bl	e022 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8bee:	68a2      	ldr	r2, [r4, #8]
    8bf0:	f502 71fd 	add.w	r1, r2, #506	; 0x1fa
    8bf4:	f882 0201 	strb.w	r0, [r2, #513]	; 0x201
    8bf8:	2001      	movs	r0, #1
    8bfa:	7008      	strb	r0, [r1, #0]
    8bfc:	2000      	movs	r0, #0
    8bfe:	f882 01a6 	strb.w	r0, [r2, #422]	; 0x1a6
    8c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8c06:	f000 bf2b 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8c0a:	0000      	.short	0x0000
    8c0c:	2000012c 	.word	0x2000012c
    8c10:	b510      	push	{r4, lr}
    8c12:	4c15      	ldr	r4, [pc, #84]	; (8c68 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc68>)
    8c14:	2301      	movs	r3, #1
    8c16:	2100      	movs	r1, #0
    8c18:	68a0      	ldr	r0, [r4, #8]
    8c1a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8c1e:	3068      	adds	r0, #104	; 0x68
    8c20:	f003 ff32 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c24:	b190      	cbz	r0, 8c4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4c>
    8c26:	6920      	ldr	r0, [r4, #16]
    8c28:	f004 f98a 	bl	cf40 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8c2c:	68a1      	ldr	r1, [r4, #8]
    8c2e:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8c32:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8c36:	f005 fa0d 	bl	e054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8c3a:	b148      	cbz	r0, 8c50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc50>
    8c3c:	68a0      	ldr	r0, [r4, #8]
    8c3e:	2128      	movs	r1, #40	; 0x28
    8c40:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8c44:	306e      	adds	r0, #110	; 0x6e
    8c46:	2101      	movs	r1, #1
    8c48:	7781      	strb	r1, [r0, #30]
    8c4a:	e00b      	b.n	8c64 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc64>
    8c4c:	2001      	movs	r0, #1
    8c4e:	bd10      	pop	{r4, pc}
    8c50:	68a1      	ldr	r1, [r4, #8]
    8c52:	6920      	ldr	r0, [r4, #16]
    8c54:	f501 71c7 	add.w	r1, r1, #398	; 0x18e
    8c58:	f004 f96d 	bl	cf36 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8c5c:	68a1      	ldr	r1, [r4, #8]
    8c5e:	200b      	movs	r0, #11
    8c60:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8c64:	2000      	movs	r0, #0
    8c66:	bd10      	pop	{r4, pc}
    8c68:	2000012c 	.word	0x2000012c
    8c6c:	b570      	push	{r4, r5, r6, lr}
    8c6e:	4c29      	ldr	r4, [pc, #164]	; (8d14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd14>)
    8c70:	2301      	movs	r3, #1
    8c72:	2100      	movs	r1, #0
    8c74:	68a0      	ldr	r0, [r4, #8]
    8c76:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8c7a:	3068      	adds	r0, #104	; 0x68
    8c7c:	f003 ff04 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c80:	b1b8      	cbz	r0, 8cb2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb2>
    8c82:	2100      	movs	r1, #0
    8c84:	6920      	ldr	r0, [r4, #16]
    8c86:	f004 f92e 	bl	cee6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8c8a:	b1a0      	cbz	r0, 8cb6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcb6>
    8c8c:	6920      	ldr	r0, [r4, #16]
    8c8e:	68a1      	ldr	r1, [r4, #8]
    8c90:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8c94:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    8c98:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    8c9c:	f005 f9da 	bl	e054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8ca0:	b168      	cbz	r0, 8cbe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcbe>
    8ca2:	68a0      	ldr	r0, [r4, #8]
    8ca4:	2128      	movs	r1, #40	; 0x28
    8ca6:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    8caa:	306e      	adds	r0, #110	; 0x6e
    8cac:	2101      	movs	r1, #1
    8cae:	7781      	strb	r1, [r0, #30]
    8cb0:	e02e      	b.n	8d10 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd10>
    8cb2:	2001      	movs	r0, #1
    8cb4:	bd70      	pop	{r4, r5, r6, pc}
    8cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8cba:	f000 b8ad 	b.w	8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    8cbe:	6920      	ldr	r0, [r4, #16]
    8cc0:	f004 f941 	bl	cf46 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8cc4:	f003 fec3 	bl	ca4e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8cc8:	4605      	mov	r5, r0
    8cca:	68a0      	ldr	r0, [r4, #8]
    8ccc:	4629      	mov	r1, r5
    8cce:	f8c0 5194 	str.w	r5, [r0, #404]	; 0x194
    8cd2:	6920      	ldr	r0, [r4, #16]
    8cd4:	7900      	ldrb	r0, [r0, #4]
    8cd6:	f004 f844 	bl	cd62 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8cda:	68a1      	ldr	r1, [r4, #8]
    8cdc:	f8a1 018e 	strh.w	r0, [r1, #398]	; 0x18e
    8ce0:	6920      	ldr	r0, [r4, #16]
    8ce2:	4629      	mov	r1, r5
    8ce4:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8ce8:	f004 f837 	bl	cd5a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8cec:	68a1      	ldr	r1, [r4, #8]
    8cee:	f8c1 0190 	str.w	r0, [r1, #400]	; 0x190
    8cf2:	6920      	ldr	r0, [r4, #16]
    8cf4:	f004 f92a 	bl	cf4c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8cf8:	68a1      	ldr	r1, [r4, #8]
    8cfa:	f8a1 0198 	strh.w	r0, [r1, #408]	; 0x198
    8cfe:	6920      	ldr	r0, [r4, #16]
    8d00:	f004 f927 	bl	cf52 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8d04:	68a1      	ldr	r1, [r4, #8]
    8d06:	f8a1 019a 	strh.w	r0, [r1, #410]	; 0x19a
    8d0a:	200d      	movs	r0, #13
    8d0c:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8d10:	2000      	movs	r0, #0
    8d12:	bd70      	pop	{r4, r5, r6, pc}
    8d14:	2000012c 	.word	0x2000012c
    8d18:	b538      	push	{r3, r4, r5, lr}
    8d1a:	4c29      	ldr	r4, [pc, #164]	; (8dc0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc0>)
    8d1c:	2301      	movs	r3, #1
    8d1e:	2100      	movs	r1, #0
    8d20:	68a0      	ldr	r0, [r4, #8]
    8d22:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d26:	3068      	adds	r0, #104	; 0x68
    8d28:	f003 feae 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d2c:	b970      	cbnz	r0, 8d4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4c>
    8d2e:	68a0      	ldr	r0, [r4, #8]
    8d30:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8d34:	2a12      	cmp	r2, #18
    8d36:	d009      	beq.n	8d4c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4c>
    8d38:	2301      	movs	r3, #1
    8d3a:	2105      	movs	r1, #5
    8d3c:	3068      	adds	r0, #104	; 0x68
    8d3e:	f003 fea3 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d42:	b108      	cbz	r0, 8d48 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd48>
    8d44:	2008      	movs	r0, #8
    8d46:	bd38      	pop	{r3, r4, r5, pc}
    8d48:	2001      	movs	r0, #1
    8d4a:	bd38      	pop	{r3, r4, r5, pc}
    8d4c:	68a0      	ldr	r0, [r4, #8]
    8d4e:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8d52:	b908      	cbnz	r0, 8d58 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd58>
    8d54:	f7ff f916 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8d58:	68a1      	ldr	r1, [r4, #8]
    8d5a:	6920      	ldr	r0, [r4, #16]
    8d5c:	f501 7184 	add.w	r1, r1, #264	; 0x108
    8d60:	f004 f906 	bl	cf70 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    8d64:	68a1      	ldr	r1, [r4, #8]
    8d66:	6920      	ldr	r0, [r4, #16]
    8d68:	31d8      	adds	r1, #216	; 0xd8
    8d6a:	f004 f8f8 	bl	cf5e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    8d6e:	68a1      	ldr	r1, [r4, #8]
    8d70:	f891 01c4 	ldrb.w	r0, [r1, #452]	; 0x1c4
    8d74:	f88d 0000 	strb.w	r0, [sp]
    8d78:	9800      	ldr	r0, [sp, #0]
    8d7a:	9000      	str	r0, [sp, #0]
    8d7c:	f89d 0000 	ldrb.w	r0, [sp]
    8d80:	b120      	cbz	r0, 8d8c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8c>
    8d82:	f240 219d 	movw	r1, #669	; 0x29d
    8d86:	2031      	movs	r0, #49	; 0x31
    8d88:	f7fa ff0e 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d8c:	8808      	ldrh	r0, [r1, #0]
    8d8e:	f8a1 01c6 	strh.w	r0, [r1, #454]	; 0x1c6
    8d92:	f501 71e4 	add.w	r1, r1, #456	; 0x1c8
    8d96:	6920      	ldr	r0, [r4, #16]
    8d98:	f004 f8e5 	bl	cf66 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    8d9c:	68a1      	ldr	r1, [r4, #8]
    8d9e:	6920      	ldr	r0, [r4, #16]
    8da0:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    8da4:	f004 f8d8 	bl	cf58 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    8da8:	68a0      	ldr	r0, [r4, #8]
    8daa:	4601      	mov	r1, r0
    8dac:	2201      	movs	r2, #1
    8dae:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    8db2:	2014      	movs	r0, #20
    8db4:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8db8:	f000 fe52 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8dbc:	2000      	movs	r0, #0
    8dbe:	bd38      	pop	{r3, r4, r5, pc}
    8dc0:	2000012c 	.word	0x2000012c
    8dc4:	b51c      	push	{r2, r3, r4, lr}
    8dc6:	4c13      	ldr	r4, [pc, #76]	; (8e14 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe14>)
    8dc8:	68a0      	ldr	r0, [r4, #8]
    8dca:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8dce:	07c0      	lsls	r0, r0, #31
    8dd0:	d001      	beq.n	8dd6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdd6>
    8dd2:	2001      	movs	r0, #1
    8dd4:	bd1c      	pop	{r2, r3, r4, pc}
    8dd6:	4669      	mov	r1, sp
    8dd8:	6920      	ldr	r0, [r4, #16]
    8dda:	f004 f8cf 	bl	cf7c <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    8dde:	f001 fa07 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8de2:	f644 112f 	movw	r1, #18735	; 0x492f
    8de6:	4008      	ands	r0, r1
    8de8:	f89d 2000 	ldrb.w	r2, [sp]
    8dec:	68a1      	ldr	r1, [r4, #8]
    8dee:	4002      	ands	r2, r0
    8df0:	f801 2fb4 	strb.w	r2, [r1, #180]!
    8df4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8df8:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    8dfc:	7048      	strb	r0, [r1, #1]
    8dfe:	f7ff f8c1 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8e02:	68a0      	ldr	r0, [r4, #8]
    8e04:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8e08:	f041 0101 	orr.w	r1, r1, #1
    8e0c:	7001      	strb	r1, [r0, #0]
    8e0e:	2000      	movs	r0, #0
    8e10:	bd1c      	pop	{r2, r3, r4, pc}
    8e12:	0000      	.short	0x0000
    8e14:	2000012c 	.word	0x2000012c
    8e18:	4a0a      	ldr	r2, [pc, #40]	; (8e44 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe44>)
    8e1a:	b510      	push	{r4, lr}
    8e1c:	6890      	ldr	r0, [r2, #8]
    8e1e:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    8e22:	070b      	lsls	r3, r1, #28
    8e24:	d501      	bpl.n	8e2a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe2a>
    8e26:	2001      	movs	r0, #1
    8e28:	bd10      	pop	{r4, pc}
    8e2a:	f041 0108 	orr.w	r1, r1, #8
    8e2e:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    8e32:	6911      	ldr	r1, [r2, #16]
    8e34:	78c9      	ldrb	r1, [r1, #3]
    8e36:	f880 10e1 	strb.w	r1, [r0, #225]	; 0xe1
    8e3a:	f7ff f8a3 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8e3e:	2000      	movs	r0, #0
    8e40:	bd10      	pop	{r4, pc}
    8e42:	0000      	.short	0x0000
    8e44:	2000012c 	.word	0x2000012c
    8e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e4a:	4c2e      	ldr	r4, [pc, #184]	; (8f04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf04>)
    8e4c:	68a0      	ldr	r0, [r4, #8]
    8e4e:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8e52:	f010 0f30 	tst.w	r0, #48	; 0x30
    8e56:	d001      	beq.n	8e5c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe5c>
    8e58:	2001      	movs	r0, #1
    8e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e5c:	6920      	ldr	r0, [r4, #16]
    8e5e:	f004 f8a8 	bl	cfb2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8e62:	b350      	cbz	r0, 8eba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xeba>
    8e64:	6920      	ldr	r0, [r4, #16]
    8e66:	f004 f896 	bl	cf96 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8e6a:	4607      	mov	r7, r0
    8e6c:	6920      	ldr	r0, [r4, #16]
    8e6e:	f004 f896 	bl	cf9e <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8e72:	4606      	mov	r6, r0
    8e74:	6920      	ldr	r0, [r4, #16]
    8e76:	f004 f88c 	bl	cf92 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8e7a:	4605      	mov	r5, r0
    8e7c:	6920      	ldr	r0, [r4, #16]
    8e7e:	f004 f88c 	bl	cf9a <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8e82:	4601      	mov	r1, r0
    8e84:	9700      	str	r7, [sp, #0]
    8e86:	68a0      	ldr	r0, [r4, #8]
    8e88:	4633      	mov	r3, r6
    8e8a:	462a      	mov	r2, r5
    8e8c:	3024      	adds	r0, #36	; 0x24
    8e8e:	f004 fad6 	bl	d43e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    8e92:	78a0      	ldrb	r0, [r4, #2]
    8e94:	0780      	lsls	r0, r0, #30
    8e96:	d503      	bpl.n	8ea0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xea0>
    8e98:	68e0      	ldr	r0, [r4, #12]
    8e9a:	78c0      	ldrb	r0, [r0, #3]
    8e9c:	2814      	cmp	r0, #20
    8e9e:	d010      	beq.n	8ec2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec2>
    8ea0:	68a1      	ldr	r1, [r4, #8]
    8ea2:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    8ea6:	281c      	cmp	r0, #28
    8ea8:	d00b      	beq.n	8ec2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec2>
    8eaa:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    8eae:	2801      	cmp	r0, #1
    8eb0:	d00f      	beq.n	8ed2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xed2>
    8eb2:	f891 019d 	ldrb.w	r0, [r1, #413]	; 0x19d
    8eb6:	b960      	cbnz	r0, 8ed2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xed2>
    8eb8:	e008      	b.n	8ecc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xecc>
    8eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8ebe:	f7ff bfab 	b.w	8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    8ec2:	68a1      	ldr	r1, [r4, #8]
    8ec4:	2001      	movs	r0, #1
    8ec6:	f881 0058 	strb.w	r0, [r1, #88]	; 0x58
    8eca:	e002      	b.n	8ed2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xed2>
    8ecc:	f891 019c 	ldrb.w	r0, [r1, #412]	; 0x19c
    8ed0:	b130      	cbz	r0, 8ee0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xee0>
    8ed2:	68a0      	ldr	r0, [r4, #8]
    8ed4:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8ed8:	f041 0110 	orr.w	r1, r1, #16
    8edc:	7001      	strb	r1, [r0, #0]
    8ede:	e00d      	b.n	8efc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xefc>
    8ee0:	f891 0077 	ldrb.w	r0, [r1, #119]	; 0x77
    8ee4:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
    8ee8:	f040 0020 	orr.w	r0, r0, #32
    8eec:	f881 0077 	strb.w	r0, [r1, #119]	; 0x77
    8ef0:	f831 0b24 	ldrh.w	r0, [r1], #36
    8ef4:	f004 faaa 	bl	d44c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    8ef8:	f000 fdb2 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8efc:	f7ff f842 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8f00:	2000      	movs	r0, #0
    8f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f04:	2000012c 	.word	0x2000012c
    8f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f0a:	4c1a      	ldr	r4, [pc, #104]	; (8f74 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf74>)
    8f0c:	2301      	movs	r3, #1
    8f0e:	210a      	movs	r1, #10
    8f10:	68a0      	ldr	r0, [r4, #8]
    8f12:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8f16:	3068      	adds	r0, #104	; 0x68
    8f18:	f003 fdb6 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8f1c:	b338      	cbz	r0, 8f6e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf6e>
    8f1e:	6920      	ldr	r0, [r4, #16]
    8f20:	f004 f847 	bl	cfb2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8f24:	b1c8      	cbz	r0, 8f5a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf5a>
    8f26:	6920      	ldr	r0, [r4, #16]
    8f28:	f004 f835 	bl	cf96 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8f2c:	4607      	mov	r7, r0
    8f2e:	6920      	ldr	r0, [r4, #16]
    8f30:	f004 f835 	bl	cf9e <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8f34:	4606      	mov	r6, r0
    8f36:	6920      	ldr	r0, [r4, #16]
    8f38:	f004 f82b 	bl	cf92 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8f3c:	4605      	mov	r5, r0
    8f3e:	6920      	ldr	r0, [r4, #16]
    8f40:	f004 f82b 	bl	cf9a <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8f44:	4601      	mov	r1, r0
    8f46:	9700      	str	r7, [sp, #0]
    8f48:	68a0      	ldr	r0, [r4, #8]
    8f4a:	4633      	mov	r3, r6
    8f4c:	462a      	mov	r2, r5
    8f4e:	3024      	adds	r0, #36	; 0x24
    8f50:	f004 fa75 	bl	d43e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    8f54:	68a0      	ldr	r0, [r4, #8]
    8f56:	f004 f9e8 	bl	d32a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8f5a:	68a1      	ldr	r1, [r4, #8]
    8f5c:	2000      	movs	r0, #0
    8f5e:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    8f62:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    8f66:	f7ff f9b7 	bl	82d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d8>
    8f6a:	2000      	movs	r0, #0
    8f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f6e:	2001      	movs	r0, #1
    8f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f72:	0000      	.short	0x0000
    8f74:	2000012c 	.word	0x2000012c
    8f78:	b510      	push	{r4, lr}
    8f7a:	4c09      	ldr	r4, [pc, #36]	; (8fa0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa0>)
    8f7c:	68a0      	ldr	r0, [r4, #8]
    8f7e:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    8f82:	0740      	lsls	r0, r0, #29
    8f84:	d501      	bpl.n	8f8a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8a>
    8f86:	2001      	movs	r0, #1
    8f88:	bd10      	pop	{r4, pc}
    8f8a:	f7fe fffb 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8f8e:	68a0      	ldr	r0, [r4, #8]
    8f90:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    8f94:	f041 0104 	orr.w	r1, r1, #4
    8f98:	7001      	strb	r1, [r0, #0]
    8f9a:	2000      	movs	r0, #0
    8f9c:	bd10      	pop	{r4, pc}
    8f9e:	0000      	.short	0x0000
    8fa0:	2000012c 	.word	0x2000012c
    8fa4:	b510      	push	{r4, lr}
    8fa6:	4c09      	ldr	r4, [pc, #36]	; (8fcc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfcc>)
    8fa8:	2301      	movs	r3, #1
    8faa:	2109      	movs	r1, #9
    8fac:	68a0      	ldr	r0, [r4, #8]
    8fae:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    8fb2:	3068      	adds	r0, #104	; 0x68
    8fb4:	f003 fd68 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fb8:	2800      	cmp	r0, #0
    8fba:	d006      	beq.n	8fca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfca>
    8fbc:	68a1      	ldr	r1, [r4, #8]
    8fbe:	2000      	movs	r0, #0
    8fc0:	f801 0f9a 	strb.w	r0, [r1, #154]!
    8fc4:	7308      	strb	r0, [r1, #12]
    8fc6:	f801 0c25 	strb.w	r0, [r1, #-37]
    8fca:	bd10      	pop	{r4, pc}
    8fcc:	2000012c 	.word	0x2000012c
    8fd0:	b510      	push	{r4, lr}
    8fd2:	4c0f      	ldr	r4, [pc, #60]	; (9010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1010>)
    8fd4:	2301      	movs	r3, #1
    8fd6:	2100      	movs	r1, #0
    8fd8:	68a0      	ldr	r0, [r4, #8]
    8fda:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    8fde:	3068      	adds	r0, #104	; 0x68
    8fe0:	f003 fd52 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fe4:	b138      	cbz	r0, 8ff6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xff6>
    8fe6:	f7fe ffcd 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    8fea:	68a1      	ldr	r1, [r4, #8]
    8fec:	2010      	movs	r0, #16
    8fee:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    8ff2:	2000      	movs	r0, #0
    8ff4:	bd10      	pop	{r4, pc}
    8ff6:	68a0      	ldr	r0, [r4, #8]
    8ff8:	2301      	movs	r3, #1
    8ffa:	2105      	movs	r1, #5
    8ffc:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9000:	3068      	adds	r0, #104	; 0x68
    9002:	f003 fd41 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9006:	b108      	cbz	r0, 900c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100c>
    9008:	2008      	movs	r0, #8
    900a:	bd10      	pop	{r4, pc}
    900c:	2001      	movs	r0, #1
    900e:	bd10      	pop	{r4, pc}
    9010:	2000012c 	.word	0x2000012c
    9014:	4806      	ldr	r0, [pc, #24]	; (9030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1030>)
    9016:	6880      	ldr	r0, [r0, #8]
    9018:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    901c:	2911      	cmp	r1, #17
    901e:	d001      	beq.n	9024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1024>
    9020:	2002      	movs	r0, #2
    9022:	4770      	bx	lr
    9024:	2112      	movs	r1, #18
    9026:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    902a:	2000      	movs	r0, #0
    902c:	4770      	bx	lr
    902e:	0000      	.short	0x0000
    9030:	2000012c 	.word	0x2000012c
    9034:	b570      	push	{r4, r5, r6, lr}
    9036:	4c30      	ldr	r4, [pc, #192]	; (90f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10f8>)
    9038:	2301      	movs	r3, #1
    903a:	210b      	movs	r1, #11
    903c:	68a0      	ldr	r0, [r4, #8]
    903e:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9042:	3068      	adds	r0, #104	; 0x68
    9044:	f003 fd20 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9048:	bb48      	cbnz	r0, 909e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x109e>
    904a:	68a0      	ldr	r0, [r4, #8]
    904c:	2301      	movs	r3, #1
    904e:	2100      	movs	r1, #0
    9050:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9054:	3068      	adds	r0, #104	; 0x68
    9056:	f003 fd17 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    905a:	b1f0      	cbz	r0, 909a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x109a>
    905c:	68a0      	ldr	r0, [r4, #8]
    905e:	f890 0075 	ldrb.w	r0, [r0, #117]	; 0x75
    9062:	2824      	cmp	r0, #36	; 0x24
    9064:	d01b      	beq.n	909e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x109e>
    9066:	6920      	ldr	r0, [r4, #16]
    9068:	f003 ffbf 	bl	cfea <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    906c:	b1c8      	cbz	r0, 90a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10a2>
    906e:	68a0      	ldr	r0, [r4, #8]
    9070:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    9074:	f041 0104 	orr.w	r1, r1, #4
    9078:	f880 10b4 	strb.w	r1, [r0, #180]	; 0xb4
    907c:	6921      	ldr	r1, [r4, #16]
    907e:	794a      	ldrb	r2, [r1, #5]
    9080:	f002 0207 	and.w	r2, r2, #7
    9084:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
    9088:	7909      	ldrb	r1, [r1, #4]
    908a:	f001 0107 	and.w	r1, r1, #7
    908e:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    9092:	f890 31a7 	ldrb.w	r3, [r0, #423]	; 0x1a7
    9096:	bb3b      	cbnz	r3, 90e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e8>
    9098:	e007      	b.n	90aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10aa>
    909a:	2001      	movs	r0, #1
    909c:	bd70      	pop	{r4, r5, r6, pc}
    909e:	2020      	movs	r0, #32
    90a0:	bd70      	pop	{r4, r5, r6, pc}
    90a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90a6:	f7ff beb7 	b.w	8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    90aa:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
    90ae:	2b01      	cmp	r3, #1
    90b0:	d01a      	beq.n	90e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e8>
    90b2:	f100 0362 	add.w	r3, r0, #98	; 0x62
    90b6:	2501      	movs	r5, #1
    90b8:	785e      	ldrb	r6, [r3, #1]
    90ba:	428e      	cmp	r6, r1
    90bc:	d106      	bne.n	90cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10cc>
    90be:	7819      	ldrb	r1, [r3, #0]
    90c0:	4291      	cmp	r1, r2
    90c2:	d103      	bne.n	90cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10cc>
    90c4:	2102      	movs	r1, #2
    90c6:	f880 11a6 	strb.w	r1, [r0, #422]	; 0x1a6
    90ca:	e00d      	b.n	90e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10e8>
    90cc:	f500 71fb 	add.w	r1, r0, #502	; 0x1f6
    90d0:	8802      	ldrh	r2, [r0, #0]
    90d2:	f821 2902 	strh.w	r2, [r1], #-2
    90d6:	f890 205a 	ldrb.w	r2, [r0, #90]	; 0x5a
    90da:	710a      	strb	r2, [r1, #4]
    90dc:	f890 005b 	ldrb.w	r0, [r0, #91]	; 0x5b
    90e0:	7148      	strb	r0, [r1, #5]
    90e2:	700d      	strb	r5, [r1, #0]
    90e4:	f000 fcbc 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90e8:	68a1      	ldr	r1, [r4, #8]
    90ea:	2021      	movs	r0, #33	; 0x21
    90ec:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    90f0:	f7fe ff48 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    90f4:	2000      	movs	r0, #0
    90f6:	bd70      	pop	{r4, r5, r6, pc}
    90f8:	2000012c 	.word	0x2000012c
    90fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9100:	4c4e      	ldr	r4, [pc, #312]	; (923c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x123c>)
    9102:	68a0      	ldr	r0, [r4, #8]
    9104:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9108:	2920      	cmp	r1, #32
    910a:	d009      	beq.n	9120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1120>
    910c:	f05f 0700 	movs.w	r7, #0
    9110:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9114:	2922      	cmp	r1, #34	; 0x22
    9116:	d005      	beq.n	9124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1124>
    9118:	b387      	cbz	r7, 917c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x117c>
    911a:	f100 0575 	add.w	r5, r0, #117	; 0x75
    911e:	e003      	b.n	9128 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1128>
    9120:	2701      	movs	r7, #1
    9122:	e7f5      	b.n	9110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1110>
    9124:	f100 0576 	add.w	r5, r0, #118	; 0x76
    9128:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    912c:	f041 0104 	orr.w	r1, r1, #4
    9130:	7001      	strb	r1, [r0, #0]
    9132:	6920      	ldr	r0, [r4, #16]
    9134:	f7fc fd30 	bl	5b98 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    9138:	f04f 0801 	mov.w	r8, #1
    913c:	2600      	movs	r6, #0
    913e:	b308      	cbz	r0, 9184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1184>
    9140:	4639      	mov	r1, r7
    9142:	6920      	ldr	r0, [r4, #16]
    9144:	f7fe ffd6 	bl	80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>
    9148:	b1e0      	cbz	r0, 9184 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1184>
    914a:	466a      	mov	r2, sp
    914c:	6921      	ldr	r1, [r4, #16]
    914e:	68a0      	ldr	r0, [r4, #8]
    9150:	f003 fdbd 	bl	ccce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    9154:	b388      	cbz	r0, 91ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11ba>
    9156:	6920      	ldr	r0, [r4, #16]
    9158:	f003 ff23 	bl	cfa2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    915c:	68a1      	ldr	r1, [r4, #8]
    915e:	f8a1 018c 	strh.w	r0, [r1, #396]	; 0x18c
    9162:	f8b1 106c 	ldrh.w	r1, [r1, #108]	; 0x6c
    9166:	f004 ff75 	bl	e054 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    916a:	b338      	cbz	r0, 91bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11bc>
    916c:	68a0      	ldr	r0, [r4, #8]
    916e:	2128      	movs	r1, #40	; 0x28
    9170:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    9174:	306e      	adds	r0, #110	; 0x6e
    9176:	f880 801e 	strb.w	r8, [r0, #30]
    917a:	e053      	b.n	9224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1224>
    917c:	e7ff      	b.n	917e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x117e>
    917e:	2002      	movs	r0, #2
    9180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9184:	68a0      	ldr	r0, [r4, #8]
    9186:	f04f 0900 	mov.w	r9, #0
    918a:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    918e:	2901      	cmp	r1, #1
    9190:	d015      	beq.n	91be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11be>
    9192:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    9196:	b1f7      	cbz	r7, 91d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11d6>
    9198:	6920      	ldr	r0, [r4, #16]
    919a:	68a1      	ldr	r1, [r4, #8]
    919c:	78c0      	ldrb	r0, [r0, #3]
    919e:	f881 00e2 	strb.w	r0, [r1, #226]	; 0xe2
    91a2:	fa08 f200 	lsl.w	r2, r8, r0
    91a6:	f3c2 6000 	ubfx	r0, r2, #24, #1
    91aa:	b160      	cbz	r0, 91c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c6>
    91ac:	200a      	movs	r0, #10
    91ae:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    91b2:	f891 00a6 	ldrb.w	r0, [r1, #166]	; 0xa6
    91b6:	b9a0      	cbnz	r0, 91e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11e2>
    91b8:	e008      	b.n	91cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11cc>
    91ba:	e014      	b.n	91e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11e6>
    91bc:	e027      	b.n	920e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120e>
    91be:	201e      	movs	r0, #30
    91c0:	f7ff fd02 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    91c4:	e7e7      	b.n	9196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1196>
    91c6:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    91ca:	e001      	b.n	91d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11d0>
    91cc:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    91d0:	2031      	movs	r0, #49	; 0x31
    91d2:	f7fa fce9 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91d6:	702e      	strb	r6, [r5, #0]
    91d8:	f7fe fee0 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    91dc:	f7ff fe1c 	bl	8e18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe18>
    91e0:	4681      	mov	r9, r0
    91e2:	4648      	mov	r0, r9
    91e4:	e7cc      	b.n	9180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1180>
    91e6:	68a0      	ldr	r0, [r4, #8]
    91e8:	f890 11a6 	ldrb.w	r1, [r0, #422]	; 0x1a6
    91ec:	2901      	cmp	r1, #1
    91ee:	d009      	beq.n	9204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1204>
    91f0:	f880 61a6 	strb.w	r6, [r0, #422]	; 0x1a6
    91f4:	68a0      	ldr	r0, [r4, #8]
    91f6:	f100 0176 	add.w	r1, r0, #118	; 0x76
    91fa:	428d      	cmp	r5, r1
    91fc:	d112      	bne.n	9224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1224>
    91fe:	f880 6076 	strb.w	r6, [r0, #118]	; 0x76
    9202:	e00f      	b.n	9224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1224>
    9204:	2000      	movs	r0, #0
    9206:	f7ff fcdf 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    920a:	702e      	strb	r6, [r5, #0]
    920c:	e7f2      	b.n	91f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11f4>
    920e:	68a0      	ldr	r0, [r4, #8]
    9210:	f89d 1000 	ldrb.w	r1, [sp]
    9214:	f880 118e 	strb.w	r1, [r0, #398]	; 0x18e
    9218:	f89d 1001 	ldrb.w	r1, [sp, #1]
    921c:	f880 118f 	strb.w	r1, [r0, #399]	; 0x18f
    9220:	2024      	movs	r0, #36	; 0x24
    9222:	7028      	strb	r0, [r5, #0]
    9224:	68a0      	ldr	r0, [r4, #8]
    9226:	f100 0176 	add.w	r1, r0, #118	; 0x76
    922a:	428d      	cmp	r5, r1
    922c:	d102      	bne.n	9234 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1234>
    922e:	f7fe feb5 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9232:	e001      	b.n	9238 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1238>
    9234:	f880 60a6 	strb.w	r6, [r0, #166]	; 0xa6
    9238:	2000      	movs	r0, #0
    923a:	e7a1      	b.n	9180 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1180>
    923c:	2000012c 	.word	0x2000012c
    9240:	b510      	push	{r4, lr}
    9242:	4c0a      	ldr	r4, [pc, #40]	; (926c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x126c>)
    9244:	68a0      	ldr	r0, [r4, #8]
    9246:	f810 1fb4 	ldrb.w	r1, [r0, #180]!
    924a:	f041 0104 	orr.w	r1, r1, #4
    924e:	7001      	strb	r1, [r0, #0]
    9250:	6920      	ldr	r0, [r4, #16]
    9252:	f003 fed4 	bl	cffe <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9256:	2816      	cmp	r0, #22
    9258:	d001      	beq.n	925e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x125e>
    925a:	2000      	movs	r0, #0
    925c:	bd10      	pop	{r4, pc}
    925e:	6920      	ldr	r0, [r4, #16]
    9260:	f003 fecf 	bl	d002 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9268:	f7fe be6a 	b.w	7f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    926c:	2000012c 	.word	0x2000012c
    9270:	4802      	ldr	r0, [pc, #8]	; (927c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x127c>)
    9272:	6900      	ldr	r0, [r0, #16]
    9274:	7900      	ldrb	r0, [r0, #4]
    9276:	f7fe be63 	b.w	7f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e4>
    927a:	0000      	.short	0x0000
    927c:	2000012c 	.word	0x2000012c
    9280:	b510      	push	{r4, lr}
    9282:	4c08      	ldr	r4, [pc, #32]	; (92a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12a4>)
    9284:	68a0      	ldr	r0, [r4, #8]
    9286:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    928a:	2817      	cmp	r0, #23
    928c:	d001      	beq.n	9292 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1292>
    928e:	2002      	movs	r0, #2
    9290:	bd10      	pop	{r4, pc}
    9292:	f7fe fe83 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9296:	68a1      	ldr	r1, [r4, #8]
    9298:	201b      	movs	r0, #27
    929a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    929e:	2000      	movs	r0, #0
    92a0:	bd10      	pop	{r4, pc}
    92a2:	0000      	.short	0x0000
    92a4:	2000012c 	.word	0x2000012c
    92a8:	b510      	push	{r4, lr}
    92aa:	4c0b      	ldr	r4, [pc, #44]	; (92d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12d8>)
    92ac:	2301      	movs	r3, #1
    92ae:	4619      	mov	r1, r3
    92b0:	68a0      	ldr	r0, [r4, #8]
    92b2:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    92b6:	3068      	adds	r0, #104	; 0x68
    92b8:	f003 fbe6 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    92bc:	b108      	cbz	r0, 92c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c2>
    92be:	2000      	movs	r0, #0
    92c0:	bd10      	pop	{r4, pc}
    92c2:	6920      	ldr	r0, [r4, #16]
    92c4:	f003 fe71 	bl	cfaa <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    92c8:	68a1      	ldr	r1, [r4, #8]
    92ca:	f881 0172 	strb.w	r0, [r1, #370]	; 0x172
    92ce:	2007      	movs	r0, #7
    92d0:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    92d4:	e7f3      	b.n	92be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12be>
    92d6:	0000      	.short	0x0000
    92d8:	2000012c 	.word	0x2000012c
    92dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92e0:	4d37      	ldr	r5, [pc, #220]	; (93c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c0>)
    92e2:	2600      	movs	r6, #0
    92e4:	4628      	mov	r0, r5
    92e6:	68a9      	ldr	r1, [r5, #8]
    92e8:	6900      	ldr	r0, [r0, #16]
    92ea:	2701      	movs	r7, #1
    92ec:	f891 3075 	ldrb.w	r3, [r1, #117]	; 0x75
    92f0:	7900      	ldrb	r0, [r0, #4]
    92f2:	2b0e      	cmp	r3, #14
    92f4:	d101      	bne.n	92fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12fa>
    92f6:	2812      	cmp	r0, #18
    92f8:	d006      	beq.n	9308 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1308>
    92fa:	4a31      	ldr	r2, [pc, #196]	; (93c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13c0>)
    92fc:	2400      	movs	r4, #0
    92fe:	6892      	ldr	r2, [r2, #8]
    9300:	32b4      	adds	r2, #180	; 0xb4
    9302:	2b1c      	cmp	r3, #28
    9304:	d004      	beq.n	9310 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1310>
    9306:	e005      	b.n	9314 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1314>
    9308:	f7ff fe4c 	bl	8fa4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfa4>
    930c:	4606      	mov	r6, r0
    930e:	e053      	b.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    9310:	2814      	cmp	r0, #20
    9312:	d002      	beq.n	931a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x131a>
    9314:	2b04      	cmp	r3, #4
    9316:	d00b      	beq.n	9330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1330>
    9318:	e00c      	b.n	9334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1334>
    931a:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    931e:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    9322:	2105      	movs	r1, #5
    9324:	4610      	mov	r0, r2
    9326:	f004 fe26 	bl	df76 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    932a:	f7fe ffd5 	bl	82d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d8>
    932e:	e043      	b.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    9330:	280e      	cmp	r0, #14
    9332:	d002      	beq.n	933a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x133a>
    9334:	2b20      	cmp	r3, #32
    9336:	d00f      	beq.n	9358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1358>
    9338:	e010      	b.n	935c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x135c>
    933a:	f881 4075 	strb.w	r4, [r1, #117]	; 0x75
    933e:	f881 40a6 	strb.w	r4, [r1, #166]	; 0xa6
    9342:	8808      	ldrh	r0, [r1, #0]
    9344:	f8a1 0206 	strh.w	r0, [r1, #518]	; 0x206
    9348:	201a      	movs	r0, #26
    934a:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    934e:	f881 7202 	strb.w	r7, [r1, #514]	; 0x202
    9352:	f000 fb85 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9356:	e02f      	b.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    9358:	2816      	cmp	r0, #22
    935a:	d006      	beq.n	936a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x136a>
    935c:	2b26      	cmp	r3, #38	; 0x26
    935e:	d101      	bne.n	9364 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1364>
    9360:	2816      	cmp	r0, #22
    9362:	d002      	beq.n	936a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x136a>
    9364:	2817      	cmp	r0, #23
    9366:	d014      	beq.n	9392 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1392>
    9368:	e026      	b.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    936a:	f801 4f75 	strb.w	r4, [r1, #117]!
    936e:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    9372:	7848      	ldrb	r0, [r1, #1]
    9374:	2821      	cmp	r0, #33	; 0x21
    9376:	d01f      	beq.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    9378:	2108      	movs	r1, #8
    937a:	4610      	mov	r0, r2
    937c:	f004 fdfb 	bl	df76 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    9380:	68a8      	ldr	r0, [r5, #8]
    9382:	210b      	movs	r1, #11
    9384:	30b4      	adds	r0, #180	; 0xb4
    9386:	f004 fdf6 	bl	df76 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    938a:	201a      	movs	r0, #26
    938c:	f7ff fc1c 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    9390:	e012      	b.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    9392:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    9396:	2822      	cmp	r0, #34	; 0x22
    9398:	d10e      	bne.n	93b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b8>
    939a:	f881 4076 	strb.w	r4, [r1, #118]	; 0x76
    939e:	f7fe fdfd 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    93a2:	68a8      	ldr	r0, [r5, #8]
    93a4:	f890 01a6 	ldrb.w	r0, [r0, #422]	; 0x1a6
    93a8:	2801      	cmp	r0, #1
    93aa:	d102      	bne.n	93b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13b2>
    93ac:	2000      	movs	r0, #0
    93ae:	f7ff fc0b 	bl	8bc8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc8>
    93b2:	68a8      	ldr	r0, [r5, #8]
    93b4:	f880 41a6 	strb.w	r4, [r0, #422]	; 0x1a6
    93b8:	4630      	mov	r0, r6
    93ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93be:	0000      	.short	0x0000
    93c0:	2000012c 	.word	0x2000012c
    93c4:	b570      	push	{r4, r5, r6, lr}
    93c6:	4c2c      	ldr	r4, [pc, #176]	; (9478 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1478>)
    93c8:	68a0      	ldr	r0, [r4, #8]
    93ca:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    93ce:	0789      	lsls	r1, r1, #30
    93d0:	d507      	bpl.n	93e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e2>
    93d2:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    93d6:	2301      	movs	r3, #1
    93d8:	2108      	movs	r1, #8
    93da:	3068      	adds	r0, #104	; 0x68
    93dc:	f003 fb54 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93e0:	b1e8      	cbz	r0, 941e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x141e>
    93e2:	68a0      	ldr	r0, [r4, #8]
    93e4:	f890 00ae 	ldrb.w	r0, [r0, #174]	; 0xae
    93e8:	0780      	lsls	r0, r0, #30
    93ea:	d412      	bmi.n	9412 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1412>
    93ec:	6920      	ldr	r0, [r4, #16]
    93ee:	f003 fdde 	bl	cfae <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    93f2:	68a1      	ldr	r1, [r4, #8]
    93f4:	f881 00af 	strb.w	r0, [r1, #175]	; 0xaf
    93f8:	6920      	ldr	r0, [r4, #16]
    93fa:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    93fe:	f8a1 20b0 	strh.w	r2, [r1, #176]	; 0xb0
    9402:	8840      	ldrh	r0, [r0, #2]
    9404:	f8a1 00b2 	strh.w	r0, [r1, #178]	; 0xb2
    9408:	f811 0fae 	ldrb.w	r0, [r1, #174]!
    940c:	f040 0002 	orr.w	r0, r0, #2
    9410:	7008      	strb	r0, [r1, #0]
    9412:	68a0      	ldr	r0, [r4, #8]
    9414:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    9418:	07c9      	lsls	r1, r1, #31
    941a:	d002      	beq.n	9422 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1422>
    941c:	e010      	b.n	9440 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1440>
    941e:	2001      	movs	r0, #1
    9420:	bd70      	pop	{r4, r5, r6, pc}
    9422:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9426:	078a      	lsls	r2, r1, #30
    9428:	d504      	bpl.n	9434 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1434>
    942a:	f240 21d9 	movw	r1, #729	; 0x2d9
    942e:	2031      	movs	r0, #49	; 0x31
    9430:	f7fa fbba 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9434:	f041 0102 	orr.w	r1, r1, #2
    9438:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    943c:	f7fe fda2 	bl	7f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    9440:	68a0      	ldr	r0, [r4, #8]
    9442:	2500      	movs	r5, #0
    9444:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    9448:	2906      	cmp	r1, #6
    944a:	d105      	bne.n	9458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1458>
    944c:	f880 5075 	strb.w	r5, [r0, #117]	; 0x75
    9450:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9454:	f000 fb04 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9458:	68a0      	ldr	r0, [r4, #8]
    945a:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
    945e:	b149      	cbz	r1, 9474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1474>
    9460:	f880 51ac 	strb.w	r5, [r0, #428]	; 0x1ac
    9464:	f000 fafc 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9468:	68a0      	ldr	r0, [r4, #8]
    946a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
    946e:	b909      	cbnz	r1, 9474 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1474>
    9470:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    9474:	2000      	movs	r0, #0
    9476:	bd70      	pop	{r4, r5, r6, pc}
    9478:	2000012c 	.word	0x2000012c
    947c:	b510      	push	{r4, lr}
    947e:	4c17      	ldr	r4, [pc, #92]	; (94dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14dc>)
    9480:	68a3      	ldr	r3, [r4, #8]
    9482:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    9486:	2808      	cmp	r0, #8
    9488:	d20e      	bcs.n	94a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14a8>
    948a:	f100 0208 	add.w	r2, r0, #8
    948e:	f1c0 0008 	rsb	r0, r0, #8
    9492:	b2c1      	uxtb	r1, r0
    9494:	1898      	adds	r0, r3, r2
    9496:	f500 7084 	add.w	r0, r0, #264	; 0x108
    949a:	f7fa fc1d 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    949e:	68a1      	ldr	r1, [r4, #8]
    94a0:	f811 2fea 	ldrb.w	r2, [r1, #234]!
    94a4:	4410      	add	r0, r2
    94a6:	7008      	strb	r0, [r1, #0]
    94a8:	68a3      	ldr	r3, [r4, #8]
    94aa:	f893 00ea 	ldrb.w	r0, [r3, #234]	; 0xea
    94ae:	3808      	subs	r0, #8
    94b0:	2804      	cmp	r0, #4
    94b2:	d211      	bcs.n	94d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14d8>
    94b4:	1d02      	adds	r2, r0, #4
    94b6:	f1c0 0004 	rsb	r0, r0, #4
    94ba:	b2c1      	uxtb	r1, r0
    94bc:	1898      	adds	r0, r3, r2
    94be:	30d8      	adds	r0, #216	; 0xd8
    94c0:	f7fa fc0a 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    94c4:	68a0      	ldr	r0, [r4, #8]
    94c6:	2100      	movs	r1, #0
    94c8:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
    94cc:	2101      	movs	r1, #1
    94ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94d2:	2004      	movs	r0, #4
    94d4:	f7ff ba96 	b.w	8a04 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa04>
    94d8:	bd10      	pop	{r4, pc}
    94da:	0000      	.short	0x0000
    94dc:	2000012c 	.word	0x2000012c
    94e0:	4804      	ldr	r0, [pc, #16]	; (94f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14f4>)
    94e2:	2127      	movs	r1, #39	; 0x27
    94e4:	6880      	ldr	r0, [r0, #8]
    94e6:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    94ea:	2100      	movs	r1, #0
    94ec:	f880 1184 	strb.w	r1, [r0, #388]	; 0x184
    94f0:	4770      	bx	lr
    94f2:	0000      	.short	0x0000
    94f4:	2000012c 	.word	0x2000012c
    94f8:	4809      	ldr	r0, [pc, #36]	; (9520 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1520>)
    94fa:	b510      	push	{r4, lr}
    94fc:	6880      	ldr	r0, [r0, #8]
    94fe:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9502:	2914      	cmp	r1, #20
    9504:	d004      	beq.n	9510 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1510>
    9506:	f240 6189 	movw	r1, #1673	; 0x689
    950a:	2031      	movs	r0, #49	; 0x31
    950c:	f7fa fb4c 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9510:	2101      	movs	r1, #1
    9512:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    9516:	2115      	movs	r1, #21
    9518:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    951c:	bd10      	pop	{r4, pc}
    951e:	0000      	.short	0x0000
    9520:	2000012c 	.word	0x2000012c
    9524:	b510      	push	{r4, lr}
    9526:	4c0a      	ldr	r4, [pc, #40]	; (9550 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1550>)
    9528:	68a0      	ldr	r0, [r4, #8]
    952a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    952e:	07c0      	lsls	r0, r0, #31
    9530:	d008      	beq.n	9544 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1544>
    9532:	f7fe fd33 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9536:	68a0      	ldr	r0, [r4, #8]
    9538:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    953c:	f021 0101 	bic.w	r1, r1, #1
    9540:	7001      	strb	r1, [r0, #0]
    9542:	bd10      	pop	{r4, pc}
    9544:	f240 6172 	movw	r1, #1650	; 0x672
    9548:	2031      	movs	r0, #49	; 0x31
    954a:	f7fa fb2d 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    954e:	0000      	.short	0x0000
    9550:	2000012c 	.word	0x2000012c
    9554:	b510      	push	{r4, lr}
    9556:	4c0a      	ldr	r4, [pc, #40]	; (9580 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1580>)
    9558:	2301      	movs	r3, #1
    955a:	2100      	movs	r1, #0
    955c:	68a0      	ldr	r0, [r4, #8]
    955e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9562:	3068      	adds	r0, #104	; 0x68
    9564:	f003 fa90 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9568:	b120      	cbz	r0, 9574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1574>
    956a:	68a1      	ldr	r1, [r4, #8]
    956c:	201c      	movs	r0, #28
    956e:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9572:	bd10      	pop	{r4, pc}
    9574:	f240 61f7 	movw	r1, #1783	; 0x6f7
    9578:	2031      	movs	r0, #49	; 0x31
    957a:	f7fa fb15 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    957e:	0000      	.short	0x0000
    9580:	2000012c 	.word	0x2000012c
    9584:	480a      	ldr	r0, [pc, #40]	; (95b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15b0>)
    9586:	b510      	push	{r4, lr}
    9588:	6880      	ldr	r0, [r0, #8]
    958a:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    958e:	f3c1 1201 	ubfx	r2, r1, #4, #2
    9592:	2a01      	cmp	r2, #1
    9594:	d004      	beq.n	95a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15a0>
    9596:	f240 61fe 	movw	r1, #1790	; 0x6fe
    959a:	2031      	movs	r0, #49	; 0x31
    959c:	f7fa fb04 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95a0:	f021 0110 	bic.w	r1, r1, #16
    95a4:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    95a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95ac:	f7fe bcf6 	b.w	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    95b0:	2000012c 	.word	0x2000012c
    95b4:	b510      	push	{r4, lr}
    95b6:	4c0a      	ldr	r4, [pc, #40]	; (95e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15e0>)
    95b8:	2301      	movs	r3, #1
    95ba:	2100      	movs	r1, #0
    95bc:	68a0      	ldr	r0, [r4, #8]
    95be:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    95c2:	3068      	adds	r0, #104	; 0x68
    95c4:	f003 fa60 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    95c8:	b120      	cbz	r0, 95d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15d4>
    95ca:	68a1      	ldr	r1, [r4, #8]
    95cc:	200e      	movs	r0, #14
    95ce:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    95d2:	bd10      	pop	{r4, pc}
    95d4:	f240 61ea 	movw	r1, #1770	; 0x6ea
    95d8:	2031      	movs	r0, #49	; 0x31
    95da:	f7fa fae5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95de:	0000      	.short	0x0000
    95e0:	2000012c 	.word	0x2000012c
    95e4:	4804      	ldr	r0, [pc, #16]	; (95f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x15f8>)
    95e6:	6880      	ldr	r0, [r0, #8]
    95e8:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    95ec:	f021 0104 	bic.w	r1, r1, #4
    95f0:	7001      	strb	r1, [r0, #0]
    95f2:	f7fe bcd3 	b.w	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    95f6:	0000      	.short	0x0000
    95f8:	2000012c 	.word	0x2000012c
    95fc:	4809      	ldr	r0, [pc, #36]	; (9624 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1624>)
    95fe:	b510      	push	{r4, lr}
    9600:	6880      	ldr	r0, [r0, #8]
    9602:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9606:	2910      	cmp	r1, #16
    9608:	d004      	beq.n	9614 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1614>
    960a:	f240 6181 	movw	r1, #1665	; 0x681
    960e:	2031      	movs	r0, #49	; 0x31
    9610:	f7fa faca 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9614:	2101      	movs	r1, #1
    9616:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    961a:	2111      	movs	r1, #17
    961c:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9620:	bd10      	pop	{r4, pc}
    9622:	0000      	.short	0x0000
    9624:	2000012c 	.word	0x2000012c
    9628:	b510      	push	{r4, lr}
    962a:	4c0a      	ldr	r4, [pc, #40]	; (9654 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1654>)
    962c:	2301      	movs	r3, #1
    962e:	2100      	movs	r1, #0
    9630:	68a0      	ldr	r0, [r4, #8]
    9632:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9636:	3068      	adds	r0, #104	; 0x68
    9638:	f003 fa26 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    963c:	b120      	cbz	r0, 9648 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1648>
    963e:	68a1      	ldr	r1, [r4, #8]
    9640:	201f      	movs	r0, #31
    9642:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    9646:	bd10      	pop	{r4, pc}
    9648:	f240 710a 	movw	r1, #1802	; 0x70a
    964c:	2031      	movs	r0, #49	; 0x31
    964e:	f7fa faab 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9652:	0000      	.short	0x0000
    9654:	2000012c 	.word	0x2000012c
    9658:	4808      	ldr	r0, [pc, #32]	; (967c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x167c>)
    965a:	b510      	push	{r4, lr}
    965c:	6880      	ldr	r0, [r0, #8]
    965e:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    9662:	2921      	cmp	r1, #33	; 0x21
    9664:	d005      	beq.n	9672 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1672>
    9666:	b121      	cbz	r1, 9672 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1672>
    9668:	f240 7111 	movw	r1, #1809	; 0x711
    966c:	2031      	movs	r0, #49	; 0x31
    966e:	f7fa fa9b 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9672:	2122      	movs	r1, #34	; 0x22
    9674:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    9678:	bd10      	pop	{r4, pc}
    967a:	0000      	.short	0x0000
    967c:	2000012c 	.word	0x2000012c
    9680:	4807      	ldr	r0, [pc, #28]	; (96a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a0>)
    9682:	b510      	push	{r4, lr}
    9684:	6880      	ldr	r0, [r0, #8]
    9686:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    968a:	2915      	cmp	r1, #21
    968c:	d004      	beq.n	9698 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1698>
    968e:	f240 6196 	movw	r1, #1686	; 0x696
    9692:	2031      	movs	r0, #49	; 0x31
    9694:	f7fa fa88 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9698:	2119      	movs	r1, #25
    969a:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    969e:	bd10      	pop	{r4, pc}
    96a0:	2000012c 	.word	0x2000012c
    96a4:	4807      	ldr	r0, [pc, #28]	; (96c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c4>)
    96a6:	b510      	push	{r4, lr}
    96a8:	6880      	ldr	r0, [r0, #8]
    96aa:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    96ae:	2915      	cmp	r1, #21
    96b0:	d004      	beq.n	96bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16bc>
    96b2:	f44f 61d2 	mov.w	r1, #1680	; 0x690
    96b6:	2031      	movs	r0, #49	; 0x31
    96b8:	f7fa fa76 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96bc:	2117      	movs	r1, #23
    96be:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    96c2:	bd10      	pop	{r4, pc}
    96c4:	2000012c 	.word	0x2000012c
    96c8:	b570      	push	{r4, r5, r6, lr}
    96ca:	4d1b      	ldr	r5, [pc, #108]	; (9738 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1738>)
    96cc:	68a8      	ldr	r0, [r5, #8]
    96ce:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    96d2:	291b      	cmp	r1, #27
    96d4:	d002      	beq.n	96dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16dc>
    96d6:	f44f 61d6 	mov.w	r1, #1712	; 0x6b0
    96da:	e007      	b.n	96ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16ec>
    96dc:	2400      	movs	r4, #0
    96de:	f880 40ab 	strb.w	r4, [r0, #171]	; 0xab
    96e2:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
    96e6:	b121      	cbz	r1, 96f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16f2>
    96e8:	f240 61b4 	movw	r1, #1716	; 0x6b4
    96ec:	2031      	movs	r0, #49	; 0x31
    96ee:	f7fa fa5b 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96f2:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    96f6:	b141      	cbz	r1, 970a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x170a>
    96f8:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    96fc:	8801      	ldrh	r1, [r0, #0]
    96fe:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9702:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9706:	210c      	movs	r1, #12
    9708:	e008      	b.n	971c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x171c>
    970a:	8801      	ldrh	r1, [r0, #0]
    970c:	f8a0 11c0 	strh.w	r1, [r0, #448]	; 0x1c0
    9710:	f880 41be 	strb.w	r4, [r0, #446]	; 0x1be
    9714:	2101      	movs	r1, #1
    9716:	f880 11c2 	strb.w	r1, [r0, #450]	; 0x1c2
    971a:	210b      	movs	r1, #11
    971c:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
    9720:	8800      	ldrh	r0, [r0, #0]
    9722:	f7fa fe75 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9726:	f002 ff22 	bl	c56e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    972a:	f000 f999 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    972e:	68a8      	ldr	r0, [r5, #8]
    9730:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
    9734:	bd70      	pop	{r4, r5, r6, pc}
    9736:	0000      	.short	0x0000
    9738:	2000012c 	.word	0x2000012c
    973c:	b510      	push	{r4, lr}
    973e:	4c08      	ldr	r4, [pc, #32]	; (9760 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1760>)
    9740:	2301      	movs	r3, #1
    9742:	4619      	mov	r1, r3
    9744:	68a0      	ldr	r0, [r4, #8]
    9746:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    974a:	3068      	adds	r0, #104	; 0x68
    974c:	f003 f99c 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9750:	2800      	cmp	r0, #0
    9752:	d103      	bne.n	975c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x175c>
    9754:	68a1      	ldr	r1, [r4, #8]
    9756:	2008      	movs	r0, #8
    9758:	f881 0078 	strb.w	r0, [r1, #120]	; 0x78
    975c:	bd10      	pop	{r4, pc}
    975e:	0000      	.short	0x0000
    9760:	2000012c 	.word	0x2000012c
    9764:	4814      	ldr	r0, [pc, #80]	; (97b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17b8>)
    9766:	b510      	push	{r4, lr}
    9768:	68c1      	ldr	r1, [r0, #12]
    976a:	6880      	ldr	r0, [r0, #8]
    976c:	7909      	ldrb	r1, [r1, #4]
    976e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    9772:	2a0a      	cmp	r2, #10
    9774:	d109      	bne.n	978a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178a>
    9776:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
    977a:	428a      	cmp	r2, r1
    977c:	d105      	bne.n	978a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x178a>
    977e:	2100      	movs	r1, #0
    9780:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    9784:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    9788:	bd10      	pop	{r4, pc}
    978a:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
    978e:	0713      	lsls	r3, r2, #28
    9790:	d507      	bpl.n	97a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17a2>
    9792:	f022 0108 	bic.w	r1, r2, #8
    9796:	f880 1077 	strb.w	r1, [r0, #119]	; 0x77
    979a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    979e:	f7fe bbfd 	b.w	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    97a2:	29ff      	cmp	r1, #255	; 0xff
    97a4:	d004      	beq.n	97b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17b0>
    97a6:	f240 616c 	movw	r1, #1644	; 0x66c
    97aa:	2031      	movs	r0, #49	; 0x31
    97ac:	f7fa f9fc 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97b4:	f7ff be94 	b.w	94e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e0>
    97b8:	2000012c 	.word	0x2000012c
    97bc:	b510      	push	{r4, lr}
    97be:	4c15      	ldr	r4, [pc, #84]	; (9814 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1814>)
    97c0:	68a0      	ldr	r0, [r4, #8]
    97c2:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    97c6:	0789      	lsls	r1, r1, #30
    97c8:	d411      	bmi.n	97ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17ee>
    97ca:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    97ce:	2301      	movs	r3, #1
    97d0:	2100      	movs	r1, #0
    97d2:	3068      	adds	r0, #104	; 0x68
    97d4:	f003 f958 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97d8:	b120      	cbz	r0, 97e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17e4>
    97da:	68a1      	ldr	r1, [r4, #8]
    97dc:	2006      	movs	r0, #6
    97de:	f881 0075 	strb.w	r0, [r1, #117]	; 0x75
    97e2:	e009      	b.n	97f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x17f8>
    97e4:	f240 61d6 	movw	r1, #1750	; 0x6d6
    97e8:	2031      	movs	r0, #49	; 0x31
    97ea:	f7fa f9dd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ee:	2100      	movs	r1, #0
    97f0:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    97f4:	f880 11ac 	strb.w	r1, [r0, #428]	; 0x1ac
    97f8:	68a0      	ldr	r0, [r4, #8]
    97fa:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
    97fe:	0780      	lsls	r0, r0, #30
    9800:	d507      	bpl.n	9812 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1812>
    9802:	f7fe fbcb 	bl	7f9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9806:	68a0      	ldr	r0, [r4, #8]
    9808:	f810 1f77 	ldrb.w	r1, [r0, #119]!
    980c:	f021 0102 	bic.w	r1, r1, #2
    9810:	7001      	strb	r1, [r0, #0]
    9812:	bd10      	pop	{r4, pc}
    9814:	2000012c 	.word	0x2000012c
    9818:	4808      	ldr	r0, [pc, #32]	; (983c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x183c>)
    981a:	b510      	push	{r4, lr}
    981c:	6880      	ldr	r0, [r0, #8]
    981e:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    9822:	b941      	cbnz	r1, 9836 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1836>
    9824:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
    9828:	2301      	movs	r3, #1
    982a:	2106      	movs	r1, #6
    982c:	3068      	adds	r0, #104	; 0x68
    982e:	f003 f92b 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9832:	2800      	cmp	r0, #0
    9834:	d000      	beq.n	9838 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1838>
    9836:	2001      	movs	r0, #1
    9838:	bd10      	pop	{r4, pc}
    983a:	0000      	.short	0x0000
    983c:	2000012c 	.word	0x2000012c
    9840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9842:	4c54      	ldr	r4, [pc, #336]	; (9994 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1994>)
    9844:	4606      	mov	r6, r0
    9846:	4615      	mov	r5, r2
    9848:	68a0      	ldr	r0, [r4, #8]
    984a:	b109      	cbz	r1, 9850 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1850>
    984c:	2100      	movs	r1, #0
    984e:	e004      	b.n	985a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x185a>
    9850:	f8b0 1106 	ldrh.w	r1, [r0, #262]	; 0x106
    9854:	f8b0 20f6 	ldrh.w	r2, [r0, #246]	; 0xf6
    9858:	4411      	add	r1, r2
    985a:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
    985e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
    9862:	b939      	cbnz	r1, 9874 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1874>
    9864:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
    9868:	2301      	movs	r3, #1
    986a:	4619      	mov	r1, r3
    986c:	3068      	adds	r0, #104	; 0x68
    986e:	f003 f90b 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9872:	b130      	cbz	r0, 9882 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1882>
    9874:	68a0      	ldr	r0, [r4, #8]
    9876:	f830 1fa0 	ldrh.w	r1, [r0, #160]!
    987a:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    987e:	4411      	add	r1, r2
    9880:	8001      	strh	r1, [r0, #0]
    9882:	68a0      	ldr	r0, [r4, #8]
    9884:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    9888:	b132      	cbz	r2, 9898 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1898>
    988a:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    988e:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    9892:	4419      	add	r1, r3
    9894:	f8a0 10a2 	strh.w	r1, [r0, #162]	; 0xa2
    9898:	f990 70aa 	ldrsb.w	r7, [r0, #170]	; 0xaa
    989c:	2f00      	cmp	r7, #0
    989e:	dd06      	ble.n	98ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18ae>
    98a0:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
    98a4:	f8b0 30f6 	ldrh.w	r3, [r0, #246]	; 0xf6
    98a8:	4419      	add	r1, r3
    98aa:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    98ae:	2101      	movs	r1, #1
    98b0:	233d      	movs	r3, #61	; 0x3d
    98b2:	b116      	cbz	r6, 98ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18ba>
    98b4:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    98b8:	e013      	b.n	98e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e2>
    98ba:	7824      	ldrb	r4, [r4, #0]
    98bc:	2c02      	cmp	r4, #2
    98be:	d00a      	beq.n	98d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18d6>
    98c0:	2c01      	cmp	r4, #1
    98c2:	d012      	beq.n	98ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18ea>
    98c4:	b345      	cbz	r5, 9918 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1918>
    98c6:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    98ca:	7011      	strb	r1, [r2, #0]
    98cc:	f015 0f14 	tst.w	r5, #20
    98d0:	d00e      	beq.n	98f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18f0>
    98d2:	211e      	movs	r1, #30
    98d4:	e018      	b.n	9908 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1908>
    98d6:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
    98da:	2a06      	cmp	r2, #6
    98dc:	d03e      	beq.n	995c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195c>
    98de:	2216      	movs	r2, #22
    98e0:	e03c      	b.n	995c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195c>
    98e2:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    98e6:	7011      	strb	r1, [r2, #0]
    98e8:	e041      	b.n	996e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196e>
    98ea:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
    98ee:	e035      	b.n	995c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195c>
    98f0:	0729      	lsls	r1, r5, #28
    98f2:	d502      	bpl.n	98fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18fa>
    98f4:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
    98f8:	e039      	b.n	996e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196e>
    98fa:	06a9      	lsls	r1, r5, #26
    98fc:	d501      	bpl.n	9902 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1902>
    98fe:	2123      	movs	r1, #35	; 0x23
    9900:	e002      	b.n	9908 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1908>
    9902:	07a9      	lsls	r1, r5, #30
    9904:	d003      	beq.n	990e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x190e>
    9906:	212a      	movs	r1, #42	; 0x2a
    9908:	f880 108d 	strb.w	r1, [r0, #141]	; 0x8d
    990c:	e02f      	b.n	996e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196e>
    990e:	f640 419b 	movw	r1, #3227	; 0xc9b
    9912:	2031      	movs	r0, #49	; 0x31
    9914:	f7fa f948 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9918:	b12a      	cbz	r2, 9926 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1926>
    991a:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    991e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9922:	429a      	cmp	r2, r3
    9924:	d210      	bcs.n	9948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1948>
    9926:	2f00      	cmp	r7, #0
    9928:	dd05      	ble.n	9936 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1936>
    992a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
    992e:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9932:	429a      	cmp	r2, r3
    9934:	d208      	bcs.n	9948 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1948>
    9936:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	; 0xa0
    993a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    993e:	4293      	cmp	r3, r2
    9940:	d304      	bcc.n	994c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194c>
    9942:	f890 3170 	ldrb.w	r3, [r0, #368]	; 0x170
    9946:	b10b      	cbz	r3, 994c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x194c>
    9948:	2222      	movs	r2, #34	; 0x22
    994a:	e007      	b.n	995c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195c>
    994c:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
    9950:	b13b      	cbz	r3, 9962 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1962>
    9952:	f8b0 309c 	ldrh.w	r3, [r0, #156]	; 0x9c
    9956:	4293      	cmp	r3, r2
    9958:	d309      	bcc.n	996e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196e>
    995a:	2208      	movs	r2, #8
    995c:	f880 208d 	strb.w	r2, [r0, #141]	; 0x8d
    9960:	e7bf      	b.n	98e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e2>
    9962:	f8b0 209c 	ldrh.w	r2, [r0, #156]	; 0x9c
    9966:	2a06      	cmp	r2, #6
    9968:	d301      	bcc.n	996e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196e>
    996a:	223e      	movs	r2, #62	; 0x3e
    996c:	e7f6      	b.n	995c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x195c>
    996e:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    9972:	f88d 1000 	strb.w	r1, [sp]
    9976:	9900      	ldr	r1, [sp, #0]
    9978:	9100      	str	r1, [sp, #0]
    997a:	f89d 1000 	ldrb.w	r1, [sp]
    997e:	b119      	cbz	r1, 9988 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1988>
    9980:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9984:	f004 bb36 	b.w	dff4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9988:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    998c:	2100      	movs	r1, #0
    998e:	f7fd bb55 	b.w	703c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9992:	0000      	.short	0x0000
    9994:	2000012c 	.word	0x2000012c
    9998:	b570      	push	{r4, r5, r6, lr}
    999a:	4d2d      	ldr	r5, [pc, #180]	; (9a50 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a50>)
    999c:	68a8      	ldr	r0, [r5, #8]
    999e:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    99a2:	b151      	cbz	r1, 99ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ba>
    99a4:	2901      	cmp	r1, #1
    99a6:	d008      	beq.n	99ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ba>
    99a8:	2902      	cmp	r1, #2
    99aa:	d009      	beq.n	99c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c0>
    99ac:	2903      	cmp	r1, #3
    99ae:	d007      	beq.n	99c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19c0>
    99b0:	f640 215f 	movw	r1, #2655	; 0xa5f
    99b4:	2031      	movs	r0, #49	; 0x31
    99b6:	f7fa f8f7 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    99ba:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    99be:	e035      	b.n	9a2c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a2c>
    99c0:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    99c4:	2908      	cmp	r1, #8
    99c6:	d034      	beq.n	9a32 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a32>
    99c8:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    99cc:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    99d0:	2400      	movs	r4, #0
    99d2:	1c8b      	adds	r3, r1, #2
    99d4:	429a      	cmp	r2, r3
    99d6:	d306      	bcc.n	99e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19e6>
    99d8:	1a51      	subs	r1, r2, r1
    99da:	1e89      	subs	r1, r1, #2
    99dc:	040c      	lsls	r4, r1, #16
    99de:	0c24      	lsrs	r4, r4, #16
    99e0:	d001      	beq.n	99e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19e6>
    99e2:	1e64      	subs	r4, r4, #1
    99e4:	b2a4      	uxth	r4, r4
    99e6:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
    99ea:	b139      	cbz	r1, 99fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19fc>
    99ec:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    99f0:	2301      	movs	r3, #1
    99f2:	2109      	movs	r1, #9
    99f4:	3068      	adds	r0, #104	; 0x68
    99f6:	f003 f847 	bl	ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99fa:	b330      	cbz	r0, 9a4a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4a>
    99fc:	f7ff ff0c 	bl	9818 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1818>
    9a00:	b168      	cbz	r0, 9a1e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a1e>
    9a02:	68a9      	ldr	r1, [r5, #8]
    9a04:	2000      	movs	r0, #0
    9a06:	3190      	adds	r1, #144	; 0x90
    9a08:	c906      	ldmia	r1, {r1, r2}
    9a0a:	1c8b      	adds	r3, r1, #2
    9a0c:	429a      	cmp	r2, r3
    9a0e:	d303      	bcc.n	9a18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a18>
    9a10:	1a50      	subs	r0, r2, r1
    9a12:	1e80      	subs	r0, r0, #2
    9a14:	d000      	beq.n	9a18 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a18>
    9a16:	1e40      	subs	r0, r0, #1
    9a18:	42a0      	cmp	r0, r4
    9a1a:	d200      	bcs.n	9a1e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a1e>
    9a1c:	b284      	uxth	r4, r0
    9a1e:	b10c      	cbz	r4, 9a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a24>
    9a20:	1e64      	subs	r4, r4, #1
    9a22:	b2a4      	uxth	r4, r4
    9a24:	68a8      	ldr	r0, [r5, #8]
    9a26:	f8b0 10f4 	ldrh.w	r1, [r0, #244]	; 0xf4
    9a2a:	4421      	add	r1, r4
    9a2c:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
    9a30:	bd70      	pop	{r4, r5, r6, pc}
    9a32:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    9a36:	2903      	cmp	r1, #3
    9a38:	d3bf      	bcc.n	99ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19ba>
    9a3a:	f830 1f6c 	ldrh.w	r1, [r0, #108]!
    9a3e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9a40:	4411      	add	r1, r2
    9a42:	1c49      	adds	r1, r1, #1
    9a44:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9a48:	bd70      	pop	{r4, r5, r6, pc}
    9a4a:	2400      	movs	r4, #0
    9a4c:	e7ea      	b.n	9a24 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a24>
    9a4e:	0000      	.short	0x0000
    9a50:	2000012c 	.word	0x2000012c

00009a54 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    9a54:	4901      	ldr	r1, [pc, #4]	; (9a5c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    9a56:	7008      	strb	r0, [r1, #0]
    9a58:	4770      	bx	lr
    9a5a:	0000      	.short	0x0000
    9a5c:	200002ab 	.word	0x200002ab

00009a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    9a60:	4801      	ldr	r0, [pc, #4]	; (9a68 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    9a62:	7800      	ldrb	r0, [r0, #0]
    9a64:	f7f9 beda 	b.w	381c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9a68:	200002ab 	.word	0x200002ab

00009a6c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9a6c:	4903      	ldr	r1, [pc, #12]	; (9a7c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9a6e:	888a      	ldrh	r2, [r1, #4]
    9a70:	8002      	strh	r2, [r0, #0]
    9a72:	7889      	ldrb	r1, [r1, #2]
    9a74:	7081      	strb	r1, [r0, #2]
    9a76:	2000      	movs	r0, #0
    9a78:	4770      	bx	lr
    9a7a:	0000      	.short	0x0000
    9a7c:	200342a0 	.word	0x200342a0

00009a80 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9a80:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9a82:	460c      	mov	r4, r1
    9a84:	4605      	mov	r5, r0
    9a86:	8800      	ldrh	r0, [r0, #0]
    9a88:	4669      	mov	r1, sp
    9a8a:	f002 ffd3 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9a8e:	2200      	movs	r2, #0
    9a90:	b128      	cbz	r0, 9a9e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    9a92:	f8c4 2002 	str.w	r2, [r4, #2]
    9a96:	71a2      	strb	r2, [r4, #6]
    9a98:	8022      	strh	r2, [r4, #0]
    9a9a:	2002      	movs	r0, #2
    9a9c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9a9e:	9901      	ldr	r1, [sp, #4]
    9aa0:	f111 0168 	adds.w	r1, r1, #104	; 0x68
    9aa4:	f881 204e 	strb.w	r2, [r1, #78]	; 0x4e
    9aa8:	f8d1 0016 	ldr.w	r0, [r1, #22]
    9aac:	f8c4 0002 	str.w	r0, [r4, #2]
    9ab0:	7e88      	ldrb	r0, [r1, #26]
    9ab2:	71a0      	strb	r0, [r4, #6]
    9ab4:	8828      	ldrh	r0, [r5, #0]
    9ab6:	8020      	strh	r0, [r4, #0]
    9ab8:	f891 004e 	ldrb.w	r0, [r1, #78]	; 0x4e
    9abc:	2800      	cmp	r0, #0
    9abe:	d1f1      	bne.n	9aa4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    9ac0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
	...

00009ac4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    9ac4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9ac8:	460d      	mov	r5, r1
    9aca:	4606      	mov	r6, r0
    9acc:	f000 fb90 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9ad0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9ad4:	b1e0      	cbz	r0, 9b10 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x4c>
    9ad6:	8830      	ldrh	r0, [r6, #0]
    9ad8:	4669      	mov	r1, sp
    9ada:	f002 ffab 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9ade:	2800      	cmp	r0, #0
    9ae0:	d114      	bne.n	9b0c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    9ae2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    9ae6:	2700      	movs	r7, #0
    9ae8:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    9aec:	f814 0f62 	ldrb.w	r0, [r4, #98]!
    9af0:	f004 fffb 	bl	eaea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9af4:	70a8      	strb	r0, [r5, #2]
    9af6:	7860      	ldrb	r0, [r4, #1]
    9af8:	f004 fff7 	bl	eaea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    9afc:	70e8      	strb	r0, [r5, #3]
    9afe:	78a0      	ldrb	r0, [r4, #2]
    9b00:	3c62      	subs	r4, #98	; 0x62
    9b02:	2800      	cmp	r0, #0
    9b04:	d1f0      	bne.n	9ae8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x24>
    9b06:	8830      	ldrh	r0, [r6, #0]
    9b08:	8028      	strh	r0, [r5, #0]
    9b0a:	2000      	movs	r0, #0
    9b0c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9b10:	2001      	movs	r0, #1
    9b12:	e7fb      	b.n	9b0c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>

00009b14 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9b14:	b51c      	push	{r2, r3, r4, lr}
    9b16:	8800      	ldrh	r0, [r0, #0]
    9b18:	4669      	mov	r1, sp
    9b1a:	f002 ff8b 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9b1e:	2800      	cmp	r0, #0
    9b20:	d10b      	bne.n	9b3a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9b22:	480b      	ldr	r0, [pc, #44]	; (9b50 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9b24:	7800      	ldrb	r0, [r0, #0]
    9b26:	b188      	cbz	r0, 9b4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9b28:	9801      	ldr	r0, [sp, #4]
    9b2a:	f005 f95c 	bl	ede6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    9b2e:	b128      	cbz	r0, 9b3c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9b30:	9801      	ldr	r0, [sp, #4]
    9b32:	f890 01ad 	ldrb.w	r0, [r0, #429]	; 0x1ad
    9b36:	b118      	cbz	r0, 9b40 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9b38:	203a      	movs	r0, #58	; 0x3a
    9b3a:	bd1c      	pop	{r2, r3, r4, pc}
    9b3c:	2002      	movs	r0, #2
    9b3e:	bd1c      	pop	{r2, r3, r4, pc}
    9b40:	9901      	ldr	r1, [sp, #4]
    9b42:	2001      	movs	r0, #1
    9b44:	f881 01ad 	strb.w	r0, [r1, #429]	; 0x1ad
    9b48:	2000      	movs	r0, #0
    9b4a:	bd1c      	pop	{r2, r3, r4, pc}
    9b4c:	2011      	movs	r0, #17
    9b4e:	bd1c      	pop	{r2, r3, r4, pc}
    9b50:	20000208 	.word	0x20000208

00009b54 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9b54:	b510      	push	{r4, lr}
    9b56:	4604      	mov	r4, r0
    9b58:	f005 f93c 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9b5c:	b130      	cbz	r0, 9b6c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9b5e:	4804      	ldr	r0, [pc, #16]	; (9b70 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9b60:	8881      	ldrh	r1, [r0, #4]
    9b62:	8021      	strh	r1, [r4, #0]
    9b64:	88c0      	ldrh	r0, [r0, #6]
    9b66:	8060      	strh	r0, [r4, #2]
    9b68:	2000      	movs	r0, #0
    9b6a:	bd10      	pop	{r4, pc}
    9b6c:	2001      	movs	r0, #1
    9b6e:	bd10      	pop	{r4, pc}
    9b70:	20000210 	.word	0x20000210

00009b74 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9b74:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9b76:	4605      	mov	r5, r0
    9b78:	f000 fb3a 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9b7c:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9b80:	b310      	cbz	r0, 9bc8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9b82:	2400      	movs	r4, #0
    9b84:	a802      	add	r0, sp, #8
    9b86:	f88d 4004 	strb.w	r4, [sp, #4]
    9b8a:	f88d 4008 	strb.w	r4, [sp, #8]
    9b8e:	9000      	str	r0, [sp, #0]
    9b90:	78aa      	ldrb	r2, [r5, #2]
    9b92:	7869      	ldrb	r1, [r5, #1]
    9b94:	7828      	ldrb	r0, [r5, #0]
    9b96:	ab01      	add	r3, sp, #4
    9b98:	f005 f977 	bl	ee8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    9b9c:	2800      	cmp	r0, #0
    9b9e:	d112      	bne.n	9bc6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9ba0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9ba4:	f005 f877 	bl	ec96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9ba8:	b180      	cbz	r0, 9bcc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9baa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9bae:	f005 f872 	bl	ec96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    9bb2:	b158      	cbz	r0, 9bcc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9bb4:	4806      	ldr	r0, [pc, #24]	; (9bd0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9bb6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9bba:	7481      	strb	r1, [r0, #18]
    9bbc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9bc0:	74c1      	strb	r1, [r0, #19]
    9bc2:	8284      	strh	r4, [r0, #20]
    9bc4:	2000      	movs	r0, #0
    9bc6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bc8:	2001      	movs	r0, #1
    9bca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bcc:	2011      	movs	r0, #17
    9bce:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9bd0:	200342a0 	.word	0x200342a0

00009bd4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9bd4:	7801      	ldrb	r1, [r0, #0]
    9bd6:	b179      	cbz	r1, 9bf8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9bd8:	7841      	ldrb	r1, [r0, #1]
    9bda:	b169      	cbz	r1, 9bf8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9bdc:	8841      	ldrh	r1, [r0, #2]
    9bde:	291b      	cmp	r1, #27
    9be0:	d30a      	bcc.n	9bf8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9be2:	8881      	ldrh	r1, [r0, #4]
    9be4:	291b      	cmp	r1, #27
    9be6:	d307      	bcc.n	9bf8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9be8:	4904      	ldr	r1, [pc, #16]	; (9bfc <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9bea:	6802      	ldr	r2, [r0, #0]
    9bec:	f8c1 2002 	str.w	r2, [r1, #2]
    9bf0:	8880      	ldrh	r0, [r0, #4]
    9bf2:	80c8      	strh	r0, [r1, #6]
    9bf4:	2000      	movs	r0, #0
    9bf6:	4770      	bx	lr
    9bf8:	2012      	movs	r0, #18
    9bfa:	4770      	bx	lr
    9bfc:	200342a0 	.word	0x200342a0

00009c00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9c00:	6800      	ldr	r0, [r0, #0]
    9c02:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9c06:	4288      	cmp	r0, r1
    9c08:	d303      	bcc.n	9c12 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9c0a:	4903      	ldr	r1, [pc, #12]	; (9c18 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9c0c:	6088      	str	r0, [r1, #8]
    9c0e:	2000      	movs	r0, #0
    9c10:	4770      	bx	lr
    9c12:	2012      	movs	r0, #18
    9c14:	4770      	bx	lr
    9c16:	0000      	.short	0x0000
    9c18:	200342a0 	.word	0x200342a0

00009c1c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9c1c:	4a03      	ldr	r2, [pc, #12]	; (9c2c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9c1e:	e9d2 1200 	ldrd	r1, r2, [r2]
    9c22:	6001      	str	r1, [r0, #0]
    9c24:	6042      	str	r2, [r0, #4]
    9c26:	2000      	movs	r0, #0
    9c28:	4770      	bx	lr
    9c2a:	0000      	.short	0x0000
    9c2c:	0000a090 	.word	0x0000a090

00009c30 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9c30:	b510      	push	{r4, lr}
    9c32:	2005      	movs	r0, #5
    9c34:	f000 fad2 	bl	a1dc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9c38:	f7fd feb4 	bl	79a4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9c3c:	4902      	ldr	r1, [pc, #8]	; (9c48 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9c3e:	4801      	ldr	r0, [pc, #4]	; (9c44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9c40:	6048      	str	r0, [r1, #4]
    9c42:	bd10      	pop	{r4, pc}
    9c44:	00009cd1 	.word	0x00009cd1
    9c48:	20000208 	.word	0x20000208

00009c4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9c4c:	b510      	push	{r4, lr}
    9c4e:	f002 fe45 	bl	c8dc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9c52:	f7fb fc55 	bl	5500 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9c56:	480f      	ldr	r0, [pc, #60]	; (9c94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48>)
    9c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9c5c:	4b0e      	ldr	r3, [pc, #56]	; (9c98 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9c5e:	81c1      	strh	r1, [r0, #14]
    9c60:	8201      	strh	r1, [r0, #16]
    9c62:	2100      	movs	r1, #0
    9c64:	75c1      	strb	r1, [r0, #23]
    9c66:	8301      	strh	r1, [r0, #24]
    9c68:	8001      	strh	r1, [r0, #0]
    9c6a:	221b      	movs	r2, #27
    9c6c:	801a      	strh	r2, [r3, #0]
    9c6e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9c72:	805c      	strh	r4, [r3, #2]
    9c74:	809a      	strh	r2, [r3, #4]
    9c76:	80dc      	strh	r4, [r3, #6]
    9c78:	7481      	strb	r1, [r0, #18]
    9c7a:	74c1      	strb	r1, [r0, #19]
    9c7c:	2303      	movs	r3, #3
    9c7e:	7083      	strb	r3, [r0, #2]
    9c80:	2302      	movs	r3, #2
    9c82:	70c3      	strb	r3, [r0, #3]
    9c84:	8082      	strh	r2, [r0, #4]
    9c86:	80c2      	strh	r2, [r0, #6]
    9c88:	f640 62a6 	movw	r2, #3750	; 0xea6
    9c8c:	6082      	str	r2, [r0, #8]
    9c8e:	7581      	strb	r1, [r0, #22]
    9c90:	7301      	strb	r1, [r0, #12]
    9c92:	bd10      	pop	{r4, pc}
    9c94:	200342a0 	.word	0x200342a0
    9c98:	20000210 	.word	0x20000210

00009c9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    9c9c:	b510      	push	{r4, lr}
    9c9e:	b158      	cbz	r0, 9cb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    9ca0:	490a      	ldr	r1, [pc, #40]	; (9ccc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    9ca2:	780a      	ldrb	r2, [r1, #0]
    9ca4:	b16a      	cbz	r2, 9cc2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    9ca6:	2200      	movs	r2, #0
    9ca8:	7042      	strb	r2, [r0, #1]
    9caa:	2303      	movs	r3, #3
    9cac:	7003      	strb	r3, [r0, #0]
    9cae:	2301      	movs	r3, #1
    9cb0:	7103      	strb	r3, [r0, #4]
    9cb2:	700a      	strb	r2, [r1, #0]
    9cb4:	4618      	mov	r0, r3
    9cb6:	bd10      	pop	{r4, pc}
    9cb8:	f44f 51be 	mov.w	r1, #6080	; 0x17c0
    9cbc:	2039      	movs	r0, #57	; 0x39
    9cbe:	f7f9 ff73 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9cc6:	f7fb bf97 	b.w	5bf8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    9cca:	0000      	.short	0x0000
    9ccc:	200342a0 	.word	0x200342a0
    9cd0:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cd4:	4692      	mov	sl, r2
    9cd6:	460f      	mov	r7, r1
    9cd8:	4681      	mov	r9, r0
    9cda:	f005 f87b 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9cde:	2800      	cmp	r0, #0
    9ce0:	d063      	beq.n	9daa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9ce2:	4933      	ldr	r1, [pc, #204]	; (9db0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    9ce4:	f8b9 204c 	ldrh.w	r2, [r9, #76]	; 0x4c
    9ce8:	f8b9 604a 	ldrh.w	r6, [r9, #74]	; 0x4a
    9cec:	8808      	ldrh	r0, [r1, #0]
    9cee:	4290      	cmp	r0, r2
    9cf0:	d300      	bcc.n	9cf4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    9cf2:	4610      	mov	r0, r2
    9cf4:	4680      	mov	r8, r0
    9cf6:	8888      	ldrh	r0, [r1, #4]
    9cf8:	42b0      	cmp	r0, r6
    9cfa:	d200      	bcs.n	9cfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    9cfc:	4606      	mov	r6, r0
    9cfe:	884c      	ldrh	r4, [r1, #2]
    9d00:	f640 0048 	movw	r0, #2120	; 0x848
    9d04:	4284      	cmp	r4, r0
    9d06:	d300      	bcc.n	9d0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    9d08:	4604      	mov	r4, r0
    9d0a:	88cd      	ldrh	r5, [r1, #6]
    9d0c:	4285      	cmp	r5, r0
    9d0e:	d300      	bcc.n	9d12 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    9d10:	4605      	mov	r5, r0
    9d12:	4284      	cmp	r4, r0
    9d14:	d300      	bcc.n	9d18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    9d16:	4604      	mov	r4, r0
    9d18:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9d1c:	2e1b      	cmp	r6, #27
    9d1e:	d001      	beq.n	9d24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    9d20:	428d      	cmp	r5, r1
    9d22:	d104      	bne.n	9d2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    9d24:	f1b8 0f1b 	cmp.w	r8, #27
    9d28:	d03f      	beq.n	9daa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9d2a:	428c      	cmp	r4, r1
    9d2c:	d03d      	beq.n	9daa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9d2e:	466a      	mov	r2, sp
    9d30:	4651      	mov	r1, sl
    9d32:	4648      	mov	r0, r9
    9d34:	f004 ffd2 	bl	ecdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    9d38:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9d3c:	4641      	mov	r1, r8
    9d3e:	4540      	cmp	r0, r8
    9d40:	d900      	bls.n	9d44 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    9d42:	4608      	mov	r0, r1
    9d44:	80f8      	strh	r0, [r7, #6]
    9d46:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9d4a:	42a1      	cmp	r1, r4
    9d4c:	d800      	bhi.n	9d50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    9d4e:	460c      	mov	r4, r1
    9d50:	813c      	strh	r4, [r7, #8]
    9d52:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9d56:	42b1      	cmp	r1, r6
    9d58:	d800      	bhi.n	9d5c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    9d5a:	460e      	mov	r6, r1
    9d5c:	807e      	strh	r6, [r7, #2]
    9d5e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9d62:	42a9      	cmp	r1, r5
    9d64:	d900      	bls.n	9d68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    9d66:	4629      	mov	r1, r5
    9d68:	80b9      	strh	r1, [r7, #4]
    9d6a:	2201      	movs	r2, #1
    9d6c:	703a      	strb	r2, [r7, #0]
    9d6e:	381b      	subs	r0, #27
    9d70:	28e0      	cmp	r0, #224	; 0xe0
    9d72:	d902      	bls.n	9d7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    9d74:	f640 419b 	movw	r1, #3227	; 0xc9b
    9d78:	e014      	b.n	9da4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9d7a:	3e1b      	subs	r6, #27
    9d7c:	2ee0      	cmp	r6, #224	; 0xe0
    9d7e:	d902      	bls.n	9d86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    9d80:	f640 419d 	movw	r1, #3229	; 0xc9d
    9d84:	e00e      	b.n	9da4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9d86:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    9d8a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    9d8e:	4284      	cmp	r4, r0
    9d90:	d902      	bls.n	9d98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    9d92:	f640 419f 	movw	r1, #3231	; 0xc9f
    9d96:	e005      	b.n	9da4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9d98:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    9d9c:	4281      	cmp	r1, r0
    9d9e:	d904      	bls.n	9daa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9da0:	f640 41a1 	movw	r1, #3233	; 0xca1
    9da4:	2039      	movs	r0, #57	; 0x39
    9da6:	f7f9 feff 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9daa:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dae:	0000      	.short	0x0000
    9db0:	20000210 	.word	0x20000210

00009db4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    9db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9db8:	b088      	sub	sp, #32
    9dba:	460c      	mov	r4, r1
    9dbc:	4606      	mov	r6, r0
    9dbe:	f003 fc4a 	bl	d656 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9dc2:	b198      	cbz	r0, 9dec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    9dc4:	4630      	mov	r0, r6
    9dc6:	f003 fc39 	bl	d63c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9dca:	b130      	cbz	r0, 9dda <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    9dcc:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9dd0:	2012      	movs	r0, #18
    9dd2:	2900      	cmp	r1, #0
    9dd4:	d00b      	beq.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9dd6:	2980      	cmp	r1, #128	; 0x80
    9dd8:	d809      	bhi.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9dda:	4630      	mov	r0, r6
    9ddc:	f003 fc19 	bl	d612 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    9de0:	b140      	cbz	r0, 9df4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9de2:	4630      	mov	r0, r6
    9de4:	f003 fba0 	bl	d528 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    9de8:	b130      	cbz	r0, 9df8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    9dea:	e009      	b.n	9e00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    9dec:	2042      	movs	r0, #66	; 0x42
    9dee:	b008      	add	sp, #32
    9df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9df4:	200c      	movs	r0, #12
    9df6:	e7fa      	b.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9df8:	4630      	mov	r0, r6
    9dfa:	f003 fc19 	bl	d630 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    9dfe:	b3a8      	cbz	r0, 9e6c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    9e00:	4630      	mov	r0, r6
    9e02:	f003 fe2c 	bl	da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9e06:	2800      	cmp	r0, #0
    9e08:	d1f4      	bne.n	9df4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9e0a:	4630      	mov	r0, r6
    9e0c:	f003 fba7 	bl	d55e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    9e10:	2800      	cmp	r0, #0
    9e12:	d1ef      	bne.n	9df4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9e14:	4630      	mov	r0, r6
    9e16:	f7fc f90d 	bl	6034 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    9e1a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9e1e:	f242 7110 	movw	r1, #10000	; 0x2710
    9e22:	fb00 f801 	mul.w	r8, r0, r1
    9e26:	78e1      	ldrb	r1, [r4, #3]
    9e28:	4630      	mov	r0, r6
    9e2a:	f003 fbe9 	bl	d600 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    9e2e:	4630      	mov	r0, r6
    9e30:	f003 fc00 	bl	d634 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9e34:	b1e8      	cbz	r0, 9e72 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    9e36:	2200      	movs	r2, #0
    9e38:	4611      	mov	r1, r2
    9e3a:	a801      	add	r0, sp, #4
    9e3c:	f7fa f92c 	bl	4098 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    9e40:	0004      	movs	r4, r0
    9e42:	d06a      	beq.n	9f1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9e44:	2100      	movs	r1, #0
    9e46:	f7fb fdc1 	bl	59cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9e4a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9e4e:	8020      	strh	r0, [r4, #0]
    9e50:	4621      	mov	r1, r4
    9e52:	4630      	mov	r0, r6
    9e54:	f003 fc12 	bl	d67c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    9e58:	f004 ffbc 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    9e5c:	4d3a      	ldr	r5, [pc, #232]	; (9f48 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    9e5e:	2800      	cmp	r0, #0
    9e60:	f104 0024 	add.w	r0, r4, #36	; 0x24
    9e64:	d00f      	beq.n	9e86 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    9e66:	88aa      	ldrh	r2, [r5, #4]
    9e68:	88e9      	ldrh	r1, [r5, #6]
    9e6a:	e00e      	b.n	9e8a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    9e6c:	e7ff      	b.n	9e6e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    9e6e:	2012      	movs	r0, #18
    9e70:	e7bd      	b.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9e72:	4642      	mov	r2, r8
    9e74:	2100      	movs	r1, #0
    9e76:	4630      	mov	r0, r6
    9e78:	f7fc fffc 	bl	6e74 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9e7c:	2800      	cmp	r0, #0
    9e7e:	d0b6      	beq.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9e80:	f241 31fd 	movw	r1, #5117	; 0x13fd
    9e84:	e053      	b.n	9f2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9e86:	221b      	movs	r2, #27
    9e88:	4611      	mov	r1, r2
    9e8a:	84c2      	strh	r2, [r0, #38]	; 0x26
    9e8c:	8501      	strh	r1, [r0, #40]	; 0x28
    9e8e:	68a8      	ldr	r0, [r5, #8]
    9e90:	6260      	str	r0, [r4, #36]	; 0x24
    9e92:	f641 574c 	movw	r7, #7500	; 0x1d4c
    9e96:	4630      	mov	r0, r6
    9e98:	f003 fbd4 	bl	d644 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    9e9c:	b910      	cbnz	r0, 9ea4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    9e9e:	4630      	mov	r0, r6
    9ea0:	f003 fbea 	bl	d678 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    9ea4:	6067      	str	r7, [r4, #4]
    9ea6:	8821      	ldrh	r1, [r4, #0]
    9ea8:	f8ad 1008 	strh.w	r1, [sp, #8]
    9eac:	7ca9      	ldrb	r1, [r5, #18]
    9eae:	f88d 100a 	strb.w	r1, [sp, #10]
    9eb2:	7ce9      	ldrb	r1, [r5, #19]
    9eb4:	f88d 100b 	strb.w	r1, [sp, #11]
    9eb8:	8aa9      	ldrh	r1, [r5, #20]
    9eba:	f8ad 100c 	strh.w	r1, [sp, #12]
    9ebe:	a905      	add	r1, sp, #20
    9ec0:	9100      	str	r1, [sp, #0]
    9ec2:	2001      	movs	r0, #1
    9ec4:	ab04      	add	r3, sp, #16
    9ec6:	aa02      	add	r2, sp, #8
    9ec8:	4621      	mov	r1, r4
    9eca:	f004 ff44 	bl	ed56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    9ece:	b140      	cbz	r0, 9ee2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    9ed0:	2100      	movs	r1, #0
    9ed2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9ed6:	f7fa f909 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    9eda:	b1f0      	cbz	r0, 9f1a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9edc:	f241 4148 	movw	r1, #5192	; 0x1448
    9ee0:	e025      	b.n	9f2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9ee2:	f89d 0010 	ldrb.w	r0, [sp, #16]
    9ee6:	f88d 0018 	strb.w	r0, [sp, #24]
    9eea:	f89d 0014 	ldrb.w	r0, [sp, #20]
    9eee:	f88d 0019 	strb.w	r0, [sp, #25]
    9ef2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    9ef6:	f8ad 001a 	strh.w	r0, [sp, #26]
    9efa:	a906      	add	r1, sp, #24
    9efc:	4620      	mov	r0, r4
    9efe:	f002 fe58 	bl	cbb2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    9f02:	78e8      	ldrb	r0, [r5, #3]
    9f04:	9000      	str	r0, [sp, #0]
    9f06:	78ab      	ldrb	r3, [r5, #2]
    9f08:	88ea      	ldrh	r2, [r5, #6]
    9f0a:	88a9      	ldrh	r1, [r5, #4]
    9f0c:	8820      	ldrh	r0, [r4, #0]
    9f0e:	f7fa f9b9 	bl	4284 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    9f12:	b120      	cbz	r0, 9f1e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    9f14:	f241 4153 	movw	r1, #5203	; 0x1453
    9f18:	e009      	b.n	9f2e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9f1a:	2009      	movs	r0, #9
    9f1c:	e767      	b.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f1e:	4642      	mov	r2, r8
    9f20:	4621      	mov	r1, r4
    9f22:	4630      	mov	r0, r6
    9f24:	f7fc ffa6 	bl	6e74 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9f28:	b120      	cbz	r0, 9f34 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    9f2a:	f241 4155 	movw	r1, #5205	; 0x1455
    9f2e:	2039      	movs	r0, #57	; 0x39
    9f30:	f7f9 fe3a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f34:	4805      	ldr	r0, [pc, #20]	; (9f4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    9f36:	6843      	ldr	r3, [r0, #4]
    9f38:	b123      	cbz	r3, 9f44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    9f3a:	2200      	movs	r2, #0
    9f3c:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
    9f40:	4620      	mov	r0, r4
    9f42:	4798      	blx	r3
    9f44:	2000      	movs	r0, #0
    9f46:	e752      	b.n	9dee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f48:	200342a0 	.word	0x200342a0
    9f4c:	20000208 	.word	0x20000208
    9f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f54:	b088      	sub	sp, #32
    9f56:	4604      	mov	r4, r0
    9f58:	8800      	ldrh	r0, [r0, #0]
    9f5a:	a906      	add	r1, sp, #24
    9f5c:	f002 fd6a 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9f60:	2800      	cmp	r0, #0
    9f62:	d147      	bne.n	9ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9f64:	9807      	ldr	r0, [sp, #28]
    9f66:	2700      	movs	r7, #0
    9f68:	f890 11e0 	ldrb.w	r1, [r0, #480]	; 0x1e0
    9f6c:	f88d 1008 	strb.w	r1, [sp, #8]
    9f70:	9902      	ldr	r1, [sp, #8]
    9f72:	9102      	str	r1, [sp, #8]
    9f74:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9f78:	f88d 100c 	strb.w	r1, [sp, #12]
    9f7c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    9f80:	3068      	adds	r0, #104	; 0x68
    9f82:	0689      	lsls	r1, r1, #26
    9f84:	d502      	bpl.n	9f8c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    9f86:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9f8a:	b149      	cbz	r1, 9fa0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    9f8c:	f05f 0100 	movs.w	r1, #0
    9f90:	f88d 1004 	strb.w	r1, [sp, #4]
    9f94:	2105      	movs	r1, #5
    9f96:	304c      	adds	r0, #76	; 0x4c
    9f98:	f004 f868 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    9f9c:	b110      	cbz	r0, 9fa4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    9f9e:	e004      	b.n	9faa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    9fa0:	2101      	movs	r1, #1
    9fa2:	e7f5      	b.n	9f90 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    9fa4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9fa8:	b318      	cbz	r0, 9ff2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    9faa:	8921      	ldrh	r1, [r4, #8]
    9fac:	88e0      	ldrh	r0, [r4, #6]
    9fae:	f004 fe87 	bl	ecc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    9fb2:	2800      	cmp	r0, #0
    9fb4:	d11e      	bne.n	9ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fb6:	88a1      	ldrh	r1, [r4, #4]
    9fb8:	8860      	ldrh	r0, [r4, #2]
    9fba:	f004 fe81 	bl	ecc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    9fbe:	2800      	cmp	r0, #0
    9fc0:	d118      	bne.n	9ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fc2:	8921      	ldrh	r1, [r4, #8]
    9fc4:	88e0      	ldrh	r0, [r4, #6]
    9fc6:	f004 fe71 	bl	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    9fca:	2800      	cmp	r0, #0
    9fcc:	d112      	bne.n	9ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fce:	88a1      	ldrh	r1, [r4, #4]
    9fd0:	8860      	ldrh	r0, [r4, #2]
    9fd2:	f004 fe6b 	bl	ecac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    9fd6:	0006      	movs	r6, r0
    9fd8:	d10c      	bne.n	9ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    9fda:	9807      	ldr	r0, [sp, #28]
    9fdc:	f04f 0801 	mov.w	r8, #1
    9fe0:	f500 75ce 	add.w	r5, r0, #412	; 0x19c
    9fe4:	f880 819d 	strb.w	r8, [r0, #413]	; 0x19d
    9fe8:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9fec:	b129      	cbz	r1, 9ffa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    9fee:	263a      	movs	r6, #58	; 0x3a
    9ff0:	e02f      	b.n	a052 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    9ff2:	201a      	movs	r0, #26
    9ff4:	b008      	add	sp, #32
    9ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ffa:	4639      	mov	r1, r7
    9ffc:	aa03      	add	r2, sp, #12
    9ffe:	f004 fe6d 	bl	ecdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    a002:	8861      	ldrh	r1, [r4, #2]
    a004:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a008:	4281      	cmp	r1, r0
    a00a:	d200      	bcs.n	a00e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a00c:	4608      	mov	r0, r1
    a00e:	80e8      	strh	r0, [r5, #6]
    a010:	88a1      	ldrh	r1, [r4, #4]
    a012:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a016:	4281      	cmp	r1, r0
    a018:	d200      	bcs.n	a01c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a01a:	4608      	mov	r0, r1
    a01c:	8128      	strh	r0, [r5, #8]
    a01e:	88e2      	ldrh	r2, [r4, #6]
    a020:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a024:	428a      	cmp	r2, r1
    a026:	d200      	bcs.n	a02a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a028:	4611      	mov	r1, r2
    a02a:	8069      	strh	r1, [r5, #2]
    a02c:	8922      	ldrh	r2, [r4, #8]
    a02e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a032:	428a      	cmp	r2, r1
    a034:	d200      	bcs.n	a038 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a036:	4611      	mov	r1, r2
    a038:	f640 0248 	movw	r2, #2120	; 0x848
    a03c:	80a9      	strh	r1, [r5, #4]
    a03e:	4291      	cmp	r1, r2
    a040:	d300      	bcc.n	a044 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a042:	4611      	mov	r1, r2
    a044:	80a9      	strh	r1, [r5, #4]
    a046:	4290      	cmp	r0, r2
    a048:	d200      	bcs.n	a04c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a04a:	4602      	mov	r2, r0
    a04c:	812a      	strh	r2, [r5, #8]
    a04e:	f885 8000 	strb.w	r8, [r5]
    a052:	706f      	strb	r7, [r5, #1]
    a054:	4630      	mov	r0, r6
    a056:	e7cd      	b.n	9ff4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a058:	b510      	push	{r4, lr}
    a05a:	4604      	mov	r4, r0
    a05c:	88c1      	ldrh	r1, [r0, #6]
    a05e:	8880      	ldrh	r0, [r0, #4]
    a060:	f004 fe2e 	bl	ecc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a064:	2800      	cmp	r0, #0
    a066:	d10f      	bne.n	a088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a068:	8861      	ldrh	r1, [r4, #2]
    a06a:	8820      	ldrh	r0, [r4, #0]
    a06c:	f004 fe28 	bl	ecc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    a070:	2800      	cmp	r0, #0
    a072:	d109      	bne.n	a088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a074:	4805      	ldr	r0, [pc, #20]	; (a08c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a076:	88a1      	ldrh	r1, [r4, #4]
    a078:	8081      	strh	r1, [r0, #4]
    a07a:	8821      	ldrh	r1, [r4, #0]
    a07c:	8001      	strh	r1, [r0, #0]
    a07e:	88e1      	ldrh	r1, [r4, #6]
    a080:	80c1      	strh	r1, [r0, #6]
    a082:	8861      	ldrh	r1, [r4, #2]
    a084:	8041      	strh	r1, [r0, #2]
    a086:	2000      	movs	r0, #0
    a088:	bd10      	pop	{r4, pc}
    a08a:	0000      	.short	0x0000
    a08c:	20000210 	.word	0x20000210
    a090:	0b125b0b 	.word	0x0b125b0b
    a094:	125b0059 	.word	0x125b0059
    a098:	05060708 	.word	0x05060708
    a09c:	00020304 	.word	0x00020304
    a0a0:	f0f4f8fc 	.word	0xf0f4f8fc
    a0a4:	0304d8ec 	.word	0x0304d8ec
    a0a8:	f4f8fc00 	.word	0xf4f8fc00
    a0ac:	00d8ecf0 	.word	0x00d8ecf0

0000a0b0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a0b0:	b510      	push	{r4, lr}
    a0b2:	f7ff fccf 	bl	9a54 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a0b6:	4804      	ldr	r0, [pc, #16]	; (a0c8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a0b8:	6840      	ldr	r0, [r0, #4]
    a0ba:	f004 ff5e 	bl	ef7a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0c2:	f004 bc8f 	b.w	e9e4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a0c6:	0000      	.short	0x0000
    a0c8:	20000218 	.word	0x20000218

0000a0cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a0cc:	b510      	push	{r4, lr}
    a0ce:	4c07      	ldr	r4, [pc, #28]	; (a0ec <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a0d0:	68a0      	ldr	r0, [r4, #8]
    a0d2:	f004 ff52 	bl	ef7a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a0d6:	68e0      	ldr	r0, [r4, #12]
    a0d8:	f004 ff4f 	bl	ef7a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a0dc:	f002 fbfe 	bl	c8dc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a0e0:	f7fb fa0e 	bl	5500 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a0e8:	f7ff bdb0 	b.w	9c4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a0ec:	20000218 	.word	0x20000218

0000a0f0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a0f0:	b500      	push	{lr}
    a0f2:	4905      	ldr	r1, [pc, #20]	; (a108 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a0f4:	4805      	ldr	r0, [pc, #20]	; (a10c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a0f6:	f004 ff21 	bl	ef3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a0fa:	4804      	ldr	r0, [pc, #16]	; (a10c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a0fc:	4904      	ldr	r1, [pc, #16]	; (a110 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a0fe:	1d00      	adds	r0, r0, #4
    a100:	f85d eb04 	ldr.w	lr, [sp], #4
    a104:	f004 bf1a 	b.w	ef3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a108:	20000228 	.word	0x20000228
    a10c:	2000021c 	.word	0x2000021c
    a110:	20000230 	.word	0x20000230

0000a114 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a114:	b500      	push	{lr}
    a116:	4908      	ldr	r1, [pc, #32]	; (a138 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a118:	4808      	ldr	r0, [pc, #32]	; (a13c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a11a:	f004 ff0f 	bl	ef3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a11e:	4807      	ldr	r0, [pc, #28]	; (a13c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a120:	4907      	ldr	r1, [pc, #28]	; (a140 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a122:	1d00      	adds	r0, r0, #4
    a124:	f004 ff0a 	bl	ef3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a128:	4804      	ldr	r0, [pc, #16]	; (a13c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a12a:	4906      	ldr	r1, [pc, #24]	; (a144 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a12c:	3008      	adds	r0, #8
    a12e:	f85d eb04 	ldr.w	lr, [sp], #4
    a132:	f004 bf03 	b.w	ef3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a136:	0000      	.short	0x0000
    a138:	20000254 	.word	0x20000254
    a13c:	2000021c 	.word	0x2000021c
    a140:	2000025c 	.word	0x2000025c
    a144:	2000024c 	.word	0x2000024c

0000a148 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a148:	4801      	ldr	r0, [pc, #4]	; (a150 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a14a:	7800      	ldrb	r0, [r0, #0]
    a14c:	4770      	bx	lr
    a14e:	0000      	.short	0x0000
    a150:	20000218 	.word	0x20000218
    a154:	b510      	push	{r4, lr}
    a156:	f7fc f8e3 	bl	6320 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a15a:	f7fc ff23 	bl	6fa4 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a15e:	4805      	ldr	r0, [pc, #20]	; (a174 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    a160:	f7fc f8c4 	bl	62ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a164:	4905      	ldr	r1, [pc, #20]	; (a17c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    a166:	4804      	ldr	r0, [pc, #16]	; (a178 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    a168:	6008      	str	r0, [r1, #0]
    a16a:	4906      	ldr	r1, [pc, #24]	; (a184 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    a16c:	4804      	ldr	r0, [pc, #16]	; (a180 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    a16e:	6008      	str	r0, [r1, #0]
    a170:	bd10      	pop	{r4, pc}
    a172:	0000      	.short	0x0000
    a174:	2003466b 	.word	0x2003466b
    a178:	000060f5 	.word	0x000060f5
    a17c:	20000238 	.word	0x20000238
    a180:	00005c99 	.word	0x00005c99
    a184:	2000023c 	.word	0x2000023c
    a188:	490c      	ldr	r1, [pc, #48]	; (a1bc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    a18a:	b510      	push	{r4, lr}
    a18c:	2001      	movs	r0, #1
    a18e:	7008      	strb	r0, [r1, #0]
    a190:	f7fc f8f6 	bl	6380 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a194:	f7fd fd5e 	bl	7c54 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a198:	f002 fb8e 	bl	c8b8 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a19c:	4808      	ldr	r0, [pc, #32]	; (a1c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    a19e:	f7fa fc3d 	bl	4a1c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a1a2:	2000      	movs	r0, #0
    a1a4:	f7f9 feea 	bl	3f7c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a1a8:	4907      	ldr	r1, [pc, #28]	; (a1c8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    a1aa:	4806      	ldr	r0, [pc, #24]	; (a1c4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    a1ac:	6008      	str	r0, [r1, #0]
    a1ae:	4908      	ldr	r1, [pc, #32]	; (a1d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    a1b0:	4806      	ldr	r0, [pc, #24]	; (a1cc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    a1b2:	6008      	str	r0, [r1, #0]
    a1b4:	4908      	ldr	r1, [pc, #32]	; (a1d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    a1b6:	4807      	ldr	r0, [pc, #28]	; (a1d4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    a1b8:	6008      	str	r0, [r1, #0]
    a1ba:	bd10      	pop	{r4, pc}
    a1bc:	20000218 	.word	0x20000218
    a1c0:	2003466b 	.word	0x2003466b
    a1c4:	000049c9 	.word	0x000049c9
    a1c8:	20000248 	.word	0x20000248
    a1cc:	000079d5 	.word	0x000079d5
    a1d0:	20000244 	.word	0x20000244
    a1d4:	00005d0d 	.word	0x00005d0d
    a1d8:	20000240 	.word	0x20000240

0000a1dc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a1dc:	2101      	movs	r1, #1
    a1de:	4081      	lsls	r1, r0
    a1e0:	4802      	ldr	r0, [pc, #8]	; (a1ec <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a1e2:	6802      	ldr	r2, [r0, #0]
    a1e4:	4311      	orrs	r1, r2
    a1e6:	6001      	str	r1, [r0, #0]
    a1e8:	4770      	bx	lr
    a1ea:	0000      	.short	0x0000
    a1ec:	20000264 	.word	0x20000264

0000a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a1f0:	4801      	ldr	r0, [pc, #4]	; (a1f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a1f2:	6800      	ldr	r0, [r0, #0]
    a1f4:	4770      	bx	lr
    a1f6:	0000      	.short	0x0000
    a1f8:	20000264 	.word	0x20000264

0000a1fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a1fc:	4803      	ldr	r0, [pc, #12]	; (a20c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a1fe:	8800      	ldrh	r0, [r0, #0]
    a200:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a204:	0040      	lsls	r0, r0, #1
    a206:	1c40      	adds	r0, r0, #1
    a208:	4770      	bx	lr
    a20a:	0000      	.short	0x0000
    a20c:	20000264 	.word	0x20000264

0000a210 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a210:	b570      	push	{r4, r5, r6, lr}
    a212:	4605      	mov	r5, r0
    a214:	4616      	mov	r6, r2
    a216:	460c      	mov	r4, r1
    a218:	2002      	movs	r0, #2
    a21a:	f000 f999 	bl	a550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a21e:	4906      	ldr	r1, [pc, #24]	; (a238 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a220:	2001      	movs	r0, #1
    a222:	1ef6      	subs	r6, r6, #3
    a224:	7008      	strb	r0, [r1, #0]
    a226:	4805      	ldr	r0, [pc, #20]	; (a23c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a228:	6006      	str	r6, [r0, #0]
    a22a:	4804      	ldr	r0, [pc, #16]	; (a23c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a22c:	3808      	subs	r0, #8
    a22e:	6005      	str	r5, [r0, #0]
    a230:	1f00      	subs	r0, r0, #4
    a232:	6004      	str	r4, [r0, #0]
    a234:	bd70      	pop	{r4, r5, r6, pc}
    a236:	0000      	.short	0x0000
    a238:	200002ac 	.word	0x200002ac
    a23c:	4000f510 	.word	0x4000f510

0000a240 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a240:	b510      	push	{r4, lr}
    a242:	4c0c      	ldr	r4, [pc, #48]	; (a274 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a244:	7820      	ldrb	r0, [r4, #0]
    a246:	b180      	cbz	r0, a26a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a248:	490b      	ldr	r1, [pc, #44]	; (a278 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a24a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a24e:	6008      	str	r0, [r1, #0]
    a250:	f000 f86a 	bl	a328 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a254:	2100      	movs	r1, #0
    a256:	b120      	cbz	r0, a262 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a258:	2001      	movs	r0, #1
    a25a:	7060      	strb	r0, [r4, #1]
    a25c:	4807      	ldr	r0, [pc, #28]	; (a27c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a25e:	6800      	ldr	r0, [r0, #0]
    a260:	e001      	b.n	a266 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a262:	7061      	strb	r1, [r4, #1]
    a264:	2010      	movs	r0, #16
    a266:	70a0      	strb	r0, [r4, #2]
    a268:	7021      	strb	r1, [r4, #0]
    a26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a26e:	2000      	movs	r0, #0
    a270:	f000 b96e 	b.w	a550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a274:	200002ac 	.word	0x200002ac
    a278:	4001f508 	.word	0x4001f508
    a27c:	4000f400 	.word	0x4000f400

0000a280 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a280:	b510      	push	{r4, lr}
    a282:	2002      	movs	r0, #2
    a284:	f000 f964 	bl	a550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a288:	4904      	ldr	r1, [pc, #16]	; (a29c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a28a:	2001      	movs	r0, #1
    a28c:	7008      	strb	r0, [r1, #0]
    a28e:	f000 f859 	bl	a344 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a292:	4903      	ldr	r1, [pc, #12]	; (a2a0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a294:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a298:	6008      	str	r0, [r1, #0]
    a29a:	bd10      	pop	{r4, pc}
    a29c:	200002ac 	.word	0x200002ac
    a2a0:	4001f504 	.word	0x4001f504

0000a2a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a2a4:	4803      	ldr	r0, [pc, #12]	; (a2b4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a2a6:	2100      	movs	r1, #0
    a2a8:	7001      	strb	r1, [r0, #0]
    a2aa:	7041      	strb	r1, [r0, #1]
    a2ac:	2110      	movs	r1, #16
    a2ae:	7081      	strb	r1, [r0, #2]
    a2b0:	4770      	bx	lr
    a2b2:	0000      	.short	0x0000
    a2b4:	200002ac 	.word	0x200002ac

0000a2b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a2b8:	4807      	ldr	r0, [pc, #28]	; (a2d8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a2ba:	b510      	push	{r4, lr}
    a2bc:	7801      	ldrb	r1, [r0, #0]
    a2be:	b141      	cbz	r1, a2d2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a2c0:	f000 f832 	bl	a328 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a2c4:	b118      	cbz	r0, a2ce <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a2c6:	4805      	ldr	r0, [pc, #20]	; (a2dc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a2c8:	6800      	ldr	r0, [r0, #0]
    a2ca:	b2c0      	uxtb	r0, r0
    a2cc:	bd10      	pop	{r4, pc}
    a2ce:	2010      	movs	r0, #16
    a2d0:	bd10      	pop	{r4, pc}
    a2d2:	7880      	ldrb	r0, [r0, #2]
    a2d4:	bd10      	pop	{r4, pc}
    a2d6:	0000      	.short	0x0000
    a2d8:	200002ac 	.word	0x200002ac
    a2dc:	4000f400 	.word	0x4000f400

0000a2e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a2e0:	4808      	ldr	r0, [pc, #32]	; (a304 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a2e2:	b510      	push	{r4, lr}
    a2e4:	7801      	ldrb	r1, [r0, #0]
    a2e6:	b159      	cbz	r1, a300 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a2e8:	4807      	ldr	r0, [pc, #28]	; (a308 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a2ea:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a2ee:	b128      	cbz	r0, a2fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a2f0:	f000 f80c 	bl	a30c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a2f4:	2800      	cmp	r0, #0
    a2f6:	d000      	beq.n	a2fa <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a2f8:	2001      	movs	r0, #1
    a2fa:	bd10      	pop	{r4, pc}
    a2fc:	2002      	movs	r0, #2
    a2fe:	bd10      	pop	{r4, pc}
    a300:	7840      	ldrb	r0, [r0, #1]
    a302:	bd10      	pop	{r4, pc}
    a304:	200002ac 	.word	0x200002ac
    a308:	4000f000 	.word	0x4000f000
    a30c:	4805      	ldr	r0, [pc, #20]	; (a324 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a30e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a312:	b111      	cbz	r1, a31a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a314:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a318:	b108      	cbz	r0, a31e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a31a:	2000      	movs	r0, #0
    a31c:	4770      	bx	lr
    a31e:	2001      	movs	r0, #1
    a320:	4770      	bx	lr
    a322:	0000      	.short	0x0000
    a324:	4000f000 	.word	0x4000f000
    a328:	4805      	ldr	r0, [pc, #20]	; (a340 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a32a:	b510      	push	{r4, lr}
    a32c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a330:	b120      	cbz	r0, a33c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a332:	f7ff ffeb 	bl	a30c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a336:	b108      	cbz	r0, a33c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a338:	2001      	movs	r0, #1
    a33a:	bd10      	pop	{r4, pc}
    a33c:	2000      	movs	r0, #0
    a33e:	bd10      	pop	{r4, pc}
    a340:	4000f000 	.word	0x4000f000
    a344:	4804      	ldr	r0, [pc, #16]	; (a358 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a346:	2100      	movs	r1, #0
    a348:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a34c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a350:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a354:	4770      	bx	lr
    a356:	0000      	.short	0x0000
    a358:	4000f000 	.word	0x4000f000

0000a35c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a35c:	4a08      	ldr	r2, [pc, #32]	; (a380 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a35e:	b510      	push	{r4, lr}
    a360:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a364:	4907      	ldr	r1, [pc, #28]	; (a384 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a366:	4610      	mov	r0, r2
    a368:	f7f9 fb04 	bl	3974 <mpsl_fem_lna_configuration_set>
    a36c:	2800      	cmp	r0, #0
    a36e:	d005      	beq.n	a37c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a370:	1c40      	adds	r0, r0, #1
    a372:	d003      	beq.n	a37c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a374:	217d      	movs	r1, #125	; 0x7d
    a376:	2040      	movs	r0, #64	; 0x40
    a378:	f7f9 fc16 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a37c:	bd10      	pop	{r4, pc}
    a37e:	0000      	.short	0x0000
    a380:	20000268 	.word	0x20000268
    a384:	0000a3b4 	.word	0x0000a3b4

0000a388 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a388:	4a08      	ldr	r2, [pc, #32]	; (a3ac <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a38a:	b510      	push	{r4, lr}
    a38c:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a390:	4907      	ldr	r1, [pc, #28]	; (a3b0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a392:	4610      	mov	r0, r2
    a394:	f7f9 fafa 	bl	398c <mpsl_fem_pa_configuration_set>
    a398:	2800      	cmp	r0, #0
    a39a:	d005      	beq.n	a3a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a39c:	1c40      	adds	r0, r0, #1
    a39e:	d003      	beq.n	a3a8 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a3a0:	2172      	movs	r1, #114	; 0x72
    a3a2:	2040      	movs	r0, #64	; 0x40
    a3a4:	f7f9 fc00 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3a8:	bd10      	pop	{r4, pc}
    a3aa:	0000      	.short	0x0000
    a3ac:	20000268 	.word	0x20000268
    a3b0:	0000a3b4 	.word	0x0000a3b4
    a3b4:	00000001 	.word	0x00000001
    a3b8:	40001110 	.word	0x40001110
	...

0000a3cc <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ>:
    a3cc:	b570      	push	{r4, r5, r6, lr}
    a3ce:	4606      	mov	r6, r0
    a3d0:	4614      	mov	r4, r2
    a3d2:	460d      	mov	r5, r1
    a3d4:	2001      	movs	r0, #1
    a3d6:	f000 f8bb 	bl	a550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3da:	4803      	ldr	r0, [pc, #12]	; (a3e8 <sym_2A6IJT7MGQ7OBCRC2X2OJJKRLO2X7VBUN6GSTWQ+0x1c>)
    a3dc:	6006      	str	r6, [r0, #0]
    a3de:	1d00      	adds	r0, r0, #4
    a3e0:	6004      	str	r4, [r0, #0]
    a3e2:	1d00      	adds	r0, r0, #4
    a3e4:	6005      	str	r5, [r0, #0]
    a3e6:	bd70      	pop	{r4, r5, r6, pc}
    a3e8:	4000f508 	.word	0x4000f508

0000a3ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a3ec:	480a      	ldr	r0, [pc, #40]	; (a418 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x2c>)
    a3ee:	7801      	ldrb	r1, [r0, #0]
    a3f0:	b171      	cbz	r1, a410 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x24>
    a3f2:	4a0a      	ldr	r2, [pc, #40]	; (a41c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a3f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    a3f8:	6011      	str	r1, [r2, #0]
    a3fa:	4909      	ldr	r1, [pc, #36]	; (a420 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a3fc:	f8d1 2104 	ldr.w	r2, [r1, #260]	; 0x104
    a400:	2100      	movs	r1, #0
    a402:	b11a      	cbz	r2, a40c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a404:	4a07      	ldr	r2, [pc, #28]	; (a424 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a406:	6812      	ldr	r2, [r2, #0]
    a408:	7042      	strb	r2, [r0, #1]
    a40a:	e000      	b.n	a40e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a40c:	7041      	strb	r1, [r0, #1]
    a40e:	7001      	strb	r1, [r0, #0]
    a410:	2000      	movs	r0, #0
    a412:	f000 b89d 	b.w	a550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a416:	0000      	.short	0x0000
    a418:	200002af 	.word	0x200002af
    a41c:	4001f508 	.word	0x4001f508
    a420:	4000f000 	.word	0x4000f000
    a424:	4000f400 	.word	0x4000f400

0000a428 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A>:
    a428:	b570      	push	{r4, r5, r6, lr}
    a42a:	4604      	mov	r4, r0
    a42c:	4816      	ldr	r0, [pc, #88]	; (a488 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x60>)
    a42e:	460e      	mov	r6, r1
    a430:	2501      	movs	r5, #1
    a432:	7005      	strb	r5, [r0, #0]
    a434:	4915      	ldr	r1, [pc, #84]	; (a48c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a436:	ea44 4002 	orr.w	r0, r4, r2, lsl #16
    a43a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a43e:	6008      	str	r0, [r1, #0]
    a440:	f001 f975 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a444:	b930      	cbnz	r0, a454 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x2c>
    a446:	4811      	ldr	r0, [pc, #68]	; (a48c <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x64>)
    a448:	3014      	adds	r0, #20
    a44a:	6801      	ldr	r1, [r0, #0]
    a44c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a450:	4331      	orrs	r1, r6
    a452:	6001      	str	r1, [r0, #0]
    a454:	490e      	ldr	r1, [pc, #56]	; (a490 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x68>)
    a456:	2200      	movs	r2, #0
    a458:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
    a45c:	4b0d      	ldr	r3, [pc, #52]	; (a494 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a45e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a462:	6018      	str	r0, [r3, #0]
    a464:	b12c      	cbz	r4, a472 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x4a>
    a466:	2c01      	cmp	r4, #1
    a468:	d007      	beq.n	a47a <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x52>
    a46a:	2185      	movs	r1, #133	; 0x85
    a46c:	203c      	movs	r0, #60	; 0x3c
    a46e:	f7f9 fb9b 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a472:	f8c1 5200 	str.w	r5, [r1, #512]	; 0x200
    a476:	600d      	str	r5, [r1, #0]
    a478:	bd70      	pop	{r4, r5, r6, pc}
    a47a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    a47e:	600d      	str	r5, [r1, #0]
    a480:	4904      	ldr	r1, [pc, #16]	; (a494 <sym_MPTBOXO4GVXS22JWYRRCOISMJOLOXU4T7IUQ45A+0x6c>)
    a482:	1f09      	subs	r1, r1, #4
    a484:	6008      	str	r0, [r1, #0]
    a486:	bd70      	pop	{r4, r5, r6, pc}
    a488:	200002af 	.word	0x200002af
    a48c:	4000f504 	.word	0x4000f504
    a490:	4000f000 	.word	0x4000f000
    a494:	4001f508 	.word	0x4001f508

0000a498 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a498:	4802      	ldr	r0, [pc, #8]	; (a4a4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    a49a:	2100      	movs	r1, #0
    a49c:	7001      	strb	r1, [r0, #0]
    a49e:	7041      	strb	r1, [r0, #1]
    a4a0:	4770      	bx	lr
    a4a2:	0000      	.short	0x0000
    a4a4:	200002af 	.word	0x200002af

0000a4a8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a4a8:	4806      	ldr	r0, [pc, #24]	; (a4c4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a4aa:	7801      	ldrb	r1, [r0, #0]
    a4ac:	b141      	cbz	r1, a4c0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a4ae:	4806      	ldr	r0, [pc, #24]	; (a4c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a4b0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a4b4:	2800      	cmp	r0, #0
    a4b6:	d002      	beq.n	a4be <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a4b8:	4804      	ldr	r0, [pc, #16]	; (a4cc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a4ba:	6800      	ldr	r0, [r0, #0]
    a4bc:	b2c0      	uxtb	r0, r0
    a4be:	4770      	bx	lr
    a4c0:	7840      	ldrb	r0, [r0, #1]
    a4c2:	4770      	bx	lr
    a4c4:	200002af 	.word	0x200002af
    a4c8:	4000f000 	.word	0x4000f000
    a4cc:	4000f400 	.word	0x4000f400

0000a4d0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a4d0:	4901      	ldr	r1, [pc, #4]	; (a4d8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a4d2:	2001      	movs	r0, #1
    a4d4:	6088      	str	r0, [r1, #8]
    a4d6:	4770      	bx	lr
    a4d8:	4000f000 	.word	0x4000f000

0000a4dc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a4e0:	2800      	cmp	r0, #0
    a4e2:	d02c      	beq.n	a53e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a4e4:	4817      	ldr	r0, [pc, #92]	; (a544 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x68>)
    a4e6:	7800      	ldrb	r0, [r0, #0]
    a4e8:	b1b0      	cbz	r0, a518 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a4ea:	4d17      	ldr	r5, [pc, #92]	; (a548 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a4ec:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a4f0:	2800      	cmp	r0, #0
    a4f2:	d124      	bne.n	a53e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a4f4:	2702      	movs	r7, #2
    a4f6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a4fa:	4c14      	ldr	r4, [pc, #80]	; (a54c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a4fc:	6820      	ldr	r0, [r4, #0]
    a4fe:	43c0      	mvns	r0, r0
    a500:	f340 1600 	sbfx	r6, r0, #4, #1
    a504:	6820      	ldr	r0, [r4, #0]
    a506:	f040 0010 	orr.w	r0, r0, #16
    a50a:	6020      	str	r0, [r4, #0]
    a50c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a510:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a514:	1c76      	adds	r6, r6, #1
    a516:	e007      	b.n	a528 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    a518:	21fd      	movs	r1, #253	; 0xfd
    a51a:	203c      	movs	r0, #60	; 0x3c
    a51c:	f7f9 fb44 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a520:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a524:	f7f9 f9d0 	bl	38c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a528:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a52c:	2800      	cmp	r0, #0
    a52e:	d0f7      	beq.n	a520 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x44>
    a530:	b91e      	cbnz	r6, a53a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x5e>
    a532:	6820      	ldr	r0, [r4, #0]
    a534:	f020 0010 	bic.w	r0, r0, #16
    a538:	6020      	str	r0, [r4, #0]
    a53a:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a542:	0000      	.short	0x0000
    a544:	200002af 	.word	0x200002af
    a548:	4000f000 	.word	0x4000f000
    a54c:	e000ed10 	.word	0xe000ed10

0000a550 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a550:	b510      	push	{r4, lr}
    a552:	4604      	mov	r4, r0
    a554:	f000 f822 	bl	a59c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a558:	2c00      	cmp	r4, #0
    a55a:	d017      	beq.n	a58c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a55c:	4a0c      	ldr	r2, [pc, #48]	; (a590 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a55e:	480c      	ldr	r0, [pc, #48]	; (a590 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a560:	490c      	ldr	r1, [pc, #48]	; (a594 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a562:	3214      	adds	r2, #20
    a564:	4b0c      	ldr	r3, [pc, #48]	; (a598 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a566:	2c01      	cmp	r4, #1
    a568:	d005      	beq.n	a576 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a56a:	2c02      	cmp	r4, #2
    a56c:	d008      	beq.n	a580 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a56e:	217d      	movs	r1, #125	; 0x7d
    a570:	203d      	movs	r0, #61	; 0x3d
    a572:	f7f9 fb19 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a576:	2402      	movs	r4, #2
    a578:	6004      	str	r4, [r0, #0]
    a57a:	6011      	str	r1, [r2, #0]
    a57c:	0620      	lsls	r0, r4, #24
    a57e:	e004      	b.n	a58a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a580:	2403      	movs	r4, #3
    a582:	6004      	str	r4, [r0, #0]
    a584:	6011      	str	r1, [r2, #0]
    a586:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a58a:	6018      	str	r0, [r3, #0]
    a58c:	bd10      	pop	{r4, pc}
    a58e:	0000      	.short	0x0000
    a590:	4000f500 	.word	0x4000f500
    a594:	2003476d 	.word	0x2003476d
    a598:	4001f504 	.word	0x4001f504
    a59c:	4804      	ldr	r0, [pc, #16]	; (a5b0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a59e:	2100      	movs	r1, #0
    a5a0:	6001      	str	r1, [r0, #0]
    a5a2:	6001      	str	r1, [r0, #0]
    a5a4:	4903      	ldr	r1, [pc, #12]	; (a5b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a5a6:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a5aa:	6008      	str	r0, [r1, #0]
    a5ac:	4770      	bx	lr
    a5ae:	0000      	.short	0x0000
    a5b0:	4000f500 	.word	0x4000f500
    a5b4:	4001f508 	.word	0x4001f508

0000a5b8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a5b8:	4805      	ldr	r0, [pc, #20]	; (a5d0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a5ba:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a5be:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a5c2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a5c6:	4903      	ldr	r1, [pc, #12]	; (a5d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a5c8:	2000      	movs	r0, #0
    a5ca:	6008      	str	r0, [r1, #0]
    a5cc:	4770      	bx	lr
    a5ce:	0000      	.short	0x0000
    a5d0:	40001000 	.word	0x40001000
    a5d4:	40001560 	.word	0x40001560

0000a5d8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a5d8:	4904      	ldr	r1, [pc, #16]	; (a5ec <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a5da:	6008      	str	r0, [r1, #0]
    a5dc:	4804      	ldr	r0, [pc, #16]	; (a5f0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a5de:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a5e2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a5e6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a5ea:	4770      	bx	lr
    a5ec:	40001560 	.word	0x40001560
    a5f0:	40001000 	.word	0x40001000

0000a5f4 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a5f4:	4801      	ldr	r0, [pc, #4]	; (a5fc <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a5f6:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a5fa:	4770      	bx	lr
    a5fc:	200342dc 	.word	0x200342dc

0000a600 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y>:
    a600:	4a01      	ldr	r2, [pc, #4]	; (a608 <sym_ZBDJ2Y5I72NG5GLPCDB32P7JVZVIRY3EZS6BW2Y+0x8>)
    a602:	7051      	strb	r1, [r2, #1]
    a604:	7010      	strb	r0, [r2, #0]
    a606:	4770      	bx	lr
    a608:	200342dc 	.word	0x200342dc

0000a60c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a60e:	4c1e      	ldr	r4, [pc, #120]	; (a688 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    a610:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a614:	2710      	movs	r7, #16
    a616:	f3c0 1600 	ubfx	r6, r0, #4, #1
    a61a:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    a61e:	2002      	movs	r0, #2
    a620:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a624:	4819      	ldr	r0, [pc, #100]	; (a68c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    a626:	2500      	movs	r5, #0
    a628:	491a      	ldr	r1, [pc, #104]	; (a694 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    a62a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    a62e:	4818      	ldr	r0, [pc, #96]	; (a690 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    a630:	6008      	str	r0, [r1, #0]
    a632:	4819      	ldr	r0, [pc, #100]	; (a698 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    a634:	6800      	ldr	r0, [r0, #0]
    a636:	b1b0      	cbz	r0, a666 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a638:	20ff      	movs	r0, #255	; 0xff
    a63a:	f88d 0000 	strb.w	r0, [sp]
    a63e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a642:	2001      	movs	r0, #1
    a644:	6120      	str	r0, [r4, #16]
    a646:	e004      	b.n	a652 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    a648:	f89d 0000 	ldrb.w	r0, [sp]
    a64c:	1e40      	subs	r0, r0, #1
    a64e:	f88d 0000 	strb.w	r0, [sp]
    a652:	f89d 0000 	ldrb.w	r0, [sp]
    a656:	b118      	cbz	r0, a660 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    a658:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    a65c:	2800      	cmp	r0, #0
    a65e:	d0f3      	beq.n	a648 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    a660:	f89d 0000 	ldrb.w	r0, [sp]
    a664:	b150      	cbz	r0, a67c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    a666:	f000 fd07 	bl	b078 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    a66a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a66e:	f000 fe9f 	bl	b3b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    a672:	2e00      	cmp	r6, #0
    a674:	d001      	beq.n	a67a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a676:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a67c:	f240 71c3 	movw	r1, #1987	; 0x7c3
    a680:	203e      	movs	r0, #62	; 0x3e
    a682:	f7f9 fa91 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a686:	0000      	.short	0x0000
    a688:	40001000 	.word	0x40001000
    a68c:	200342dc 	.word	0x200342dc
    a690:	0c0e0000 	.word	0x0c0e0000
    a694:	4001f508 	.word	0x4001f508
    a698:	40001550 	.word	0x40001550

0000a69c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6a0:	4c1f      	ldr	r4, [pc, #124]	; (a720 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    a6a2:	4607      	mov	r7, r0
    a6a4:	4688      	mov	r8, r1
    a6a6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a6aa:	07c1      	lsls	r1, r0, #31
    a6ac:	d018      	beq.n	a6e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a6ae:	4a1d      	ldr	r2, [pc, #116]	; (a724 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a6b0:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a6b4:	6011      	str	r1, [r2, #0]
    a6b6:	4d1c      	ldr	r5, [pc, #112]	; (a728 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a6b8:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    a6bc:	f041 0101 	orr.w	r1, r1, #1
    a6c0:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    a6c4:	f040 0002 	orr.w	r0, r0, #2
    a6c8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a6cc:	4640      	mov	r0, r8
    a6ce:	f000 fed5 	bl	b47c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a6d2:	f000 fc7f 	bl	afd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a6d6:	2601      	movs	r6, #1
    a6d8:	b13f      	cbz	r7, a6ea <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a6da:	2f01      	cmp	r7, #1
    a6dc:	d00e      	beq.n	a6fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a6de:	e016      	b.n	a70e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a6e0:	f240 6155 	movw	r1, #1621	; 0x655
    a6e4:	203e      	movs	r0, #62	; 0x3e
    a6e6:	f7f9 fa5f 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6ea:	4640      	mov	r0, r8
    a6ec:	f000 fc92 	bl	b014 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a6f0:	4640      	mov	r0, r8
    a6f2:	f000 fc53 	bl	af9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a6f6:	72e6      	strb	r6, [r4, #11]
    a6f8:	602e      	str	r6, [r5, #0]
    a6fa:	e008      	b.n	a70e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a6fc:	f000 fcb2 	bl	b064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a700:	f000 fe20 	bl	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a704:	2002      	movs	r0, #2
    a706:	72e0      	strb	r0, [r4, #11]
    a708:	f000 fd28 	bl	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a70c:	606e      	str	r6, [r5, #4]
    a70e:	4807      	ldr	r0, [pc, #28]	; (a72c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a710:	64c6      	str	r6, [r0, #76]	; 0x4c
    a712:	4807      	ldr	r0, [pc, #28]	; (a730 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a714:	6801      	ldr	r1, [r0, #0]
    a716:	4638      	mov	r0, r7
    a718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a71c:	f004 bcf2 	b.w	f104 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a720:	200342dc 	.word	0x200342dc
    a724:	4001f504 	.word	0x4001f504
    a728:	40001000 	.word	0x40001000
    a72c:	40008000 	.word	0x40008000
    a730:	4000854c 	.word	0x4000854c

0000a734 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a738:	4d35      	ldr	r5, [pc, #212]	; (a810 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a73a:	4606      	mov	r6, r0
    a73c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a740:	4689      	mov	r9, r1
    a742:	6028      	str	r0, [r5, #0]
    a744:	4c33      	ldr	r4, [pc, #204]	; (a814 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a746:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    a74a:	f040 0002 	orr.w	r0, r0, #2
    a74e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    a752:	4608      	mov	r0, r1
    a754:	f000 fe92 	bl	b47c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a758:	f000 fc3c 	bl	afd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    a75c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; a818 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a760:	2700      	movs	r7, #0
    a762:	b116      	cbz	r6, a76a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a764:	2e01      	cmp	r6, #1
    a766:	d027      	beq.n	a7b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a768:	e03f      	b.n	a7ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a76a:	4648      	mov	r0, r9
    a76c:	f000 fc52 	bl	b014 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    a770:	7a60      	ldrb	r0, [r4, #9]
    a772:	2801      	cmp	r0, #1
    a774:	d105      	bne.n	a782 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a776:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a77a:	f041 0108 	orr.w	r1, r1, #8
    a77e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a782:	4648      	mov	r0, r9
    a784:	f000 fc0a 	bl	af9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    a788:	2001      	movs	r0, #1
    a78a:	72e0      	strb	r0, [r4, #11]
    a78c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a78e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a792:	6320      	str	r0, [r4, #48]	; 0x30
    a794:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a798:	6028      	str	r0, [r5, #0]
    a79a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a79e:	f1b9 0f02 	cmp.w	r9, #2
    a7a2:	d007      	beq.n	a7b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a7a4:	f640 0034 	movw	r0, #2100	; 0x834
    a7a8:	f649 72ec 	movw	r2, #40940	; 0x9fec
    a7ac:	4410      	add	r0, r2
    a7ae:	fbb0 f7f1 	udiv	r7, r0, r1
    a7b2:	e01a      	b.n	a7ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a7b4:	4608      	mov	r0, r1
    a7b6:	e7f7      	b.n	a7a8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    a7b8:	f000 fc54 	bl	b064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    a7bc:	f000 fdc2 	bl	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    a7c0:	7a60      	ldrb	r0, [r4, #9]
    a7c2:	2801      	cmp	r0, #1
    a7c4:	d105      	bne.n	a7d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    a7c6:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a7ca:	f041 0104 	orr.w	r1, r1, #4
    a7ce:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a7d2:	2002      	movs	r0, #2
    a7d4:	72e0      	strb	r0, [r4, #11]
    a7d6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    a7d8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    a7dc:	6320      	str	r0, [r4, #48]	; 0x30
    a7de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    a7e2:	6028      	str	r0, [r5, #0]
    a7e4:	2729      	movs	r7, #41	; 0x29
    a7e6:	f000 fcb9 	bl	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    a7ea:	f000 fca3 	bl	b134 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    a7ee:	f000 fe6d 	bl	b4cc <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    a7f2:	6800      	ldr	r0, [r0, #0]
    a7f4:	2801      	cmp	r0, #1
    a7f6:	d006      	beq.n	a806 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    a7f8:	2100      	movs	r1, #0
    a7fa:	4630      	mov	r0, r6
    a7fc:	f004 fc82 	bl	f104 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a800:	4638      	mov	r0, r7
    a802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a806:	f7ff ff01 	bl	a60c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a80a:	2000      	movs	r0, #0
    a80c:	e7f9      	b.n	a802 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    a80e:	0000      	.short	0x0000
    a810:	4001f504 	.word	0x4001f504
    a814:	200342dc 	.word	0x200342dc
    a818:	40001000 	.word	0x40001000

0000a81c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    a81c:	4a02      	ldr	r2, [pc, #8]	; (a828 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    a81e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a820:	6003      	str	r3, [r0, #0]
    a822:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    a824:	6008      	str	r0, [r1, #0]
    a826:	4770      	bx	lr
    a828:	200342dc 	.word	0x200342dc

0000a82c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    a82c:	b510      	push	{r4, lr}
    a82e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    a830:	4901      	ldr	r1, [pc, #4]	; (a838 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    a832:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    a836:	bd10      	pop	{r4, pc}
    a838:	200342cc 	.word	0x200342cc

0000a83c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    a83c:	490e      	ldr	r1, [pc, #56]	; (a878 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    a83e:	b510      	push	{r4, lr}
    a840:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    a842:	4282      	cmp	r2, r0
    a844:	d302      	bcc.n	a84c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    a846:	f640 0143 	movw	r1, #2115	; 0x843
    a84a:	e00a      	b.n	a862 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    a84c:	2201      	movs	r2, #1
    a84e:	740a      	strb	r2, [r1, #16]
    a850:	6148      	str	r0, [r1, #20]
    a852:	490a      	ldr	r1, [pc, #40]	; (a87c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    a854:	644a      	str	r2, [r1, #68]	; 0x44
    a856:	4a0a      	ldr	r2, [pc, #40]	; (a880 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    a858:	6813      	ldr	r3, [r2, #0]
    a85a:	4283      	cmp	r3, r0
    a85c:	d304      	bcc.n	a868 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    a85e:	f640 014c 	movw	r1, #2124	; 0x84c
    a862:	203e      	movs	r0, #62	; 0x3e
    a864:	f7f9 f9a0 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a868:	2300      	movs	r3, #0
    a86a:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    a86e:	6010      	str	r0, [r2, #0]
    a870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a874:	f000 bd74 	b.w	b360 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    a878:	200342dc 	.word	0x200342dc
    a87c:	40008000 	.word	0x40008000
    a880:	40008544 	.word	0x40008544

0000a884 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    a884:	b570      	push	{r4, r5, r6, lr}
    a886:	4c10      	ldr	r4, [pc, #64]	; (a8c8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    a888:	4606      	mov	r6, r0
    a88a:	2002      	movs	r0, #2
    a88c:	7420      	strb	r0, [r4, #16]
    a88e:	2596      	movs	r5, #150	; 0x96
    a890:	f000 f86c 	bl	a96c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    a894:	4602      	mov	r2, r0
    a896:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a89a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    a89e:	2801      	cmp	r0, #1
    a8a0:	d00d      	beq.n	a8be <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    a8a2:	4628      	mov	r0, r5
    a8a4:	f004 fc46 	bl	f134 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    a8a8:	4908      	ldr	r1, [pc, #32]	; (a8cc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    a8aa:	6160      	str	r0, [r4, #20]
    a8ac:	2000      	movs	r0, #0
    a8ae:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    a8b2:	6961      	ldr	r1, [r4, #20]
    a8b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a8b6:	4408      	add	r0, r1
    a8b8:	4905      	ldr	r1, [pc, #20]	; (a8d0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    a8ba:	6008      	str	r0, [r1, #0]
    a8bc:	bd70      	pop	{r4, r5, r6, pc}
    a8be:	4633      	mov	r3, r6
    a8c0:	4628      	mov	r0, r5
    a8c2:	f004 fc53 	bl	f16c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    a8c6:	e7ef      	b.n	a8a8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    a8c8:	200342dc 	.word	0x200342dc
    a8cc:	40008000 	.word	0x40008000
    a8d0:	40008544 	.word	0x40008544

0000a8d4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    a8d4:	b510      	push	{r4, lr}
    a8d6:	f000 ff46 	bl	b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    a8da:	2800      	cmp	r0, #0
    a8dc:	d006      	beq.n	a8ec <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    a8de:	4804      	ldr	r0, [pc, #16]	; (a8f0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    a8e0:	6801      	ldr	r1, [r0, #0]
    a8e2:	f021 0101 	bic.w	r1, r1, #1
    a8e6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    a8ea:	6001      	str	r1, [r0, #0]
    a8ec:	bd10      	pop	{r4, pc}
    a8ee:	0000      	.short	0x0000
    a8f0:	40001774 	.word	0x40001774

0000a8f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8f8:	2240      	movs	r2, #64	; 0x40
    a8fa:	2100      	movs	r1, #0
    a8fc:	4813      	ldr	r0, [pc, #76]	; (a94c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    a8fe:	f000 ffe2 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a902:	f000 fd55 	bl	b3b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    a906:	f000 fee7 	bl	b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    a90a:	4d11      	ldr	r5, [pc, #68]	; (a950 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a90c:	4e10      	ldr	r6, [pc, #64]	; (a950 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a90e:	2400      	movs	r4, #0
    a910:	4f0f      	ldr	r7, [pc, #60]	; (a950 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    a912:	3508      	adds	r5, #8
    a914:	3610      	adds	r6, #16
    a916:	b928      	cbnz	r0, a924 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a918:	f000 fef5 	bl	b706 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    a91c:	b910      	cbnz	r0, a924 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    a91e:	f000 fefc 	bl	b71a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    a922:	b108      	cbz	r0, a928 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    a924:	2224      	movs	r2, #36	; 0x24
    a926:	e006      	b.n	a936 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a928:	f000 ff37 	bl	b79a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    a92c:	b910      	cbnz	r0, a934 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    a92e:	f000 ff2a 	bl	b786 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    a932:	b140      	cbz	r0, a946 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    a934:	2240      	movs	r2, #64	; 0x40
    a936:	21ff      	movs	r1, #255	; 0xff
    a938:	4638      	mov	r0, r7
    a93a:	f000 ffc4 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a93e:	602c      	str	r4, [r5, #0]
    a940:	6034      	str	r4, [r6, #0]
    a942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a946:	2238      	movs	r2, #56	; 0x38
    a948:	e7f5      	b.n	a936 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    a94a:	0000      	.short	0x0000
    a94c:	200342dc 	.word	0x200342dc
    a950:	40000e00 	.word	0x40000e00

0000a954 <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA>:
    a954:	4901      	ldr	r1, [pc, #4]	; (a95c <sym_5M6HSZNEV3YTSVWYETA3YYJUR5Q25R5V4KQDQCA+0x8>)
    a956:	7008      	strb	r0, [r1, #0]
    a958:	4770      	bx	lr
    a95a:	0000      	.short	0x0000
    a95c:	20000280 	.word	0x20000280

0000a960 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    a960:	4801      	ldr	r0, [pc, #4]	; (a968 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    a962:	6a40      	ldr	r0, [r0, #36]	; 0x24
    a964:	4770      	bx	lr
    a966:	0000      	.short	0x0000
    a968:	200342dc 	.word	0x200342dc

0000a96c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    a96c:	4814      	ldr	r0, [pc, #80]	; (a9c0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    a96e:	b510      	push	{r4, lr}
    a970:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
    a974:	7ac0      	ldrb	r0, [r0, #11]
    a976:	b141      	cbz	r1, a98a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    a978:	2902      	cmp	r1, #2
    a97a:	d00b      	beq.n	a994 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a97c:	2802      	cmp	r0, #2
    a97e:	d009      	beq.n	a994 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    a980:	2901      	cmp	r1, #1
    a982:	d00b      	beq.n	a99c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a984:	2801      	cmp	r0, #1
    a986:	d009      	beq.n	a99c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    a988:	e015      	b.n	a9b6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    a98a:	2800      	cmp	r0, #0
    a98c:	d1f6      	bne.n	a97c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    a98e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    a992:	e00d      	b.n	a9b0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    a994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a998:	f000 bc6e 	b.w	b278 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x32c>
    a99c:	4809      	ldr	r0, [pc, #36]	; (a9c4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    a99e:	6800      	ldr	r0, [r0, #0]
    a9a0:	f000 000f 	and.w	r0, r0, #15
    a9a4:	2803      	cmp	r0, #3
    a9a6:	d006      	beq.n	a9b6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    a9a8:	2804      	cmp	r0, #4
    a9aa:	d006      	beq.n	a9ba <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    a9ac:	f240 210b 	movw	r1, #523	; 0x20b
    a9b0:	203e      	movs	r0, #62	; 0x3e
    a9b2:	f7f9 f8f9 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9b6:	2001      	movs	r0, #1
    a9b8:	bd10      	pop	{r4, pc}
    a9ba:	2002      	movs	r0, #2
    a9bc:	bd10      	pop	{r4, pc}
    a9be:	0000      	.short	0x0000
    a9c0:	200342dc 	.word	0x200342dc
    a9c4:	40001510 	.word	0x40001510

0000a9c8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    a9c8:	4801      	ldr	r0, [pc, #4]	; (a9d0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    a9ca:	6a00      	ldr	r0, [r0, #32]
    a9cc:	4770      	bx	lr
    a9ce:	0000      	.short	0x0000
    a9d0:	200342dc 	.word	0x200342dc

0000a9d4 <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA>:
    a9d4:	4801      	ldr	r0, [pc, #4]	; (a9dc <sym_JG4OWOPOBDSVKYOWPCJHHMQ7GDZVMOEUZX73ZYA+0x8>)
    a9d6:	7f40      	ldrb	r0, [r0, #29]
    a9d8:	4770      	bx	lr
    a9da:	0000      	.short	0x0000
    a9dc:	200342dc 	.word	0x200342dc

0000a9e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    a9e0:	b510      	push	{r4, lr}
    a9e2:	f000 fccb 	bl	b37c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    a9e6:	f7ff fe11 	bl	a60c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    a9ea:	f004 fb21 	bl	f030 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    a9ee:	480f      	ldr	r0, [pc, #60]	; (aa2c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    a9f0:	4a0f      	ldr	r2, [pc, #60]	; (aa30 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    a9f2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    a9f4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    a9f8:	6011      	str	r1, [r2, #0]
    a9fa:	2400      	movs	r4, #0
    a9fc:	6304      	str	r4, [r0, #48]	; 0x30
    a9fe:	7404      	strb	r4, [r0, #16]
    aa00:	6244      	str	r4, [r0, #36]	; 0x24
    aa02:	6204      	str	r4, [r0, #32]
    aa04:	f000 fcba 	bl	b37c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x430>
    aa08:	480a      	ldr	r0, [pc, #40]	; (aa34 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    aa0a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    aa0e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    aa12:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    aa16:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    aa1a:	2001      	movs	r0, #1
    aa1c:	f004 fb41 	bl	f0a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aa24:	2001      	movs	r0, #1
    aa26:	f004 bb2f 	b.w	f088 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    aa2a:	0000      	.short	0x0000
    aa2c:	200342dc 	.word	0x200342dc
    aa30:	4001f508 	.word	0x4001f508
    aa34:	40008000 	.word	0x40008000

0000aa38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    aa38:	b570      	push	{r4, r5, r6, lr}
    aa3a:	2001      	movs	r0, #1
    aa3c:	f004 fb31 	bl	f0a2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    aa40:	4837      	ldr	r0, [pc, #220]	; (ab20 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    aa42:	2400      	movs	r4, #0
    aa44:	6004      	str	r4, [r0, #0]
    aa46:	2601      	movs	r6, #1
    aa48:	6006      	str	r6, [r0, #0]
    aa4a:	f000 fe7c 	bl	b746 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    aa4e:	4d35      	ldr	r5, [pc, #212]	; (ab24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa50:	b118      	cbz	r0, aa5a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x22>
    aa52:	6828      	ldr	r0, [r5, #0]
    aa54:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    aa58:	6028      	str	r0, [r5, #0]
    aa5a:	f000 fe68 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    aa5e:	b128      	cbz	r0, aa6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x34>
    aa60:	6828      	ldr	r0, [r5, #0]
    aa62:	4931      	ldr	r1, [pc, #196]	; (ab28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    aa64:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    aa68:	4308      	orrs	r0, r1
    aa6a:	6028      	str	r0, [r5, #0]
    aa6c:	f000 fe7b 	bl	b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    aa70:	b138      	cbz	r0, aa82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4a>
    aa72:	482c      	ldr	r0, [pc, #176]	; (ab24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa74:	1d00      	adds	r0, r0, #4
    aa76:	6801      	ldr	r1, [r0, #0]
    aa78:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    aa7c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    aa80:	6001      	str	r1, [r0, #0]
    aa82:	4928      	ldr	r1, [pc, #160]	; (ab24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa84:	4829      	ldr	r0, [pc, #164]	; (ab2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    aa86:	313c      	adds	r1, #60	; 0x3c
    aa88:	6008      	str	r0, [r1, #0]
    aa8a:	f7f8 ff8b 	bl	39a4 <mpsl_fem_device_config_254_apply_get>
    aa8e:	b140      	cbz	r0, aaa2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    aa90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    aa94:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    aa98:	1c41      	adds	r1, r0, #1
    aa9a:	d002      	beq.n	aaa2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6a>
    aa9c:	4921      	ldr	r1, [pc, #132]	; (ab24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    aa9e:	3110      	adds	r1, #16
    aaa0:	6008      	str	r0, [r1, #0]
    aaa2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    aaa6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    aaa8:	1c41      	adds	r1, r0, #1
    aaaa:	d004      	beq.n	aab6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x7e>
    aaac:	4920      	ldr	r1, [pc, #128]	; (ab30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aaae:	680a      	ldr	r2, [r1, #0]
    aab0:	f360 4217 	bfi	r2, r0, #16, #8
    aab4:	600a      	str	r2, [r1, #0]
    aab6:	491e      	ldr	r1, [pc, #120]	; (ab30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aab8:	f240 605b 	movw	r0, #1627	; 0x65b
    aabc:	3954      	subs	r1, #84	; 0x54
    aabe:	6008      	str	r0, [r1, #0]
    aac0:	1f09      	subs	r1, r1, #4
    aac2:	f240 1003 	movw	r0, #259	; 0x103
    aac6:	6008      	str	r0, [r1, #0]
    aac8:	1f08      	subs	r0, r1, #4
    aaca:	6006      	str	r6, [r0, #0]
    aacc:	2001      	movs	r0, #1
    aace:	f000 fcd5 	bl	b47c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    aad2:	4917      	ldr	r1, [pc, #92]	; (ab30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    aad4:	f240 1001 	movw	r0, #257	; 0x101
    aad8:	31c4      	adds	r1, #196	; 0xc4
    aada:	6008      	str	r0, [r1, #0]
    aadc:	4e15      	ldr	r6, [pc, #84]	; (ab34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    aade:	2502      	movs	r5, #2
    aae0:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    aae4:	4915      	ldr	r1, [pc, #84]	; (ab3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    aae6:	4814      	ldr	r0, [pc, #80]	; (ab38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    aae8:	6008      	str	r0, [r1, #0]
    aaea:	4815      	ldr	r0, [pc, #84]	; (ab40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    aaec:	f506 7600 	add.w	r6, r6, #512	; 0x200
    aaf0:	8704      	strh	r4, [r0, #56]	; 0x38
    aaf2:	3010      	adds	r0, #16
    aaf4:	6244      	str	r4, [r0, #36]	; 0x24
    aaf6:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
    aafa:	2001      	movs	r0, #1
    aafc:	f004 fac4 	bl	f088 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ab00:	2010      	movs	r0, #16
    ab02:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    ab06:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ab0a:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    ab0e:	480d      	ldr	r0, [pc, #52]	; (ab44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ab10:	6840      	ldr	r0, [r0, #4]
    ab12:	2800      	cmp	r0, #0
    ab14:	d002      	beq.n	ab1c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    ab16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ab1a:	4700      	bx	r0
    ab1c:	bd70      	pop	{r4, r5, r6, pc}
    ab1e:	0000      	.short	0x0000
    ab20:	40001ffc 	.word	0x40001ffc
    ab24:	4000173c 	.word	0x4000173c
    ab28:	80000096 	.word	0x80000096
    ab2c:	8900002c 	.word	0x8900002c
    ab30:	4000158c 	.word	0x4000158c
    ab34:	40001000 	.word	0x40001000
    ab38:	0c0e0000 	.word	0x0c0e0000
    ab3c:	4001f508 	.word	0x4001f508
    ab40:	200342cc 	.word	0x200342cc
    ab44:	20000280 	.word	0x20000280

0000ab48 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ab48:	4901      	ldr	r1, [pc, #4]	; (ab50 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ab4a:	7608      	strb	r0, [r1, #24]
    ab4c:	4770      	bx	lr
    ab4e:	0000      	.short	0x0000
    ab50:	200342dc 	.word	0x200342dc

0000ab54 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ab54:	4904      	ldr	r1, [pc, #16]	; (ab68 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    ab56:	6008      	str	r0, [r1, #0]
    ab58:	4804      	ldr	r0, [pc, #16]	; (ab6c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    ab5a:	f810 1f34 	ldrb.w	r1, [r0, #52]!
    ab5e:	f041 0101 	orr.w	r1, r1, #1
    ab62:	7001      	strb	r1, [r0, #0]
    ab64:	f000 baae 	b.w	b0c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    ab68:	40001504 	.word	0x40001504
    ab6c:	200342dc 	.word	0x200342dc

0000ab70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    ab70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab74:	4e35      	ldr	r6, [pc, #212]	; (ac4c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    ab76:	4607      	mov	r7, r0
    ab78:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    ab7c:	468a      	mov	sl, r1
    ab7e:	4614      	mov	r4, r2
    ab80:	6030      	str	r0, [r6, #0]
    ab82:	4610      	mov	r0, r2
    ab84:	f000 fc7a 	bl	b47c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ab88:	f000 fa24 	bl	afd4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x88>
    ab8c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ac50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    ab90:	4d30      	ldr	r5, [pc, #192]	; (ac54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    ab92:	f04f 0801 	mov.w	r8, #1
    ab96:	b127      	cbz	r7, aba2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    ab98:	2f01      	cmp	r7, #1
    ab9a:	d01d      	beq.n	abd8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    ab9c:	f240 7144 	movw	r1, #1860	; 0x744
    aba0:	e04a      	b.n	ac38 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    aba2:	4620      	mov	r0, r4
    aba4:	f000 fa36 	bl	b014 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    aba8:	4620      	mov	r0, r4
    abaa:	f000 f9f7 	bl	af9c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    abae:	2c02      	cmp	r4, #2
    abb0:	d00f      	beq.n	abd2 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    abb2:	f640 0034 	movw	r0, #2100	; 0x834
    abb6:	bf00      	nop
    abb8:	f649 51f8 	movw	r1, #40440	; 0x9df8
    abbc:	4401      	add	r1, r0
    abbe:	4650      	mov	r0, sl
    abc0:	f000 fc00 	bl	b3c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    abc4:	4604      	mov	r4, r0
    abc6:	4648      	mov	r0, r9
    abc8:	f000 fbe6 	bl	b398 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    abcc:	f885 800b 	strb.w	r8, [r5, #11]
    abd0:	e014      	b.n	abfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    abd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    abd6:	e7ef      	b.n	abb8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    abd8:	f000 fa44 	bl	b064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    abdc:	f000 fbb2 	bl	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    abe0:	f000 fabc 	bl	b15c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x210>
    abe4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    abe8:	4650      	mov	r0, sl
    abea:	f000 fbeb 	bl	b3c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x478>
    abee:	4604      	mov	r4, r0
    abf0:	4817      	ldr	r0, [pc, #92]	; (ac50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    abf2:	1d00      	adds	r0, r0, #4
    abf4:	f000 fbd0 	bl	b398 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44c>
    abf8:	2002      	movs	r0, #2
    abfa:	72e8      	strb	r0, [r5, #11]
    abfc:	4816      	ldr	r0, [pc, #88]	; (ac58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    abfe:	6004      	str	r4, [r0, #0]
    ac00:	4917      	ldr	r1, [pc, #92]	; (ac60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ac02:	4816      	ldr	r0, [pc, #88]	; (ac5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ac04:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ac08:	6b28      	ldr	r0, [r5, #48]	; 0x30
    ac0a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ac0e:	6328      	str	r0, [r5, #48]	; 0x30
    ac10:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ac14:	6030      	str	r0, [r6, #0]
    ac16:	2110      	movs	r1, #16
    ac18:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ac1c:	1200      	asrs	r0, r0, #8
    ac1e:	6030      	str	r0, [r6, #0]
    ac20:	f000 fa88 	bl	b134 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e8>
    ac24:	490f      	ldr	r1, [pc, #60]	; (ac64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ac26:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ac2a:	480b      	ldr	r0, [pc, #44]	; (ac58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ac2c:	300c      	adds	r0, #12
    ac2e:	6800      	ldr	r0, [r0, #0]
    ac30:	42a0      	cmp	r0, r4
    ac32:	d304      	bcc.n	ac3e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ac34:	f240 7169 	movw	r1, #1897	; 0x769
    ac38:	203e      	movs	r0, #62	; 0x3e
    ac3a:	f7f8 ffb5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac3e:	4621      	mov	r1, r4
    ac40:	4638      	mov	r0, r7
    ac42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac46:	f004 ba5d 	b.w	f104 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ac4a:	0000      	.short	0x0000
    ac4c:	4001f504 	.word	0x4001f504
    ac50:	40001000 	.word	0x40001000
    ac54:	200342dc 	.word	0x200342dc
    ac58:	40008540 	.word	0x40008540
    ac5c:	40008140 	.word	0x40008140
    ac60:	4001f098 	.word	0x4001f098
    ac64:	40008000 	.word	0x40008000

0000ac68 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ac68:	b510      	push	{r4, lr}
    ac6a:	b14a      	cbz	r2, ac80 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x18>
    ac6c:	4c12      	ldr	r4, [pc, #72]	; (acb8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x50>)
    ac6e:	7260      	strb	r0, [r4, #9]
    ac70:	7363      	strb	r3, [r4, #13]
    ac72:	07d0      	lsls	r0, r2, #31
    ac74:	d007      	beq.n	ac86 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    ac76:	2a01      	cmp	r2, #1
    ac78:	d005      	beq.n	ac86 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x1e>
    ac7a:	f640 113e 	movw	r1, #2366	; 0x93e
    ac7e:	e00c      	b.n	ac9a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ac80:	f640 1137 	movw	r1, #2359	; 0x937
    ac84:	e009      	b.n	ac9a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x32>
    ac86:	b159      	cbz	r1, aca0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>
    ac88:	2002      	movs	r0, #2
    ac8a:	72a0      	strb	r0, [r4, #10]
    ac8c:	7322      	strb	r2, [r4, #12]
    ac8e:	2801      	cmp	r0, #1
    ac90:	d008      	beq.n	aca4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x3c>
    ac92:	2802      	cmp	r0, #2
    ac94:	d00f      	beq.n	acb6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    ac96:	f640 1155 	movw	r1, #2389	; 0x955
    ac9a:	203e      	movs	r0, #62	; 0x3e
    ac9c:	f7f8 ff84 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aca0:	2001      	movs	r0, #1
    aca2:	e7f2      	b.n	ac8a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x22>
    aca4:	7ae0      	ldrb	r0, [r4, #11]
    aca6:	2802      	cmp	r0, #2
    aca8:	d105      	bne.n	acb6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x4e>
    acaa:	f000 f9db 	bl	b064 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x118>
    acae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    acb2:	f000 bb47 	b.w	b344 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f8>
    acb6:	bd10      	pop	{r4, pc}
    acb8:	200342dc 	.word	0x200342dc

0000acbc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    acbc:	490a      	ldr	r1, [pc, #40]	; (ace8 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    acbe:	b508      	push	{r3, lr}
    acc0:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    acc4:	2a01      	cmp	r2, #1
    acc6:	d001      	beq.n	accc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    acc8:	2000      	movs	r0, #0
    acca:	bd08      	pop	{r3, pc}
    accc:	4a07      	ldr	r2, [pc, #28]	; (acec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    acce:	6812      	ldr	r2, [r2, #0]
    acd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    acd4:	4252      	negs	r2, r2
    acd6:	7002      	strb	r2, [r0, #0]
    acd8:	2000      	movs	r0, #0
    acda:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    acde:	4804      	ldr	r0, [pc, #16]	; (acf0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    ace0:	6800      	ldr	r0, [r0, #0]
    ace2:	9000      	str	r0, [sp, #0]
    ace4:	2001      	movs	r0, #1
    ace6:	bd08      	pop	{r3, pc}
    ace8:	40001000 	.word	0x40001000
    acec:	40001548 	.word	0x40001548
    acf0:	4000111c 	.word	0x4000111c

0000acf4 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ>:
    acf4:	4a04      	ldr	r2, [pc, #16]	; (ad08 <sym_LZLCMBXYRGNNSS6IYQ5J2ORWQO6TGPOEG4SEIWQ+0x14>)
    acf6:	6803      	ldr	r3, [r0, #0]
    acf8:	f8c2 3012 	str.w	r3, [r2, #18]
    acfc:	8880      	ldrh	r0, [r0, #4]
    acfe:	82d0      	strh	r0, [r2, #22]
    ad00:	f102 0010 	add.w	r0, r2, #16
    ad04:	7201      	strb	r1, [r0, #8]
    ad06:	4770      	bx	lr
    ad08:	200342cc 	.word	0x200342cc

0000ad0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    ad0c:	4a04      	ldr	r2, [pc, #16]	; (ad20 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ad0e:	78c1      	ldrb	r1, [r0, #3]
    ad10:	6011      	str	r1, [r2, #0]
    ad12:	6800      	ldr	r0, [r0, #0]
    ad14:	4902      	ldr	r1, [pc, #8]	; (ad20 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x14>)
    ad16:	0200      	lsls	r0, r0, #8
    ad18:	3908      	subs	r1, #8
    ad1a:	6008      	str	r0, [r1, #0]
    ad1c:	4770      	bx	lr
    ad1e:	0000      	.short	0x0000
    ad20:	40001524 	.word	0x40001524

0000ad24 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    ad24:	6800      	ldr	r0, [r0, #0]
    ad26:	4902      	ldr	r1, [pc, #8]	; (ad30 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    ad28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ad2c:	6008      	str	r0, [r1, #0]
    ad2e:	4770      	bx	lr
    ad30:	4000153c 	.word	0x4000153c

0000ad34 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    ad34:	b510      	push	{r4, lr}
    ad36:	f000 fb7d 	bl	b434 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    ad3a:	4806      	ldr	r0, [pc, #24]	; (ad54 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    ad3c:	6800      	ldr	r0, [r0, #0]
    ad3e:	2803      	cmp	r0, #3
    ad40:	d001      	beq.n	ad46 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    ad42:	280b      	cmp	r0, #11
    ad44:	d104      	bne.n	ad50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    ad46:	f240 21a5 	movw	r1, #677	; 0x2a5
    ad4a:	203e      	movs	r0, #62	; 0x3e
    ad4c:	f7f8 ff2c 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad50:	bd10      	pop	{r4, pc}
    ad52:	0000      	.short	0x0000
    ad54:	40001550 	.word	0x40001550

0000ad58 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    ad58:	4901      	ldr	r1, [pc, #4]	; (ad60 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    ad5a:	7648      	strb	r0, [r1, #25]
    ad5c:	4770      	bx	lr
    ad5e:	0000      	.short	0x0000
    ad60:	200342dc 	.word	0x200342dc

0000ad64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    ad64:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ad68:	4d6f      	ldr	r5, [pc, #444]	; (af28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c4>)
    ad6a:	2701      	movs	r7, #1
    ad6c:	64ef      	str	r7, [r5, #76]	; 0x4c
    ad6e:	486f      	ldr	r0, [pc, #444]	; (af2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    ad70:	f8d0 a000 	ldr.w	sl, [r0]
    ad74:	486e      	ldr	r0, [pc, #440]	; (af30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    ad76:	6800      	ldr	r0, [r0, #0]
    ad78:	4c6e      	ldr	r4, [pc, #440]	; (af34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    ad7a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; af38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    ad7e:	e9c4 0a0e 	strd	r0, sl, [r4, #56]	; 0x38
    ad82:	f898 0000 	ldrb.w	r0, [r8]
    ad86:	2804      	cmp	r0, #4
    ad88:	d302      	bcc.n	ad90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c>
    ad8a:	f44f 612d 	mov.w	r1, #2768	; 0xad0
    ad8e:	e0c0      	b.n	af12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    ad90:	f000 f972 	bl	b078 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x12c>
    ad94:	4969      	ldr	r1, [pc, #420]	; (af3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d8>)
    ad96:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ad98:	6008      	str	r0, [r1, #0]
    ad9a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; af40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1dc>
    ad9e:	2600      	movs	r6, #0
    ada0:	6326      	str	r6, [r4, #48]	; 0x30
    ada2:	f8db 1200 	ldr.w	r1, [fp, #512]	; 0x200
    ada6:	f240 121d 	movw	r2, #285	; 0x11d
    adaa:	4391      	bics	r1, r2
    adac:	f8cb 1200 	str.w	r1, [fp, #512]	; 0x200
    adb0:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    adb4:	f8db 010c 	ldr.w	r0, [fp, #268]	; 0x10c
    adb8:	b900      	cbnz	r0, adbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x58>
    adba:	64af      	str	r7, [r5, #72]	; 0x48
    adbc:	f000 f9e0 	bl	b180 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x234>
    adc0:	4605      	mov	r5, r0
    adc2:	485a      	ldr	r0, [pc, #360]	; (af2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c8>)
    adc4:	1f00      	subs	r0, r0, #4
    adc6:	6800      	ldr	r0, [r0, #0]
    adc8:	6260      	str	r0, [r4, #36]	; 0x24
    adca:	f7ff fdcf 	bl	a96c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    adce:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    add2:	7ae0      	ldrb	r0, [r4, #11]
    add4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    add8:	495a      	ldr	r1, [pc, #360]	; (af44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    adda:	6226      	str	r6, [r4, #32]
    addc:	2802      	cmp	r0, #2
    adde:	d107      	bne.n	adf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    ade0:	7860      	ldrb	r0, [r4, #1]
    ade2:	b128      	cbz	r0, adf0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    ade4:	680a      	ldr	r2, [r1, #0]
    ade6:	7812      	ldrb	r2, [r2, #0]
    ade8:	4002      	ands	r2, r0
    adea:	7820      	ldrb	r0, [r4, #0]
    adec:	4390      	bics	r0, r2
    adee:	d011      	beq.n	ae14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb0>
    adf0:	7726      	strb	r6, [r4, #28]
    adf2:	f8df 9154 	ldr.w	r9, [pc, #340]	; af48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    adf6:	07a8      	lsls	r0, r5, #30
    adf8:	d502      	bpl.n	ae00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    adfa:	f8d9 0000 	ldr.w	r0, [r9]
    adfe:	6220      	str	r0, [r4, #32]
    ae00:	0728      	lsls	r0, r5, #28
    ae02:	d502      	bpl.n	ae0a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa6>
    ae04:	f8d9 0000 	ldr.w	r0, [r9]
    ae08:	6220      	str	r0, [r4, #32]
    ae0a:	f898 0000 	ldrb.w	r0, [r8]
    ae0e:	07c0      	lsls	r0, r0, #31
    ae10:	d002      	beq.n	ae18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xb4>
    ae12:	e01c      	b.n	ae4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    ae14:	7727      	strb	r7, [r4, #28]
    ae16:	e7ec      	b.n	adf2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8e>
    ae18:	f8d1 8000 	ldr.w	r8, [r1]
    ae1c:	f898 0000 	ldrb.w	r0, [r8]
    ae20:	f000 000f 	and.w	r0, r0, #15
    ae24:	2807      	cmp	r0, #7
    ae26:	d211      	bcs.n	ae4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    ae28:	2206      	movs	r2, #6
    ae2a:	f108 0109 	add.w	r1, r8, #9
    ae2e:	1ca0      	adds	r0, r4, #2
    ae30:	f000 fcbd 	bl	b7ae <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    ae34:	b938      	cbnz	r0, ae46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    ae36:	7a20      	ldrb	r0, [r4, #8]
    ae38:	f898 1000 	ldrb.w	r1, [r8]
    ae3c:	ebb0 1fd1 	cmp.w	r0, r1, lsr #7
    ae40:	d101      	bne.n	ae46 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    ae42:	2001      	movs	r0, #1
    ae44:	e000      	b.n	ae48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe4>
    ae46:	2000      	movs	r0, #0
    ae48:	7760      	strb	r0, [r4, #29]
    ae4a:	e000      	b.n	ae4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    ae4c:	7766      	strb	r6, [r4, #29]
    ae4e:	f04f 0800 	mov.w	r8, #0
    ae52:	4651      	mov	r1, sl
    ae54:	4628      	mov	r0, r5
    ae56:	f000 fa23 	bl	b2a0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x354>
    ae5a:	b918      	cbnz	r0, ae64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    ae5c:	f8cb 7010 	str.w	r7, [fp, #16]
    ae60:	f04f 0801 	mov.w	r8, #1
    ae64:	4e33      	ldr	r6, [pc, #204]	; (af34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    ae66:	07e8      	lsls	r0, r5, #31
    ae68:	f1a6 0610 	sub.w	r6, r6, #16
    ae6c:	d002      	beq.n	ae74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x110>
    ae6e:	6830      	ldr	r0, [r6, #0]
    ae70:	4780      	blx	r0
    ae72:	e031      	b.n	aed8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    ae74:	07a8      	lsls	r0, r5, #30
    ae76:	d526      	bpl.n	aec6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x162>
    ae78:	0768      	lsls	r0, r5, #29
    ae7a:	d41e      	bmi.n	aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae7c:	f000 fc73 	bl	b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ae80:	b9d8      	cbnz	r0, aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae82:	f000 fc60 	bl	b746 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ae86:	b9c0      	cbnz	r0, aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    ae88:	482e      	ldr	r0, [pc, #184]	; (af44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    ae8a:	38b4      	subs	r0, #180	; 0xb4
    ae8c:	6800      	ldr	r0, [r0, #0]
    ae8e:	f3c0 5742 	ubfx	r7, r0, #21, #3
    ae92:	f3c0 6300 	ubfx	r3, r0, #24, #1
    ae96:	f000 020f 	and.w	r2, r0, #15
    ae9a:	f3c0 1103 	ubfx	r1, r0, #4, #4
    ae9e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    aea2:	b153      	cbz	r3, aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    aea4:	b10a      	cbz	r2, aeaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    aea6:	b101      	cbz	r1, aeaa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    aea8:	b938      	cbnz	r0, aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    aeaa:	4826      	ldr	r0, [pc, #152]	; (af44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    aeac:	38b0      	subs	r0, #176	; 0xb0
    aeae:	6800      	ldr	r0, [r0, #0]
    aeb0:	b118      	cbz	r0, aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    aeb2:	2f03      	cmp	r7, #3
    aeb4:	d201      	bcs.n	aeba <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x156>
    aeb6:	f045 0504 	orr.w	r5, r5, #4
    aeba:	f345 0080 	sbfx	r0, r5, #2, #1
    aebe:	4641      	mov	r1, r8
    aec0:	1c40      	adds	r0, r0, #1
    aec2:	6872      	ldr	r2, [r6, #4]
    aec4:	e007      	b.n	aed6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x172>
    aec6:	f015 0f28 	tst.w	r5, #40	; 0x28
    aeca:	d005      	beq.n	aed8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x174>
    aecc:	f345 1140 	sbfx	r1, r5, #5, #1
    aed0:	68b2      	ldr	r2, [r6, #8]
    aed2:	4640      	mov	r0, r8
    aed4:	1c49      	adds	r1, r1, #1
    aed6:	4790      	blx	r2
    aed8:	06e8      	lsls	r0, r5, #27
    aeda:	d501      	bpl.n	aee0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    aedc:	68f0      	ldr	r0, [r6, #12]
    aede:	4780      	blx	r0
    aee0:	7ae0      	ldrb	r0, [r4, #11]
    aee2:	2802      	cmp	r0, #2
    aee4:	d11e      	bne.n	af24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    aee6:	7c20      	ldrb	r0, [r4, #16]
    aee8:	2800      	cmp	r0, #0
    aeea:	d01b      	beq.n	af24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1c0>
    aeec:	2802      	cmp	r0, #2
    aeee:	d004      	beq.n	aefa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x196>
    aef0:	2801      	cmp	r0, #1
    aef2:	d008      	beq.n	af06 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a2>
    aef4:	f640 3166 	movw	r1, #2918	; 0xb66
    aef8:	e00b      	b.n	af12 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ae>
    aefa:	6961      	ldr	r1, [r4, #20]
    aefc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aefe:	4401      	add	r1, r0
    af00:	f8c9 1000 	str.w	r1, [r9]
    af04:	e00a      	b.n	af1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b8>
    af06:	6a61      	ldr	r1, [r4, #36]	; 0x24
    af08:	6960      	ldr	r0, [r4, #20]
    af0a:	4288      	cmp	r0, r1
    af0c:	d804      	bhi.n	af18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1b4>
    af0e:	f640 3167 	movw	r1, #2919	; 0xb67
    af12:	203e      	movs	r0, #62	; 0x3e
    af14:	f7f8 fe48 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af18:	f8c9 0000 	str.w	r0, [r9]
    af1c:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    af20:	f000 ba1e 	b.w	b360 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x414>
    af24:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    af28:	40008000 	.word	0x40008000
    af2c:	4000854c 	.word	0x4000854c
    af30:	4000b504 	.word	0x4000b504
    af34:	200342dc 	.word	0x200342dc
    af38:	20000280 	.word	0x20000280
    af3c:	4001f508 	.word	0x4001f508
    af40:	40001000 	.word	0x40001000
    af44:	40001504 	.word	0x40001504
    af48:	40008544 	.word	0x40008544

0000af4c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    af4c:	b570      	push	{r4, r5, r6, lr}
    af4e:	4b11      	ldr	r3, [pc, #68]	; (af94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    af50:	888c      	ldrh	r4, [r1, #4]
    af52:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    af56:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    af5a:	780c      	ldrb	r4, [r1, #0]
    af5c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    af60:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    af64:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    af68:	4d0b      	ldr	r5, [pc, #44]	; (af98 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    af6a:	6829      	ldr	r1, [r5, #0]
    af6c:	f100 0608 	add.w	r6, r0, #8
    af70:	2401      	movs	r4, #1
    af72:	fa04 f306 	lsl.w	r3, r4, r6
    af76:	b132      	cbz	r2, af86 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    af78:	2a01      	cmp	r2, #1
    af7a:	d006      	beq.n	af8a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    af7c:	f240 41f1 	movw	r1, #1265	; 0x4f1
    af80:	203e      	movs	r0, #62	; 0x3e
    af82:	f7f8 fe11 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af86:	4399      	bics	r1, r3
    af88:	e000      	b.n	af8c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    af8a:	4319      	orrs	r1, r3
    af8c:	4084      	lsls	r4, r0
    af8e:	430c      	orrs	r4, r1
    af90:	602c      	str	r4, [r5, #0]
    af92:	bd70      	pop	{r4, r5, r6, pc}
    af94:	40001000 	.word	0x40001000
    af98:	40001640 	.word	0x40001640
    af9c:	b510      	push	{r4, lr}
    af9e:	4604      	mov	r4, r0
    afa0:	f000 fbe1 	bl	b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    afa4:	2800      	cmp	r0, #0
    afa6:	d00e      	beq.n	afc6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7a>
    afa8:	4a09      	ldr	r2, [pc, #36]	; (afd0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x84>)
    afaa:	6811      	ldr	r1, [r2, #0]
    afac:	0650      	lsls	r0, r2, #25
    afae:	2c02      	cmp	r4, #2
    afb0:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    afb4:	d008      	beq.n	afc8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x7c>
    afb6:	f3c0 2006 	ubfx	r0, r0, #8, #7
    afba:	bf00      	nop
    afbc:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    afc0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    afc4:	6010      	str	r0, [r2, #0]
    afc6:	bd10      	pop	{r4, pc}
    afc8:	f3c0 6006 	ubfx	r0, r0, #24, #7
    afcc:	e7f6      	b.n	afbc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x70>
    afce:	0000      	.short	0x0000
    afd0:	40001588 	.word	0x40001588
    afd4:	480d      	ldr	r0, [pc, #52]	; (b00c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc0>)
    afd6:	7e40      	ldrb	r0, [r0, #25]
    afd8:	2825      	cmp	r0, #37	; 0x25
    afda:	d007      	beq.n	afec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa0>
    afdc:	2826      	cmp	r0, #38	; 0x26
    afde:	d007      	beq.n	aff0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa4>
    afe0:	2827      	cmp	r0, #39	; 0x27
    afe2:	d007      	beq.n	aff4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xa8>
    afe4:	280a      	cmp	r0, #10
    afe6:	d807      	bhi.n	aff8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xac>
    afe8:	2204      	movs	r2, #4
    afea:	e006      	b.n	affa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xae>
    afec:	2102      	movs	r1, #2
    afee:	e007      	b.n	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    aff0:	211a      	movs	r1, #26
    aff2:	e005      	b.n	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    aff4:	2150      	movs	r1, #80	; 0x50
    aff6:	e003      	b.n	b000 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xb4>
    aff8:	2206      	movs	r2, #6
    affa:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    affe:	b2c9      	uxtb	r1, r1
    b000:	4a03      	ldr	r2, [pc, #12]	; (b010 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b002:	6011      	str	r1, [r2, #0]
    b004:	4902      	ldr	r1, [pc, #8]	; (b010 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc4>)
    b006:	314c      	adds	r1, #76	; 0x4c
    b008:	6008      	str	r0, [r1, #0]
    b00a:	4770      	bx	lr
    b00c:	200342dc 	.word	0x200342dc
    b010:	40001508 	.word	0x40001508
    b014:	4912      	ldr	r1, [pc, #72]	; (b060 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x114>)
    b016:	b508      	push	{r3, lr}
    b018:	f991 2018 	ldrsb.w	r2, [r1, #24]
    b01c:	7e49      	ldrb	r1, [r1, #25]
    b01e:	2801      	cmp	r0, #1
    b020:	d00a      	beq.n	b038 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xec>
    b022:	2802      	cmp	r0, #2
    b024:	d00a      	beq.n	b03c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf0>
    b026:	2804      	cmp	r0, #4
    b028:	d00a      	beq.n	b040 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf4>
    b02a:	2808      	cmp	r0, #8
    b02c:	d00a      	beq.n	b044 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xf8>
    b02e:	f240 31d7 	movw	r1, #983	; 0x3d7
    b032:	2006      	movs	r0, #6
    b034:	f7f8 fdb8 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b038:	2000      	movs	r0, #0
    b03a:	e004      	b.n	b046 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b03c:	2001      	movs	r0, #1
    b03e:	e002      	b.n	b046 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b040:	2003      	movs	r0, #3
    b042:	e000      	b.n	b046 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xfa>
    b044:	2002      	movs	r0, #2
    b046:	466b      	mov	r3, sp
    b048:	f7f5 f9d4 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b04c:	b118      	cbz	r0, b056 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x10a>
    b04e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    b052:	203e      	movs	r0, #62	; 0x3e
    b054:	e7ee      	b.n	b034 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xe8>
    b056:	f99d 0000 	ldrsb.w	r0, [sp]
    b05a:	f000 fa09 	bl	b470 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b05e:	bd08      	pop	{r3, pc}
    b060:	200342dc 	.word	0x200342dc
    b064:	4803      	ldr	r0, [pc, #12]	; (b074 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x128>)
    b066:	7a81      	ldrb	r1, [r0, #10]
    b068:	2901      	cmp	r1, #1
    b06a:	d102      	bne.n	b072 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x126>
    b06c:	7b40      	ldrb	r0, [r0, #13]
    b06e:	f7ff bfd1 	b.w	b014 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0xc8>
    b072:	4770      	bx	lr
    b074:	200342dc 	.word	0x200342dc
    b078:	4805      	ldr	r0, [pc, #20]	; (b090 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x144>)
    b07a:	7ac0      	ldrb	r0, [r0, #11]
    b07c:	2801      	cmp	r0, #1
    b07e:	d003      	beq.n	b088 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x13c>
    b080:	2802      	cmp	r0, #2
    b082:	d103      	bne.n	b08c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x140>
    b084:	f003 bfbc 	b.w	f000 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b088:	f003 bfc6 	b.w	f018 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b08c:	4770      	bx	lr
    b08e:	0000      	.short	0x0000
    b090:	200342dc 	.word	0x200342dc
    b094:	4809      	ldr	r0, [pc, #36]	; (b0bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x170>)
    b096:	b508      	push	{r3, lr}
    b098:	2100      	movs	r1, #0
    b09a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b09e:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b0a2:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b0a6:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b0aa:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b0ae:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b0b2:	4803      	ldr	r0, [pc, #12]	; (b0c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x174>)
    b0b4:	6800      	ldr	r0, [r0, #0]
    b0b6:	9000      	str	r0, [sp, #0]
    b0b8:	bd08      	pop	{r3, pc}
    b0ba:	0000      	.short	0x0000
    b0bc:	40001000 	.word	0x40001000
    b0c0:	40001118 	.word	0x40001118
    b0c4:	4816      	ldr	r0, [pc, #88]	; (b120 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d4>)
    b0c6:	b510      	push	{r4, lr}
    b0c8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    b0cc:	07c1      	lsls	r1, r0, #31
    b0ce:	d026      	beq.n	b11e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b0d0:	0781      	lsls	r1, r0, #30
    b0d2:	d513      	bpl.n	b0fc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1b0>
    b0d4:	4813      	ldr	r0, [pc, #76]	; (b124 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b0d6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b0da:	f041 0101 	orr.w	r1, r1, #1
    b0de:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b0e2:	4811      	ldr	r0, [pc, #68]	; (b128 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1dc>)
    b0e4:	6800      	ldr	r0, [r0, #0]
    b0e6:	280b      	cmp	r0, #11
    b0e8:	d005      	beq.n	b0f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b0ea:	280a      	cmp	r0, #10
    b0ec:	d003      	beq.n	b0f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b0ee:	2803      	cmp	r0, #3
    b0f0:	d001      	beq.n	b0f6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1aa>
    b0f2:	2802      	cmp	r0, #2
    b0f4:	d113      	bne.n	b11e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b0f6:	f240 514b 	movw	r1, #1355	; 0x54b
    b0fa:	e00d      	b.n	b118 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1cc>
    b0fc:	0740      	lsls	r0, r0, #29
    b0fe:	d50e      	bpl.n	b11e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b100:	4808      	ldr	r0, [pc, #32]	; (b124 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d8>)
    b102:	490a      	ldr	r1, [pc, #40]	; (b12c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e0>)
    b104:	3008      	adds	r0, #8
    b106:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b10a:	4809      	ldr	r0, [pc, #36]	; (b130 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1e4>)
    b10c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b110:	2801      	cmp	r0, #1
    b112:	d104      	bne.n	b11e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1d2>
    b114:	f240 5152 	movw	r1, #1362	; 0x552
    b118:	203e      	movs	r0, #62	; 0x3e
    b11a:	f7f8 fd45 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b11e:	bd10      	pop	{r4, pc}
    b120:	200342dc 	.word	0x200342dc
    b124:	40001000 	.word	0x40001000
    b128:	40001550 	.word	0x40001550
    b12c:	4001f098 	.word	0x4001f098
    b130:	40008000 	.word	0x40008000
    b134:	4808      	ldr	r0, [pc, #32]	; (b158 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x20c>)
    b136:	4601      	mov	r1, r0
    b138:	7a42      	ldrb	r2, [r0, #9]
    b13a:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
    b13e:	b112      	cbz	r2, b146 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x1fa>
    b140:	2a01      	cmp	r2, #1
    b142:	d003      	beq.n	b14c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x200>
    b144:	e006      	b.n	b154 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x208>
    b146:	f041 0102 	orr.w	r1, r1, #2
    b14a:	e001      	b.n	b150 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x204>
    b14c:	f041 0104 	orr.w	r1, r1, #4
    b150:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
    b154:	f7ff bfb6 	b.w	b0c4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x178>
    b158:	200342dc 	.word	0x200342dc
    b15c:	b510      	push	{r4, lr}
    b15e:	f000 fb02 	bl	b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b162:	2800      	cmp	r0, #0
    b164:	d108      	bne.n	b178 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b166:	f000 faee 	bl	b746 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b16a:	2800      	cmp	r0, #0
    b16c:	d104      	bne.n	b178 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x22c>
    b16e:	4803      	ldr	r0, [pc, #12]	; (b17c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x230>)
    b170:	6801      	ldr	r1, [r0, #0]
    b172:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b176:	6001      	str	r1, [r0, #0]
    b178:	bd10      	pop	{r4, pc}
    b17a:	0000      	.short	0x0000
    b17c:	40001568 	.word	0x40001568
    b180:	b538      	push	{r3, r4, r5, lr}
    b182:	4d36      	ldr	r5, [pc, #216]	; (b25c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x310>)
    b184:	2400      	movs	r4, #0
    b186:	7c28      	ldrb	r0, [r5, #16]
    b188:	b120      	cbz	r0, b194 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x248>
    b18a:	4835      	ldr	r0, [pc, #212]	; (b260 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x314>)
    b18c:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b190:	2801      	cmp	r0, #1
    b192:	d007      	beq.n	b1a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x258>
    b194:	2200      	movs	r2, #0
    b196:	7ae9      	ldrb	r1, [r5, #11]
    b198:	4832      	ldr	r0, [pc, #200]	; (b264 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x318>)
    b19a:	2901      	cmp	r1, #1
    b19c:	d004      	beq.n	b1a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x25c>
    b19e:	2902      	cmp	r1, #2
    b1a0:	d00a      	beq.n	b1b8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x26c>
    b1a2:	e019      	b.n	b1d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b1a4:	2201      	movs	r2, #1
    b1a6:	e7f6      	b.n	b196 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x24a>
    b1a8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b1ac:	2901      	cmp	r1, #1
    b1ae:	d001      	beq.n	b1b4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x268>
    b1b0:	2400      	movs	r4, #0
    b1b2:	e011      	b.n	b1d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b1b4:	2408      	movs	r4, #8
    b1b6:	e00f      	b.n	b1d8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x28c>
    b1b8:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b1bc:	2901      	cmp	r1, #1
    b1be:	d006      	beq.n	b1ce <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x282>
    b1c0:	2100      	movs	r1, #0
    b1c2:	4b29      	ldr	r3, [pc, #164]	; (b268 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b1c4:	681b      	ldr	r3, [r3, #0]
    b1c6:	2b01      	cmp	r3, #1
    b1c8:	d003      	beq.n	b1d2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x286>
    b1ca:	2404      	movs	r4, #4
    b1cc:	e002      	b.n	b1d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x288>
    b1ce:	2102      	movs	r1, #2
    b1d0:	e7f7      	b.n	b1c2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x276>
    b1d2:	2400      	movs	r4, #0
    b1d4:	430c      	orrs	r4, r1
    b1d6:	4314      	orrs	r4, r2
    b1d8:	f014 0f0b 	tst.w	r4, #11
    b1dc:	d105      	bne.n	b1ea <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29e>
    b1de:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b1e2:	2901      	cmp	r1, #1
    b1e4:	d006      	beq.n	b1f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2a8>
    b1e6:	2100      	movs	r1, #0
    b1e8:	430c      	orrs	r4, r1
    b1ea:	4920      	ldr	r1, [pc, #128]	; (b26c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x320>)
    b1ec:	7809      	ldrb	r1, [r1, #0]
    b1ee:	07c9      	lsls	r1, r1, #31
    b1f0:	d002      	beq.n	b1f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ac>
    b1f2:	e023      	b.n	b23c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2f0>
    b1f4:	2110      	movs	r1, #16
    b1f6:	e7f7      	b.n	b1e8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x29c>
    b1f8:	491d      	ldr	r1, [pc, #116]	; (b270 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x324>)
    b1fa:	6809      	ldr	r1, [r1, #0]
    b1fc:	f011 0fff 	tst.w	r1, #255	; 0xff
    b200:	d003      	beq.n	b20a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2be>
    b202:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b206:	2a01      	cmp	r2, #1
    b208:	d000      	beq.n	b20c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2c0>
    b20a:	2200      	movs	r2, #0
    b20c:	f885 202a 	strb.w	r2, [r5, #42]	; 0x2a
    b210:	f011 0fff 	tst.w	r1, #255	; 0xff
    b214:	d003      	beq.n	b21e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d2>
    b216:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b21a:	2801      	cmp	r0, #1
    b21c:	d000      	beq.n	b220 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2d4>
    b21e:	2000      	movs	r0, #0
    b220:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    b224:	4810      	ldr	r0, [pc, #64]	; (b268 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x31c>)
    b226:	3010      	adds	r0, #16
    b228:	6800      	ldr	r0, [r0, #0]
    b22a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b22e:	f7ff f857 	bl	a2e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    b232:	2801      	cmp	r0, #1
    b234:	d000      	beq.n	b238 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x2ec>
    b236:	2000      	movs	r0, #0
    b238:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    b23c:	f7ff ff2a 	bl	b094 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x148>
    b240:	06e0      	lsls	r0, r4, #27
    b242:	d506      	bpl.n	b252 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b244:	0720      	lsls	r0, r4, #28
    b246:	d404      	bmi.n	b252 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b248:	7ae8      	ldrb	r0, [r5, #11]
    b24a:	2801      	cmp	r0, #1
    b24c:	d101      	bne.n	b252 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x306>
    b24e:	f044 0420 	orr.w	r4, r4, #32
    b252:	4808      	ldr	r0, [pc, #32]	; (b274 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x328>)
    b254:	6800      	ldr	r0, [r0, #0]
    b256:	9000      	str	r0, [sp, #0]
    b258:	4620      	mov	r0, r4
    b25a:	bd38      	pop	{r3, r4, r5, pc}
    b25c:	200342dc 	.word	0x200342dc
    b260:	40008000 	.word	0x40008000
    b264:	40001000 	.word	0x40001000
    b268:	40001400 	.word	0x40001400
    b26c:	20000280 	.word	0x20000280
    b270:	40001640 	.word	0x40001640
    b274:	40008144 	.word	0x40008144
    b278:	4808      	ldr	r0, [pc, #32]	; (b29c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x350>)
    b27a:	b510      	push	{r4, lr}
    b27c:	6800      	ldr	r0, [r0, #0]
    b27e:	f000 000f 	and.w	r0, r0, #15
    b282:	2803      	cmp	r0, #3
    b284:	d006      	beq.n	b294 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x348>
    b286:	2804      	cmp	r0, #4
    b288:	d006      	beq.n	b298 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x34c>
    b28a:	f240 2136 	movw	r1, #566	; 0x236
    b28e:	203e      	movs	r0, #62	; 0x3e
    b290:	f7f8 fc8a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b294:	2001      	movs	r0, #1
    b296:	bd10      	pop	{r4, pc}
    b298:	2002      	movs	r0, #2
    b29a:	bd10      	pop	{r4, pc}
    b29c:	40001510 	.word	0x40001510
    b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2a4:	4c25      	ldr	r4, [pc, #148]	; (b33c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f0>)
    b2a6:	460d      	mov	r5, r1
    b2a8:	7aa2      	ldrb	r2, [r4, #10]
    b2aa:	b19a      	cbz	r2, b2d4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x388>
    b2ac:	7b21      	ldrb	r1, [r4, #12]
    b2ae:	078b      	lsls	r3, r1, #30
    b2b0:	d503      	bpl.n	b2ba <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b2b2:	0783      	lsls	r3, r0, #30
    b2b4:	d501      	bpl.n	b2ba <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x36e>
    b2b6:	0743      	lsls	r3, r0, #29
    b2b8:	d41c      	bmi.n	b2f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2ba:	06cb      	lsls	r3, r1, #27
    b2bc:	d505      	bpl.n	b2ca <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b2be:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    b2c2:	b113      	cbz	r3, b2ca <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x37e>
    b2c4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    b2c8:	b1a3      	cbz	r3, b2f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2ca:	070b      	lsls	r3, r1, #28
    b2cc:	d50b      	bpl.n	b2e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b2ce:	7f23      	ldrb	r3, [r4, #28]
    b2d0:	b983      	cbnz	r3, b2f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2d2:	e008      	b.n	b2e6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x39a>
    b2d4:	491a      	ldr	r1, [pc, #104]	; (b340 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3f4>)
    b2d6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b2da:	6008      	str	r0, [r1, #0]
    b2dc:	f000 f868 	bl	b3b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b2e0:	2000      	movs	r0, #0
    b2e2:	7420      	strb	r0, [r4, #16]
    b2e4:	e028      	b.n	b338 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b2e6:	0749      	lsls	r1, r1, #29
    b2e8:	d501      	bpl.n	b2ee <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a2>
    b2ea:	7f61      	ldrb	r1, [r4, #29]
    b2ec:	b111      	cbz	r1, b2f4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a8>
    b2ee:	f010 0f11 	tst.w	r0, #17
    b2f2:	d002      	beq.n	b2fa <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ae>
    b2f4:	f7ff f98a 	bl	a60c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b2f8:	e01e      	b.n	b338 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3ec>
    b2fa:	2a01      	cmp	r2, #1
    b2fc:	d001      	beq.n	b302 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b6>
    b2fe:	2601      	movs	r6, #1
    b300:	e000      	b.n	b304 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3b8>
    b302:	2600      	movs	r6, #0
    b304:	7a60      	ldrb	r0, [r4, #9]
    b306:	2801      	cmp	r0, #1
    b308:	d00e      	beq.n	b328 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3dc>
    b30a:	2700      	movs	r7, #0
    b30c:	f000 f850 	bl	b3b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x464>
    b310:	2196      	movs	r1, #150	; 0x96
    b312:	4630      	mov	r0, r6
    b314:	f000 f864 	bl	b3e0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x494>
    b318:	4601      	mov	r1, r0
    b31a:	b14f      	cbz	r7, b330 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e4>
    b31c:	353b      	adds	r5, #59	; 0x3b
    b31e:	428d      	cmp	r5, r1
    b320:	d904      	bls.n	b32c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e0>
    b322:	2000      	movs	r0, #0
    b324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b328:	2701      	movs	r7, #1
    b32a:	e7ef      	b.n	b30c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3c0>
    b32c:	2001      	movs	r0, #1
    b32e:	7260      	strb	r0, [r4, #9]
    b330:	7b62      	ldrb	r2, [r4, #13]
    b332:	4630      	mov	r0, r6
    b334:	f7ff fc1c 	bl	ab70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b338:	2001      	movs	r0, #1
    b33a:	e7f3      	b.n	b324 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3d8>
    b33c:	200342dc 	.word	0x200342dc
    b340:	4001f508 	.word	0x4001f508
    b344:	4805      	ldr	r0, [pc, #20]	; (b35c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x410>)
    b346:	2100      	movs	r1, #0
    b348:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b34c:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b350:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b354:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b358:	4770      	bx	lr
    b35a:	0000      	.short	0x0000
    b35c:	40001000 	.word	0x40001000
    b360:	4804      	ldr	r0, [pc, #16]	; (b374 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x428>)
    b362:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b364:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b368:	6301      	str	r1, [r0, #48]	; 0x30
    b36a:	4903      	ldr	r1, [pc, #12]	; (b378 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x42c>)
    b36c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b370:	6008      	str	r0, [r1, #0]
    b372:	4770      	bx	lr
    b374:	200342dc 	.word	0x200342dc
    b378:	4001f504 	.word	0x4001f504
    b37c:	4905      	ldr	r1, [pc, #20]	; (b394 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b37e:	2000      	movs	r0, #0
    b380:	6008      	str	r0, [r1, #0]
    b382:	1f09      	subs	r1, r1, #4
    b384:	6008      	str	r0, [r1, #0]
    b386:	1f09      	subs	r1, r1, #4
    b388:	6008      	str	r0, [r1, #0]
    b38a:	4902      	ldr	r1, [pc, #8]	; (b394 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x448>)
    b38c:	1d09      	adds	r1, r1, #4
    b38e:	6008      	str	r0, [r1, #0]
    b390:	4770      	bx	lr
    b392:	0000      	.short	0x0000
    b394:	40008548 	.word	0x40008548
    b398:	4903      	ldr	r1, [pc, #12]	; (b3a8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45c>)
    b39a:	7a49      	ldrb	r1, [r1, #9]
    b39c:	2900      	cmp	r1, #0
    b39e:	d102      	bne.n	b3a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x45a>
    b3a0:	4902      	ldr	r1, [pc, #8]	; (b3ac <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x460>)
    b3a2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b3a6:	4770      	bx	lr
    b3a8:	200342dc 	.word	0x200342dc
    b3ac:	4001f098 	.word	0x4001f098
    b3b0:	4803      	ldr	r0, [pc, #12]	; (b3c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x474>)
    b3b2:	2100      	movs	r1, #0
    b3b4:	7241      	strb	r1, [r0, #9]
    b3b6:	7281      	strb	r1, [r0, #10]
    b3b8:	72c1      	strb	r1, [r0, #11]
    b3ba:	2101      	movs	r1, #1
    b3bc:	7301      	strb	r1, [r0, #12]
    b3be:	4770      	bx	lr
    b3c0:	200342dc 	.word	0x200342dc
    b3c4:	4a05      	ldr	r2, [pc, #20]	; (b3dc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x490>)
    b3c6:	7a52      	ldrb	r2, [r2, #9]
    b3c8:	2a01      	cmp	r2, #1
    b3ca:	d006      	beq.n	b3da <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48e>
    b3cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b3d0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b3d4:	fbb1 f1f2 	udiv	r1, r1, r2
    b3d8:	1a40      	subs	r0, r0, r1
    b3da:	4770      	bx	lr
    b3dc:	200342dc 	.word	0x200342dc
    b3e0:	b570      	push	{r4, r5, r6, lr}
    b3e2:	4c13      	ldr	r4, [pc, #76]	; (b430 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e4>)
    b3e4:	4603      	mov	r3, r0
    b3e6:	460d      	mov	r5, r1
    b3e8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    b3ec:	2000      	movs	r0, #0
    b3ee:	b15a      	cbz	r2, b408 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4bc>
    b3f0:	4621      	mov	r1, r4
    b3f2:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    b3f6:	b163      	cbz	r3, b412 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c6>
    b3f8:	2b01      	cmp	r3, #1
    b3fa:	d111      	bne.n	b420 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d4>
    b3fc:	2a01      	cmp	r2, #1
    b3fe:	4628      	mov	r0, r5
    b400:	d012      	beq.n	b428 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4dc>
    b402:	f003 fed7 	bl	f1b4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b406:	e009      	b.n	b41c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b408:	f240 7186 	movw	r1, #1926	; 0x786
    b40c:	203e      	movs	r0, #62	; 0x3e
    b40e:	f7f8 fbcb 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b412:	2a01      	cmp	r2, #1
    b414:	4628      	mov	r0, r5
    b416:	d004      	beq.n	b422 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d6>
    b418:	f003 feda 	bl	f1d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b41c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b41e:	4408      	add	r0, r1
    b420:	bd70      	pop	{r4, r5, r6, pc}
    b422:	f003 feef 	bl	f204 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b426:	e7f9      	b.n	b41c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b428:	f003 fedd 	bl	f1e6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b42c:	e7f6      	b.n	b41c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4d0>
    b42e:	0000      	.short	0x0000
    b430:	200342dc 	.word	0x200342dc
    b434:	b510      	push	{r4, lr}
    b436:	2200      	movs	r2, #0
    b438:	2901      	cmp	r1, #1
    b43a:	d008      	beq.n	b44e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x502>
    b43c:	2902      	cmp	r1, #2
    b43e:	d004      	beq.n	b44a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4fe>
    b440:	f44f 7121 	mov.w	r1, #644	; 0x284
    b444:	203e      	movs	r0, #62	; 0x3e
    b446:	f7f8 fbaf 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b44a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b44e:	4905      	ldr	r1, [pc, #20]	; (b464 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x518>)
    b450:	430a      	orrs	r2, r1
    b452:	4905      	ldr	r1, [pc, #20]	; (b468 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b454:	600a      	str	r2, [r1, #0]
    b456:	4905      	ldr	r1, [pc, #20]	; (b46c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x520>)
    b458:	4308      	orrs	r0, r1
    b45a:	4903      	ldr	r1, [pc, #12]	; (b468 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x51c>)
    b45c:	1d09      	adds	r1, r1, #4
    b45e:	6008      	str	r0, [r1, #0]
    b460:	bd10      	pop	{r4, pc}
    b462:	0000      	.short	0x0000
    b464:	00100108 	.word	0x00100108
    b468:	40001514 	.word	0x40001514
    b46c:	02030000 	.word	0x02030000

0000b470 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b470:	4901      	ldr	r1, [pc, #4]	; (b478 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b472:	b2c0      	uxtb	r0, r0
    b474:	6008      	str	r0, [r1, #0]
    b476:	4770      	bx	lr
    b478:	4000150c 	.word	0x4000150c

0000b47c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b47c:	b510      	push	{r4, lr}
    b47e:	4907      	ldr	r1, [pc, #28]	; (b49c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b480:	2801      	cmp	r0, #1
    b482:	d005      	beq.n	b490 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b484:	2802      	cmp	r0, #2
    b486:	d005      	beq.n	b494 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b488:	2197      	movs	r1, #151	; 0x97
    b48a:	203f      	movs	r0, #63	; 0x3f
    b48c:	f7f8 fb8c 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b490:	2003      	movs	r0, #3
    b492:	e000      	b.n	b496 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b494:	2004      	movs	r0, #4
    b496:	6008      	str	r0, [r1, #0]
    b498:	bd10      	pop	{r4, pc}
    b49a:	0000      	.short	0x0000
    b49c:	40001510 	.word	0x40001510

0000b4a0 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b4a0:	4770      	bx	lr
    b4a2:	2100      	movs	r1, #0
    b4a4:	7081      	strb	r1, [r0, #2]
    b4a6:	7001      	strb	r1, [r0, #0]
    b4a8:	7041      	strb	r1, [r0, #1]
    b4aa:	4770      	bx	lr

0000b4ac <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b4ac:	b570      	push	{r4, r5, r6, lr}
    b4ae:	f7f4 ffbb 	bl	428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b4b2:	4605      	mov	r5, r0
    b4b4:	2400      	movs	r4, #0
    b4b6:	e006      	b.n	b4c6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b4b8:	4620      	mov	r0, r4
    b4ba:	f7f4 ffbb 	bl	434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b4be:	f7ff fff0 	bl	b4a2 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b4c2:	1c64      	adds	r4, r4, #1
    b4c4:	b2e4      	uxtb	r4, r4
    b4c6:	42ac      	cmp	r4, r5
    b4c8:	d3f6      	bcc.n	b4b8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b4ca:	bd70      	pop	{r4, r5, r6, pc}

0000b4cc <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    b4cc:	2000      	movs	r0, #0
    b4ce:	f7f7 bd13 	b.w	2ef8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    b4d2:	b510      	push	{r4, lr}
    b4d4:	f7f7 f9fc 	bl	28d0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b4dc:	f000 b80b 	b.w	b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000b4e0 <sym_BE2HGIHF5RDQALAHNCCVX54XTGKEN4KZFXFBHBQ>:
    b4e0:	0a41      	lsrs	r1, r0, #9
    b4e2:	f643 5209 	movw	r2, #15625	; 0x3d09
    b4e6:	4351      	muls	r1, r2
    b4e8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b4ec:	fb10 f002 	smulbb	r0, r0, r2
    b4f0:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b4f4:	4770      	bx	lr

0000b4f6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    b4f6:	0a41      	lsrs	r1, r0, #9
    b4f8:	f643 5209 	movw	r2, #15625	; 0x3d09
    b4fc:	4351      	muls	r1, r2
    b4fe:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b502:	fb10 f002 	smulbb	r0, r0, r2
    b506:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b50a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b50e:	4770      	bx	lr

0000b510 <MPSL_IRQ_RADIO_Handler>:
    b510:	f7f6 b82a 	b.w	1568 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    b514:	2800      	cmp	r0, #0
    b516:	db09      	blt.n	b52c <MPSL_IRQ_RADIO_Handler+0x1c>
    b518:	f000 021f 	and.w	r2, r0, #31
    b51c:	2101      	movs	r1, #1
    b51e:	4091      	lsls	r1, r2
    b520:	0940      	lsrs	r0, r0, #5
    b522:	0080      	lsls	r0, r0, #2
    b524:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b528:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b52c:	4770      	bx	lr
    b52e:	2800      	cmp	r0, #0
    b530:	db0d      	blt.n	b54e <MPSL_IRQ_RADIO_Handler+0x3e>
    b532:	f000 021f 	and.w	r2, r0, #31
    b536:	2101      	movs	r1, #1
    b538:	4091      	lsls	r1, r2
    b53a:	0940      	lsrs	r0, r0, #5
    b53c:	0080      	lsls	r0, r0, #2
    b53e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b542:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b546:	f3bf 8f4f 	dsb	sy
    b54a:	f3bf 8f6f 	isb	sy
    b54e:	4770      	bx	lr

0000b550 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b550:	b570      	push	{r4, r5, r6, lr}
    b552:	4602      	mov	r2, r0
    b554:	2000      	movs	r0, #0
    b556:	2900      	cmp	r1, #0
    b558:	d01d      	beq.n	b596 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b55a:	fba2 0101 	umull	r0, r1, r2, r1
    b55e:	0a40      	lsrs	r0, r0, #9
    b560:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b564:	0a49      	lsrs	r1, r1, #9
    b566:	1c40      	adds	r0, r0, #1
    b568:	f141 0100 	adc.w	r1, r1, #0
    b56c:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b570:	1883      	adds	r3, r0, r2
    b572:	f141 0100 	adc.w	r1, r1, #0
    b576:	1c5b      	adds	r3, r3, #1
    b578:	f141 0400 	adc.w	r4, r1, #0
    b57c:	2100      	movs	r1, #0
    b57e:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    b582:	41a1      	sbcs	r1, r4
    b584:	d203      	bcs.n	b58e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b586:	2171      	movs	r1, #113	; 0x71
    b588:	206d      	movs	r0, #109	; 0x6d
    b58a:	f7f8 f877 	bl	367c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b58e:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b592:	fbb0 f0f2 	udiv	r0, r0, r2
    b596:	bd70      	pop	{r4, r5, r6, pc}
    b598:	5840      	ldr	r0, [r0, r1]
    b59a:	2800      	cmp	r0, #0
    b59c:	d000      	beq.n	b5a0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b59e:	2001      	movs	r0, #1
    b5a0:	4770      	bx	lr
    b5a2:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b5a6:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b5aa:	f002 0201 	and.w	r2, r2, #1
    b5ae:	03c0      	lsls	r0, r0, #15
    b5b0:	d503      	bpl.n	b5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b5b2:	428a      	cmp	r2, r1
    b5b4:	d101      	bne.n	b5ba <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b5b6:	2001      	movs	r0, #1
    b5b8:	4770      	bx	lr
    b5ba:	2000      	movs	r0, #0
    b5bc:	4770      	bx	lr

0000b5be <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b5be:	b510      	push	{r4, lr}
    b5c0:	2101      	movs	r1, #1
    b5c2:	0788      	lsls	r0, r1, #30
    b5c4:	f7f8 f818 	bl	35f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b5c8:	2800      	cmp	r0, #0
    b5ca:	d000      	beq.n	b5ce <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b5cc:	2001      	movs	r0, #1
    b5ce:	bd10      	pop	{r4, pc}

0000b5d0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b5d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b5d4:	2101      	movs	r1, #1
    b5d6:	6001      	str	r1, [r0, #0]
    b5d8:	4770      	bx	lr

0000b5da <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b5da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b5de:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b5e2:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b5e6:	f002 0203 	and.w	r2, r2, #3
    b5ea:	03c9      	lsls	r1, r1, #15
    b5ec:	d503      	bpl.n	b5f6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b5ee:	4282      	cmp	r2, r0
    b5f0:	d101      	bne.n	b5f6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b5f2:	2001      	movs	r0, #1
    b5f4:	4770      	bx	lr
    b5f6:	2000      	movs	r0, #0
    b5f8:	4770      	bx	lr

0000b5fa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b5fa:	b510      	push	{r4, lr}
    b5fc:	2100      	movs	r1, #0
    b5fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b602:	f7f7 fff9 	bl	35f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b606:	2800      	cmp	r0, #0
    b608:	d000      	beq.n	b60c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b60a:	2001      	movs	r0, #1
    b60c:	bd10      	pop	{r4, pc}
    b60e:	2800      	cmp	r0, #0
    b610:	db09      	blt.n	b626 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b612:	f000 021f 	and.w	r2, r0, #31
    b616:	2101      	movs	r1, #1
    b618:	4091      	lsls	r1, r2
    b61a:	0940      	lsrs	r0, r0, #5
    b61c:	0080      	lsls	r0, r0, #2
    b61e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b622:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b626:	4770      	bx	lr
    b628:	2800      	cmp	r0, #0
    b62a:	db0d      	blt.n	b648 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b62c:	f000 021f 	and.w	r2, r0, #31
    b630:	2101      	movs	r1, #1
    b632:	4091      	lsls	r1, r2
    b634:	0940      	lsrs	r0, r0, #5
    b636:	0080      	lsls	r0, r0, #2
    b638:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b63c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b640:	f3bf 8f4f 	dsb	sy
    b644:	f3bf 8f6f 	isb	sy
    b648:	4770      	bx	lr
    b64a:	1000      	.short	0x1000
    b64c:	00fa0002 	.word	0x00fa0002
    b650:	8aac0000 	.word	0x8aac0000
    b654:	6d0bcd32 	.word	0x6d0bcd32
    b658:	d80b09dd 	.word	0xd80b09dd
    b65c:	2eb78494 	.word	0x2eb78494
    b660:	1808bff3 	.word	0x1808bff3
    b664:	7bd8      	.short	0x7bd8
    b666:	2800      	cmp	r0, #0
    b668:	db09      	blt.n	b67e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    b66a:	f000 021f 	and.w	r2, r0, #31
    b66e:	2101      	movs	r1, #1
    b670:	4091      	lsls	r1, r2
    b672:	0940      	lsrs	r0, r0, #5
    b674:	0080      	lsls	r0, r0, #2
    b676:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b67a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b67e:	4770      	bx	lr

0000b680 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    b680:	f3ef 8110 	mrs	r1, PRIMASK
    b684:	b672      	cpsid	i
    b686:	7802      	ldrb	r2, [r0, #0]
    b688:	2a01      	cmp	r2, #1
    b68a:	d001      	beq.n	b690 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    b68c:	2201      	movs	r2, #1
    b68e:	e000      	b.n	b692 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    b690:	2200      	movs	r2, #0
    b692:	2301      	movs	r3, #1
    b694:	7003      	strb	r3, [r0, #0]
    b696:	b901      	cbnz	r1, b69a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    b698:	b662      	cpsie	i
    b69a:	b10a      	cbz	r2, b6a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    b69c:	2000      	movs	r0, #0
    b69e:	4770      	bx	lr
    b6a0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b6a4:	4770      	bx	lr

0000b6a6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    b6a6:	2100      	movs	r1, #0
    b6a8:	7001      	strb	r1, [r0, #0]
    b6aa:	4608      	mov	r0, r1
    b6ac:	4770      	bx	lr

0000b6ae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    b6ae:	f3ef 8110 	mrs	r1, PRIMASK
    b6b2:	b672      	cpsid	i
    b6b4:	2200      	movs	r2, #0
    b6b6:	7002      	strb	r2, [r0, #0]
    b6b8:	b901      	cbnz	r1, b6bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    b6ba:	b662      	cpsie	i
    b6bc:	2000      	movs	r0, #0
    b6be:	4770      	bx	lr

0000b6c0 <mpsl_low_priority_process>:
    b6c0:	f7f8 b8c8 	b.w	3854 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000b6c4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    b6c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b6cc:	280f      	cmp	r0, #15
    b6ce:	d001      	beq.n	b6d4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    b6d0:	2000      	movs	r0, #0
    b6d2:	4770      	bx	lr
    b6d4:	2001      	movs	r0, #1
    b6d6:	4770      	bx	lr

0000b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    b6d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b6e0:	280a      	cmp	r0, #10
    b6e2:	d001      	beq.n	b6e8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    b6e4:	2000      	movs	r0, #0
    b6e6:	4770      	bx	lr
    b6e8:	2001      	movs	r0, #1
    b6ea:	4770      	bx	lr

0000b6ec <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    b6ec:	b500      	push	{lr}
    b6ee:	f7ff fff3 	bl	b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b6f2:	b120      	cbz	r0, b6fe <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    b6f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b6f8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b6fc:	b108      	cbz	r0, b702 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    b6fe:	2000      	movs	r0, #0
    b700:	bd00      	pop	{pc}
    b702:	2001      	movs	r0, #1
    b704:	bd00      	pop	{pc}

0000b706 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    b706:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b70a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b70e:	280e      	cmp	r0, #14
    b710:	d001      	beq.n	b716 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    b712:	2000      	movs	r0, #0
    b714:	4770      	bx	lr
    b716:	2001      	movs	r0, #1
    b718:	4770      	bx	lr

0000b71a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    b71a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b71e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b722:	2810      	cmp	r0, #16
    b724:	d001      	beq.n	b72a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    b726:	2000      	movs	r0, #0
    b728:	4770      	bx	lr
    b72a:	2001      	movs	r0, #1
    b72c:	4770      	bx	lr

0000b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    b72e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b732:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b736:	2806      	cmp	r0, #6
    b738:	d003      	beq.n	b742 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b73a:	1c40      	adds	r0, r0, #1
    b73c:	d001      	beq.n	b742 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b73e:	2000      	movs	r0, #0
    b740:	4770      	bx	lr
    b742:	2001      	movs	r0, #1
    b744:	4770      	bx	lr

0000b746 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    b746:	b500      	push	{lr}
    b748:	f7ff fff1 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b74c:	b148      	cbz	r0, b762 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b74e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b752:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b756:	2806      	cmp	r0, #6
    b758:	d303      	bcc.n	b762 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b75a:	1c40      	adds	r0, r0, #1
    b75c:	d001      	beq.n	b762 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b75e:	2001      	movs	r0, #1
    b760:	bd00      	pop	{pc}
    b762:	2000      	movs	r0, #0
    b764:	bd00      	pop	{pc}

0000b766 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    b766:	b500      	push	{lr}
    b768:	f7ff ffe1 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b76c:	b138      	cbz	r0, b77e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    b76e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b772:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b776:	2806      	cmp	r0, #6
    b778:	d303      	bcc.n	b782 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b77a:	1c40      	adds	r0, r0, #1
    b77c:	d001      	beq.n	b782 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b77e:	2000      	movs	r0, #0
    b780:	bd00      	pop	{pc}
    b782:	2001      	movs	r0, #1
    b784:	bd00      	pop	{pc}

0000b786 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    b786:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b78a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b78e:	280d      	cmp	r0, #13
    b790:	d001      	beq.n	b796 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    b792:	2000      	movs	r0, #0
    b794:	4770      	bx	lr
    b796:	2001      	movs	r0, #1
    b798:	4770      	bx	lr

0000b79a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    b79a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b79e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b7a2:	2808      	cmp	r0, #8
    b7a4:	d001      	beq.n	b7aa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    b7a6:	2000      	movs	r0, #0
    b7a8:	4770      	bx	lr
    b7aa:	2001      	movs	r0, #1
    b7ac:	4770      	bx	lr

0000b7ae <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    b7ae:	2a00      	cmp	r2, #0
    b7b0:	bf04      	itt	eq
    b7b2:	2000      	moveq	r0, #0
    b7b4:	4770      	bxeq	lr
    b7b6:	1e52      	subs	r2, r2, #1
    b7b8:	d007      	beq.n	b7ca <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    b7ba:	7803      	ldrb	r3, [r0, #0]
    b7bc:	f891 c000 	ldrb.w	ip, [r1]
    b7c0:	4563      	cmp	r3, ip
    b7c2:	bf04      	itt	eq
    b7c4:	1c40      	addeq	r0, r0, #1
    b7c6:	1c49      	addeq	r1, r1, #1
    b7c8:	d0f5      	beq.n	b7b6 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    b7ca:	7800      	ldrb	r0, [r0, #0]
    b7cc:	7809      	ldrb	r1, [r1, #0]
    b7ce:	1a40      	subs	r0, r0, r1
    b7d0:	4770      	bx	lr

0000b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    b7d2:	b4f0      	push	{r4, r5, r6, r7}
    b7d4:	ea80 0c01 	eor.w	ip, r0, r1
    b7d8:	4603      	mov	r3, r0
    b7da:	f01c 0f03 	tst.w	ip, #3
    b7de:	d13c      	bne.n	b85a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b7e0:	f013 0f03 	tst.w	r3, #3
    b7e4:	d00b      	beq.n	b7fe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    b7e6:	2a00      	cmp	r2, #0
    b7e8:	bf04      	itt	eq
    b7ea:	bcf0      	popeq	{r4, r5, r6, r7}
    b7ec:	4770      	bxeq	lr
    b7ee:	f811 cb01 	ldrb.w	ip, [r1], #1
    b7f2:	f803 cb01 	strb.w	ip, [r3], #1
    b7f6:	1e52      	subs	r2, r2, #1
    b7f8:	f013 0f03 	tst.w	r3, #3
    b7fc:	d1f3      	bne.n	b7e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    b7fe:	2a03      	cmp	r2, #3
    b800:	d94f      	bls.n	b8a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b802:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b806:	d24c      	bcs.n	b8a2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b808:	f1c2 0c00 	rsb	ip, r2, #0
    b80c:	ea4f 74ec 	mov.w	r4, ip, asr #31
    b810:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    b814:	ea4f 0cac 	mov.w	ip, ip, asr #2
    b818:	f1cc 0c00 	rsb	ip, ip, #0
    b81c:	f1bc 0f00 	cmp.w	ip, #0
    b820:	dd1b      	ble.n	b85a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b822:	1f0d      	subs	r5, r1, #4
    b824:	1f1c      	subs	r4, r3, #4
    b826:	f01c 0f01 	tst.w	ip, #1
    b82a:	d003      	beq.n	b834 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    b82c:	f855 6f04 	ldr.w	r6, [r5, #4]!
    b830:	f844 6f04 	str.w	r6, [r4, #4]!
    b834:	ea5f 066c 	movs.w	r6, ip, asr #1
    b838:	d007      	beq.n	b84a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    b83a:	686f      	ldr	r7, [r5, #4]
    b83c:	6067      	str	r7, [r4, #4]
    b83e:	f855 7f08 	ldr.w	r7, [r5, #8]!
    b842:	f844 7f08 	str.w	r7, [r4, #8]!
    b846:	1e76      	subs	r6, r6, #1
    b848:	d1f7      	bne.n	b83a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    b84a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    b84e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    b852:	f1cc 0c00 	rsb	ip, ip, #0
    b856:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    b85a:	2a00      	cmp	r2, #0
    b85c:	bf04      	itt	eq
    b85e:	bcf0      	popeq	{r4, r5, r6, r7}
    b860:	4770      	bxeq	lr
    b862:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b866:	d226      	bcs.n	b8b6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b868:	2a00      	cmp	r2, #0
    b86a:	bfdc      	itt	le
    b86c:	bcf0      	pople	{r4, r5, r6, r7}
    b86e:	4770      	bxle	lr
    b870:	1e49      	subs	r1, r1, #1
    b872:	1e5b      	subs	r3, r3, #1
    b874:	f012 0f01 	tst.w	r2, #1
    b878:	d003      	beq.n	b882 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    b87a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b87e:	f803 cf01 	strb.w	ip, [r3, #1]!
    b882:	1052      	asrs	r2, r2, #1
    b884:	bf04      	itt	eq
    b886:	bcf0      	popeq	{r4, r5, r6, r7}
    b888:	4770      	bxeq	lr
    b88a:	f891 c001 	ldrb.w	ip, [r1, #1]
    b88e:	f883 c001 	strb.w	ip, [r3, #1]
    b892:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    b896:	f803 cf02 	strb.w	ip, [r3, #2]!
    b89a:	1e52      	subs	r2, r2, #1
    b89c:	d1f5      	bne.n	b88a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    b89e:	bcf0      	pop	{r4, r5, r6, r7}
    b8a0:	4770      	bx	lr
    b8a2:	2a04      	cmp	r2, #4
    b8a4:	d3d9      	bcc.n	b85a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b8a6:	f851 cb04 	ldr.w	ip, [r1], #4
    b8aa:	1f12      	subs	r2, r2, #4
    b8ac:	f843 cb04 	str.w	ip, [r3], #4
    b8b0:	2a04      	cmp	r2, #4
    b8b2:	d2f8      	bcs.n	b8a6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    b8b4:	e7d1      	b.n	b85a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b8b6:	f811 cb01 	ldrb.w	ip, [r1], #1
    b8ba:	f803 cb01 	strb.w	ip, [r3], #1
    b8be:	1e52      	subs	r2, r2, #1
    b8c0:	d1f9      	bne.n	b8b6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b8c2:	bcf0      	pop	{r4, r5, r6, r7}
    b8c4:	4770      	bx	lr

0000b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    b8c6:	b470      	push	{r4, r5, r6}
    b8c8:	4603      	mov	r3, r0
    b8ca:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    b8ce:	f010 0f03 	tst.w	r0, #3
    b8d2:	d009      	beq.n	b8e8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    b8d4:	2a00      	cmp	r2, #0
    b8d6:	bf04      	itt	eq
    b8d8:	bc70      	popeq	{r4, r5, r6}
    b8da:	4770      	bxeq	lr
    b8dc:	f803 cb01 	strb.w	ip, [r3], #1
    b8e0:	1e52      	subs	r2, r2, #1
    b8e2:	f013 0f03 	tst.w	r3, #3
    b8e6:	d1f5      	bne.n	b8d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    b8e8:	b2c9      	uxtb	r1, r1
    b8ea:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b8ee:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    b8f2:	2a03      	cmp	r2, #3
    b8f4:	d939      	bls.n	b96a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b8f6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b8fa:	d236      	bcs.n	b96a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    b8fc:	4251      	negs	r1, r2
    b8fe:	17cc      	asrs	r4, r1, #31
    b900:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    b904:	1089      	asrs	r1, r1, #2
    b906:	424e      	negs	r6, r1
    b908:	2e00      	cmp	r6, #0
    b90a:	dd11      	ble.n	b930 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b90c:	1f19      	subs	r1, r3, #4
    b90e:	f016 0f01 	tst.w	r6, #1
    b912:	bf18      	it	ne
    b914:	f841 5f04 	strne.w	r5, [r1, #4]!
    b918:	1074      	asrs	r4, r6, #1
    b91a:	d004      	beq.n	b926 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    b91c:	604d      	str	r5, [r1, #4]
    b91e:	f841 5f08 	str.w	r5, [r1, #8]!
    b922:	1e64      	subs	r4, r4, #1
    b924:	d1fa      	bne.n	b91c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    b926:	4271      	negs	r1, r6
    b928:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    b92c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    b930:	2a00      	cmp	r2, #0
    b932:	bf04      	itt	eq
    b934:	bc70      	popeq	{r4, r5, r6}
    b936:	4770      	bxeq	lr
    b938:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b93c:	d21d      	bcs.n	b97a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b93e:	2a00      	cmp	r2, #0
    b940:	bfdc      	itt	le
    b942:	bc70      	pople	{r4, r5, r6}
    b944:	4770      	bxle	lr
    b946:	1e59      	subs	r1, r3, #1
    b948:	f012 0f01 	tst.w	r2, #1
    b94c:	bf18      	it	ne
    b94e:	f801 cf01 	strbne.w	ip, [r1, #1]!
    b952:	1052      	asrs	r2, r2, #1
    b954:	bf04      	itt	eq
    b956:	bc70      	popeq	{r4, r5, r6}
    b958:	4770      	bxeq	lr
    b95a:	f881 c001 	strb.w	ip, [r1, #1]
    b95e:	f801 cf02 	strb.w	ip, [r1, #2]!
    b962:	1e52      	subs	r2, r2, #1
    b964:	d1f9      	bne.n	b95a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    b966:	bc70      	pop	{r4, r5, r6}
    b968:	4770      	bx	lr
    b96a:	2a04      	cmp	r2, #4
    b96c:	d3e0      	bcc.n	b930 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b96e:	1f12      	subs	r2, r2, #4
    b970:	f843 5b04 	str.w	r5, [r3], #4
    b974:	2a04      	cmp	r2, #4
    b976:	d2fa      	bcs.n	b96e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    b978:	e7da      	b.n	b930 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    b97a:	f803 cb01 	strb.w	ip, [r3], #1
    b97e:	1e52      	subs	r2, r2, #1
    b980:	d1fb      	bne.n	b97a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    b982:	bc70      	pop	{r4, r5, r6}
    b984:	4770      	bx	lr
    b986:	f04f 30ff 	mov.w	r0, #4294967295
    b98a:	4770      	bx	lr
    b98c:	2000      	movs	r0, #0
    b98e:	4770      	bx	lr
    b990:	2000      	movs	r0, #0
    b992:	4770      	bx	lr
    b994:	f04f 30ff 	mov.w	r0, #4294967295
    b998:	4770      	bx	lr
    b99a:	4770      	bx	lr
    b99c:	4770      	bx	lr
    b99e:	2000      	movs	r0, #0
    b9a0:	4770      	bx	lr
    b9a2:	f04f 30ff 	mov.w	r0, #4294967295
    b9a6:	4770      	bx	lr
    b9a8:	f04f 30ff 	mov.w	r0, #4294967295
    b9ac:	4770      	bx	lr
    b9ae:	2100      	movs	r1, #0
    b9b0:	7001      	strb	r1, [r0, #0]
    b9b2:	4770      	bx	lr
    b9b4:	f04f 30ff 	mov.w	r0, #4294967295
    b9b8:	4770      	bx	lr
    b9ba:	f04f 30ff 	mov.w	r0, #4294967295
    b9be:	4770      	bx	lr
    b9c0:	2000      	movs	r0, #0
    b9c2:	4770      	bx	lr
    b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9c6:	4604      	mov	r4, r0
    b9c8:	f100 0003 	add.w	r0, r0, #3
    b9cc:	f020 0003 	bic.w	r0, r0, #3
    b9d0:	0016      	movs	r6, r2
    b9d2:	9000      	str	r0, [sp, #0]
    b9d4:	460d      	mov	r5, r1
    b9d6:	788a      	ldrb	r2, [r1, #2]
    b9d8:	7849      	ldrb	r1, [r1, #1]
    b9da:	d000      	beq.n	b9de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    b9dc:	2000      	movs	r0, #0
    b9de:	f7f8 faf7 	bl	3fd0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    b9e2:	9900      	ldr	r1, [sp, #0]
    b9e4:	4408      	add	r0, r1
    b9e6:	9000      	str	r0, [sp, #0]
    b9e8:	78a9      	ldrb	r1, [r5, #2]
    b9ea:	b139      	cbz	r1, b9fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    b9ec:	89ea      	ldrh	r2, [r5, #14]
    b9ee:	b106      	cbz	r6, b9f2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x12c>
    b9f0:	2000      	movs	r0, #0
    b9f2:	f7f8 fd53 	bl	449c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    b9f6:	9900      	ldr	r1, [sp, #0]
    b9f8:	4408      	add	r0, r1
    b9fa:	9000      	str	r0, [sp, #0]
    b9fc:	4632      	mov	r2, r6
    b9fe:	4629      	mov	r1, r5
    ba00:	4668      	mov	r0, sp
    ba02:	f000 f807 	bl	ba14 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14e>
    ba06:	9800      	ldr	r0, [sp, #0]
    ba08:	1dc0      	adds	r0, r0, #7
    ba0a:	f020 0007 	bic.w	r0, r0, #7
    ba0e:	9000      	str	r0, [sp, #0]
    ba10:	1b00      	subs	r0, r0, r4
    ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba18:	4606      	mov	r6, r0
    ba1a:	460c      	mov	r4, r1
    ba1c:	7808      	ldrb	r0, [r1, #0]
    ba1e:	7849      	ldrb	r1, [r1, #1]
    ba20:	2700      	movs	r7, #0
    ba22:	4408      	add	r0, r1
    ba24:	4691      	mov	r9, r2
    ba26:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    ba2a:	463d      	mov	r5, r7
    ba2c:	e00e      	b.n	ba4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x186>
    ba2e:	79a3      	ldrb	r3, [r4, #6]
    ba30:	2b02      	cmp	r3, #2
    ba32:	d200      	bcs.n	ba36 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x170>
    ba34:	2302      	movs	r3, #2
    ba36:	7962      	ldrb	r2, [r4, #5]
    ba38:	2a03      	cmp	r2, #3
    ba3a:	d200      	bcs.n	ba3e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    ba3c:	2203      	movs	r2, #3
    ba3e:	7921      	ldrb	r1, [r4, #4]
    ba40:	78e0      	ldrb	r0, [r4, #3]
    ba42:	f000 fee4 	bl	c80e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    ba46:	1c6d      	adds	r5, r5, #1
    ba48:	4407      	add	r7, r0
    ba4a:	b2ed      	uxtb	r5, r5
    ba4c:	4545      	cmp	r5, r8
    ba4e:	d3ee      	bcc.n	ba2e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x168>
    ba50:	6830      	ldr	r0, [r6, #0]
    ba52:	1cc0      	adds	r0, r0, #3
    ba54:	f020 0003 	bic.w	r0, r0, #3
    ba58:	6030      	str	r0, [r6, #0]
    ba5a:	f1b9 0f00 	cmp.w	r9, #0
    ba5e:	d000      	beq.n	ba62 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x19c>
    ba60:	2000      	movs	r0, #0
    ba62:	463a      	mov	r2, r7
    ba64:	4641      	mov	r1, r8
    ba66:	f7f8 fc8b 	bl	4380 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    ba6a:	6831      	ldr	r1, [r6, #0]
    ba6c:	4408      	add	r0, r1
    ba6e:	6030      	str	r0, [r6, #0]
    ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ba74 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    ba74:	2000      	movs	r0, #0
    ba76:	4770      	bx	lr

0000ba78 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    ba78:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ba7a:	4604      	mov	r4, r0
    ba7c:	1d01      	adds	r1, r0, #4
    ba7e:	4668      	mov	r0, sp
    ba80:	f7fa f9e2 	bl	5e48 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    ba84:	2800      	cmp	r0, #0
    ba86:	d004      	beq.n	ba92 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    ba88:	4669      	mov	r1, sp
    ba8a:	4620      	mov	r0, r4
    ba8c:	f000 f848 	bl	bb20 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    ba90:	2001      	movs	r0, #1
    ba92:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ba94 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    ba94:	b50e      	push	{r1, r2, r3, lr}
    ba96:	4601      	mov	r1, r0
    ba98:	4668      	mov	r0, sp
    ba9a:	f000 f827 	bl	baec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    ba9e:	4668      	mov	r0, sp
    baa0:	f7fa f9fc 	bl	5e9c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    baa4:	bd0e      	pop	{r1, r2, r3, pc}

0000baa6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    baa6:	b510      	push	{r4, lr}
    baa8:	4604      	mov	r4, r0
    baaa:	4620      	mov	r0, r4
    baac:	f7f8 f97c 	bl	3da8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    bab0:	2800      	cmp	r0, #0
    bab2:	d006      	beq.n	bac2 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    bab4:	78a1      	ldrb	r1, [r4, #2]
    bab6:	7820      	ldrb	r0, [r4, #0]
    bab8:	f000 f804 	bl	bac4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    babc:	2800      	cmp	r0, #0
    babe:	d0f4      	beq.n	baaa <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    bac0:	2001      	movs	r0, #1
    bac2:	bd10      	pop	{r4, pc}
    bac4:	b570      	push	{r4, r5, r6, lr}
    bac6:	460c      	mov	r4, r1
    bac8:	4605      	mov	r5, r0
    baca:	f7f8 f9e1 	bl	3e90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    bace:	2800      	cmp	r0, #0
    bad0:	d002      	beq.n	bad8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    bad2:	2d3e      	cmp	r5, #62	; 0x3e
    bad4:	d001      	beq.n	bada <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    bad6:	2001      	movs	r0, #1
    bad8:	bd70      	pop	{r4, r5, r6, pc}
    bada:	2c12      	cmp	r4, #18
    badc:	d004      	beq.n	bae8 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    bade:	4620      	mov	r0, r4
    bae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bae4:	f7f8 b9f0 	b.w	3ec8 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    bae8:	2000      	movs	r0, #0
    baea:	bd70      	pop	{r4, r5, r6, pc}

0000baec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    baec:	880a      	ldrh	r2, [r1, #0]
    baee:	f3c2 020b 	ubfx	r2, r2, #0, #12
    baf2:	8002      	strh	r2, [r0, #0]
    baf4:	884a      	ldrh	r2, [r1, #2]
    baf6:	8042      	strh	r2, [r0, #2]
    baf8:	784a      	ldrb	r2, [r1, #1]
    bafa:	0993      	lsrs	r3, r2, #6
    bafc:	2200      	movs	r2, #0
    bafe:	7142      	strb	r2, [r0, #5]
    bb00:	784b      	ldrb	r3, [r1, #1]
    bb02:	f3c3 1301 	ubfx	r3, r3, #4, #2
    bb06:	b11b      	cbz	r3, bb10 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bb08:	2b01      	cmp	r3, #1
    bb0a:	d005      	beq.n	bb18 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    bb0c:	2b02      	cmp	r3, #2
    bb0e:	d005      	beq.n	bb1c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    bb10:	7102      	strb	r2, [r0, #4]
    bb12:	1d09      	adds	r1, r1, #4
    bb14:	6081      	str	r1, [r0, #8]
    bb16:	4770      	bx	lr
    bb18:	2201      	movs	r2, #1
    bb1a:	e7f9      	b.n	bb10 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bb1c:	2202      	movs	r2, #2
    bb1e:	e7f7      	b.n	bb10 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000bb20 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    bb20:	b510      	push	{r4, lr}
    bb22:	460c      	mov	r4, r1
    bb24:	7809      	ldrb	r1, [r1, #0]
    bb26:	7001      	strb	r1, [r0, #0]
    bb28:	7841      	ldrb	r1, [r0, #1]
    bb2a:	f021 010f 	bic.w	r1, r1, #15
    bb2e:	7041      	strb	r1, [r0, #1]
    bb30:	8822      	ldrh	r2, [r4, #0]
    bb32:	f3c2 2203 	ubfx	r2, r2, #8, #4
    bb36:	4311      	orrs	r1, r2
    bb38:	7041      	strb	r1, [r0, #1]
    bb3a:	78a2      	ldrb	r2, [r4, #2]
    bb3c:	7082      	strb	r2, [r0, #2]
    bb3e:	8862      	ldrh	r2, [r4, #2]
    bb40:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    bb44:	0a12      	lsrs	r2, r2, #8
    bb46:	70c2      	strb	r2, [r0, #3]
    bb48:	7041      	strb	r1, [r0, #1]
    bb4a:	7922      	ldrb	r2, [r4, #4]
    bb4c:	f002 0203 	and.w	r2, r2, #3
    bb50:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    bb54:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    bb58:	7041      	strb	r1, [r0, #1]
    bb5a:	7962      	ldrb	r2, [r4, #5]
    bb5c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    bb60:	7041      	strb	r1, [r0, #1]
    bb62:	68a1      	ldr	r1, [r4, #8]
    bb64:	1d02      	adds	r2, r0, #4
    bb66:	4291      	cmp	r1, r2
    bb68:	d006      	beq.n	bb78 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    bb6a:	8862      	ldrh	r2, [r4, #2]
    bb6c:	2afb      	cmp	r2, #251	; 0xfb
    bb6e:	d300      	bcc.n	bb72 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    bb70:	22fb      	movs	r2, #251	; 0xfb
    bb72:	1d00      	adds	r0, r0, #4
    bb74:	f7ff fe2d 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bb78:	78a0      	ldrb	r0, [r4, #2]
    bb7a:	1d00      	adds	r0, r0, #4
    bb7c:	b2c0      	uxtb	r0, r0
    bb7e:	bd10      	pop	{r4, pc}

0000bb80 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    bb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb84:	4604      	mov	r4, r0
    bb86:	780f      	ldrb	r7, [r1, #0]
    bb88:	2000      	movs	r0, #0
    bb8a:	250c      	movs	r5, #12
    bb8c:	2605      	movs	r6, #5
    bb8e:	223e      	movs	r2, #62	; 0x3e
    bb90:	23ff      	movs	r3, #255	; 0xff
    bb92:	2f1b      	cmp	r7, #27
    bb94:	d27d      	bcs.n	bc92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    bb96:	e8df f007 	tbb	[pc, r7]
    bb9a:	0eeb      	.short	0x0eeb
    bb9c:	632d2725 	.word	0x632d2725
    bba0:	af9b816d 	.word	0xaf9b816d
    bba4:	e2c7bcb1 	.word	0xe2c7bcb1
    bba8:	31ebebf5 	.word	0x31ebebf5
    bbac:	f2fed5d2 	.word	0xf2fed5d2
    bbb0:	eeeff0f1 	.word	0xeeeff0f1
    bbb4:	00ed      	.short	0x00ed
    bbb6:	7025      	strb	r5, [r4, #0]
    bbb8:	7908      	ldrb	r0, [r1, #4]
    bbba:	70a0      	strb	r0, [r4, #2]
    bbbc:	7948      	ldrb	r0, [r1, #5]
    bbbe:	70e0      	strb	r0, [r4, #3]
    bbc0:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bbc4:	0a00      	lsrs	r0, r0, #8
    bbc6:	7120      	strb	r0, [r4, #4]
    bbc8:	79c8      	ldrb	r0, [r1, #7]
    bbca:	7160      	strb	r0, [r4, #5]
    bbcc:	7a08      	ldrb	r0, [r1, #8]
    bbce:	71a0      	strb	r0, [r4, #6]
    bbd0:	8908      	ldrh	r0, [r1, #8]
    bbd2:	0a00      	lsrs	r0, r0, #8
    bbd4:	71e0      	strb	r0, [r4, #7]
    bbd6:	7a88      	ldrb	r0, [r1, #10]
    bbd8:	7220      	strb	r0, [r4, #8]
    bbda:	8948      	ldrh	r0, [r1, #10]
    bbdc:	0a00      	lsrs	r0, r0, #8
    bbde:	7260      	strb	r0, [r4, #9]
    bbe0:	2008      	movs	r0, #8
    bbe2:	e0c2      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bbe4:	2010      	movs	r0, #16
    bbe6:	e000      	b.n	bbea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    bbe8:	201a      	movs	r0, #26
    bbea:	7020      	strb	r0, [r4, #0]
    bbec:	7908      	ldrb	r0, [r1, #4]
    bbee:	70a0      	strb	r0, [r4, #2]
    bbf0:	2001      	movs	r0, #1
    bbf2:	e0ba      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bbf4:	4620      	mov	r0, r4
    bbf6:	f000 f947 	bl	be88 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    bbfa:	e0b4      	b.n	bd66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    bbfc:	7022      	strb	r2, [r4, #0]
    bbfe:	200a      	movs	r0, #10
    bc00:	70a0      	strb	r0, [r4, #2]
    bc02:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    bc06:	70e0      	strb	r0, [r4, #3]
    bc08:	7888      	ldrb	r0, [r1, #2]
    bc0a:	7120      	strb	r0, [r4, #4]
    bc0c:	8848      	ldrh	r0, [r1, #2]
    bc0e:	0a00      	lsrs	r0, r0, #8
    bc10:	7160      	strb	r0, [r4, #5]
    bc12:	7908      	ldrb	r0, [r1, #4]
    bc14:	71a0      	strb	r0, [r4, #6]
    bc16:	7948      	ldrb	r0, [r1, #5]
    bc18:	71e0      	strb	r0, [r4, #7]
    bc1a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bc1e:	60a0      	str	r0, [r4, #8]
    bc20:	8948      	ldrh	r0, [r1, #10]
    bc22:	81a0      	strh	r0, [r4, #12]
    bc24:	68c8      	ldr	r0, [r1, #12]
    bc26:	f8c4 000e 	str.w	r0, [r4, #14]
    bc2a:	8a08      	ldrh	r0, [r1, #16]
    bc2c:	8260      	strh	r0, [r4, #18]
    bc2e:	f8d1 0012 	ldr.w	r0, [r1, #18]
    bc32:	6160      	str	r0, [r4, #20]
    bc34:	8ac8      	ldrh	r0, [r1, #22]
    bc36:	8320      	strh	r0, [r4, #24]
    bc38:	7e08      	ldrb	r0, [r1, #24]
    bc3a:	76a0      	strb	r0, [r4, #26]
    bc3c:	8b08      	ldrh	r0, [r1, #24]
    bc3e:	0a00      	lsrs	r0, r0, #8
    bc40:	76e0      	strb	r0, [r4, #27]
    bc42:	7e88      	ldrb	r0, [r1, #26]
    bc44:	7720      	strb	r0, [r4, #28]
    bc46:	8b48      	ldrh	r0, [r1, #26]
    bc48:	0a00      	lsrs	r0, r0, #8
    bc4a:	7760      	strb	r0, [r4, #29]
    bc4c:	7f08      	ldrb	r0, [r1, #28]
    bc4e:	77a0      	strb	r0, [r4, #30]
    bc50:	8b88      	ldrh	r0, [r1, #28]
    bc52:	0a00      	lsrs	r0, r0, #8
    bc54:	77e0      	strb	r0, [r4, #31]
    bc56:	7f88      	ldrb	r0, [r1, #30]
    bc58:	f884 0020 	strb.w	r0, [r4, #32]
    bc5c:	201f      	movs	r0, #31
    bc5e:	e084      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bc60:	7022      	strb	r2, [r4, #0]
    bc62:	2014      	movs	r0, #20
    bc64:	70a0      	strb	r0, [r4, #2]
    bc66:	7908      	ldrb	r0, [r1, #4]
    bc68:	70e0      	strb	r0, [r4, #3]
    bc6a:	8888      	ldrh	r0, [r1, #4]
    bc6c:	0a00      	lsrs	r0, r0, #8
    bc6e:	7120      	strb	r0, [r4, #4]
    bc70:	7988      	ldrb	r0, [r1, #6]
    bc72:	e0a8      	b.n	bdc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    bc74:	7022      	strb	r2, [r4, #0]
    bc76:	2004      	movs	r0, #4
    bc78:	70a0      	strb	r0, [r4, #2]
    bc7a:	7908      	ldrb	r0, [r1, #4]
    bc7c:	70e0      	strb	r0, [r4, #3]
    bc7e:	7988      	ldrb	r0, [r1, #6]
    bc80:	7120      	strb	r0, [r4, #4]
    bc82:	88c8      	ldrh	r0, [r1, #6]
    bc84:	0a00      	lsrs	r0, r0, #8
    bc86:	7160      	strb	r0, [r4, #5]
    bc88:	6888      	ldr	r0, [r1, #8]
    bc8a:	f8c4 0006 	str.w	r0, [r4, #6]
    bc8e:	68c8      	ldr	r0, [r1, #12]
    bc90:	e000      	b.n	bc94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    bc92:	e06d      	b.n	bd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    bc94:	f8c4 000a 	str.w	r0, [r4, #10]
    bc98:	200c      	movs	r0, #12
    bc9a:	e066      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bc9c:	7022      	strb	r2, [r4, #0]
    bc9e:	2003      	movs	r0, #3
    bca0:	70a0      	strb	r0, [r4, #2]
    bca2:	7908      	ldrb	r0, [r1, #4]
    bca4:	70e0      	strb	r0, [r4, #3]
    bca6:	7988      	ldrb	r0, [r1, #6]
    bca8:	7120      	strb	r0, [r4, #4]
    bcaa:	88c8      	ldrh	r0, [r1, #6]
    bcac:	0a00      	lsrs	r0, r0, #8
    bcae:	7160      	strb	r0, [r4, #5]
    bcb0:	7a08      	ldrb	r0, [r1, #8]
    bcb2:	71a0      	strb	r0, [r4, #6]
    bcb4:	8908      	ldrh	r0, [r1, #8]
    bcb6:	0a00      	lsrs	r0, r0, #8
    bcb8:	71e0      	strb	r0, [r4, #7]
    bcba:	7a88      	ldrb	r0, [r1, #10]
    bcbc:	7220      	strb	r0, [r4, #8]
    bcbe:	8948      	ldrh	r0, [r1, #10]
    bcc0:	0a00      	lsrs	r0, r0, #8
    bcc2:	7260      	strb	r0, [r4, #9]
    bcc4:	7b08      	ldrb	r0, [r1, #12]
    bcc6:	72a0      	strb	r0, [r4, #10]
    bcc8:	8988      	ldrh	r0, [r1, #12]
    bcca:	0a00      	lsrs	r0, r0, #8
    bccc:	72e0      	strb	r0, [r4, #11]
    bcce:	e0d9      	b.n	be84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    bcd0:	7022      	strb	r2, [r4, #0]
    bcd2:	70a6      	strb	r6, [r4, #2]
    bcd4:	7908      	ldrb	r0, [r1, #4]
    bcd6:	70e0      	strb	r0, [r4, #3]
    bcd8:	8888      	ldrh	r0, [r1, #4]
    bcda:	0a00      	lsrs	r0, r0, #8
    bcdc:	7120      	strb	r0, [r4, #4]
    bcde:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bce2:	f8c4 0005 	str.w	r0, [r4, #5]
    bce6:	f8d1 000a 	ldr.w	r0, [r1, #10]
    bcea:	f8c4 0009 	str.w	r0, [r4, #9]
    bcee:	89c8      	ldrh	r0, [r1, #14]
    bcf0:	f8a4 000d 	strh.w	r0, [r4, #13]
    bcf4:	200d      	movs	r0, #13
    bcf6:	e038      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bcf8:	2011      	movs	r0, #17
    bcfa:	e044      	b.n	bd86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    bcfc:	7026      	strb	r6, [r4, #0]
    bcfe:	7908      	ldrb	r0, [r1, #4]
    bd00:	70a0      	strb	r0, [r4, #2]
    bd02:	7948      	ldrb	r0, [r1, #5]
    bd04:	70e0      	strb	r0, [r4, #3]
    bd06:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bd0a:	0a00      	lsrs	r0, r0, #8
    bd0c:	7120      	strb	r0, [r4, #4]
    bd0e:	79c8      	ldrb	r0, [r1, #7]
    bd10:	e059      	b.n	bdc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    bd12:	2008      	movs	r0, #8
    bd14:	7020      	strb	r0, [r4, #0]
    bd16:	7908      	ldrb	r0, [r1, #4]
    bd18:	70a0      	strb	r0, [r4, #2]
    bd1a:	7988      	ldrb	r0, [r1, #6]
    bd1c:	70e0      	strb	r0, [r4, #3]
    bd1e:	88c8      	ldrh	r0, [r1, #6]
    bd20:	0a00      	lsrs	r0, r0, #8
    bd22:	7120      	strb	r0, [r4, #4]
    bd24:	7a08      	ldrb	r0, [r1, #8]
    bd26:	e04e      	b.n	bdc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x246>
    bd28:	2030      	movs	r0, #48	; 0x30
    bd2a:	7020      	strb	r0, [r4, #0]
    bd2c:	7908      	ldrb	r0, [r1, #4]
    bd2e:	70a0      	strb	r0, [r4, #2]
    bd30:	7988      	ldrb	r0, [r1, #6]
    bd32:	70e0      	strb	r0, [r4, #3]
    bd34:	88c8      	ldrh	r0, [r1, #6]
    bd36:	0a00      	lsrs	r0, r0, #8
    bd38:	7120      	strb	r0, [r4, #4]
    bd3a:	2003      	movs	r0, #3
    bd3c:	e015      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd3e:	7022      	strb	r2, [r4, #0]
    bd40:	2007      	movs	r0, #7
    bd42:	e045      	b.n	bdd0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    bd44:	7022      	strb	r2, [r4, #0]
    bd46:	70a5      	strb	r5, [r4, #2]
    bd48:	7908      	ldrb	r0, [r1, #4]
    bd4a:	70e0      	strb	r0, [r4, #3]
    bd4c:	7988      	ldrb	r0, [r1, #6]
    bd4e:	7120      	strb	r0, [r4, #4]
    bd50:	88c8      	ldrh	r0, [r1, #6]
    bd52:	0a00      	lsrs	r0, r0, #8
    bd54:	7160      	strb	r0, [r4, #5]
    bd56:	7a08      	ldrb	r0, [r1, #8]
    bd58:	71a0      	strb	r0, [r4, #6]
    bd5a:	7a48      	ldrb	r0, [r1, #9]
    bd5c:	e028      	b.n	bdb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x230>
    bd5e:	4620      	mov	r0, r4
    bd60:	1d09      	adds	r1, r1, #4
    bd62:	f7f8 f867 	bl	3e34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xdc>
    bd66:	2800      	cmp	r0, #0
    bd68:	d002      	beq.n	bd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    bd6a:	7060      	strb	r0, [r4, #1]
    bd6c:	1c80      	adds	r0, r0, #2
    bd6e:	b2c0      	uxtb	r0, r0
    bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd74:	e073      	b.n	be5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2de>
    bd76:	e047      	b.n	be08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    bd78:	e028      	b.n	bdcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    bd7a:	e053      	b.n	be24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a4>
    bd7c:	e061      	b.n	be42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c2>
    bd7e:	e01a      	b.n	bdb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x236>
    bd80:	e009      	b.n	bd96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x216>
    bd82:	e7ff      	b.n	bd84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    bd84:	2057      	movs	r0, #87	; 0x57
    bd86:	7020      	strb	r0, [r4, #0]
    bd88:	7908      	ldrb	r0, [r1, #4]
    bd8a:	70a0      	strb	r0, [r4, #2]
    bd8c:	8888      	ldrh	r0, [r1, #4]
    bd8e:	0a00      	lsrs	r0, r0, #8
    bd90:	70e0      	strb	r0, [r4, #3]
    bd92:	2002      	movs	r0, #2
    bd94:	e7e9      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd96:	7022      	strb	r2, [r4, #0]
    bd98:	2012      	movs	r0, #18
    bd9a:	70a0      	strb	r0, [r4, #2]
    bd9c:	7908      	ldrb	r0, [r1, #4]
    bd9e:	70e0      	strb	r0, [r4, #3]
    bda0:	7948      	ldrb	r0, [r1, #5]
    bda2:	7120      	strb	r0, [r4, #4]
    bda4:	7988      	ldrb	r0, [r1, #6]
    bda6:	7160      	strb	r0, [r4, #5]
    bda8:	88c8      	ldrh	r0, [r1, #6]
    bdaa:	0a00      	lsrs	r0, r0, #8
    bdac:	71a0      	strb	r0, [r4, #6]
    bdae:	7a08      	ldrb	r0, [r1, #8]
    bdb0:	71e0      	strb	r0, [r4, #7]
    bdb2:	2006      	movs	r0, #6
    bdb4:	e7d9      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdb6:	7023      	strb	r3, [r4, #0]
    bdb8:	20a1      	movs	r0, #161	; 0xa1
    bdba:	70a0      	strb	r0, [r4, #2]
    bdbc:	7908      	ldrb	r0, [r1, #4]
    bdbe:	70e0      	strb	r0, [r4, #3]
    bdc0:	7948      	ldrb	r0, [r1, #5]
    bdc2:	7120      	strb	r0, [r4, #4]
    bdc4:	2000      	movs	r0, #0
    bdc6:	7160      	strb	r0, [r4, #5]
    bdc8:	2004      	movs	r0, #4
    bdca:	e7ce      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdcc:	7023      	strb	r3, [r4, #0]
    bdce:	20a2      	movs	r0, #162	; 0xa2
    bdd0:	70a0      	strb	r0, [r4, #2]
    bdd2:	7908      	ldrb	r0, [r1, #4]
    bdd4:	70e0      	strb	r0, [r4, #3]
    bdd6:	8888      	ldrh	r0, [r1, #4]
    bdd8:	0a00      	lsrs	r0, r0, #8
    bdda:	7120      	strb	r0, [r4, #4]
    bddc:	7988      	ldrb	r0, [r1, #6]
    bdde:	7160      	strb	r0, [r4, #5]
    bde0:	88c8      	ldrh	r0, [r1, #6]
    bde2:	0a00      	lsrs	r0, r0, #8
    bde4:	71a0      	strb	r0, [r4, #6]
    bde6:	7a08      	ldrb	r0, [r1, #8]
    bde8:	71e0      	strb	r0, [r4, #7]
    bdea:	8908      	ldrh	r0, [r1, #8]
    bdec:	0a00      	lsrs	r0, r0, #8
    bdee:	7220      	strb	r0, [r4, #8]
    bdf0:	7a88      	ldrb	r0, [r1, #10]
    bdf2:	7260      	strb	r0, [r4, #9]
    bdf4:	8948      	ldrh	r0, [r1, #10]
    bdf6:	0a00      	lsrs	r0, r0, #8
    bdf8:	72a0      	strb	r0, [r4, #10]
    bdfa:	7b08      	ldrb	r0, [r1, #12]
    bdfc:	72e0      	strb	r0, [r4, #11]
    bdfe:	8988      	ldrh	r0, [r1, #12]
    be00:	0a00      	lsrs	r0, r0, #8
    be02:	7320      	strb	r0, [r4, #12]
    be04:	200b      	movs	r0, #11
    be06:	e7b0      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be08:	7023      	strb	r3, [r4, #0]
    be0a:	20a3      	movs	r0, #163	; 0xa3
    be0c:	70a0      	strb	r0, [r4, #2]
    be0e:	7908      	ldrb	r0, [r1, #4]
    be10:	70e0      	strb	r0, [r4, #3]
    be12:	8888      	ldrh	r0, [r1, #4]
    be14:	0a00      	lsrs	r0, r0, #8
    be16:	7120      	strb	r0, [r4, #4]
    be18:	7988      	ldrb	r0, [r1, #6]
    be1a:	7160      	strb	r0, [r4, #5]
    be1c:	79c8      	ldrb	r0, [r1, #7]
    be1e:	71a0      	strb	r0, [r4, #6]
    be20:	2005      	movs	r0, #5
    be22:	e7a2      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be24:	7022      	strb	r2, [r4, #0]
    be26:	2013      	movs	r0, #19
    be28:	70a0      	strb	r0, [r4, #2]
    be2a:	7908      	ldrb	r0, [r1, #4]
    be2c:	70e0      	strb	r0, [r4, #3]
    be2e:	7948      	ldrb	r0, [r1, #5]
    be30:	7120      	strb	r0, [r4, #4]
    be32:	f8d1 0006 	ldr.w	r0, [r1, #6]
    be36:	f8c4 0005 	str.w	r0, [r4, #5]
    be3a:	8948      	ldrh	r0, [r1, #10]
    be3c:	f8a4 0009 	strh.w	r0, [r4, #9]
    be40:	e020      	b.n	be84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    be42:	7023      	strb	r3, [r4, #0]
    be44:	20a4      	movs	r0, #164	; 0xa4
    be46:	70a0      	strb	r0, [r4, #2]
    be48:	7908      	ldrb	r0, [r1, #4]
    be4a:	70e0      	strb	r0, [r4, #3]
    be4c:	8888      	ldrh	r0, [r1, #4]
    be4e:	0a00      	lsrs	r0, r0, #8
    be50:	7120      	strb	r0, [r4, #4]
    be52:	7988      	ldrb	r0, [r1, #6]
    be54:	7160      	strb	r0, [r4, #5]
    be56:	79c8      	ldrb	r0, [r1, #7]
    be58:	71a0      	strb	r0, [r4, #6]
    be5a:	2007      	movs	r0, #7
    be5c:	e785      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be5e:	7023      	strb	r3, [r4, #0]
    be60:	2080      	movs	r0, #128	; 0x80
    be62:	70a0      	strb	r0, [r4, #2]
    be64:	888a      	ldrh	r2, [r1, #4]
    be66:	f8a4 2003 	strh.w	r2, [r4, #3]
    be6a:	88ca      	ldrh	r2, [r1, #6]
    be6c:	f8a4 2005 	strh.w	r2, [r4, #5]
    be70:	7a0a      	ldrb	r2, [r1, #8]
    be72:	71e2      	strb	r2, [r4, #7]
    be74:	7a4a      	ldrb	r2, [r1, #9]
    be76:	8122      	strh	r2, [r4, #8]
    be78:	7a8a      	ldrb	r2, [r1, #10]
    be7a:	72a2      	strb	r2, [r4, #10]
    be7c:	7ac9      	ldrb	r1, [r1, #11]
    be7e:	f001 0101 	and.w	r1, r1, #1
    be82:	72e1      	strb	r1, [r4, #11]
    be84:	200a      	movs	r0, #10
    be86:	e770      	b.n	bd6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000be88 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    be88:	223e      	movs	r2, #62	; 0x3e
    be8a:	7002      	strb	r2, [r0, #0]
    be8c:	2201      	movs	r2, #1
    be8e:	7082      	strb	r2, [r0, #2]
    be90:	790a      	ldrb	r2, [r1, #4]
    be92:	70c2      	strb	r2, [r0, #3]
    be94:	798a      	ldrb	r2, [r1, #6]
    be96:	7102      	strb	r2, [r0, #4]
    be98:	88ca      	ldrh	r2, [r1, #6]
    be9a:	0a12      	lsrs	r2, r2, #8
    be9c:	7142      	strb	r2, [r0, #5]
    be9e:	7a0a      	ldrb	r2, [r1, #8]
    bea0:	7182      	strb	r2, [r0, #6]
    bea2:	7a4a      	ldrb	r2, [r1, #9]
    bea4:	71c2      	strb	r2, [r0, #7]
    bea6:	f8d1 200a 	ldr.w	r2, [r1, #10]
    beaa:	6082      	str	r2, [r0, #8]
    beac:	89ca      	ldrh	r2, [r1, #14]
    beae:	8182      	strh	r2, [r0, #12]
    beb0:	7c0a      	ldrb	r2, [r1, #16]
    beb2:	7382      	strb	r2, [r0, #14]
    beb4:	8a0a      	ldrh	r2, [r1, #16]
    beb6:	0a12      	lsrs	r2, r2, #8
    beb8:	73c2      	strb	r2, [r0, #15]
    beba:	7c8a      	ldrb	r2, [r1, #18]
    bebc:	7402      	strb	r2, [r0, #16]
    bebe:	8a4a      	ldrh	r2, [r1, #18]
    bec0:	0a12      	lsrs	r2, r2, #8
    bec2:	7442      	strb	r2, [r0, #17]
    bec4:	7d0a      	ldrb	r2, [r1, #20]
    bec6:	7482      	strb	r2, [r0, #18]
    bec8:	8a8a      	ldrh	r2, [r1, #20]
    beca:	0a12      	lsrs	r2, r2, #8
    becc:	74c2      	strb	r2, [r0, #19]
    bece:	7d89      	ldrb	r1, [r1, #22]
    bed0:	7501      	strb	r1, [r0, #20]
    bed2:	2013      	movs	r0, #19
    bed4:	4770      	bx	lr

0000bed6 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    bed6:	223e      	movs	r2, #62	; 0x3e
    bed8:	7002      	strb	r2, [r0, #0]
    beda:	2201      	movs	r2, #1
    bedc:	7082      	strb	r2, [r0, #2]
    bede:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    bee2:	70c2      	strb	r2, [r0, #3]
    bee4:	788a      	ldrb	r2, [r1, #2]
    bee6:	7102      	strb	r2, [r0, #4]
    bee8:	884a      	ldrh	r2, [r1, #2]
    beea:	0a12      	lsrs	r2, r2, #8
    beec:	7142      	strb	r2, [r0, #5]
    beee:	790a      	ldrb	r2, [r1, #4]
    bef0:	7182      	strb	r2, [r0, #6]
    bef2:	794a      	ldrb	r2, [r1, #5]
    bef4:	71c2      	strb	r2, [r0, #7]
    bef6:	f8d1 2006 	ldr.w	r2, [r1, #6]
    befa:	6082      	str	r2, [r0, #8]
    befc:	894a      	ldrh	r2, [r1, #10]
    befe:	8182      	strh	r2, [r0, #12]
    bf00:	7e0a      	ldrb	r2, [r1, #24]
    bf02:	7382      	strb	r2, [r0, #14]
    bf04:	8b0a      	ldrh	r2, [r1, #24]
    bf06:	0a12      	lsrs	r2, r2, #8
    bf08:	73c2      	strb	r2, [r0, #15]
    bf0a:	7e8a      	ldrb	r2, [r1, #26]
    bf0c:	7402      	strb	r2, [r0, #16]
    bf0e:	8b4a      	ldrh	r2, [r1, #26]
    bf10:	0a12      	lsrs	r2, r2, #8
    bf12:	7442      	strb	r2, [r0, #17]
    bf14:	7f0a      	ldrb	r2, [r1, #28]
    bf16:	7482      	strb	r2, [r0, #18]
    bf18:	8b8a      	ldrh	r2, [r1, #28]
    bf1a:	0a12      	lsrs	r2, r2, #8
    bf1c:	74c2      	strb	r2, [r0, #19]
    bf1e:	7f89      	ldrb	r1, [r1, #30]
    bf20:	7501      	strb	r1, [r0, #20]
    bf22:	2113      	movs	r1, #19
    bf24:	7041      	strb	r1, [r0, #1]
    bf26:	4608      	mov	r0, r1
    bf28:	4770      	bx	lr

0000bf2a <sdc_hci_data_get>:
    bf2a:	b510      	push	{r4, lr}
    bf2c:	b120      	cbz	r0, bf38 <sdc_hci_data_get+0xe>
    bf2e:	f7ff fda3 	bl	ba78 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    bf32:	b120      	cbz	r0, bf3e <sdc_hci_data_get+0x14>
    bf34:	2000      	movs	r0, #0
    bf36:	bd10      	pop	{r4, pc}
    bf38:	f06f 0015 	mvn.w	r0, #21
    bf3c:	bd10      	pop	{r4, pc}
    bf3e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bf42:	bd10      	pop	{r4, pc}

0000bf44 <sdc_hci_data_put>:
    bf44:	b510      	push	{r4, lr}
    bf46:	f06f 0415 	mvn.w	r4, #21
    bf4a:	b120      	cbz	r0, bf56 <sdc_hci_data_put+0x12>
    bf4c:	f7ff fda2 	bl	ba94 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    bf50:	b108      	cbz	r0, bf56 <sdc_hci_data_put+0x12>
    bf52:	2000      	movs	r0, #0
    bf54:	bd10      	pop	{r4, pc}
    bf56:	4620      	mov	r0, r4
    bf58:	bd10      	pop	{r4, pc}

0000bf5a <sdc_hci_evt_get>:
    bf5a:	b510      	push	{r4, lr}
    bf5c:	b120      	cbz	r0, bf68 <sdc_hci_evt_get+0xe>
    bf5e:	f7ff fda2 	bl	baa6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    bf62:	b120      	cbz	r0, bf6e <sdc_hci_evt_get+0x14>
    bf64:	2000      	movs	r0, #0
    bf66:	bd10      	pop	{r4, pc}
    bf68:	f06f 0015 	mvn.w	r0, #21
    bf6c:	bd10      	pop	{r4, pc}
    bf6e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    bf72:	bd10      	pop	{r4, pc}

0000bf74 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    bf74:	f002 bcb7 	b.w	e8e6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000bf78 <sdc_hci_cmd_cb_read_transmit_power_level>:
    bf78:	f002 bcf9 	b.w	e96e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000bf7c <sdc_hci_cmd_cb_set_event_mask>:
    bf7c:	b510      	push	{r4, lr}
    bf7e:	f7f7 ffb7 	bl	3ef0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    bf82:	2000      	movs	r0, #0
    bf84:	bd10      	pop	{r4, pc}

0000bf86 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    bf86:	b510      	push	{r4, lr}
    bf88:	f7f7 ffc0 	bl	3f0c <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    bf8c:	2000      	movs	r0, #0
    bf8e:	bd10      	pop	{r4, pc}

0000bf90 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    bf90:	f002 bd09 	b.w	e9a6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000bf94 <sdc_hci_cmd_vs_conn_event_extend>:
    bf94:	b508      	push	{r3, lr}
    bf96:	7800      	ldrb	r0, [r0, #0]
    bf98:	f88d 0000 	strb.w	r0, [sp]
    bf9c:	4668      	mov	r0, sp
    bf9e:	f002 fc23 	bl	e7e8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    bfa2:	bd08      	pop	{r3, pc}

0000bfa4 <sdc_hci_cmd_vs_conn_update>:
    bfa4:	2001      	movs	r0, #1
    bfa6:	4770      	bx	lr

0000bfa8 <sdc_hci_cmd_vs_event_length_set>:
    bfa8:	f7fd be2a 	b.w	9c00 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000bfac <sdc_hci_cmd_vs_llpm_mode_set>:
    bfac:	2001      	movs	r0, #1
    bfae:	4770      	bx	lr

0000bfb0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    bfb0:	7800      	ldrb	r0, [r0, #0]
    bfb2:	b100      	cbz	r0, bfb6 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    bfb4:	2001      	movs	r0, #1
    bfb6:	f002 bb7d 	b.w	e6b4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000bfba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    bfba:	b570      	push	{r4, r5, r6, lr}
    bfbc:	4605      	mov	r5, r0
    bfbe:	2210      	movs	r2, #16
    bfc0:	2100      	movs	r1, #0
    bfc2:	f7ff fc80 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfc6:	2210      	movs	r2, #16
    bfc8:	2100      	movs	r1, #0
    bfca:	f105 0010 	add.w	r0, r5, #16
    bfce:	f7ff fc7a 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bfd2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    bfd6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    bfda:	1c40      	adds	r0, r0, #1
    bfdc:	d10b      	bne.n	bff6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bfde:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    bfe2:	1c40      	adds	r0, r0, #1
    bfe4:	d107      	bne.n	bff6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bfe6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    bfea:	1c40      	adds	r0, r0, #1
    bfec:	d103      	bne.n	bff6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    bfee:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    bff2:	1c40      	adds	r0, r0, #1
    bff4:	d00b      	beq.n	c00e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    bff6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    bffa:	6128      	str	r0, [r5, #16]
    bffc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c000:	6168      	str	r0, [r5, #20]
    c002:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c006:	61a8      	str	r0, [r5, #24]
    c008:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c00c:	61e8      	str	r0, [r5, #28]
    c00e:	2000      	movs	r0, #0
    c010:	f7f8 fcb8 	bl	4984 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c014:	b918      	cbnz	r0, c01e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c016:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c01a:	07c0      	lsls	r0, r0, #31
    c01c:	d118      	bne.n	c050 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c01e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c022:	1c40      	adds	r0, r0, #1
    c024:	d10b      	bne.n	c03e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c026:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c02a:	1c40      	adds	r0, r0, #1
    c02c:	d107      	bne.n	c03e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c02e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c032:	1c40      	adds	r0, r0, #1
    c034:	d103      	bne.n	c03e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c036:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c03a:	1c40      	adds	r0, r0, #1
    c03c:	d008      	beq.n	c050 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c03e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c042:	6028      	str	r0, [r5, #0]
    c044:	6860      	ldr	r0, [r4, #4]
    c046:	6068      	str	r0, [r5, #4]
    c048:	68a0      	ldr	r0, [r4, #8]
    c04a:	60a8      	str	r0, [r5, #8]
    c04c:	68e0      	ldr	r0, [r4, #12]
    c04e:	60e8      	str	r0, [r5, #12]
    c050:	2000      	movs	r0, #0
    c052:	bd70      	pop	{r4, r5, r6, pc}

0000c054 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c054:	b570      	push	{r4, r5, r6, lr}
    c056:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c05a:	4604      	mov	r4, r0
    c05c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c060:	1c40      	adds	r0, r0, #1
    c062:	d105      	bne.n	c070 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c064:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c068:	43c0      	mvns	r0, r0
    c06a:	0400      	lsls	r0, r0, #16
    c06c:	0c00      	lsrs	r0, r0, #16
    c06e:	d03a      	beq.n	c0e6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c070:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c074:	07c0      	lsls	r0, r0, #31
    c076:	d036      	beq.n	c0e6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c078:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c07c:	f8c4 0001 	str.w	r0, [r4, #1]
    c080:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c084:	f8a4 0005 	strh.w	r0, [r4, #5]
    c088:	79a0      	ldrb	r0, [r4, #6]
    c08a:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c08e:	71a0      	strb	r0, [r4, #6]
    c090:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c094:	1c40      	adds	r0, r0, #1
    c096:	d00f      	beq.n	c0b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c098:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c09c:	1c40      	adds	r0, r0, #1
    c09e:	d00b      	beq.n	c0b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c0a0:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c0a4:	1c40      	adds	r0, r0, #1
    c0a6:	d007      	beq.n	c0b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c0a8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c0ac:	1c40      	adds	r0, r0, #1
    c0ae:	d003      	beq.n	c0b8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c0b0:	2000      	movs	r0, #0
    c0b2:	f7f8 fc67 	bl	4984 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c0b6:	b140      	cbz	r0, c0ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c0b8:	2210      	movs	r2, #16
    c0ba:	2100      	movs	r1, #0
    c0bc:	1de0      	adds	r0, r4, #7
    c0be:	f7ff fc02 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c0c2:	2001      	movs	r0, #1
    c0c4:	7020      	strb	r0, [r4, #0]
    c0c6:	2000      	movs	r0, #0
    c0c8:	bd70      	pop	{r4, r5, r6, pc}
    c0ca:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c0ce:	f8c4 0007 	str.w	r0, [r4, #7]
    c0d2:	6868      	ldr	r0, [r5, #4]
    c0d4:	f8c4 000b 	str.w	r0, [r4, #11]
    c0d8:	68a8      	ldr	r0, [r5, #8]
    c0da:	f8c4 000f 	str.w	r0, [r4, #15]
    c0de:	68e8      	ldr	r0, [r5, #12]
    c0e0:	f8c4 0013 	str.w	r0, [r4, #19]
    c0e4:	e7ed      	b.n	c0c2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c0e6:	2000      	movs	r0, #0
    c0e8:	e7ec      	b.n	c0c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c0ea <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c0ea:	f002 bb63 	b.w	e7b4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c0ee <sdc_hci_cmd_ip_read_bd_addr>:
    c0ee:	f002 bc0b 	b.w	e908 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c0f2 <sdc_hci_cmd_ip_read_local_version_information>:
    c0f2:	f7fd bd93 	b.w	9c1c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c0f6 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c0f6:	f002 b81a 	b.w	e12e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c0fa <sdc_hci_cmd_le_add_device_to_white_list>:
    c0fa:	f002 b833 	b.w	e164 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c0fe <sdc_hci_cmd_le_clear_resolving_list>:
    c0fe:	f002 b848 	b.w	e192 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c102 <sdc_hci_cmd_le_clear_white_list>:
    c102:	f002 b853 	b.w	e1ac <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c106 <sdc_hci_cmd_le_encrypt>:
    c106:	f002 b85b 	b.w	e1c0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c10a <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c10a:	8802      	ldrh	r2, [r0, #0]
    c10c:	800a      	strh	r2, [r1, #0]
    c10e:	f002 b860 	b.w	e1d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c112 <sdc_hci_cmd_le_long_term_key_request_reply>:
    c112:	8802      	ldrh	r2, [r0, #0]
    c114:	800a      	strh	r2, [r1, #0]
    c116:	f002 b875 	b.w	e204 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c11a <sdc_hci_cmd_le_rand>:
    c11a:	f002 b89d 	b.w	e258 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c11e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c11e:	f002 b8a1 	b.w	e264 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c122 <sdc_hci_cmd_le_read_buffer_size>:
    c122:	f7fd bca3 	b.w	9a6c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c126 <sdc_hci_cmd_le_read_channel_map>:
    c126:	f7fd bcab 	b.w	9a80 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c12a <sdc_hci_cmd_le_read_max_data_length>:
    c12a:	f002 b8a4 	b.w	e276 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c12e <sdc_hci_cmd_le_read_phy>:
    c12e:	f7fd bcc9 	b.w	9ac4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c132 <sdc_hci_cmd_le_read_remote_features>:
    c132:	f7fd bcef 	b.w	9b14 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c136 <sdc_hci_cmd_le_read_resolving_list_size>:
    c136:	f002 b8ae 	b.w	e296 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c13a <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c13a:	f7fd bd0b 	b.w	9b54 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c13e <sdc_hci_cmd_le_read_transmit_power>:
    c13e:	f002 b8ae 	b.w	e29e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c142 <sdc_hci_cmd_le_read_white_list_size>:
    c142:	f002 b8b5 	b.w	e2b0 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c146 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c146:	f002 b8b7 	b.w	e2b8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c14a <sdc_hci_cmd_le_remove_device_from_white_list>:
    c14a:	f002 b8ce 	b.w	e2ea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c14e <sdc_hci_cmd_le_set_address_resolution_enable>:
    c14e:	f002 b8e1 	b.w	e314 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c152 <sdc_hci_cmd_le_set_adv_data>:
    c152:	f002 b8ed 	b.w	e330 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c156 <sdc_hci_cmd_le_set_adv_enable>:
    c156:	f002 b927 	b.w	e3a8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c15a <sdc_hci_cmd_le_set_adv_params>:
    c15a:	f002 b958 	b.w	e40e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c15e <sdc_hci_cmd_le_set_data_length>:
    c15e:	f002 b9e8 	b.w	e532 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c162 <sdc_hci_cmd_le_set_default_phy>:
    c162:	f7fd bd07 	b.w	9b74 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c166 <sdc_hci_cmd_le_set_event_mask>:
    c166:	b510      	push	{r4, lr}
    c168:	f7f7 febc 	bl	3ee4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c16c:	2000      	movs	r0, #0
    c16e:	bd10      	pop	{r4, pc}

0000c170 <sdc_hci_cmd_le_set_phy>:
    c170:	f002 ba06 	b.w	e580 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c174 <sdc_hci_cmd_le_set_privacy_mode>:
    c174:	f002 ba24 	b.w	e5c0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c178 <sdc_hci_cmd_le_set_random_address>:
    c178:	f002 ba38 	b.w	e5ec <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c17c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c17c:	f002 ba44 	b.w	e608 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c180 <sdc_hci_cmd_le_set_scan_response_data>:
    c180:	f002 ba4b 	b.w	e61a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c184 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c184:	f002 ba7f 	b.w	e686 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c188 <sdc_hci_cmd_lc_disconnect>:
    c188:	f001 bf81 	b.w	e08e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c18c <sdc_hci_cmd_lc_read_remote_version_information>:
    c18c:	f002 bbc8 	b.w	e920 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c190:	b570      	push	{r4, r5, r6, lr}
    c192:	880b      	ldrh	r3, [r1, #0]
    c194:	7f04      	ldrb	r4, [r0, #28]
    c196:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c19a:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c19e:	8802      	ldrh	r2, [r0, #0]
    c1a0:	4435      	add	r5, r6
    c1a2:	1da4      	adds	r4, r4, #6
    c1a4:	882d      	ldrh	r5, [r5, #0]
    c1a6:	4422      	add	r2, r4
    c1a8:	b292      	uxth	r2, r2
    c1aa:	4425      	add	r5, r4
    c1ac:	1e54      	subs	r4, r2, #1
    c1ae:	442c      	add	r4, r5
    c1b0:	fb94 f4f2 	sdiv	r4, r4, r2
    c1b4:	fb02 6204 	mla	r2, r2, r4, r6
    c1b8:	8840      	ldrh	r0, [r0, #2]
    c1ba:	b292      	uxth	r2, r2
    c1bc:	4290      	cmp	r0, r2
    c1be:	d903      	bls.n	c1c8 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c1c0:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c1c4:	4310      	orrs	r0, r2
    c1c6:	e002      	b.n	c1ce <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c1c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c1cc:	4398      	bics	r0, r3
    c1ce:	8008      	strh	r0, [r1, #0]
    c1d0:	bd70      	pop	{r4, r5, r6, pc}
    c1d2:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c1d6:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c1da:	429a      	cmp	r2, r3
    c1dc:	d107      	bne.n	c1ee <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c1de:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c1e2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c1e6:	4288      	cmp	r0, r1
    c1e8:	d001      	beq.n	c1ee <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c1ea:	2001      	movs	r0, #1
    c1ec:	4770      	bx	lr
    c1ee:	2000      	movs	r0, #0
    c1f0:	4770      	bx	lr

0000c1f2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c1f2:	b570      	push	{r4, r5, r6, lr}
    c1f4:	7f00      	ldrb	r0, [r0, #28]
    c1f6:	461c      	mov	r4, r3
    c1f8:	1d80      	adds	r0, r0, #6
    c1fa:	4408      	add	r0, r1
    c1fc:	4613      	mov	r3, r2
    c1fe:	8809      	ldrh	r1, [r1, #0]
    c200:	9a04      	ldr	r2, [sp, #16]
    c202:	1cc9      	adds	r1, r1, #3
    c204:	b289      	uxth	r1, r1
    c206:	1915      	adds	r5, r2, r4
    c208:	1ec0      	subs	r0, r0, #3
    c20a:	428d      	cmp	r5, r1
    c20c:	d805      	bhi.n	c21a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c20e:	1881      	adds	r1, r0, r2
    c210:	4622      	mov	r2, r4
    c212:	4618      	mov	r0, r3
    c214:	f7ff fadd 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c218:	e000      	b.n	c21c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c21a:	2400      	movs	r4, #0
    c21c:	4620      	mov	r0, r4
    c21e:	bd70      	pop	{r4, r5, r6, pc}

0000c220 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c220:	b570      	push	{r4, r5, r6, lr}
    c222:	7f00      	ldrb	r0, [r0, #28]
    c224:	461c      	mov	r4, r3
    c226:	1d80      	adds	r0, r0, #6
    c228:	4408      	add	r0, r1
    c22a:	4613      	mov	r3, r2
    c22c:	8809      	ldrh	r1, [r1, #0]
    c22e:	9a04      	ldr	r2, [sp, #16]
    c230:	1cc9      	adds	r1, r1, #3
    c232:	b289      	uxth	r1, r1
    c234:	1915      	adds	r5, r2, r4
    c236:	1ec0      	subs	r0, r0, #3
    c238:	428d      	cmp	r5, r1
    c23a:	d805      	bhi.n	c248 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c23c:	4410      	add	r0, r2
    c23e:	4622      	mov	r2, r4
    c240:	4619      	mov	r1, r3
    c242:	f7ff fac6 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c246:	e000      	b.n	c24a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c248:	2400      	movs	r4, #0
    c24a:	4620      	mov	r0, r4
    c24c:	bd70      	pop	{r4, r5, r6, pc}

0000c24e <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c24e:	8881      	ldrh	r1, [r0, #4]
    c250:	88c0      	ldrh	r0, [r0, #6]
    c252:	4288      	cmp	r0, r1
    c254:	d101      	bne.n	c25a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c256:	2001      	movs	r0, #1
    c258:	4770      	bx	lr
    c25a:	2000      	movs	r0, #0
    c25c:	4770      	bx	lr

0000c25e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c25e:	8881      	ldrh	r1, [r0, #4]
    c260:	8900      	ldrh	r0, [r0, #8]
    c262:	4288      	cmp	r0, r1
    c264:	d101      	bne.n	c26a <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c266:	2001      	movs	r0, #1
    c268:	4770      	bx	lr
    c26a:	2000      	movs	r0, #0
    c26c:	4770      	bx	lr

0000c26e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c26e:	b570      	push	{r4, r5, r6, lr}
    c270:	4604      	mov	r4, r0
    c272:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c276:	8880      	ldrh	r0, [r0, #4]
    c278:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c27c:	4401      	add	r1, r0
    c27e:	8a20      	ldrh	r0, [r4, #16]
    c280:	2800      	cmp	r0, #0
    c282:	d01a      	beq.n	c2ba <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c284:	89a2      	ldrh	r2, [r4, #12]
    c286:	2500      	movs	r5, #0
    c288:	4410      	add	r0, r2
    c28a:	b280      	uxth	r0, r0
    c28c:	81a0      	strh	r0, [r4, #12]
    c28e:	880a      	ldrh	r2, [r1, #0]
    c290:	4290      	cmp	r0, r2
    c292:	d905      	bls.n	c2a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c294:	f44f 71a5 	mov.w	r1, #330	; 0x14a
    c298:	f04f 0014 	mov.w	r0, #20
    c29c:	f7f7 fc84 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2a0:	d109      	bne.n	c2b6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c2a2:	69a0      	ldr	r0, [r4, #24]
    c2a4:	b108      	cbz	r0, c2aa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c2a6:	7f40      	ldrb	r0, [r0, #29]
    c2a8:	7088      	strb	r0, [r1, #2]
    c2aa:	f104 0104 	add.w	r1, r4, #4
    c2ae:	4620      	mov	r0, r4
    c2b0:	f7ff ff6e 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c2b4:	81a5      	strh	r5, [r4, #12]
    c2b6:	8225      	strh	r5, [r4, #16]
    c2b8:	2001      	movs	r0, #1
    c2ba:	bd70      	pop	{r4, r5, r6, pc}

0000c2bc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2c0:	4604      	mov	r4, r0
    c2c2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c2c6:	88c0      	ldrh	r0, [r0, #6]
    c2c8:	460e      	mov	r6, r1
    c2ca:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c2ce:	8a60      	ldrh	r0, [r4, #18]
    c2d0:	19d9      	adds	r1, r3, r7
    c2d2:	b108      	cbz	r0, c2d8 <__kernel_ram_size+0x18>
    c2d4:	42b0      	cmp	r0, r6
    c2d6:	d202      	bcs.n	c2de <__kernel_ram_size+0x1e>
    c2d8:	2000      	movs	r0, #0
    c2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2de:	89e0      	ldrh	r0, [r4, #14]
    c2e0:	2500      	movs	r5, #0
    c2e2:	b140      	cbz	r0, c2f6 <__kernel_ram_size+0x36>
    c2e4:	f8b1 c000 	ldrh.w	ip, [r1]
    c2e8:	4560      	cmp	r0, ip
    c2ea:	d008      	beq.n	c2fe <__kernel_ram_size+0x3e>
    c2ec:	f240 211f 	movw	r1, #543	; 0x21f
    c2f0:	2014      	movs	r0, #20
    c2f2:	f7f7 fc59 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2f6:	7f60      	ldrb	r0, [r4, #29]
    c2f8:	7088      	strb	r0, [r1, #2]
    c2fa:	800d      	strh	r5, [r1, #0]
    c2fc:	e00e      	b.n	c31c <__kernel_ram_size+0x5c>
    c2fe:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c302:	4418      	add	r0, r3
    c304:	f10c 0c06 	add.w	ip, ip, #6
    c308:	44bc      	add	ip, r7
    c30a:	4460      	add	r0, ip
    c30c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c310:	f820 cc03 	strh.w	ip, [r0, #-3]
    c314:	f894 c020 	ldrb.w	ip, [r4, #32]
    c318:	f800 cc01 	strb.w	ip, [r0, #-1]
    c31c:	89e0      	ldrh	r0, [r4, #14]
    c31e:	4430      	add	r0, r6
    c320:	81e0      	strh	r0, [r4, #14]
    c322:	8808      	ldrh	r0, [r1, #0]
    c324:	4430      	add	r0, r6
    c326:	8008      	strh	r0, [r1, #0]
    c328:	b16a      	cbz	r2, c346 <__kernel_ram_size+0x86>
    c32a:	1da1      	adds	r1, r4, #6
    c32c:	4620      	mov	r0, r4
    c32e:	f7ff ff2f 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c332:	81e5      	strh	r5, [r4, #14]
    c334:	7f60      	ldrb	r0, [r4, #29]
    c336:	1c40      	adds	r0, r0, #1
    c338:	7760      	strb	r0, [r4, #29]
    c33a:	7da0      	ldrb	r0, [r4, #22]
    c33c:	b108      	cbz	r0, c342 <__kernel_ram_size+0x82>
    c33e:	88e0      	ldrh	r0, [r4, #6]
    c340:	82a0      	strh	r0, [r4, #20]
    c342:	75a5      	strb	r5, [r4, #22]
    c344:	e00b      	b.n	c35e <__kernel_ram_size+0x9e>
    c346:	7f20      	ldrb	r0, [r4, #28]
    c348:	89e1      	ldrh	r1, [r4, #14]
    c34a:	1d80      	adds	r0, r0, #6
    c34c:	4438      	add	r0, r7
    c34e:	4419      	add	r1, r3
    c350:	4408      	add	r0, r1
    c352:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c356:	83e1      	strh	r1, [r4, #30]
    c358:	7880      	ldrb	r0, [r0, #2]
    c35a:	f884 0020 	strb.w	r0, [r4, #32]
    c35e:	8265      	strh	r5, [r4, #18]
    c360:	75e5      	strb	r5, [r4, #23]
    c362:	2001      	movs	r0, #1
    c364:	e7b9      	b.n	c2da <__kernel_ram_size+0x1a>

0000c366 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c366:	b510      	push	{r4, lr}
    c368:	4604      	mov	r4, r0
    c36a:	88c0      	ldrh	r0, [r0, #6]
    c36c:	88a1      	ldrh	r1, [r4, #4]
    c36e:	4281      	cmp	r1, r0
    c370:	d007      	beq.n	c382 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c372:	89a0      	ldrh	r0, [r4, #12]
    c374:	b928      	cbnz	r0, c382 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c376:	8a20      	ldrh	r0, [r4, #16]
    c378:	b918      	cbnz	r0, c382 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c37a:	88a0      	ldrh	r0, [r4, #4]
    c37c:	8aa1      	ldrh	r1, [r4, #20]
    c37e:	4288      	cmp	r0, r1
    c380:	d101      	bne.n	c386 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c382:	2000      	movs	r0, #0
    c384:	bd10      	pop	{r4, pc}
    c386:	1d21      	adds	r1, r4, #4
    c388:	4620      	mov	r0, r4
    c38a:	f7ff ff01 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c38e:	2000      	movs	r0, #0
    c390:	8220      	strh	r0, [r4, #16]
    c392:	2001      	movs	r0, #1
    c394:	bd10      	pop	{r4, pc}

0000c396 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c396:	b510      	push	{r4, lr}
    c398:	4604      	mov	r4, r0
    c39a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c39e:	88c0      	ldrh	r0, [r0, #6]
    c3a0:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c3a4:	4402      	add	r2, r0
    c3a6:	8820      	ldrh	r0, [r4, #0]
    c3a8:	2845      	cmp	r0, #69	; 0x45
    c3aa:	d200      	bcs.n	c3ae <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c3ac:	2045      	movs	r0, #69	; 0x45
    c3ae:	4288      	cmp	r0, r1
    c3b0:	d204      	bcs.n	c3bc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c3b2:	f44f 7180 	mov.w	r1, #256	; 0x100
    c3b6:	2014      	movs	r0, #20
    c3b8:	f7f7 fbf6 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3bc:	7de0      	ldrb	r0, [r4, #23]
    c3be:	2800      	cmp	r0, #0
    c3c0:	d003      	beq.n	c3ca <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c3c2:	8810      	ldrh	r0, [r2, #0]
    c3c4:	4288      	cmp	r0, r1
    c3c6:	d201      	bcs.n	c3cc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c3c8:	2000      	movs	r0, #0
    c3ca:	bd10      	pop	{r4, pc}
    c3cc:	8011      	strh	r1, [r2, #0]
    c3ce:	1da1      	adds	r1, r4, #6
    c3d0:	4620      	mov	r0, r4
    c3d2:	f7ff fedd 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c3d6:	2000      	movs	r0, #0
    c3d8:	75e0      	strb	r0, [r4, #23]
    c3da:	2001      	movs	r0, #1
    c3dc:	bd10      	pop	{r4, pc}

0000c3de <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3e2:	8941      	ldrh	r1, [r0, #10]
    c3e4:	8886      	ldrh	r6, [r0, #4]
    c3e6:	4604      	mov	r4, r0
    c3e8:	2500      	movs	r5, #0
    c3ea:	f100 070a 	add.w	r7, r0, #10
    c3ee:	e006      	b.n	c3fe <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c3f0:	4639      	mov	r1, r7
    c3f2:	4620      	mov	r0, r4
    c3f4:	f7ff fecc 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c3f8:	1c6d      	adds	r5, r5, #1
    c3fa:	8961      	ldrh	r1, [r4, #10]
    c3fc:	b2ad      	uxth	r5, r5
    c3fe:	42b1      	cmp	r1, r6
    c400:	d1f6      	bne.n	c3f0 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c402:	4628      	mov	r0, r5
    c404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c408 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c408:	b530      	push	{r4, r5, lr}
    c40a:	88c4      	ldrh	r4, [r0, #6]
    c40c:	8881      	ldrh	r1, [r0, #4]
    c40e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c412:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c416:	4413      	add	r3, r2
    c418:	8882      	ldrh	r2, [r0, #4]
    c41a:	8a85      	ldrh	r5, [r0, #20]
    c41c:	42aa      	cmp	r2, r5
    c41e:	d012      	beq.n	c446 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c420:	42a1      	cmp	r1, r4
    c422:	d010      	beq.n	c446 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c424:	8981      	ldrh	r1, [r0, #12]
    c426:	b971      	cbnz	r1, c446 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c428:	6982      	ldr	r2, [r0, #24]
    c42a:	b172      	cbz	r2, c44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c42c:	4610      	mov	r0, r2
    c42e:	f7ff ff16 	bl	c25e <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    c432:	b950      	cbnz	r0, c44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c434:	8910      	ldrh	r0, [r2, #8]
    c436:	3224      	adds	r2, #36	; 0x24
    c438:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c43c:	4410      	add	r0, r2
    c43e:	7899      	ldrb	r1, [r3, #2]
    c440:	7880      	ldrb	r0, [r0, #2]
    c442:	4288      	cmp	r0, r1
    c444:	d101      	bne.n	c44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c446:	2000      	movs	r0, #0
    c448:	bd30      	pop	{r4, r5, pc}
    c44a:	4618      	mov	r0, r3
    c44c:	bd30      	pop	{r4, r5, pc}

0000c44e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    c44e:	7f00      	ldrb	r0, [r0, #28]
    c450:	1d80      	adds	r0, r0, #6
    c452:	4408      	add	r0, r1
    c454:	1ec0      	subs	r0, r0, #3
    c456:	6010      	str	r0, [r2, #0]
    c458:	8808      	ldrh	r0, [r1, #0]
    c45a:	4770      	bx	lr

0000c45c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    c45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c460:	460e      	mov	r6, r1
    c462:	88c1      	ldrh	r1, [r0, #6]
    c464:	8902      	ldrh	r2, [r0, #8]
    c466:	4604      	mov	r4, r0
    c468:	f100 0824 	add.w	r8, r0, #36	; 0x24
    c46c:	8800      	ldrh	r0, [r0, #0]
    c46e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    c472:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    c476:	2845      	cmp	r0, #69	; 0x45
    c478:	d200      	bcs.n	c47c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    c47a:	2045      	movs	r0, #69	; 0x45
    c47c:	42b0      	cmp	r0, r6
    c47e:	d203      	bcs.n	c488 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    c480:	21c2      	movs	r1, #194	; 0xc2
    c482:	2014      	movs	r0, #20
    c484:	f7f7 fb90 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c488:	4610      	mov	r0, r2
    c48a:	f7ff fea2 	bl	c1d2 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c48e:	b110      	cbz	r0, c496 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    c490:	2000      	movs	r0, #0
    c492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c496:	42af      	cmp	r7, r5
    c498:	d908      	bls.n	c4ac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c49a:	7f21      	ldrb	r1, [r4, #28]
    c49c:	1b78      	subs	r0, r7, r5
    c49e:	1a40      	subs	r0, r0, r1
    c4a0:	1f80      	subs	r0, r0, #6
    c4a2:	4286      	cmp	r6, r0
    c4a4:	dd02      	ble.n	c4ac <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c4a6:	2000      	movs	r0, #0
    c4a8:	75e0      	strb	r0, [r4, #23]
    c4aa:	e7f1      	b.n	c490 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    c4ac:	eb08 0005 	add.w	r0, r8, r5
    c4b0:	2101      	movs	r1, #1
    c4b2:	8006      	strh	r6, [r0, #0]
    c4b4:	75e1      	strb	r1, [r4, #23]
    c4b6:	e7ec      	b.n	c492 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000c4b8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    c4b8:	b538      	push	{r3, r4, r5, lr}
    c4ba:	88c4      	ldrh	r4, [r0, #6]
    c4bc:	8881      	ldrh	r1, [r0, #4]
    c4be:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c4c2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c4c6:	441a      	add	r2, r3
    c4c8:	42a1      	cmp	r1, r4
    c4ca:	d010      	beq.n	c4ee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c4cc:	8983      	ldrh	r3, [r0, #12]
    c4ce:	8a05      	ldrh	r5, [r0, #16]
    c4d0:	8812      	ldrh	r2, [r2, #0]
    c4d2:	442b      	add	r3, r5
    c4d4:	4293      	cmp	r3, r2
    c4d6:	d308      	bcc.n	c4ea <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    c4d8:	f8ad 1000 	strh.w	r1, [sp]
    c4dc:	4669      	mov	r1, sp
    c4de:	f7ff fe57 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c4e2:	f8bd 0000 	ldrh.w	r0, [sp]
    c4e6:	42a0      	cmp	r0, r4
    c4e8:	d001      	beq.n	c4ee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c4ea:	2001      	movs	r0, #1
    c4ec:	bd38      	pop	{r3, r4, r5, pc}
    c4ee:	2000      	movs	r0, #0
    c4f0:	bd38      	pop	{r3, r4, r5, pc}

0000c4f2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    c4f2:	b570      	push	{r4, r5, r6, lr}
    c4f4:	88c6      	ldrh	r6, [r0, #6]
    c4f6:	8885      	ldrh	r5, [r0, #4]
    c4f8:	4603      	mov	r3, r0
    c4fa:	f100 0424 	add.w	r4, r0, #36	; 0x24
    c4fe:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    c502:	4420      	add	r0, r4
    c504:	42b5      	cmp	r5, r6
    c506:	d102      	bne.n	c50e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    c508:	2000      	movs	r0, #0
    c50a:	8218      	strh	r0, [r3, #16]
    c50c:	bd70      	pop	{r4, r5, r6, pc}
    c50e:	8804      	ldrh	r4, [r0, #0]
    c510:	899d      	ldrh	r5, [r3, #12]
    c512:	7f1e      	ldrb	r6, [r3, #28]
    c514:	1b64      	subs	r4, r4, r5
    c516:	4435      	add	r5, r6
    c518:	4428      	add	r0, r5
    c51a:	880d      	ldrh	r5, [r1, #0]
    c51c:	b2a4      	uxth	r4, r4
    c51e:	1cc0      	adds	r0, r0, #3
    c520:	42a5      	cmp	r5, r4
    c522:	d900      	bls.n	c526 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    c524:	800c      	strh	r4, [r1, #0]
    c526:	899c      	ldrh	r4, [r3, #12]
    c528:	b124      	cbz	r4, c534 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    c52a:	2400      	movs	r4, #0
    c52c:	7014      	strb	r4, [r2, #0]
    c52e:	8809      	ldrh	r1, [r1, #0]
    c530:	8219      	strh	r1, [r3, #16]
    c532:	bd70      	pop	{r4, r5, r6, pc}
    c534:	2401      	movs	r4, #1
    c536:	e7f9      	b.n	c52c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000c538 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    c538:	b510      	push	{r4, lr}
    c53a:	8a81      	ldrh	r1, [r0, #20]
    c53c:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c540:	3aff      	subs	r2, #255	; 0xff
    c542:	d002      	beq.n	c54a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x12>
    c544:	7d82      	ldrb	r2, [r0, #22]
    c546:	b952      	cbnz	r2, c55e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    c548:	e004      	b.n	c554 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1c>
    c54a:	f240 3155 	movw	r1, #853	; 0x355
    c54e:	2014      	movs	r0, #20
    c550:	f7f7 fb2a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c554:	8880      	ldrh	r0, [r0, #4]
    c556:	4281      	cmp	r1, r0
    c558:	d101      	bne.n	c55e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x26>
    c55a:	2000      	movs	r0, #0
    c55c:	bd10      	pop	{r4, pc}
    c55e:	2001      	movs	r0, #1
    c560:	bd10      	pop	{r4, pc}

0000c562 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    c562:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c566:	8281      	strh	r1, [r0, #20]
    c568:	2100      	movs	r1, #0
    c56a:	7581      	strb	r1, [r0, #22]
    c56c:	4770      	bx	lr

0000c56e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    c56e:	b510      	push	{r4, lr}
    c570:	8a81      	ldrh	r1, [r0, #20]
    c572:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c576:	3aff      	subs	r2, #255	; 0xff
    c578:	d004      	beq.n	c584 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    c57a:	f44f 714e 	mov.w	r1, #824	; 0x338
    c57e:	2014      	movs	r0, #20
    c580:	f7f7 fb12 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c584:	88c1      	ldrh	r1, [r0, #6]
    c586:	8281      	strh	r1, [r0, #20]
    c588:	89c1      	ldrh	r1, [r0, #14]
    c58a:	b101      	cbz	r1, c58e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x20>
    c58c:	2101      	movs	r1, #1
    c58e:	7581      	strb	r1, [r0, #22]
    c590:	bd10      	pop	{r4, pc}

0000c592 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    c592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c596:	461d      	mov	r5, r3
    c598:	4616      	mov	r6, r2
    c59a:	9f06      	ldr	r7, [sp, #24]
    c59c:	460b      	mov	r3, r1
    c59e:	4604      	mov	r4, r0
    c5a0:	463a      	mov	r2, r7
    c5a2:	4629      	mov	r1, r5
    c5a4:	4630      	mov	r0, r6
    c5a6:	f000 f84f 	bl	c648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c5aa:	4283      	cmp	r3, r0
    c5ac:	d201      	bcs.n	c5b2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    c5ae:	21a1      	movs	r1, #161	; 0xa1
    c5b0:	e018      	b.n	c5e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c5b2:	1ce0      	adds	r0, r4, #3
    c5b4:	f020 0103 	bic.w	r1, r0, #3
    c5b8:	4620      	mov	r0, r4
    c5ba:	42a1      	cmp	r1, r4
    c5bc:	d001      	beq.n	c5c2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    c5be:	21a2      	movs	r1, #162	; 0xa2
    c5c0:	e010      	b.n	c5e4 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c5c2:	2224      	movs	r2, #36	; 0x24
    c5c4:	2100      	movs	r1, #0
    c5c6:	f7ff f97e 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c5ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c5ce:	82a0      	strh	r0, [r4, #20]
    c5d0:	19a8      	adds	r0, r5, r6
    c5d2:	1d80      	adds	r0, r0, #6
    c5d4:	4378      	muls	r0, r7
    c5d6:	b280      	uxth	r0, r0
    c5d8:	7725      	strb	r5, [r4, #28]
    c5da:	8060      	strh	r0, [r4, #2]
    c5dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    c5e0:	d903      	bls.n	c5ea <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    c5e2:	21a8      	movs	r1, #168	; 0xa8
    c5e4:	2014      	movs	r0, #20
    c5e6:	f7f7 fadf 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5ea:	8026      	strh	r6, [r4, #0]
    c5ec:	2000      	movs	r0, #0
    c5ee:	7760      	strb	r0, [r4, #29]
    c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c5f4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    c5f4:	6181      	str	r1, [r0, #24]
    c5f6:	6188      	str	r0, [r1, #24]
    c5f8:	4770      	bx	lr

0000c5fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    c5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5fe:	460b      	mov	r3, r1
    c600:	4604      	mov	r4, r0
    c602:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c606:	8905      	ldrh	r5, [r0, #8]
    c608:	8946      	ldrh	r6, [r0, #10]
    c60a:	8880      	ldrh	r0, [r0, #4]
    c60c:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    c610:	4439      	add	r1, r7
    c612:	460f      	mov	r7, r1
    c614:	4285      	cmp	r5, r0
    c616:	d102      	bne.n	c61e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    c618:	2000      	movs	r0, #0
    c61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c61e:	b10a      	cbz	r2, c624 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    c620:	1cc8      	adds	r0, r1, #3
    c622:	6010      	str	r0, [r2, #0]
    c624:	b123      	cbz	r3, c630 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    c626:	7f22      	ldrb	r2, [r4, #28]
    c628:	1cf9      	adds	r1, r7, #3
    c62a:	4618      	mov	r0, r3
    c62c:	f7ff f8d1 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c630:	883f      	ldrh	r7, [r7, #0]
    c632:	f104 0108 	add.w	r1, r4, #8
    c636:	4620      	mov	r0, r4
    c638:	f7ff fdaa 	bl	c190 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c63c:	42b5      	cmp	r5, r6
    c63e:	d101      	bne.n	c644 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    c640:	8920      	ldrh	r0, [r4, #8]
    c642:	8160      	strh	r0, [r4, #10]
    c644:	4638      	mov	r0, r7
    c646:	e7e8      	b.n	c61a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000c648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    c648:	4401      	add	r1, r0
    c64a:	1d89      	adds	r1, r1, #6
    c64c:	4351      	muls	r1, r2
    c64e:	b28a      	uxth	r2, r1
    c650:	2100      	movs	r1, #0
    c652:	2845      	cmp	r0, #69	; 0x45
    c654:	d201      	bcs.n	c65a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    c656:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    c65a:	3224      	adds	r2, #36	; 0x24
    c65c:	1850      	adds	r0, r2, r1
    c65e:	b280      	uxth	r0, r0
    c660:	4770      	bx	lr

0000c662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    c662:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c666:	4688      	mov	r8, r1
    c668:	88c1      	ldrh	r1, [r0, #6]
    c66a:	4604      	mov	r4, r0
    c66c:	8900      	ldrh	r0, [r0, #8]
    c66e:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    c672:	f104 0524 	add.w	r5, r4, #36	; 0x24
    c676:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c67a:	eb05 0906 	add.w	r9, r5, r6
    c67e:	f7ff fda8 	bl	c1d2 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c682:	2200      	movs	r2, #0
    c684:	b998      	cbnz	r0, c6ae <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    c686:	8820      	ldrh	r0, [r4, #0]
    c688:	2845      	cmp	r0, #69	; 0x45
    c68a:	d200      	bcs.n	c68e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    c68c:	2045      	movs	r0, #69	; 0x45
    c68e:	42b7      	cmp	r7, r6
    c690:	d906      	bls.n	c6a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c692:	7f23      	ldrb	r3, [r4, #28]
    c694:	1bb9      	subs	r1, r7, r6
    c696:	1ac9      	subs	r1, r1, r3
    c698:	1f89      	subs	r1, r1, #6
    c69a:	4281      	cmp	r1, r0
    c69c:	da00      	bge.n	c6a0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c69e:	4608      	mov	r0, r1
    c6a0:	89e1      	ldrh	r1, [r4, #14]
    c6a2:	b111      	cbz	r1, c6aa <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    c6a4:	f8b9 3000 	ldrh.w	r3, [r9]
    c6a8:	1ac0      	subs	r0, r0, r3
    c6aa:	4540      	cmp	r0, r8
    c6ac:	da03      	bge.n	c6b6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    c6ae:	8262      	strh	r2, [r4, #18]
    c6b0:	2000      	movs	r0, #0
    c6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6b6:	7f20      	ldrb	r0, [r4, #28]
    c6b8:	4429      	add	r1, r5
    c6ba:	1d80      	adds	r0, r0, #6
    c6bc:	4430      	add	r0, r6
    c6be:	4408      	add	r0, r1
    c6c0:	f8a4 8012 	strh.w	r8, [r4, #18]
    c6c4:	1ec0      	subs	r0, r0, #3
    c6c6:	e7f4      	b.n	c6b2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000c6c8 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    c6c8:	2100      	movs	r1, #0
    c6ca:	81c1      	strh	r1, [r0, #14]
    c6cc:	8241      	strh	r1, [r0, #18]
    c6ce:	75c1      	strb	r1, [r0, #23]
    c6d0:	7581      	strb	r1, [r0, #22]
    c6d2:	4770      	bx	lr

0000c6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    c6d4:	b570      	push	{r4, r5, r6, lr}
    c6d6:	2300      	movs	r3, #0
    c6d8:	2908      	cmp	r1, #8
    c6da:	d204      	bcs.n	c6e6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    c6dc:	f240 11cb 	movw	r1, #459	; 0x1cb
    c6e0:	2015      	movs	r0, #21
    c6e2:	f7f7 fa61 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6e6:	6802      	ldr	r2, [r0, #0]
    c6e8:	b90a      	cbnz	r2, c6ee <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    c6ea:	e01e      	b.n	c72a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c6ec:	4610      	mov	r0, r2
    c6ee:	6802      	ldr	r2, [r0, #0]
    c6f0:	8893      	ldrh	r3, [r2, #4]
    c6f2:	428b      	cmp	r3, r1
    c6f4:	d002      	beq.n	c6fc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    c6f6:	6813      	ldr	r3, [r2, #0]
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d1f7      	bne.n	c6ec <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    c6fc:	8894      	ldrh	r4, [r2, #4]
    c6fe:	4613      	mov	r3, r2
    c700:	428c      	cmp	r4, r1
    c702:	d101      	bne.n	c708 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    c704:	6811      	ldr	r1, [r2, #0]
    c706:	e00d      	b.n	c724 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    c708:	f101 0508 	add.w	r5, r1, #8
    c70c:	b2ae      	uxth	r6, r5
    c70e:	2500      	movs	r5, #0
    c710:	42b4      	cmp	r4, r6
    c712:	d309      	bcc.n	c728 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    c714:	1a64      	subs	r4, r4, r1
    c716:	4411      	add	r1, r2
    c718:	600d      	str	r5, [r1, #0]
    c71a:	808c      	strh	r4, [r1, #4]
    c71c:	6802      	ldr	r2, [r0, #0]
    c71e:	6812      	ldr	r2, [r2, #0]
    c720:	6002      	str	r2, [r0, #0]
    c722:	600a      	str	r2, [r1, #0]
    c724:	6001      	str	r1, [r0, #0]
    c726:	e000      	b.n	c72a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c728:	2300      	movs	r3, #0
    c72a:	4618      	mov	r0, r3
    c72c:	bd70      	pop	{r4, r5, r6, pc}

0000c72e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    c72e:	b510      	push	{r4, lr}
    c730:	000c      	movs	r4, r1
    c732:	d006      	beq.n	c742 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    c734:	2c08      	cmp	r4, #8
    c736:	d209      	bcs.n	c74c <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    c738:	f240 1195 	movw	r1, #405	; 0x195
    c73c:	2015      	movs	r0, #21
    c73e:	f7f7 fa33 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c742:	b108      	cbz	r0, c748 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    c744:	2100      	movs	r1, #0
    c746:	6001      	str	r1, [r0, #0]
    c748:	2000      	movs	r0, #0
    c74a:	bd10      	pop	{r4, pc}
    c74c:	b118      	cbz	r0, c756 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    c74e:	b2a1      	uxth	r1, r4
    c750:	6800      	ldr	r0, [r0, #0]
    c752:	f000 f814 	bl	c77e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    c756:	1d20      	adds	r0, r4, #4
    c758:	bd10      	pop	{r4, pc}

0000c75a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    c75a:	2100      	movs	r1, #0
    c75c:	6802      	ldr	r2, [r0, #0]
    c75e:	e003      	b.n	c768 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    c760:	8893      	ldrh	r3, [r2, #4]
    c762:	6812      	ldr	r2, [r2, #0]
    c764:	4419      	add	r1, r3
    c766:	b289      	uxth	r1, r1
    c768:	2a00      	cmp	r2, #0
    c76a:	d1f9      	bne.n	c760 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    c76c:	f000 b807 	b.w	c77e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000c770 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    c770:	2300      	movs	r3, #0
    c772:	600b      	str	r3, [r1, #0]
    c774:	808a      	strh	r2, [r1, #4]
    c776:	6802      	ldr	r2, [r0, #0]
    c778:	600a      	str	r2, [r1, #0]
    c77a:	6001      	str	r1, [r0, #0]
    c77c:	4770      	bx	lr
    c77e:	2300      	movs	r3, #0
    c780:	6043      	str	r3, [r0, #4]
    c782:	1d02      	adds	r2, r0, #4
    c784:	8101      	strh	r1, [r0, #8]
    c786:	6002      	str	r2, [r0, #0]
    c788:	4770      	bx	lr

0000c78a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    c78a:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    c78e:	3bff      	subs	r3, #255	; 0xff
    c790:	d001      	beq.n	c796 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    c792:	2902      	cmp	r1, #2
    c794:	d301      	bcc.n	c79a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    c796:	2000      	movs	r0, #0
    c798:	4770      	bx	lr
    c79a:	f7f7 bcd9 	b.w	4150 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000c79e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>:
    c79e:	b50e      	push	{r1, r2, r3, lr}
    c7a0:	4669      	mov	r1, sp
    c7a2:	f000 f818 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    c7a6:	b120      	cbz	r0, c7b2 <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x14>
    c7a8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    c7ac:	2017      	movs	r0, #23
    c7ae:	f7f7 f9fb 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7b2:	4668      	mov	r0, sp
    c7b4:	f7f7 fc4a 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    c7b8:	b108      	cbz	r0, c7be <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY+0x20>
    c7ba:	2000      	movs	r0, #0
    c7bc:	bd0e      	pop	{r1, r2, r3, pc}
    c7be:	2001      	movs	r0, #1
    c7c0:	bd0e      	pop	{r1, r2, r3, pc}

0000c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    c7c2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    c7c6:	3aff      	subs	r2, #255	; 0xff
    c7c8:	d001      	beq.n	c7ce <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    c7ca:	2902      	cmp	r1, #2
    c7cc:	d301      	bcc.n	c7d2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    c7ce:	2000      	movs	r0, #0
    c7d0:	4770      	bx	lr
    c7d2:	f7f7 bcf7 	b.w	41c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    c7d6:	b570      	push	{r4, r5, r6, lr}
    c7d8:	4605      	mov	r5, r0
    c7da:	460c      	mov	r4, r1
    c7dc:	4608      	mov	r0, r1
    c7de:	f000 f864 	bl	c8aa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    c7e2:	b108      	cbz	r0, c7e8 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    c7e4:	2010      	movs	r0, #16
    c7e6:	bd70      	pop	{r4, r5, r6, pc}
    c7e8:	2d02      	cmp	r5, #2
    c7ea:	d301      	bcc.n	c7f0 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    c7ec:	2007      	movs	r0, #7
    c7ee:	bd70      	pop	{r4, r5, r6, pc}
    c7f0:	7025      	strb	r5, [r4, #0]
    c7f2:	2000      	movs	r0, #0
    c7f4:	8060      	strh	r0, [r4, #2]
    c7f6:	bd70      	pop	{r4, r5, r6, pc}
    c7f8:	b510      	push	{r4, lr}
    c7fa:	4604      	mov	r4, r0
    c7fc:	f7f7 fd2e 	bl	425c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    c800:	42a0      	cmp	r0, r4
    c802:	d901      	bls.n	c808 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    c804:	2001      	movs	r0, #1
    c806:	bd10      	pop	{r4, pc}
    c808:	2000      	movs	r0, #0
    c80a:	bd10      	pop	{r4, pc}
    c80c:	4770      	bx	lr

0000c80e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    c80e:	b570      	push	{r4, r5, r6, lr}
    c810:	460e      	mov	r6, r1
    c812:	461d      	mov	r5, r3
    c814:	4611      	mov	r1, r2
    c816:	f000 f811 	bl	c83c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    c81a:	4604      	mov	r4, r0
    c81c:	4629      	mov	r1, r5
    c81e:	4630      	mov	r0, r6
    c820:	f000 f803 	bl	c82a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    c824:	4420      	add	r0, r4
    c826:	1d00      	adds	r0, r0, #4
    c828:	bd70      	pop	{r4, r5, r6, pc}
    c82a:	b510      	push	{r4, lr}
    c82c:	460a      	mov	r2, r1
    c82e:	2101      	movs	r1, #1
    c830:	f7ff ff0a 	bl	c648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c834:	1cc0      	adds	r0, r0, #3
    c836:	f020 0003 	bic.w	r0, r0, #3
    c83a:	bd10      	pop	{r4, pc}
    c83c:	b510      	push	{r4, lr}
    c83e:	460a      	mov	r2, r1
    c840:	2101      	movs	r1, #1
    c842:	f7ff ff01 	bl	c648 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c846:	1cc0      	adds	r0, r0, #3
    c848:	f020 0003 	bic.w	r0, r0, #3
    c84c:	bd10      	pop	{r4, pc}

0000c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>:
    c84e:	b510      	push	{r4, lr}
    c850:	680b      	ldr	r3, [r1, #0]
    c852:	4604      	mov	r4, r0
    c854:	2b00      	cmp	r3, #0
    c856:	d00d      	beq.n	c874 <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x26>
    c858:	88ca      	ldrh	r2, [r1, #6]
    c85a:	4619      	mov	r1, r3
    c85c:	6820      	ldr	r0, [r4, #0]
    c85e:	f7ff ff87 	bl	c770 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    c862:	7920      	ldrb	r0, [r4, #4]
    c864:	2801      	cmp	r0, #1
    c866:	d102      	bne.n	c86e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x20>
    c868:	6820      	ldr	r0, [r4, #0]
    c86a:	f7ff ff76 	bl	c75a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    c86e:	7920      	ldrb	r0, [r4, #4]
    c870:	1e40      	subs	r0, r0, #1
    c872:	7120      	strb	r0, [r4, #4]
    c874:	bd10      	pop	{r4, pc}
    c876:	2800      	cmp	r0, #0
    c878:	db09      	blt.n	c88e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA+0x40>
    c87a:	f000 021f 	and.w	r2, r0, #31
    c87e:	2101      	movs	r1, #1
    c880:	4091      	lsls	r1, r2
    c882:	0940      	lsrs	r0, r0, #5
    c884:	0080      	lsls	r0, r0, #2
    c886:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c88a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c88e:	4770      	bx	lr

0000c890 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    c890:	f7f7 bef8 	b.w	4684 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000c894 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    c894:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c898:	2000      	movs	r0, #0
    c89a:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    c89e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c8a2:	2001      	movs	r0, #1
    c8a4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c8a8:	4770      	bx	lr

0000c8aa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    c8aa:	b108      	cbz	r0, c8b0 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    c8ac:	2000      	movs	r0, #0
    c8ae:	4770      	bx	lr
    c8b0:	2001      	movs	r0, #1
    c8b2:	4770      	bx	lr

0000c8b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    c8b4:	f7f8 b82c 	b.w	4910 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000c8b8 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    c8b8:	f7f8 b81a 	b.w	48f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000c8bc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    c8bc:	b510      	push	{r4, lr}
    c8be:	2900      	cmp	r1, #0
    c8c0:	4604      	mov	r4, r0
    c8c2:	f04f 0106 	mov.w	r1, #6
    c8c6:	d002      	beq.n	c8ce <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    c8c8:	f7f7 fa06 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c8cc:	e001      	b.n	c8d2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    c8ce:	f7f7 fa1f 	bl	3d10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c8d2:	7960      	ldrb	r0, [r4, #5]
    c8d4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c8d8:	7160      	strb	r0, [r4, #5]
    c8da:	bd10      	pop	{r4, pc}

0000c8dc <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    c8dc:	4770      	bx	lr

0000c8de <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    c8de:	b530      	push	{r4, r5, lr}
    c8e0:	460c      	mov	r4, r1
    c8e2:	4605      	mov	r5, r0
    c8e4:	b08d      	sub	sp, #52	; 0x34
    c8e6:	f04f 0103 	mov.w	r1, #3
    c8ea:	f104 0003 	add.w	r0, r4, #3
    c8ee:	b112      	cbz	r2, c8f6 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    c8f0:	f7f7 f9f2 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    c8f4:	e001      	b.n	c8fa <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    c8f6:	f7f7 fa0b 	bl	3d10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    c8fa:	7960      	ldrb	r0, [r4, #5]
    c8fc:	220d      	movs	r2, #13
    c8fe:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    c902:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c906:	7160      	strb	r0, [r4, #5]
    c908:	2100      	movs	r1, #0
    c90a:	a804      	add	r0, sp, #16
    c90c:	f7fe ffdb 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c910:	78e0      	ldrb	r0, [r4, #3]
    c912:	f88d 001f 	strb.w	r0, [sp, #31]
    c916:	7920      	ldrb	r0, [r4, #4]
    c918:	f88d 001e 	strb.w	r0, [sp, #30]
    c91c:	7960      	ldrb	r0, [r4, #5]
    c91e:	f88d 001d 	strb.w	r0, [sp, #29]
    c922:	2210      	movs	r2, #16
    c924:	4629      	mov	r1, r5
    c926:	4668      	mov	r0, sp
    c928:	f7fe ff53 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c92c:	4668      	mov	r0, sp
    c92e:	f7ff ffaf 	bl	c890 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    c932:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c936:	7020      	strb	r0, [r4, #0]
    c938:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    c93c:	7060      	strb	r0, [r4, #1]
    c93e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    c942:	70a0      	strb	r0, [r4, #2]
    c944:	b00d      	add	sp, #52	; 0x34
    c946:	bd30      	pop	{r4, r5, pc}

0000c948 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    c948:	f7f8 bb78 	b.w	503c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x370>
    c94c:	07c1      	lsls	r1, r0, #31
    c94e:	d001      	beq.n	c954 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    c950:	2001      	movs	r0, #1
    c952:	4770      	bx	lr
    c954:	0780      	lsls	r0, r0, #30
    c956:	d501      	bpl.n	c95c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    c958:	2002      	movs	r0, #2
    c95a:	4770      	bx	lr
    c95c:	2000      	movs	r0, #0
    c95e:	4770      	bx	lr
    c960:	b510      	push	{r4, lr}
    c962:	2801      	cmp	r0, #1
    c964:	d008      	beq.n	c978 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    c966:	2802      	cmp	r0, #2
    c968:	d004      	beq.n	c974 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    c96a:	f240 3197 	movw	r1, #919	; 0x397
    c96e:	2006      	movs	r0, #6
    c970:	f7f7 f91a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c974:	2001      	movs	r0, #1
    c976:	bd10      	pop	{r4, pc}
    c978:	2000      	movs	r0, #0
    c97a:	bd10      	pop	{r4, pc}
    c97c:	2900      	cmp	r1, #0
    c97e:	d004      	beq.n	c98a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    c980:	2801      	cmp	r0, #1
    c982:	d003      	beq.n	c98c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    c984:	2901      	cmp	r1, #1
    c986:	d001      	beq.n	c98c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    c988:	2002      	movs	r0, #2
    c98a:	4770      	bx	lr
    c98c:	2001      	movs	r0, #1
    c98e:	4770      	bx	lr
    c990:	f7ff bdaf 	b.w	c4f2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000c994 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    c994:	2201      	movs	r2, #1
    c996:	f7f8 befb 	b.w	5790 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000c99a <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    c99a:	b510      	push	{r4, lr}
    c99c:	f002 fb1e 	bl	efdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    c9a0:	b118      	cbz	r0, c9aa <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    c9a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9a6:	f7fd bc87 	b.w	a2b8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    c9aa:	20ff      	movs	r0, #255	; 0xff
    c9ac:	bd10      	pop	{r4, pc}

0000c9ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    c9ae:	b510      	push	{r4, lr}
    c9b0:	f7f8 ff38 	bl	5824 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    c9b4:	2810      	cmp	r0, #16
    c9b6:	d003      	beq.n	c9c0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    c9b8:	f7f8 ff04 	bl	57c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    c9bc:	2810      	cmp	r0, #16
    c9be:	d100      	bne.n	c9c2 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    c9c0:	2008      	movs	r0, #8
    c9c2:	bd10      	pop	{r4, pc}

0000c9c4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    c9c4:	b510      	push	{r4, lr}
    c9c6:	f7f8 ff2d 	bl	5824 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    c9ca:	2810      	cmp	r0, #16
    c9cc:	d007      	beq.n	c9de <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c9ce:	f7f8 fef9 	bl	57c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa8>
    c9d2:	2810      	cmp	r0, #16
    c9d4:	d003      	beq.n	c9de <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    c9d6:	f7f8 ff6d 	bl	58b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x198>
    c9da:	2001      	movs	r0, #1
    c9dc:	bd10      	pop	{r4, pc}
    c9de:	2000      	movs	r0, #0
    c9e0:	bd10      	pop	{r4, pc}

0000c9e2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    c9e2:	b510      	push	{r4, lr}
    c9e4:	f7f8 ff1e 	bl	5824 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x108>
    c9e8:	2810      	cmp	r0, #16
    c9ea:	d003      	beq.n	c9f4 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    c9ec:	f7f8 ffaa 	bl	5944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x228>
    c9f0:	2001      	movs	r0, #1
    c9f2:	bd10      	pop	{r4, pc}
    c9f4:	2000      	movs	r0, #0
    c9f6:	bd10      	pop	{r4, pc}

0000c9f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    c9f8:	b570      	push	{r4, r5, r6, lr}
    c9fa:	460e      	mov	r6, r1
    c9fc:	b08c      	sub	sp, #48	; 0x30
    c9fe:	4614      	mov	r4, r2
    ca00:	4601      	mov	r1, r0
    ca02:	461d      	mov	r5, r3
    ca04:	2210      	movs	r2, #16
    ca06:	4668      	mov	r0, sp
    ca08:	f000 f91a 	bl	cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ca0c:	2210      	movs	r2, #16
    ca0e:	4631      	mov	r1, r6
    ca10:	a804      	add	r0, sp, #16
    ca12:	f000 f915 	bl	cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ca16:	4668      	mov	r0, sp
    ca18:	f7ff ff3a 	bl	c890 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ca1c:	a908      	add	r1, sp, #32
    ca1e:	f04f 0210 	mov.w	r2, #16
    ca22:	4628      	mov	r0, r5
    ca24:	b11c      	cbz	r4, ca2e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ca26:	f000 f90b 	bl	cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ca2a:	b00c      	add	sp, #48	; 0x30
    ca2c:	bd70      	pop	{r4, r5, r6, pc}
    ca2e:	f7fe fed0 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca32:	e7fa      	b.n	ca2a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ca34:	b510      	push	{r4, lr}
    ca36:	460c      	mov	r4, r1
    ca38:	2100      	movs	r1, #0
    ca3a:	f7ff fec2 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ca3e:	6060      	str	r0, [r4, #4]
    ca40:	b118      	cbz	r0, ca4a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    ca42:	2001      	movs	r0, #1
    ca44:	7020      	strb	r0, [r4, #0]
    ca46:	2000      	movs	r0, #0
    ca48:	bd10      	pop	{r4, pc}
    ca4a:	2002      	movs	r0, #2
    ca4c:	bd10      	pop	{r4, pc}

0000ca4e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ca4e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ca52:	4348      	muls	r0, r1
    ca54:	4770      	bx	lr

0000ca56 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ca56:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ca5a:	fbb0 f0f1 	udiv	r0, r0, r1
    ca5e:	b280      	uxth	r0, r0
    ca60:	4770      	bx	lr

0000ca62 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ca62:	b570      	push	{r4, r5, r6, lr}
    ca64:	4604      	mov	r4, r0
    ca66:	4290      	cmp	r0, r2
    ca68:	d20b      	bcs.n	ca82 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ca6a:	1b10      	subs	r0, r2, r4
    ca6c:	2864      	cmp	r0, #100	; 0x64
    ca6e:	d200      	bcs.n	ca72 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ca70:	2064      	movs	r0, #100	; 0x64
    ca72:	1825      	adds	r5, r4, r0
    ca74:	428d      	cmp	r5, r1
    ca76:	d803      	bhi.n	ca80 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    ca78:	2104      	movs	r1, #4
    ca7a:	f7f4 fc5d 	bl	1338 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    ca7e:	b108      	cbz	r0, ca84 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    ca80:	4620      	mov	r0, r4
    ca82:	bd70      	pop	{r4, r5, r6, pc}
    ca84:	4628      	mov	r0, r5
    ca86:	bd70      	pop	{r4, r5, r6, pc}

0000ca88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ca88:	b510      	push	{r4, lr}
    ca8a:	f1a2 030f 	sub.w	r3, r2, #15
    ca8e:	290c      	cmp	r1, #12
    ca90:	d244      	bcs.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ca92:	e8df f001 	tbb	[pc, r1]
    ca96:	0806      	.short	0x0806
    ca98:	1815120d 	.word	0x1815120d
    ca9c:	4127241c 	.word	0x4127241c
    caa0:	312a      	.short	0x312a
    caa2:	b3c2      	cbz	r2, cb16 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    caa4:	e03a      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caa6:	2a07      	cmp	r2, #7
    caa8:	d03a      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caaa:	2a08      	cmp	r2, #8
    caac:	d038      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caae:	e035      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cab0:	2a0c      	cmp	r2, #12
    cab2:	d035      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cab4:	2a0b      	cmp	r2, #11
    cab6:	d033      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cab8:	e030      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caba:	2a0d      	cmp	r2, #13
    cabc:	d030      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cabe:	e02d      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cac0:	2b0c      	cmp	r3, #12
    cac2:	d92d      	bls.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cac4:	e02a      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cac6:	3a10      	subs	r2, #16
    cac8:	2a0b      	cmp	r2, #11
    caca:	d929      	bls.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cacc:	e026      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cace:	2b03      	cmp	r3, #3
    cad0:	d926      	bls.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cad2:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    cad6:	b308      	cbz	r0, cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cad8:	2a1b      	cmp	r2, #27
    cada:	d921      	bls.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cadc:	e01e      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cade:	2a04      	cmp	r2, #4
    cae0:	d01e      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cae2:	e01b      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cae4:	2a06      	cmp	r2, #6
    cae6:	d01b      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cae8:	e018      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caea:	2a1c      	cmp	r2, #28
    caec:	d018      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caee:	2a1d      	cmp	r2, #29
    caf0:	d016      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caf2:	2a1e      	cmp	r2, #30
    caf4:	d014      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    caf6:	e011      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    caf8:	2a1f      	cmp	r2, #31
    cafa:	d011      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cafc:	2a20      	cmp	r2, #32
    cafe:	d00f      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb00:	2a21      	cmp	r2, #33	; 0x21
    cb02:	d00d      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb04:	2a22      	cmp	r2, #34	; 0x22
    cb06:	d00b      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb08:	2a23      	cmp	r2, #35	; 0x23
    cb0a:	d009      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb0c:	2a24      	cmp	r2, #36	; 0x24
    cb0e:	d007      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb10:	2a26      	cmp	r2, #38	; 0x26
    cb12:	d005      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb14:	e002      	b.n	cb1c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cb16:	e003      	b.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb18:	2a0e      	cmp	r2, #14
    cb1a:	d001      	beq.n	cb20 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    cb1c:	2000      	movs	r0, #0
    cb1e:	bd10      	pop	{r4, pc}
    cb20:	2001      	movs	r0, #1
    cb22:	bd10      	pop	{r4, pc}

0000cb24 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    cb24:	280c      	cmp	r0, #12
    cb26:	d013      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb28:	280b      	cmp	r0, #11
    cb2a:	d011      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb2c:	280d      	cmp	r0, #13
    cb2e:	d00f      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb30:	281f      	cmp	r0, #31
    cb32:	d00d      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb34:	2820      	cmp	r0, #32
    cb36:	d00b      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb38:	2821      	cmp	r0, #33	; 0x21
    cb3a:	d009      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb3c:	2822      	cmp	r0, #34	; 0x22
    cb3e:	d007      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb40:	2823      	cmp	r0, #35	; 0x23
    cb42:	d005      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb44:	2824      	cmp	r0, #36	; 0x24
    cb46:	d003      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb48:	2826      	cmp	r0, #38	; 0x26
    cb4a:	d001      	beq.n	cb50 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cb4c:	2000      	movs	r0, #0
    cb4e:	4770      	bx	lr
    cb50:	2001      	movs	r0, #1
    cb52:	4770      	bx	lr

0000cb54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    cb54:	f011 0f0c 	tst.w	r1, #12
    cb58:	d016      	beq.n	cb88 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    cb5a:	074a      	lsls	r2, r1, #29
    cb5c:	f44f 7116 	mov.w	r1, #600	; 0x258
    cb60:	2a00      	cmp	r2, #0
    cb62:	da02      	bge.n	cb6a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    cb64:	f04f 0210 	mov.w	r2, #16
    cb68:	e001      	b.n	cb6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    cb6a:	f04f 0240 	mov.w	r2, #64	; 0x40
    cb6e:	da01      	bge.n	cb74 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    cb70:	f04f 0196 	mov.w	r1, #150	; 0x96
    cb74:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    cb78:	eba0 0301 	sub.w	r3, r0, r1
    cb7c:	4288      	cmp	r0, r1
    cb7e:	d910      	bls.n	cba2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cb80:	fb93 f0f2 	sdiv	r0, r3, r2
    cb84:	b280      	uxth	r0, r0
    cb86:	4770      	bx	lr
    cb88:	2902      	cmp	r1, #2
    cb8a:	d002      	beq.n	cb92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    cb8c:	2870      	cmp	r0, #112	; 0x70
    cb8e:	d80a      	bhi.n	cba6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    cb90:	e007      	b.n	cba2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cb92:	283c      	cmp	r0, #60	; 0x3c
    cb94:	d905      	bls.n	cba2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cb96:	383c      	subs	r0, #60	; 0x3c
    cb98:	17c1      	asrs	r1, r0, #31
    cb9a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cb9e:	1080      	asrs	r0, r0, #2
    cba0:	e7f0      	b.n	cb84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cba2:	2000      	movs	r0, #0
    cba4:	e7ee      	b.n	cb84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cba6:	3870      	subs	r0, #112	; 0x70
    cba8:	17c1      	asrs	r1, r0, #31
    cbaa:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    cbae:	10c0      	asrs	r0, r0, #3
    cbb0:	e7e8      	b.n	cb84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000cbb2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    cbb2:	6809      	ldr	r1, [r1, #0]
    cbb4:	f8c0 105e 	str.w	r1, [r0, #94]	; 0x5e
    cbb8:	4770      	bx	lr

0000cbba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    cbba:	07c1      	lsls	r1, r0, #31
    cbbc:	d001      	beq.n	cbc2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    cbbe:	2001      	movs	r0, #1
    cbc0:	4770      	bx	lr
    cbc2:	0781      	lsls	r1, r0, #30
    cbc4:	d501      	bpl.n	cbca <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    cbc6:	2002      	movs	r0, #2
    cbc8:	4770      	bx	lr
    cbca:	0740      	lsls	r0, r0, #29
    cbcc:	d501      	bpl.n	cbd2 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    cbce:	2008      	movs	r0, #8
    cbd0:	4770      	bx	lr
    cbd2:	2000      	movs	r0, #0
    cbd4:	4770      	bx	lr

0000cbd6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    cbd6:	b510      	push	{r4, lr}
    cbd8:	f640 12c4 	movw	r2, #2500	; 0x9c4
    cbdc:	2901      	cmp	r1, #1
    cbde:	d006      	beq.n	cbee <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    cbe0:	2902      	cmp	r1, #2
    cbe2:	d005      	beq.n	cbf0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    cbe4:	f240 4129 	movw	r1, #1065	; 0x429
    cbe8:	2029      	movs	r0, #41	; 0x29
    cbea:	f7f6 ffdd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbee:	b108      	cbz	r0, cbf4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    cbf0:	4610      	mov	r0, r2
    cbf2:	bd10      	pop	{r4, pc}
    cbf4:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cbf8:	bd10      	pop	{r4, pc}

0000cbfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    cbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbfe:	460c      	mov	r4, r1
    cc00:	4605      	mov	r5, r0
    cc02:	68c6      	ldr	r6, [r0, #12]
    cc04:	f7f4 ff72 	bl	1aec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    cc08:	b198      	cbz	r0, cc32 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    cc0a:	b1bc      	cbz	r4, cc3c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cc0c:	4630      	mov	r0, r6
    cc0e:	68e9      	ldr	r1, [r5, #12]
    cc10:	f7f4 fc86 	bl	1520 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    cc14:	2800      	cmp	r0, #0
    cc16:	dd11      	ble.n	cc3c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cc18:	4420      	add	r0, r4
    cc1a:	1e40      	subs	r0, r0, #1
    cc1c:	fbb0 f7f4 	udiv	r7, r0, r4
    cc20:	fb07 f104 	mul.w	r1, r7, r4
    cc24:	4630      	mov	r0, r6
    cc26:	f7f4 fc49 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    cc2a:	60e8      	str	r0, [r5, #12]
    cc2c:	4638      	mov	r0, r7
    cc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc32:	f240 21ae 	movw	r1, #686	; 0x2ae
    cc36:	2029      	movs	r0, #41	; 0x29
    cc38:	f7f6 ffb6 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc3c:	2000      	movs	r0, #0
    cc3e:	e7f6      	b.n	cc2e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000cc40 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    cc40:	b530      	push	{r4, r5, lr}
    cc42:	4613      	mov	r3, r2
    cc44:	e006      	b.n	cc54 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    cc46:	18cc      	adds	r4, r1, r3
    cc48:	1ad5      	subs	r5, r2, r3
    cc4a:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    cc4e:	1e5b      	subs	r3, r3, #1
    cc50:	5544      	strb	r4, [r0, r5]
    cc52:	b2db      	uxtb	r3, r3
    cc54:	2b00      	cmp	r3, #0
    cc56:	d1f6      	bne.n	cc46 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    cc58:	bd30      	pop	{r4, r5, pc}

0000cc5a <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    cc5a:	b538      	push	{r3, r4, r5, lr}
    cc5c:	4605      	mov	r5, r0
    cc5e:	460c      	mov	r4, r1
    cc60:	4668      	mov	r0, sp
    cc62:	f7fe f82b 	bl	acbc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    cc66:	b308      	cbz	r0, ccac <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x52>
    cc68:	f99d 0000 	ldrsb.w	r0, [sp]
    cc6c:	7260      	strb	r0, [r4, #9]
    cc6e:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    cc72:	72a1      	strb	r1, [r4, #10]
    cc74:	f994 100b 	ldrsb.w	r1, [r4, #11]
    cc78:	2200      	movs	r2, #0
    cc7a:	1a41      	subs	r1, r0, r1
    cc7c:	d500      	bpl.n	cc80 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    cc7e:	4249      	negs	r1, r1
    cc80:	7feb      	ldrb	r3, [r5, #31]
    cc82:	428b      	cmp	r3, r1
    cc84:	dc10      	bgt.n	cca8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    cc86:	2bff      	cmp	r3, #255	; 0xff
    cc88:	d00e      	beq.n	cca8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    cc8a:	7b21      	ldrb	r1, [r4, #12]
    cc8c:	1c49      	adds	r1, r1, #1
    cc8e:	b2c9      	uxtb	r1, r1
    cc90:	7321      	strb	r1, [r4, #12]
    cc92:	f895 3020 	ldrb.w	r3, [r5, #32]
    cc96:	4299      	cmp	r1, r3
    cc98:	d802      	bhi.n	cca0 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x46>
    cc9a:	7ae1      	ldrb	r1, [r4, #11]
    cc9c:	297f      	cmp	r1, #127	; 0x7f
    cc9e:	d103      	bne.n	cca8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x4e>
    cca0:	72e0      	strb	r0, [r4, #11]
    cca2:	2000      	movs	r0, #0
    cca4:	7320      	strb	r0, [r4, #12]
    cca6:	2201      	movs	r2, #1
    cca8:	4610      	mov	r0, r2
    ccaa:	bd38      	pop	{r3, r4, r5, pc}
    ccac:	207f      	movs	r0, #127	; 0x7f
    ccae:	7260      	strb	r0, [r4, #9]
    ccb0:	2000      	movs	r0, #0
    ccb2:	bd38      	pop	{r3, r4, r5, pc}

0000ccb4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ccb4:	2300      	movs	r3, #0
    ccb6:	6283      	str	r3, [r0, #40]	; 0x28
    ccb8:	8602      	strh	r2, [r0, #48]	; 0x30
    ccba:	f240 2371 	movw	r3, #625	; 0x271
    ccbe:	435a      	muls	r2, r3
    ccc0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ccc4:	1e52      	subs	r2, r2, #1
    ccc6:	fbb2 f1f1 	udiv	r1, r2, r1
    ccca:	62c1      	str	r1, [r0, #44]	; 0x2c
    cccc:	4770      	bx	lr

0000ccce <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    ccce:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ccd2:	4607      	mov	r7, r0
    ccd4:	4690      	mov	r8, r2
    ccd6:	468b      	mov	fp, r1
    ccd8:	2601      	movs	r6, #1
    ccda:	4608      	mov	r0, r1
    ccdc:	f000 f957 	bl	cf8e <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    cce0:	4682      	mov	sl, r0
    cce2:	4658      	mov	r0, fp
    cce4:	f000 f95f 	bl	cfa6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    cce8:	4681      	mov	r9, r0
    ccea:	f7ff ff66 	bl	cbba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ccee:	4604      	mov	r4, r0
    ccf0:	4650      	mov	r0, sl
    ccf2:	f7ff ff62 	bl	cbba <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ccf6:	4605      	mov	r5, r0
    ccf8:	ea54 0005 	orrs.w	r0, r4, r5
    ccfc:	d100      	bne.n	cd00 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    ccfe:	2600      	movs	r6, #0
    cd00:	f7fd fa7c 	bl	a1fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    cd04:	ea10 0f09 	tst.w	r0, r9
    cd08:	d100      	bne.n	cd0c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    cd0a:	2400      	movs	r4, #0
    cd0c:	f7fd fa76 	bl	a1fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    cd10:	ea10 0f0a 	tst.w	r0, sl
    cd14:	d100      	bne.n	cd18 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    cd16:	2500      	movs	r5, #0
    cd18:	f897 0062 	ldrb.w	r0, [r7, #98]	; 0x62
    cd1c:	42a0      	cmp	r0, r4
    cd1e:	d100      	bne.n	cd22 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    cd20:	2400      	movs	r4, #0
    cd22:	f888 4000 	strb.w	r4, [r8]
    cd26:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
    cd2a:	42a8      	cmp	r0, r5
    cd2c:	d100      	bne.n	cd30 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    cd2e:	2500      	movs	r5, #0
    cd30:	f888 5001 	strb.w	r5, [r8, #1]
    cd34:	b974      	cbnz	r4, cd54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    cd36:	b96d      	cbnz	r5, cd54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    cd38:	4658      	mov	r0, fp
    cd3a:	f000 f932 	bl	cfa2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    cd3e:	f8b7 106c 	ldrh.w	r1, [r7, #108]	; 0x6c
    cd42:	1a40      	subs	r0, r0, r1
    cd44:	b200      	sxth	r0, r0
    cd46:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    cd4a:	4288      	cmp	r0, r1
    cd4c:	dc01      	bgt.n	cd52 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    cd4e:	2800      	cmp	r0, #0
    cd50:	dc00      	bgt.n	cd54 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    cd52:	2600      	movs	r6, #0
    cd54:	4630      	mov	r0, r6
    cd56:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000cd5a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    cd5a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cd5e:	4348      	muls	r0, r1
    cd60:	4770      	bx	lr

0000cd62 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    cd62:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cd66:	fb10 f001 	smulbb	r0, r0, r1
    cd6a:	4770      	bx	lr

0000cd6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    cd6c:	b510      	push	{r4, lr}
    cd6e:	2300      	movs	r3, #0
    cd70:	461a      	mov	r2, r3
    cd72:	e003      	b.n	cd7c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    cd74:	5c84      	ldrb	r4, [r0, r2]
    cd76:	4323      	orrs	r3, r4
    cd78:	1c52      	adds	r2, r2, #1
    cd7a:	b2d2      	uxtb	r2, r2
    cd7c:	428a      	cmp	r2, r1
    cd7e:	d3f9      	bcc.n	cd74 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    cd80:	b10b      	cbz	r3, cd86 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    cd82:	2000      	movs	r0, #0
    cd84:	bd10      	pop	{r4, pc}
    cd86:	2001      	movs	r0, #1
    cd88:	bd10      	pop	{r4, pc}

0000cd8a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    cd8a:	b570      	push	{r4, r5, r6, lr}
    cd8c:	788b      	ldrb	r3, [r1, #2]
    cd8e:	780c      	ldrb	r4, [r1, #0]
    cd90:	7ac5      	ldrb	r5, [r0, #11]
    cd92:	4063      	eors	r3, r4
    cd94:	78cc      	ldrb	r4, [r1, #3]
    cd96:	7849      	ldrb	r1, [r1, #1]
    cd98:	404c      	eors	r4, r1
    cd9a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    cd9e:	ea83 0102 	eor.w	r1, r3, r2
    cda2:	2200      	movs	r2, #0
    cda4:	b2cc      	uxtb	r4, r1
    cda6:	0a09      	lsrs	r1, r1, #8
    cda8:	fa94 f4a4 	rbit	r4, r4
    cdac:	fa91 f1a1 	rbit	r1, r1
    cdb0:	0e24      	lsrs	r4, r4, #24
    cdb2:	0e09      	lsrs	r1, r1, #24
    cdb4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cdb8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    cdbc:	1c52      	adds	r2, r2, #1
    cdbe:	4419      	add	r1, r3
    cdc0:	b2d2      	uxtb	r2, r2
    cdc2:	b289      	uxth	r1, r1
    cdc4:	2a03      	cmp	r2, #3
    cdc6:	d3ed      	bcc.n	cda4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x1a>
    cdc8:	4059      	eors	r1, r3
    cdca:	2225      	movs	r2, #37	; 0x25
    cdcc:	fbb1 f3f2 	udiv	r3, r1, r2
    cdd0:	fb02 1213 	mls	r2, r2, r3, r1
    cdd4:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    cdd8:	f002 0607 	and.w	r6, r2, #7
    cddc:	785b      	ldrb	r3, [r3, #1]
    cdde:	2401      	movs	r4, #1
    cde0:	fa04 f606 	lsl.w	r6, r4, r6
    cde4:	4233      	tst	r3, r6
    cde6:	d001      	beq.n	cdec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    cde8:	4610      	mov	r0, r2
    cdea:	bd70      	pop	{r4, r5, r6, pc}
    cdec:	434d      	muls	r5, r1
    cdee:	0c29      	lsrs	r1, r5, #16
    cdf0:	1c49      	adds	r1, r1, #1
    cdf2:	b2c9      	uxtb	r1, r1
    cdf4:	2300      	movs	r3, #0
    cdf6:	18c5      	adds	r5, r0, r3
    cdf8:	79aa      	ldrb	r2, [r5, #6]
    cdfa:	428a      	cmp	r2, r1
    cdfc:	d311      	bcc.n	ce22 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x98>
    cdfe:	786d      	ldrb	r5, [r5, #1]
    ce00:	2200      	movs	r2, #0
    ce02:	fa04 f602 	lsl.w	r6, r4, r2
    ce06:	4235      	tst	r5, r6
    ce08:	d001      	beq.n	ce0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x84>
    ce0a:	1e49      	subs	r1, r1, #1
    ce0c:	b2c9      	uxtb	r1, r1
    ce0e:	b121      	cbz	r1, ce1a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    ce10:	1c52      	adds	r2, r2, #1
    ce12:	b2d2      	uxtb	r2, r2
    ce14:	2a08      	cmp	r2, #8
    ce16:	d3f4      	bcc.n	ce02 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x78>
    ce18:	e005      	b.n	ce26 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x9c>
    ce1a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    ce1e:	b2c0      	uxtb	r0, r0
    ce20:	bd70      	pop	{r4, r5, r6, pc}
    ce22:	1a89      	subs	r1, r1, r2
    ce24:	b2c9      	uxtb	r1, r1
    ce26:	1c5b      	adds	r3, r3, #1
    ce28:	b2db      	uxtb	r3, r3
    ce2a:	2b05      	cmp	r3, #5
    ce2c:	d3e3      	bcc.n	cdf6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x6c>
    ce2e:	f44f 7187 	mov.w	r1, #270	; 0x10e
    ce32:	2046      	movs	r0, #70	; 0x46
    ce34:	f7f6 feb8 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ce38 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ce38:	b510      	push	{r4, lr}
    ce3a:	4604      	mov	r4, r0
    ce3c:	f890 0020 	ldrb.w	r0, [r0, #32]
    ce40:	b108      	cbz	r0, ce46 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ce42:	2825      	cmp	r0, #37	; 0x25
    ce44:	d901      	bls.n	ce4a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ce46:	2012      	movs	r0, #18
    ce48:	bd10      	pop	{r4, pc}
    ce4a:	b12a      	cbz	r2, ce58 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ce4c:	7d60      	ldrb	r0, [r4, #21]
    ce4e:	b128      	cbz	r0, ce5c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ce50:	2801      	cmp	r0, #1
    ce52:	d009      	beq.n	ce68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ce54:	201f      	movs	r0, #31
    ce56:	bd10      	pop	{r4, pc}
    ce58:	2000      	movs	r0, #0
    ce5a:	bd10      	pop	{r4, pc}
    ce5c:	4620      	mov	r0, r4
    ce5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ce62:	4611      	mov	r1, r2
    ce64:	f7f8 be44 	b.w	5af0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>
    ce68:	88a2      	ldrh	r2, [r4, #4]
    ce6a:	f104 0015 	add.w	r0, r4, #21
    ce6e:	310c      	adds	r1, #12
    ce70:	f7ff ff8b 	bl	cd8a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ce74:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ce78:	e7ee      	b.n	ce58 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ce7a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ce7a:	b530      	push	{r4, r5, lr}
    ce7c:	1c42      	adds	r2, r0, #1
    ce7e:	428a      	cmp	r2, r1
    ce80:	d004      	beq.n	ce8c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ce82:	680a      	ldr	r2, [r1, #0]
    ce84:	f8c0 2001 	str.w	r2, [r0, #1]
    ce88:	7909      	ldrb	r1, [r1, #4]
    ce8a:	7141      	strb	r1, [r0, #5]
    ce8c:	7941      	ldrb	r1, [r0, #5]
    ce8e:	f001 011f 	and.w	r1, r1, #31
    ce92:	7141      	strb	r1, [r0, #5]
    ce94:	2100      	movs	r1, #0
    ce96:	72c1      	strb	r1, [r0, #11]
    ce98:	1843      	adds	r3, r0, r1
    ce9a:	1c49      	adds	r1, r1, #1
    ce9c:	785c      	ldrb	r4, [r3, #1]
    ce9e:	b2c9      	uxtb	r1, r1
    cea0:	f004 0201 	and.w	r2, r4, #1
    cea4:	0864      	lsrs	r4, r4, #1
    cea6:	f004 0501 	and.w	r5, r4, #1
    ceaa:	4415      	add	r5, r2
    ceac:	0862      	lsrs	r2, r4, #1
    ceae:	f002 0401 	and.w	r4, r2, #1
    ceb2:	442c      	add	r4, r5
    ceb4:	0852      	lsrs	r2, r2, #1
    ceb6:	f002 0501 	and.w	r5, r2, #1
    ceba:	442c      	add	r4, r5
    cebc:	0852      	lsrs	r2, r2, #1
    cebe:	f002 0501 	and.w	r5, r2, #1
    cec2:	442c      	add	r4, r5
    cec4:	0852      	lsrs	r2, r2, #1
    cec6:	f002 0501 	and.w	r5, r2, #1
    ceca:	442c      	add	r4, r5
    cecc:	0852      	lsrs	r2, r2, #1
    cece:	f002 0501 	and.w	r5, r2, #1
    ced2:	442c      	add	r4, r5
    ced4:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    ced8:	719a      	strb	r2, [r3, #6]
    ceda:	7ac3      	ldrb	r3, [r0, #11]
    cedc:	2905      	cmp	r1, #5
    cede:	441a      	add	r2, r3
    cee0:	72c2      	strb	r2, [r0, #11]
    cee2:	d3d9      	bcc.n	ce98 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    cee4:	bd30      	pop	{r4, r5, pc}

0000cee6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    cee6:	b570      	push	{r4, r5, r6, lr}
    cee8:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    ceec:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    cef0:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    cef4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    cef8:	88c0      	ldrh	r0, [r0, #6]
    cefa:	b131      	cbz	r1, cf0a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    cefc:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    cf00:	d903      	bls.n	cf0a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    cf02:	f640 5107 	movw	r1, #3335	; 0xd07
    cf06:	428a      	cmp	r2, r1
    cf08:	d90b      	bls.n	cf22 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    cf0a:	1f91      	subs	r1, r2, #6
    cf0c:	f640 467a 	movw	r6, #3194	; 0xc7a
    cf10:	42b1      	cmp	r1, r6
    cf12:	d80e      	bhi.n	cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf14:	b16b      	cbz	r3, cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf16:	2b08      	cmp	r3, #8
    cf18:	d80b      	bhi.n	cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf1a:	4293      	cmp	r3, r2
    cf1c:	d209      	bcs.n	cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf1e:	4294      	cmp	r4, r2
    cf20:	d807      	bhi.n	cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf22:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    cf26:	d204      	bcs.n	cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf28:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    cf2c:	d801      	bhi.n	cf32 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    cf2e:	2001      	movs	r0, #1
    cf30:	bd70      	pop	{r4, r5, r6, pc}
    cf32:	2000      	movs	r0, #0
    cf34:	bd70      	pop	{r4, r5, r6, pc}

0000cf36 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    cf36:	6842      	ldr	r2, [r0, #4]
    cf38:	600a      	str	r2, [r1, #0]
    cf3a:	7a00      	ldrb	r0, [r0, #8]
    cf3c:	7108      	strb	r0, [r1, #4]
    cf3e:	4770      	bx	lr

0000cf40 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    cf40:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    cf44:	4770      	bx	lr

0000cf46 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    cf46:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    cf4a:	4770      	bx	lr

0000cf4c <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    cf4c:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    cf50:	4770      	bx	lr

0000cf52 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    cf52:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    cf56:	4770      	bx	lr

0000cf58 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    cf58:	8980      	ldrh	r0, [r0, #12]
    cf5a:	8008      	strh	r0, [r1, #0]
    cf5c:	4770      	bx	lr

0000cf5e <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    cf5e:	f8d0 0016 	ldr.w	r0, [r0, #22]
    cf62:	6008      	str	r0, [r1, #0]
    cf64:	4770      	bx	lr

0000cf66 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    cf66:	6842      	ldr	r2, [r0, #4]
    cf68:	600a      	str	r2, [r1, #0]
    cf6a:	6880      	ldr	r0, [r0, #8]
    cf6c:	6048      	str	r0, [r1, #4]
    cf6e:	4770      	bx	lr

0000cf70 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    cf70:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    cf74:	600a      	str	r2, [r1, #0]
    cf76:	6840      	ldr	r0, [r0, #4]
    cf78:	6048      	str	r0, [r1, #4]
    cf7a:	4770      	bx	lr

0000cf7c <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    cf7c:	6842      	ldr	r2, [r0, #4]
    cf7e:	600a      	str	r2, [r1, #0]
    cf80:	6880      	ldr	r0, [r0, #8]
    cf82:	6048      	str	r0, [r1, #4]
    cf84:	4770      	bx	lr

0000cf86 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    cf86:	7800      	ldrb	r0, [r0, #0]
    cf88:	f000 0003 	and.w	r0, r0, #3
    cf8c:	4770      	bx	lr

0000cf8e <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    cf8e:	7900      	ldrb	r0, [r0, #4]
    cf90:	4770      	bx	lr

0000cf92 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    cf92:	8880      	ldrh	r0, [r0, #4]
    cf94:	4770      	bx	lr

0000cf96 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    cf96:	88c0      	ldrh	r0, [r0, #6]
    cf98:	4770      	bx	lr

0000cf9a <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    cf9a:	8900      	ldrh	r0, [r0, #8]
    cf9c:	4770      	bx	lr

0000cf9e <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    cf9e:	8940      	ldrh	r0, [r0, #10]
    cfa0:	4770      	bx	lr

0000cfa2 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    cfa2:	88c0      	ldrh	r0, [r0, #6]
    cfa4:	4770      	bx	lr

0000cfa6 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    cfa6:	7940      	ldrb	r0, [r0, #5]
    cfa8:	4770      	bx	lr

0000cfaa <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    cfaa:	7900      	ldrb	r0, [r0, #4]
    cfac:	4770      	bx	lr

0000cfae <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    cfae:	7900      	ldrb	r0, [r0, #4]
    cfb0:	4770      	bx	lr

0000cfb2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    cfb2:	8901      	ldrh	r1, [r0, #8]
    cfb4:	291b      	cmp	r1, #27
    cfb6:	d30c      	bcc.n	cfd2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfb8:	8941      	ldrh	r1, [r0, #10]
    cfba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    cfbe:	4291      	cmp	r1, r2
    cfc0:	d307      	bcc.n	cfd2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfc2:	8881      	ldrh	r1, [r0, #4]
    cfc4:	291b      	cmp	r1, #27
    cfc6:	d304      	bcc.n	cfd2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfc8:	88c0      	ldrh	r0, [r0, #6]
    cfca:	4290      	cmp	r0, r2
    cfcc:	d301      	bcc.n	cfd2 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    cfce:	2001      	movs	r0, #1
    cfd0:	4770      	bx	lr
    cfd2:	2000      	movs	r0, #0
    cfd4:	4770      	bx	lr

0000cfd6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    cfd6:	b510      	push	{r4, lr}
    cfd8:	29fb      	cmp	r1, #251	; 0xfb
    cfda:	d904      	bls.n	cfe6 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    cfdc:	f240 515b 	movw	r1, #1371	; 0x55b
    cfe0:	202a      	movs	r0, #42	; 0x2a
    cfe2:	f7f6 fde1 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfe6:	7041      	strb	r1, [r0, #1]
    cfe8:	bd10      	pop	{r4, pc}

0000cfea <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    cfea:	7901      	ldrb	r1, [r0, #4]
    cfec:	0749      	lsls	r1, r1, #29
    cfee:	d004      	beq.n	cffa <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    cff0:	7940      	ldrb	r0, [r0, #5]
    cff2:	0740      	lsls	r0, r0, #29
    cff4:	d001      	beq.n	cffa <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    cff6:	2001      	movs	r0, #1
    cff8:	4770      	bx	lr
    cffa:	2000      	movs	r0, #0
    cffc:	4770      	bx	lr

0000cffe <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    cffe:	7900      	ldrb	r0, [r0, #4]
    d000:	4770      	bx	lr

0000d002 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d002:	7940      	ldrb	r0, [r0, #5]
    d004:	4770      	bx	lr

0000d006 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d006:	7101      	strb	r1, [r0, #4]
    d008:	4770      	bx	lr

0000d00a <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d00a:	7141      	strb	r1, [r0, #5]
    d00c:	4770      	bx	lr

0000d00e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d00e:	b510      	push	{r4, lr}
    d010:	2a1b      	cmp	r2, #27
    d012:	d904      	bls.n	d01e <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d014:	f240 31c2 	movw	r1, #962	; 0x3c2
    d018:	202a      	movs	r0, #42	; 0x2a
    d01a:	f7f6 fdc5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d01e:	7042      	strb	r2, [r0, #1]
    d020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d024:	1cc0      	adds	r0, r0, #3
    d026:	f7fe bbd4 	b.w	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d02a <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d02a:	6809      	ldr	r1, [r1, #0]
    d02c:	60c1      	str	r1, [r0, #12]
    d02e:	4770      	bx	lr

0000d030 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d030:	680a      	ldr	r2, [r1, #0]
    d032:	6042      	str	r2, [r0, #4]
    d034:	6849      	ldr	r1, [r1, #4]
    d036:	6081      	str	r1, [r0, #8]
    d038:	4770      	bx	lr

0000d03a <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d03a:	680a      	ldr	r2, [r1, #0]
    d03c:	6042      	str	r2, [r0, #4]
    d03e:	6849      	ldr	r1, [r1, #4]
    d040:	6081      	str	r1, [r0, #8]
    d042:	4770      	bx	lr

0000d044 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d044:	680a      	ldr	r2, [r1, #0]
    d046:	6042      	str	r2, [r0, #4]
    d048:	6849      	ldr	r1, [r1, #4]
    d04a:	6081      	str	r1, [r0, #8]
    d04c:	4770      	bx	lr

0000d04e <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d04e:	7802      	ldrb	r2, [r0, #0]
    d050:	f001 0103 	and.w	r1, r1, #3
    d054:	f022 0203 	bic.w	r2, r2, #3
    d058:	430a      	orrs	r2, r1
    d05a:	7002      	strb	r2, [r0, #0]
    d05c:	4770      	bx	lr

0000d05e <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d05e:	7101      	strb	r1, [r0, #4]
    d060:	0a09      	lsrs	r1, r1, #8
    d062:	7141      	strb	r1, [r0, #5]
    d064:	4770      	bx	lr

0000d066 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d066:	7181      	strb	r1, [r0, #6]
    d068:	0a09      	lsrs	r1, r1, #8
    d06a:	71c1      	strb	r1, [r0, #7]
    d06c:	4770      	bx	lr

0000d06e <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d06e:	7201      	strb	r1, [r0, #8]
    d070:	0a09      	lsrs	r1, r1, #8
    d072:	7241      	strb	r1, [r0, #9]
    d074:	4770      	bx	lr

0000d076 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d076:	7281      	strb	r1, [r0, #10]
    d078:	0a09      	lsrs	r1, r1, #8
    d07a:	72c1      	strb	r1, [r0, #11]
    d07c:	4770      	bx	lr

0000d07e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d07e:	b570      	push	{r4, r5, r6, lr}
    d080:	7802      	ldrb	r2, [r0, #0]
    d082:	f002 020f 	and.w	r2, r2, #15
    d086:	2a03      	cmp	r2, #3
    d088:	d02c      	beq.n	d0e4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x66>
    d08a:	2a05      	cmp	r2, #5
    d08c:	d12d      	bne.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d08e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d092:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d096:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d09a:	7d83      	ldrb	r3, [r0, #22]
    d09c:	b141      	cbz	r1, d0b0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d09e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d0a2:	d905      	bls.n	d0b0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d0a4:	f640 5107 	movw	r1, #3335	; 0xd07
    d0a8:	428a      	cmp	r2, r1
    d0aa:	d801      	bhi.n	d0b0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x32>
    d0ac:	2101      	movs	r1, #1
    d0ae:	e000      	b.n	d0b2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x34>
    d0b0:	2100      	movs	r1, #0
    d0b2:	7846      	ldrb	r6, [r0, #1]
    d0b4:	2e22      	cmp	r6, #34	; 0x22
    d0b6:	d118      	bne.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0b8:	b959      	cbnz	r1, d0d2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x54>
    d0ba:	1f91      	subs	r1, r2, #6
    d0bc:	f640 467a 	movw	r6, #3194	; 0xc7a
    d0c0:	42b1      	cmp	r1, r6
    d0c2:	d812      	bhi.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0c4:	b18b      	cbz	r3, d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0c6:	2b08      	cmp	r3, #8
    d0c8:	d80f      	bhi.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0ca:	4293      	cmp	r3, r2
    d0cc:	d20d      	bcs.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0ce:	4294      	cmp	r4, r2
    d0d0:	d80b      	bhi.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0d2:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d0d6:	d208      	bcs.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0d8:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d0dc:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d0e0:	d905      	bls.n	d0ee <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d0e2:	e002      	b.n	d0ea <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x6c>
    d0e4:	7840      	ldrb	r0, [r0, #1]
    d0e6:	280c      	cmp	r0, #12
    d0e8:	d001      	beq.n	d0ee <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x70>
    d0ea:	2000      	movs	r0, #0
    d0ec:	bd70      	pop	{r4, r5, r6, pc}
    d0ee:	2001      	movs	r0, #1
    d0f0:	bd70      	pop	{r4, r5, r6, pc}

0000d0f2 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d0f2:	b570      	push	{r4, r5, r6, lr}
    d0f4:	4614      	mov	r4, r2
    d0f6:	4605      	mov	r5, r0
    d0f8:	2a1f      	cmp	r2, #31
    d0fa:	d903      	bls.n	d104 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d0fc:	21b2      	movs	r1, #178	; 0xb2
    d0fe:	202a      	movs	r0, #42	; 0x2a
    d100:	f7f6 fd52 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d104:	f105 0009 	add.w	r0, r5, #9
    d108:	f7fe fb63 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d10c:	1da4      	adds	r4, r4, #6
    d10e:	706c      	strb	r4, [r5, #1]
    d110:	bd70      	pop	{r4, r5, r6, pc}

0000d112 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d112:	b510      	push	{r4, lr}
    d114:	7802      	ldrb	r2, [r0, #0]
    d116:	f001 030f 	and.w	r3, r1, #15
    d11a:	f022 020f 	bic.w	r2, r2, #15
    d11e:	431a      	orrs	r2, r3
    d120:	7002      	strb	r2, [r0, #0]
    d122:	2907      	cmp	r1, #7
    d124:	d20c      	bcs.n	d140 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d126:	e8df f001 	tbb	[pc, r1]
    d12a:	0604      	.short	0x0604
    d12c:	08040604 	.word	0x08040604
    d130:	0004      	.short	0x0004
    d132:	2106      	movs	r1, #6
    d134:	e002      	b.n	d13c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d136:	210c      	movs	r1, #12
    d138:	e000      	b.n	d13c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d13a:	2122      	movs	r1, #34	; 0x22
    d13c:	7041      	strb	r1, [r0, #1]
    d13e:	bd10      	pop	{r4, pc}
    d140:	216e      	movs	r1, #110	; 0x6e
    d142:	202a      	movs	r0, #42	; 0x2a
    d144:	f7f6 fd30 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d148 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d148:	680a      	ldr	r2, [r1, #0]
    d14a:	f840 2f09 	str.w	r2, [r0, #9]!
    d14e:	8889      	ldrh	r1, [r1, #4]
    d150:	8081      	strh	r1, [r0, #4]
    d152:	4770      	bx	lr

0000d154 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d154:	7802      	ldrb	r2, [r0, #0]
    d156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d15a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d15e:	7002      	strb	r2, [r0, #0]
    d160:	4770      	bx	lr

0000d162 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d162:	680a      	ldr	r2, [r1, #0]
    d164:	f840 2f03 	str.w	r2, [r0, #3]!
    d168:	8889      	ldrh	r1, [r1, #4]
    d16a:	8081      	strh	r1, [r0, #4]
    d16c:	4770      	bx	lr

0000d16e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d16e:	7802      	ldrb	r2, [r0, #0]
    d170:	2340      	movs	r3, #64	; 0x40
    d172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d176:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d17a:	430a      	orrs	r2, r1
    d17c:	7002      	strb	r2, [r0, #0]
    d17e:	4770      	bx	lr

0000d180 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d180:	b570      	push	{r4, r5, r6, lr}
    d182:	4614      	mov	r4, r2
    d184:	4605      	mov	r5, r0
    d186:	2a1f      	cmp	r2, #31
    d188:	d903      	bls.n	d192 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d18a:	21d4      	movs	r1, #212	; 0xd4
    d18c:	202a      	movs	r0, #42	; 0x2a
    d18e:	f7f6 fd0b 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d192:	f105 0009 	add.w	r0, r5, #9
    d196:	f7fe fb1c 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d19a:	1da4      	adds	r4, r4, #6
    d19c:	706c      	strb	r4, [r5, #1]
    d19e:	bd70      	pop	{r4, r5, r6, pc}

0000d1a0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d1a0:	2101      	movs	r1, #1
    d1a2:	f000 b853 	b.w	d24c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000d1a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d1a6:	6841      	ldr	r1, [r0, #4]
    d1a8:	2200      	movs	r2, #0
    d1aa:	f891 30fa 	ldrb.w	r3, [r1, #250]	; 0xfa
    d1ae:	2b00      	cmp	r3, #0
    d1b0:	d004      	beq.n	d1bc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d1b2:	f881 20fa 	strb.w	r2, [r1, #250]	; 0xfa
    d1b6:	6840      	ldr	r0, [r0, #4]
    d1b8:	f000 bc87 	b.w	daca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    d1bc:	4770      	bx	lr
    d1be:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d1c2:	460e      	mov	r6, r1
    d1c4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d1c8:	4617      	mov	r7, r2
    d1ca:	39ff      	subs	r1, #255	; 0xff
    d1cc:	d014      	beq.n	d1f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d1ce:	8030      	strh	r0, [r6, #0]
    d1d0:	2100      	movs	r1, #0
    d1d2:	7171      	strb	r1, [r6, #5]
    d1d4:	f7f7 f91c 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d1d8:	4604      	mov	r4, r0
    d1da:	f7ff f915 	bl	c408 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d1de:	0005      	movs	r5, r0
    d1e0:	d00a      	beq.n	d1f8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d1e2:	4620      	mov	r0, r4
    d1e4:	4629      	mov	r1, r5
    d1e6:	aa01      	add	r2, sp, #4
    d1e8:	f7ff f931 	bl	c44e <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d1ec:	8070      	strh	r0, [r6, #2]
    d1ee:	b130      	cbz	r0, d1fe <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    d1f0:	28fb      	cmp	r0, #251	; 0xfb
    d1f2:	d906      	bls.n	d202 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    d1f4:	21c9      	movs	r1, #201	; 0xc9
    d1f6:	e026      	b.n	d246 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d1f8:	2000      	movs	r0, #0
    d1fa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d1fe:	21c8      	movs	r1, #200	; 0xc8
    d200:	e021      	b.n	d246 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d202:	9801      	ldr	r0, [sp, #4]
    d204:	f7ff febf 	bl	cf86 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d208:	2801      	cmp	r0, #1
    d20a:	d003      	beq.n	d214 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d20c:	2802      	cmp	r0, #2
    d20e:	d001      	beq.n	d214 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d210:	21d8      	movs	r1, #216	; 0xd8
    d212:	e018      	b.n	d246 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d214:	7130      	strb	r0, [r6, #4]
    d216:	4629      	mov	r1, r5
    d218:	8873      	ldrh	r3, [r6, #2]
    d21a:	2503      	movs	r5, #3
    d21c:	4620      	mov	r0, r4
    d21e:	463a      	mov	r2, r7
    d220:	9500      	str	r5, [sp, #0]
    d222:	f7fe ffe6 	bl	c1f2 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d226:	4620      	mov	r0, r4
    d228:	60b7      	str	r7, [r6, #8]
    d22a:	f7ff f89c 	bl	c366 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d22e:	b138      	cbz	r0, d240 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    d230:	2100      	movs	r1, #0
    d232:	4620      	mov	r0, r4
    d234:	460a      	mov	r2, r1
    d236:	f7ff f9e0 	bl	c5fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d23a:	b118      	cbz	r0, d244 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    d23c:	2001      	movs	r0, #1
    d23e:	e7dc      	b.n	d1fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    d240:	21e8      	movs	r1, #232	; 0xe8
    d242:	e000      	b.n	d246 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d244:	21ed      	movs	r1, #237	; 0xed
    d246:	202b      	movs	r0, #43	; 0x2b
    d248:	f7f6 fcae 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d24c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d250:	4604      	mov	r4, r0
    d252:	460e      	mov	r6, r1
    d254:	2000      	movs	r0, #0
    d256:	f7f6 fead 	bl	3fb4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d25a:	4605      	mov	r5, r0
    d25c:	2000      	movs	r0, #0
    d25e:	b916      	cbnz	r6, d266 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    d260:	2001      	movs	r0, #1
    d262:	f7f6 fea7 	bl	3fb4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d266:	2600      	movs	r6, #0
    d268:	46b0      	mov	r8, r6
    d26a:	182f      	adds	r7, r5, r0
    d26c:	e017      	b.n	d29e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    d26e:	8820      	ldrh	r0, [r4, #0]
    d270:	1c40      	adds	r0, r0, #1
    d272:	b280      	uxth	r0, r0
    d274:	8020      	strh	r0, [r4, #0]
    d276:	42b8      	cmp	r0, r7
    d278:	d302      	bcc.n	d280 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    d27a:	4640      	mov	r0, r8
    d27c:	f8a4 8000 	strh.w	r8, [r4]
    d280:	b280      	uxth	r0, r0
    d282:	42a8      	cmp	r0, r5
    d284:	d304      	bcc.n	d290 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d286:	42b8      	cmp	r0, r7
    d288:	d202      	bcs.n	d290 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d28a:	2000      	movs	r0, #0
    d28c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d290:	4669      	mov	r1, sp
    d292:	f7ff fbcf 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d296:	2800      	cmp	r0, #0
    d298:	d0f8      	beq.n	d28c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    d29a:	1c76      	adds	r6, r6, #1
    d29c:	b2f6      	uxtb	r6, r6
    d29e:	42b7      	cmp	r7, r6
    d2a0:	d8e5      	bhi.n	d26e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    d2a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d2a6:	8020      	strh	r0, [r4, #0]
    d2a8:	2012      	movs	r0, #18
    d2aa:	e7ef      	b.n	d28c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000d2ac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d2ac:	b570      	push	{r4, r5, r6, lr}
    d2ae:	8050      	strh	r0, [r2, #2]
    d2b0:	890c      	ldrh	r4, [r1, #8]
    d2b2:	8094      	strh	r4, [r2, #4]
    d2b4:	898b      	ldrh	r3, [r1, #12]
    d2b6:	80d3      	strh	r3, [r2, #6]
    d2b8:	8948      	ldrh	r0, [r1, #10]
    d2ba:	8110      	strh	r0, [r2, #8]
    d2bc:	89cd      	ldrh	r5, [r1, #14]
    d2be:	8155      	strh	r5, [r2, #10]
    d2c0:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d2c2:	42ae      	cmp	r6, r5
    d2c4:	d108      	bne.n	d2d8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d2c6:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d2c8:	4285      	cmp	r5, r0
    d2ca:	d105      	bne.n	d2d8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d2cc:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d2ce:	429d      	cmp	r5, r3
    d2d0:	d102      	bne.n	d2d8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d2d2:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d2d4:	42a3      	cmp	r3, r4
    d2d6:	d001      	beq.n	d2dc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d2d8:	2301      	movs	r3, #1
    d2da:	e000      	b.n	d2de <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d2dc:	2300      	movs	r3, #0
    d2de:	7313      	strb	r3, [r2, #12]
    d2e0:	8548      	strh	r0, [r1, #42]	; 0x2a
    d2e2:	8950      	ldrh	r0, [r2, #10]
    d2e4:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d2e6:	8890      	ldrh	r0, [r2, #4]
    d2e8:	8588      	strh	r0, [r1, #44]	; 0x2c
    d2ea:	88d0      	ldrh	r0, [r2, #6]
    d2ec:	8608      	strh	r0, [r1, #48]	; 0x30
    d2ee:	2001      	movs	r0, #1
    d2f0:	7010      	strb	r0, [r2, #0]
    d2f2:	bd70      	pop	{r4, r5, r6, pc}

0000d2f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d2f4:	b510      	push	{r4, lr}
    d2f6:	888c      	ldrh	r4, [r1, #4]
    d2f8:	890a      	ldrh	r2, [r1, #8]
    d2fa:	884b      	ldrh	r3, [r1, #2]
    d2fc:	88c9      	ldrh	r1, [r1, #6]
    d2fe:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    d302:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    d306:	f8a0 4042 	strh.w	r4, [r0, #66]	; 0x42
    d30a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
    d30e:	bd10      	pop	{r4, pc}

0000d310 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d310:	b570      	push	{r4, r5, r6, lr}
    d312:	4615      	mov	r5, r2
    d314:	460c      	mov	r4, r1
    d316:	f000 f8c1 	bl	d49c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d31a:	3096      	adds	r0, #150	; 0x96
    d31c:	4428      	add	r0, r5
    d31e:	42a0      	cmp	r0, r4
    d320:	d801      	bhi.n	d326 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d322:	1a20      	subs	r0, r4, r0
    d324:	bd70      	pop	{r4, r5, r6, pc}
    d326:	2000      	movs	r0, #0
    d328:	bd70      	pop	{r4, r5, r6, pc}

0000d32a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d32e:	4604      	mov	r4, r0
    d330:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
    d332:	8e46      	ldrh	r6, [r0, #50]	; 0x32
    d334:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
    d338:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    d33a:	4285      	cmp	r5, r0
    d33c:	d300      	bcc.n	d340 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x16>
    d33e:	4605      	mov	r5, r0
    d340:	4620      	mov	r0, r4
    d342:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
    d346:	f000 f89b 	bl	d480 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d34a:	4601      	mov	r1, r0
    d34c:	85e5      	strh	r5, [r4, #46]	; 0x2e
    d34e:	8661      	strh	r1, [r4, #50]	; 0x32
    d350:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    d352:	f104 0024 	add.w	r0, r4, #36	; 0x24
    d356:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    d358:	4680      	mov	r8, r0
    d35a:	42aa      	cmp	r2, r5
    d35c:	d200      	bcs.n	d360 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    d35e:	462a      	mov	r2, r5
    d360:	428b      	cmp	r3, r1
    d362:	d200      	bcs.n	d366 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    d364:	460b      	mov	r3, r1
    d366:	8202      	strh	r2, [r0, #16]
    d368:	f8a8 3012 	strh.w	r3, [r8, #18]
    d36c:	42bd      	cmp	r5, r7
    d36e:	d101      	bne.n	d374 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4a>
    d370:	42b1      	cmp	r1, r6
    d372:	d001      	beq.n	d378 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    d374:	2001      	movs	r0, #1
    d376:	e000      	b.n	d37a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d378:	2000      	movs	r0, #0
    d37a:	4681      	mov	r9, r0
    d37c:	f8b4 5040 	ldrh.w	r5, [r4, #64]	; 0x40
    d380:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    d382:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    d384:	8e26      	ldrh	r6, [r4, #48]	; 0x30
    d386:	4285      	cmp	r5, r0
    d388:	d300      	bcc.n	d38c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x62>
    d38a:	4605      	mov	r5, r0
    d38c:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
    d390:	4620      	mov	r0, r4
    d392:	f000 f87c 	bl	d48e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d396:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    d39a:	2902      	cmp	r1, #2
    d39c:	d108      	bne.n	d3b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x86>
    d39e:	42af      	cmp	r7, r5
    d3a0:	d200      	bcs.n	d3a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7a>
    d3a2:	463d      	mov	r5, r7
    d3a4:	4286      	cmp	r6, r0
    d3a6:	d200      	bcs.n	d3aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x80>
    d3a8:	4630      	mov	r0, r6
    d3aa:	2100      	movs	r1, #0
    d3ac:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    d3b0:	f8a8 5008 	strh.w	r5, [r8, #8]
    d3b4:	f8a8 000c 	strh.w	r0, [r8, #12]
    d3b8:	42bd      	cmp	r5, r7
    d3ba:	d101      	bne.n	d3c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x96>
    d3bc:	42b0      	cmp	r0, r6
    d3be:	d001      	beq.n	d3c4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d3c0:	2001      	movs	r0, #1
    d3c2:	e000      	b.n	d3c6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9c>
    d3c4:	2000      	movs	r0, #0
    d3c6:	ea40 0009 	orr.w	r0, r0, r9
    d3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d3ce <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3d2:	4616      	mov	r6, r2
    d3d4:	460f      	mov	r7, r1
    d3d6:	4604      	mov	r4, r0
    d3d8:	f000 f860 	bl	d49c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x50>
    d3dc:	4605      	mov	r5, r0
    d3de:	463a      	mov	r2, r7
    d3e0:	6861      	ldr	r1, [r4, #4]
    d3e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    d3e4:	f000 f847 	bl	d476 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d3e8:	19a9      	adds	r1, r5, r6
    d3ea:	4281      	cmp	r1, r0
    d3ec:	d300      	bcc.n	d3f0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d3ee:	4608      	mov	r0, r1
    d3f0:	62a0      	str	r0, [r4, #40]	; 0x28
    d3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d3f6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d3f6:	221b      	movs	r2, #27
    d3f8:	8402      	strh	r2, [r0, #32]
    d3fa:	8382      	strh	r2, [r0, #28]
    d3fc:	82c2      	strh	r2, [r0, #22]
    d3fe:	8282      	strh	r2, [r0, #20]
    d400:	8142      	strh	r2, [r0, #10]
    d402:	8202      	strh	r2, [r0, #16]
    d404:	8102      	strh	r2, [r0, #8]
    d406:	8542      	strh	r2, [r0, #42]	; 0x2a
    d408:	8582      	strh	r2, [r0, #44]	; 0x2c
    d40a:	8482      	strh	r2, [r0, #36]	; 0x24
    d40c:	2900      	cmp	r1, #0
    d40e:	d10a      	bne.n	d426 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d410:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d414:	8441      	strh	r1, [r0, #34]	; 0x22
    d416:	83c1      	strh	r1, [r0, #30]
    d418:	8341      	strh	r1, [r0, #26]
    d41a:	8301      	strh	r1, [r0, #24]
    d41c:	81c1      	strh	r1, [r0, #14]
    d41e:	8241      	strh	r1, [r0, #18]
    d420:	8181      	strh	r1, [r0, #12]
    d422:	85c1      	strh	r1, [r0, #46]	; 0x2e
    d424:	8601      	strh	r1, [r0, #48]	; 0x30
    d426:	4770      	bx	lr

0000d428 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    d428:	6800      	ldr	r0, [r0, #0]
    d42a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    d42e:	4290      	cmp	r0, r2
    d430:	d903      	bls.n	d43a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    d432:	1a40      	subs	r0, r0, r1
    d434:	389c      	subs	r0, #156	; 0x9c
    d436:	0840      	lsrs	r0, r0, #1
    d438:	4770      	bx	lr
    d43a:	2000      	movs	r0, #0
    d43c:	4770      	bx	lr

0000d43e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    d43e:	b510      	push	{r4, lr}
    d440:	9c02      	ldr	r4, [sp, #8]
    d442:	8281      	strh	r1, [r0, #20]
    d444:	82c2      	strh	r2, [r0, #22]
    d446:	8303      	strh	r3, [r0, #24]
    d448:	8344      	strh	r4, [r0, #26]
    d44a:	bd10      	pop	{r4, pc}

0000d44c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    d44c:	8050      	strh	r0, [r2, #2]
    d44e:	8a88      	ldrh	r0, [r1, #20]
    d450:	8090      	strh	r0, [r2, #4]
    d452:	8ac8      	ldrh	r0, [r1, #22]
    d454:	80d0      	strh	r0, [r2, #6]
    d456:	8b08      	ldrh	r0, [r1, #24]
    d458:	8110      	strh	r0, [r2, #8]
    d45a:	8b48      	ldrh	r0, [r1, #26]
    d45c:	8150      	strh	r0, [r2, #10]
    d45e:	2001      	movs	r0, #1
    d460:	7010      	strb	r0, [r2, #0]
    d462:	4770      	bx	lr
    d464:	2902      	cmp	r1, #2
    d466:	d003      	beq.n	d470 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    d468:	00c0      	lsls	r0, r0, #3
    d46a:	3070      	adds	r0, #112	; 0x70
    d46c:	b280      	uxth	r0, r0
    d46e:	4770      	bx	lr
    d470:	0080      	lsls	r0, r0, #2
    d472:	303c      	adds	r0, #60	; 0x3c
    d474:	e7fa      	b.n	d46c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    d476:	4288      	cmp	r0, r1
    d478:	d300      	bcc.n	d47c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    d47a:	4608      	mov	r0, r1
    d47c:	1a80      	subs	r0, r0, r2
    d47e:	4770      	bx	lr
    d480:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    d484:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
    d486:	4281      	cmp	r1, r0
    d488:	d200      	bcs.n	d48c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x40>
    d48a:	4608      	mov	r0, r1
    d48c:	4770      	bx	lr
    d48e:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
    d492:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
    d494:	4281      	cmp	r1, r0
    d496:	d200      	bcs.n	d49a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x4e>
    d498:	4608      	mov	r0, r1
    d49a:	4770      	bx	lr
    d49c:	2196      	movs	r1, #150	; 0x96
    d49e:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    d4a2:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    d4a6:	f000 b800 	b.w	d4aa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5e>
    d4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4ae:	460d      	mov	r5, r1
    d4b0:	4606      	mov	r6, r0
    d4b2:	4698      	mov	r8, r3
    d4b4:	4617      	mov	r7, r2
    d4b6:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
    d4b8:	4611      	mov	r1, r2
    d4ba:	f7ff ffd3 	bl	d464 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d4be:	4604      	mov	r4, r0
    d4c0:	4639      	mov	r1, r7
    d4c2:	4630      	mov	r0, r6
    d4c4:	f7ff ffe3 	bl	d48e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d4c8:	42a0      	cmp	r0, r4
    d4ca:	d200      	bcs.n	d4ce <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x82>
    d4cc:	4604      	mov	r4, r0
    d4ce:	8eb0      	ldrh	r0, [r6, #52]	; 0x34
    d4d0:	4641      	mov	r1, r8
    d4d2:	f7ff ffc7 	bl	d464 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d4d6:	4607      	mov	r7, r0
    d4d8:	4641      	mov	r1, r8
    d4da:	4630      	mov	r0, r6
    d4dc:	f7ff ffd0 	bl	d480 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d4e0:	42b8      	cmp	r0, r7
    d4e2:	d300      	bcc.n	d4e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9a>
    d4e4:	4638      	mov	r0, r7
    d4e6:	4420      	add	r0, r4
    d4e8:	4428      	add	r0, r5
    d4ea:	1d80      	adds	r0, r0, #6
    d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4f0:	2801      	cmp	r0, #1
    d4f2:	d102      	bne.n	d4fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xae>
    d4f4:	7948      	ldrb	r0, [r1, #5]
    d4f6:	0980      	lsrs	r0, r0, #6
    d4f8:	d001      	beq.n	d4fe <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    d4fa:	2000      	movs	r0, #0
    d4fc:	4770      	bx	lr
    d4fe:	2001      	movs	r0, #1
    d500:	4770      	bx	lr
    d502:	2801      	cmp	r0, #1
    d504:	d106      	bne.n	d514 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    d506:	7948      	ldrb	r0, [r1, #5]
    d508:	2101      	movs	r1, #1
    d50a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    d50e:	d101      	bne.n	d514 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    d510:	2001      	movs	r0, #1
    d512:	4770      	bx	lr
    d514:	2000      	movs	r0, #0
    d516:	4770      	bx	lr
    d518:	2802      	cmp	r0, #2
    d51a:	d003      	beq.n	d524 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    d51c:	2803      	cmp	r0, #3
    d51e:	d001      	beq.n	d524 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd8>
    d520:	2000      	movs	r0, #0
    d522:	4770      	bx	lr
    d524:	2001      	movs	r0, #1
    d526:	4770      	bx	lr

0000d528 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    d528:	b510      	push	{r4, lr}
    d52a:	4604      	mov	r4, r0
    d52c:	7c00      	ldrb	r0, [r0, #16]
    d52e:	f7ff fff3 	bl	d518 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    d532:	b148      	cbz	r0, d548 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d534:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    d538:	f104 0150 	add.w	r1, r4, #80	; 0x50
    d53c:	f7ff fa37 	bl	c9ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d540:	2808      	cmp	r0, #8
    d542:	d001      	beq.n	d548 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d544:	2001      	movs	r0, #1
    d546:	bd10      	pop	{r4, pc}
    d548:	7c20      	ldrb	r0, [r4, #16]
    d54a:	b118      	cbz	r0, d554 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d54c:	2802      	cmp	r0, #2
    d54e:	d001      	beq.n	d554 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d550:	7de0      	ldrb	r0, [r4, #23]
    d552:	bd10      	pop	{r4, pc}
    d554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d558:	2000      	movs	r0, #0
    d55a:	f7f7 ba13 	b.w	4984 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000d55e <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    d55e:	b508      	push	{r3, lr}
    d560:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
    d564:	f88d 1000 	strb.w	r1, [sp]
    d568:	9900      	ldr	r1, [sp, #0]
    d56a:	9100      	str	r1, [sp, #0]
    d56c:	f89d 1000 	ldrb.w	r1, [sp]
    d570:	b109      	cbz	r1, d576 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    d572:	2001      	movs	r0, #1
    d574:	bd08      	pop	{r3, pc}
    d576:	f890 009a 	ldrb.w	r0, [r0, #154]	; 0x9a
    d57a:	f88d 0000 	strb.w	r0, [sp]
    d57e:	9800      	ldr	r0, [sp, #0]
    d580:	9000      	str	r0, [sp, #0]
    d582:	f89d 0000 	ldrb.w	r0, [sp]
    d586:	2000      	movs	r0, #0
    d588:	bd08      	pop	{r3, pc}

0000d58a <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    d58a:	20ff      	movs	r0, #255	; 0xff
    d58c:	7008      	strb	r0, [r1, #0]
    d58e:	4770      	bx	lr

0000d590 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    d590:	b570      	push	{r4, r5, r6, lr}
    d592:	460d      	mov	r5, r1
    d594:	4604      	mov	r4, r0
    d596:	22e8      	movs	r2, #232	; 0xe8
    d598:	2100      	movs	r1, #0
    d59a:	f7fe f994 	bl	b8c6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d59e:	20ff      	movs	r0, #255	; 0xff
    d5a0:	7020      	strb	r0, [r4, #0]
    d5a2:	207f      	movs	r0, #127	; 0x7f
    d5a4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d5a8:	2013      	movs	r0, #19
    d5aa:	8060      	strh	r0, [r4, #2]
    d5ac:	4628      	mov	r0, r5
    d5ae:	f7f6 ffc5 	bl	453c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    d5b2:	62e0      	str	r0, [r4, #44]	; 0x2c
    d5b4:	2002      	movs	r0, #2
    d5b6:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
    d5ba:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    d5be:	2000      	movs	r0, #0
    d5c0:	73a0      	strb	r0, [r4, #14]
    d5c2:	f104 0020 	add.w	r0, r4, #32
    d5c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d5ca:	f000 b9a0 	b.w	d90e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000d5ce <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    d5ce:	7880      	ldrb	r0, [r0, #2]
    d5d0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d5d4:	b108      	cbz	r0, d5da <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    d5d6:	2000      	movs	r0, #0
    d5d8:	4770      	bx	lr
    d5da:	201f      	movs	r0, #31
    d5dc:	4770      	bx	lr

0000d5de <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    d5de:	f7f9 ba41 	b.w	6a64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>

0000d5e2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    d5e2:	6880      	ldr	r0, [r0, #8]
    d5e4:	4770      	bx	lr

0000d5e6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    d5e6:	2001      	movs	r0, #1
    d5e8:	4770      	bx	lr

0000d5ea <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    d5ea:	b510      	push	{r4, lr}
    d5ec:	4604      	mov	r4, r0
    d5ee:	3020      	adds	r0, #32
    d5f0:	f000 f94d 	bl	d88e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    d5f4:	8861      	ldrh	r1, [r4, #2]
    d5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5fa:	2228      	movs	r2, #40	; 0x28
    d5fc:	f7f9 bbee 	b.w	6ddc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000d600 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    d600:	2200      	movs	r2, #0
    d602:	6282      	str	r2, [r0, #40]	; 0x28
    d604:	8843      	ldrh	r3, [r0, #2]
    d606:	2b1d      	cmp	r3, #29
    d608:	d001      	beq.n	d60e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    d60a:	7341      	strb	r1, [r0, #13]
    d60c:	4770      	bx	lr
    d60e:	7342      	strb	r2, [r0, #13]
    d610:	4770      	bx	lr

0000d612 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    d612:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    d616:	2100      	movs	r1, #0
    d618:	2a02      	cmp	r2, #2
    d61a:	d104      	bne.n	d626 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    d61c:	f8b0 0070 	ldrh.w	r0, [r0, #112]	; 0x70
    d620:	b108      	cbz	r0, d626 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x14>
    d622:	2001      	movs	r0, #1
    d624:	e000      	b.n	d628 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0x16>
    d626:	2000      	movs	r0, #0
    d628:	4381      	bics	r1, r0
    d62a:	f081 0001 	eor.w	r0, r1, #1
    d62e:	4770      	bx	lr

0000d630 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    d630:	2000      	movs	r0, #0
    d632:	4770      	bx	lr

0000d634 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    d634:	7880      	ldrb	r0, [r0, #2]
    d636:	f000 0001 	and.w	r0, r0, #1
    d63a:	4770      	bx	lr

0000d63c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    d63c:	7880      	ldrb	r0, [r0, #2]
    d63e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d642:	4770      	bx	lr

0000d644 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    d644:	2001      	movs	r0, #1
    d646:	4770      	bx	lr

0000d648 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    d648:	7880      	ldrb	r0, [r0, #2]
    d64a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d64e:	4770      	bx	lr

0000d650 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    d650:	f990 000e 	ldrsb.w	r0, [r0, #14]
    d654:	4770      	bx	lr

0000d656 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    d656:	7800      	ldrb	r0, [r0, #0]
    d658:	28ff      	cmp	r0, #255	; 0xff
    d65a:	d001      	beq.n	d660 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    d65c:	2001      	movs	r0, #1
    d65e:	4770      	bx	lr
    d660:	2000      	movs	r0, #0
    d662:	4770      	bx	lr

0000d664 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    d664:	680a      	ldr	r2, [r1, #0]
    d666:	f840 2f11 	str.w	r2, [r0, #17]!
    d66a:	8889      	ldrh	r1, [r1, #4]
    d66c:	8081      	strh	r1, [r0, #4]
    d66e:	2101      	movs	r1, #1
    d670:	7181      	strb	r1, [r0, #6]
    d672:	4770      	bx	lr

0000d674 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    d674:	7b00      	ldrb	r0, [r0, #12]
    d676:	4770      	bx	lr

0000d678 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    d678:	2001      	movs	r0, #1
    d67a:	4770      	bx	lr

0000d67c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    d67c:	61c1      	str	r1, [r0, #28]
    d67e:	4770      	bx	lr

0000d680 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>:
    d680:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
    d684:	b102      	cbz	r2, d688 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x8>
    d686:	2201      	movs	r2, #1
    d688:	2300      	movs	r3, #0
    d68a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    d68e:	b119      	cbz	r1, d698 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI+0x18>
    d690:	e9d0 3019 	ldrd	r3, r0, [r0, #100]	; 0x64
    d694:	e9c1 3000 	strd	r3, r0, [r1]
    d698:	4610      	mov	r0, r2
    d69a:	4770      	bx	lr

0000d69c <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>:
    d69c:	2102      	movs	r1, #2
    d69e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    d6a2:	4770      	bx	lr

0000d6a4 <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>:
    d6a4:	e9d0 2019 	ldrd	r2, r0, [r0, #100]	; 0x64
    d6a8:	e9c1 2000 	strd	r2, r0, [r1]
    d6ac:	4770      	bx	lr

0000d6ae <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>:
    d6ae:	2201      	movs	r2, #1
    d6b0:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    d6b4:	e9d1 2100 	ldrd	r2, r1, [r1]
    d6b8:	e9c0 2119 	strd	r2, r1, [r0, #100]	; 0x64
    d6bc:	4770      	bx	lr

0000d6be <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>:
    d6be:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
    d6c2:	b102      	cbz	r2, d6c6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x8>
    d6c4:	2201      	movs	r2, #1
    d6c6:	2300      	movs	r3, #0
    d6c8:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    d6cc:	b119      	cbz	r1, d6d6 <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA+0x18>
    d6ce:	e9d0 301b 	ldrd	r3, r0, [r0, #108]	; 0x6c
    d6d2:	e9c1 3000 	strd	r3, r0, [r1]
    d6d6:	4610      	mov	r0, r2
    d6d8:	4770      	bx	lr

0000d6da <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>:
    d6da:	2102      	movs	r1, #2
    d6dc:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    d6e0:	4770      	bx	lr

0000d6e2 <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>:
    d6e2:	e9d0 201b 	ldrd	r2, r0, [r0, #108]	; 0x6c
    d6e6:	e9c1 2000 	strd	r2, r0, [r1]
    d6ea:	4770      	bx	lr

0000d6ec <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>:
    d6ec:	2201      	movs	r2, #1
    d6ee:	f880 2075 	strb.w	r2, [r0, #117]	; 0x75
    d6f2:	e9d1 2100 	ldrd	r2, r1, [r1]
    d6f6:	e9c0 211b 	strd	r2, r1, [r0, #108]	; 0x6c
    d6fa:	4770      	bx	lr

0000d6fc <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    d6fc:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    d700:	4770      	bx	lr

0000d702 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    d702:	b570      	push	{r4, r5, r6, lr}
    d704:	4604      	mov	r4, r0
    d706:	7880      	ldrb	r0, [r0, #2]
    d708:	2501      	movs	r5, #1
    d70a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d70e:	b138      	cbz	r0, d720 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    d710:	233c      	movs	r3, #60	; 0x3c
    d712:	22ff      	movs	r2, #255	; 0xff
    d714:	4620      	mov	r0, r4
    d716:	69e1      	ldr	r1, [r4, #28]
    d718:	f7f9 f9ca 	bl	6ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    d71c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    d720:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    d724:	bd70      	pop	{r4, r5, r6, pc}

0000d726 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    d726:	7bc0      	ldrb	r0, [r0, #15]
    d728:	2800      	cmp	r0, #0
    d72a:	d000      	beq.n	d72e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    d72c:	2001      	movs	r0, #1
    d72e:	4770      	bx	lr
    d730:	b510      	push	{r4, lr}
    d732:	f7ff f93c 	bl	c9ae <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d736:	4604      	mov	r4, r0
    d738:	f7f7 ff9e 	bl	5678 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    d73c:	b138      	cbz	r0, d74e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    d73e:	4620      	mov	r0, r4
    d740:	f7f7 fed2 	bl	54e8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    d744:	b118      	cbz	r0, d74e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    d746:	2110      	movs	r1, #16
    d748:	f7ff fb10 	bl	cd6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    d74c:	b108      	cbz	r0, d752 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    d74e:	2000      	movs	r0, #0
    d750:	bd10      	pop	{r4, pc}
    d752:	2001      	movs	r0, #1
    d754:	bd10      	pop	{r4, pc}
    d756:	2101      	movs	r1, #1
    d758:	f7f8 be1a 	b.w	6390 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    d75c:	2101      	movs	r1, #1
    d75e:	f7f8 be17 	b.w	6390 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    d762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d766:	4604      	mov	r4, r0
    d768:	2700      	movs	r7, #0
    d76a:	704f      	strb	r7, [r1, #1]
    d76c:	2011      	movs	r0, #17
    d76e:	460d      	mov	r5, r1
    d770:	7008      	strb	r0, [r1, #0]
    d772:	2220      	movs	r2, #32
    d774:	f104 017a 	add.w	r1, r4, #122	; 0x7a
    d778:	1d28      	adds	r0, r5, #4
    d77a:	f7fe f82a 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d77e:	2601      	movs	r6, #1
    d780:	722e      	strb	r6, [r5, #8]
    d782:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    d786:	7928      	ldrb	r0, [r5, #4]
    d788:	2800      	cmp	r0, #0
    d78a:	d111      	bne.n	d7b0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    d78c:	88e8      	ldrh	r0, [r5, #6]
    d78e:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
    d792:	69e0      	ldr	r0, [r4, #28]
    d794:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    d798:	f884 10a6 	strb.w	r1, [r4, #166]	; 0xa6
    d79c:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
    d7a0:	8800      	ldrh	r0, [r0, #0]
    d7a2:	f7f6 fe35 	bl	4410 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d7a6:	f7fe fedc 	bl	c562 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    d7aa:	69e0      	ldr	r0, [r4, #28]
    d7ac:	f880 6068 	strb.w	r6, [r0, #104]	; 0x68
    d7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7b8:	4604      	mov	r4, r0
    d7ba:	460f      	mov	r7, r1
    d7bc:	7e40      	ldrb	r0, [r0, #25]
    d7be:	f7f7 fe53 	bl	5468 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    d7c2:	4606      	mov	r6, r0
    d7c4:	7e20      	ldrb	r0, [r4, #24]
    d7c6:	f104 0549 	add.w	r5, r4, #73	; 0x49
    d7ca:	b120      	cbz	r0, d7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    d7cc:	b11e      	cbz	r6, d7d6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    d7ce:	7e60      	ldrb	r0, [r4, #25]
    d7d0:	f7f7 fe3e 	bl	5450 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    d7d4:	b1a0      	cbz	r0, d800 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    d7d6:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    d7da:	2800      	cmp	r0, #0
    d7dc:	d024      	beq.n	d828 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    d7de:	7ea0      	ldrb	r0, [r4, #26]
    d7e0:	2800      	cmp	r0, #0
    d7e2:	d021      	beq.n	d828 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    d7e4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    d7e8:	4629      	mov	r1, r5
    d7ea:	f7ff fe8a 	bl	d502 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    d7ee:	b1a8      	cbz	r0, d81c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    d7f0:	f7f7 fe2a 	bl	5448 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    d7f4:	463a      	mov	r2, r7
    d7f6:	4629      	mov	r1, r5
    d7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d7fc:	f7ff b86f 	b.w	c8de <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    d800:	2001      	movs	r0, #1
    d802:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    d806:	463a      	mov	r2, r7
    d808:	4629      	mov	r1, r5
    d80a:	4630      	mov	r0, r6
    d80c:	f7ff f867 	bl	c8de <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    d810:	7e61      	ldrb	r1, [r4, #25]
    d812:	4628      	mov	r0, r5
    d814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d818:	f7f7 be32 	b.w	5480 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    d81c:	4639      	mov	r1, r7
    d81e:	4628      	mov	r0, r5
    d820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d824:	f7ff b84a 	b.w	c8bc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    d828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d82c:	b510      	push	{r4, lr}
    d82e:	4604      	mov	r4, r0
    d830:	4608      	mov	r0, r1
    d832:	f7fd fa91 	bl	ad58 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    d836:	7921      	ldrb	r1, [r4, #4]
    d838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d83c:	2025      	movs	r0, #37	; 0x25
    d83e:	f001 bc5f 	b.w	f100 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    d842:	b510      	push	{r4, lr}
    d844:	4604      	mov	r4, r0
    d846:	3026      	adds	r0, #38	; 0x26
    d848:	f7fd fa38 	bl	acbc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    d84c:	2800      	cmp	r0, #0
    d84e:	d102      	bne.n	d856 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    d850:	207f      	movs	r0, #127	; 0x7f
    d852:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d856:	bd10      	pop	{r4, pc}
    d858:	7802      	ldrb	r2, [r0, #0]
    d85a:	2320      	movs	r3, #32
    d85c:	f022 0220 	bic.w	r2, r2, #32
    d860:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    d864:	430a      	orrs	r2, r1
    d866:	7002      	strb	r2, [r0, #0]
    d868:	4770      	bx	lr

0000d86a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    d86a:	b570      	push	{r4, r5, r6, lr}
    d86c:	7001      	strb	r1, [r0, #0]
    d86e:	7042      	strb	r2, [r0, #1]
    d870:	4614      	mov	r4, r2
    d872:	460d      	mov	r5, r1
    d874:	7880      	ldrb	r0, [r0, #2]
    d876:	f000 f87f 	bl	d978 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d87a:	fb10 f005 	smulbb	r0, r0, r5
    d87e:	4360      	muls	r0, r4
    d880:	28ff      	cmp	r0, #255	; 0xff
    d882:	d303      	bcc.n	d88c <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    d884:	215c      	movs	r1, #92	; 0x5c
    d886:	202e      	movs	r0, #46	; 0x2e
    d888:	f7f6 f98e 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d88c:	bd70      	pop	{r4, r5, r6, pc}

0000d88e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    d88e:	b510      	push	{r4, lr}
    d890:	4604      	mov	r4, r0
    d892:	7880      	ldrb	r0, [r0, #2]
    d894:	f000 f870 	bl	d978 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d898:	7861      	ldrb	r1, [r4, #1]
    d89a:	7822      	ldrb	r2, [r4, #0]
    d89c:	fb11 f102 	smulbb	r1, r1, r2
    d8a0:	4348      	muls	r0, r1
    d8a2:	b2c0      	uxtb	r0, r0
    d8a4:	bd10      	pop	{r4, pc}

0000d8a6 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    d8a6:	b510      	push	{r4, lr}
    d8a8:	4604      	mov	r4, r0
    d8aa:	f000 f84d 	bl	d948 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    d8ae:	7961      	ldrb	r1, [r4, #5]
    d8b0:	1c49      	adds	r1, r1, #1
    d8b2:	b2c9      	uxtb	r1, r1
    d8b4:	7161      	strb	r1, [r4, #5]
    d8b6:	7862      	ldrb	r2, [r4, #1]
    d8b8:	4291      	cmp	r1, r2
    d8ba:	d10b      	bne.n	d8d4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    d8bc:	2200      	movs	r2, #0
    d8be:	7162      	strb	r2, [r4, #5]
    d8c0:	78e1      	ldrb	r1, [r4, #3]
    d8c2:	4301      	orrs	r1, r0
    d8c4:	70e1      	strb	r1, [r4, #3]
    d8c6:	78a3      	ldrb	r3, [r4, #2]
    d8c8:	4299      	cmp	r1, r3
    d8ca:	d103      	bne.n	d8d4 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    d8cc:	70e2      	strb	r2, [r4, #3]
    d8ce:	7921      	ldrb	r1, [r4, #4]
    d8d0:	1c49      	adds	r1, r1, #1
    d8d2:	7121      	strb	r1, [r4, #4]
    d8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8d8:	f000 b825 	b.w	d926 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000d8dc <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    d8dc:	7081      	strb	r1, [r0, #2]
    d8de:	4770      	bx	lr

0000d8e0 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    d8e0:	b570      	push	{r4, r5, r6, lr}
    d8e2:	4604      	mov	r4, r0
    d8e4:	7880      	ldrb	r0, [r0, #2]
    d8e6:	f000 f847 	bl	d978 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d8ea:	7861      	ldrb	r1, [r4, #1]
    d8ec:	fb11 f500 	smulbb	r5, r1, r0
    d8f0:	78e0      	ldrb	r0, [r4, #3]
    d8f2:	f000 f841 	bl	d978 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    d8f6:	7861      	ldrb	r1, [r4, #1]
    d8f8:	7962      	ldrb	r2, [r4, #5]
    d8fa:	fb10 2001 	smlabb	r0, r0, r1, r2
    d8fe:	7821      	ldrb	r1, [r4, #0]
    d900:	7922      	ldrb	r2, [r4, #4]
    d902:	1a89      	subs	r1, r1, r2
    d904:	fb11 f105 	smulbb	r1, r1, r5
    d908:	1a08      	subs	r0, r1, r0
    d90a:	b2c0      	uxtb	r0, r0
    d90c:	bd70      	pop	{r4, r5, r6, pc}

0000d90e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    d90e:	2100      	movs	r1, #0
    d910:	6001      	str	r1, [r0, #0]
    d912:	8081      	strh	r1, [r0, #4]
    d914:	2101      	movs	r1, #1
    d916:	7041      	strb	r1, [r0, #1]
    d918:	7001      	strb	r1, [r0, #0]
    d91a:	4770      	bx	lr

0000d91c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    d91c:	2100      	movs	r1, #0
    d91e:	70c1      	strb	r1, [r0, #3]
    d920:	7141      	strb	r1, [r0, #5]
    d922:	7101      	strb	r1, [r0, #4]
    d924:	4770      	bx	lr
    d926:	b510      	push	{r4, lr}
    d928:	2801      	cmp	r0, #1
    d92a:	d007      	beq.n	d93c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    d92c:	2802      	cmp	r0, #2
    d92e:	d007      	beq.n	d940 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    d930:	2804      	cmp	r0, #4
    d932:	d007      	beq.n	d944 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    d934:	2139      	movs	r1, #57	; 0x39
    d936:	202e      	movs	r0, #46	; 0x2e
    d938:	f7f6 f936 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d93c:	2025      	movs	r0, #37	; 0x25
    d93e:	bd10      	pop	{r4, pc}
    d940:	2026      	movs	r0, #38	; 0x26
    d942:	bd10      	pop	{r4, pc}
    d944:	2027      	movs	r0, #39	; 0x27
    d946:	bd10      	pop	{r4, pc}
    d948:	4601      	mov	r1, r0
    d94a:	2000      	movs	r0, #0
    d94c:	788a      	ldrb	r2, [r1, #2]
    d94e:	07d3      	lsls	r3, r2, #31
    d950:	d002      	beq.n	d958 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    d952:	78cb      	ldrb	r3, [r1, #3]
    d954:	07db      	lsls	r3, r3, #31
    d956:	d006      	beq.n	d966 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    d958:	0793      	lsls	r3, r2, #30
    d95a:	d506      	bpl.n	d96a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    d95c:	78cb      	ldrb	r3, [r1, #3]
    d95e:	079b      	lsls	r3, r3, #30
    d960:	d403      	bmi.n	d96a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    d962:	2002      	movs	r0, #2
    d964:	4770      	bx	lr
    d966:	2001      	movs	r0, #1
    d968:	4770      	bx	lr
    d96a:	0752      	lsls	r2, r2, #29
    d96c:	d5fc      	bpl.n	d968 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    d96e:	78c9      	ldrb	r1, [r1, #3]
    d970:	0749      	lsls	r1, r1, #29
    d972:	d4f9      	bmi.n	d968 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    d974:	2004      	movs	r0, #4
    d976:	4770      	bx	lr
    d978:	f3c0 0180 	ubfx	r1, r0, #2, #1
    d97c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    d980:	4411      	add	r1, r2
    d982:	f000 0001 	and.w	r0, r0, #1
    d986:	4408      	add	r0, r1
    d988:	4770      	bx	lr

0000d98a <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    d98a:	f240 315a 	movw	r1, #858	; 0x35a
    d98e:	4348      	muls	r0, r1
    d990:	4770      	bx	lr

0000d992 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    d992:	f240 20ef 	movw	r0, #751	; 0x2ef
    d996:	4770      	bx	lr
    d998:	041c020e 	.word	0x041c020e
    d99c:	0c600630 	.word	0x0c600630
    d9a0:	06b4035a 	.word	0x06b4035a
    d9a4:	0bf505c5 	.word	0x0bf505c5
    d9a8:	01a31225 	.word	0x01a31225
    d9ac:	05bf03b1 	.word	0x05bf03b1
    d9b0:	064902ef 	.word	0x064902ef
    d9b4:	09a3      	.short	0x09a3

0000d9b6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    d9b6:	b510      	push	{r4, lr}
    d9b8:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    d9bc:	b109      	cbz	r1, d9c2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    d9be:	2000      	movs	r0, #0
    d9c0:	bd10      	pop	{r4, pc}
    d9c2:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    d9c6:	b949      	cbnz	r1, d9dc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    d9c8:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    d9cc:	b131      	cbz	r1, d9dc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    d9ce:	e9d0 1230 	ldrd	r1, r2, [r0, #192]	; 0xc0
    d9d2:	428a      	cmp	r2, r1
    d9d4:	d902      	bls.n	d9dc <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    d9d6:	f7ff fe94 	bl	d702 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    d9da:	e7f0      	b.n	d9be <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    d9dc:	2001      	movs	r0, #1
    d9de:	bd10      	pop	{r4, pc}

0000d9e0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    d9e0:	b510      	push	{r4, lr}
    d9e2:	b131      	cbz	r1, d9f2 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    d9e4:	2901      	cmp	r1, #1
    d9e6:	d008      	beq.n	d9fa <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    d9e8:	f240 71a3 	movw	r1, #1955	; 0x7a3
    d9ec:	2030      	movs	r0, #48	; 0x30
    d9ee:	f7f6 f8db 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9f6:	f000 b999 	b.w	dd2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x262>
    d9fa:	2100      	movs	r1, #0
    d9fc:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    da00:	f000 f95d 	bl	dcbe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    da04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da08:	f7fc b82a 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>

0000da0c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    da0c:	b510      	push	{r4, lr}
    da0e:	4604      	mov	r4, r0
    da10:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    da14:	2800      	cmp	r0, #0
    da16:	d019      	beq.n	da4c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    da18:	2001      	movs	r0, #1
    da1a:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
    da1e:	4601      	mov	r1, r0
    da20:	4620      	mov	r0, r4
    da22:	f7ff fe6b 	bl	d6fc <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    da26:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    da2a:	b170      	cbz	r0, da4a <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    da2c:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    da30:	f7f4 f9ba 	bl	1da8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    da34:	7820      	ldrb	r0, [r4, #0]
    da36:	f7f4 faf5 	bl	2024 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    da3a:	f814 09b4 	ldrb.w	r0, [r4], #-180
    da3e:	f7f4 facf 	bl	1fe0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    da42:	b120      	cbz	r0, da4e <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    da44:	2000      	movs	r0, #0
    da46:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    da4a:	2000      	movs	r0, #0
    da4c:	bd10      	pop	{r4, pc}
    da4e:	f240 2117 	movw	r1, #535	; 0x217
    da52:	2030      	movs	r0, #48	; 0x30
    da54:	f7f6 f8a8 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000da58 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    da58:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    da5c:	4770      	bx	lr

0000da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    da5e:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    da62:	4770      	bx	lr

0000da64 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    da64:	b50e      	push	{r1, r2, r3, lr}
    da66:	4669      	mov	r1, sp
    da68:	2001      	movs	r0, #1
    da6a:	f7fe feb4 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    da6e:	b138      	cbz	r0, da80 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    da70:	f240 1145 	movw	r1, #325	; 0x145
    da74:	2030      	movs	r0, #48	; 0x30
    da76:	f7f6 f897 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da7a:	9802      	ldr	r0, [sp, #8]
    da7c:	f7ff ffc6 	bl	da0c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    da80:	4668      	mov	r0, sp
    da82:	f7f6 fae3 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    da86:	2800      	cmp	r0, #0
    da88:	d0f7      	beq.n	da7a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    da8a:	f7f9 fb2f 	bl	70ec <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    da8e:	2000      	movs	r0, #0
    da90:	bd0e      	pop	{r1, r2, r3, pc}

0000da92 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>:
    da92:	b50e      	push	{r1, r2, r3, lr}
    da94:	4669      	mov	r1, sp
    da96:	2001      	movs	r0, #1
    da98:	f7fe fe9d 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    da9c:	b150      	cbz	r0, dab4 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    da9e:	f240 71ae 	movw	r1, #1966	; 0x7ae
    daa2:	2030      	movs	r0, #48	; 0x30
    daa4:	f7f6 f880 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daa8:	9802      	ldr	r0, [sp, #8]
    daaa:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    daae:	b108      	cbz	r0, dab4 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x22>
    dab0:	2000      	movs	r0, #0
    dab2:	bd0e      	pop	{r1, r2, r3, pc}
    dab4:	4668      	mov	r0, sp
    dab6:	f7f6 fac9 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    daba:	2800      	cmp	r0, #0
    dabc:	d0f4      	beq.n	daa8 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY+0x16>
    dabe:	2000      	movs	r0, #0
    dac0:	f7fe fe6d 	bl	c79e <sym_4F7LPUXSCTOCH5INAFX4H2INQYD4GQNEVBQ7OPY>
    dac4:	f080 0001 	eor.w	r0, r0, #1
    dac8:	bd0e      	pop	{r1, r2, r3, pc}

0000daca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    daca:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    dacc:	4604      	mov	r4, r0
    dace:	f890 00fb 	ldrb.w	r0, [r0, #251]	; 0xfb
    dad2:	2800      	cmp	r0, #0
    dad4:	d153      	bne.n	db7e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dad6:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    dada:	2803      	cmp	r0, #3
    dadc:	d14f      	bne.n	db7e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dade:	f7fd fcf8 	bl	b4d2 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    dae2:	4601      	mov	r1, r0
    dae4:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    dae8:	f7f3 fd1a 	bl	1520 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    daec:	2800      	cmp	r0, #0
    daee:	dd46      	ble.n	db7e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    daf0:	6861      	ldr	r1, [r4, #4]
    daf2:	b111      	cbz	r1, dafa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    daf4:	fbb0 f0f1 	udiv	r0, r0, r1
    daf8:	e000      	b.n	dafc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    dafa:	2000      	movs	r0, #0
    dafc:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    db00:	1c40      	adds	r0, r0, #1
    db02:	4408      	add	r0, r1
    db04:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    db08:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    db0c:	f8b4 10f4 	ldrh.w	r1, [r4, #244]	; 0xf4
    db10:	1a08      	subs	r0, r1, r0
    db12:	b200      	sxth	r0, r0
    db14:	2800      	cmp	r0, #0
    db16:	dd32      	ble.n	db7e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    db18:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    db1c:	f7f4 f944 	bl	1da8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    db20:	2800      	cmp	r0, #0
    db22:	d02c      	beq.n	db7e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    db24:	2001      	movs	r0, #1
    db26:	f884 0141 	strb.w	r0, [r4, #321]	; 0x141
    db2a:	f8b4 009e 	ldrh.w	r0, [r4, #158]	; 0x9e
    db2e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    db32:	ae01      	add	r6, sp, #4
    db34:	1a40      	subs	r0, r0, r1
    db36:	f8b4 106c 	ldrh.w	r1, [r4, #108]	; 0x6c
    db3a:	1e40      	subs	r0, r0, #1
    db3c:	4408      	add	r0, r1
    db3e:	b285      	uxth	r5, r0
    db40:	e017      	b.n	db72 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    db42:	9600      	str	r6, [sp, #0]
    db44:	f8b4 113c 	ldrh.w	r1, [r4, #316]	; 0x13c
    db48:	2300      	movs	r3, #0
    db4a:	2201      	movs	r2, #1
    db4c:	4620      	mov	r0, r4
    db4e:	f7f9 fbff 	bl	7350 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    db52:	2800      	cmp	r0, #0
    db54:	d013      	beq.n	db7e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    db56:	2801      	cmp	r0, #1
    db58:	d004      	beq.n	db64 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    db5a:	f240 6115 	movw	r1, #1557	; 0x615
    db5e:	2030      	movs	r0, #48	; 0x30
    db60:	f7f6 f822 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db64:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    db68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    db6c:	4408      	add	r0, r1
    db6e:	f8a4 013c 	strh.w	r0, [r4, #316]	; 0x13c
    db72:	f8b4 013c 	ldrh.w	r0, [r4, #316]	; 0x13c
    db76:	1a28      	subs	r0, r5, r0
    db78:	b200      	sxth	r0, r0
    db7a:	2800      	cmp	r0, #0
    db7c:	dae1      	bge.n	db42 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    db7e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    db80:	2000      	movs	r0, #0
    db82:	4770      	bx	lr
    db84:	b570      	push	{r4, r5, r6, lr}
    db86:	4604      	mov	r4, r0
    db88:	2601      	movs	r6, #1
    db8a:	f000 f8b3 	bl	dcf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    db8e:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    db92:	2000      	movs	r0, #0
    db94:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc
    db98:	2001      	movs	r0, #1
    db9a:	f884 00d7 	strb.w	r0, [r4, #215]	; 0xd7
    db9e:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    dba2:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
    dba6:	b160      	cbz	r0, dbc2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    dba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dbac:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    dbb0:	f7f3 fc84 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dbb4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    dbb8:	2100      	movs	r1, #0
    dbba:	4628      	mov	r0, r5
    dbbc:	f7ff f81d 	bl	cbfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    dbc0:	e00f      	b.n	dbe2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    dbc2:	4620      	mov	r0, r4
    dbc4:	f7ff fd0d 	bl	d5e2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dbc8:	4606      	mov	r6, r0
    dbca:	4631      	mov	r1, r6
    dbcc:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    dbd0:	f7f3 fc74 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dbd4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    dbd8:	4631      	mov	r1, r6
    dbda:	4628      	mov	r0, r5
    dbdc:	f7ff f80d 	bl	cbfa <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    dbe0:	1c46      	adds	r6, r0, #1
    dbe2:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    dbe6:	1c41      	adds	r1, r0, #1
    dbe8:	290a      	cmp	r1, #10
    dbea:	d202      	bcs.n	dbf2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    dbec:	4430      	add	r0, r6
    dbee:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    dbf2:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
    dbf6:	b130      	cbz	r0, dc06 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    dbf8:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    dbfc:	1c40      	adds	r0, r0, #1
    dbfe:	280a      	cmp	r0, #10
    dc00:	d301      	bcc.n	dc06 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    dc02:	2002      	movs	r0, #2
    dc04:	e000      	b.n	dc08 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    dc06:	2003      	movs	r0, #3
    dc08:	f884 00d6 	strb.w	r0, [r4, #214]	; 0xd6
    dc0c:	2100      	movs	r1, #0
    dc0e:	4620      	mov	r0, r4
    dc10:	f000 f824 	bl	dc5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    dc14:	b130      	cbz	r0, dc24 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x15a>
    dc16:	4620      	mov	r0, r4
    dc18:	f000 f811 	bl	dc3e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x174>
    dc1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc20:	f7fb bf1e 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dc24:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    dc28:	4629      	mov	r1, r5
    dc2a:	f000 f861 	bl	dcf0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    dc2e:	2800      	cmp	r0, #0
    dc30:	d104      	bne.n	dc3c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x172>
    dc32:	f240 61b6 	movw	r1, #1718	; 0x6b6
    dc36:	2030      	movs	r0, #48	; 0x30
    dc38:	f7f5 ffb6 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc3c:	bd70      	pop	{r4, r5, r6, pc}
    dc3e:	b510      	push	{r4, lr}
    dc40:	4604      	mov	r4, r0
    dc42:	f814 0fb4 	ldrb.w	r0, [r4, #180]!
    dc46:	f7f4 f9cb 	bl	1fe0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    dc4a:	2000      	movs	r0, #0
    dc4c:	7520      	strb	r0, [r4, #20]
    dc4e:	bd10      	pop	{r4, pc}
    dc50:	b510      	push	{r4, lr}
    dc52:	f7ff fcca 	bl	d5ea <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    dc56:	f200 1007 	addw	r0, r0, #263	; 0x107
    dc5a:	bd10      	pop	{r4, pc}
    dc5c:	b570      	push	{r4, r5, r6, lr}
    dc5e:	4604      	mov	r4, r0
    dc60:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    dc64:	460d      	mov	r5, r1
    dc66:	b108      	cbz	r0, dc6c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1a2>
    dc68:	2001      	movs	r0, #1
    dc6a:	bd70      	pop	{r4, r5, r6, pc}
    dc6c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    dc70:	b1a8      	cbz	r0, dc9e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    dc72:	4620      	mov	r0, r4
    dc74:	f7ff fcb5 	bl	d5e2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dc78:	4405      	add	r5, r0
    dc7a:	4620      	mov	r0, r4
    dc7c:	f7ff ffe8 	bl	dc50 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x186>
    dc80:	1941      	adds	r1, r0, r5
    dc82:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
    dc86:	4288      	cmp	r0, r1
    dc88:	d206      	bcs.n	dc98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ce>
    dc8a:	2001      	movs	r0, #1
    dc8c:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    dc90:	4620      	mov	r0, r4
    dc92:	f7ff fd36 	bl	d702 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dc96:	e7e7      	b.n	dc68 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    dc98:	1b40      	subs	r0, r0, r5
    dc9a:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    dc9e:	2000      	movs	r0, #0
    dca0:	bd70      	pop	{r4, r5, r6, pc}
    dca2:	b510      	push	{r4, lr}
    dca4:	4604      	mov	r4, r0
    dca6:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    dcaa:	f000 f94b 	bl	df44 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x47a>
    dcae:	4602      	mov	r2, r0
    dcb0:	4620      	mov	r0, r4
    dcb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcb6:	f240 1117 	movw	r1, #279	; 0x117
    dcba:	f7ff bb88 	b.w	d3ce <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    dcbe:	b510      	push	{r4, lr}
    dcc0:	f7fc fe8e 	bl	a9e0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    dcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcc8:	f7f4 badc 	b.w	2284 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    dccc:	b570      	push	{r4, r5, r6, lr}
    dcce:	460c      	mov	r4, r1
    dcd0:	4605      	mov	r5, r0
    dcd2:	f001 fa05 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dcd6:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    dcda:	4408      	add	r0, r1
    dcdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dce0:	fbb0 f6f1 	udiv	r6, r0, r1
    dce4:	4628      	mov	r0, r5
    dce6:	f001 f9ed 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dcea:	4430      	add	r0, r6
    dcec:	4420      	add	r0, r4
    dcee:	bd70      	pop	{r4, r5, r6, pc}
    dcf0:	f7f3 bd44 	b.w	177c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    dcf4:	b510      	push	{r4, lr}
    dcf6:	4604      	mov	r4, r0
    dcf8:	f7ff fca4 	bl	d644 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    dcfc:	b1a0      	cbz	r0, dd28 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25e>
    dcfe:	4620      	mov	r0, r4
    dd00:	f7ff fc98 	bl	d634 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    dd04:	b918      	cbnz	r0, dd0e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x244>
    dd06:	4620      	mov	r0, r4
    dd08:	f7ff fc9e 	bl	d648 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    dd0c:	b120      	cbz	r0, dd18 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x24e>
    dd0e:	2449      	movs	r4, #73	; 0x49
    dd10:	f001 f9a4 	bl	f05c <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    dd14:	b928      	cbnz	r0, dd22 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x258>
    dd16:	e001      	b.n	dd1c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x252>
    dd18:	2442      	movs	r4, #66	; 0x42
    dd1a:	e7f9      	b.n	dd10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x246>
    dd1c:	f001 f994 	bl	f048 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    dd20:	b100      	cbz	r0, dd24 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x25a>
    dd22:	1de4      	adds	r4, r4, #7
    dd24:	4620      	mov	r0, r4
    dd26:	bd10      	pop	{r4, pc}
    dd28:	206b      	movs	r0, #107	; 0x6b
    dd2a:	bd10      	pop	{r4, pc}
    dd2c:	b570      	push	{r4, r5, r6, lr}
    dd2e:	4604      	mov	r4, r0
    dd30:	f890 00b5 	ldrb.w	r0, [r0, #181]	; 0xb5
    dd34:	2500      	movs	r5, #0
    dd36:	b118      	cbz	r0, dd40 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x276>
    dd38:	2001      	movs	r0, #1
    dd3a:	f000 f88a 	bl	de52 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x388>
    dd3e:	4605      	mov	r5, r0
    dd40:	4620      	mov	r0, r4
    dd42:	f7ff fc4e 	bl	d5e2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    dd46:	1941      	adds	r1, r0, r5
    dd48:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
    dd4c:	34cc      	adds	r4, #204	; 0xcc
    dd4e:	f7f3 fbb5 	bl	14bc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dd52:	2600      	movs	r6, #0
    dd54:	60e0      	str	r0, [r4, #12]
    dd56:	f804 6b0b 	strb.w	r6, [r4], #11
    dd5a:	2001      	movs	r0, #1
    dd5c:	f804 0901 	strb.w	r0, [r4], #-1
    dd60:	2003      	movs	r0, #3
    dd62:	f804 09d6 	strb.w	r0, [r4], #-214
    dd66:	4620      	mov	r0, r4
    dd68:	f7ff ffc4 	bl	dcf4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x22a>
    dd6c:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
    dd70:	4629      	mov	r1, r5
    dd72:	4620      	mov	r0, r4
    dd74:	f7ff ff72 	bl	dc5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x192>
    dd78:	b930      	cbnz	r0, dd88 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2be>
    dd7a:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    dd7e:	f104 01cc 	add.w	r1, r4, #204	; 0xcc
    dd82:	f7ff ffb5 	bl	dcf0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x226>
    dd86:	b138      	cbz	r0, dd98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2ce>
    dd88:	f8a4 60dc 	strh.w	r6, [r4, #220]	; 0xdc
    dd8c:	f7ff ff97 	bl	dcbe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    dd90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dd94:	f7fb be64 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dd98:	f240 7104 	movw	r1, #1796	; 0x704
    dd9c:	2030      	movs	r0, #48	; 0x30
    dd9e:	f7f5 ff03 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dda2:	b510      	push	{r4, lr}
    dda4:	4604      	mov	r4, r0
    dda6:	2000      	movs	r0, #0
    dda8:	f884 012c 	strb.w	r0, [r4, #300]	; 0x12c
    ddac:	f894 0160 	ldrb.w	r0, [r4, #352]	; 0x160
    ddb0:	f7f4 f916 	bl	1fe0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ddb4:	2020      	movs	r0, #32
    ddb6:	f884 0160 	strb.w	r0, [r4, #352]	; 0x160
    ddba:	bd10      	pop	{r4, pc}
    ddbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ddc0:	2500      	movs	r5, #0
    ddc2:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    ddc6:	f8d0 60d8 	ldr.w	r6, [r0, #216]	; 0xd8
    ddca:	4688      	mov	r8, r1
    ddcc:	4604      	mov	r4, r0
    ddce:	f880 50c8 	strb.w	r5, [r0, #200]	; 0xc8
    ddd2:	2701      	movs	r7, #1
    ddd4:	f880 70c9 	strb.w	r7, [r0, #201]	; 0xc9
    ddd8:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
    dddc:	4639      	mov	r1, r7
    ddde:	34b4      	adds	r4, #180	; 0xb4
    dde0:	f7f7 fdf4 	bl	59cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    dde4:	6860      	ldr	r0, [r4, #4]
    dde6:	f8c0 6154 	str.w	r6, [r0, #340]	; 0x154
    ddea:	6861      	ldr	r1, [r4, #4]
    ddec:	7820      	ldrb	r0, [r4, #0]
    ddee:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
    ddf2:	6861      	ldr	r1, [r4, #4]
    ddf4:	f8c1 8164 	str.w	r8, [r1, #356]	; 0x164
    ddf8:	6860      	ldr	r0, [r4, #4]
    ddfa:	f8c0 6158 	str.w	r6, [r0, #344]	; 0x158
    ddfe:	6864      	ldr	r4, [r4, #4]
    de00:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
    de04:	2300      	movs	r3, #0
    de06:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
    de0a:	461a      	mov	r2, r3
    de0c:	4619      	mov	r1, r3
    de0e:	4620      	mov	r0, r4
    de10:	9500      	str	r5, [sp, #0]
    de12:	f7f9 fa9d 	bl	7350 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    de16:	b120      	cbz	r0, de22 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x358>
    de18:	f240 212b 	movw	r1, #555	; 0x22b
    de1c:	2030      	movs	r0, #48	; 0x30
    de1e:	f7f5 fec3 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de22:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    de26:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
    de2a:	f884 712c 	strb.w	r7, [r4, #300]	; 0x12c
    de2e:	f8a4 513e 	strh.w	r5, [r4, #318]	; 0x13e
    de32:	f8a4 513c 	strh.w	r5, [r4, #316]	; 0x13c
    de36:	f884 5141 	strb.w	r5, [r4, #321]	; 0x141
    de3a:	f834 0f6c 	ldrh.w	r0, [r4, #108]!
    de3e:	1e40      	subs	r0, r0, #1
    de40:	f824 0bbc 	strh.w	r0, [r4], #188
    de44:	86e5      	strh	r5, [r4, #54]	; 0x36
    de46:	f7ff ff3a 	bl	dcbe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f4>
    de4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de4e:	f7fb be07 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    de52:	b508      	push	{r3, lr}
    de54:	2800      	cmp	r0, #0
    de56:	f04f 0101 	mov.w	r1, #1
    de5a:	4668      	mov	r0, sp
    de5c:	d002      	beq.n	de64 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39a>
    de5e:	f7f5 ff3b 	bl	3cd8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de62:	e001      	b.n	de68 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x39e>
    de64:	f7f5 ff46 	bl	3cf4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    de68:	f89d 0000 	ldrb.w	r0, [sp]
    de6c:	f242 7110 	movw	r1, #10000	; 0x2710
    de70:	0200      	lsls	r0, r0, #8
    de72:	fbb0 f2f1 	udiv	r2, r0, r1
    de76:	fb01 0012 	mls	r0, r1, r2, r0
    de7a:	bd08      	pop	{r3, pc}
    de7c:	b510      	push	{r4, lr}
    de7e:	0004      	movs	r4, r0
    de80:	d008      	beq.n	de94 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3ca>
    de82:	2909      	cmp	r1, #9
    de84:	d25c      	bcs.n	df40 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    de86:	e8df f001 	tbb	[pc, r1]
    de8a:	3607      	.short	0x3607
    de8c:	5b3a3e3e 	.word	0x5b3a3e3e
    de90:	00574a43 	.word	0x00574a43
    de94:	219e      	movs	r1, #158	; 0x9e
    de96:	e050      	b.n	df3a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    de98:	2100      	movs	r1, #0
    de9a:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
    de9e:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
    dea2:	4620      	mov	r0, r4
    dea4:	b189      	cbz	r1, deca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x400>
    dea6:	f8b0 213e 	ldrh.w	r2, [r0, #318]	; 0x13e
    deaa:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
    deae:	428a      	cmp	r2, r1
    deb0:	d106      	bne.n	dec0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3f6>
    deb2:	f8b0 20f4 	ldrh.w	r2, [r0, #244]	; 0xf4
    deb6:	1a51      	subs	r1, r2, r1
    deb8:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    debc:	4611      	mov	r1, r2
    debe:	e00d      	b.n	dedc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    dec0:	1a51      	subs	r1, r2, r1
    dec2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    dec6:	b291      	uxth	r1, r2
    dec8:	e008      	b.n	dedc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x412>
    deca:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    dece:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    ded2:	1a89      	subs	r1, r1, r2
    ded4:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    ded8:	f8b0 113c 	ldrh.w	r1, [r0, #316]	; 0x13c
    dedc:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    dee0:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    dee4:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    dee8:	f7f9 ff38 	bl	7d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    deec:	4620      	mov	r0, r4
    deee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    def2:	f7f9 bc9d 	b.w	7830 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7f4>
    def6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    defa:	f000 b879 	b.w	dff0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    defe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df02:	f7fc bf2f 	b.w	ad64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    df06:	4620      	mov	r0, r4
    df08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df0c:	f7f9 bcc6 	b.w	789c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x860>
    df10:	2001      	movs	r0, #1
    df12:	f7f3 fa01 	bl	1318 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    df16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df1a:	f7fe bd15 	b.w	c948 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    df1e:	f894 012c 	ldrb.w	r0, [r4, #300]	; 0x12c
    df22:	2804      	cmp	r0, #4
    df24:	d001      	beq.n	df2a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x460>
    df26:	21c0      	movs	r1, #192	; 0xc0
    df28:	e007      	b.n	df3a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    df2a:	4620      	mov	r0, r4
    df2c:	f7ff ff39 	bl	dda2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    df30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df34:	f7fb bd94 	b.w	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    df38:	21c9      	movs	r1, #201	; 0xc9
    df3a:	2030      	movs	r0, #48	; 0x30
    df3c:	f7f5 fe34 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df40:	21cd      	movs	r1, #205	; 0xcd
    df42:	e7fa      	b.n	df3a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x470>
    df44:	b510      	push	{r4, lr}
    df46:	f001 f8cb 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    df4a:	f64d 7141 	movw	r1, #57153	; 0xdf41
    df4e:	4408      	add	r0, r1
    df50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    df54:	fbb0 f0f1 	udiv	r0, r0, r1
    df58:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    df5c:	bd10      	pop	{r4, pc}
    df5e:	01f4      	.short	0x01f4
    df60:	009600fa 	.word	0x009600fa
    df64:	004b0064 	.word	0x004b0064
    df68:	001e0032 	.word	0x001e0032
    df6c:	000a0014 	.word	0x000a0014
    df70:	00020005 	.word	0x00020005
    df74:	0001      	.short	0x0001
    df76:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    df7a:	f001 0307 	and.w	r3, r1, #7
    df7e:	7802      	ldrb	r2, [r0, #0]
    df80:	2101      	movs	r1, #1
    df82:	4099      	lsls	r1, r3
    df84:	438a      	bics	r2, r1
    df86:	7002      	strb	r2, [r0, #0]
    df88:	4770      	bx	lr

0000df8a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    df8a:	b510      	push	{r4, lr}
    df8c:	4604      	mov	r4, r0
    df8e:	f8d0 0194 	ldr.w	r0, [r0, #404]	; 0x194
    df92:	6861      	ldr	r1, [r4, #4]
    df94:	4288      	cmp	r0, r1
    df96:	d109      	bne.n	dfac <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    df98:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
    df9c:	8922      	ldrh	r2, [r4, #8]
    df9e:	4291      	cmp	r1, r2
    dfa0:	d104      	bne.n	dfac <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    dfa2:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
    dfa6:	8962      	ldrh	r2, [r4, #10]
    dfa8:	4291      	cmp	r1, r2
    dfaa:	d013      	beq.n	dfd4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    dfac:	8821      	ldrh	r1, [r4, #0]
    dfae:	f8a4 11b4 	strh.w	r1, [r4, #436]	; 0x1b4
    dfb2:	f7fe fd50 	bl	ca56 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    dfb6:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
    dfba:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
    dfbe:	f8a4 01b8 	strh.w	r0, [r4, #440]	; 0x1b8
    dfc2:	f8b4 019a 	ldrh.w	r0, [r4, #410]	; 0x19a
    dfc6:	f8a4 01ba 	strh.w	r0, [r4, #442]	; 0x1ba
    dfca:	2001      	movs	r0, #1
    dfcc:	f884 01b0 	strb.w	r0, [r4, #432]	; 0x1b0
    dfd0:	f7fb fd46 	bl	9a60 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    dfd4:	2102      	movs	r1, #2
    dfd6:	4620      	mov	r0, r4
    dfd8:	f7f7 fcf8 	bl	59cc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    dfdc:	2000      	movs	r0, #0
    dfde:	f804 0f76 	strb.w	r0, [r4, #118]!
    dfe2:	2003      	movs	r0, #3
    dfe4:	70e0      	strb	r0, [r4, #3]
    dfe6:	bd10      	pop	{r4, pc}

0000dfe8 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    dfe8:	f7f6 b99e 	b.w	4328 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000dfec <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    dfec:	2000      	movs	r0, #0
    dfee:	4770      	bx	lr

0000dff0 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    dff0:	f7f6 be6c 	b.w	4ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000dff4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    dff4:	2100      	movs	r1, #0
    dff6:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    dffa:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
    dffe:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    e002:	f890 10fb 	ldrb.w	r1, [r0, #251]	; 0xfb
    e006:	b109      	cbz	r1, e00c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e008:	2102      	movs	r1, #2
    e00a:	e000      	b.n	e00e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e00c:	2103      	movs	r1, #3
    e00e:	f7f9 b815 	b.w	703c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e012:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    e016:	28fe      	cmp	r0, #254	; 0xfe
    e018:	d001      	beq.n	e01e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e01a:	2001      	movs	r0, #1
    e01c:	4770      	bx	lr
    e01e:	2000      	movs	r0, #0
    e020:	4770      	bx	lr
    e022:	b510      	push	{r4, lr}
    e024:	2801      	cmp	r0, #1
    e026:	d006      	beq.n	e036 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e028:	2802      	cmp	r0, #2
    e02a:	d004      	beq.n	e036 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e02c:	f240 2173 	movw	r1, #627	; 0x273
    e030:	2006      	movs	r0, #6
    e032:	f7f5 fdb9 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e036:	bd10      	pop	{r4, pc}
    e038:	2801      	cmp	r0, #1
    e03a:	d002      	beq.n	e042 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e03c:	2802      	cmp	r0, #2
    e03e:	d105      	bne.n	e04c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e040:	e002      	b.n	e048 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e042:	2901      	cmp	r1, #1
    e044:	d004      	beq.n	e050 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e046:	e001      	b.n	e04c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e048:	2902      	cmp	r1, #2
    e04a:	d001      	beq.n	e050 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e04c:	2000      	movs	r0, #0
    e04e:	4770      	bx	lr
    e050:	2001      	movs	r0, #1
    e052:	4770      	bx	lr
    e054:	1a40      	subs	r0, r0, r1
    e056:	b200      	sxth	r0, r0
    e058:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e05c:	4288      	cmp	r0, r1
    e05e:	dc01      	bgt.n	e064 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e060:	2800      	cmp	r0, #0
    e062:	dc01      	bgt.n	e068 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e064:	2001      	movs	r0, #1
    e066:	4770      	bx	lr
    e068:	2000      	movs	r0, #0
    e06a:	4770      	bx	lr
    e06c:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e070:	f001 0107 	and.w	r1, r1, #7
    e074:	7800      	ldrb	r0, [r0, #0]
    e076:	2201      	movs	r2, #1
    e078:	408a      	lsls	r2, r1
    e07a:	4010      	ands	r0, r2
    e07c:	40c8      	lsrs	r0, r1
    e07e:	4770      	bx	lr
    e080:	b118      	cbz	r0, e08a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e082:	2802      	cmp	r0, #2
    e084:	d001      	beq.n	e08a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e086:	2001      	movs	r0, #1
    e088:	4770      	bx	lr
    e08a:	2000      	movs	r0, #0
    e08c:	4770      	bx	lr

0000e08e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e08e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e092:	7881      	ldrb	r1, [r0, #2]
    e094:	4604      	mov	r4, r0
    e096:	291a      	cmp	r1, #26
    e098:	d025      	beq.n	e0e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x58>
    e09a:	dc0e      	bgt.n	e0ba <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    e09c:	2916      	cmp	r1, #22
    e09e:	d22e      	bcs.n	e0fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0a0:	e8df f001 	tbb	[pc, r1]
    e0a4:	2d2d2d2d 	.word	0x2d2d2d2d
    e0a8:	2d2d212d 	.word	0x2d2d212d
    e0ac:	2d2d2d2d 	.word	0x2d2d2d2d
    e0b0:	2d2d2d2d 	.word	0x2d2d2d2d
    e0b4:	212d2d2d 	.word	0x212d2d2d
    e0b8:	2121      	.short	0x2121
    e0ba:	292a      	cmp	r1, #42	; 0x2a
    e0bc:	d01f      	beq.n	e0fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0be:	dc0b      	bgt.n	e0d8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    e0c0:	f1a1 011e 	sub.w	r1, r1, #30
    e0c4:	290c      	cmp	r1, #12
    e0c6:	d21a      	bcs.n	e0fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0c8:	e8df f001 	tbb	[pc, r1]
    e0cc:	19191919 	.word	0x19191919
    e0d0:	19191919 	.word	0x19191919
    e0d4:	0d191919 	.word	0x0d191919
    e0d8:	393a      	subs	r1, #58	; 0x3a
    e0da:	2904      	cmp	r1, #4
    e0dc:	d20f      	bcs.n	e0fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0de:	e8df f001 	tbb	[pc, r1]
    e0e2:	020e      	.short	0x020e
    e0e4:	020e      	.short	0x020e
    e0e6:	8820      	ldrh	r0, [r4, #0]
    e0e8:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e0ec:	d207      	bcs.n	e0fe <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e0ee:	2701      	movs	r7, #1
    e0f0:	4669      	mov	r1, sp
    e0f2:	f7fe fc9f 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e0f6:	b120      	cbz	r0, e102 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x74>
    e0f8:	2002      	movs	r0, #2
    e0fa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e0fe:	2012      	movs	r0, #18
    e100:	e7fb      	b.n	e0fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e102:	9d01      	ldr	r5, [sp, #4]
    e104:	4668      	mov	r0, sp
    e106:	462e      	mov	r6, r5
    e108:	f505 75b8 	add.w	r5, r5, #368	; 0x170
    e10c:	f206 1671 	addw	r6, r6, #369	; 0x171
    e110:	f000 fe66 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    e114:	b108      	cbz	r0, e11a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    e116:	7828      	ldrb	r0, [r5, #0]
    e118:	b108      	cbz	r0, e11e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x90>
    e11a:	200c      	movs	r0, #12
    e11c:	e7ed      	b.n	e0fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e11e:	702f      	strb	r7, [r5, #0]
    e120:	78a0      	ldrb	r0, [r4, #2]
    e122:	7030      	strb	r0, [r6, #0]
    e124:	4668      	mov	r0, sp
    e126:	f7ff f83e 	bl	d1a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e12a:	2000      	movs	r0, #0
    e12c:	e7e5      	b.n	e0fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>

0000e12e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e12e:	b510      	push	{r4, lr}
    e130:	4604      	mov	r4, r0
    e132:	7800      	ldrb	r0, [r0, #0]
    e134:	b118      	cbz	r0, e13e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e136:	2801      	cmp	r0, #1
    e138:	d001      	beq.n	e13e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e13a:	2012      	movs	r0, #18
    e13c:	bd10      	pop	{r4, pc}
    e13e:	f000 fe03 	bl	ed48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e142:	b120      	cbz	r0, e14e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e144:	f7f7 f9fc 	bl	5540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e148:	b108      	cbz	r0, e14e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e14a:	200c      	movs	r0, #12
    e14c:	bd10      	pop	{r4, pc}
    e14e:	7820      	ldrb	r0, [r4, #0]
    e150:	f7ff ff96 	bl	e080 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e154:	1de2      	adds	r2, r4, #7
    e156:	f104 0317 	add.w	r3, r4, #23
    e15a:	1c61      	adds	r1, r4, #1
    e15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e160:	f7f7 ba20 	b.w	55a4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e164 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e164:	b510      	push	{r4, lr}
    e166:	4604      	mov	r4, r0
    e168:	f000 fecb 	bl	ef02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e16c:	b108      	cbz	r0, e172 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e16e:	200c      	movs	r0, #12
    e170:	bd10      	pop	{r4, pc}
    e172:	7820      	ldrb	r0, [r4, #0]
    e174:	b118      	cbz	r0, e17e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e176:	2801      	cmp	r0, #1
    e178:	d001      	beq.n	e17e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e17a:	2012      	movs	r0, #18
    e17c:	bd10      	pop	{r4, pc}
    e17e:	f7ff ff7f 	bl	e080 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e182:	1c61      	adds	r1, r4, #1
    e184:	f7f7 fa86 	bl	5694 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e188:	b108      	cbz	r0, e18e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e18a:	2000      	movs	r0, #0
    e18c:	bd10      	pop	{r4, pc}
    e18e:	2007      	movs	r0, #7
    e190:	bd10      	pop	{r4, pc}

0000e192 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e192:	b510      	push	{r4, lr}
    e194:	f000 fdd8 	bl	ed48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e198:	b120      	cbz	r0, e1a4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e19a:	f7f7 f9d1 	bl	5540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e19e:	b108      	cbz	r0, e1a4 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e1a0:	200c      	movs	r0, #12
    e1a2:	bd10      	pop	{r4, pc}
    e1a4:	f7f7 fa44 	bl	5630 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e1a8:	2000      	movs	r0, #0
    e1aa:	bd10      	pop	{r4, pc}

0000e1ac <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e1ac:	b510      	push	{r4, lr}
    e1ae:	f000 fea8 	bl	ef02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e1b2:	b108      	cbz	r0, e1b8 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e1b4:	200c      	movs	r0, #12
    e1b6:	bd10      	pop	{r4, pc}
    e1b8:	f7f7 fa94 	bl	56e4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e1bc:	2000      	movs	r0, #0
    e1be:	bd10      	pop	{r4, pc}

0000e1c0 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e1c0:	b510      	push	{r4, lr}
    e1c2:	460b      	mov	r3, r1
    e1c4:	2201      	movs	r2, #1
    e1c6:	f100 0110 	add.w	r1, r0, #16
    e1ca:	f7fe fc15 	bl	c9f8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e1ce:	2000      	movs	r0, #0
    e1d0:	bd10      	pop	{r4, pc}

0000e1d2 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e1d2:	b510      	push	{r4, lr}
    e1d4:	8800      	ldrh	r0, [r0, #0]
    e1d6:	2100      	movs	r1, #0
    e1d8:	f7fe faf3 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e1dc:	b118      	cbz	r0, e1e6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e1de:	f890 1173 	ldrb.w	r1, [r0, #371]	; 0x173
    e1e2:	b111      	cbz	r1, e1ea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e1e4:	e007      	b.n	e1f6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e1e6:	2002      	movs	r0, #2
    e1e8:	bd10      	pop	{r4, pc}
    e1ea:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    e1ee:	2914      	cmp	r1, #20
    e1f0:	d003      	beq.n	e1fa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e1f2:	2915      	cmp	r1, #21
    e1f4:	d001      	beq.n	e1fa <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e1f6:	200c      	movs	r0, #12
    e1f8:	bd10      	pop	{r4, pc}
    e1fa:	2102      	movs	r1, #2
    e1fc:	f880 1173 	strb.w	r1, [r0, #371]	; 0x173
    e200:	2000      	movs	r0, #0
    e202:	bd10      	pop	{r4, pc}

0000e204 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e204:	b538      	push	{r3, r4, r5, lr}
    e206:	4605      	mov	r5, r0
    e208:	8800      	ldrh	r0, [r0, #0]
    e20a:	2100      	movs	r1, #0
    e20c:	f7fe fad9 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e210:	0004      	movs	r4, r0
    e212:	d003      	beq.n	e21c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e214:	f894 0173 	ldrb.w	r0, [r4, #371]	; 0x173
    e218:	b110      	cbz	r0, e220 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e21a:	e010      	b.n	e23e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e21c:	2002      	movs	r0, #2
    e21e:	bd38      	pop	{r3, r4, r5, pc}
    e220:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    e224:	2814      	cmp	r0, #20
    e226:	d001      	beq.n	e22c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e228:	2815      	cmp	r0, #21
    e22a:	d108      	bne.n	e23e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e22c:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    e230:	f88d 0000 	strb.w	r0, [sp]
    e234:	9800      	ldr	r0, [sp, #0]
    e236:	9000      	str	r0, [sp, #0]
    e238:	f89d 0000 	ldrb.w	r0, [sp]
    e23c:	b108      	cbz	r0, e242 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e23e:	200c      	movs	r0, #12
    e240:	bd38      	pop	{r3, r4, r5, pc}
    e242:	2210      	movs	r2, #16
    e244:	1ca9      	adds	r1, r5, #2
    e246:	f504 70ba 	add.w	r0, r4, #372	; 0x174
    e24a:	f7fd fac2 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e24e:	2001      	movs	r0, #1
    e250:	f884 0173 	strb.w	r0, [r4, #371]	; 0x173
    e254:	2000      	movs	r0, #0
    e256:	bd38      	pop	{r3, r4, r5, pc}

0000e258 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e258:	b510      	push	{r4, lr}
    e25a:	2108      	movs	r1, #8
    e25c:	f7f5 fd58 	bl	3d10 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e260:	2000      	movs	r0, #0
    e262:	bd10      	pop	{r4, pc}

0000e264 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e264:	b510      	push	{r4, lr}
    e266:	4604      	mov	r4, r0
    e268:	f000 fdd1 	bl	ee0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e26c:	f7ff f9f0 	bl	d650 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e270:	7020      	strb	r0, [r4, #0]
    e272:	2000      	movs	r0, #0
    e274:	bd10      	pop	{r4, pc}

0000e276 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e276:	b510      	push	{r4, lr}
    e278:	4604      	mov	r4, r0
    e27a:	f000 fdab 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e27e:	b140      	cbz	r0, e292 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e280:	20fb      	movs	r0, #251	; 0xfb
    e282:	8020      	strh	r0, [r4, #0]
    e284:	f640 0148 	movw	r1, #2120	; 0x848
    e288:	8061      	strh	r1, [r4, #2]
    e28a:	80a0      	strh	r0, [r4, #4]
    e28c:	80e1      	strh	r1, [r4, #6]
    e28e:	2000      	movs	r0, #0
    e290:	bd10      	pop	{r4, pc}
    e292:	2001      	movs	r0, #1
    e294:	bd10      	pop	{r4, pc}

0000e296 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e296:	2108      	movs	r1, #8
    e298:	7001      	strb	r1, [r0, #0]
    e29a:	2000      	movs	r0, #0
    e29c:	4770      	bx	lr

0000e29e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e29e:	b510      	push	{r4, lr}
    e2a0:	4604      	mov	r4, r0
    e2a2:	20d8      	movs	r0, #216	; 0xd8
    e2a4:	7020      	strb	r0, [r4, #0]
    e2a6:	f000 fd76 	bl	ed96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    e2aa:	7060      	strb	r0, [r4, #1]
    e2ac:	2000      	movs	r0, #0
    e2ae:	bd10      	pop	{r4, pc}

0000e2b0 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e2b0:	2108      	movs	r1, #8
    e2b2:	7001      	strb	r1, [r0, #0]
    e2b4:	2000      	movs	r0, #0
    e2b6:	4770      	bx	lr

0000e2b8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e2b8:	b510      	push	{r4, lr}
    e2ba:	4604      	mov	r4, r0
    e2bc:	7800      	ldrb	r0, [r0, #0]
    e2be:	b108      	cbz	r0, e2c4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e2c0:	2801      	cmp	r0, #1
    e2c2:	d110      	bne.n	e2e6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e2c4:	f000 fd40 	bl	ed48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e2c8:	b120      	cbz	r0, e2d4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e2ca:	f7f7 f939 	bl	5540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e2ce:	b108      	cbz	r0, e2d4 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e2d0:	200c      	movs	r0, #12
    e2d2:	bd10      	pop	{r4, pc}
    e2d4:	7820      	ldrb	r0, [r4, #0]
    e2d6:	f7ff fed3 	bl	e080 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e2da:	1c61      	adds	r1, r4, #1
    e2dc:	f7fe fb72 	bl	c9c4 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e2e0:	b108      	cbz	r0, e2e6 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e2e2:	2000      	movs	r0, #0
    e2e4:	bd10      	pop	{r4, pc}
    e2e6:	2012      	movs	r0, #18
    e2e8:	bd10      	pop	{r4, pc}

0000e2ea <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e2ea:	b510      	push	{r4, lr}
    e2ec:	4604      	mov	r4, r0
    e2ee:	f000 fe08 	bl	ef02 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    e2f2:	b108      	cbz	r0, e2f8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e2f4:	200c      	movs	r0, #12
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	7820      	ldrb	r0, [r4, #0]
    e2fa:	b108      	cbz	r0, e300 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e2fc:	2801      	cmp	r0, #1
    e2fe:	d107      	bne.n	e310 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e300:	f7ff febe 	bl	e080 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e304:	1c61      	adds	r1, r4, #1
    e306:	f7fe fb6c 	bl	c9e2 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e30a:	b108      	cbz	r0, e310 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e30c:	2000      	movs	r0, #0
    e30e:	bd10      	pop	{r4, pc}
    e310:	2012      	movs	r0, #18
    e312:	bd10      	pop	{r4, pc}

0000e314 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e314:	b510      	push	{r4, lr}
    e316:	4604      	mov	r4, r0
    e318:	f000 fd16 	bl	ed48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e31c:	b108      	cbz	r0, e322 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e31e:	200c      	movs	r0, #12
    e320:	bd10      	pop	{r4, pc}
    e322:	7820      	ldrb	r0, [r4, #0]
    e324:	f000 0001 	and.w	r0, r0, #1
    e328:	f7f7 f904 	bl	5534 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e32c:	2000      	movs	r0, #0
    e32e:	bd10      	pop	{r4, pc}

0000e330 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e330:	b570      	push	{r4, r5, r6, lr}
    e332:	b086      	sub	sp, #24
    e334:	4605      	mov	r5, r0
    e336:	f000 fd6a 	bl	ee0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e33a:	4604      	mov	r4, r0
    e33c:	4669      	mov	r1, sp
    e33e:	f7ff f99f 	bl	d680 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    e342:	b118      	cbz	r0, e34c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x1c>
    e344:	4669      	mov	r1, sp
    e346:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e348:	f7fe fa81 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e34c:	2200      	movs	r2, #0
    e34e:	a804      	add	r0, sp, #16
    e350:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e352:	f7f6 f88b 	bl	446c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    e35a:	e9cd 0100 	strd	r0, r1, [sp]
    e35e:	b168      	cbz	r0, e37c <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x4c>
    e360:	7829      	ldrb	r1, [r5, #0]
    e362:	466a      	mov	r2, sp
    e364:	1c68      	adds	r0, r5, #1
    e366:	f000 fbf5 	bl	eb54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    e36a:	0006      	movs	r6, r0
    e36c:	d00c      	beq.n	e388 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x58>
    e36e:	4669      	mov	r1, sp
    e370:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e372:	f7fe fa6c 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e376:	4630      	mov	r0, r6
    e378:	b006      	add	sp, #24
    e37a:	bd70      	pop	{r4, r5, r6, pc}
    e37c:	4669      	mov	r1, sp
    e37e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e380:	f7fe fa65 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e384:	2007      	movs	r0, #7
    e386:	e7f7      	b.n	e378 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>
    e388:	4669      	mov	r1, sp
    e38a:	4620      	mov	r0, r4
    e38c:	f7ff f98f 	bl	d6ae <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e390:	9800      	ldr	r0, [sp, #0]
    e392:	9003      	str	r0, [sp, #12]
    e394:	7828      	ldrb	r0, [r5, #0]
    e396:	f8ad 000a 	strh.w	r0, [sp, #10]
    e39a:	2000      	movs	r0, #0
    e39c:	f88d 0008 	strb.w	r0, [sp, #8]
    e3a0:	a802      	add	r0, sp, #8
    e3a2:	f000 fa35 	bl	e810 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e3a6:	e7e7      	b.n	e378 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I+0x48>

0000e3a8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e3a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e3aa:	4605      	mov	r5, r0
    e3ac:	f000 fd2f 	bl	ee0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e3b0:	4606      	mov	r6, r0
    e3b2:	7828      	ldrb	r0, [r5, #0]
    e3b4:	2400      	movs	r4, #0
    e3b6:	b160      	cbz	r0, e3d2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e3b8:	f88d 4000 	strb.w	r4, [sp]
    e3bc:	2001      	movs	r0, #1
    e3be:	f10d 0101 	add.w	r1, sp, #1
    e3c2:	f7f6 fab3 	bl	492c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e3c6:	b120      	cbz	r0, e3d2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e3c8:	4668      	mov	r0, sp
    e3ca:	f000 f894 	bl	e4f6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e3ce:	2800      	cmp	r0, #0
    e3d0:	d112      	bne.n	e3f8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e3d2:	f88d 400c 	strb.w	r4, [sp, #12]
    e3d6:	4630      	mov	r0, r6
    e3d8:	f7ff f930 	bl	d63c <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e3dc:	b118      	cbz	r0, e3e6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    e3de:	2080      	movs	r0, #128	; 0x80
    e3e0:	f8ad 000d 	strh.w	r0, [sp, #13]
    e3e4:	e001      	b.n	e3ea <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    e3e6:	f8ad 400d 	strh.w	r4, [sp, #13]
    e3ea:	f88d 400f 	strb.w	r4, [sp, #15]
    e3ee:	7828      	ldrb	r0, [r5, #0]
    e3f0:	2801      	cmp	r0, #1
    e3f2:	d003      	beq.n	e3fc <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    e3f4:	b138      	cbz	r0, e406 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    e3f6:	2012      	movs	r0, #18
    e3f8:	b004      	add	sp, #16
    e3fa:	bd70      	pop	{r4, r5, r6, pc}
    e3fc:	a903      	add	r1, sp, #12
    e3fe:	4630      	mov	r0, r6
    e400:	f7fb fcd8 	bl	9db4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e404:	e7f8      	b.n	e3f8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e406:	4630      	mov	r0, r6
    e408:	f000 fd19 	bl	ee3e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38c>
    e40c:	e7f4      	b.n	e3f8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000e40e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e40e:	b530      	push	{r4, r5, lr}
    e410:	b08b      	sub	sp, #44	; 0x2c
    e412:	4604      	mov	r4, r0
    e414:	f000 fcfb 	bl	ee0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e418:	4602      	mov	r2, r0
    e41a:	8860      	ldrh	r0, [r4, #2]
    e41c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    e420:	d902      	bls.n	e428 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    e422:	2012      	movs	r0, #18
    e424:	b00b      	add	sp, #44	; 0x2c
    e426:	bd30      	pop	{r4, r5, pc}
    e428:	2500      	movs	r5, #0
    e42a:	f88d 5004 	strb.w	r5, [sp, #4]
    e42e:	7921      	ldrb	r1, [r4, #4]
    e430:	9500      	str	r5, [sp, #0]
    e432:	f89d 0000 	ldrb.w	r0, [sp]
    e436:	2905      	cmp	r1, #5
    e438:	f040 0010 	orr.w	r0, r0, #16
    e43c:	f88d 0000 	strb.w	r0, [sp]
    e440:	d254      	bcs.n	e4ec <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xde>
    e442:	e8df f001 	tbb	[pc, r1]
    e446:	0803      	.short	0x0803
    e448:	000b1105 	.word	0x000b1105
    e44c:	f040 0001 	orr.w	r0, r0, #1
    e450:	f040 0002 	orr.w	r0, r0, #2
    e454:	e006      	b.n	e464 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x56>
    e456:	f040 0009 	orr.w	r0, r0, #9
    e45a:	e001      	b.n	e460 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x52>
    e45c:	f040 0001 	orr.w	r0, r0, #1
    e460:	f040 0004 	orr.w	r0, r0, #4
    e464:	f88d 0000 	strb.w	r0, [sp]
    e468:	f8bd 0000 	ldrh.w	r0, [sp]
    e46c:	9000      	str	r0, [sp, #0]
    e46e:	f8bd 0000 	ldrh.w	r0, [sp]
    e472:	f8ad 0005 	strh.w	r0, [sp, #5]
    e476:	8821      	ldrh	r1, [r4, #0]
    e478:	f8dd 0006 	ldr.w	r0, [sp, #6]
    e47c:	f361 201f 	bfi	r0, r1, #8, #24
    e480:	f8cd 0006 	str.w	r0, [sp, #6]
    e484:	8861      	ldrh	r1, [r4, #2]
    e486:	f8dd 0009 	ldr.w	r0, [sp, #9]
    e48a:	f361 201f 	bfi	r0, r1, #8, #24
    e48e:	f8cd 0009 	str.w	r0, [sp, #9]
    e492:	7b60      	ldrb	r0, [r4, #13]
    e494:	f88d 000d 	strb.w	r0, [sp, #13]
    e498:	7960      	ldrb	r0, [r4, #5]
    e49a:	f88d 000e 	strb.w	r0, [sp, #14]
    e49e:	79a0      	ldrb	r0, [r4, #6]
    e4a0:	f88d 000f 	strb.w	r0, [sp, #15]
    e4a4:	f8d4 0007 	ldr.w	r0, [r4, #7]
    e4a8:	9004      	str	r0, [sp, #16]
    e4aa:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    e4ae:	f8ad 0014 	strh.w	r0, [sp, #20]
    e4b2:	7ba0      	ldrb	r0, [r4, #14]
    e4b4:	f88d 0016 	strb.w	r0, [sp, #22]
    e4b8:	207f      	movs	r0, #127	; 0x7f
    e4ba:	f88d 0017 	strb.w	r0, [sp, #23]
    e4be:	2001      	movs	r0, #1
    e4c0:	f88d 0018 	strb.w	r0, [sp, #24]
    e4c4:	f88d 5019 	strb.w	r5, [sp, #25]
    e4c8:	f88d 001a 	strb.w	r0, [sp, #26]
    e4cc:	f88d 501b 	strb.w	r5, [sp, #27]
    e4d0:	4610      	mov	r0, r2
    e4d2:	f7ff f8cf 	bl	d674 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    e4d6:	f88d 001c 	strb.w	r0, [sp, #28]
    e4da:	f88d 501d 	strb.w	r5, [sp, #29]
    e4de:	f88d 501e 	strb.w	r5, [sp, #30]
    e4e2:	a909      	add	r1, sp, #36	; 0x24
    e4e4:	a801      	add	r0, sp, #4
    e4e6:	f000 f8ff 	bl	e6e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    e4ea:	e79b      	b.n	e424 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x16>
    e4ec:	f241 01a9 	movw	r1, #4265	; 0x10a9
    e4f0:	2039      	movs	r0, #57	; 0x39
    e4f2:	f7f5 fb59 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e4f6 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    e4f6:	b570      	push	{r4, r5, r6, lr}
    e4f8:	4604      	mov	r4, r0
    e4fa:	7800      	ldrb	r0, [r0, #0]
    e4fc:	2101      	movs	r1, #1
    e4fe:	f7fe f960 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e502:	0005      	movs	r5, r0
    e504:	d007      	beq.n	e516 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    e506:	f7ff faaa 	bl	da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e50a:	b160      	cbz	r0, e526 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e50c:	4628      	mov	r0, r5
    e50e:	f7ff f89b 	bl	d648 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e512:	b110      	cbz	r0, e51a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    e514:	e005      	b.n	e522 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    e516:	2042      	movs	r0, #66	; 0x42
    e518:	bd70      	pop	{r4, r5, r6, pc}
    e51a:	4628      	mov	r0, r5
    e51c:	f7ff f88a 	bl	d634 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e520:	b108      	cbz	r0, e526 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e522:	200c      	movs	r0, #12
    e524:	bd70      	pop	{r4, r5, r6, pc}
    e526:	1c61      	adds	r1, r4, #1
    e528:	4628      	mov	r0, r5
    e52a:	f7ff f89b 	bl	d664 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    e52e:	2000      	movs	r0, #0
    e530:	bd70      	pop	{r4, r5, r6, pc}

0000e532 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    e532:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e534:	460d      	mov	r5, r1
    e536:	4604      	mov	r4, r0
    e538:	f000 fc4c 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e53c:	b130      	cbz	r0, e54c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    e53e:	88a2      	ldrh	r2, [r4, #4]
    e540:	f244 2090 	movw	r0, #17040	; 0x4290
    e544:	4282      	cmp	r2, r0
    e546:	d903      	bls.n	e550 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    e548:	2012      	movs	r0, #18
    e54a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e54c:	2001      	movs	r0, #1
    e54e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e550:	f640 0048 	movw	r0, #2120	; 0x848
    e554:	4282      	cmp	r2, r0
    e556:	d300      	bcc.n	e55a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    e558:	4602      	mov	r2, r0
    e55a:	8820      	ldrh	r0, [r4, #0]
    e55c:	f8ad 0000 	strh.w	r0, [sp]
    e560:	8860      	ldrh	r0, [r4, #2]
    e562:	f8ad 0002 	strh.w	r0, [sp, #2]
    e566:	f8ad 2004 	strh.w	r2, [sp, #4]
    e56a:	8860      	ldrh	r0, [r4, #2]
    e56c:	f8ad 0006 	strh.w	r0, [sp, #6]
    e570:	f8ad 2008 	strh.w	r2, [sp, #8]
    e574:	8820      	ldrh	r0, [r4, #0]
    e576:	8028      	strh	r0, [r5, #0]
    e578:	4668      	mov	r0, sp
    e57a:	f7fb fce9 	bl	9f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e57e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e580 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    e580:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e582:	4604      	mov	r4, r0
    e584:	f7fb fe34 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e588:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e58c:	b1b0      	cbz	r0, e5bc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    e58e:	f10d 0007 	add.w	r0, sp, #7
    e592:	9000      	str	r0, [sp, #0]
    e594:	7922      	ldrb	r2, [r4, #4]
    e596:	78e1      	ldrb	r1, [r4, #3]
    e598:	78a0      	ldrb	r0, [r4, #2]
    e59a:	f10d 0306 	add.w	r3, sp, #6
    e59e:	f000 fc74 	bl	ee8a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d8>
    e5a2:	2800      	cmp	r0, #0
    e5a4:	d109      	bne.n	e5ba <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    e5a6:	8820      	ldrh	r0, [r4, #0]
    e5a8:	f8ad 0004 	strh.w	r0, [sp, #4]
    e5ac:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    e5b0:	f8ad 0008 	strh.w	r0, [sp, #8]
    e5b4:	a801      	add	r0, sp, #4
    e5b6:	f000 f97c 	bl	e8b2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    e5ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e5bc:	2001      	movs	r0, #1
    e5be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e5c0 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    e5c0:	b510      	push	{r4, lr}
    e5c2:	4604      	mov	r4, r0
    e5c4:	f000 fbc0 	bl	ed48 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x296>
    e5c8:	b120      	cbz	r0, e5d4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e5ca:	f7f6 ffb9 	bl	5540 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e5ce:	b108      	cbz	r0, e5d4 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e5d0:	200c      	movs	r0, #12
    e5d2:	bd10      	pop	{r4, pc}
    e5d4:	7820      	ldrb	r0, [r4, #0]
    e5d6:	f7ff fd53 	bl	e080 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e5da:	79e2      	ldrb	r2, [r4, #7]
    e5dc:	1c61      	adds	r1, r4, #1
    e5de:	f7f6 ff5d 	bl	549c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    e5e2:	b108      	cbz	r0, e5e8 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    e5e4:	2000      	movs	r0, #0
    e5e6:	bd10      	pop	{r4, pc}
    e5e8:	2002      	movs	r0, #2
    e5ea:	bd10      	pop	{r4, pc}

0000e5ec <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    e5ec:	b510      	push	{r4, lr}
    e5ee:	4604      	mov	r4, r0
    e5f0:	2001      	movs	r0, #1
    e5f2:	f000 fa9d 	bl	eb30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    e5f6:	b128      	cbz	r0, e604 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    e5f8:	4621      	mov	r1, r4
    e5fa:	2001      	movs	r0, #1
    e5fc:	f7f6 f9ae 	bl	495c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e600:	2000      	movs	r0, #0
    e602:	bd10      	pop	{r4, pc}
    e604:	200c      	movs	r0, #12
    e606:	bd10      	pop	{r4, pc}

0000e608 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    e608:	b510      	push	{r4, lr}
    e60a:	8800      	ldrh	r0, [r0, #0]
    e60c:	f7f7 f826 	bl	565c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    e610:	b108      	cbz	r0, e616 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    e612:	2000      	movs	r0, #0
    e614:	bd10      	pop	{r4, pc}
    e616:	2030      	movs	r0, #48	; 0x30
    e618:	bd10      	pop	{r4, pc}

0000e61a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    e61a:	b530      	push	{r4, r5, lr}
    e61c:	b087      	sub	sp, #28
    e61e:	4605      	mov	r5, r0
    e620:	f000 fbf5 	bl	ee0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    e624:	4604      	mov	r4, r0
    e626:	4669      	mov	r1, sp
    e628:	f7ff f849 	bl	d6be <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    e62c:	b118      	cbz	r0, e636 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x1c>
    e62e:	4669      	mov	r1, sp
    e630:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e632:	f7fe f90c 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e636:	2200      	movs	r2, #0
    e638:	a805      	add	r0, sp, #20
    e63a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e63c:	f7f5 ff16 	bl	446c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e640:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
    e644:	e9cd 0100 	strd	r0, r1, [sp]
    e648:	7829      	ldrb	r1, [r5, #0]
    e64a:	466a      	mov	r2, sp
    e64c:	1c68      	adds	r0, r5, #1
    e64e:	f000 fa81 	bl	eb54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    e652:	0005      	movs	r5, r0
    e654:	d006      	beq.n	e664 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x4a>
    e656:	4669      	mov	r1, sp
    e658:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e65a:	f7fe f8f8 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e65e:	4628      	mov	r0, r5
    e660:	b007      	add	sp, #28
    e662:	bd30      	pop	{r4, r5, pc}
    e664:	4669      	mov	r1, sp
    e666:	4620      	mov	r0, r4
    e668:	f7ff f840 	bl	d6ec <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e66c:	2000      	movs	r0, #0
    e66e:	f88d 000c 	strb.w	r0, [sp, #12]
    e672:	9800      	ldr	r0, [sp, #0]
    e674:	9004      	str	r0, [sp, #16]
    e676:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    e67a:	f8ad 000e 	strh.w	r0, [sp, #14]
    e67e:	a803      	add	r0, sp, #12
    e680:	f000 f8ef 	bl	e862 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    e684:	e7ec      	b.n	e660 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI+0x46>

0000e686 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    e686:	b51c      	push	{r2, r3, r4, lr}
    e688:	4604      	mov	r4, r0
    e68a:	f000 fba3 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e68e:	b178      	cbz	r0, e6b0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    e690:	8820      	ldrh	r0, [r4, #0]
    e692:	f8ad 0000 	strh.w	r0, [sp]
    e696:	8860      	ldrh	r0, [r4, #2]
    e698:	f8ad 0002 	strh.w	r0, [sp, #2]
    e69c:	8820      	ldrh	r0, [r4, #0]
    e69e:	f8ad 0004 	strh.w	r0, [sp, #4]
    e6a2:	8860      	ldrh	r0, [r4, #2]
    e6a4:	f8ad 0006 	strh.w	r0, [sp, #6]
    e6a8:	4668      	mov	r0, sp
    e6aa:	f7fb fcd5 	bl	a058 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    e6ae:	bd1c      	pop	{r2, r3, r4, pc}
    e6b0:	2001      	movs	r0, #1
    e6b2:	bd1c      	pop	{r2, r3, r4, pc}

0000e6b4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    e6b4:	b510      	push	{r4, lr}
    e6b6:	f7f6 f975 	bl	49a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    e6ba:	2000      	movs	r0, #0
    e6bc:	bd10      	pop	{r4, pc}

0000e6be <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    e6be:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e6c0:	460c      	mov	r4, r1
    e6c2:	4605      	mov	r5, r0
    e6c4:	f000 fb86 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e6c8:	b160      	cbz	r0, e6e4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    e6ca:	4669      	mov	r1, sp
    e6cc:	4628      	mov	r0, r5
    e6ce:	f7fe f9b1 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e6d2:	2800      	cmp	r0, #0
    e6d4:	d105      	bne.n	e6e2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    e6d6:	2100      	movs	r1, #0
    e6d8:	4622      	mov	r2, r4
    e6da:	9801      	ldr	r0, [sp, #4]
    e6dc:	f000 fafe 	bl	ecdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22a>
    e6e0:	2000      	movs	r0, #0
    e6e2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e6e4:	2001      	movs	r0, #1
    e6e6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e6e8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    e6e8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e6ec:	460f      	mov	r7, r1
    e6ee:	4605      	mov	r5, r0
    e6f0:	7806      	ldrb	r6, [r0, #0]
    e6f2:	f000 fa7f 	bl	ebf4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x142>
    e6f6:	2800      	cmp	r0, #0
    e6f8:	d10a      	bne.n	e710 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e6fa:	4628      	mov	r0, r5
    e6fc:	f000 fa5e 	bl	ebbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10a>
    e700:	2800      	cmp	r0, #0
    e702:	d105      	bne.n	e710 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e704:	2001      	movs	r0, #1
    e706:	f7f5 fc55 	bl	3fb4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e70a:	4286      	cmp	r6, r0
    e70c:	d302      	bcc.n	e714 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    e70e:	2007      	movs	r0, #7
    e710:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e714:	2101      	movs	r1, #1
    e716:	4630      	mov	r0, r6
    e718:	f7fe f853 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e71c:	0004      	movs	r4, r0
    e71e:	d004      	beq.n	e72a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    e720:	f7ff f99d 	bl	da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e724:	b158      	cbz	r0, e73e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x56>
    e726:	200c      	movs	r0, #12
    e728:	e7f2      	b.n	e710 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    e72a:	2200      	movs	r2, #0
    e72c:	2101      	movs	r1, #1
    e72e:	4630      	mov	r0, r6
    e730:	f7fe f82b 	bl	c78a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    e734:	0004      	movs	r4, r0
    e736:	d010      	beq.n	e75a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    e738:	4631      	mov	r1, r6
    e73a:	f7fe ff29 	bl	d590 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    e73e:	4620      	mov	r0, r4
    e740:	f7fe ff86 	bl	d650 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e744:	7038      	strb	r0, [r7, #0]
    e746:	74e8      	strb	r0, [r5, #19]
    e748:	4629      	mov	r1, r5
    e74a:	4620      	mov	r0, r4
    e74c:	f7f7 fd2a 	bl	61a4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    e750:	4606      	mov	r6, r0
    e752:	7e68      	ldrb	r0, [r5, #25]
    e754:	b360      	cbz	r0, e7b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    e756:	b12e      	cbz	r6, e764 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7c>
    e758:	e02a      	b.n	e7b0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xc8>
    e75a:	f241 212b 	movw	r1, #4651	; 0x122b
    e75e:	2039      	movs	r0, #57	; 0x39
    e760:	f7f5 fa22 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e764:	4669      	mov	r1, sp
    e766:	4620      	mov	r0, r4
    e768:	f7fe ff8a 	bl	d680 <sym_RNI25VYXYFKWFPBZMEWKYU7T2AE36PDSHGXVMJI>
    e76c:	b118      	cbz	r0, e776 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x8e>
    e76e:	4669      	mov	r1, sp
    e770:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e772:	f7fe f86c 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e776:	4669      	mov	r1, sp
    e778:	4620      	mov	r0, r4
    e77a:	f7fe ffa0 	bl	d6be <sym_CDJCVCA2DPO4EZMIO3E74XFHRHPGT76HYWGJOCA>
    e77e:	b118      	cbz	r0, e788 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>
    e780:	4669      	mov	r1, sp
    e782:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e784:	f7fe f863 	bl	c84e <sym_WO2WGTBIRR3OZK3HK3ITRMNZSFY62LJQN7A2XKA>
    e788:	2000      	movs	r0, #0
    e78a:	f8ad 0004 	strh.w	r0, [sp, #4]
    e78e:	9000      	str	r0, [sp, #0]
    e790:	f8ad 0006 	strh.w	r0, [sp, #6]
    e794:	4669      	mov	r1, sp
    e796:	4620      	mov	r0, r4
    e798:	f7fe ff89 	bl	d6ae <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e79c:	4669      	mov	r1, sp
    e79e:	4620      	mov	r0, r4
    e7a0:	f7fe ffa4 	bl	d6ec <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e7a4:	4620      	mov	r0, r4
    e7a6:	f7fe ff79 	bl	d69c <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    e7aa:	4620      	mov	r0, r4
    e7ac:	f7fe ff95 	bl	d6da <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    e7b0:	4630      	mov	r0, r6
    e7b2:	e7ad      	b.n	e710 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000e7b4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    e7b4:	b510      	push	{r4, lr}
    e7b6:	4604      	mov	r4, r0
    e7b8:	2000      	movs	r0, #0
    e7ba:	f000 f9b9 	bl	eb30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    e7be:	b128      	cbz	r0, e7cc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    e7c0:	4621      	mov	r1, r4
    e7c2:	2000      	movs	r0, #0
    e7c4:	f7f6 f8ca 	bl	495c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    e7c8:	2000      	movs	r0, #0
    e7ca:	bd10      	pop	{r4, pc}
    e7cc:	200c      	movs	r0, #12
    e7ce:	bd10      	pop	{r4, pc}

0000e7d0 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY>:
    e7d0:	b510      	push	{r4, lr}
    e7d2:	4604      	mov	r4, r0
    e7d4:	f7ff f95d 	bl	da92 <sym_6LWBEVS5N6UBFJ6K5O4DUS3F7KTJBABC35DWXIY>
    e7d8:	b120      	cbz	r0, e7e4 <sym_PYH4UVSHNWZESRWJUJ3ZT676FMQZCLVGBPGE4SY+0x14>
    e7da:	7820      	ldrb	r0, [r4, #0]
    e7dc:	f7f8 fbee 	bl	6fbc <sym_24SKLESBEZEAQ7XSDAQVJQD35IVFROKORCGBXPI>
    e7e0:	2000      	movs	r0, #0
    e7e2:	bd10      	pop	{r4, pc}
    e7e4:	200c      	movs	r0, #12
    e7e6:	bd10      	pop	{r4, pc}

0000e7e8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    e7e8:	b510      	push	{r4, lr}
    e7ea:	7800      	ldrb	r0, [r0, #0]
    e7ec:	f000 0001 	and.w	r0, r0, #1
    e7f0:	f7f8 fbea 	bl	6fc8 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    e7f4:	2000      	movs	r0, #0
    e7f6:	bd10      	pop	{r4, pc}

0000e7f8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    e7f8:	b510      	push	{r4, lr}
    e7fa:	4604      	mov	r4, r0
    e7fc:	f000 faea 	bl	edd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x322>
    e800:	b120      	cbz	r0, e80c <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    e802:	4620      	mov	r0, r4
    e804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e808:	f7fb bba2 	b.w	9f50 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e80c:	2001      	movs	r0, #1
    e80e:	bd10      	pop	{r4, pc}

0000e810 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    e810:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e812:	4605      	mov	r5, r0
    e814:	7800      	ldrb	r0, [r0, #0]
    e816:	2101      	movs	r1, #1
    e818:	f7fd ffd3 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e81c:	0006      	movs	r6, r0
    e81e:	d01e      	beq.n	e85e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4e>
    e820:	2201      	movs	r2, #1
    e822:	8869      	ldrh	r1, [r5, #2]
    e824:	f000 f9ab 	bl	eb7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    e828:	2800      	cmp	r0, #0
    e82a:	d117      	bne.n	e85c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x4c>
    e82c:	4630      	mov	r0, r6
    e82e:	f7fe fece 	bl	d5ce <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    e832:	4604      	mov	r4, r0
    e834:	8868      	ldrh	r0, [r5, #2]
    e836:	42a0      	cmp	r0, r4
    e838:	d800      	bhi.n	e83c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x2c>
    e83a:	4604      	mov	r4, r0
    e83c:	4669      	mov	r1, sp
    e83e:	4630      	mov	r0, r6
    e840:	f7fe ff30 	bl	d6a4 <sym_UVJC3XBQQLDGXNDNKXZFSW7F5OWZWJU7FTAZXEI>
    e844:	6868      	ldr	r0, [r5, #4]
    e846:	9000      	str	r0, [sp, #0]
    e848:	f8ad 4004 	strh.w	r4, [sp, #4]
    e84c:	4669      	mov	r1, sp
    e84e:	4630      	mov	r0, r6
    e850:	f7fe ff2d 	bl	d6ae <sym_DZ4VHVOVANVDVX7ECCNFNRACUFPY2WIUPGGZ27Y>
    e854:	4630      	mov	r0, r6
    e856:	f7fe ff21 	bl	d69c <sym_6SMKGRHQAIZHR6JTRBTFU3LNEOI457UCNN7L2SY>
    e85a:	2000      	movs	r0, #0
    e85c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e85e:	2042      	movs	r0, #66	; 0x42
    e860:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e862 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    e862:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e864:	4604      	mov	r4, r0
    e866:	7800      	ldrb	r0, [r0, #0]
    e868:	2101      	movs	r1, #1
    e86a:	f7fd ffaa 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e86e:	0005      	movs	r5, r0
    e870:	d00b      	beq.n	e88a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x28>
    e872:	2201      	movs	r2, #1
    e874:	8861      	ldrh	r1, [r4, #2]
    e876:	f000 f982 	bl	eb7e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    e87a:	2800      	cmp	r0, #0
    e87c:	d106      	bne.n	e88c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2a>
    e87e:	8866      	ldrh	r6, [r4, #2]
    e880:	4628      	mov	r0, r5
    e882:	f7fe fee1 	bl	d648 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e886:	b110      	cbz	r0, e88e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2c>
    e888:	e002      	b.n	e890 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x2e>
    e88a:	2042      	movs	r0, #66	; 0x42
    e88c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e88e:	2600      	movs	r6, #0
    e890:	4669      	mov	r1, sp
    e892:	4628      	mov	r0, r5
    e894:	f7fe ff25 	bl	d6e2 <sym_ECJZL6MVN4B4UZUQDXL2OTZMAL25BOLWE4F7TMI>
    e898:	6860      	ldr	r0, [r4, #4]
    e89a:	9000      	str	r0, [sp, #0]
    e89c:	f8ad 6004 	strh.w	r6, [sp, #4]
    e8a0:	4669      	mov	r1, sp
    e8a2:	4628      	mov	r0, r5
    e8a4:	f7fe ff22 	bl	d6ec <sym_VD45NAZNLOGGVVD5JTOGXKZNINHWZNPETQGEFXA>
    e8a8:	4628      	mov	r0, r5
    e8aa:	f7fe ff16 	bl	d6da <sym_57N4MHGOTN6SE7ESLAUPVT5Z7CNKRRVGNPONZCI>
    e8ae:	2000      	movs	r0, #0
    e8b0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e8b2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    e8b2:	b510      	push	{r4, lr}
    e8b4:	4604      	mov	r4, r0
    e8b6:	8880      	ldrh	r0, [r0, #4]
    e8b8:	b128      	cbz	r0, e8c6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e8ba:	2801      	cmp	r0, #1
    e8bc:	d003      	beq.n	e8c6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e8be:	2802      	cmp	r0, #2
    e8c0:	d001      	beq.n	e8c6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    e8c2:	2012      	movs	r0, #18
    e8c4:	bd10      	pop	{r4, pc}
    e8c6:	78e0      	ldrb	r0, [r4, #3]
    e8c8:	f000 f9e5 	bl	ec96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    e8cc:	b148      	cbz	r0, e8e2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e8ce:	78a0      	ldrb	r0, [r4, #2]
    e8d0:	f000 f9e1 	bl	ec96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e4>
    e8d4:	b128      	cbz	r0, e8e2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    e8d6:	4620      	mov	r0, r4
    e8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8dc:	2101      	movs	r1, #1
    e8de:	f000 b883 	b.w	e9e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    e8e2:	2011      	movs	r0, #17
    e8e4:	bd10      	pop	{r4, pc}

0000e8e6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    e8e6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e8e8:	460c      	mov	r4, r1
    e8ea:	4605      	mov	r5, r0
    e8ec:	8800      	ldrh	r0, [r0, #0]
    e8ee:	4669      	mov	r1, sp
    e8f0:	f7fe f8a0 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e8f4:	2800      	cmp	r0, #0
    e8f6:	d106      	bne.n	e906 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    e8f8:	9801      	ldr	r0, [sp, #4]
    e8fa:	8829      	ldrh	r1, [r5, #0]
    e8fc:	8021      	strh	r1, [r4, #0]
    e8fe:	f8b0 0098 	ldrh.w	r0, [r0, #152]	; 0x98
    e902:	8060      	strh	r0, [r4, #2]
    e904:	2000      	movs	r0, #0
    e906:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e908 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    e908:	b510      	push	{r4, lr}
    e90a:	4604      	mov	r4, r0
    e90c:	4601      	mov	r1, r0
    e90e:	2000      	movs	r0, #0
    e910:	f7f6 f80c 	bl	492c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e914:	b910      	cbnz	r0, e91c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    e916:	2000      	movs	r0, #0
    e918:	6020      	str	r0, [r4, #0]
    e91a:	80a0      	strh	r0, [r4, #4]
    e91c:	2000      	movs	r0, #0
    e91e:	bd10      	pop	{r4, pc}

0000e920 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    e920:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e922:	8800      	ldrh	r0, [r0, #0]
    e924:	4669      	mov	r1, sp
    e926:	f7fe f885 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e92a:	b958      	cbnz	r0, e944 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e92c:	4668      	mov	r0, sp
    e92e:	f000 fa57 	bl	ede0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x32e>
    e932:	b138      	cbz	r0, e944 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    e934:	9c01      	ldr	r4, [sp, #4]
    e936:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
    e93a:	f504 70d6 	add.w	r0, r4, #428	; 0x1ac
    e93e:	3468      	adds	r4, #104	; 0x68
    e940:	b929      	cbnz	r1, e94e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    e942:	e001      	b.n	e948 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    e944:	2002      	movs	r0, #2
    e946:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    e94c:	b109      	cbz	r1, e952 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    e94e:	203a      	movs	r0, #58	; 0x3a
    e950:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e952:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    e956:	f04f 0501 	mov.w	r5, #1
    e95a:	0789      	lsls	r1, r1, #30
    e95c:	d103      	bne.n	e966 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    e95e:	7005      	strb	r5, [r0, #0]
    e960:	4668      	mov	r0, sp
    e962:	f7fe fc20 	bl	d1a6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e966:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    e96a:	2000      	movs	r0, #0
    e96c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000e96e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    e96e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e970:	460c      	mov	r4, r1
    e972:	4605      	mov	r5, r0
    e974:	8800      	ldrh	r0, [r0, #0]
    e976:	4669      	mov	r1, sp
    e978:	f7fe f85c 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e97c:	b108      	cbz	r0, e982 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    e97e:	2002      	movs	r0, #2
    e980:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e982:	78a8      	ldrb	r0, [r5, #2]
    e984:	b130      	cbz	r0, e994 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    e986:	f000 fa06 	bl	ed96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    e98a:	70a0      	strb	r0, [r4, #2]
    e98c:	8828      	ldrh	r0, [r5, #0]
    e98e:	8020      	strh	r0, [r4, #0]
    e990:	2000      	movs	r0, #0
    e992:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e994:	9801      	ldr	r0, [sp, #4]
    e996:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    e99a:	e7f6      	b.n	e98a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000e99c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    e99c:	b510      	push	{r4, lr}
    e99e:	f7fb fb95 	bl	a0cc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    e9a2:	2000      	movs	r0, #0
    e9a4:	bd10      	pop	{r4, pc}

0000e9a6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    e9a6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e9aa:	4604      	mov	r4, r0
    e9ac:	8840      	ldrh	r0, [r0, #2]
    e9ae:	460d      	mov	r5, r1
    e9b0:	b1b0      	cbz	r0, e9e0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3a>
    e9b2:	8820      	ldrh	r0, [r4, #0]
    e9b4:	4669      	mov	r1, sp
    e9b6:	f7fe f83d 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9ba:	2800      	cmp	r0, #0
    e9bc:	d10e      	bne.n	e9dc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>
    e9be:	8820      	ldrh	r0, [r4, #0]
    e9c0:	8028      	strh	r0, [r5, #0]
    e9c2:	9e01      	ldr	r6, [sp, #4]
    e9c4:	1d35      	adds	r5, r6, #4
    e9c6:	3668      	adds	r6, #104	; 0x68
    e9c8:	682f      	ldr	r7, [r5, #0]
    e9ca:	8862      	ldrh	r2, [r4, #2]
    e9cc:	4639      	mov	r1, r7
    e9ce:	4630      	mov	r0, r6
    e9d0:	f7fe f970 	bl	ccb4 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    e9d4:	6828      	ldr	r0, [r5, #0]
    e9d6:	42b8      	cmp	r0, r7
    e9d8:	d1f6      	bne.n	e9c8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x22>
    e9da:	2000      	movs	r0, #0
    e9dc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e9e0:	2012      	movs	r0, #18
    e9e2:	e7fb      	b.n	e9dc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x36>

0000e9e4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    e9e4:	f7fb b932 	b.w	9c4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000e9e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9ec:	b086      	sub	sp, #24
    e9ee:	468a      	mov	sl, r1
    e9f0:	4606      	mov	r6, r0
    e9f2:	8800      	ldrh	r0, [r0, #0]
    e9f4:	a901      	add	r1, sp, #4
    e9f6:	f7fe f81d 	bl	ca34 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e9fa:	2800      	cmp	r0, #0
    e9fc:	d138      	bne.n	ea70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    e9fe:	9802      	ldr	r0, [sp, #8]
    ea00:	f04f 0800 	mov.w	r8, #0
    ea04:	4601      	mov	r1, r0
    ea06:	4689      	mov	r9, r1
    ea08:	f890 11f4 	ldrb.w	r1, [r0, #500]	; 0x1f4
    ea0c:	f88d 1000 	strb.w	r1, [sp]
    ea10:	9900      	ldr	r1, [sp, #0]
    ea12:	9100      	str	r1, [sp, #0]
    ea14:	f89d 5000 	ldrb.w	r5, [sp]
    ea18:	f890 1076 	ldrb.w	r1, [r0, #118]	; 0x76
    ea1c:	3068      	adds	r0, #104	; 0x68
    ea1e:	2921      	cmp	r1, #33	; 0x21
    ea20:	d100      	bne.n	ea24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ea22:	b13d      	cbz	r5, ea34 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ea24:	2400      	movs	r4, #0
    ea26:	304c      	adds	r0, #76	; 0x4c
    ea28:	2108      	movs	r1, #8
    ea2a:	4607      	mov	r7, r0
    ea2c:	f7ff fb1e 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ea30:	b110      	cbz	r0, ea38 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ea32:	e007      	b.n	ea44 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ea34:	2401      	movs	r4, #1
    ea36:	e7f6      	b.n	ea26 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ea38:	210b      	movs	r1, #11
    ea3a:	4638      	mov	r0, r7
    ea3c:	f7ff fb16 	bl	e06c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ea40:	b900      	cbnz	r0, ea44 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ea42:	b1a4      	cbz	r4, ea6e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    ea44:	a804      	add	r0, sp, #16
    ea46:	9000      	str	r0, [sp, #0]
    ea48:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ea4c:	ab03      	add	r3, sp, #12
    ea4e:	4632      	mov	r2, r6
    ea50:	4649      	mov	r1, r9
    ea52:	f000 f980 	bl	ed56 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a4>
    ea56:	0007      	movs	r7, r0
    ea58:	d10a      	bne.n	ea70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ea5a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ea5e:	9c02      	ldr	r4, [sp, #8]
    ea60:	b148      	cbz	r0, ea76 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    ea62:	f504 74d3 	add.w	r4, r4, #422	; 0x1a6
    ea66:	2001      	movs	r0, #1
    ea68:	7060      	strb	r0, [r4, #1]
    ea6a:	b94d      	cbnz	r5, ea80 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    ea6c:	e006      	b.n	ea7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    ea6e:	201a      	movs	r0, #26
    ea70:	b006      	add	sp, #24
    ea72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea76:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    ea7a:	e7f4      	b.n	ea66 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    ea7c:	7820      	ldrb	r0, [r4, #0]
    ea7e:	b108      	cbz	r0, ea84 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    ea80:	273a      	movs	r7, #58	; 0x3a
    ea82:	e012      	b.n	eaaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    ea84:	f884 a000 	strb.w	sl, [r4]
    ea88:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ea8c:	70a0      	strb	r0, [r4, #2]
    ea8e:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ea92:	70e1      	strb	r1, [r4, #3]
    ea94:	f88d 0000 	strb.w	r0, [sp]
    ea98:	f88d 1001 	strb.w	r1, [sp, #1]
    ea9c:	88b0      	ldrh	r0, [r6, #4]
    ea9e:	f8ad 0002 	strh.w	r0, [sp, #2]
    eaa2:	4669      	mov	r1, sp
    eaa4:	4648      	mov	r0, r9
    eaa6:	f7fe f884 	bl	cbb2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    eaaa:	f884 8001 	strb.w	r8, [r4, #1]
    eaae:	4638      	mov	r0, r7
    eab0:	e7de      	b.n	ea70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000eab2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    eab2:	b510      	push	{r4, lr}
    eab4:	2008      	movs	r0, #8
    eab6:	f7fb fb91 	bl	a1dc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    eaba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eabe:	f7f9 b935 	b.w	7d2c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    eac2:	f44f 71a4 	mov.w	r1, #328	; 0x148
    eac6:	4288      	cmp	r0, r1
    eac8:	d303      	bcc.n	ead2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    eaca:	f640 0148 	movw	r1, #2120	; 0x848
    eace:	4288      	cmp	r0, r1
    ead0:	d300      	bcc.n	ead4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    ead2:	4608      	mov	r0, r1
    ead4:	4770      	bx	lr
    ead6:	07c1      	lsls	r1, r0, #31
    ead8:	d001      	beq.n	eade <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    eada:	2001      	movs	r0, #1
    eadc:	4770      	bx	lr
    eade:	0780      	lsls	r0, r0, #30
    eae0:	d501      	bpl.n	eae6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    eae2:	2002      	movs	r0, #2
    eae4:	4770      	bx	lr
    eae6:	2000      	movs	r0, #0
    eae8:	4770      	bx	lr
    eaea:	b510      	push	{r4, lr}
    eaec:	2801      	cmp	r0, #1
    eaee:	d006      	beq.n	eafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eaf0:	2802      	cmp	r0, #2
    eaf2:	d004      	beq.n	eafe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    eaf4:	f240 2173 	movw	r1, #627	; 0x273
    eaf8:	2006      	movs	r0, #6
    eafa:	f7f5 f855 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eafe:	bd10      	pop	{r4, pc}
    eb00:	b50e      	push	{r1, r2, r3, lr}
    eb02:	4669      	mov	r1, sp
    eb04:	2001      	movs	r0, #1
    eb06:	f7fd fe66 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eb0a:	b150      	cbz	r0, eb22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    eb0c:	f240 1131 	movw	r1, #305	; 0x131
    eb10:	2039      	movs	r0, #57	; 0x39
    eb12:	f7f5 f849 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb16:	9802      	ldr	r0, [sp, #8]
    eb18:	f7fe ffa1 	bl	da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eb1c:	b108      	cbz	r0, eb22 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    eb1e:	2001      	movs	r0, #1
    eb20:	bd0e      	pop	{r1, r2, r3, pc}
    eb22:	4668      	mov	r0, sp
    eb24:	f7f5 fa92 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    eb28:	2800      	cmp	r0, #0
    eb2a:	d0f4      	beq.n	eb16 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    eb2c:	2000      	movs	r0, #0
    eb2e:	bd0e      	pop	{r1, r2, r3, pc}
    eb30:	b510      	push	{r4, lr}
    eb32:	f7ff ffe5 	bl	eb00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    eb36:	b158      	cbz	r0, eb50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    eb38:	f000 f969 	bl	ee0e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35c>
    eb3c:	4604      	mov	r4, r0
    eb3e:	f7fe fd83 	bl	d648 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    eb42:	b918      	cbnz	r0, eb4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    eb44:	4620      	mov	r0, r4
    eb46:	f7fe fd75 	bl	d634 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    eb4a:	b108      	cbz	r0, eb50 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    eb4c:	2000      	movs	r0, #0
    eb4e:	bd10      	pop	{r4, pc}
    eb50:	2001      	movs	r0, #1
    eb52:	bd10      	pop	{r4, pc}
    eb54:	b570      	push	{r4, r5, r6, lr}
    eb56:	460d      	mov	r5, r1
    eb58:	4614      	mov	r4, r2
    eb5a:	4601      	mov	r1, r0
    eb5c:	8890      	ldrh	r0, [r2, #4]
    eb5e:	88e3      	ldrh	r3, [r4, #6]
    eb60:	1942      	adds	r2, r0, r5
    eb62:	429a      	cmp	r2, r3
    eb64:	d901      	bls.n	eb6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb8>
    eb66:	2007      	movs	r0, #7
    eb68:	bd70      	pop	{r4, r5, r6, pc}
    eb6a:	6822      	ldr	r2, [r4, #0]
    eb6c:	4410      	add	r0, r2
    eb6e:	462a      	mov	r2, r5
    eb70:	f7fc fe2f 	bl	b7d2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb74:	88a0      	ldrh	r0, [r4, #4]
    eb76:	4428      	add	r0, r5
    eb78:	80a0      	strh	r0, [r4, #4]
    eb7a:	2000      	movs	r0, #0
    eb7c:	bd70      	pop	{r4, r5, r6, pc}
    eb7e:	b570      	push	{r4, r5, r6, lr}
    eb80:	460c      	mov	r4, r1
    eb82:	4605      	mov	r5, r0
    eb84:	b112      	cbz	r2, eb8c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xda>
    eb86:	291f      	cmp	r1, #31
    eb88:	d807      	bhi.n	eb9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    eb8a:	e011      	b.n	ebb0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xfe>
    eb8c:	2cff      	cmp	r4, #255	; 0xff
    eb8e:	d804      	bhi.n	eb9a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe8>
    eb90:	f7fe fd58 	bl	d644 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    eb94:	b118      	cbz	r0, eb9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    eb96:	2c1f      	cmp	r4, #31
    eb98:	d901      	bls.n	eb9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xec>
    eb9a:	2012      	movs	r0, #18
    eb9c:	bd70      	pop	{r4, r5, r6, pc}
    eb9e:	4628      	mov	r0, r5
    eba0:	f7fe fd59 	bl	d656 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    eba4:	b130      	cbz	r0, ebb4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x102>
    eba6:	4621      	mov	r1, r4
    eba8:	4628      	mov	r0, r5
    ebaa:	f7fe fd1c 	bl	d5e6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    ebae:	b118      	cbz	r0, ebb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x106>
    ebb0:	2000      	movs	r0, #0
    ebb2:	bd70      	pop	{r4, r5, r6, pc}
    ebb4:	2042      	movs	r0, #66	; 0x42
    ebb6:	bd70      	pop	{r4, r5, r6, pc}
    ebb8:	2045      	movs	r0, #69	; 0x45
    ebba:	bd70      	pop	{r4, r5, r6, pc}
    ebbc:	b510      	push	{r4, lr}
    ebbe:	4604      	mov	r4, r0
    ebc0:	7840      	ldrb	r0, [r0, #1]
    ebc2:	06c1      	lsls	r1, r0, #27
    ebc4:	d512      	bpl.n	ebec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    ebc6:	07c0      	lsls	r0, r0, #31
    ebc8:	d00b      	beq.n	ebe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    ebca:	f7fb fabd 	bl	a148 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    ebce:	b168      	cbz	r0, ebec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    ebd0:	7860      	ldrb	r0, [r4, #1]
    ebd2:	06c1      	lsls	r1, r0, #27
    ebd4:	d405      	bmi.n	ebe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    ebd6:	0700      	lsls	r0, r0, #28
    ebd8:	d503      	bpl.n	ebe2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x130>
    ebda:	7d20      	ldrb	r0, [r4, #20]
    ebdc:	2802      	cmp	r0, #2
    ebde:	d105      	bne.n	ebec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13a>
    ebe0:	e006      	b.n	ebf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    ebe2:	7d20      	ldrb	r0, [r4, #20]
    ebe4:	2802      	cmp	r0, #2
    ebe6:	d003      	beq.n	ebf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    ebe8:	7ea0      	ldrb	r0, [r4, #26]
    ebea:	b108      	cbz	r0, ebf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x13e>
    ebec:	2011      	movs	r0, #17
    ebee:	bd10      	pop	{r4, pc}
    ebf0:	2000      	movs	r0, #0
    ebf2:	bd10      	pop	{r4, pc}
    ebf4:	b538      	push	{r3, r4, r5, lr}
    ebf6:	4604      	mov	r4, r0
    ebf8:	7800      	ldrb	r0, [r0, #0]
    ebfa:	28ef      	cmp	r0, #239	; 0xef
    ebfc:	d847      	bhi.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ebfe:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ec02:	f8ad 0000 	strh.w	r0, [sp]
    ec06:	9800      	ldr	r0, [sp, #0]
    ec08:	f000 f956 	bl	eeb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    ec0c:	b3c0      	cbz	r0, ec80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    ec0e:	7861      	ldrb	r1, [r4, #1]
    ec10:	0708      	lsls	r0, r1, #28
    ec12:	d40f      	bmi.n	ec34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x182>
    ec14:	f8d4 2002 	ldr.w	r2, [r4, #2]
    ec18:	f8d4 0005 	ldr.w	r0, [r4, #5]
    ec1c:	0a13      	lsrs	r3, r2, #8
    ec1e:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    ec22:	d834      	bhi.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec24:	2320      	movs	r3, #32
    ec26:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
    ec2a:	d830      	bhi.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec2c:	025a      	lsls	r2, r3, #9
    ec2e:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    ec32:	d32c      	bcc.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec34:	7a60      	ldrb	r0, [r4, #9]
    ec36:	b318      	cbz	r0, ec80 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ce>
    ec38:	2807      	cmp	r0, #7
    ec3a:	d828      	bhi.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec3c:	7aa0      	ldrb	r0, [r4, #10]
    ec3e:	b128      	cbz	r0, ec4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ec40:	2801      	cmp	r0, #1
    ec42:	d003      	beq.n	ec4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ec44:	2802      	cmp	r0, #2
    ec46:	d001      	beq.n	ec4c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    ec48:	2803      	cmp	r0, #3
    ec4a:	d120      	bne.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec4c:	074a      	lsls	r2, r1, #29
    ec4e:	d403      	bmi.n	ec58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    ec50:	2802      	cmp	r0, #2
    ec52:	d001      	beq.n	ec58 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1a6>
    ec54:	2803      	cmp	r0, #3
    ec56:	d105      	bne.n	ec64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1b2>
    ec58:	7ae0      	ldrb	r0, [r4, #11]
    ec5a:	b108      	cbz	r0, ec60 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    ec5c:	2801      	cmp	r0, #1
    ec5e:	d116      	bne.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec60:	0748      	lsls	r0, r1, #29
    ec62:	d407      	bmi.n	ec74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec64:	7ca0      	ldrb	r0, [r4, #18]
    ec66:	b128      	cbz	r0, ec74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec68:	2801      	cmp	r0, #1
    ec6a:	d003      	beq.n	ec74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec6c:	2802      	cmp	r0, #2
    ec6e:	d001      	beq.n	ec74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c2>
    ec70:	2803      	cmp	r0, #3
    ec72:	d10c      	bne.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec74:	06c8      	lsls	r0, r1, #27
    ec76:	7d20      	ldrb	r0, [r4, #20]
    ec78:	d503      	bpl.n	ec82 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ec7a:	2801      	cmp	r0, #1
    ec7c:	d107      	bne.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec7e:	e002      	b.n	ec86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d4>
    ec80:	e005      	b.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec82:	2802      	cmp	r0, #2
    ec84:	d003      	beq.n	ec8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1dc>
    ec86:	7e20      	ldrb	r0, [r4, #24]
    ec88:	b118      	cbz	r0, ec92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    ec8a:	2801      	cmp	r0, #1
    ec8c:	d001      	beq.n	ec92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e0>
    ec8e:	2012      	movs	r0, #18
    ec90:	bd38      	pop	{r3, r4, r5, pc}
    ec92:	2000      	movs	r0, #0
    ec94:	bd38      	pop	{r3, r4, r5, pc}
    ec96:	b510      	push	{r4, lr}
    ec98:	0004      	movs	r4, r0
    ec9a:	d005      	beq.n	eca8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    ec9c:	f7fb faae 	bl	a1fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    eca0:	4384      	bics	r4, r0
    eca2:	d001      	beq.n	eca8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    eca4:	2000      	movs	r0, #0
    eca6:	bd10      	pop	{r4, pc}
    eca8:	2001      	movs	r0, #1
    ecaa:	bd10      	pop	{r4, pc}
    ecac:	28fb      	cmp	r0, #251	; 0xfb
    ecae:	d803      	bhi.n	ecb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x206>
    ecb0:	f640 0048 	movw	r0, #2120	; 0x848
    ecb4:	4281      	cmp	r1, r0
    ecb6:	d901      	bls.n	ecbc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20a>
    ecb8:	2011      	movs	r0, #17
    ecba:	4770      	bx	lr
    ecbc:	2000      	movs	r0, #0
    ecbe:	4770      	bx	lr
    ecc0:	381b      	subs	r0, #27
    ecc2:	28e1      	cmp	r0, #225	; 0xe1
    ecc4:	d206      	bcs.n	ecd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    ecc6:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    ecca:	d303      	bcc.n	ecd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x222>
    eccc:	f244 2090 	movw	r0, #17040	; 0x4290
    ecd0:	4281      	cmp	r1, r0
    ecd2:	d901      	bls.n	ecd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x226>
    ecd4:	2012      	movs	r0, #18
    ecd6:	4770      	bx	lr
    ecd8:	2000      	movs	r0, #0
    ecda:	4770      	bx	lr
    ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ece0:	4606      	mov	r6, r0
    ece2:	f8b0 704a 	ldrh.w	r7, [r0, #74]	; 0x4a
    ece6:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    ecea:	4615      	mov	r5, r2
    ecec:	3024      	adds	r0, #36	; 0x24
    ecee:	f7f8 f971 	bl	6fd4 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    ecf2:	4680      	mov	r8, r0
    ecf4:	2102      	movs	r1, #2
    ecf6:	f7fd ff2d 	bl	cb54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ecfa:	4287      	cmp	r7, r0
    ecfc:	d200      	bcs.n	ed00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24e>
    ecfe:	4638      	mov	r0, r7
    ed00:	4607      	mov	r7, r0
    ed02:	2102      	movs	r1, #2
    ed04:	4640      	mov	r0, r8
    ed06:	f7fd ff25 	bl	cb54 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ed0a:	4284      	cmp	r4, r0
    ed0c:	d200      	bcs.n	ed10 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x25e>
    ed0e:	4620      	mov	r0, r4
    ed10:	8831      	ldrh	r1, [r6, #0]
    ed12:	8029      	strh	r1, [r5, #0]
    ed14:	2f1b      	cmp	r7, #27
    ed16:	d913      	bls.n	ed40 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    ed18:	2ffb      	cmp	r7, #251	; 0xfb
    ed1a:	d300      	bcc.n	ed1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    ed1c:	27fb      	movs	r7, #251	; 0xfb
    ed1e:	806f      	strh	r7, [r5, #2]
    ed20:	281b      	cmp	r0, #27
    ed22:	d90f      	bls.n	ed44 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x292>
    ed24:	28fb      	cmp	r0, #251	; 0xfb
    ed26:	d300      	bcc.n	ed2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    ed28:	20fb      	movs	r0, #251	; 0xfb
    ed2a:	80e8      	strh	r0, [r5, #6]
    ed2c:	4640      	mov	r0, r8
    ed2e:	f7ff fec8 	bl	eac2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed32:	80a8      	strh	r0, [r5, #4]
    ed34:	4640      	mov	r0, r8
    ed36:	f7ff fec4 	bl	eac2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    ed3a:	8128      	strh	r0, [r5, #8]
    ed3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed40:	271b      	movs	r7, #27
    ed42:	e7ec      	b.n	ed1e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x26c>
    ed44:	201b      	movs	r0, #27
    ed46:	e7f0      	b.n	ed2a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x278>
    ed48:	b510      	push	{r4, lr}
    ed4a:	f7ff fed9 	bl	eb00 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    ed4e:	2800      	cmp	r0, #0
    ed50:	d000      	beq.n	ed54 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    ed52:	2001      	movs	r0, #1
    ed54:	bd10      	pop	{r4, pc}
    ed56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed5a:	7890      	ldrb	r0, [r2, #2]
    ed5c:	9e06      	ldr	r6, [sp, #24]
    ed5e:	461d      	mov	r5, r3
    ed60:	4614      	mov	r4, r2
    ed62:	b908      	cbnz	r0, ed68 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2b6>
    ed64:	f7fb fa4a 	bl	a1fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ed68:	78e4      	ldrb	r4, [r4, #3]
    ed6a:	4607      	mov	r7, r0
    ed6c:	b914      	cbnz	r4, ed74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    ed6e:	f7fb fa45 	bl	a1fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    ed72:	4604      	mov	r4, r0
    ed74:	b16f      	cbz	r7, ed92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed76:	b164      	cbz	r4, ed92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed78:	4638      	mov	r0, r7
    ed7a:	f7ff feac 	bl	ead6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    ed7e:	4620      	mov	r0, r4
    ed80:	f7ff fea9 	bl	ead6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    ed84:	b12f      	cbz	r7, ed92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed86:	b124      	cbz	r4, ed92 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e0>
    ed88:	702f      	strb	r7, [r5, #0]
    ed8a:	7034      	strb	r4, [r6, #0]
    ed8c:	2000      	movs	r0, #0
    ed8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed92:	2009      	movs	r0, #9
    ed94:	e7fb      	b.n	ed8e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2dc>
    ed96:	b510      	push	{r4, lr}
    ed98:	f7fc fcbf 	bl	b71a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ed9c:	b928      	cbnz	r0, edaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    ed9e:	f7fc fcf2 	bl	b786 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    eda2:	b910      	cbnz	r0, edaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f8>
    eda4:	f7fc fcf9 	bl	b79a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    eda8:	b108      	cbz	r0, edae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2fc>
    edaa:	2008      	movs	r0, #8
    edac:	bd10      	pop	{r4, pc}
    edae:	f7fc fc89 	bl	b6c4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    edb2:	b940      	cbnz	r0, edc6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    edb4:	f7fc fc90 	bl	b6d8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    edb8:	b928      	cbnz	r0, edc6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    edba:	f7fc fca4 	bl	b706 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    edbe:	b910      	cbnz	r0, edc6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x314>
    edc0:	f7fc fcb5 	bl	b72e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    edc4:	b108      	cbz	r0, edca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x318>
    edc6:	2004      	movs	r0, #4
    edc8:	bd10      	pop	{r4, pc}
    edca:	f240 5197 	movw	r1, #1431	; 0x597
    edce:	2039      	movs	r0, #57	; 0x39
    edd0:	f7f4 feea 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edd4:	b510      	push	{r4, lr}
    edd6:	f7fb fa0b 	bl	a1f0 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    edda:	f3c0 1040 	ubfx	r0, r0, #5, #1
    edde:	bd10      	pop	{r4, pc}
    ede0:	6840      	ldr	r0, [r0, #4]
    ede2:	f000 b800 	b.w	ede6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x334>
    ede6:	b508      	push	{r3, lr}
    ede8:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    edec:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    edf0:	f88d 0000 	strb.w	r0, [sp]
    edf4:	9800      	ldr	r0, [sp, #0]
    edf6:	9000      	str	r0, [sp, #0]
    edf8:	f89d 0000 	ldrb.w	r0, [sp]
    edfc:	1e40      	subs	r0, r0, #1
    edfe:	4208      	tst	r0, r1
    ee00:	d003      	beq.n	ee0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    ee02:	2904      	cmp	r1, #4
    ee04:	d001      	beq.n	ee0a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x358>
    ee06:	2001      	movs	r0, #1
    ee08:	bd08      	pop	{r3, pc}
    ee0a:	2000      	movs	r0, #0
    ee0c:	bd08      	pop	{r3, pc}
    ee0e:	b510      	push	{r4, lr}
    ee10:	2101      	movs	r1, #1
    ee12:	2000      	movs	r0, #0
    ee14:	f7fd fcd5 	bl	c7c2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee18:	0004      	movs	r4, r0
    ee1a:	d109      	bne.n	ee30 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x37e>
    ee1c:	2200      	movs	r2, #0
    ee1e:	2101      	movs	r1, #1
    ee20:	4610      	mov	r0, r2
    ee22:	f7fd fcb2 	bl	c78a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    ee26:	0004      	movs	r4, r0
    ee28:	d004      	beq.n	ee34 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x382>
    ee2a:	2100      	movs	r1, #0
    ee2c:	f7fe fbb0 	bl	d590 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    ee30:	4620      	mov	r0, r4
    ee32:	bd10      	pop	{r4, pc}
    ee34:	f240 2126 	movw	r1, #550	; 0x226
    ee38:	2039      	movs	r0, #57	; 0x39
    ee3a:	f7f4 feb5 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee3e:	b570      	push	{r4, r5, r6, lr}
    ee40:	4605      	mov	r5, r0
    ee42:	f7fe fc08 	bl	d656 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    ee46:	b170      	cbz	r0, ee66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b4>
    ee48:	4628      	mov	r0, r5
    ee4a:	f7fe fe08 	bl	da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ee4e:	2800      	cmp	r0, #0
    ee50:	d008      	beq.n	ee64 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b2>
    ee52:	4628      	mov	r0, r5
    ee54:	f7fe fe00 	bl	da58 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    ee58:	4604      	mov	r4, r0
    ee5a:	4628      	mov	r0, r5
    ee5c:	f7fe fdd6 	bl	da0c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    ee60:	b118      	cbz	r0, ee6a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3b8>
    ee62:	200c      	movs	r0, #12
    ee64:	bd70      	pop	{r4, r5, r6, pc}
    ee66:	2042      	movs	r0, #66	; 0x42
    ee68:	bd70      	pop	{r4, r5, r6, pc}
    ee6a:	b164      	cbz	r4, ee86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    ee6c:	8820      	ldrh	r0, [r4, #0]
    ee6e:	f7fd fd21 	bl	c8b4 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ee72:	8820      	ldrh	r0, [r4, #0]
    ee74:	2100      	movs	r1, #0
    ee76:	f7f5 f939 	bl	40ec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ee7a:	b120      	cbz	r0, ee86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d4>
    ee7c:	f241 417a 	movw	r1, #5242	; 0x147a
    ee80:	2039      	movs	r0, #57	; 0x39
    ee82:	f7f4 fe91 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee86:	2000      	movs	r0, #0
    ee88:	bd70      	pop	{r4, r5, r6, pc}
    ee8a:	b530      	push	{r4, r5, lr}
    ee8c:	f340 0400 	sbfx	r4, r0, #0, #1
    ee90:	f340 0040 	sbfx	r0, r0, #1, #1
    ee94:	1c40      	adds	r0, r0, #1
    ee96:	9d03      	ldr	r5, [sp, #12]
    ee98:	1c64      	adds	r4, r4, #1
    ee9a:	d000      	beq.n	ee9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ec>
    ee9c:	b119      	cbz	r1, eea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    ee9e:	b100      	cbz	r0, eea2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    eea0:	b10a      	cbz	r2, eea6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f4>
    eea2:	b91c      	cbnz	r4, eeac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3fa>
    eea4:	e001      	b.n	eeaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f8>
    eea6:	2011      	movs	r0, #17
    eea8:	bd30      	pop	{r4, r5, pc}
    eeaa:	2100      	movs	r1, #0
    eeac:	7019      	strb	r1, [r3, #0]
    eeae:	b900      	cbnz	r0, eeb2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    eeb0:	2200      	movs	r2, #0
    eeb2:	702a      	strb	r2, [r5, #0]
    eeb4:	2000      	movs	r0, #0
    eeb6:	bd30      	pop	{r4, r5, pc}
    eeb8:	b2c0      	uxtb	r0, r0
    eeba:	06c1      	lsls	r1, r0, #27
    eebc:	d40c      	bmi.n	eed8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x426>
    eebe:	0681      	lsls	r1, r0, #26
    eec0:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    eec4:	d503      	bpl.n	eece <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x41c>
    eec6:	b9d1      	cbnz	r1, eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eec8:	0781      	lsls	r1, r0, #30
    eeca:	d418      	bmi.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eecc:	e001      	b.n	eed2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x420>
    eece:	2900      	cmp	r1, #0
    eed0:	d1fa      	bne.n	eec8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x416>
    eed2:	0700      	lsls	r0, r0, #28
    eed4:	d413      	bmi.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eed6:	e010      	b.n	eefa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    eed8:	0641      	lsls	r1, r0, #25
    eeda:	d410      	bmi.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eedc:	0681      	lsls	r1, r0, #26
    eede:	d40e      	bmi.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eee0:	07c1      	lsls	r1, r0, #31
    eee2:	ea4f 7180 	mov.w	r1, r0, lsl #30
    eee6:	d004      	beq.n	eef2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    eee8:	2900      	cmp	r1, #0
    eeea:	db02      	blt.n	eef2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x440>
    eeec:	0740      	lsls	r0, r0, #29
    eeee:	d404      	bmi.n	eefa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x448>
    eef0:	e005      	b.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eef2:	0701      	lsls	r1, r0, #28
    eef4:	d403      	bmi.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eef6:	0740      	lsls	r0, r0, #29
    eef8:	d401      	bmi.n	eefe <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x44c>
    eefa:	2001      	movs	r0, #1
    eefc:	4770      	bx	lr
    eefe:	2000      	movs	r0, #0
    ef00:	4770      	bx	lr
    ef02:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ef04:	4669      	mov	r1, sp
    ef06:	2001      	movs	r0, #1
    ef08:	f7fd fc65 	bl	c7d6 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ef0c:	b178      	cbz	r0, ef2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    ef0e:	f240 114f 	movw	r1, #335	; 0x14f
    ef12:	2039      	movs	r0, #57	; 0x39
    ef14:	f7f4 fe48 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef18:	9c02      	ldr	r4, [sp, #8]
    ef1a:	4620      	mov	r0, r4
    ef1c:	f7fe fd9f 	bl	da5e <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ef20:	b128      	cbz	r0, ef2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    ef22:	4620      	mov	r0, r4
    ef24:	f7fe fbff 	bl	d726 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    ef28:	b108      	cbz	r0, ef2e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x47c>
    ef2a:	2001      	movs	r0, #1
    ef2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ef2e:	4668      	mov	r0, sp
    ef30:	f7f5 f88c 	bl	404c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ef34:	2800      	cmp	r0, #0
    ef36:	d0ef      	beq.n	ef18 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    ef38:	2000      	movs	r0, #0
    ef3a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ef3c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    ef3c:	6802      	ldr	r2, [r0, #0]
    ef3e:	b912      	cbnz	r2, ef46 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    ef40:	6001      	str	r1, [r0, #0]
    ef42:	4770      	bx	lr
    ef44:	4602      	mov	r2, r0
    ef46:	6850      	ldr	r0, [r2, #4]
    ef48:	b108      	cbz	r0, ef4e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    ef4a:	428a      	cmp	r2, r1
    ef4c:	d1fa      	bne.n	ef44 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    ef4e:	428a      	cmp	r2, r1
    ef50:	d0f7      	beq.n	ef42 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    ef52:	6051      	str	r1, [r2, #4]
    ef54:	4770      	bx	lr
    ef56:	b510      	push	{r4, lr}
    ef58:	f7fe fd84 	bl	da64 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    ef5c:	b108      	cbz	r0, ef62 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    ef5e:	21d8      	movs	r1, #216	; 0xd8
    ef60:	e003      	b.n	ef6a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    ef62:	f7f7 f9ed 	bl	6340 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    ef66:	b118      	cbz	r0, ef70 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    ef68:	21dd      	movs	r1, #221	; 0xdd
    ef6a:	2001      	movs	r0, #1
    ef6c:	f7f4 fe1c 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef74:	2001      	movs	r0, #1
    ef76:	f7f5 b801 	b.w	3f7c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ef7a:	b510      	push	{r4, lr}
    ef7c:	4604      	mov	r4, r0
    ef7e:	e002      	b.n	ef86 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    ef80:	6820      	ldr	r0, [r4, #0]
    ef82:	4780      	blx	r0
    ef84:	6864      	ldr	r4, [r4, #4]
    ef86:	2c00      	cmp	r4, #0
    ef88:	d1fa      	bne.n	ef80 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    ef8a:	bd10      	pop	{r4, pc}
    ef8c:	b510      	push	{r4, lr}
    ef8e:	2000      	movs	r0, #0
    ef90:	f7f4 fff4 	bl	3f7c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    ef94:	f7f5 fa28 	bl	43e8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    ef98:	f7f5 fcaa 	bl	48f0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    ef9c:	f7f5 fe88 	bl	4cb0 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    efa0:	2800      	cmp	r0, #0
    efa2:	d003      	beq.n	efac <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    efa4:	21b5      	movs	r1, #181	; 0xb5
    efa6:	2001      	movs	r0, #1
    efa8:	f7f4 fdfe 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efac:	bd10      	pop	{r4, pc}
    efae:	b510      	push	{r4, lr}
    efb0:	f7ff ffd1 	bl	ef56 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    efb4:	f7ff f81a 	bl	dfec <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    efb8:	2800      	cmp	r0, #0
    efba:	d003      	beq.n	efc4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
    efbc:	21f6      	movs	r1, #246	; 0xf6
    efbe:	2001      	movs	r0, #1
    efc0:	f7f4 fdf2 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efc4:	bd10      	pop	{r4, pc}

0000efc6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    efc6:	b510      	push	{r4, lr}
    efc8:	f7fb fc94 	bl	a8f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    efcc:	f000 f850 	bl	f070 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    efd0:	f7fb f968 	bl	a2a4 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    efd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efd8:	f7fb ba5e 	b.w	a498 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000efdc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    efdc:	b510      	push	{r4, lr}
    efde:	24c8      	movs	r4, #200	; 0xc8
    efe0:	1e64      	subs	r4, r4, #1
    efe2:	b2e4      	uxtb	r4, r4
    efe4:	f7fb f97c 	bl	a2e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    efe8:	2802      	cmp	r0, #2
    efea:	d003      	beq.n	eff4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    efec:	2801      	cmp	r0, #1
    efee:	d000      	beq.n	eff2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    eff0:	2000      	movs	r0, #0
    eff2:	bd10      	pop	{r4, pc}
    eff4:	2c00      	cmp	r4, #0
    eff6:	d1f3      	bne.n	efe0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    eff8:	218f      	movs	r1, #143	; 0x8f
    effa:	203b      	movs	r0, #59	; 0x3b
    effc:	f7f4 fdd4 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f000 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f000:	b510      	push	{r4, lr}
    f002:	f7f4 fcb1 	bl	3968 <mpsl_fem_lna_configuration_clear>
    f006:	2800      	cmp	r0, #0
    f008:	d005      	beq.n	f016 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f00a:	1c40      	adds	r0, r0, #1
    f00c:	d003      	beq.n	f016 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f00e:	2150      	movs	r1, #80	; 0x50
    f010:	2040      	movs	r0, #64	; 0x40
    f012:	f7f4 fdc9 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f016:	bd10      	pop	{r4, pc}

0000f018 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f018:	b510      	push	{r4, lr}
    f01a:	f7f4 fcb1 	bl	3980 <mpsl_fem_pa_configuration_clear>
    f01e:	2800      	cmp	r0, #0
    f020:	d005      	beq.n	f02e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f022:	1c40      	adds	r0, r0, #1
    f024:	d003      	beq.n	f02e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f026:	2149      	movs	r1, #73	; 0x49
    f028:	2040      	movs	r0, #64	; 0x40
    f02a:	f7f4 fdbd 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f02e:	bd10      	pop	{r4, pc}

0000f030 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f030:	b510      	push	{r4, lr}
    f032:	f7f4 fc93 	bl	395c <mpsl_fem_disable>
    f036:	2800      	cmp	r0, #0
    f038:	d005      	beq.n	f046 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f03a:	1c40      	adds	r0, r0, #1
    f03c:	d003      	beq.n	f046 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f03e:	2157      	movs	r1, #87	; 0x57
    f040:	2040      	movs	r0, #64	; 0x40
    f042:	f7f4 fdb1 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f046:	bd10      	pop	{r4, pc}

0000f048 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f048:	b510      	push	{r4, lr}
    f04a:	2100      	movs	r1, #0
    f04c:	4608      	mov	r0, r1
    f04e:	f7f4 fc91 	bl	3974 <mpsl_fem_lna_configuration_set>
    f052:	b108      	cbz	r0, f058 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f054:	2000      	movs	r0, #0
    f056:	bd10      	pop	{r4, pc}
    f058:	2001      	movs	r0, #1
    f05a:	bd10      	pop	{r4, pc}

0000f05c <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f05c:	b508      	push	{r3, lr}
    f05e:	4668      	mov	r0, sp
    f060:	f7f4 fc9a 	bl	3998 <mpsl_fem_pa_is_configured>
    f064:	f89d 0000 	ldrb.w	r0, [sp]
    f068:	2800      	cmp	r0, #0
    f06a:	d000      	beq.n	f06e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f06c:	2001      	movs	r0, #1
    f06e:	bd08      	pop	{r3, pc}

0000f070 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f070:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f074:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f078:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f07c:	f3bf 8f4f 	dsb	sy
    f080:	f3bf 8f6f 	isb	sy
    f084:	f7fb ba8a 	b.w	a59c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f088:	2800      	cmp	r0, #0
    f08a:	db09      	blt.n	f0a0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f08c:	f000 021f 	and.w	r2, r0, #31
    f090:	2101      	movs	r1, #1
    f092:	4091      	lsls	r1, r2
    f094:	0940      	lsrs	r0, r0, #5
    f096:	0080      	lsls	r0, r0, #2
    f098:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f09c:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f0a0:	4770      	bx	lr
    f0a2:	2800      	cmp	r0, #0
    f0a4:	db0d      	blt.n	f0c2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f0a6:	f000 021f 	and.w	r2, r0, #31
    f0aa:	2101      	movs	r1, #1
    f0ac:	4091      	lsls	r1, r2
    f0ae:	0940      	lsrs	r0, r0, #5
    f0b0:	0080      	lsls	r0, r0, #2
    f0b2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f0b6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f0ba:	f3bf 8f4f 	dsb	sy
    f0be:	f3bf 8f6f 	isb	sy
    f0c2:	4770      	bx	lr

0000f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f0c4:	b510      	push	{r4, lr}
    f0c6:	2801      	cmp	r0, #1
    f0c8:	d006      	beq.n	f0d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f0ca:	2802      	cmp	r0, #2
    f0cc:	d006      	beq.n	f0dc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f0ce:	f640 31c5 	movw	r1, #3013	; 0xbc5
    f0d2:	203e      	movs	r0, #62	; 0x3e
    f0d4:	f7f4 fd68 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0d8:	2028      	movs	r0, #40	; 0x28
    f0da:	bd10      	pop	{r4, pc}
    f0dc:	2018      	movs	r0, #24
    f0de:	bd10      	pop	{r4, pc}

0000f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f0e0:	b510      	push	{r4, lr}
    f0e2:	2801      	cmp	r0, #1
    f0e4:	d006      	beq.n	f0f4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f0e6:	2802      	cmp	r0, #2
    f0e8:	d007      	beq.n	f0fa <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f0ea:	f640 31d9 	movw	r1, #3033	; 0xbd9
    f0ee:	203e      	movs	r0, #62	; 0x3e
    f0f0:	f7f4 fd5a 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0f4:	f641 6014 	movw	r0, #7700	; 0x1e14
    f0f8:	bd10      	pop	{r4, pc}
    f0fa:	f241 1030 	movw	r0, #4400	; 0x1130
    f0fe:	bd10      	pop	{r4, pc}

0000f100 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f100:	f7fc b998 	b.w	b434 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e8>
    f104:	b510      	push	{r4, lr}
    f106:	460a      	mov	r2, r1
    f108:	b130      	cbz	r0, f118 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f10a:	2801      	cmp	r0, #1
    f10c:	d00b      	beq.n	f126 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f10e:	f240 614f 	movw	r1, #1615	; 0x64f
    f112:	203e      	movs	r0, #62	; 0x3e
    f114:	f7f4 fd48 	bl	3ba8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f11c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f120:	4610      	mov	r0, r2
    f122:	f7fb b931 	b.w	a388 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f12a:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f12e:	4610      	mov	r0, r2
    f130:	f7fb b914 	b.w	a35c <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f134 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f134:	b570      	push	{r4, r5, r6, lr}
    f136:	4605      	mov	r5, r0
    f138:	4614      	mov	r4, r2
    f13a:	4608      	mov	r0, r1
    f13c:	f7ff ffd0 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f140:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f144:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f148:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f14c:	4620      	mov	r0, r4
    f14e:	f7ff ffc7 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f152:	4428      	add	r0, r5
    f154:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f158:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f15c:	fbb0 f5f1 	udiv	r5, r0, r1
    f160:	4620      	mov	r0, r4
    f162:	f7ff ffaf 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f166:	4428      	add	r0, r5
    f168:	1d40      	adds	r0, r0, #5
    f16a:	bd70      	pop	{r4, r5, r6, pc}

0000f16c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f170:	4607      	mov	r7, r0
    f172:	461d      	mov	r5, r3
    f174:	460e      	mov	r6, r1
    f176:	4614      	mov	r4, r2
    f178:	4610      	mov	r0, r2
    f17a:	f7ff ffb1 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f17e:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f182:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f186:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f18a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f18e:	2e02      	cmp	r6, #2
    f190:	d00e      	beq.n	f1b0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f192:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f196:	4411      	add	r1, r2
    f198:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f19c:	fbb1 f6f0 	udiv	r6, r1, r0
    f1a0:	4620      	mov	r0, r4
    f1a2:	f7ff ff8f 	bl	f0c4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1a6:	4430      	add	r0, r6
    f1a8:	4428      	add	r0, r5
    f1aa:	1d40      	adds	r0, r0, #5
    f1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1b0:	4602      	mov	r2, r0
    f1b2:	e7f0      	b.n	f196 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f1b4 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f1b4:	b510      	push	{r4, lr}
    f1b6:	4604      	mov	r4, r0
    f1b8:	4608      	mov	r0, r1
    f1ba:	f7ff ff91 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1c2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f1c6:	fbb0 f0f1 	udiv	r0, r0, r1
    f1ca:	1a20      	subs	r0, r4, r0
    f1cc:	1e80      	subs	r0, r0, #2
    f1ce:	bd10      	pop	{r4, pc}

0000f1d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f1d0:	b510      	push	{r4, lr}
    f1d2:	4604      	mov	r4, r0
    f1d4:	4608      	mov	r0, r1
    f1d6:	f7ff ff83 	bl	f0e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f1de:	fbb0 f0f1 	udiv	r0, r0, r1
    f1e2:	1a20      	subs	r0, r4, r0
    f1e4:	bd10      	pop	{r4, pc}

0000f1e6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f1e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f1ea:	2902      	cmp	r1, #2
    f1ec:	d008      	beq.n	f200 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f1ee:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f1f2:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f1f6:	fbb1 f1f2 	udiv	r1, r1, r2
    f1fa:	4408      	add	r0, r1
    f1fc:	1e80      	subs	r0, r0, #2
    f1fe:	4770      	bx	lr
    f200:	4611      	mov	r1, r2
    f202:	e7f6      	b.n	f1f2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f204 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f208:	2902      	cmp	r1, #2
    f20a:	d007      	beq.n	f21c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f20c:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f210:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f214:	fbb1 f1f2 	udiv	r1, r1, r2
    f218:	4408      	add	r0, r1
    f21a:	4770      	bx	lr
    f21c:	4611      	mov	r1, r2
    f21e:	e7f7      	b.n	f210 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f220:	1702080c 	.word	0x1702080c
    f224:	0201010d 	.word	0x0201010d
    f228:	01010909 	.word	0x01010909
    f22c:	18090206 	.word	0x18090206
    f230:	01010318 	.word	0x01010318
    f234:	03030909 	.word	0x03030909
    f238:	00000005 	.word	0x00000005

0000f23c <getBrain_BleService_OnCccdChanged>:

/* This function is called whenever the CCCD register has been changed by the client*/
void getBrain_BleService_OnCccdChanged(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    f23c:	2902      	cmp	r1, #2
    f23e:	d800      	bhi.n	f242 <getBrain_BleService_OnCccdChanged+0x6>
    f240:	4770      	bx	lr
{
    f242:	b508      	push	{r3, lr}
        case 0: 
            // Stop sending stuff
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value");     
    f244:	4801      	ldr	r0, [pc, #4]	; (f24c <getBrain_BleService_OnCccdChanged+0x10>)
    f246:	f010 fcf1 	bl	1fc2c <printk>
    }
}
    f24a:	bd08      	pop	{r3, pc}
    f24c:	000256a8 	.word	0x000256a8

0000f250 <getBrain_BleService_Init>:

int getBrain_BleService_Init(void)
{
    f250:	b508      	push	{r3, lr}
     int err = 0;

    memset(&getBrain_TxBuffer, 0, MAX_TRANSMIT_SIZE);
    f252:	2232      	movs	r2, #50	; 0x32
    f254:	2100      	movs	r1, #0
    f256:	4802      	ldr	r0, [pc, #8]	; (f260 <getBrain_BleService_Init+0x10>)
    f258:	f012 f989 	bl	2156e <memset>

    return err;
}
    f25c:	2000      	movs	r0, #0
    f25e:	bd08      	pop	{r3, pc}
    f260:	200361f0 	.word	0x200361f0

0000f264 <getBrain_BleService_Send>:

/* This function sends a notification to a Client with the provided data,
given that the Client Characteristic Control Descripter has been set to Notify (0x1).
It also calls the on_sent() callback if successful*/
void getBrain_BleService_Send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
    f264:	b5f0      	push	{r4, r5, r6, r7, lr}
    f266:	b08d      	sub	sp, #52	; 0x34
    f268:	4606      	mov	r6, r0
    f26a:	468c      	mov	ip, r1
    f26c:	4617      	mov	r7, r2
    to check whether notification has been enabled by the peer or not.
    Attribute table: 0 = Service, 1 = Primary service, 2 = TX, 4 = CCC.
    */
    const struct bt_gatt_attr *attr = &getBrain_BleService.attrs[2]; 

    struct bt_gatt_notify_params params = 
    f26e:	2300      	movs	r3, #0
    f270:	9304      	str	r3, [sp, #16]
    f272:	9306      	str	r3, [sp, #24]
    {
        .uuid   = GETBRAIN_BT_UUID_SERVICE_TX,
    f274:	ac07      	add	r4, sp, #28
    f276:	4d11      	ldr	r5, [pc, #68]	; (f2bc <getBrain_BleService_Send+0x58>)
    f278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f27a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f27c:	682b      	ldr	r3, [r5, #0]
    f27e:	7023      	strb	r3, [r4, #0]
    struct bt_gatt_notify_params params = 
    f280:	ab07      	add	r3, sp, #28
    f282:	9301      	str	r3, [sp, #4]
    f284:	490e      	ldr	r1, [pc, #56]	; (f2c0 <getBrain_BleService_Send+0x5c>)
    f286:	9102      	str	r1, [sp, #8]
    f288:	f8cd c00c 	str.w	ip, [sp, #12]
    f28c:	f8ad 7010 	strh.w	r7, [sp, #16]
    f290:	4b0c      	ldr	r3, [pc, #48]	; (f2c4 <getBrain_BleService_Send+0x60>)
    f292:	9305      	str	r3, [sp, #20]
        .len    = len,
        .func   = getBrain_OnSent
    };

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    f294:	2201      	movs	r2, #1
    f296:	4630      	mov	r0, r6
    f298:	f014 f872 	bl	23380 <bt_gatt_is_subscribed>
    f29c:	b140      	cbz	r0, f2b0 <getBrain_BleService_Send+0x4c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    f29e:	a901      	add	r1, sp, #4
    f2a0:	4630      	mov	r0, r6
    f2a2:	f009 fbd1 	bl	18a48 <bt_gatt_notify_cb>
    f2a6:	b130      	cbz	r0, f2b6 <getBrain_BleService_Send+0x52>
        {
            printk("Error, unable to send notification\n");
    f2a8:	4807      	ldr	r0, [pc, #28]	; (f2c8 <getBrain_BleService_Send+0x64>)
    f2aa:	f010 fcbf 	bl	1fc2c <printk>
    f2ae:	e002      	b.n	f2b6 <getBrain_BleService_Send+0x52>
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    f2b0:	4806      	ldr	r0, [pc, #24]	; (f2cc <getBrain_BleService_Send+0x68>)
    f2b2:	f010 fcbb 	bl	1fc2c <printk>
    }
}
    f2b6:	b00d      	add	sp, #52	; 0x34
    f2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2ba:	bf00      	nop
    f2bc:	000255b0 	.word	0x000255b0
    f2c0:	00025764 	.word	0x00025764
    f2c4:	0001fa39 	.word	0x0001fa39
    f2c8:	000256d8 	.word	0x000256d8
    f2cc:	000256fc 	.word	0x000256fc

0000f2d0 <getBrain_IsNotiSubscribed>:

Std_ReturnType getBrain_IsNotiSubscribed(struct bt_conn *conn)
{
    f2d0:	b508      	push	{r3, lr}
    const struct bt_gatt_attr *attr = &getBrain_BleService.attrs[2]; 

    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    f2d2:	2201      	movs	r2, #1
    f2d4:	4903      	ldr	r1, [pc, #12]	; (f2e4 <getBrain_IsNotiSubscribed+0x14>)
    f2d6:	f014 f853 	bl	23380 <bt_gatt_is_subscribed>
    f2da:	b108      	cbz	r0, f2e0 <getBrain_IsNotiSubscribed+0x10>
    {
        return E_OK;
    f2dc:	2000      	movs	r0, #0
    }
    else
    {
        return E_NOT_OK;
    }
    f2de:	bd08      	pop	{r3, pc}
        return E_NOT_OK;
    f2e0:	2001      	movs	r0, #1
    f2e2:	e7fc      	b.n	f2de <getBrain_IsNotiSubscribed+0xe>
    f2e4:	00025764 	.word	0x00025764

0000f2e8 <ADS1299_SendCmd>:

	return ADS1299_OK;
}

static ADS1299_ReturnType ADS1299_SendCmd(uint8_t board, uint8_t cmd)
{
    f2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2ea:	b085      	sub	sp, #20
	uint8_t u8TxData = 0;
	uint8_t u8RxData = 0;
    f2ec:	2300      	movs	r3, #0
    f2ee:	f88d 300e 	strb.w	r3, [sp, #14]

	/* Check input parameters */
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f2f2:	b9e8      	cbnz	r0, f330 <ADS1299_SendCmd+0x48>
    f2f4:	4604      	mov	r4, r0
	{
		return ADS1299_NOT_OK;
	}

	/* Prepare Data */
	u8TxData = cmd;
    f2f6:	f88d 100f 	strb.w	r1, [sp, #15]

	/* I/O transaction */
	ADS1299_pGlbCfg->pHw->IoCs_Write(board, ADS1299_IO_LOW);
    f2fa:	4d0e      	ldr	r5, [pc, #56]	; (f334 <ADS1299_SendCmd+0x4c>)
    f2fc:	682b      	ldr	r3, [r5, #0]
    f2fe:	681b      	ldr	r3, [r3, #0]
    f300:	689b      	ldr	r3, [r3, #8]
    f302:	2101      	movs	r1, #1
    f304:	4798      	blx	r3

	ADS1299_pGlbCfg->pHw->Spi_TransmitReceive(&u8TxData, 1, &u8RxData, 1, ADS1299_RESET);
    f306:	682b      	ldr	r3, [r5, #0]
    f308:	681b      	ldr	r3, [r3, #0]
    f30a:	681f      	ldr	r7, [r3, #0]
    f30c:	2600      	movs	r6, #0
    f30e:	9600      	str	r6, [sp, #0]
    f310:	2301      	movs	r3, #1
    f312:	f10d 020e 	add.w	r2, sp, #14
    f316:	4619      	mov	r1, r3
    f318:	f10d 000f 	add.w	r0, sp, #15
    f31c:	47b8      	blx	r7

	ADS1299_pGlbCfg->pHw->IoCs_Write(board, ADS1299_IO_HIGH);
    f31e:	682b      	ldr	r3, [r5, #0]
    f320:	681b      	ldr	r3, [r3, #0]
    f322:	689b      	ldr	r3, [r3, #8]
    f324:	4631      	mov	r1, r6
    f326:	4620      	mov	r0, r4
    f328:	4798      	blx	r3

	return ADS1299_OK;
    f32a:	4620      	mov	r0, r4
}
    f32c:	b005      	add	sp, #20
    f32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ADS1299_NOT_OK;
    f330:	2001      	movs	r0, #1
    f332:	e7fb      	b.n	f32c <ADS1299_SendCmd+0x44>
    f334:	2003625c 	.word	0x2003625c

0000f338 <ADS1299_ReadRegs>:
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f338:	2800      	cmp	r0, #0
    f33a:	d156      	bne.n	f3ea <ADS1299_ReadRegs+0xb2>
{
    f33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f340:	b091      	sub	sp, #68	; 0x44
    f342:	460f      	mov	r7, r1
    f344:	4615      	mov	r5, r2
    f346:	461c      	mov	r4, r3
    f348:	4606      	mov	r6, r0
    if(address > ADS1299_REG_CONFIG4) {
    f34a:	2917      	cmp	r1, #23
    f34c:	d84f      	bhi.n	f3ee <ADS1299_ReadRegs+0xb6>
    if (size == 0) {
    f34e:	b90b      	cbnz	r3, f354 <ADS1299_ReadRegs+0x1c>
        return ADS1299_NOT_OK;
    f350:	2001      	movs	r0, #1
    f352:	e04d      	b.n	f3f0 <ADS1299_ReadRegs+0xb8>
    memset(au8TxData, 0, 25);
    f354:	2219      	movs	r2, #25
    f356:	2100      	movs	r1, #0
    f358:	a809      	add	r0, sp, #36	; 0x24
    f35a:	f012 f908 	bl	2156e <memset>
    memset(au8RxData, 0, 25);
    f35e:	2219      	movs	r2, #25
    f360:	2100      	movs	r1, #0
    f362:	a802      	add	r0, sp, #8
    f364:	f012 f903 	bl	2156e <memset>
    au8TxData[0] = (ADS1299_READ_ACCESS | (address & 0x1F));
    f368:	f007 011f 	and.w	r1, r7, #31
    f36c:	f041 0120 	orr.w	r1, r1, #32
    f370:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    au8TxData[1] = (size & 0x1F);
    f374:	f004 031f 	and.w	r3, r4, #31
    f378:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    for(uint8_t u8Cnt = 0; u8Cnt < size; u8Cnt++)
    f37c:	4631      	mov	r1, r6
    f37e:	b28b      	uxth	r3, r1
    f380:	42a3      	cmp	r3, r4
    f382:	d208      	bcs.n	f396 <ADS1299_ReadRegs+0x5e>
    	au8TxData[2 + u8Cnt] = 0;
    f384:	1c8b      	adds	r3, r1, #2
    f386:	aa10      	add	r2, sp, #64	; 0x40
    f388:	4413      	add	r3, r2
    f38a:	2200      	movs	r2, #0
    f38c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for(uint8_t u8Cnt = 0; u8Cnt < size; u8Cnt++)
    f390:	3101      	adds	r1, #1
    f392:	b2c9      	uxtb	r1, r1
    f394:	e7f3      	b.n	f37e <ADS1299_ReadRegs+0x46>
    ADS1299_pGlbCfg->pHw->IoCs_Write(board, ADS1299_IO_LOW);
    f396:	4f18      	ldr	r7, [pc, #96]	; (f3f8 <ADS1299_ReadRegs+0xc0>)
    f398:	683b      	ldr	r3, [r7, #0]
    f39a:	681b      	ldr	r3, [r3, #0]
    f39c:	689b      	ldr	r3, [r3, #8]
    f39e:	2101      	movs	r1, #1
    f3a0:	4630      	mov	r0, r6
    f3a2:	4798      	blx	r3
    ADS1299_pGlbCfg->pHw->Spi_TransmitReceive(au8TxData, size+2, au8RxData, size+2, ADS1299_RESET);
    f3a4:	683b      	ldr	r3, [r7, #0]
    f3a6:	681b      	ldr	r3, [r3, #0]
    f3a8:	f8d3 9000 	ldr.w	r9, [r3]
    f3ac:	1ca1      	adds	r1, r4, #2
    f3ae:	b289      	uxth	r1, r1
    f3b0:	f04f 0800 	mov.w	r8, #0
    f3b4:	f8cd 8000 	str.w	r8, [sp]
    f3b8:	460b      	mov	r3, r1
    f3ba:	aa02      	add	r2, sp, #8
    f3bc:	a809      	add	r0, sp, #36	; 0x24
    f3be:	47c8      	blx	r9
    ADS1299_pGlbCfg->pHw->IoCs_Write(board, ADS1299_IO_HIGH);
    f3c0:	683b      	ldr	r3, [r7, #0]
    f3c2:	681b      	ldr	r3, [r3, #0]
    f3c4:	689b      	ldr	r3, [r3, #8]
    f3c6:	4641      	mov	r1, r8
    f3c8:	4630      	mov	r0, r6
    f3ca:	4798      	blx	r3
    for(uint8_t u8Cnt = 0; u8Cnt < size; u8Cnt++)
    f3cc:	4631      	mov	r1, r6
    f3ce:	e007      	b.n	f3e0 <ADS1299_ReadRegs+0xa8>
    	pData[u8Cnt] = au8RxData[2 + u8Cnt];
    f3d0:	1c8b      	adds	r3, r1, #2
    f3d2:	aa10      	add	r2, sp, #64	; 0x40
    f3d4:	4413      	add	r3, r2
    f3d6:	f813 3c38 	ldrb.w	r3, [r3, #-56]
    f3da:	546b      	strb	r3, [r5, r1]
    for(uint8_t u8Cnt = 0; u8Cnt < size; u8Cnt++)
    f3dc:	3101      	adds	r1, #1
    f3de:	b2c9      	uxtb	r1, r1
    f3e0:	b28b      	uxth	r3, r1
    f3e2:	42a3      	cmp	r3, r4
    f3e4:	d3f4      	bcc.n	f3d0 <ADS1299_ReadRegs+0x98>
	return ADS1299_OK;
    f3e6:	4630      	mov	r0, r6
    f3e8:	e002      	b.n	f3f0 <ADS1299_ReadRegs+0xb8>
		return ADS1299_NOT_OK;
    f3ea:	2001      	movs	r0, #1
}
    f3ec:	4770      	bx	lr
        return ADS1299_NOT_OK;
    f3ee:	2001      	movs	r0, #1
}
    f3f0:	b011      	add	sp, #68	; 0x44
    f3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f3f6:	bf00      	nop
    f3f8:	2003625c 	.word	0x2003625c

0000f3fc <ADS1299_WriteRegs>:
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f3fc:	2800      	cmp	r0, #0
    f3fe:	d145      	bne.n	f48c <ADS1299_WriteRegs+0x90>
{
    f400:	b5f0      	push	{r4, r5, r6, r7, lr}
    f402:	b091      	sub	sp, #68	; 0x44
    f404:	460c      	mov	r4, r1
    f406:	4617      	mov	r7, r2
    f408:	461d      	mov	r5, r3
    f40a:	4606      	mov	r6, r0
    if(ADS1299_REG_CONFIG4 < address) 
    f40c:	2917      	cmp	r1, #23
    f40e:	d83f      	bhi.n	f490 <ADS1299_WriteRegs+0x94>
    if (0 == size) 
    f410:	b90b      	cbnz	r3, f416 <ADS1299_WriteRegs+0x1a>
        return ADS1299_NOT_OK;
    f412:	2001      	movs	r0, #1
    f414:	e03d      	b.n	f492 <ADS1299_WriteRegs+0x96>
    memset(au8TxData, 0, 25);
    f416:	2219      	movs	r2, #25
    f418:	2100      	movs	r1, #0
    f41a:	a809      	add	r0, sp, #36	; 0x24
    f41c:	f012 f8a7 	bl	2156e <memset>
    memset(au8RxData, 0, 25);
    f420:	2219      	movs	r2, #25
    f422:	2100      	movs	r1, #0
    f424:	a802      	add	r0, sp, #8
    f426:	f012 f8a2 	bl	2156e <memset>
    au8TxData[0] = (ADS1299_WRITE_ACCESS | (address & 0x1F));
    f42a:	f004 011f 	and.w	r1, r4, #31
    f42e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    f432:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    au8TxData[1] = (size & 0x1F);
    f436:	f005 031f 	and.w	r3, r5, #31
    f43a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    for(uint8_t u8Cnt = 0; u8Cnt < size; u8Cnt++)
    f43e:	4631      	mov	r1, r6
    f440:	b28b      	uxth	r3, r1
    f442:	42ab      	cmp	r3, r5
    f444:	d208      	bcs.n	f458 <ADS1299_WriteRegs+0x5c>
    	au8TxData[2 + u8Cnt] = pData[u8Cnt];
    f446:	1c8c      	adds	r4, r1, #2
    f448:	5c7b      	ldrb	r3, [r7, r1]
    f44a:	aa10      	add	r2, sp, #64	; 0x40
    f44c:	4414      	add	r4, r2
    f44e:	f804 3c1c 	strb.w	r3, [r4, #-28]
    for(uint8_t u8Cnt = 0; u8Cnt < size; u8Cnt++)
    f452:	3101      	adds	r1, #1
    f454:	b2c9      	uxtb	r1, r1
    f456:	e7f3      	b.n	f440 <ADS1299_WriteRegs+0x44>
    ADS1299_pGlbCfg->pHw->IoCs_Write(board, ADS1299_IO_LOW);
    f458:	4c0f      	ldr	r4, [pc, #60]	; (f498 <ADS1299_WriteRegs+0x9c>)
    f45a:	6823      	ldr	r3, [r4, #0]
    f45c:	681b      	ldr	r3, [r3, #0]
    f45e:	689b      	ldr	r3, [r3, #8]
    f460:	2101      	movs	r1, #1
    f462:	4630      	mov	r0, r6
    f464:	4798      	blx	r3
    ADS1299_pGlbCfg->pHw->Spi_TransmitReceive(&au8TxData[0], size+2, &au8RxData[0], size+2, ADS1299_RESET);
    f466:	6823      	ldr	r3, [r4, #0]
    f468:	681b      	ldr	r3, [r3, #0]
    f46a:	681f      	ldr	r7, [r3, #0]
    f46c:	1ca9      	adds	r1, r5, #2
    f46e:	b289      	uxth	r1, r1
    f470:	2500      	movs	r5, #0
    f472:	9500      	str	r5, [sp, #0]
    f474:	460b      	mov	r3, r1
    f476:	aa02      	add	r2, sp, #8
    f478:	a809      	add	r0, sp, #36	; 0x24
    f47a:	47b8      	blx	r7
    ADS1299_pGlbCfg->pHw->IoCs_Write(board, ADS1299_IO_HIGH);
    f47c:	6823      	ldr	r3, [r4, #0]
    f47e:	681b      	ldr	r3, [r3, #0]
    f480:	689b      	ldr	r3, [r3, #8]
    f482:	4629      	mov	r1, r5
    f484:	4630      	mov	r0, r6
    f486:	4798      	blx	r3
	return ADS1299_OK;
    f488:	4630      	mov	r0, r6
    f48a:	e002      	b.n	f492 <ADS1299_WriteRegs+0x96>
		return ADS1299_NOT_OK;
    f48c:	2001      	movs	r0, #1
}
    f48e:	4770      	bx	lr
        return ADS1299_NOT_OK;
    f490:	2001      	movs	r0, #1
}
    f492:	b011      	add	sp, #68	; 0x44
    f494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f496:	bf00      	nop
    f498:	2003625c 	.word	0x2003625c

0000f49c <ADS1299_CmdRESET>:

/* === Driver Function Implementation === */
void ADS1299_CmdRESET(void)
{
    f49c:	b510      	push	{r4, lr}
#ifdef ADS1299_USING_HW_RESET
	ADS1299_pGlbCfg->pHw->IoReset_Write(ADS1299_IO_LOW);
    f49e:	4c0b      	ldr	r4, [pc, #44]	; (f4cc <ADS1299_CmdRESET+0x30>)
    f4a0:	6823      	ldr	r3, [r4, #0]
    f4a2:	681b      	ldr	r3, [r3, #0]
    f4a4:	691b      	ldr	r3, [r3, #16]
    f4a6:	2001      	movs	r0, #1
    f4a8:	4798      	blx	r3
	ADS1299_pGlbCfg->pHw->Delay_Ms(1);
    f4aa:	6823      	ldr	r3, [r4, #0]
    f4ac:	681b      	ldr	r3, [r3, #0]
    f4ae:	69db      	ldr	r3, [r3, #28]
    f4b0:	2001      	movs	r0, #1
    f4b2:	4798      	blx	r3
	ADS1299_pGlbCfg->pHw->IoReset_Write(ADS1299_IO_HIGH);
    f4b4:	6823      	ldr	r3, [r4, #0]
    f4b6:	681b      	ldr	r3, [r3, #0]
    f4b8:	691b      	ldr	r3, [r3, #16]
    f4ba:	2000      	movs	r0, #0
    f4bc:	4798      	blx	r3
	{
		ADS1299_SendCmd(u8BoardCnt, ADS1299_CMD_RESET);
	}
#endif

	ADS1299_pGlbCfg->pHw->Delay_Ms(1); // Recommended to wait at least 18 Tclk before using device (~8uS);
    f4be:	6823      	ldr	r3, [r4, #0]
    f4c0:	681b      	ldr	r3, [r3, #0]
    f4c2:	69db      	ldr	r3, [r3, #28]
    f4c4:	2001      	movs	r0, #1
    f4c6:	4798      	blx	r3
}
    f4c8:	bd10      	pop	{r4, pc}
    f4ca:	bf00      	nop
    f4cc:	2003625c 	.word	0x2003625c

0000f4d0 <ADS1299_CmdSTART>:

void ADS1299_CmdSTART(void)
{
    f4d0:	b508      	push	{r3, lr}
#ifdef ADS1299_USING_HW_START_STOP
	ADS1299_pGlbCfg->pHw->IoStart_Write(ADS1299_IO_HIGH);
    f4d2:	4b03      	ldr	r3, [pc, #12]	; (f4e0 <ADS1299_CmdSTART+0x10>)
    f4d4:	681b      	ldr	r3, [r3, #0]
    f4d6:	681b      	ldr	r3, [r3, #0]
    f4d8:	68db      	ldr	r3, [r3, #12]
    f4da:	2000      	movs	r0, #0
    f4dc:	4798      	blx	r3
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
	{
		ADS1299_SendCmd(u8BoardCnt, ADS1299_CMD_START);
	}
#endif
}
    f4de:	bd08      	pop	{r3, pc}
    f4e0:	2003625c 	.word	0x2003625c

0000f4e4 <ADS1299_CmdSDATAC>:
	}
	ADS1299_pGlbCfg->pHw->Delay_Ms(1);
}

void ADS1299_CmdSDATAC(void)
{
    f4e4:	b510      	push	{r4, lr}
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f4e6:	2400      	movs	r4, #0
    f4e8:	b134      	cbz	r4, f4f8 <ADS1299_CmdSDATAC+0x14>
	{
		ADS1299_SendCmd(u8BoardCnt, ADS1299_CMD_SDATAC);
	}
	ADS1299_pGlbCfg->pHw->Delay_Ms(1);
    f4ea:	4b07      	ldr	r3, [pc, #28]	; (f508 <ADS1299_CmdSDATAC+0x24>)
    f4ec:	681b      	ldr	r3, [r3, #0]
    f4ee:	681b      	ldr	r3, [r3, #0]
    f4f0:	69db      	ldr	r3, [r3, #28]
    f4f2:	2001      	movs	r0, #1
    f4f4:	4798      	blx	r3
}
    f4f6:	bd10      	pop	{r4, pc}
		ADS1299_SendCmd(u8BoardCnt, ADS1299_CMD_SDATAC);
    f4f8:	2111      	movs	r1, #17
    f4fa:	4620      	mov	r0, r4
    f4fc:	f7ff fef4 	bl	f2e8 <ADS1299_SendCmd>
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f500:	3401      	adds	r4, #1
    f502:	b2e4      	uxtb	r4, r4
    f504:	e7f0      	b.n	f4e8 <ADS1299_CmdSDATAC+0x4>
    f506:	bf00      	nop
    f508:	2003625c 	.word	0x2003625c

0000f50c <ADS1299_CmdRDATAC>:

void ADS1299_CmdRDATAC(void)
{
    f50c:	b510      	push	{r4, lr}
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f50e:	2400      	movs	r4, #0
    f510:	b134      	cbz	r4, f520 <ADS1299_CmdRDATAC+0x14>
	{
		ADS1299_SendCmd(u8BoardCnt, ADS1299_CMD_RDATAC);
	}
	ADS1299_pGlbCfg->pHw->Delay_Ms(1);
    f512:	4b07      	ldr	r3, [pc, #28]	; (f530 <ADS1299_CmdRDATAC+0x24>)
    f514:	681b      	ldr	r3, [r3, #0]
    f516:	681b      	ldr	r3, [r3, #0]
    f518:	69db      	ldr	r3, [r3, #28]
    f51a:	2001      	movs	r0, #1
    f51c:	4798      	blx	r3
}
    f51e:	bd10      	pop	{r4, pc}
		ADS1299_SendCmd(u8BoardCnt, ADS1299_CMD_RDATAC);
    f520:	2110      	movs	r1, #16
    f522:	4620      	mov	r0, r4
    f524:	f7ff fee0 	bl	f2e8 <ADS1299_SendCmd>
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f528:	3401      	adds	r4, #1
    f52a:	b2e4      	uxtb	r4, r4
    f52c:	e7f0      	b.n	f510 <ADS1299_CmdRDATAC+0x4>
    f52e:	bf00      	nop
    f530:	2003625c 	.word	0x2003625c

0000f534 <ADS1299_ConfigGlobalChannelReg1>:
                                                   ADS1299_SetStateType ndaisy_en, \
												   ADS1299_SetStateType clk_en, \
												   uint8_t data_rate)
{
	/* Check Parameters */
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f534:	b108      	cbz	r0, f53a <ADS1299_ConfigGlobalChannelReg1+0x6>
	{
		return ADS1299_NOT_OK;
    f536:	2001      	movs	r0, #1

	/* Config CONFIG1 */
	ADS1299_WriteRegs(board, ADS1299_REG_CONFIG1, &ADS1299_pGlbCfg->RegTable[board].GlbChnRegs.CONFIG1.value, 1);

	return ADS1299_OK;
}
    f538:	4770      	bx	lr
{
    f53a:	b570      	push	{r4, r5, r6, lr}
    f53c:	460e      	mov	r6, r1
    f53e:	4604      	mov	r4, r0
	ADS1299_pGlbCfg->RegTable[board].GlbChnRegs.CONFIG1.opt.clk_en = clk_en;
    f540:	490b      	ldr	r1, [pc, #44]	; (f570 <ADS1299_ConfigGlobalChannelReg1+0x3c>)
    f542:	6808      	ldr	r0, [r1, #0]
    f544:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    f548:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
    f54c:	7969      	ldrb	r1, [r5, #5]
    f54e:	f362 1145 	bfi	r1, r2, #5, #1
	ADS1299_pGlbCfg->RegTable[board].GlbChnRegs.CONFIG1.opt.ndaisy_en = ndaisy_en;
    f552:	f366 1186 	bfi	r1, r6, #6, #1
	ADS1299_pGlbCfg->RegTable[board].GlbChnRegs.CONFIG1.opt.dr = data_rate;
    f556:	f363 0102 	bfi	r1, r3, #0, #3
    f55a:	7169      	strb	r1, [r5, #5]
	ADS1299_WriteRegs(board, ADS1299_REG_CONFIG1, &ADS1299_pGlbCfg->RegTable[board].GlbChnRegs.CONFIG1.value, 1);
    f55c:	462a      	mov	r2, r5
    f55e:	2301      	movs	r3, #1
    f560:	3205      	adds	r2, #5
    f562:	4619      	mov	r1, r3
    f564:	4620      	mov	r0, r4
    f566:	f7ff ff49 	bl	f3fc <ADS1299_WriteRegs>
	return ADS1299_OK;
    f56a:	4620      	mov	r0, r4
}
    f56c:	bd70      	pop	{r4, r5, r6, pc}
    f56e:	bf00      	nop
    f570:	2003625c 	.word	0x2003625c

0000f574 <ADS1299_ConfigAllChannelSettings>:

	return ADS1299_OK;
}

ADS1299_ReturnType ADS1299_ConfigAllChannelSettings(uint8_t board, ADS1299_SetStateType pwdn, uint8_t gain, uint8_t input_type, ADS1299_SetStateType srb2)
{
    f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f576:	f89d c018 	ldrb.w	ip, [sp, #24]
	/* Check Parameters */
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f57a:	bb50      	cbnz	r0, f5d2 <ADS1299_ConfigAllChannelSettings+0x5e>
    f57c:	4607      	mov	r7, r0
	{
		return ADS1299_NOT_OK;
	}

	/* Setup Data */
	for(uint8_t u8Cnt = 0; u8Cnt < ADS1299_NUMBER_OF_CHANNEL; u8Cnt++)
    f57e:	4605      	mov	r5, r0
    f580:	e017      	b.n	f5b2 <ADS1299_ConfigAllChannelSettings+0x3e>
	{
		ADS1299_pGlbCfg->RegTable[board].ChnCtrlRegs.CHSET[u8Cnt].opt.pd = pwdn;
    f582:	4815      	ldr	r0, [pc, #84]	; (f5d8 <ADS1299_ConfigAllChannelSettings+0x64>)
    f584:	6806      	ldr	r6, [r0, #0]
    f586:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    f58a:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    f58e:	4428      	add	r0, r5
    f590:	7a44      	ldrb	r4, [r0, #9]
    f592:	f361 14c7 	bfi	r4, r1, #7, #1
	    ADS1299_pGlbCfg->RegTable[board].ChnCtrlRegs.CHSET[u8Cnt].opt.gain = gain;
    f596:	f362 1406 	bfi	r4, r2, #4, #3
	    ADS1299_pGlbCfg->RegTable[board].ChnCtrlRegs.CHSET[u8Cnt].opt.srb2 = srb2;
    f59a:	f36c 04c3 	bfi	r4, ip, #3, #1
	    ADS1299_pGlbCfg->RegTable[board].ChnCtrlRegs.CHSET[u8Cnt].opt.mux = input_type;
    f59e:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    f5a2:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
    f5a6:	442e      	add	r6, r5
    f5a8:	f363 0402 	bfi	r4, r3, #0, #3
    f5ac:	7274      	strb	r4, [r6, #9]
	for(uint8_t u8Cnt = 0; u8Cnt < ADS1299_NUMBER_OF_CHANNEL; u8Cnt++)
    f5ae:	3501      	adds	r5, #1
    f5b0:	b2ed      	uxtb	r5, r5
    f5b2:	2d07      	cmp	r5, #7
    f5b4:	d9e5      	bls.n	f582 <ADS1299_ConfigAllChannelSettings+0xe>
	}
	/* Config Channel Control Settings */
	ADS1299_WriteRegs(board, ADS1299_REG_CH1SET, &(ADS1299_pGlbCfg->RegTable[board].ChnCtrlRegs.CHSET[0].value), ADS1299_NUMBER_OF_CHANNEL);
    f5b6:	4b08      	ldr	r3, [pc, #32]	; (f5d8 <ADS1299_ConfigAllChannelSettings+0x64>)
    f5b8:	681a      	ldr	r2, [r3, #0]
    f5ba:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    f5be:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f5c2:	2308      	movs	r3, #8
    f5c4:	3209      	adds	r2, #9
    f5c6:	2105      	movs	r1, #5
    f5c8:	4638      	mov	r0, r7
    f5ca:	f7ff ff17 	bl	f3fc <ADS1299_WriteRegs>

	return ADS1299_OK;
    f5ce:	4638      	mov	r0, r7
}
    f5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ADS1299_NOT_OK;
    f5d2:	2001      	movs	r0, #1
    f5d4:	e7fc      	b.n	f5d0 <ADS1299_ConfigAllChannelSettings+0x5c>
    f5d6:	bf00      	nop
    f5d8:	2003625c 	.word	0x2003625c

0000f5dc <ADS1299_GetAllRegsValue>:


ADS1299_ReturnType ADS1299_GetAllRegsValue(uint8_t board)
{
	/* Check Parameters */
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f5dc:	b108      	cbz	r0, f5e2 <ADS1299_GetAllRegsValue+0x6>
	{
		return ADS1299_NOT_OK;
    f5de:	2001      	movs	r0, #1
	}

	ADS1299_ReadRegs(board, ADS1299_REG_ID, (uint8_t *)&(ADS1299_pGlbCfg->RegTable[board]), ADS1299_NUMBER_OF_REGS);

	return ADS1299_OK;
}
    f5e0:	4770      	bx	lr
{
    f5e2:	b510      	push	{r4, lr}
    f5e4:	4604      	mov	r4, r0
	ADS1299_ReadRegs(board, ADS1299_REG_ID, (uint8_t *)&(ADS1299_pGlbCfg->RegTable[board]), ADS1299_NUMBER_OF_REGS);
    f5e6:	4b06      	ldr	r3, [pc, #24]	; (f600 <ADS1299_GetAllRegsValue+0x24>)
    f5e8:	681a      	ldr	r2, [r3, #0]
    f5ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    f5ee:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f5f2:	2318      	movs	r3, #24
    f5f4:	3204      	adds	r2, #4
    f5f6:	2100      	movs	r1, #0
    f5f8:	f7ff fe9e 	bl	f338 <ADS1299_ReadRegs>
	return ADS1299_OK;
    f5fc:	4620      	mov	r0, r4
}
    f5fe:	bd10      	pop	{r4, pc}
    f600:	2003625c 	.word	0x2003625c

0000f604 <ADS1299_SetSrb1>:

ADS1299_ReturnType ADS1299_SetSrb1(uint8_t board, ADS1299_SetStateType srb1)
{
	/* Check Parameters */
	if(ADS1299_NUMBER_OF_USED_BOARD <= board)
    f604:	b108      	cbz	r0, f60a <ADS1299_SetSrb1+0x6>
	{
		return ADS1299_NOT_OK;
    f606:	2001      	movs	r0, #1
	ADS1299_pGlbCfg->RegTable[board].GpioMiscRegs.MISC1.opt.srb1 = srb1;

	ADS1299_WriteRegs(board, ADS1299_REG_MISC1, &ADS1299_pGlbCfg->RegTable[board].GpioMiscRegs.MISC1.value, 1);

	return ADS1299_OK;
}
    f608:	4770      	bx	lr
{
    f60a:	b510      	push	{r4, lr}
    f60c:	4604      	mov	r4, r0
	ADS1299_pGlbCfg->RegTable[board].GpioMiscRegs.MISC1.opt.srb1 = srb1;
    f60e:	4b0b      	ldr	r3, [pc, #44]	; (f63c <ADS1299_SetSrb1+0x38>)
    f610:	681b      	ldr	r3, [r3, #0]
    f612:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f616:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f61a:	7e50      	ldrb	r0, [r2, #25]
    f61c:	f361 1045 	bfi	r0, r1, #5, #1
    f620:	7650      	strb	r0, [r2, #25]
	ADS1299_WriteRegs(board, ADS1299_REG_MISC1, &ADS1299_pGlbCfg->RegTable[board].GpioMiscRegs.MISC1.value, 1);
    f622:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    f626:	00d2      	lsls	r2, r2, #3
    f628:	3210      	adds	r2, #16
    f62a:	441a      	add	r2, r3
    f62c:	2301      	movs	r3, #1
    f62e:	3209      	adds	r2, #9
    f630:	2115      	movs	r1, #21
    f632:	4620      	mov	r0, r4
    f634:	f7ff fee2 	bl	f3fc <ADS1299_WriteRegs>
	return ADS1299_OK;
    f638:	4620      	mov	r0, r4
}
    f63a:	bd10      	pop	{r4, pc}
    f63c:	2003625c 	.word	0x2003625c

0000f640 <ADS1299_Init>:

	return ADS1299_OK;
}

ADS1299_ReturnType ADS1299_Init(void)
{
    f640:	b510      	push	{r4, lr}
	/* Assign Global Config Pointer */
	ADS1299_pGlbCfg = &ADS1299_GlbCfg;
    f642:	4c30      	ldr	r4, [pc, #192]	; (f704 <ADS1299_Init+0xc4>)
    f644:	4b30      	ldr	r3, [pc, #192]	; (f708 <ADS1299_Init+0xc8>)
    f646:	6023      	str	r3, [r4, #0]
	ADS1299_pGlbCfg->pHw = &ADS1299_Hw; //Assign Hw Attributes
    f648:	4a30      	ldr	r2, [pc, #192]	; (f70c <ADS1299_Init+0xcc>)
    f64a:	601a      	str	r2, [r3, #0]

	ADS1299_CmdRESET(); //Reset HW
    f64c:	f7ff ff26 	bl	f49c <ADS1299_CmdRESET>
	ADS1299_CmdSDATAC(); //Stop DataContinuousMode
    f650:	f7ff ff48 	bl	f4e4 <ADS1299_CmdSDATAC>

	/* Start Initialization */
	ADS1299_pGlbCfg->pHw->IoPwdn_Write(ADS1299_IO_HIGH);
    f654:	6823      	ldr	r3, [r4, #0]
    f656:	681b      	ldr	r3, [r3, #0]
    f658:	695b      	ldr	r3, [r3, #20]
    f65a:	2000      	movs	r0, #0
    f65c:	4798      	blx	r3
	ADS1299_pGlbCfg->pHw->IoReset_Write(ADS1299_IO_HIGH);
    f65e:	6823      	ldr	r3, [r4, #0]
    f660:	681b      	ldr	r3, [r3, #0]
    f662:	691b      	ldr	r3, [r3, #16]
    f664:	2000      	movs	r0, #0
    f666:	4798      	blx	r3
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f668:	2400      	movs	r4, #0
    f66a:	b1e4      	cbz	r4, f6a6 <ADS1299_Init+0x66>
	{
		ADS1299_pGlbCfg->pHw->IoCs_Write(u8BoardCnt, ADS1299_IO_HIGH);
	}

	ADS1299_pGlbCfg->pHw->Delay_Ms(1000);
    f66c:	4c25      	ldr	r4, [pc, #148]	; (f704 <ADS1299_Init+0xc4>)
    f66e:	6823      	ldr	r3, [r4, #0]
    f670:	681b      	ldr	r3, [r3, #0]
    f672:	69db      	ldr	r3, [r3, #28]
    f674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f678:	4798      	blx	r3

	ADS1299_CmdRESET(); //Reset HW
    f67a:	f7ff ff0f 	bl	f49c <ADS1299_CmdRESET>
	ADS1299_pGlbCfg->pHw->Delay_Ms(1000);
    f67e:	6823      	ldr	r3, [r4, #0]
    f680:	681b      	ldr	r3, [r3, #0]
    f682:	69db      	ldr	r3, [r3, #28]
    f684:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f688:	4798      	blx	r3

	ADS1299_CmdSDATAC(); //Stop DataContinuousMode
    f68a:	f7ff ff2b 	bl	f4e4 <ADS1299_CmdSDATAC>
	ADS1299_pGlbCfg->pHw->Delay_Ms(1000);
    f68e:	6823      	ldr	r3, [r4, #0]
    f690:	681b      	ldr	r3, [r3, #0]
    f692:	69db      	ldr	r3, [r3, #28]
    f694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f698:	4798      	blx	r3

	/* Config CONFIG2 & CONFIG3 */
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f69a:	2400      	movs	r4, #0
    f69c:	b16c      	cbz	r4, f6ba <ADS1299_Init+0x7a>
		ADS1299_pGlbCfg->RegTable[u8BoardCnt].GlbChnRegs.CONFIG3.value = 0xE0;
		ADS1299_WriteRegs(u8BoardCnt, ADS1299_REG_CONFIG2, &ADS1299_pGlbCfg->RegTable[u8BoardCnt].GlbChnRegs.CONFIG2.value, 2);
	}

	/* Check Device Information */
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f69e:	2400      	movs	r4, #0
    f6a0:	b314      	cbz	r4, f6e8 <ADS1299_Init+0xa8>
		/* Update All Register Data */
	    ADS1299_GetAllRegsValue(u8BoardCnt);
	}

	// ADS1299_DEBUG_PRINT("[ADS1299_MSG] Complete Init\r\n");
	return ADS1299_OK;
    f6a2:	2000      	movs	r0, #0
}
    f6a4:	bd10      	pop	{r4, pc}
		ADS1299_pGlbCfg->pHw->IoCs_Write(u8BoardCnt, ADS1299_IO_HIGH);
    f6a6:	4b17      	ldr	r3, [pc, #92]	; (f704 <ADS1299_Init+0xc4>)
    f6a8:	681b      	ldr	r3, [r3, #0]
    f6aa:	681b      	ldr	r3, [r3, #0]
    f6ac:	689b      	ldr	r3, [r3, #8]
    f6ae:	2100      	movs	r1, #0
    f6b0:	4620      	mov	r0, r4
    f6b2:	4798      	blx	r3
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f6b4:	3401      	adds	r4, #1
    f6b6:	b2e4      	uxtb	r4, r4
    f6b8:	e7d7      	b.n	f66a <ADS1299_Init+0x2a>
		ADS1299_pGlbCfg->RegTable[u8BoardCnt].GlbChnRegs.CONFIG2.value = 0xD0;
    f6ba:	4b12      	ldr	r3, [pc, #72]	; (f704 <ADS1299_Init+0xc4>)
    f6bc:	681a      	ldr	r2, [r3, #0]
    f6be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    f6c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    f6c6:	21d0      	movs	r1, #208	; 0xd0
    f6c8:	7199      	strb	r1, [r3, #6]
		ADS1299_pGlbCfg->RegTable[u8BoardCnt].GlbChnRegs.CONFIG3.value = 0xE0;
    f6ca:	21e0      	movs	r1, #224	; 0xe0
    f6cc:	71d9      	strb	r1, [r3, #7]
		ADS1299_WriteRegs(u8BoardCnt, ADS1299_REG_CONFIG2, &ADS1299_pGlbCfg->RegTable[u8BoardCnt].GlbChnRegs.CONFIG2.value, 2);
    f6ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    f6d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f6d6:	2302      	movs	r3, #2
    f6d8:	3206      	adds	r2, #6
    f6da:	4619      	mov	r1, r3
    f6dc:	4620      	mov	r0, r4
    f6de:	f7ff fe8d 	bl	f3fc <ADS1299_WriteRegs>
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f6e2:	3401      	adds	r4, #1
    f6e4:	b2e4      	uxtb	r4, r4
    f6e6:	e7d9      	b.n	f69c <ADS1299_Init+0x5c>
		if(ADS1299_DEFAULT_ID != ADS1299_GetID(u8BoardCnt))
    f6e8:	4620      	mov	r0, r4
    f6ea:	f010 f9a9 	bl	1fa40 <ADS1299_GetID>
    f6ee:	283e      	cmp	r0, #62	; 0x3e
    f6f0:	d105      	bne.n	f6fe <ADS1299_Init+0xbe>
	    ADS1299_GetAllRegsValue(u8BoardCnt);
    f6f2:	4620      	mov	r0, r4
    f6f4:	f7ff ff72 	bl	f5dc <ADS1299_GetAllRegsValue>
	for(uint8_t u8BoardCnt = 0; u8BoardCnt < ADS1299_NUMBER_OF_USED_BOARD; u8BoardCnt++)
    f6f8:	3401      	adds	r4, #1
    f6fa:	b2e4      	uxtb	r4, r4
    f6fc:	e7d0      	b.n	f6a0 <ADS1299_Init+0x60>
			return ADS1299_NOT_OK;
    f6fe:	2001      	movs	r0, #1
    f700:	e7d0      	b.n	f6a4 <ADS1299_Init+0x64>
    f702:	bf00      	nop
    f704:	2003625c 	.word	0x2003625c
    f708:	20036240 	.word	0x20036240
    f70c:	20000458 	.word	0x20000458

0000f710 <ADS1299_Platform_IoPwdn_Write>:
	}
}

static void ADS1299_Platform_IoPwdn_Write(uint8_t level)
{
    if(level == ADS1299_IO_LOW)
    f710:	2801      	cmp	r0, #1
    f712:	d005      	beq.n	f720 <ADS1299_Platform_IoPwdn_Write+0x10>
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    f714:	4b05      	ldr	r3, [pc, #20]	; (f72c <ADS1299_Platform_IoPwdn_Write+0x1c>)
    f716:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    f71a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	}
	else
	{
		nrf_gpio_pin_write(ADS1299O_PWDN, 1);
	}
}
    f71e:	4770      	bx	lr
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    f720:	4b02      	ldr	r3, [pc, #8]	; (f72c <ADS1299_Platform_IoPwdn_Write+0x1c>)
    f722:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    f726:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    f72a:	4770      	bx	lr
    f72c:	50000300 	.word	0x50000300

0000f730 <ADS1299_Platform_Spi_TxRxDMA>:
{
    f730:	b500      	push	{lr}
    f732:	b085      	sub	sp, #20
	nrfx_spim_xfer_desc_t spim_buffer = {
    f734:	9000      	str	r0, [sp, #0]
    f736:	9101      	str	r1, [sp, #4]
    f738:	9202      	str	r2, [sp, #8]
    f73a:	9303      	str	r3, [sp, #12]
	err =  nrfx_spim_xfer(&spim_dev, &spim_buffer, 0); 
    f73c:	2200      	movs	r2, #0
    f73e:	4669      	mov	r1, sp
    f740:	4802      	ldr	r0, [pc, #8]	; (f74c <ADS1299_Platform_Spi_TxRxDMA+0x1c>)
    f742:	f00b fc83 	bl	1b04c <nrfx_spim_xfer>
}
    f746:	b005      	add	sp, #20
    f748:	f85d fb04 	ldr.w	pc, [sp], #4
    f74c:	000257d0 	.word	0x000257d0

0000f750 <ADS1299_Platform_Spi_TxRx>:
{
    f750:	b500      	push	{lr}
    f752:	b085      	sub	sp, #20
	nrfx_spi_xfer_desc_t spi_buffer = {
    f754:	9000      	str	r0, [sp, #0]
    f756:	9101      	str	r1, [sp, #4]
    f758:	9202      	str	r2, [sp, #8]
    f75a:	9303      	str	r3, [sp, #12]
	err =  nrfx_spi_xfer(&spi_dev, &spi_buffer, 0); 
    f75c:	2200      	movs	r2, #0
    f75e:	4669      	mov	r1, sp
    f760:	4802      	ldr	r0, [pc, #8]	; (f76c <ADS1299_Platform_Spi_TxRx+0x1c>)
    f762:	f00b fa13 	bl	1ab8c <nrfx_spi_xfer>
}
    f766:	b005      	add	sp, #20
    f768:	f85d fb04 	ldr.w	pc, [sp], #4
    f76c:	000257b8 	.word	0x000257b8

0000f770 <ADS1299_Platform_SpiEventCb>:
{
    k_msleep(ms);
}

static void ADS1299_Platform_SpiEventCb(nrfx_spi_evt_t const * p_event,void * p_context)
{
    f770:	b508      	push	{r3, lr}
	Std_ReturnType ret = E_OK;
	ARG_UNUSED(p_context);

	switch (p_event->type) {
    f772:	7803      	ldrb	r3, [r0, #0]
    f774:	b103      	cbz	r3, f778 <ADS1299_Platform_SpiEventCb+0x8>
		}
		default:
            // No implementation needed.
		    break;
    }
}
    f776:	bd08      	pop	{r3, pc}
		    ret = CircularBuffer_Push(&ADS1299_Platform_EegCirBuf, &ADS1299_EEGRawDataBuffer[0][3], 24);
    f778:	2218      	movs	r2, #24
    f77a:	4902      	ldr	r1, [pc, #8]	; (f784 <ADS1299_Platform_SpiEventCb+0x14>)
    f77c:	4802      	ldr	r0, [pc, #8]	; (f788 <ADS1299_Platform_SpiEventCb+0x18>)
    f77e:	f010 f9ab 	bl	1fad8 <CircularBuffer_Push>
}
    f782:	e7f8      	b.n	f776 <ADS1299_Platform_SpiEventCb+0x6>
    f784:	20036227 	.word	0x20036227
    f788:	20000478 	.word	0x20000478

0000f78c <ADS1299_Platform_SpimEventCb>:

static void ADS1299_Platform_SpimEventCb(nrfx_spim_evt_t const * p_event,void * p_context)
{
    f78c:	b508      	push	{r3, lr}
	Std_ReturnType ret = E_OK;
	ARG_UNUSED(p_context);

	switch (p_event->type) {
    f78e:	7803      	ldrb	r3, [r0, #0]
    f790:	b103      	cbz	r3, f794 <ADS1299_Platform_SpimEventCb+0x8>
		}
		default:
            // No implementation needed.
		    break;
    }
}
    f792:	bd08      	pop	{r3, pc}
		    ret = CircularBuffer_Push(&ADS1299_Platform_EegCirBuf, &ADS1299_EEGRawDataBuffer[0][3], 24);
    f794:	2218      	movs	r2, #24
    f796:	4902      	ldr	r1, [pc, #8]	; (f7a0 <ADS1299_Platform_SpimEventCb+0x14>)
    f798:	4802      	ldr	r0, [pc, #8]	; (f7a4 <ADS1299_Platform_SpimEventCb+0x18>)
    f79a:	f010 f99d 	bl	1fad8 <CircularBuffer_Push>
}
    f79e:	e7f8      	b.n	f792 <ADS1299_Platform_SpimEventCb+0x6>
    f7a0:	20036227 	.word	0x20036227
    f7a4:	20000478 	.word	0x20000478

0000f7a8 <ADS1299_Platform_SpiDeInit>:
		return;
	}
}

static void ADS1299_Platform_SpiDeInit(void)
{
    f7a8:	b508      	push	{r3, lr}
	nrfx_spi_uninit(&spi_dev);
    f7aa:	4802      	ldr	r0, [pc, #8]	; (f7b4 <ADS1299_Platform_SpiDeInit+0xc>)
    f7ac:	f00b f982 	bl	1aab4 <nrfx_spi_uninit>
}
    f7b0:	bd08      	pop	{r3, pc}
    f7b2:	bf00      	nop
    f7b4:	000257b8 	.word	0x000257b8

0000f7b8 <ADS1299_Platform_SpimDeInit>:
		return;
	}
}

static void ADS1299_Platform_SpimDeInit(void)
{
    f7b8:	b508      	push	{r3, lr}
	nrfx_spim_uninit(&spim_dev);
    f7ba:	4802      	ldr	r0, [pc, #8]	; (f7c4 <ADS1299_Platform_SpimDeInit+0xc>)
    f7bc:	f00b fbfa 	bl	1afb4 <nrfx_spim_uninit>
}
    f7c0:	bd08      	pop	{r3, pc}
    f7c2:	bf00      	nop
    f7c4:	000257d0 	.word	0x000257d0

0000f7c8 <ADS1299_Platform_SpimInit>:
{
    f7c8:	b508      	push	{r3, lr}
    f7ca:	4602      	mov	r2, r0
	nrfx_err =  nrfx_spim_init(
    f7cc:	2300      	movs	r3, #0
    f7ce:	4906      	ldr	r1, [pc, #24]	; (f7e8 <ADS1299_Platform_SpimInit+0x20>)
    f7d0:	4806      	ldr	r0, [pc, #24]	; (f7ec <ADS1299_Platform_SpimInit+0x24>)
    f7d2:	f00b fadf 	bl	1ad94 <nrfx_spim_init>
	if(nrfx_err != NRFX_SUCCESS)
    f7d6:	4b06      	ldr	r3, [pc, #24]	; (f7f0 <ADS1299_Platform_SpimInit+0x28>)
    f7d8:	4298      	cmp	r0, r3
    f7da:	d100      	bne.n	f7de <ADS1299_Platform_SpimInit+0x16>
}
    f7dc:	bd08      	pop	{r3, pc}
		printk("Could not get SPI device\n");
    f7de:	4805      	ldr	r0, [pc, #20]	; (f7f4 <ADS1299_Platform_SpimInit+0x2c>)
    f7e0:	f010 fa24 	bl	1fc2c <printk>
		return;
    f7e4:	e7fa      	b.n	f7dc <ADS1299_Platform_SpimInit+0x14>
    f7e6:	bf00      	nop
    f7e8:	000257c0 	.word	0x000257c0
    f7ec:	000257d0 	.word	0x000257d0
    f7f0:	0bad0000 	.word	0x0bad0000
    f7f4:	0002578c 	.word	0x0002578c

0000f7f8 <ADS1299_Platform_SpiInit>:
{
    f7f8:	b508      	push	{r3, lr}
    f7fa:	4602      	mov	r2, r0
	nrfx_err =  nrfx_spi_init(
    f7fc:	2300      	movs	r3, #0
    f7fe:	4906      	ldr	r1, [pc, #24]	; (f818 <ADS1299_Platform_SpiInit+0x20>)
    f800:	4806      	ldr	r0, [pc, #24]	; (f81c <ADS1299_Platform_SpiInit+0x24>)
    f802:	f00b f86d 	bl	1a8e0 <nrfx_spi_init>
	if(nrfx_err != NRFX_SUCCESS)
    f806:	4b06      	ldr	r3, [pc, #24]	; (f820 <ADS1299_Platform_SpiInit+0x28>)
    f808:	4298      	cmp	r0, r3
    f80a:	d100      	bne.n	f80e <ADS1299_Platform_SpiInit+0x16>
}
    f80c:	bd08      	pop	{r3, pc}
		printk("Could not get SPI device\n");
    f80e:	4805      	ldr	r0, [pc, #20]	; (f824 <ADS1299_Platform_SpiInit+0x2c>)
    f810:	f010 fa0c 	bl	1fc2c <printk>
		return;
    f814:	e7fa      	b.n	f80c <ADS1299_Platform_SpiInit+0x14>
    f816:	bf00      	nop
    f818:	000257a8 	.word	0x000257a8
    f81c:	000257b8 	.word	0x000257b8
    f820:	0bad0000 	.word	0x0bad0000
    f824:	0002578c 	.word	0x0002578c

0000f828 <ADS1299_Platform_Hw_ConfigSpi>:

void ADS1299_Platform_Hw_ConfigSpi(uint8_t spi_mode)
{
    f828:	b510      	push	{r4, lr}
    f82a:	4604      	mov	r4, r0
	IRQ_CONNECT(SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQn, 6, nrfx_isr,
    f82c:	2200      	movs	r2, #0
    f82e:	2106      	movs	r1, #6
    f830:	2004      	movs	r0, #4
    f832:	f003 f847 	bl	128c4 <z_arm_irq_priority_set>
		    nrfx_spim_1_irq_handler, 0);

	ADS1299_Platform_SpiDeInit();
    f836:	f7ff ffb7 	bl	f7a8 <ADS1299_Platform_SpiDeInit>
	ADS1299_Platform_SpimDeInit();
    f83a:	f7ff ffbd 	bl	f7b8 <ADS1299_Platform_SpimDeInit>

	if(spi_mode == 2) // DMA
    f83e:	2c02      	cmp	r4, #2
    f840:	d003      	beq.n	f84a <ADS1299_Platform_Hw_ConfigSpi+0x22>
	{
		ADS1299_Platform_SpimInit(ADS1299_Platform_SpimEventCb);
	}
	else if(spi_mode == 1) // IT
    f842:	2c01      	cmp	r4, #1
    f844:	d005      	beq.n	f852 <ADS1299_Platform_Hw_ConfigSpi+0x2a>
	{
		ADS1299_Platform_SpiInit(ADS1299_Platform_SpiEventCb);
	}
	else if(spi_mode == 0) // Polling
    f846:	b144      	cbz	r4, f85a <ADS1299_Platform_Hw_ConfigSpi+0x32>
	{
		ADS1299_Platform_SpiInit(NULL);
	}
}
    f848:	bd10      	pop	{r4, pc}
		ADS1299_Platform_SpimInit(ADS1299_Platform_SpimEventCb);
    f84a:	4806      	ldr	r0, [pc, #24]	; (f864 <ADS1299_Platform_Hw_ConfigSpi+0x3c>)
    f84c:	f7ff ffbc 	bl	f7c8 <ADS1299_Platform_SpimInit>
    f850:	e7fa      	b.n	f848 <ADS1299_Platform_Hw_ConfigSpi+0x20>
		ADS1299_Platform_SpiInit(ADS1299_Platform_SpiEventCb);
    f852:	4805      	ldr	r0, [pc, #20]	; (f868 <ADS1299_Platform_Hw_ConfigSpi+0x40>)
    f854:	f7ff ffd0 	bl	f7f8 <ADS1299_Platform_SpiInit>
    f858:	e7f6      	b.n	f848 <ADS1299_Platform_Hw_ConfigSpi+0x20>
		ADS1299_Platform_SpiInit(NULL);
    f85a:	2000      	movs	r0, #0
    f85c:	f7ff ffcc 	bl	f7f8 <ADS1299_Platform_SpiInit>
}
    f860:	e7f2      	b.n	f848 <ADS1299_Platform_Hw_ConfigSpi+0x20>
    f862:	bf00      	nop
    f864:	0000f78d 	.word	0x0000f78d
    f868:	0000f771 	.word	0x0000f771

0000f86c <ADS1299_Platform_Hw_ConfigGpio>:

void ADS1299_Platform_Hw_ConfigGpio(void)
{
    f86c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	IRQ_CONNECT(DT_IRQN(DT_NODELABEL(gpiote)),
    f86e:	2200      	movs	r2, #0
    f870:	2105      	movs	r1, #5
    f872:	2006      	movs	r0, #6
    f874:	f003 f826 	bl	128c4 <z_arm_irq_priority_set>
    reg->PIN_CNF[pin_number] = cnf;
    f878:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f87c:	2203      	movs	r2, #3
    f87e:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714
    f882:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    f886:	490a      	ldr	r1, [pc, #40]	; (f8b0 <ADS1299_Platform_Hw_ConfigGpio+0x44>)
    f888:	f8c1 274c 	str.w	r2, [r1, #1868]	; 0x74c
    f88c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->OUTCLR = clr_mask;
    f890:	f44f 7280 	mov.w	r2, #256	; 0x100
    f894:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    f898:	2210      	movs	r2, #16
    f89a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    f89e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    f8a2:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    f8a6:	2220      	movs	r2, #32
    f8a8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_gpio_pin_write(ADS1299O_RST, 1);
	
	
	// nrfx_gpiote_out_set(ADS1299O_PWDN);
	// nrfx_gpiote_out_set(ADS1299O_RST);
}
    f8ac:	bd08      	pop	{r3, pc}
    f8ae:	bf00      	nop
    f8b0:	50000300 	.word	0x50000300

0000f8b4 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI>:
	nrfx_gpiote_in_event_enable(ADS1299I_DRDY, true);
}


void ADS1299_Platform_Hw_ConfigDrdy_UsingPPI(void)
{
    f8b4:	b530      	push	{r4, r5, lr}
    f8b6:	b087      	sub	sp, #28
	nrfx_err_t err;
	nrfx_gpiote_evt_handler_t drdy_it_cb;

	nrfx_gpiote_in_config_t const in_config = {
    f8b8:	4b25      	ldr	r3, [pc, #148]	; (f950 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0x9c>)
    f8ba:	681b      	ldr	r3, [r3, #0]
    f8bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    f8c0:	0c1b      	lsrs	r3, r3, #16
    f8c2:	f88d 3016 	strb.w	r3, [sp, #22]
	};

	/* Initialize input pin to generate event on high to low transition
	 * (falling edge) and call back
	 */
	err = nrfx_gpiote_in_init(ADS1299I_DRDY, &in_config, NULL);
    f8c6:	2200      	movs	r2, #0
    f8c8:	a905      	add	r1, sp, #20
    f8ca:	2006      	movs	r0, #6
    f8cc:	f014 fd0c 	bl	242e8 <nrfx_gpiote_in_init>
	if (err != NRFX_SUCCESS) {
    f8d0:	4b20      	ldr	r3, [pc, #128]	; (f954 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0xa0>)
    f8d2:	4298      	cmp	r0, r3
    f8d4:	d001      	beq.n	f8da <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0x26>
	err = nrfx_dppi_channel_enable(channel);
#else
	err = nrfx_ppi_channel_enable(channel);
#endif

    f8d6:	b007      	add	sp, #28
    f8d8:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_in_event_enable(ADS1299I_DRDY, true);
    f8da:	2101      	movs	r1, #1
    f8dc:	2006      	movs	r0, #6
    f8de:	f00a fe3b 	bl	1a558 <nrfx_gpiote_in_event_enable>
    reg->PIN_CNF[pin_number] = cnf;
    f8e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    f8e6:	2203      	movs	r2, #3
    f8e8:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->OUTCLR = clr_mask;
    f8ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    f8f0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	nrfx_spim_xfer_desc_t spim_buffer = {
    f8f4:	ac01      	add	r4, sp, #4
    f8f6:	4b18      	ldr	r3, [pc, #96]	; (f958 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0xa4>)
    f8f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f8fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err =  nrfx_spim_xfer(&spim_dev, &spim_buffer, NRFX_SPIM_FLAG_HOLD_XFER); 
    f8fe:	2208      	movs	r2, #8
    f900:	4621      	mov	r1, r4
    f902:	4816      	ldr	r0, [pc, #88]	; (f95c <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0xa8>)
    f904:	f00b fba2 	bl	1b04c <nrfx_spim_xfer>
	err = nrfx_ppi_channel_alloc(&channel);
    f908:	f10d 0003 	add.w	r0, sp, #3
    f90c:	f00a ff42 	bl	1a794 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    f910:	4b10      	ldr	r3, [pc, #64]	; (f954 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0xa0>)
    f912:	4298      	cmp	r0, r3
    f914:	d1df      	bne.n	f8d6 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0x22>
	nrfx_gppi_channel_endpoints_setup(channel,
    f916:	f89d 5003 	ldrb.w	r5, [sp, #3]
    f91a:	2006      	movs	r0, #6
    f91c:	f014 fced 	bl	242fa <nrfx_gpiote_in_event_get>
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_address_get(NRF_GPIOTE_Type const * p_reg,
                                                        nrf_gpiote_event_t      event)
{
    return ((uint32_t)p_reg + event);
    f920:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
    f924:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
			nrfx_spim_start_task_get(&spim_dev)));
    f928:	480c      	ldr	r0, [pc, #48]	; (f95c <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0xa8>)
    f92a:	f014 fd76 	bl	2441a <nrfx_spim_start_task_get>
    return ((uint32_t)p_reg + task);
    f92e:	b2c3      	uxtb	r3, r0
    f930:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    f934:	4a0a      	ldr	r2, [pc, #40]	; (f960 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0xac>)
    f936:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
    f93a:	f842 4031 	str.w	r4, [r2, r1, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    f93e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    f942:	6053      	str	r3, [r2, #4]
	err = nrfx_ppi_channel_enable(channel);
    f944:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f948:	f00a ff5e 	bl	1a808 <nrfx_ppi_channel_enable>
    f94c:	e7c3      	b.n	f8d6 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI+0x22>
    f94e:	bf00      	nop
    f950:	000255c4 	.word	0x000255c4
    f954:	0bad0000 	.word	0x0bad0000
    f958:	000255c8 	.word	0x000255c8
    f95c:	000257d0 	.word	0x000257d0
    f960:	4001f000 	.word	0x4001f000

0000f964 <App_CollectStream_BleDisconnected>:
		, (char *)aU8Addr, info.le.interval, info.le.latency, info.le.timeout, info.le.phy->tx_phy);
	}
}

static void App_CollectStream_BleDisconnected(struct bt_conn *conn, uint8_t reason)
{
    f964:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
    f966:	4802      	ldr	r0, [pc, #8]	; (f970 <App_CollectStream_BleDisconnected+0xc>)
    f968:	f010 f960 	bl	1fc2c <printk>
}
    f96c:	bd08      	pop	{r3, pc}
    f96e:	bf00      	nop
    f970:	000257d8 	.word	0x000257d8

0000f974 <App_CollectStream_BleConnected>:
{
    f974:	b570      	push	{r4, r5, r6, lr}
    f976:	b09a      	sub	sp, #104	; 0x68
	App_CollectStream_BleConnection = conn;
    f978:	4b2a      	ldr	r3, [pc, #168]	; (fa24 <App_CollectStream_BleConnected+0xb0>)
    f97a:	6018      	str	r0, [r3, #0]
	if (err) 
    f97c:	b941      	cbnz	r1, f990 <App_CollectStream_BleConnected+0x1c>
    f97e:	4604      	mov	r4, r0
	else if(bt_conn_get_info(conn, &info))
    f980:	a911      	add	r1, sp, #68	; 0x44
    f982:	f006 ff39 	bl	167f8 <bt_conn_get_info>
    f986:	b140      	cbz	r0, f99a <App_CollectStream_BleConnected+0x26>
		printk("Could not parse connection info\n");
    f988:	4827      	ldr	r0, [pc, #156]	; (fa28 <App_CollectStream_BleConnected+0xb4>)
    f98a:	f010 f94f 	bl	1fc2c <printk>
    f98e:	e002      	b.n	f996 <App_CollectStream_BleConnected+0x22>
		printk("Connection failed (err %u)\n", err);
    f990:	4826      	ldr	r0, [pc, #152]	; (fa2c <App_CollectStream_BleConnected+0xb8>)
    f992:	f010 f94b 	bl	1fc2c <printk>
}
    f996:	b01a      	add	sp, #104	; 0x68
    f998:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_to_str(bt_conn_get_dst(conn), (char *)aU8Addr, sizeof(aU8Addr));
    f99a:	4620      	mov	r0, r4
    f99c:	f012 fb02 	bl	21fa4 <bt_conn_get_dst>
    f9a0:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    f9a2:	7803      	ldrb	r3, [r0, #0]
    f9a4:	2b03      	cmp	r3, #3
    f9a6:	d837      	bhi.n	fa18 <App_CollectStream_BleConnected+0xa4>
    f9a8:	e8df f003 	tbb	[pc, r3]
    f9ac:	312c2702 	.word	0x312c2702
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    f9b0:	491f      	ldr	r1, [pc, #124]	; (fa30 <App_CollectStream_BleConnected+0xbc>)
    f9b2:	a806      	add	r0, sp, #24
    f9b4:	f011 fd4b 	bl	2144e <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    f9b8:	79a3      	ldrb	r3, [r4, #6]
    f9ba:	7962      	ldrb	r2, [r4, #5]
    f9bc:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    f9be:	78e0      	ldrb	r0, [r4, #3]
    f9c0:	78a5      	ldrb	r5, [r4, #2]
    f9c2:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    f9c4:	ae06      	add	r6, sp, #24
    f9c6:	9605      	str	r6, [sp, #20]
    f9c8:	9404      	str	r4, [sp, #16]
    f9ca:	9503      	str	r5, [sp, #12]
    f9cc:	9002      	str	r0, [sp, #8]
    f9ce:	9101      	str	r1, [sp, #4]
    f9d0:	9200      	str	r2, [sp, #0]
    f9d2:	4a18      	ldr	r2, [pc, #96]	; (fa34 <App_CollectStream_BleConnected+0xc0>)
    f9d4:	211e      	movs	r1, #30
    f9d6:	a809      	add	r0, sp, #36	; 0x24
    f9d8:	f010 f936 	bl	1fc48 <snprintk>
		, (char *)aU8Addr, info.le.interval, info.le.latency, info.le.timeout, info.le.phy->tx_phy);
    f9dc:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    f9e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f9e2:	7812      	ldrb	r2, [r2, #0]
		printk("Connection parameters updated!	\n\
    f9e4:	9201      	str	r2, [sp, #4]
    f9e6:	9300      	str	r3, [sp, #0]
    f9e8:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    f9ec:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    f9f0:	a909      	add	r1, sp, #36	; 0x24
    f9f2:	4811      	ldr	r0, [pc, #68]	; (fa38 <App_CollectStream_BleConnected+0xc4>)
    f9f4:	f010 f91a 	bl	1fc2c <printk>
    f9f8:	e7cd      	b.n	f996 <App_CollectStream_BleConnected+0x22>
		strcpy(type, "random");
    f9fa:	4910      	ldr	r1, [pc, #64]	; (fa3c <App_CollectStream_BleConnected+0xc8>)
    f9fc:	a806      	add	r0, sp, #24
    f9fe:	f011 fd26 	bl	2144e <strcpy>
		break;
    fa02:	e7d9      	b.n	f9b8 <App_CollectStream_BleConnected+0x44>
		strcpy(type, "public-id");
    fa04:	490e      	ldr	r1, [pc, #56]	; (fa40 <App_CollectStream_BleConnected+0xcc>)
    fa06:	a806      	add	r0, sp, #24
    fa08:	f011 fd21 	bl	2144e <strcpy>
		break;
    fa0c:	e7d4      	b.n	f9b8 <App_CollectStream_BleConnected+0x44>
		strcpy(type, "random-id");
    fa0e:	490d      	ldr	r1, [pc, #52]	; (fa44 <App_CollectStream_BleConnected+0xd0>)
    fa10:	a806      	add	r0, sp, #24
    fa12:	f011 fd1c 	bl	2144e <strcpy>
		break;
    fa16:	e7cf      	b.n	f9b8 <App_CollectStream_BleConnected+0x44>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fa18:	4a0b      	ldr	r2, [pc, #44]	; (fa48 <App_CollectStream_BleConnected+0xd4>)
    fa1a:	210a      	movs	r1, #10
    fa1c:	a806      	add	r0, sp, #24
    fa1e:	f010 f913 	bl	1fc48 <snprintk>
		break;
    fa22:	e7c9      	b.n	f9b8 <App_CollectStream_BleConnected+0x44>
    fa24:	20036260 	.word	0x20036260
    fa28:	00025810 	.word	0x00025810
    fa2c:	000257f4 	.word	0x000257f4
    fa30:	00025834 	.word	0x00025834
    fa34:	0002585c 	.word	0x0002585c
    fa38:	00025880 	.word	0x00025880
    fa3c:	0002583c 	.word	0x0002583c
    fa40:	00025844 	.word	0x00025844
    fa44:	00025850 	.word	0x00025850
    fa48:	0002720c 	.word	0x0002720c

0000fa4c <App_CollectStream_BleReady>:
		, (char *)aU8Addr, info.le.interval, info.le.latency, info.le.timeout, info.le.phy->tx_phy);
	}
}

static void App_CollectStream_BleReady(int err)
{
    fa4c:	b530      	push	{r4, r5, lr}
    fa4e:	b089      	sub	sp, #36	; 0x24
	if (err) 
    fa50:	b9e8      	cbnz	r0, fa8e <App_CollectStream_BleReady+0x42>
		printk("BLE init failed with error code %d\n", err);
		return;
	}

	//Configure connection callbacks
	bt_conn_cb_register(&App_CollectStream_ConnCallbacks);
    fa52:	4816      	ldr	r0, [pc, #88]	; (faac <App_CollectStream_BleReady+0x60>)
    fa54:	f006 fe1e 	bl	16694 <bt_conn_cb_register>

	//Initalize services
	err = getBrain_BleService_Init();
    fa58:	f7ff fbfa 	bl	f250 <getBrain_BleService_Init>

	if (err) 
    fa5c:	4601      	mov	r1, r0
    fa5e:	b9e0      	cbnz	r0, fa9a <App_CollectStream_BleReady+0x4e>
		printk("Failed to init LBS (err:%d)\n", err);
		return;
	}

	//Start advertising
	err = bt_le_adv_start(BT_LE_ADV_CONN, \
    fa60:	ac03      	add	r4, sp, #12
    fa62:	4d13      	ldr	r5, [pc, #76]	; (fab0 <App_CollectStream_BleReady+0x64>)
    fa64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fa66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    fa68:	682b      	ldr	r3, [r5, #0]
    fa6a:	6023      	str	r3, [r4, #0]
    fa6c:	2301      	movs	r3, #1
    fa6e:	9300      	str	r3, [sp, #0]
    fa70:	4b10      	ldr	r3, [pc, #64]	; (fab4 <App_CollectStream_BleReady+0x68>)
    fa72:	2202      	movs	r2, #2
    fa74:	4910      	ldr	r1, [pc, #64]	; (fab8 <App_CollectStream_BleReady+0x6c>)
    fa76:	a803      	add	r0, sp, #12
    fa78:	f012 f880 	bl	21b7c <bt_le_adv_start>
                          App_CollectStream_Ad, ARRAY_SIZE(App_CollectStream_Ad), \
			              App_CollectStream_Sd, ARRAY_SIZE(App_CollectStream_Sd));

	if (err) 
    fa7c:	4601      	mov	r1, r0
    fa7e:	b980      	cbnz	r0, faa2 <App_CollectStream_BleReady+0x56>
	{
		printk("Advertising failed to start (err %d)\n", err);
		return;
	}

	printk("Advertising successfully started\n");
    fa80:	480e      	ldr	r0, [pc, #56]	; (fabc <App_CollectStream_BleReady+0x70>)
    fa82:	f010 f8d3 	bl	1fc2c <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    fa86:	480e      	ldr	r0, [pc, #56]	; (fac0 <App_CollectStream_BleReady+0x74>)
    fa88:	f00c f84a 	bl	1bb20 <z_impl_k_sem_give>
    fa8c:	e003      	b.n	fa96 <App_CollectStream_BleReady+0x4a>
    fa8e:	4601      	mov	r1, r0
		printk("BLE init failed with error code %d\n", err);
    fa90:	480c      	ldr	r0, [pc, #48]	; (fac4 <App_CollectStream_BleReady+0x78>)
    fa92:	f010 f8cb 	bl	1fc2c <printk>

	k_sem_give(&ble_init_ok);
}
    fa96:	b009      	add	sp, #36	; 0x24
    fa98:	bd30      	pop	{r4, r5, pc}
		printk("Failed to init LBS (err:%d)\n", err);
    fa9a:	480b      	ldr	r0, [pc, #44]	; (fac8 <App_CollectStream_BleReady+0x7c>)
    fa9c:	f010 f8c6 	bl	1fc2c <printk>
		return;
    faa0:	e7f9      	b.n	fa96 <App_CollectStream_BleReady+0x4a>
		printk("Advertising failed to start (err %d)\n", err);
    faa2:	480a      	ldr	r0, [pc, #40]	; (facc <App_CollectStream_BleReady+0x80>)
    faa4:	f010 f8c2 	bl	1fc2c <printk>
		return;
    faa8:	e7f5      	b.n	fa96 <App_CollectStream_BleReady+0x4a>
    faaa:	bf00      	nop
    faac:	200338dc 	.word	0x200338dc
    fab0:	000255d8 	.word	0x000255d8
    fab4:	00025a88 	.word	0x00025a88
    fab8:	00025a78 	.word	0x00025a78
    fabc:	000259b4 	.word	0x000259b4
    fac0:	20033bd8 	.word	0x20033bd8
    fac4:	00025948 	.word	0x00025948
    fac8:	0002596c 	.word	0x0002596c
    facc:	0002598c 	.word	0x0002598c

0000fad0 <App_CollectStream_BleError>:

static void App_CollectStream_BleError(void)
{
    fad0:	b508      	push	{r3, lr}
	while (true) {
		printk("Error!\n");
    fad2:	4804      	ldr	r0, [pc, #16]	; (fae4 <App_CollectStream_BleError+0x14>)
    fad4:	f010 f8aa 	bl	1fc2c <printk>
	return z_impl_k_sleep(timeout);
    fad8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fadc:	2100      	movs	r1, #0
    fade:	f00c fdd1 	bl	1c684 <z_impl_k_sleep>
	while (true) {
    fae2:	e7f6      	b.n	fad2 <App_CollectStream_BleError+0x2>
    fae4:	000259d8 	.word	0x000259d8

0000fae8 <App_CollectStream_BleParamUpdated>:
{
    fae8:	b570      	push	{r4, r5, r6, lr}
    faea:	b09a      	sub	sp, #104	; 0x68
    faec:	4604      	mov	r4, r0
	if(bt_conn_get_info(conn, &info))
    faee:	a911      	add	r1, sp, #68	; 0x44
    faf0:	f006 fe82 	bl	167f8 <bt_conn_get_info>
    faf4:	b118      	cbz	r0, fafe <App_CollectStream_BleParamUpdated+0x16>
		printk("Could not parse connection info\n");
    faf6:	4825      	ldr	r0, [pc, #148]	; (fb8c <App_CollectStream_BleParamUpdated+0xa4>)
    faf8:	f010 f898 	bl	1fc2c <printk>
    fafc:	e02e      	b.n	fb5c <App_CollectStream_BleParamUpdated+0x74>
		bt_addr_le_to_str(bt_conn_get_dst(conn), (char *)aU8Addr, sizeof(aU8Addr));
    fafe:	4620      	mov	r0, r4
    fb00:	f012 fa50 	bl	21fa4 <bt_conn_get_dst>
    fb04:	4604      	mov	r4, r0
	switch (addr->type) {
    fb06:	7803      	ldrb	r3, [r0, #0]
    fb08:	2b03      	cmp	r3, #3
    fb0a:	d838      	bhi.n	fb7e <App_CollectStream_BleParamUpdated+0x96>
    fb0c:	e8df f003 	tbb	[pc, r3]
    fb10:	322d2802 	.word	0x322d2802
		strcpy(type, "public");
    fb14:	491e      	ldr	r1, [pc, #120]	; (fb90 <App_CollectStream_BleParamUpdated+0xa8>)
    fb16:	a806      	add	r0, sp, #24
    fb18:	f011 fc99 	bl	2144e <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    fb1c:	79a3      	ldrb	r3, [r4, #6]
    fb1e:	7962      	ldrb	r2, [r4, #5]
    fb20:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    fb22:	78e0      	ldrb	r0, [r4, #3]
    fb24:	78a5      	ldrb	r5, [r4, #2]
    fb26:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    fb28:	ae06      	add	r6, sp, #24
    fb2a:	9605      	str	r6, [sp, #20]
    fb2c:	9404      	str	r4, [sp, #16]
    fb2e:	9503      	str	r5, [sp, #12]
    fb30:	9002      	str	r0, [sp, #8]
    fb32:	9101      	str	r1, [sp, #4]
    fb34:	9200      	str	r2, [sp, #0]
    fb36:	4a17      	ldr	r2, [pc, #92]	; (fb94 <App_CollectStream_BleParamUpdated+0xac>)
    fb38:	211e      	movs	r1, #30
    fb3a:	a809      	add	r0, sp, #36	; 0x24
    fb3c:	f010 f884 	bl	1fc48 <snprintk>
		, (char *)aU8Addr, info.le.interval, info.le.latency, info.le.timeout, info.le.phy->tx_phy);
    fb40:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
    fb44:	9a18      	ldr	r2, [sp, #96]	; 0x60
    fb46:	7812      	ldrb	r2, [r2, #0]
		printk("Connection parameters updated!	\n\
    fb48:	9201      	str	r2, [sp, #4]
    fb4a:	9300      	str	r3, [sp, #0]
    fb4c:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
    fb50:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
    fb54:	a909      	add	r1, sp, #36	; 0x24
    fb56:	4810      	ldr	r0, [pc, #64]	; (fb98 <App_CollectStream_BleParamUpdated+0xb0>)
    fb58:	f010 f868 	bl	1fc2c <printk>
}
    fb5c:	b01a      	add	sp, #104	; 0x68
    fb5e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    fb60:	490e      	ldr	r1, [pc, #56]	; (fb9c <App_CollectStream_BleParamUpdated+0xb4>)
    fb62:	a806      	add	r0, sp, #24
    fb64:	f011 fc73 	bl	2144e <strcpy>
		break;
    fb68:	e7d8      	b.n	fb1c <App_CollectStream_BleParamUpdated+0x34>
		strcpy(type, "public-id");
    fb6a:	490d      	ldr	r1, [pc, #52]	; (fba0 <App_CollectStream_BleParamUpdated+0xb8>)
    fb6c:	a806      	add	r0, sp, #24
    fb6e:	f011 fc6e 	bl	2144e <strcpy>
		break;
    fb72:	e7d3      	b.n	fb1c <App_CollectStream_BleParamUpdated+0x34>
		strcpy(type, "random-id");
    fb74:	490b      	ldr	r1, [pc, #44]	; (fba4 <App_CollectStream_BleParamUpdated+0xbc>)
    fb76:	a806      	add	r0, sp, #24
    fb78:	f011 fc69 	bl	2144e <strcpy>
		break;
    fb7c:	e7ce      	b.n	fb1c <App_CollectStream_BleParamUpdated+0x34>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    fb7e:	4a0a      	ldr	r2, [pc, #40]	; (fba8 <App_CollectStream_BleParamUpdated+0xc0>)
    fb80:	210a      	movs	r1, #10
    fb82:	a806      	add	r0, sp, #24
    fb84:	f010 f860 	bl	1fc48 <snprintk>
		break;
    fb88:	e7c8      	b.n	fb1c <App_CollectStream_BleParamUpdated+0x34>
    fb8a:	bf00      	nop
    fb8c:	00025810 	.word	0x00025810
    fb90:	00025834 	.word	0x00025834
    fb94:	0002585c 	.word	0x0002585c
    fb98:	00025880 	.word	0x00025880
    fb9c:	0002583c 	.word	0x0002583c
    fba0:	00025844 	.word	0x00025844
    fba4:	00025850 	.word	0x00025850
    fba8:	0002720c 	.word	0x0002720c

0000fbac <App_CollectStream_BLE_MainRun>:
		k_sleep(K_MSEC(1000)); //1000ms
	}
}

void App_CollectStream_BLE_MainRun(void)
{
    fbac:	b510      	push	{r4, lr}
    fbae:	b090      	sub	sp, #64	; 0x40
    int err = 0;
    Std_ReturnType ret = E_OK;
    uint8_t aU8BleTxMsg[50]; 
    memset(aU8BleTxMsg, 0, 50);
    fbb0:	2232      	movs	r2, #50	; 0x32
    fbb2:	2100      	movs	r1, #0
    fbb4:	a803      	add	r0, sp, #12
    fbb6:	f011 fcda 	bl	2156e <memset>

	/* Hw Init */
	err = nrfx_gpiote_init(0);
    fbba:	2000      	movs	r0, #0
    fbbc:	f00a fae8 	bl	1a190 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    fbc0:	4b45      	ldr	r3, [pc, #276]	; (fcd8 <App_CollectStream_BLE_MainRun+0x12c>)
    fbc2:	4298      	cmp	r0, r3
    fbc4:	d001      	beq.n	fbca <App_CollectStream_BLE_MainRun+0x1e>
			{
				printk("Circuit_Buffer_Length: %d\r\n", ADS1299_Platform_EegCirBuf.buffer_length);
			}
		}
    }
}
    fbc6:	b010      	add	sp, #64	; 0x40
    fbc8:	bd10      	pop	{r4, pc}
	nrfx_gpiote_out_config_t out_config = NRFX_GPIOTE_CONFIG_OUT_SIMPLE(0);
    fbca:	2301      	movs	r3, #1
    fbcc:	f88d 3008 	strb.w	r3, [sp, #8]
    fbd0:	2300      	movs	r3, #0
    fbd2:	f88d 3009 	strb.w	r3, [sp, #9]
    fbd6:	f88d 300a 	strb.w	r3, [sp, #10]
	err = nrfx_gpiote_out_init(LED_GREEN, &out_config);
    fbda:	a902      	add	r1, sp, #8
    fbdc:	2010      	movs	r0, #16
    fbde:	f014 fb7d 	bl	242dc <nrfx_gpiote_out_init>
	if (err != NRFX_SUCCESS) {
    fbe2:	4b3d      	ldr	r3, [pc, #244]	; (fcd8 <App_CollectStream_BLE_MainRun+0x12c>)
    fbe4:	4298      	cmp	r0, r3
    fbe6:	d1ee      	bne.n	fbc6 <App_CollectStream_BLE_MainRun+0x1a>
	nrfx_gpiote_out_set(LED_GREEN);
    fbe8:	2010      	movs	r0, #16
    fbea:	f00a fc95 	bl	1a518 <nrfx_gpiote_out_set>
	ADS1299_Platform_Hw_ConfigGpio();
    fbee:	f7ff fe3d 	bl	f86c <ADS1299_Platform_Hw_ConfigGpio>
    ADS1299_Platform_Hw_ConfigSpi(0); // Polling to Config
    fbf2:	2000      	movs	r0, #0
    fbf4:	f7ff fe18 	bl	f828 <ADS1299_Platform_Hw_ConfigSpi>
    err = bt_enable(App_CollectStream_BleReady);
    fbf8:	4838      	ldr	r0, [pc, #224]	; (fcdc <App_CollectStream_BLE_MainRun+0x130>)
    fbfa:	f005 fb49 	bl	15290 <bt_enable>
    if (err) 
    fbfe:	b9e8      	cbnz	r0, fc3c <App_CollectStream_BLE_MainRun+0x90>
	return z_impl_k_sem_take(sem, timeout);
    fc00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    fc04:	2300      	movs	r3, #0
    fc06:	4836      	ldr	r0, [pc, #216]	; (fce0 <App_CollectStream_BLE_MainRun+0x134>)
    fc08:	f00b ffb2 	bl	1bb70 <z_impl_k_sem_take>
	if (!err) 
    fc0c:	b9d8      	cbnz	r0, fc46 <App_CollectStream_BLE_MainRun+0x9a>
		printk("Bluetooth initialized\n");
    fc0e:	4835      	ldr	r0, [pc, #212]	; (fce4 <App_CollectStream_BLE_MainRun+0x138>)
    fc10:	f010 f80c 	bl	1fc2c <printk>
    ADS1299_Init();
    fc14:	f7ff fd14 	bl	f640 <ADS1299_Init>
    ADS1299_ConfigGlobalChannelReg1(0, \
    fc18:	2306      	movs	r3, #6
    fc1a:	2200      	movs	r2, #0
    fc1c:	4611      	mov	r1, r2
    fc1e:	4610      	mov	r0, r2
    fc20:	f7ff fc88 	bl	f534 <ADS1299_ConfigGlobalChannelReg1>
    ADS1299_SetSrb1(0, ADS1299_SET);
    fc24:	2101      	movs	r1, #1
    fc26:	2000      	movs	r0, #0
    fc28:	f7ff fcec 	bl	f604 <ADS1299_SetSrb1>
    ADS1299_ConfigAllChannelSettings(0, ADS1299_RESET, ADS1299_GAIN24, ADS1299_INPUT_NORMAL, ADS1299_RESET);
    fc2c:	2000      	movs	r0, #0
    fc2e:	9000      	str	r0, [sp, #0]
    fc30:	4603      	mov	r3, r0
    fc32:	2206      	movs	r2, #6
    fc34:	4601      	mov	r1, r0
    fc36:	f7ff fc9d 	bl	f574 <ADS1299_ConfigAllChannelSettings>
    while(getBrain_IsNotiSubscribed(App_CollectStream_BleConnection) != E_OK)
    fc3a:	e00e      	b.n	fc5a <App_CollectStream_BLE_MainRun+0xae>
		printk("BLE initialization failed\n");
    fc3c:	482a      	ldr	r0, [pc, #168]	; (fce8 <App_CollectStream_BLE_MainRun+0x13c>)
    fc3e:	f00f fff5 	bl	1fc2c <printk>
		App_CollectStream_BleError(); //Catch error
    fc42:	f7ff ff45 	bl	fad0 <App_CollectStream_BleError>
		printk("BLE initialization did not complete in time\n");
    fc46:	4829      	ldr	r0, [pc, #164]	; (fcec <App_CollectStream_BLE_MainRun+0x140>)
    fc48:	f00f fff0 	bl	1fc2c <printk>
		App_CollectStream_BleError(); //Catch error
    fc4c:	f7ff ff40 	bl	fad0 <App_CollectStream_BleError>
	return z_impl_k_sleep(timeout);
    fc50:	f44f 70a4 	mov.w	r0, #328	; 0x148
    fc54:	2100      	movs	r1, #0
    fc56:	f00c fd15 	bl	1c684 <z_impl_k_sleep>
    while(getBrain_IsNotiSubscribed(App_CollectStream_BleConnection) != E_OK)
    fc5a:	4b25      	ldr	r3, [pc, #148]	; (fcf0 <App_CollectStream_BLE_MainRun+0x144>)
    fc5c:	6818      	ldr	r0, [r3, #0]
    fc5e:	f7ff fb37 	bl	f2d0 <getBrain_IsNotiSubscribed>
    fc62:	2800      	cmp	r0, #0
    fc64:	d1f4      	bne.n	fc50 <App_CollectStream_BLE_MainRun+0xa4>
    ADS1299_CmdSTART();
    fc66:	f7ff fc33 	bl	f4d0 <ADS1299_CmdSTART>
    ADS1299_CmdRDATAC();
    fc6a:	f7ff fc4f 	bl	f50c <ADS1299_CmdRDATAC>
	ADS1299_Platform_Hw_ConfigSpi(2); // DMA
    fc6e:	2002      	movs	r0, #2
    fc70:	f7ff fdda 	bl	f828 <ADS1299_Platform_Hw_ConfigSpi>
	ADS1299_Platform_Hw_ConfigDrdy_UsingPPI();
    fc74:	f7ff fe1e 	bl	f8b4 <ADS1299_Platform_Hw_ConfigDrdy_UsingPPI>
    fc78:	e008      	b.n	fc8c <App_CollectStream_BLE_MainRun+0xe0>
			nrfx_gpiote_out_set(LED_GREEN); // Led green off
    fc7a:	2010      	movs	r0, #16
    fc7c:	f00a fc4c 	bl	1a518 <nrfx_gpiote_out_set>
		ret = CircularBuffer_Pop(&ADS1299_Platform_EegCirBuf, &App_CollectStream_SensorPacket.frame.eeg_data[0], 24);
    fc80:	2218      	movs	r2, #24
    fc82:	491c      	ldr	r1, [pc, #112]	; (fcf4 <App_CollectStream_BLE_MainRun+0x148>)
    fc84:	481c      	ldr	r0, [pc, #112]	; (fcf8 <App_CollectStream_BLE_MainRun+0x14c>)
    fc86:	f00f ff4d 	bl	1fb24 <CircularBuffer_Pop>
		if(ret == E_OK)
    fc8a:	b140      	cbz	r0, fc9e <App_CollectStream_BLE_MainRun+0xf2>
        if(ADS1299_Platform_EegCirBuf.buffer_status == CIRCULAR_BUFFER_STATE_FULL_BUFFER)
    fc8c:	4b1a      	ldr	r3, [pc, #104]	; (fcf8 <App_CollectStream_BLE_MainRun+0x14c>)
    fc8e:	781b      	ldrb	r3, [r3, #0]
    fc90:	b2db      	uxtb	r3, r3
    fc92:	2b01      	cmp	r3, #1
    fc94:	d1f1      	bne.n	fc7a <App_CollectStream_BLE_MainRun+0xce>
			nrfx_gpiote_out_clear(LED_GREEN); // Led green on
    fc96:	2010      	movs	r0, #16
    fc98:	f00a fc4e 	bl	1a538 <nrfx_gpiote_out_clear>
    fc9c:	e7f0      	b.n	fc80 <App_CollectStream_BLE_MainRun+0xd4>
			getBrain_BleService_Send(App_CollectStream_BleConnection, (uint8_t *)&App_CollectStream_SensorPacket.buffer[0], 33);
    fc9e:	4c17      	ldr	r4, [pc, #92]	; (fcfc <App_CollectStream_BLE_MainRun+0x150>)
    fca0:	2221      	movs	r2, #33	; 0x21
    fca2:	4621      	mov	r1, r4
    fca4:	4b12      	ldr	r3, [pc, #72]	; (fcf0 <App_CollectStream_BLE_MainRun+0x144>)
    fca6:	6818      	ldr	r0, [r3, #0]
    fca8:	f7ff fadc 	bl	f264 <getBrain_BleService_Send>
			App_CollectStream_SensorPacket.frame.nb_sample++;
    fcac:	8823      	ldrh	r3, [r4, #0]
    fcae:	3301      	adds	r3, #1
    fcb0:	b29a      	uxth	r2, r3
    fcb2:	8022      	strh	r2, [r4, #0]
			if(App_CollectStream_SensorPacket.frame.nb_sample%2000 == 0)
    fcb4:	4b12      	ldr	r3, [pc, #72]	; (fd00 <App_CollectStream_BLE_MainRun+0x154>)
    fcb6:	fba3 1302 	umull	r1, r3, r3, r2
    fcba:	09db      	lsrs	r3, r3, #7
    fcbc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    fcc0:	fb01 2313 	mls	r3, r1, r3, r2
    fcc4:	b29b      	uxth	r3, r3
    fcc6:	2b00      	cmp	r3, #0
    fcc8:	d1e0      	bne.n	fc8c <App_CollectStream_BLE_MainRun+0xe0>
				printk("Circuit_Buffer_Length: %d\r\n", ADS1299_Platform_EegCirBuf.buffer_length);
    fcca:	4b0b      	ldr	r3, [pc, #44]	; (fcf8 <App_CollectStream_BLE_MainRun+0x14c>)
    fccc:	68d9      	ldr	r1, [r3, #12]
    fcce:	480d      	ldr	r0, [pc, #52]	; (fd04 <App_CollectStream_BLE_MainRun+0x158>)
    fcd0:	f00f ffac 	bl	1fc2c <printk>
    fcd4:	e7da      	b.n	fc8c <App_CollectStream_BLE_MainRun+0xe0>
    fcd6:	bf00      	nop
    fcd8:	0bad0000 	.word	0x0bad0000
    fcdc:	0000fa4d 	.word	0x0000fa4d
    fce0:	20033bd8 	.word	0x20033bd8
    fce4:	000259fc 	.word	0x000259fc
    fce8:	000259e0 	.word	0x000259e0
    fcec:	00025a14 	.word	0x00025a14
    fcf0:	20036260 	.word	0x20036260
    fcf4:	20036266 	.word	0x20036266
    fcf8:	20000478 	.word	0x20000478
    fcfc:	20036264 	.word	0x20036264
    fd00:	10624dd3 	.word	0x10624dd3
    fd04:	00025a44 	.word	0x00025a44

0000fd08 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    fd08:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    fd0a:	680b      	ldr	r3, [r1, #0]
    fd0c:	3301      	adds	r3, #1
    fd0e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    fd10:	4b01      	ldr	r3, [pc, #4]	; (fd18 <char_out+0x10>)
    fd12:	681b      	ldr	r3, [r3, #0]
    fd14:	4798      	blx	r3
}
    fd16:	bd08      	pop	{r3, pc}
    fd18:	2003390c 	.word	0x2003390c

0000fd1c <__printk_hook_install>:
	_char_out = fn;
    fd1c:	4b01      	ldr	r3, [pc, #4]	; (fd24 <__printk_hook_install+0x8>)
    fd1e:	6018      	str	r0, [r3, #0]
}
    fd20:	4770      	bx	lr
    fd22:	bf00      	nop
    fd24:	2003390c 	.word	0x2003390c

0000fd28 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    fd28:	b500      	push	{lr}
    fd2a:	b083      	sub	sp, #12
    fd2c:	4602      	mov	r2, r0
    fd2e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    fd30:	2100      	movs	r1, #0
    fd32:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    fd34:	a901      	add	r1, sp, #4
    fd36:	4803      	ldr	r0, [pc, #12]	; (fd44 <vprintk+0x1c>)
    fd38:	f000 f8c8 	bl	fecc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    fd3c:	b003      	add	sp, #12
    fd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    fd42:	bf00      	nop
    fd44:	0000fd09 	.word	0x0000fd09

0000fd48 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    fd48:	b510      	push	{r4, lr}
    fd4a:	b084      	sub	sp, #16
    fd4c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    fd4e:	9001      	str	r0, [sp, #4]
    fd50:	9102      	str	r1, [sp, #8]
    fd52:	2100      	movs	r1, #0
    fd54:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    fd56:	a901      	add	r1, sp, #4
    fd58:	4805      	ldr	r0, [pc, #20]	; (fd70 <vsnprintk+0x28>)
    fd5a:	f000 f8b7 	bl	fecc <cbvprintf>

	if (ctx.count < ctx.max) {
    fd5e:	9b03      	ldr	r3, [sp, #12]
    fd60:	9a02      	ldr	r2, [sp, #8]
    fd62:	4293      	cmp	r3, r2
    fd64:	da01      	bge.n	fd6a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    fd66:	2200      	movs	r2, #0
    fd68:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    fd6a:	9803      	ldr	r0, [sp, #12]
    fd6c:	b004      	add	sp, #16
    fd6e:	bd10      	pop	{r4, pc}
    fd70:	0001fbfd 	.word	0x0001fbfd

0000fd74 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    fd74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fd78:	b083      	sub	sp, #12
    fd7a:	4604      	mov	r4, r0
    fd7c:	4608      	mov	r0, r1
    fd7e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    fd80:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    fd82:	f013 0f08 	tst.w	r3, #8
    fd86:	d105      	bne.n	fd94 <process_event+0x20>
    fd88:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    fd8c:	2300      	movs	r3, #0
    fd8e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    fd90:	9301      	str	r3, [sp, #4]
}
    fd92:	e069      	b.n	fe68 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    fd94:	2901      	cmp	r1, #1
    fd96:	d009      	beq.n	fdac <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    fd98:	f043 0320 	orr.w	r3, r3, #32
    fd9c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fd9e:	f385 8811 	msr	BASEPRI, r5
    fda2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    fda6:	b003      	add	sp, #12
    fda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    fdac:	f043 0310 	orr.w	r3, r3, #16
    fdb0:	8323      	strh	r3, [r4, #24]
    fdb2:	e7f4      	b.n	fd9e <process_event+0x2a>
			evt = process_recheck(mgr);
    fdb4:	4620      	mov	r0, r4
    fdb6:	f00f ff7c 	bl	1fcb2 <process_recheck>
    fdba:	e057      	b.n	fe6c <process_event+0xf8>
			res = mgr->last_res;
    fdbc:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    fdc0:	464a      	mov	r2, r9
    fdc2:	4669      	mov	r1, sp
    fdc4:	4620      	mov	r0, r4
    fdc6:	f00f ff8d 	bl	1fce4 <process_complete>
		onoff_transition_fn transit = NULL;
    fdca:	2700      	movs	r7, #0
    fdcc:	e05a      	b.n	fe84 <process_event+0x110>
			transit = mgr->transitions->start;
    fdce:	6923      	ldr	r3, [r4, #16]
    fdd0:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    fdd2:	2106      	movs	r1, #6
    fdd4:	4620      	mov	r0, r4
    fdd6:	f00f ff45 	bl	1fc64 <set_state>
		res = 0;
    fdda:	f04f 0900 	mov.w	r9, #0
    fdde:	e051      	b.n	fe84 <process_event+0x110>
			transit = mgr->transitions->stop;
    fde0:	6923      	ldr	r3, [r4, #16]
    fde2:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    fde4:	2104      	movs	r1, #4
    fde6:	4620      	mov	r0, r4
    fde8:	f00f ff3c 	bl	1fc64 <set_state>
		res = 0;
    fdec:	f04f 0900 	mov.w	r9, #0
    fdf0:	e048      	b.n	fe84 <process_event+0x110>
			transit = mgr->transitions->reset;
    fdf2:	6923      	ldr	r3, [r4, #16]
    fdf4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    fdf6:	2105      	movs	r1, #5
    fdf8:	4620      	mov	r0, r4
    fdfa:	f00f ff33 	bl	1fc64 <set_state>
		res = 0;
    fdfe:	f04f 0900 	mov.w	r9, #0
    fe02:	e03f      	b.n	fe84 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    fe04:	2200      	movs	r2, #0
    fe06:	e046      	b.n	fe96 <process_event+0x122>
    fe08:	2200      	movs	r2, #0
    fe0a:	e044      	b.n	fe96 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fe0c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    fe10:	8323      	strh	r3, [r4, #24]
    fe12:	f385 8811 	msr	BASEPRI, r5
    fe16:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    fe1a:	2900      	cmp	r1, #0
    fe1c:	d144      	bne.n	fea8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fe1e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    fe20:	b12b      	cbz	r3, fe2e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    fe22:	464b      	mov	r3, r9
    fe24:	4642      	mov	r2, r8
    fe26:	4669      	mov	r1, sp
    fe28:	4620      	mov	r0, r4
    fe2a:	f00f ffd1 	bl	1fdd0 <notify_all>
			if (transit != NULL) {
    fe2e:	b117      	cbz	r7, fe36 <process_event+0xc2>
				transit(mgr, transition_complete);
    fe30:	4925      	ldr	r1, [pc, #148]	; (fec8 <process_event+0x154>)
    fe32:	4620      	mov	r0, r4
    fe34:	47b8      	blx	r7
	__asm__ volatile(
    fe36:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe3a:	f3ef 8511 	mrs	r5, BASEPRI
    fe3e:	f383 8811 	msr	BASEPRI, r3
    fe42:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    fe46:	8b23      	ldrh	r3, [r4, #24]
    fe48:	f023 0308 	bic.w	r3, r3, #8
    fe4c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    fe4e:	8b23      	ldrh	r3, [r4, #24]
    fe50:	f013 0f10 	tst.w	r3, #16
    fe54:	d02e      	beq.n	feb4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    fe56:	f023 0310 	bic.w	r3, r3, #16
    fe5a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    fe5c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    fe5e:	8b26      	ldrh	r6, [r4, #24]
    fe60:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    fe64:	2800      	cmp	r0, #0
    fe66:	d09a      	beq.n	fd9e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    fe68:	2802      	cmp	r0, #2
    fe6a:	d0a3      	beq.n	fdb4 <process_event+0x40>
		if (evt == EVT_NOP) {
    fe6c:	2800      	cmp	r0, #0
    fe6e:	d096      	beq.n	fd9e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    fe70:	2801      	cmp	r0, #1
    fe72:	d0a3      	beq.n	fdbc <process_event+0x48>
		} else if (evt == EVT_START) {
    fe74:	2803      	cmp	r0, #3
    fe76:	d0aa      	beq.n	fdce <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    fe78:	2804      	cmp	r0, #4
    fe7a:	d0b1      	beq.n	fde0 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    fe7c:	2805      	cmp	r0, #5
    fe7e:	d0b8      	beq.n	fdf2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    fe80:	2700      	movs	r7, #0
		res = 0;
    fe82:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    fe84:	8b23      	ldrh	r3, [r4, #24]
    fe86:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    fe8a:	45b0      	cmp	r8, r6
    fe8c:	d0ba      	beq.n	fe04 <process_event+0x90>
    fe8e:	68a2      	ldr	r2, [r4, #8]
    fe90:	2a00      	cmp	r2, #0
    fe92:	d0b9      	beq.n	fe08 <process_event+0x94>
    fe94:	2201      	movs	r2, #1
		if (do_monitors
    fe96:	4611      	mov	r1, r2
    fe98:	2a00      	cmp	r2, #0
    fe9a:	d1b7      	bne.n	fe0c <process_event+0x98>
    fe9c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    fe9e:	2a00      	cmp	r2, #0
    fea0:	d1b4      	bne.n	fe0c <process_event+0x98>
		    || (transit != NULL)) {
    fea2:	2f00      	cmp	r7, #0
    fea4:	d1b2      	bne.n	fe0c <process_event+0x98>
    fea6:	e7d2      	b.n	fe4e <process_event+0xda>
				notify_monitors(mgr, state, res);
    fea8:	464a      	mov	r2, r9
    feaa:	4641      	mov	r1, r8
    feac:	4620      	mov	r0, r4
    feae:	f00f fee1 	bl	1fc74 <notify_monitors>
    feb2:	e7b4      	b.n	fe1e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    feb4:	f013 0f20 	tst.w	r3, #32
    feb8:	d004      	beq.n	fec4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    feba:	f023 0320 	bic.w	r3, r3, #32
    febe:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    fec0:	2002      	movs	r0, #2
    fec2:	e7cc      	b.n	fe5e <process_event+0xea>
		evt = EVT_NOP;
    fec4:	2000      	movs	r0, #0
    fec6:	e7ca      	b.n	fe5e <process_event+0xea>
    fec8:	0001fdff 	.word	0x0001fdff

0000fecc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    fecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fed0:	b093      	sub	sp, #76	; 0x4c
    fed2:	4606      	mov	r6, r0
    fed4:	460d      	mov	r5, r1
    fed6:	4692      	mov	sl, r2
    fed8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    feda:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    fedc:	f89a 0000 	ldrb.w	r0, [sl]
    fee0:	2800      	cmp	r0, #0
    fee2:	f000 84d6 	beq.w	10892 <cbvprintf+0x9c6>
		if (*fp != '%') {
    fee6:	2825      	cmp	r0, #37	; 0x25
    fee8:	d008      	beq.n	fefc <cbvprintf+0x30>
			OUTC(*fp++);
    feea:	f10a 0a01 	add.w	sl, sl, #1
    feee:	4629      	mov	r1, r5
    fef0:	47b0      	blx	r6
    fef2:	2800      	cmp	r0, #0
    fef4:	f2c0 84ce 	blt.w	10894 <cbvprintf+0x9c8>
    fef8:	3401      	adds	r4, #1
			continue;
    fefa:	e7ef      	b.n	fedc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    fefc:	2300      	movs	r3, #0
    fefe:	9306      	str	r3, [sp, #24]
    ff00:	9307      	str	r3, [sp, #28]
    ff02:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    ff04:	9308      	str	r3, [sp, #32]
    ff06:	9309      	str	r3, [sp, #36]	; 0x24
    ff08:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    ff0a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    ff0e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    ff12:	2b25      	cmp	r3, #37	; 0x25
    ff14:	d001      	beq.n	ff1a <cbvprintf+0x4e>
	bool loop = true;
    ff16:	2701      	movs	r7, #1
    ff18:	e02c      	b.n	ff74 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    ff1a:	f10a 0802 	add.w	r8, sl, #2
    ff1e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    ff22:	e1a8      	b.n	10276 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    ff24:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ff28:	f043 0304 	orr.w	r3, r3, #4
    ff2c:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    ff30:	b1ff      	cbz	r7, ff72 <cbvprintf+0xa6>
			++sp;
    ff32:	f108 0801 	add.w	r8, r8, #1
    ff36:	e01c      	b.n	ff72 <cbvprintf+0xa6>
			conv->flag_plus = true;
    ff38:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ff3c:	f043 0308 	orr.w	r3, r3, #8
    ff40:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    ff44:	e7f4      	b.n	ff30 <cbvprintf+0x64>
			conv->flag_space = true;
    ff46:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ff4a:	f043 0310 	orr.w	r3, r3, #16
    ff4e:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    ff52:	e7ed      	b.n	ff30 <cbvprintf+0x64>
			conv->flag_hash = true;
    ff54:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ff58:	f043 0320 	orr.w	r3, r3, #32
    ff5c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    ff60:	e7e6      	b.n	ff30 <cbvprintf+0x64>
			conv->flag_zero = true;
    ff62:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ff66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ff6a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    ff6e:	e7df      	b.n	ff30 <cbvprintf+0x64>
		switch (*sp) {
    ff70:	2700      	movs	r7, #0
	} while (loop);
    ff72:	b34f      	cbz	r7, ffc8 <cbvprintf+0xfc>
		switch (*sp) {
    ff74:	f898 3000 	ldrb.w	r3, [r8]
    ff78:	3b20      	subs	r3, #32
    ff7a:	2b10      	cmp	r3, #16
    ff7c:	d8f8      	bhi.n	ff70 <cbvprintf+0xa4>
    ff7e:	a201      	add	r2, pc, #4	; (adr r2, ff84 <cbvprintf+0xb8>)
    ff80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ff84:	0000ff47 	.word	0x0000ff47
    ff88:	0000ff71 	.word	0x0000ff71
    ff8c:	0000ff71 	.word	0x0000ff71
    ff90:	0000ff55 	.word	0x0000ff55
    ff94:	0000ff71 	.word	0x0000ff71
    ff98:	0000ff71 	.word	0x0000ff71
    ff9c:	0000ff71 	.word	0x0000ff71
    ffa0:	0000ff71 	.word	0x0000ff71
    ffa4:	0000ff71 	.word	0x0000ff71
    ffa8:	0000ff71 	.word	0x0000ff71
    ffac:	0000ff71 	.word	0x0000ff71
    ffb0:	0000ff39 	.word	0x0000ff39
    ffb4:	0000ff71 	.word	0x0000ff71
    ffb8:	0000ff25 	.word	0x0000ff25
    ffbc:	0000ff71 	.word	0x0000ff71
    ffc0:	0000ff71 	.word	0x0000ff71
    ffc4:	0000ff63 	.word	0x0000ff63
	if (conv->flag_zero && conv->flag_dash) {
    ffc8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ffcc:	f003 0344 	and.w	r3, r3, #68	; 0x44
    ffd0:	2b44      	cmp	r3, #68	; 0x44
    ffd2:	d06d      	beq.n	100b0 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    ffd4:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    ffd8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    ffdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ffe0:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    ffe4:	f898 3000 	ldrb.w	r3, [r8]
    ffe8:	2b2a      	cmp	r3, #42	; 0x2a
    ffea:	d068      	beq.n	100be <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    ffec:	a805      	add	r0, sp, #20
    ffee:	f010 fb03 	bl	205f8 <extract_decimal>
	if (sp != wp) {
    fff2:	9b05      	ldr	r3, [sp, #20]
    fff4:	4598      	cmp	r8, r3
    fff6:	d012      	beq.n	1001e <cbvprintf+0x152>
		conv->width_present = true;
    fff8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10000:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   10004:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   10006:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   1000a:	2800      	cmp	r0, #0
   1000c:	db60      	blt.n	100d0 <cbvprintf+0x204>
   1000e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   10010:	4313      	orrs	r3, r2
   10012:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10016:	f363 0241 	bfi	r2, r3, #1, #1
   1001a:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1001e:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   10020:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10022:	781b      	ldrb	r3, [r3, #0]
   10024:	2b2e      	cmp	r3, #46	; 0x2e
   10026:	bf14      	ite	ne
   10028:	2300      	movne	r3, #0
   1002a:	2301      	moveq	r3, #1
   1002c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10030:	f363 0241 	bfi	r2, r3, #1, #1
   10034:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   10038:	2b00      	cmp	r3, #0
   1003a:	d04b      	beq.n	100d4 <cbvprintf+0x208>
	++sp;
   1003c:	9b05      	ldr	r3, [sp, #20]
   1003e:	1c5a      	adds	r2, r3, #1
   10040:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10042:	785b      	ldrb	r3, [r3, #1]
   10044:	2b2a      	cmp	r3, #42	; 0x2a
   10046:	d048      	beq.n	100da <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   10048:	a805      	add	r0, sp, #20
   1004a:	f010 fad5 	bl	205f8 <extract_decimal>
	conv->prec_value = prec;
   1004e:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   10050:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10054:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   10058:	2800      	cmp	r0, #0
   1005a:	db47      	blt.n	100ec <cbvprintf+0x220>
   1005c:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   1005e:	4313      	orrs	r3, r2
   10060:	f89d 2020 	ldrb.w	r2, [sp, #32]
   10064:	f363 0241 	bfi	r2, r3, #1, #1
   10068:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   1006c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   10070:	f898 3000 	ldrb.w	r3, [r8]
   10074:	3b4c      	subs	r3, #76	; 0x4c
   10076:	2b2e      	cmp	r3, #46	; 0x2e
   10078:	f200 80dc 	bhi.w	10234 <cbvprintf+0x368>
   1007c:	e8df f003 	tbb	[pc, r3]
   10080:	dadadaca 	.word	0xdadadaca
   10084:	dadadada 	.word	0xdadadada
   10088:	dadadada 	.word	0xdadadada
   1008c:	dadadada 	.word	0xdadadada
   10090:	dadadada 	.word	0xdadadada
   10094:	dadadada 	.word	0xdadadada
   10098:	dadadada 	.word	0xdadadada
   1009c:	da6ada38 	.word	0xda6ada38
   100a0:	dadada51 	.word	0xdadada51
   100a4:	dadadada 	.word	0xdadadada
   100a8:	dadadac0 	.word	0xdadadac0
   100ac:	dada      	.short	0xdada
   100ae:	b6          	.byte	0xb6
   100af:	00          	.byte	0x00
		conv->flag_zero = false;
   100b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   100b4:	f36f 1386 	bfc	r3, #6, #1
   100b8:	f88d 3020 	strb.w	r3, [sp, #32]
   100bc:	e78a      	b.n	ffd4 <cbvprintf+0x108>
		conv->width_star = true;
   100be:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   100c2:	f043 0301 	orr.w	r3, r3, #1
   100c6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   100ca:	4643      	mov	r3, r8
   100cc:	3301      	adds	r3, #1
   100ce:	e7a7      	b.n	10020 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   100d0:	2201      	movs	r2, #1
   100d2:	e79d      	b.n	10010 <cbvprintf+0x144>
		return sp;
   100d4:	f8dd 8014 	ldr.w	r8, [sp, #20]
   100d8:	e7ca      	b.n	10070 <cbvprintf+0x1a4>
		conv->prec_star = true;
   100da:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   100de:	f043 0304 	orr.w	r3, r3, #4
   100e2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   100e6:	f102 0801 	add.w	r8, r2, #1
   100ea:	e7c1      	b.n	10070 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   100ec:	2201      	movs	r2, #1
   100ee:	e7b6      	b.n	1005e <cbvprintf+0x192>
		if (*++sp == 'h') {
   100f0:	f108 0201 	add.w	r2, r8, #1
   100f4:	f898 3001 	ldrb.w	r3, [r8, #1]
   100f8:	2b68      	cmp	r3, #104	; 0x68
   100fa:	d008      	beq.n	1010e <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   100fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10100:	2102      	movs	r1, #2
   10102:	f361 03c6 	bfi	r3, r1, #3, #4
   10106:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   1010a:	4690      	mov	r8, r2
   1010c:	e02b      	b.n	10166 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   1010e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10112:	2201      	movs	r2, #1
   10114:	f362 03c6 	bfi	r3, r2, #3, #4
   10118:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1011c:	f108 0802 	add.w	r8, r8, #2
   10120:	e021      	b.n	10166 <cbvprintf+0x29a>
		if (*++sp == 'l') {
   10122:	f108 0201 	add.w	r2, r8, #1
   10126:	f898 3001 	ldrb.w	r3, [r8, #1]
   1012a:	2b6c      	cmp	r3, #108	; 0x6c
   1012c:	d008      	beq.n	10140 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   1012e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10132:	2103      	movs	r1, #3
   10134:	f361 03c6 	bfi	r3, r1, #3, #4
   10138:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   1013c:	4690      	mov	r8, r2
   1013e:	e012      	b.n	10166 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   10140:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10144:	2204      	movs	r2, #4
   10146:	f362 03c6 	bfi	r3, r2, #3, #4
   1014a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   1014e:	f108 0802 	add.w	r8, r8, #2
   10152:	e008      	b.n	10166 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   10154:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10158:	2205      	movs	r2, #5
   1015a:	f362 03c6 	bfi	r3, r2, #3, #4
   1015e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10162:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   10166:	f818 3b01 	ldrb.w	r3, [r8], #1
   1016a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   1016e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10172:	2a37      	cmp	r2, #55	; 0x37
   10174:	f200 8150 	bhi.w	10418 <cbvprintf+0x54c>
   10178:	e8df f012 	tbh	[pc, r2, lsl #1]
   1017c:	014e0126 	.word	0x014e0126
   10180:	014e014e 	.word	0x014e014e
   10184:	01260126 	.word	0x01260126
   10188:	014e0126 	.word	0x014e0126
   1018c:	014e014e 	.word	0x014e014e
   10190:	014e014e 	.word	0x014e014e
   10194:	014e014e 	.word	0x014e014e
   10198:	014e014e 	.word	0x014e014e
   1019c:	014e014e 	.word	0x014e014e
   101a0:	014e014e 	.word	0x014e014e
   101a4:	014e014e 	.word	0x014e014e
   101a8:	0113014e 	.word	0x0113014e
   101ac:	014e014e 	.word	0x014e014e
   101b0:	014e014e 	.word	0x014e014e
   101b4:	014e014e 	.word	0x014e014e
   101b8:	014e014e 	.word	0x014e014e
   101bc:	014e0126 	.word	0x014e0126
   101c0:	00630113 	.word	0x00630113
   101c4:	01260126 	.word	0x01260126
   101c8:	014e0126 	.word	0x014e0126
   101cc:	014e0063 	.word	0x014e0063
   101d0:	014e014e 	.word	0x014e014e
   101d4:	012f014e 	.word	0x012f014e
   101d8:	013f0113 	.word	0x013f0113
   101dc:	014e014e 	.word	0x014e014e
   101e0:	014e013f 	.word	0x014e013f
   101e4:	014e0113 	.word	0x014e0113
   101e8:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   101ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   101f0:	2206      	movs	r2, #6
   101f2:	f362 03c6 	bfi	r3, r2, #3, #4
   101f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   101fa:	f108 0801 	add.w	r8, r8, #1
		break;
   101fe:	e7b2      	b.n	10166 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   10200:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10204:	2207      	movs	r2, #7
   10206:	f362 03c6 	bfi	r3, r2, #3, #4
   1020a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1020e:	f108 0801 	add.w	r8, r8, #1
		break;
   10212:	e7a8      	b.n	10166 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   10214:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10218:	2208      	movs	r2, #8
   1021a:	f362 03c6 	bfi	r3, r2, #3, #4
   1021e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   10222:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   10226:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1022a:	f043 0302 	orr.w	r3, r3, #2
   1022e:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10232:	e798      	b.n	10166 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   10234:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10238:	f36f 03c6 	bfc	r3, #3, #4
   1023c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   10240:	e791      	b.n	10166 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   10242:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   10246:	2101      	movs	r1, #1
   10248:	f361 0202 	bfi	r2, r1, #0, #3
   1024c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   10250:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   10254:	f002 0278 	and.w	r2, r2, #120	; 0x78
   10258:	2a40      	cmp	r2, #64	; 0x40
   1025a:	f000 80aa 	beq.w	103b2 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   1025e:	2b63      	cmp	r3, #99	; 0x63
   10260:	f000 80ae 	beq.w	103c0 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   10264:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10268:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1026c:	4317      	orrs	r7, r2
   1026e:	f367 0341 	bfi	r3, r7, #1, #1
   10272:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   10276:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1027a:	f013 0f01 	tst.w	r3, #1
   1027e:	f000 80da 	beq.w	10436 <cbvprintf+0x56a>
			width = va_arg(ap, int);
   10282:	9b03      	ldr	r3, [sp, #12]
   10284:	1d1a      	adds	r2, r3, #4
   10286:	9203      	str	r2, [sp, #12]
   10288:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   1028a:	2f00      	cmp	r7, #0
   1028c:	f2c0 80cb 	blt.w	10426 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   10290:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10294:	f013 0f04 	tst.w	r3, #4
   10298:	f000 80df 	beq.w	1045a <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   1029c:	9b03      	ldr	r3, [sp, #12]
   1029e:	1d1a      	adds	r2, r3, #4
   102a0:	9203      	str	r2, [sp, #12]
   102a2:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   102a6:	f1bb 0f00 	cmp.w	fp, #0
   102aa:	f2c0 80cd 	blt.w	10448 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   102ae:	2300      	movs	r3, #0
   102b0:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   102b2:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   102b4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   102b8:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   102bc:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   102c0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   102c4:	2b01      	cmp	r3, #1
   102c6:	f000 80d1 	beq.w	1046c <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   102ca:	2b02      	cmp	r3, #2
   102cc:	f000 8116 	beq.w	104fc <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   102d0:	2b04      	cmp	r3, #4
   102d2:	f000 8167 	beq.w	105a4 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   102d6:	2b03      	cmp	r3, #3
   102d8:	f000 817e 	beq.w	105d8 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   102dc:	f89d 9020 	ldrb.w	r9, [sp, #32]
   102e0:	f019 0303 	ands.w	r3, r9, #3
   102e4:	9302      	str	r3, [sp, #8]
   102e6:	f040 817d 	bne.w	105e4 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   102ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   102ee:	3b25      	subs	r3, #37	; 0x25
   102f0:	2b53      	cmp	r3, #83	; 0x53
   102f2:	f200 8233 	bhi.w	1075c <cbvprintf+0x890>
   102f6:	e8df f013 	tbh	[pc, r3, lsl #1]
   102fa:	0181      	.short	0x0181
   102fc:	02310231 	.word	0x02310231
   10300:	02310231 	.word	0x02310231
   10304:	02310231 	.word	0x02310231
   10308:	02310231 	.word	0x02310231
   1030c:	02310231 	.word	0x02310231
   10310:	02310231 	.word	0x02310231
   10314:	02310231 	.word	0x02310231
   10318:	02310231 	.word	0x02310231
   1031c:	02310231 	.word	0x02310231
   10320:	02310231 	.word	0x02310231
   10324:	02310231 	.word	0x02310231
   10328:	02310231 	.word	0x02310231
   1032c:	02310231 	.word	0x02310231
   10330:	02310231 	.word	0x02310231
   10334:	02310231 	.word	0x02310231
   10338:	02310231 	.word	0x02310231
   1033c:	02310231 	.word	0x02310231
   10340:	02310231 	.word	0x02310231
   10344:	02310231 	.word	0x02310231
   10348:	02310231 	.word	0x02310231
   1034c:	02310231 	.word	0x02310231
   10350:	02310231 	.word	0x02310231
   10354:	02310231 	.word	0x02310231
   10358:	02310231 	.word	0x02310231
   1035c:	02310231 	.word	0x02310231
   10360:	023101c7 	.word	0x023101c7
   10364:	02310231 	.word	0x02310231
   10368:	02310231 	.word	0x02310231
   1036c:	02310231 	.word	0x02310231
   10370:	02310231 	.word	0x02310231
   10374:	01a10231 	.word	0x01a10231
   10378:	023101ab 	.word	0x023101ab
   1037c:	02310231 	.word	0x02310231
   10380:	01ab0231 	.word	0x01ab0231
   10384:	02310231 	.word	0x02310231
   10388:	02310231 	.word	0x02310231
   1038c:	01c70208 	.word	0x01c70208
   10390:	023101ea 	.word	0x023101ea
   10394:	018f0231 	.word	0x018f0231
   10398:	01c70231 	.word	0x01c70231
   1039c:	02310231 	.word	0x02310231
   103a0:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   103a2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   103a6:	2102      	movs	r1, #2
   103a8:	f361 0202 	bfi	r2, r1, #0, #3
   103ac:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   103b0:	e74e      	b.n	10250 <cbvprintf+0x384>
			conv->invalid = true;
   103b2:	f89d 1020 	ldrb.w	r1, [sp, #32]
   103b6:	f041 0101 	orr.w	r1, r1, #1
   103ba:	f88d 1020 	strb.w	r1, [sp, #32]
   103be:	e74e      	b.n	1025e <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   103c0:	1e17      	subs	r7, r2, #0
   103c2:	bf18      	it	ne
   103c4:	2701      	movne	r7, #1
   103c6:	e74d      	b.n	10264 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   103c8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   103cc:	2204      	movs	r2, #4
   103ce:	f362 0302 	bfi	r3, r2, #0, #3
   103d2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   103d6:	2701      	movs	r7, #1
			break;
   103d8:	e744      	b.n	10264 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   103da:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   103de:	2203      	movs	r2, #3
   103e0:	f362 0302 	bfi	r3, r2, #0, #3
   103e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   103e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   103ec:	f003 0378 	and.w	r3, r3, #120	; 0x78
   103f0:	2b40      	cmp	r3, #64	; 0x40
   103f2:	f47f af37 	bne.w	10264 <cbvprintf+0x398>
			unsupported = true;
   103f6:	2701      	movs	r7, #1
   103f8:	e734      	b.n	10264 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   103fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   103fe:	2203      	movs	r2, #3
   10400:	f362 0302 	bfi	r3, r2, #0, #3
   10404:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   10408:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1040c:	f013 0f78 	tst.w	r3, #120	; 0x78
   10410:	f43f af28 	beq.w	10264 <cbvprintf+0x398>
			unsupported = true;
   10414:	2701      	movs	r7, #1
   10416:	e725      	b.n	10264 <cbvprintf+0x398>
		conv->invalid = true;
   10418:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1041c:	f043 0301 	orr.w	r3, r3, #1
   10420:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10424:	e71e      	b.n	10264 <cbvprintf+0x398>
				conv->flag_dash = true;
   10426:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1042a:	f043 0304 	orr.w	r3, r3, #4
   1042e:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   10432:	427f      	negs	r7, r7
   10434:	e72c      	b.n	10290 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   10436:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   1043a:	2b00      	cmp	r3, #0
   1043c:	db02      	blt.n	10444 <cbvprintf+0x578>
		int width = -1;
   1043e:	f04f 37ff 	mov.w	r7, #4294967295
   10442:	e725      	b.n	10290 <cbvprintf+0x3c4>
			width = conv->width_value;
   10444:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10446:	e723      	b.n	10290 <cbvprintf+0x3c4>
				conv->prec_present = false;
   10448:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1044c:	f36f 0341 	bfc	r3, #1, #1
   10450:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   10454:	f04f 3bff 	mov.w	fp, #4294967295
   10458:	e729      	b.n	102ae <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   1045a:	f013 0f02 	tst.w	r3, #2
   1045e:	d002      	beq.n	10466 <cbvprintf+0x59a>
			precision = conv->prec_value;
   10460:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10464:	e723      	b.n	102ae <cbvprintf+0x3e2>
		int precision = -1;
   10466:	f04f 3bff 	mov.w	fp, #4294967295
   1046a:	e720      	b.n	102ae <cbvprintf+0x3e2>
			switch (length_mod) {
   1046c:	1ecb      	subs	r3, r1, #3
   1046e:	2b04      	cmp	r3, #4
   10470:	d804      	bhi.n	1047c <cbvprintf+0x5b0>
   10472:	e8df f003 	tbb	[pc, r3]
   10476:	1d0b      	.short	0x1d0b
   10478:	3529      	.short	0x3529
   1047a:	35          	.byte	0x35
   1047b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   1047c:	9b03      	ldr	r3, [sp, #12]
   1047e:	1d1a      	adds	r2, r3, #4
   10480:	9203      	str	r2, [sp, #12]
   10482:	681a      	ldr	r2, [r3, #0]
   10484:	17d3      	asrs	r3, r2, #31
   10486:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1048a:	e006      	b.n	1049a <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   1048c:	9b03      	ldr	r3, [sp, #12]
   1048e:	1d1a      	adds	r2, r3, #4
   10490:	9203      	str	r2, [sp, #12]
   10492:	681a      	ldr	r2, [r3, #0]
   10494:	17d3      	asrs	r3, r2, #31
   10496:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1049a:	2901      	cmp	r1, #1
   1049c:	d028      	beq.n	104f0 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   1049e:	2902      	cmp	r1, #2
   104a0:	f47f af1c 	bne.w	102dc <cbvprintf+0x410>
				value->sint = (short)value->sint;
   104a4:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   104a8:	17d3      	asrs	r3, r2, #31
   104aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   104ae:	e715      	b.n	102dc <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   104b0:	9b03      	ldr	r3, [sp, #12]
   104b2:	3307      	adds	r3, #7
   104b4:	f023 0307 	bic.w	r3, r3, #7
   104b8:	f103 0208 	add.w	r2, r3, #8
   104bc:	9203      	str	r2, [sp, #12]
   104be:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   104c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   104c6:	e7e8      	b.n	1049a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   104c8:	9b03      	ldr	r3, [sp, #12]
   104ca:	3307      	adds	r3, #7
   104cc:	f023 0307 	bic.w	r3, r3, #7
   104d0:	f103 0208 	add.w	r2, r3, #8
   104d4:	9203      	str	r2, [sp, #12]
   104d6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   104da:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   104de:	e7dc      	b.n	1049a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   104e0:	9b03      	ldr	r3, [sp, #12]
   104e2:	1d1a      	adds	r2, r3, #4
   104e4:	9203      	str	r2, [sp, #12]
   104e6:	681a      	ldr	r2, [r3, #0]
   104e8:	17d3      	asrs	r3, r2, #31
				value->sint =
   104ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   104ee:	e7d4      	b.n	1049a <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   104f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   104f4:	9306      	str	r3, [sp, #24]
   104f6:	2300      	movs	r3, #0
   104f8:	9307      	str	r3, [sp, #28]
   104fa:	e6ef      	b.n	102dc <cbvprintf+0x410>
			switch (length_mod) {
   104fc:	1ecb      	subs	r3, r1, #3
   104fe:	2b04      	cmp	r3, #4
   10500:	d804      	bhi.n	1050c <cbvprintf+0x640>
   10502:	e8df f003 	tbb	[pc, r3]
   10506:	1f0b      	.short	0x1f0b
   10508:	4135      	.short	0x4135
   1050a:	41          	.byte	0x41
   1050b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   1050c:	9b03      	ldr	r3, [sp, #12]
   1050e:	1d1a      	adds	r2, r3, #4
   10510:	9203      	str	r2, [sp, #12]
   10512:	681b      	ldr	r3, [r3, #0]
   10514:	9306      	str	r3, [sp, #24]
   10516:	2300      	movs	r3, #0
   10518:	9307      	str	r3, [sp, #28]
				break;
   1051a:	e01e      	b.n	1055a <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   1051c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   10520:	2b63      	cmp	r3, #99	; 0x63
   10522:	d007      	beq.n	10534 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   10524:	9b03      	ldr	r3, [sp, #12]
   10526:	1d1a      	adds	r2, r3, #4
   10528:	9203      	str	r2, [sp, #12]
   1052a:	681b      	ldr	r3, [r3, #0]
   1052c:	9306      	str	r3, [sp, #24]
   1052e:	2300      	movs	r3, #0
   10530:	9307      	str	r3, [sp, #28]
   10532:	e012      	b.n	1055a <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   10534:	9b03      	ldr	r3, [sp, #12]
   10536:	1d1a      	adds	r2, r3, #4
   10538:	9203      	str	r2, [sp, #12]
   1053a:	681b      	ldr	r3, [r3, #0]
   1053c:	9306      	str	r3, [sp, #24]
   1053e:	2300      	movs	r3, #0
   10540:	9307      	str	r3, [sp, #28]
   10542:	e00a      	b.n	1055a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   10544:	9b03      	ldr	r3, [sp, #12]
   10546:	3307      	adds	r3, #7
   10548:	f023 0307 	bic.w	r3, r3, #7
   1054c:	f103 0208 	add.w	r2, r3, #8
   10550:	9203      	str	r2, [sp, #12]
   10552:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10556:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   1055a:	2901      	cmp	r1, #1
   1055c:	d01c      	beq.n	10598 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   1055e:	2902      	cmp	r1, #2
   10560:	f47f aebc 	bne.w	102dc <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   10564:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10568:	9306      	str	r3, [sp, #24]
   1056a:	2300      	movs	r3, #0
   1056c:	9307      	str	r3, [sp, #28]
   1056e:	e6b5      	b.n	102dc <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   10570:	9b03      	ldr	r3, [sp, #12]
   10572:	3307      	adds	r3, #7
   10574:	f023 0307 	bic.w	r3, r3, #7
   10578:	f103 0208 	add.w	r2, r3, #8
   1057c:	9203      	str	r2, [sp, #12]
   1057e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10582:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   10586:	e7e8      	b.n	1055a <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   10588:	9b03      	ldr	r3, [sp, #12]
   1058a:	1d1a      	adds	r2, r3, #4
   1058c:	9203      	str	r2, [sp, #12]
   1058e:	681b      	ldr	r3, [r3, #0]
				value->uint =
   10590:	9306      	str	r3, [sp, #24]
   10592:	2300      	movs	r3, #0
   10594:	9307      	str	r3, [sp, #28]
				break;
   10596:	e7e0      	b.n	1055a <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   10598:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1059c:	9306      	str	r3, [sp, #24]
   1059e:	2300      	movs	r3, #0
   105a0:	9307      	str	r3, [sp, #28]
   105a2:	e69b      	b.n	102dc <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   105a4:	2908      	cmp	r1, #8
   105a6:	d00b      	beq.n	105c0 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   105a8:	9b03      	ldr	r3, [sp, #12]
   105aa:	3307      	adds	r3, #7
   105ac:	f023 0307 	bic.w	r3, r3, #7
   105b0:	f103 0208 	add.w	r2, r3, #8
   105b4:	9203      	str	r2, [sp, #12]
   105b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   105ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   105be:	e68d      	b.n	102dc <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   105c0:	9b03      	ldr	r3, [sp, #12]
   105c2:	3307      	adds	r3, #7
   105c4:	f023 0307 	bic.w	r3, r3, #7
   105c8:	f103 0208 	add.w	r2, r3, #8
   105cc:	9203      	str	r2, [sp, #12]
   105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   105d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   105d6:	e681      	b.n	102dc <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   105d8:	9b03      	ldr	r3, [sp, #12]
   105da:	1d1a      	adds	r2, r3, #4
   105dc:	9203      	str	r2, [sp, #12]
   105de:	681b      	ldr	r3, [r3, #0]
   105e0:	9306      	str	r3, [sp, #24]
   105e2:	e67b      	b.n	102dc <cbvprintf+0x410>
			OUTS(sp, fp);
   105e4:	4643      	mov	r3, r8
   105e6:	4652      	mov	r2, sl
   105e8:	4629      	mov	r1, r5
   105ea:	4630      	mov	r0, r6
   105ec:	f010 f881 	bl	206f2 <outs>
   105f0:	2800      	cmp	r0, #0
   105f2:	f2c0 814f 	blt.w	10894 <cbvprintf+0x9c8>
   105f6:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   105f8:	46c2      	mov	sl, r8
			continue;
   105fa:	e46f      	b.n	fedc <cbvprintf+0x10>
		case '%':
			OUTC('%');
   105fc:	4629      	mov	r1, r5
   105fe:	2025      	movs	r0, #37	; 0x25
   10600:	47b0      	blx	r6
   10602:	2800      	cmp	r0, #0
   10604:	f2c0 8146 	blt.w	10894 <cbvprintf+0x9c8>
   10608:	3401      	adds	r4, #1
		char sign = 0;
   1060a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1060e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   10612:	f04f 0a00 	mov.w	sl, #0
			break;
   10616:	e0a7      	b.n	10768 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   10618:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   1061c:	f1bb 0f00 	cmp.w	fp, #0
   10620:	db08      	blt.n	10634 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   10622:	4659      	mov	r1, fp
   10624:	4650      	mov	r0, sl
   10626:	f010 ff3d 	bl	214a4 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   1062a:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1062e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   10632:	e099      	b.n	10768 <cbvprintf+0x89c>
				len = strlen(bps);
   10634:	4650      	mov	r0, sl
   10636:	f010 ff2d 	bl	21494 <strlen>
   1063a:	e7f6      	b.n	1062a <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1063c:	9b06      	ldr	r3, [sp, #24]
   1063e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   10642:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   10646:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   1064a:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1064e:	e08b      	b.n	10768 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   10650:	f019 0f08 	tst.w	r9, #8
   10654:	d105      	bne.n	10662 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   10656:	f019 0910 	ands.w	r9, r9, #16
   1065a:	d004      	beq.n	10666 <cbvprintf+0x79a>
				sign = ' ';
   1065c:	f04f 0920 	mov.w	r9, #32
   10660:	e001      	b.n	10666 <cbvprintf+0x79a>
				sign = '+';
   10662:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   10666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   1066a:	2a00      	cmp	r2, #0
   1066c:	f173 0100 	sbcs.w	r1, r3, #0
   10670:	db02      	blt.n	10678 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   10672:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10676:	e009      	b.n	1068c <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   10678:	4252      	negs	r2, r2
   1067a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1067e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   10682:	f04f 092d 	mov.w	r9, #45	; 0x2d
   10686:	e001      	b.n	1068c <cbvprintf+0x7c0>
		switch (conv->specifier) {
   10688:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   1068c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   10690:	9300      	str	r3, [sp, #0]
   10692:	ab0c      	add	r3, sp, #48	; 0x30
   10694:	aa08      	add	r2, sp, #32
   10696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1069a:	f00f ffc0 	bl	2061e <encode_uint>
   1069e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   106a0:	f1bb 0f00 	cmp.w	fp, #0
   106a4:	f2c0 8090 	blt.w	107c8 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   106a8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   106ac:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   106b0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   106b4:	f36f 1286 	bfc	r2, #6, #1
   106b8:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   106bc:	459b      	cmp	fp, r3
   106be:	f240 8086 	bls.w	107ce <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   106c2:	ebab 0303 	sub.w	r3, fp, r3
   106c6:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   106c8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   106cc:	e04c      	b.n	10768 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   106ce:	9806      	ldr	r0, [sp, #24]
   106d0:	b930      	cbnz	r0, 106e0 <cbvprintf+0x814>
		char sign = 0;
   106d2:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   106d6:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 1089c <cbvprintf+0x9d0>
			bps = "(nil)";
   106da:	f1ab 0a05 	sub.w	sl, fp, #5
   106de:	e043      	b.n	10768 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   106e0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   106e4:	9300      	str	r3, [sp, #0]
   106e6:	ab0c      	add	r3, sp, #48	; 0x30
   106e8:	aa08      	add	r2, sp, #32
   106ea:	2100      	movs	r1, #0
   106ec:	f00f ff97 	bl	2061e <encode_uint>
   106f0:	4682      	mov	sl, r0
				conv->altform_0c = true;
   106f2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   106f6:	f043 0310 	orr.w	r3, r3, #16
   106fa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   106fe:	2378      	movs	r3, #120	; 0x78
   10700:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   10704:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   10708:	e7ca      	b.n	106a0 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1070a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   1070c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10710:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   10714:	2b07      	cmp	r3, #7
   10716:	d806      	bhi.n	10726 <cbvprintf+0x85a>
   10718:	e8df f003 	tbb	[pc, r3]
   1071c:	100e0c04 	.word	0x100e0c04
   10720:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   10724:	6014      	str	r4, [r2, #0]
		char sign = 0;
   10726:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1072a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1072e:	f04f 0a00 	mov.w	sl, #0
}
   10732:	e019      	b.n	10768 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   10734:	7014      	strb	r4, [r2, #0]
		break;
   10736:	e7f6      	b.n	10726 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   10738:	8014      	strh	r4, [r2, #0]
		break;
   1073a:	e7f4      	b.n	10726 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   1073c:	6014      	str	r4, [r2, #0]
		break;
   1073e:	e7f2      	b.n	10726 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   10740:	4620      	mov	r0, r4
   10742:	17e1      	asrs	r1, r4, #31
   10744:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10748:	e7ed      	b.n	10726 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   1074a:	4620      	mov	r0, r4
   1074c:	17e1      	asrs	r1, r4, #31
   1074e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10752:	e7e8      	b.n	10726 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   10754:	6014      	str	r4, [r2, #0]
		break;
   10756:	e7e6      	b.n	10726 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10758:	6014      	str	r4, [r2, #0]
		break;
   1075a:	e7e4      	b.n	10726 <cbvprintf+0x85a>
		switch (conv->specifier) {
   1075c:	f8dd 9008 	ldr.w	r9, [sp, #8]
   10760:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10764:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   10768:	f1ba 0f00 	cmp.w	sl, #0
   1076c:	f000 808e 	beq.w	1088c <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   10770:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   10774:	f1b9 0f00 	cmp.w	r9, #0
   10778:	d000      	beq.n	1077c <cbvprintf+0x8b0>
			nj_len += 1U;
   1077a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   1077c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   10780:	f011 0f10 	tst.w	r1, #16
   10784:	d026      	beq.n	107d4 <cbvprintf+0x908>
			nj_len += 2U;
   10786:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   10788:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1078a:	4413      	add	r3, r2
		if (conv->pad_fp) {
   1078c:	f011 0f40 	tst.w	r1, #64	; 0x40
   10790:	d001      	beq.n	10796 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   10792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10794:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   10796:	2f00      	cmp	r7, #0
   10798:	dd32      	ble.n	10800 <cbvprintf+0x934>
			width -= (int)nj_len;
   1079a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   1079c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   107a0:	f013 0f04 	tst.w	r3, #4
   107a4:	d12c      	bne.n	10800 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   107a6:	f013 0f40 	tst.w	r3, #64	; 0x40
   107aa:	d018      	beq.n	107de <cbvprintf+0x912>
					if (sign != 0) {
   107ac:	f1b9 0f00 	cmp.w	r9, #0
   107b0:	d018      	beq.n	107e4 <cbvprintf+0x918>
						OUTC(sign);
   107b2:	4629      	mov	r1, r5
   107b4:	4648      	mov	r0, r9
   107b6:	47b0      	blx	r6
   107b8:	2800      	cmp	r0, #0
   107ba:	db6b      	blt.n	10894 <cbvprintf+0x9c8>
   107bc:	3401      	adds	r4, #1
						sign = 0;
   107be:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   107c2:	2330      	movs	r3, #48	; 0x30
   107c4:	9302      	str	r3, [sp, #8]
   107c6:	e00f      	b.n	107e8 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   107c8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   107cc:	e7cc      	b.n	10768 <cbvprintf+0x89c>
   107ce:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   107d2:	e7c9      	b.n	10768 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   107d4:	f011 0f08 	tst.w	r1, #8
   107d8:	d0d6      	beq.n	10788 <cbvprintf+0x8bc>
			nj_len += 1U;
   107da:	3201      	adds	r2, #1
   107dc:	e7d4      	b.n	10788 <cbvprintf+0x8bc>
				char pad = ' ';
   107de:	2320      	movs	r3, #32
   107e0:	9302      	str	r3, [sp, #8]
   107e2:	e001      	b.n	107e8 <cbvprintf+0x91c>
					pad = '0';
   107e4:	2330      	movs	r3, #48	; 0x30
   107e6:	9302      	str	r3, [sp, #8]
   107e8:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   107ea:	1e5f      	subs	r7, r3, #1
   107ec:	2b00      	cmp	r3, #0
   107ee:	dd07      	ble.n	10800 <cbvprintf+0x934>
					OUTC(pad);
   107f0:	4629      	mov	r1, r5
   107f2:	9802      	ldr	r0, [sp, #8]
   107f4:	47b0      	blx	r6
   107f6:	2800      	cmp	r0, #0
   107f8:	db4c      	blt.n	10894 <cbvprintf+0x9c8>
   107fa:	3401      	adds	r4, #1
				while (width-- > 0) {
   107fc:	463b      	mov	r3, r7
   107fe:	e7f4      	b.n	107ea <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   10800:	f1b9 0f00 	cmp.w	r9, #0
   10804:	d005      	beq.n	10812 <cbvprintf+0x946>
			OUTC(sign);
   10806:	4629      	mov	r1, r5
   10808:	4648      	mov	r0, r9
   1080a:	47b0      	blx	r6
   1080c:	2800      	cmp	r0, #0
   1080e:	db41      	blt.n	10894 <cbvprintf+0x9c8>
   10810:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   10812:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10816:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1081a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1081e:	4313      	orrs	r3, r2
   10820:	d005      	beq.n	1082e <cbvprintf+0x962>
				OUTC('0');
   10822:	4629      	mov	r1, r5
   10824:	2030      	movs	r0, #48	; 0x30
   10826:	47b0      	blx	r6
   10828:	2800      	cmp	r0, #0
   1082a:	db33      	blt.n	10894 <cbvprintf+0x9c8>
   1082c:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1082e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10832:	f013 0f10 	tst.w	r3, #16
   10836:	d006      	beq.n	10846 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   10838:	4629      	mov	r1, r5
   1083a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1083e:	47b0      	blx	r6
   10840:	2800      	cmp	r0, #0
   10842:	db27      	blt.n	10894 <cbvprintf+0x9c8>
   10844:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   10846:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   10848:	f103 39ff 	add.w	r9, r3, #4294967295
   1084c:	2b00      	cmp	r3, #0
   1084e:	dd07      	ble.n	10860 <cbvprintf+0x994>
				OUTC('0');
   10850:	4629      	mov	r1, r5
   10852:	2030      	movs	r0, #48	; 0x30
   10854:	47b0      	blx	r6
   10856:	2800      	cmp	r0, #0
   10858:	db1c      	blt.n	10894 <cbvprintf+0x9c8>
   1085a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1085c:	464b      	mov	r3, r9
   1085e:	e7f3      	b.n	10848 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   10860:	465b      	mov	r3, fp
   10862:	4652      	mov	r2, sl
   10864:	4629      	mov	r1, r5
   10866:	4630      	mov	r0, r6
   10868:	f00f ff43 	bl	206f2 <outs>
   1086c:	2800      	cmp	r0, #0
   1086e:	db11      	blt.n	10894 <cbvprintf+0x9c8>
   10870:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   10872:	2f00      	cmp	r7, #0
   10874:	dd07      	ble.n	10886 <cbvprintf+0x9ba>
			OUTC(' ');
   10876:	4629      	mov	r1, r5
   10878:	2020      	movs	r0, #32
   1087a:	47b0      	blx	r6
   1087c:	2800      	cmp	r0, #0
   1087e:	db09      	blt.n	10894 <cbvprintf+0x9c8>
   10880:	3401      	adds	r4, #1
			--width;
   10882:	3f01      	subs	r7, #1
   10884:	e7f5      	b.n	10872 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   10886:	46c2      	mov	sl, r8
   10888:	f7ff bb28 	b.w	fedc <cbvprintf+0x10>
   1088c:	46c2      	mov	sl, r8
   1088e:	f7ff bb25 	b.w	fedc <cbvprintf+0x10>
		}
	}

	return count;
   10892:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   10894:	b013      	add	sp, #76	; 0x4c
   10896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1089a:	bf00      	nop
   1089c:	00025a95 	.word	0x00025a95

000108a0 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   108a0:	b508      	push	{r3, lr}
   108a2:	4604      	mov	r4, r0
   108a4:	f04f 0240 	mov.w	r2, #64	; 0x40
   108a8:	f3ef 8311 	mrs	r3, BASEPRI
   108ac:	f382 8811 	msr	BASEPRI, r2
   108b0:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   108b4:	f010 fbdb 	bl	2106e <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   108b8:	4620      	mov	r0, r4
   108ba:	f002 fe75 	bl	135a8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   108be:	4803      	ldr	r0, [pc, #12]	; (108cc <sys_reboot+0x2c>)
   108c0:	f00f f9b4 	bl	1fc2c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   108c4:	f002 f894 	bl	129f0 <arch_cpu_idle>
   108c8:	e7fc      	b.n	108c4 <sys_reboot+0x24>
   108ca:	bf00      	nop
   108cc:	00025a98 	.word	0x00025a98

000108d0 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   108d0:	4b05      	ldr	r3, [pc, #20]	; (108e8 <is_rodata+0x18>)
   108d2:	4298      	cmp	r0, r3
   108d4:	d304      	bcc.n	108e0 <is_rodata+0x10>
   108d6:	4b05      	ldr	r3, [pc, #20]	; (108ec <is_rodata+0x1c>)
   108d8:	4298      	cmp	r0, r3
   108da:	d303      	bcc.n	108e4 <is_rodata+0x14>
   108dc:	2000      	movs	r0, #0
   108de:	4770      	bx	lr
   108e0:	2000      	movs	r0, #0
   108e2:	4770      	bx	lr
   108e4:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   108e6:	4770      	bx	lr
   108e8:	00025180 	.word	0x00025180
   108ec:	00027ab4 	.word	0x00027ab4

000108f0 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   108f0:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   108f2:	4b06      	ldr	r3, [pc, #24]	; (1090c <thread_set+0x1c>)
   108f4:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   108f6:	b118      	cbz	r0, 10900 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   108f8:	4b05      	ldr	r3, [pc, #20]	; (10910 <thread_set+0x20>)
   108fa:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   108fc:	2b09      	cmp	r3, #9
   108fe:	dc00      	bgt.n	10902 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   10900:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   10902:	4804      	ldr	r0, [pc, #16]	; (10914 <thread_set+0x24>)
   10904:	f00b f90c 	bl	1bb20 <z_impl_k_sem_give>
}
   10908:	e7fa      	b.n	10900 <thread_set+0x10>
   1090a:	bf00      	nop
   1090c:	200362b0 	.word	0x200362b0
   10910:	20036280 	.word	0x20036280
   10914:	20033bf0 	.word	0x20033bf0

00010918 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   10918:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1091a:	4802      	ldr	r0, [pc, #8]	; (10924 <log_process_thread_timer_expiry_fn+0xc>)
   1091c:	f00b f900 	bl	1bb20 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   10920:	bd08      	pop	{r3, pc}
   10922:	bf00      	nop
   10924:	20033bf0 	.word	0x20033bf0

00010928 <next_pending>:
{
   10928:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   1092a:	4803      	ldr	r0, [pc, #12]	; (10938 <next_pending+0x10>)
   1092c:	f00f ff0a 	bl	20744 <log_list_head_peek>
}
   10930:	3800      	subs	r0, #0
   10932:	bf18      	it	ne
   10934:	2001      	movne	r0, #1
   10936:	bd08      	pop	{r3, pc}
   10938:	2003628c 	.word	0x2003628c

0001093c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1093c:	b530      	push	{r4, r5, lr}
   1093e:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   10940:	2200      	movs	r2, #0
   10942:	490f      	ldr	r1, [pc, #60]	; (10980 <enable_logger+0x44>)
   10944:	480f      	ldr	r0, [pc, #60]	; (10984 <enable_logger+0x48>)
   10946:	f014 fb30 	bl	24faa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1094a:	4d0f      	ldr	r5, [pc, #60]	; (10988 <enable_logger+0x4c>)
   1094c:	2200      	movs	r2, #0
   1094e:	2300      	movs	r3, #0
   10950:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10954:	2400      	movs	r4, #0
   10956:	9404      	str	r4, [sp, #16]
   10958:	230e      	movs	r3, #14
   1095a:	9303      	str	r3, [sp, #12]
   1095c:	9402      	str	r4, [sp, #8]
   1095e:	9401      	str	r4, [sp, #4]
   10960:	9400      	str	r4, [sp, #0]
   10962:	4b0a      	ldr	r3, [pc, #40]	; (1098c <enable_logger+0x50>)
   10964:	f44f 7240 	mov.w	r2, #768	; 0x300
   10968:	4909      	ldr	r1, [pc, #36]	; (10990 <enable_logger+0x54>)
   1096a:	4628      	mov	r0, r5
   1096c:	f013 fe58 	bl	24620 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   10970:	4908      	ldr	r1, [pc, #32]	; (10994 <enable_logger+0x58>)
   10972:	4628      	mov	r0, r5
   10974:	f00a fee6 	bl	1b744 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   10978:	4620      	mov	r0, r4
   1097a:	b009      	add	sp, #36	; 0x24
   1097c:	bd30      	pop	{r4, r5, pc}
   1097e:	bf00      	nop
   10980:	00010919 	.word	0x00010919
   10984:	20034878 	.word	0x20034878
   10988:	200348b0 	.word	0x200348b0
   1098c:	00011085 	.word	0x00011085
   10990:	200382e0 	.word	0x200382e0
   10994:	00025ac4 	.word	0x00025ac4

00010998 <log_core_init>:
{
   10998:	b508      	push	{r3, lr}
	panic_mode = false;
   1099a:	4b0b      	ldr	r3, [pc, #44]	; (109c8 <log_core_init+0x30>)
   1099c:	2200      	movs	r2, #0
   1099e:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   109a0:	4b0a      	ldr	r3, [pc, #40]	; (109cc <log_core_init+0x34>)
   109a2:	4a0b      	ldr	r2, [pc, #44]	; (109d0 <log_core_init+0x38>)
   109a4:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   109a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   109aa:	f000 fdc9 	bl	11540 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   109ae:	f000 fbad 	bl	1110c <log_msg_pool_init>
		log_list_init(&list);
   109b2:	4808      	ldr	r0, [pc, #32]	; (109d4 <log_core_init+0x3c>)
   109b4:	f00f feb8 	bl	20728 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   109b8:	2308      	movs	r3, #8
   109ba:	2248      	movs	r2, #72	; 0x48
   109bc:	4906      	ldr	r1, [pc, #24]	; (109d8 <log_core_init+0x40>)
   109be:	4807      	ldr	r0, [pc, #28]	; (109dc <log_core_init+0x44>)
   109c0:	f013 fdcb 	bl	2455a <k_mem_slab_init>
}
   109c4:	bd08      	pop	{r3, pc}
   109c6:	bf00      	nop
   109c8:	2003811b 	.word	0x2003811b
   109cc:	20033910 	.word	0x20033910
   109d0:	0002075d 	.word	0x0002075d
   109d4:	2003628c 	.word	0x2003628c
   109d8:	2003b388 	.word	0x2003b388
   109dc:	20036294 	.word	0x20036294

000109e0 <get_msg>:
{
   109e0:	b510      	push	{r4, lr}
   109e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   109e6:	f3ef 8411 	mrs	r4, BASEPRI
   109ea:	f383 8811 	msr	BASEPRI, r3
   109ee:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   109f2:	4804      	ldr	r0, [pc, #16]	; (10a04 <get_msg+0x24>)
   109f4:	f00f fea8 	bl	20748 <log_list_head_get>
	__asm__ volatile(
   109f8:	f384 8811 	msr	BASEPRI, r4
   109fc:	f3bf 8f6f 	isb	sy
}
   10a00:	bd10      	pop	{r4, pc}
   10a02:	bf00      	nop
   10a04:	2003628c 	.word	0x2003628c

00010a08 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10a08:	4b06      	ldr	r3, [pc, #24]	; (10a24 <z_log_dropped+0x1c>)
   10a0a:	f3bf 8f5b 	dmb	ish
   10a0e:	e853 2f00 	ldrex	r2, [r3]
   10a12:	3201      	adds	r2, #1
   10a14:	e843 2100 	strex	r1, r2, [r3]
   10a18:	2900      	cmp	r1, #0
   10a1a:	d1f8      	bne.n	10a0e <z_log_dropped+0x6>
   10a1c:	f3bf 8f5b 	dmb	ish
}
   10a20:	4770      	bx	lr
   10a22:	bf00      	nop
   10a24:	20036284 	.word	0x20036284

00010a28 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10a28:	4b06      	ldr	r3, [pc, #24]	; (10a44 <z_log_dropped_read_and_clear+0x1c>)
}
   10a2a:	2000      	movs	r0, #0
   10a2c:	4602      	mov	r2, r0
   10a2e:	f3bf 8f5b 	dmb	ish
   10a32:	e853 0f00 	ldrex	r0, [r3]
   10a36:	e843 2100 	strex	r1, r2, [r3]
   10a3a:	2900      	cmp	r1, #0
   10a3c:	d1f9      	bne.n	10a32 <z_log_dropped_read_and_clear+0xa>
   10a3e:	f3bf 8f5b 	dmb	ish
   10a42:	4770      	bx	lr
   10a44:	20036284 	.word	0x20036284

00010a48 <dropped_notify>:
{
   10a48:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   10a4a:	f7ff ffed 	bl	10a28 <z_log_dropped_read_and_clear>
   10a4e:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   10a50:	2400      	movs	r4, #0
   10a52:	e000      	b.n	10a56 <dropped_notify+0xe>
   10a54:	3401      	adds	r4, #1
   10a56:	4b0b      	ldr	r3, [pc, #44]	; (10a84 <dropped_notify+0x3c>)
   10a58:	4a0b      	ldr	r2, [pc, #44]	; (10a88 <dropped_notify+0x40>)
   10a5a:	1a9b      	subs	r3, r3, r2
   10a5c:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10a60:	da0f      	bge.n	10a82 <dropped_notify+0x3a>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   10a62:	4809      	ldr	r0, [pc, #36]	; (10a88 <dropped_notify+0x40>)
   10a64:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   10a68:	6843      	ldr	r3, [r0, #4]
   10a6a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   10a6c:	2b00      	cmp	r3, #0
   10a6e:	d0f1      	beq.n	10a54 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   10a70:	0123      	lsls	r3, r4, #4
   10a72:	4a05      	ldr	r2, [pc, #20]	; (10a88 <dropped_notify+0x40>)
   10a74:	58d3      	ldr	r3, [r2, r3]
   10a76:	691b      	ldr	r3, [r3, #16]
   10a78:	2b00      	cmp	r3, #0
   10a7a:	d0eb      	beq.n	10a54 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   10a7c:	4629      	mov	r1, r5
   10a7e:	4798      	blx	r3
   10a80:	e7e8      	b.n	10a54 <dropped_notify+0xc>
}
   10a82:	bd38      	pop	{r3, r4, r5, pc}
   10a84:	00025534 	.word	0x00025534
   10a88:	00025514 	.word	0x00025514

00010a8c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   10a8c:	4b03      	ldr	r3, [pc, #12]	; (10a9c <z_log_dropped_pending+0x10>)
   10a8e:	6818      	ldr	r0, [r3, #0]
}
   10a90:	2800      	cmp	r0, #0
   10a92:	bfd4      	ite	le
   10a94:	2000      	movle	r0, #0
   10a96:	2001      	movgt	r0, #1
   10a98:	4770      	bx	lr
   10a9a:	bf00      	nop
   10a9c:	20036284 	.word	0x20036284

00010aa0 <log_source_name_get>:
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   10aa0:	4b05      	ldr	r3, [pc, #20]	; (10ab8 <log_source_name_get+0x18>)
   10aa2:	4a06      	ldr	r2, [pc, #24]	; (10abc <log_source_name_get+0x1c>)
   10aa4:	1a9b      	subs	r3, r3, r2
   10aa6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   10aaa:	d202      	bcs.n	10ab2 <log_source_name_get+0x12>
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
	return __log_const_start[source_id].name;
   10aac:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   10ab0:	4770      	bx	lr
   10ab2:	2000      	movs	r0, #0
}
   10ab4:	4770      	bx	lr
   10ab6:	bf00      	nop
   10ab8:	00025514 	.word	0x00025514
   10abc:	0002545c 	.word	0x0002545c

00010ac0 <log_backend_enable>:
{
   10ac0:	b508      	push	{r3, lr}
	id += backend - log_backend_get(0);
   10ac2:	4b0b      	ldr	r3, [pc, #44]	; (10af0 <log_backend_enable+0x30>)
   10ac4:	1ac3      	subs	r3, r0, r3
   10ac6:	111b      	asrs	r3, r3, #4
   10ac8:	3301      	adds	r3, #1
	backend->cb->id = id;
   10aca:	6842      	ldr	r2, [r0, #4]
   10acc:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   10ace:	6843      	ldr	r3, [r0, #4]
   10ad0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   10ad2:	6843      	ldr	r3, [r0, #4]
   10ad4:	2201      	movs	r2, #1
   10ad6:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   10ad8:	4b06      	ldr	r3, [pc, #24]	; (10af4 <log_backend_enable+0x34>)
   10ada:	781b      	ldrb	r3, [r3, #0]
   10adc:	b11b      	cbz	r3, 10ae6 <log_backend_enable+0x26>
	backend_attached = true;
   10ade:	4b05      	ldr	r3, [pc, #20]	; (10af4 <log_backend_enable+0x34>)
   10ae0:	2201      	movs	r2, #1
   10ae2:	701a      	strb	r2, [r3, #0]
}
   10ae4:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   10ae6:	4804      	ldr	r0, [pc, #16]	; (10af8 <log_backend_enable+0x38>)
   10ae8:	f00b f81a 	bl	1bb20 <z_impl_k_sem_give>
}
   10aec:	e7f7      	b.n	10ade <log_backend_enable+0x1e>
   10aee:	bf00      	nop
   10af0:	00025514 	.word	0x00025514
   10af4:	2003811a 	.word	0x2003811a
   10af8:	20033bf0 	.word	0x20033bf0

00010afc <log_init>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10afc:	4b18      	ldr	r3, [pc, #96]	; (10b60 <log_init+0x64>)
   10afe:	f3bf 8f5b 	dmb	ish
   10b02:	e853 2f00 	ldrex	r2, [r3]
   10b06:	1c51      	adds	r1, r2, #1
   10b08:	e843 1000 	strex	r0, r1, [r3]
   10b0c:	2800      	cmp	r0, #0
   10b0e:	d1f8      	bne.n	10b02 <log_init+0x6>
   10b10:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   10b14:	bb1a      	cbnz	r2, 10b5e <log_init+0x62>
{
   10b16:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   10b18:	2400      	movs	r4, #0
   10b1a:	e009      	b.n	10b30 <log_init+0x34>
					   backend->cb->ctx,
   10b1c:	4b11      	ldr	r3, [pc, #68]	; (10b64 <log_init+0x68>)
   10b1e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   10b22:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   10b24:	2204      	movs	r2, #4
   10b26:	6819      	ldr	r1, [r3, #0]
   10b28:	4628      	mov	r0, r5
   10b2a:	f7ff ffc9 	bl	10ac0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10b2e:	3401      	adds	r4, #1
   10b30:	4b0d      	ldr	r3, [pc, #52]	; (10b68 <log_init+0x6c>)
   10b32:	4a0c      	ldr	r2, [pc, #48]	; (10b64 <log_init+0x68>)
   10b34:	1a9b      	subs	r3, r3, r2
   10b36:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10b3a:	da0f      	bge.n	10b5c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   10b3c:	4626      	mov	r6, r4
	return &__log_backends_start[idx];
   10b3e:	4d09      	ldr	r5, [pc, #36]	; (10b64 <log_init+0x68>)
   10b40:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   10b44:	7b2b      	ldrb	r3, [r5, #12]
   10b46:	2b00      	cmp	r3, #0
   10b48:	d0f1      	beq.n	10b2e <log_init+0x32>
			if (backend->api->init != NULL) {
   10b4a:	0123      	lsls	r3, r4, #4
   10b4c:	4a05      	ldr	r2, [pc, #20]	; (10b64 <log_init+0x68>)
   10b4e:	58d3      	ldr	r3, [r2, r3]
   10b50:	699b      	ldr	r3, [r3, #24]
   10b52:	2b00      	cmp	r3, #0
   10b54:	d0e2      	beq.n	10b1c <log_init+0x20>
				backend->api->init(backend);
   10b56:	4628      	mov	r0, r5
   10b58:	4798      	blx	r3
   10b5a:	e7df      	b.n	10b1c <log_init+0x20>
}
   10b5c:	bd70      	pop	{r4, r5, r6, pc}
   10b5e:	4770      	bx	lr
   10b60:	20036288 	.word	0x20036288
   10b64:	00025514 	.word	0x00025514
   10b68:	00025534 	.word	0x00025534

00010b6c <z_log_strdup>:
{
   10b6c:	b510      	push	{r4, lr}
   10b6e:	b082      	sub	sp, #8
   10b70:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   10b72:	f7ff fead 	bl	108d0 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   10b76:	bb10      	cbnz	r0, 10bbe <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   10b78:	2200      	movs	r2, #0
   10b7a:	2300      	movs	r3, #0
   10b7c:	a901      	add	r1, sp, #4
   10b7e:	4811      	ldr	r0, [pc, #68]	; (10bc4 <z_log_strdup+0x58>)
   10b80:	f00a fd8a 	bl	1b698 <k_mem_slab_alloc>
	if (err != 0) {
   10b84:	b108      	cbz	r0, 10b8a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   10b86:	4c10      	ldr	r4, [pc, #64]	; (10bc8 <z_log_strdup+0x5c>)
   10b88:	e019      	b.n	10bbe <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   10b8a:	9b01      	ldr	r3, [sp, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10b8c:	2201      	movs	r2, #1
   10b8e:	f3bf 8f5b 	dmb	ish
   10b92:	e853 1f00 	ldrex	r1, [r3]
   10b96:	e843 2000 	strex	r0, r2, [r3]
   10b9a:	2800      	cmp	r0, #0
   10b9c:	d1f9      	bne.n	10b92 <z_log_strdup+0x26>
   10b9e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   10ba2:	2241      	movs	r2, #65	; 0x41
   10ba4:	4621      	mov	r1, r4
   10ba6:	9801      	ldr	r0, [sp, #4]
   10ba8:	3004      	adds	r0, #4
   10baa:	f010 fc59 	bl	21460 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   10bae:	9c01      	ldr	r4, [sp, #4]
   10bb0:	237e      	movs	r3, #126	; 0x7e
   10bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   10bb6:	2300      	movs	r3, #0
   10bb8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
   10bbc:	3404      	adds	r4, #4
}
   10bbe:	4620      	mov	r0, r4
   10bc0:	b002      	add	sp, #8
   10bc2:	bd10      	pop	{r4, pc}
   10bc4:	20036294 	.word	0x20036294
   10bc8:	00025acc 	.word	0x00025acc

00010bcc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   10bcc:	b140      	cbz	r0, 10be0 <log_is_strdup+0x14>
   10bce:	4a07      	ldr	r2, [pc, #28]	; (10bec <log_is_strdup+0x20>)
   10bd0:	4290      	cmp	r0, r2
   10bd2:	d307      	bcc.n	10be4 <log_is_strdup+0x18>
   10bd4:	f502 7210 	add.w	r2, r2, #576	; 0x240
   10bd8:	4290      	cmp	r0, r2
   10bda:	d305      	bcc.n	10be8 <log_is_strdup+0x1c>
   10bdc:	2000      	movs	r0, #0
   10bde:	4770      	bx	lr
   10be0:	2000      	movs	r0, #0
   10be2:	4770      	bx	lr
   10be4:	2000      	movs	r0, #0
   10be6:	4770      	bx	lr
   10be8:	2001      	movs	r0, #1
}
   10bea:	4770      	bx	lr
   10bec:	2003b388 	.word	0x2003b388

00010bf0 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10bf0:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   10bf2:	f013 0f01 	tst.w	r3, #1
   10bf6:	d000      	beq.n	10bfa <detect_missed_strdup+0xa>
   10bf8:	4770      	bx	lr
{
   10bfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10bfe:	b083      	sub	sp, #12
   10c00:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   10c02:	f00f fe8c 	bl	2091e <log_msg_str_get>
   10c06:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   10c08:	4630      	mov	r0, r6
   10c0a:	f00f fe73 	bl	208f4 <log_msg_nargs_get>
   10c0e:	4601      	mov	r1, r0
   10c10:	4638      	mov	r0, r7
   10c12:	f00f fda7 	bl	20764 <z_log_get_s_mask>
   10c16:	4605      	mov	r5, r0
	while (mask) {
   10c18:	e004      	b.n	10c24 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   10c1a:	2301      	movs	r3, #1
   10c1c:	fa03 f404 	lsl.w	r4, r3, r4
   10c20:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   10c24:	b36d      	cbz	r5, 10c82 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   10c26:	fab5 f485 	clz	r4, r5
   10c2a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10c2e:	4621      	mov	r1, r4
   10c30:	4630      	mov	r0, r6
   10c32:	f00f fe62 	bl	208fa <log_msg_arg_get>
   10c36:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   10c38:	f7ff fe4a 	bl	108d0 <is_rodata>
   10c3c:	2800      	cmp	r0, #0
   10c3e:	d1ec      	bne.n	10c1a <detect_missed_strdup+0x2a>
   10c40:	4648      	mov	r0, r9
   10c42:	f7ff ffc3 	bl	10bcc <log_is_strdup>
   10c46:	2800      	cmp	r0, #0
   10c48:	d1e7      	bne.n	10c1a <detect_missed_strdup+0x2a>
   10c4a:	4b0f      	ldr	r3, [pc, #60]	; (10c88 <detect_missed_strdup+0x98>)
   10c4c:	4599      	cmp	r9, r3
   10c4e:	d0e4      	beq.n	10c1a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   10c50:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   10c52:	f3c1 1189 	ubfx	r1, r1, #6, #10
   10c56:	f7ff ff23 	bl	10aa0 <log_source_name_get>
   10c5a:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10c5c:	4b0b      	ldr	r3, [pc, #44]	; (10c8c <detect_missed_strdup+0x9c>)
   10c5e:	490c      	ldr	r1, [pc, #48]	; (10c90 <detect_missed_strdup+0xa0>)
   10c60:	1a5b      	subs	r3, r3, r1
   10c62:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10c64:	2101      	movs	r1, #1
   10c66:	f361 0802 	bfi	r8, r1, #0, #3
   10c6a:	f36f 08c5 	bfc	r8, #3, #3
   10c6e:	f363 188f 	bfi	r8, r3, #6, #10
   10c72:	f8ad 8000 	strh.w	r8, [sp]
   10c76:	463b      	mov	r3, r7
   10c78:	4621      	mov	r1, r4
   10c7a:	4806      	ldr	r0, [pc, #24]	; (10c94 <detect_missed_strdup+0xa4>)
   10c7c:	f000 f8b2 	bl	10de4 <log_3>
   10c80:	e7cb      	b.n	10c1a <detect_missed_strdup+0x2a>
}
   10c82:	b003      	add	sp, #12
   10c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10c88:	00025acc 	.word	0x00025acc
   10c8c:	000254bc 	.word	0x000254bc
   10c90:	0002545c 	.word	0x0002545c
   10c94:	00025ae8 	.word	0x00025ae8

00010c98 <msg_process>:
{
   10c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10c9a:	4606      	mov	r6, r0
	if (!bypass) {
   10c9c:	bb19      	cbnz	r1, 10ce6 <msg_process+0x4e>
		    !panic_mode) {
   10c9e:	4b14      	ldr	r3, [pc, #80]	; (10cf0 <msg_process+0x58>)
   10ca0:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10ca2:	b10b      	cbz	r3, 10ca8 <msg_process+0x10>
{
   10ca4:	2400      	movs	r4, #0
   10ca6:	e003      	b.n	10cb0 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   10ca8:	f7ff ffa2 	bl	10bf0 <detect_missed_strdup>
   10cac:	e7fa      	b.n	10ca4 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   10cae:	3401      	adds	r4, #1
   10cb0:	4b10      	ldr	r3, [pc, #64]	; (10cf4 <msg_process+0x5c>)
   10cb2:	4a11      	ldr	r2, [pc, #68]	; (10cf8 <msg_process+0x60>)
   10cb4:	1a9b      	subs	r3, r3, r2
   10cb6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10cba:	da14      	bge.n	10ce6 <msg_process+0x4e>
   10cbc:	4d0e      	ldr	r5, [pc, #56]	; (10cf8 <msg_process+0x60>)
   10cbe:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   10cc2:	686b      	ldr	r3, [r5, #4]
   10cc4:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   10cc6:	2b00      	cmp	r3, #0
   10cc8:	d0f1      	beq.n	10cae <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   10cca:	4631      	mov	r1, r6
   10ccc:	4628      	mov	r0, r5
   10cce:	f00f fd43 	bl	20758 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   10cd2:	2800      	cmp	r0, #0
   10cd4:	d0eb      	beq.n	10cae <msg_process+0x16>
	backend->api->put(backend, msg);
   10cd6:	0127      	lsls	r7, r4, #4
   10cd8:	4b07      	ldr	r3, [pc, #28]	; (10cf8 <msg_process+0x60>)
   10cda:	59db      	ldr	r3, [r3, r7]
   10cdc:	685b      	ldr	r3, [r3, #4]
   10cde:	4631      	mov	r1, r6
   10ce0:	4628      	mov	r0, r5
   10ce2:	4798      	blx	r3
}
   10ce4:	e7e3      	b.n	10cae <msg_process+0x16>
			log_msg_put(msg.msg);
   10ce6:	4630      	mov	r0, r6
   10ce8:	f00f fe1b 	bl	20922 <log_msg_put>
}
   10cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10cee:	bf00      	nop
   10cf0:	2003811b 	.word	0x2003811b
   10cf4:	00025534 	.word	0x00025534
   10cf8:	00025514 	.word	0x00025514

00010cfc <z_impl_log_process>:
{
   10cfc:	b510      	push	{r4, lr}
   10cfe:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   10d00:	4b10      	ldr	r3, [pc, #64]	; (10d44 <z_impl_log_process+0x48>)
   10d02:	781b      	ldrb	r3, [r3, #0]
   10d04:	b903      	cbnz	r3, 10d08 <z_impl_log_process+0xc>
   10d06:	b1c8      	cbz	r0, 10d3c <z_impl_log_process+0x40>
	msg = get_msg();
   10d08:	f7ff fe6a 	bl	109e0 <get_msg>
	if (msg.msg) {
   10d0c:	4602      	mov	r2, r0
   10d0e:	b178      	cbz	r0, 10d30 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10d10:	4b0d      	ldr	r3, [pc, #52]	; (10d48 <z_impl_log_process+0x4c>)
   10d12:	f3bf 8f5b 	dmb	ish
   10d16:	e853 1f00 	ldrex	r1, [r3]
   10d1a:	3901      	subs	r1, #1
   10d1c:	e843 1000 	strex	r0, r1, [r3]
   10d20:	2800      	cmp	r0, #0
   10d22:	d1f8      	bne.n	10d16 <z_impl_log_process+0x1a>
   10d24:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   10d28:	4621      	mov	r1, r4
   10d2a:	4610      	mov	r0, r2
   10d2c:	f7ff ffb4 	bl	10c98 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   10d30:	b914      	cbnz	r4, 10d38 <z_impl_log_process+0x3c>
   10d32:	f7ff feab 	bl	10a8c <z_log_dropped_pending>
   10d36:	b910      	cbnz	r0, 10d3e <z_impl_log_process+0x42>
	return next_pending();
   10d38:	f7ff fdf6 	bl	10928 <next_pending>
}
   10d3c:	bd10      	pop	{r4, pc}
		dropped_notify();
   10d3e:	f7ff fe83 	bl	10a48 <dropped_notify>
   10d42:	e7f9      	b.n	10d38 <z_impl_log_process+0x3c>
   10d44:	2003811a 	.word	0x2003811a
   10d48:	20036280 	.word	0x20036280

00010d4c <z_log_msg_post_finalize>:
{
   10d4c:	b510      	push	{r4, lr}
   10d4e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10d50:	4b1f      	ldr	r3, [pc, #124]	; (10dd0 <z_log_msg_post_finalize+0x84>)
   10d52:	f3bf 8f5b 	dmb	ish
   10d56:	e853 2f00 	ldrex	r2, [r3]
   10d5a:	3201      	adds	r2, #1
   10d5c:	e843 2100 	strex	r1, r2, [r3]
   10d60:	2900      	cmp	r1, #0
   10d62:	d1f8      	bne.n	10d56 <z_log_msg_post_finalize+0xa>
   10d64:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   10d68:	4b1a      	ldr	r3, [pc, #104]	; (10dd4 <z_log_msg_post_finalize+0x88>)
   10d6a:	781b      	ldrb	r3, [r3, #0]
   10d6c:	b963      	cbnz	r3, 10d88 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   10d6e:	4b1a      	ldr	r3, [pc, #104]	; (10dd8 <z_log_msg_post_finalize+0x8c>)
   10d70:	681b      	ldr	r3, [r3, #0]
   10d72:	b11b      	cbz	r3, 10d7c <z_log_msg_post_finalize+0x30>
   10d74:	4a16      	ldr	r2, [pc, #88]	; (10dd0 <z_log_msg_post_finalize+0x84>)
   10d76:	6812      	ldr	r2, [r2, #0]
   10d78:	2a01      	cmp	r2, #1
   10d7a:	d015      	beq.n	10da8 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   10d7c:	4a14      	ldr	r2, [pc, #80]	; (10dd0 <z_log_msg_post_finalize+0x84>)
   10d7e:	6812      	ldr	r2, [r2, #0]
   10d80:	2a0a      	cmp	r2, #10
   10d82:	d01c      	beq.n	10dbe <z_log_msg_post_finalize+0x72>
}
   10d84:	b002      	add	sp, #8
   10d86:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   10d88:	f04f 0340 	mov.w	r3, #64	; 0x40
   10d8c:	f3ef 8411 	mrs	r4, BASEPRI
   10d90:	f383 8811 	msr	BASEPRI, r3
   10d94:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   10d98:	2000      	movs	r0, #0
   10d9a:	f7ff ffaf 	bl	10cfc <z_impl_log_process>
	__asm__ volatile(
   10d9e:	f384 8811 	msr	BASEPRI, r4
   10da2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10da6:	e7ed      	b.n	10d84 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
   10da8:	2200      	movs	r2, #0
   10daa:	2300      	movs	r3, #0
   10dac:	e9cd 2300 	strd	r2, r3, [sp]
   10db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10db4:	2300      	movs	r3, #0
   10db6:	4809      	ldr	r0, [pc, #36]	; (10ddc <z_log_msg_post_finalize+0x90>)
   10db8:	f00b fe98 	bl	1caec <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   10dbc:	e7e2      	b.n	10d84 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   10dbe:	2b00      	cmp	r3, #0
   10dc0:	d0e0      	beq.n	10d84 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
   10dc2:	4806      	ldr	r0, [pc, #24]	; (10ddc <z_log_msg_post_finalize+0x90>)
   10dc4:	f014 f8fd 	bl	24fc2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   10dc8:	4805      	ldr	r0, [pc, #20]	; (10de0 <z_log_msg_post_finalize+0x94>)
   10dca:	f00a fea9 	bl	1bb20 <z_impl_k_sem_give>
}
   10dce:	e7d9      	b.n	10d84 <z_log_msg_post_finalize+0x38>
   10dd0:	20036280 	.word	0x20036280
   10dd4:	2003811b 	.word	0x2003811b
   10dd8:	200362b0 	.word	0x200362b0
   10ddc:	20034878 	.word	0x20034878
   10de0:	20033bf0 	.word	0x20033bf0

00010de4 <log_3>:
{
   10de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10de8:	4680      	mov	r8, r0
   10dea:	460f      	mov	r7, r1
   10dec:	4616      	mov	r6, r2
   10dee:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10df0:	f000 f9b0 	bl	11154 <log_msg_chunk_alloc>

	if (msg != NULL) {
   10df4:	4604      	mov	r4, r0
   10df6:	b140      	cbz	r0, 10e0a <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   10df8:	2301      	movs	r3, #1
   10dfa:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10dfc:	2200      	movs	r2, #0
   10dfe:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10e00:	f04f 0300 	mov.w	r3, #0
   10e04:	f362 0300 	bfi	r3, r2, #0, #1
   10e08:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   10e0a:	b14c      	cbz	r4, 10e20 <log_3+0x3c>
		msg->str = str;
   10e0c:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   10e10:	7a63      	ldrb	r3, [r4, #9]
   10e12:	2203      	movs	r2, #3
   10e14:	f362 1307 	bfi	r3, r2, #4, #4
   10e18:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   10e1a:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   10e1c:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   10e1e:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   10e20:	b1c4      	cbz	r4, 10e54 <log_3+0x70>
	msg->hdr.ids = src_level;
   10e22:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10e26:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10e28:	4b0b      	ldr	r3, [pc, #44]	; (10e58 <log_3+0x74>)
   10e2a:	681b      	ldr	r3, [r3, #0]
   10e2c:	4798      	blx	r3
   10e2e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10e30:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e34:	f3ef 8511 	mrs	r5, BASEPRI
   10e38:	f383 8811 	msr	BASEPRI, r3
   10e3c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10e40:	4621      	mov	r1, r4
   10e42:	4806      	ldr	r0, [pc, #24]	; (10e5c <log_3+0x78>)
   10e44:	f00f fc74 	bl	20730 <log_list_add_tail>
	__asm__ volatile(
   10e48:	f385 8811 	msr	BASEPRI, r5
   10e4c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10e50:	f7ff ff7c 	bl	10d4c <z_log_msg_post_finalize>
}
   10e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e58:	20033910 	.word	0x20033910
   10e5c:	2003628c 	.word	0x2003628c

00010e60 <log_1>:
{
   10e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e62:	4606      	mov	r6, r0
   10e64:	460d      	mov	r5, r1
   10e66:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10e68:	f000 f974 	bl	11154 <log_msg_chunk_alloc>
	if (msg != NULL) {
   10e6c:	4604      	mov	r4, r0
   10e6e:	b140      	cbz	r0, 10e82 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   10e70:	2301      	movs	r3, #1
   10e72:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10e74:	2100      	movs	r1, #0
   10e76:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10e78:	f04f 0300 	mov.w	r3, #0
   10e7c:	f361 0300 	bfi	r3, r1, #0, #1
   10e80:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   10e82:	b134      	cbz	r4, 10e92 <log_1+0x32>
		msg->str = str;
   10e84:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   10e86:	7a63      	ldrb	r3, [r4, #9]
   10e88:	2201      	movs	r2, #1
   10e8a:	f362 1307 	bfi	r3, r2, #4, #4
   10e8e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   10e90:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   10e92:	b1b4      	cbz	r4, 10ec2 <log_1+0x62>
	msg->hdr.ids = src_level;
   10e94:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10e96:	4b0b      	ldr	r3, [pc, #44]	; (10ec4 <log_1+0x64>)
   10e98:	681b      	ldr	r3, [r3, #0]
   10e9a:	4798      	blx	r3
   10e9c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10e9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10ea2:	f3ef 8511 	mrs	r5, BASEPRI
   10ea6:	f383 8811 	msr	BASEPRI, r3
   10eaa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10eae:	4621      	mov	r1, r4
   10eb0:	4805      	ldr	r0, [pc, #20]	; (10ec8 <log_1+0x68>)
   10eb2:	f00f fc3d 	bl	20730 <log_list_add_tail>
	__asm__ volatile(
   10eb6:	f385 8811 	msr	BASEPRI, r5
   10eba:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10ebe:	f7ff ff45 	bl	10d4c <z_log_msg_post_finalize>
}
   10ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ec4:	20033910 	.word	0x20033910
   10ec8:	2003628c 	.word	0x2003628c

00010ecc <log_2>:
{
   10ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ed0:	4607      	mov	r7, r0
   10ed2:	460e      	mov	r6, r1
   10ed4:	4615      	mov	r5, r2
   10ed6:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10ed8:	f000 f93c 	bl	11154 <log_msg_chunk_alloc>
	if (msg != NULL) {
   10edc:	4604      	mov	r4, r0
   10ede:	b140      	cbz	r0, 10ef2 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   10ee0:	2301      	movs	r3, #1
   10ee2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10ee4:	2200      	movs	r2, #0
   10ee6:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10ee8:	f04f 0300 	mov.w	r3, #0
   10eec:	f362 0300 	bfi	r3, r2, #0, #1
   10ef0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   10ef2:	b13c      	cbz	r4, 10f04 <log_2+0x38>
		msg->str = str;
   10ef4:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   10ef6:	7a63      	ldrb	r3, [r4, #9]
   10ef8:	2202      	movs	r2, #2
   10efa:	f362 1307 	bfi	r3, r2, #4, #4
   10efe:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   10f00:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   10f02:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   10f04:	b1bc      	cbz	r4, 10f36 <log_2+0x6a>
	msg->hdr.ids = src_level;
   10f06:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10f0a:	4b0c      	ldr	r3, [pc, #48]	; (10f3c <log_2+0x70>)
   10f0c:	681b      	ldr	r3, [r3, #0]
   10f0e:	4798      	blx	r3
   10f10:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10f12:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f16:	f3ef 8511 	mrs	r5, BASEPRI
   10f1a:	f383 8811 	msr	BASEPRI, r3
   10f1e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10f22:	4621      	mov	r1, r4
   10f24:	4806      	ldr	r0, [pc, #24]	; (10f40 <log_2+0x74>)
   10f26:	f00f fc03 	bl	20730 <log_list_add_tail>
	__asm__ volatile(
   10f2a:	f385 8811 	msr	BASEPRI, r5
   10f2e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10f32:	f7ff ff0b 	bl	10d4c <z_log_msg_post_finalize>
}
   10f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f3a:	bf00      	nop
   10f3c:	20033910 	.word	0x20033910
   10f40:	2003628c 	.word	0x2003628c

00010f44 <log_n>:
{
   10f44:	b538      	push	{r3, r4, r5, lr}
   10f46:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   10f48:	f00f fd2f 	bl	209aa <log_msg_create_n>
		if (msg == NULL) {
   10f4c:	b1b8      	cbz	r0, 10f7e <log_n+0x3a>
   10f4e:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   10f50:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   10f52:	4b0b      	ldr	r3, [pc, #44]	; (10f80 <log_n+0x3c>)
   10f54:	681b      	ldr	r3, [r3, #0]
   10f56:	4798      	blx	r3
   10f58:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   10f5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   10f5e:	f3ef 8411 	mrs	r4, BASEPRI
   10f62:	f383 8811 	msr	BASEPRI, r3
   10f66:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10f6a:	4629      	mov	r1, r5
   10f6c:	4805      	ldr	r0, [pc, #20]	; (10f84 <log_n+0x40>)
   10f6e:	f00f fbdf 	bl	20730 <log_list_add_tail>
	__asm__ volatile(
   10f72:	f384 8811 	msr	BASEPRI, r4
   10f76:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10f7a:	f7ff fee7 	bl	10d4c <z_log_msg_post_finalize>
}
   10f7e:	bd38      	pop	{r3, r4, r5, pc}
   10f80:	20033910 	.word	0x20033910
   10f84:	2003628c 	.word	0x2003628c

00010f88 <log_hexdump>:
{
   10f88:	b538      	push	{r3, r4, r5, lr}
   10f8a:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   10f8c:	f00f fd21 	bl	209d2 <log_msg_hexdump_create>
		if (msg == NULL) {
   10f90:	b1b8      	cbz	r0, 10fc2 <log_hexdump+0x3a>
   10f92:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   10f94:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   10f96:	4b0b      	ldr	r3, [pc, #44]	; (10fc4 <log_hexdump+0x3c>)
   10f98:	681b      	ldr	r3, [r3, #0]
   10f9a:	4798      	blx	r3
   10f9c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   10f9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10fa2:	f3ef 8411 	mrs	r4, BASEPRI
   10fa6:	f383 8811 	msr	BASEPRI, r3
   10faa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10fae:	4629      	mov	r1, r5
   10fb0:	4805      	ldr	r0, [pc, #20]	; (10fc8 <log_hexdump+0x40>)
   10fb2:	f00f fbbd 	bl	20730 <log_list_add_tail>
	__asm__ volatile(
   10fb6:	f384 8811 	msr	BASEPRI, r4
   10fba:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10fbe:	f7ff fec5 	bl	10d4c <z_log_msg_post_finalize>
}
   10fc2:	bd38      	pop	{r3, r4, r5, pc}
   10fc4:	20033910 	.word	0x20033910
   10fc8:	2003628c 	.word	0x2003628c

00010fcc <log_0>:
{
   10fcc:	b570      	push	{r4, r5, r6, lr}
   10fce:	4605      	mov	r5, r0
   10fd0:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10fd2:	f000 f8bf 	bl	11154 <log_msg_chunk_alloc>
	if (msg != NULL) {
   10fd6:	4604      	mov	r4, r0
   10fd8:	b140      	cbz	r0, 10fec <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   10fda:	2301      	movs	r3, #1
   10fdc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10fde:	2200      	movs	r2, #0
   10fe0:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10fe2:	f04f 0300 	mov.w	r3, #0
   10fe6:	f362 0300 	bfi	r3, r2, #0, #1
   10fea:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   10fec:	b104      	cbz	r4, 10ff0 <log_0+0x24>
		msg->str = str;
   10fee:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   10ff0:	b1b4      	cbz	r4, 11020 <log_0+0x54>
	msg->hdr.ids = src_level;
   10ff2:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10ff4:	4b0b      	ldr	r3, [pc, #44]	; (11024 <log_0+0x58>)
   10ff6:	681b      	ldr	r3, [r3, #0]
   10ff8:	4798      	blx	r3
   10ffa:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10ffc:	f04f 0340 	mov.w	r3, #64	; 0x40
   11000:	f3ef 8511 	mrs	r5, BASEPRI
   11004:	f383 8811 	msr	BASEPRI, r3
   11008:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1100c:	4621      	mov	r1, r4
   1100e:	4806      	ldr	r0, [pc, #24]	; (11028 <log_0+0x5c>)
   11010:	f00f fb8e 	bl	20730 <log_list_add_tail>
	__asm__ volatile(
   11014:	f385 8811 	msr	BASEPRI, r5
   11018:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1101c:	f7ff fe96 	bl	10d4c <z_log_msg_post_finalize>
}
   11020:	bd70      	pop	{r4, r5, r6, pc}
   11022:	bf00      	nop
   11024:	20033910 	.word	0x20033910
   11028:	2003628c 	.word	0x2003628c

0001102c <z_impl_log_panic>:
	if (panic_mode) {
   1102c:	4b12      	ldr	r3, [pc, #72]	; (11078 <z_impl_log_panic+0x4c>)
   1102e:	781b      	ldrb	r3, [r3, #0]
   11030:	b103      	cbz	r3, 11034 <z_impl_log_panic+0x8>
   11032:	4770      	bx	lr
{
   11034:	b510      	push	{r4, lr}
	log_init();
   11036:	f7ff fd61 	bl	10afc <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1103a:	2400      	movs	r4, #0
   1103c:	e000      	b.n	11040 <z_impl_log_panic+0x14>
   1103e:	3401      	adds	r4, #1
   11040:	4b0e      	ldr	r3, [pc, #56]	; (1107c <z_impl_log_panic+0x50>)
   11042:	4a0f      	ldr	r2, [pc, #60]	; (11080 <z_impl_log_panic+0x54>)
   11044:	1a9b      	subs	r3, r3, r2
   11046:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   1104a:	da0c      	bge.n	11066 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   1104c:	480c      	ldr	r0, [pc, #48]	; (11080 <z_impl_log_panic+0x54>)
   1104e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   11052:	6843      	ldr	r3, [r0, #4]
   11054:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11056:	2b00      	cmp	r3, #0
   11058:	d0f1      	beq.n	1103e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   1105a:	0123      	lsls	r3, r4, #4
   1105c:	4a08      	ldr	r2, [pc, #32]	; (11080 <z_impl_log_panic+0x54>)
   1105e:	58d3      	ldr	r3, [r2, r3]
   11060:	695b      	ldr	r3, [r3, #20]
   11062:	4798      	blx	r3
}
   11064:	e7eb      	b.n	1103e <z_impl_log_panic+0x12>
   11066:	2000      	movs	r0, #0
   11068:	f7ff fe48 	bl	10cfc <z_impl_log_process>
		while (log_process(false) == true) {
   1106c:	2800      	cmp	r0, #0
   1106e:	d1fa      	bne.n	11066 <z_impl_log_panic+0x3a>
	panic_mode = true;
   11070:	4b01      	ldr	r3, [pc, #4]	; (11078 <z_impl_log_panic+0x4c>)
   11072:	2201      	movs	r2, #1
   11074:	701a      	strb	r2, [r3, #0]
}
   11076:	bd10      	pop	{r4, pc}
   11078:	2003811b 	.word	0x2003811b
   1107c:	00025534 	.word	0x00025534
   11080:	00025514 	.word	0x00025514

00011084 <log_process_thread_func>:
{
   11084:	b508      	push	{r3, lr}
	log_init();
   11086:	f7ff fd39 	bl	10afc <log_init>
	return z_impl_k_current_get();
   1108a:	f00b fb27 	bl	1c6dc <z_impl_k_current_get>
	thread_set(k_current_get());
   1108e:	f7ff fc2f 	bl	108f0 <thread_set>
   11092:	e006      	b.n	110a2 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   11094:	f04f 32ff 	mov.w	r2, #4294967295
   11098:	f04f 33ff 	mov.w	r3, #4294967295
   1109c:	4804      	ldr	r0, [pc, #16]	; (110b0 <log_process_thread_func+0x2c>)
   1109e:	f00a fd67 	bl	1bb70 <z_impl_k_sem_take>
   110a2:	2000      	movs	r0, #0
   110a4:	f7ff fe2a 	bl	10cfc <z_impl_log_process>
		if (log_process(false) == false) {
   110a8:	2800      	cmp	r0, #0
   110aa:	d1fa      	bne.n	110a2 <log_process_thread_func+0x1e>
   110ac:	e7f2      	b.n	11094 <log_process_thread_func+0x10>
   110ae:	bf00      	nop
   110b0:	20033bf0 	.word	0x20033bf0

000110b4 <log_free>:
{
   110b4:	b500      	push	{lr}
   110b6:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   110b8:	3804      	subs	r0, #4
   110ba:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   110bc:	f3bf 8f5b 	dmb	ish
   110c0:	e850 3f00 	ldrex	r3, [r0]
   110c4:	1e5a      	subs	r2, r3, #1
   110c6:	e840 2100 	strex	r1, r2, [r0]
   110ca:	2900      	cmp	r1, #0
   110cc:	d1f8      	bne.n	110c0 <log_free+0xc>
   110ce:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   110d2:	2b01      	cmp	r3, #1
   110d4:	d002      	beq.n	110dc <log_free+0x28>
}
   110d6:	b003      	add	sp, #12
   110d8:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   110dc:	a901      	add	r1, sp, #4
   110de:	4802      	ldr	r0, [pc, #8]	; (110e8 <log_free+0x34>)
   110e0:	f013 fa49 	bl	24576 <k_mem_slab_free>
}
   110e4:	e7f7      	b.n	110d6 <log_free+0x22>
   110e6:	bf00      	nop
   110e8:	20036294 	.word	0x20036294

000110ec <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   110ec:	b510      	push	{r4, lr}
   110ee:	b082      	sub	sp, #8
   110f0:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   110f2:	9b01      	ldr	r3, [sp, #4]
   110f4:	b133      	cbz	r3, 11104 <cont_free+0x18>
		next = cont->next;
   110f6:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   110f8:	a901      	add	r1, sp, #4
   110fa:	4803      	ldr	r0, [pc, #12]	; (11108 <cont_free+0x1c>)
   110fc:	f013 fa3b 	bl	24576 <k_mem_slab_free>
		cont = next;
   11100:	9401      	str	r4, [sp, #4]
   11102:	e7f6      	b.n	110f2 <cont_free+0x6>
	}
}
   11104:	b002      	add	sp, #8
   11106:	bd10      	pop	{r4, pc}
   11108:	200362b4 	.word	0x200362b4

0001110c <log_msg_pool_init>:
{
   1110c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   1110e:	2320      	movs	r3, #32
   11110:	461a      	mov	r2, r3
   11112:	4902      	ldr	r1, [pc, #8]	; (1111c <log_msg_pool_init+0x10>)
   11114:	4802      	ldr	r0, [pc, #8]	; (11120 <log_msg_pool_init+0x14>)
   11116:	f013 fa20 	bl	2455a <k_mem_slab_init>
}
   1111a:	bd08      	pop	{r3, pc}
   1111c:	2003b5c8 	.word	0x2003b5c8
   11120:	200362b4 	.word	0x200362b4

00011124 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11124:	b510      	push	{r4, lr}
   11126:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   11128:	2300      	movs	r3, #0
   1112a:	9301      	str	r3, [sp, #4]
   1112c:	2001      	movs	r0, #1
   1112e:	f7ff fde5 	bl	10cfc <z_impl_log_process>
   11132:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   11134:	f7ff fc68 	bl	10a08 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11138:	2200      	movs	r2, #0
   1113a:	2300      	movs	r3, #0
   1113c:	a901      	add	r1, sp, #4
   1113e:	4804      	ldr	r0, [pc, #16]	; (11150 <log_msg_no_space_handle+0x2c>)
   11140:	f00a faaa 	bl	1b698 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11144:	b108      	cbz	r0, 1114a <log_msg_no_space_handle+0x26>
   11146:	2c00      	cmp	r4, #0
   11148:	d1f0      	bne.n	1112c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   1114a:	9801      	ldr	r0, [sp, #4]
   1114c:	b002      	add	sp, #8
   1114e:	bd10      	pop	{r4, pc}
   11150:	200362b4 	.word	0x200362b4

00011154 <log_msg_chunk_alloc>:
{
   11154:	b500      	push	{lr}
   11156:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   11158:	2300      	movs	r3, #0
   1115a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   1115c:	f00f fb23 	bl	207a6 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11160:	b150      	cbz	r0, 11178 <log_msg_chunk_alloc+0x24>
   11162:	2200      	movs	r2, #0
   11164:	2300      	movs	r3, #0
   11166:	a901      	add	r1, sp, #4
   11168:	4807      	ldr	r0, [pc, #28]	; (11188 <log_msg_chunk_alloc+0x34>)
   1116a:	f00a fa95 	bl	1b698 <k_mem_slab_alloc>
	if (err != 0) {
   1116e:	b930      	cbnz	r0, 1117e <log_msg_chunk_alloc+0x2a>
}
   11170:	9801      	ldr	r0, [sp, #4]
   11172:	b003      	add	sp, #12
   11174:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11178:	2200      	movs	r2, #0
   1117a:	2300      	movs	r3, #0
   1117c:	e7f3      	b.n	11166 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   1117e:	f7ff ffd1 	bl	11124 <log_msg_no_space_handle>
   11182:	9001      	str	r0, [sp, #4]
   11184:	e7f4      	b.n	11170 <log_msg_chunk_alloc+0x1c>
   11186:	bf00      	nop
   11188:	200362b4 	.word	0x200362b4

0001118c <msg_free>:
{
   1118c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1118e:	b083      	sub	sp, #12
   11190:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   11192:	4604      	mov	r4, r0
   11194:	f00f fbae 	bl	208f4 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11198:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   1119a:	f013 0f01 	tst.w	r3, #1
   1119e:	d101      	bne.n	111a4 <msg_free+0x18>
   111a0:	4606      	mov	r6, r0
   111a2:	bb50      	cbnz	r0, 111fa <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   111a4:	9b01      	ldr	r3, [sp, #4]
   111a6:	7a1a      	ldrb	r2, [r3, #8]
   111a8:	f012 0f02 	tst.w	r2, #2
   111ac:	d128      	bne.n	11200 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   111ae:	a901      	add	r1, sp, #4
   111b0:	4815      	ldr	r0, [pc, #84]	; (11208 <msg_free+0x7c>)
   111b2:	f013 f9e0 	bl	24576 <k_mem_slab_free>
}
   111b6:	b003      	add	sp, #12
   111b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   111ba:	9801      	ldr	r0, [sp, #4]
   111bc:	f00f fbaf 	bl	2091e <log_msg_str_get>
   111c0:	4631      	mov	r1, r6
   111c2:	f00f facf 	bl	20764 <z_log_get_s_mask>
					if (smask == 0U) {
   111c6:	4607      	mov	r7, r0
   111c8:	b988      	cbnz	r0, 111ee <msg_free+0x62>
   111ca:	e7eb      	b.n	111a4 <msg_free+0x18>
					log_free(buf);
   111cc:	4628      	mov	r0, r5
   111ce:	f7ff ff71 	bl	110b4 <log_free>
		for (i = 0U; i < nargs; i++) {
   111d2:	3401      	adds	r4, #1
   111d4:	42b4      	cmp	r4, r6
   111d6:	d2e5      	bcs.n	111a4 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   111d8:	4621      	mov	r1, r4
   111da:	9801      	ldr	r0, [sp, #4]
   111dc:	f00f fb8d 	bl	208fa <log_msg_arg_get>
   111e0:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   111e2:	f7ff fcf3 	bl	10bcc <log_is_strdup>
   111e6:	2800      	cmp	r0, #0
   111e8:	d0f3      	beq.n	111d2 <msg_free+0x46>
				if (smask == 0U) {
   111ea:	2f00      	cmp	r7, #0
   111ec:	d0e5      	beq.n	111ba <msg_free+0x2e>
				if (smask & BIT(i)) {
   111ee:	fa27 f304 	lsr.w	r3, r7, r4
   111f2:	f013 0f01 	tst.w	r3, #1
   111f6:	d0ec      	beq.n	111d2 <msg_free+0x46>
   111f8:	e7e8      	b.n	111cc <msg_free+0x40>
		uint32_t smask = 0U;
   111fa:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   111fc:	463c      	mov	r4, r7
   111fe:	e7e9      	b.n	111d4 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   11200:	6958      	ldr	r0, [r3, #20]
   11202:	f7ff ff73 	bl	110ec <cont_free>
   11206:	e7d2      	b.n	111ae <msg_free+0x22>
   11208:	200362b4 	.word	0x200362b4

0001120c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1120c:	b40e      	push	{r1, r2, r3}
   1120e:	b500      	push	{lr}
   11210:	b082      	sub	sp, #8
   11212:	4601      	mov	r1, r0
   11214:	ab03      	add	r3, sp, #12
   11216:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   1121a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1121c:	4803      	ldr	r0, [pc, #12]	; (1122c <print_formatted+0x20>)
   1121e:	f7fe fe55 	bl	fecc <cbvprintf>
	va_end(args);

	return length;
}
   11222:	b002      	add	sp, #8
   11224:	f85d eb04 	ldr.w	lr, [sp], #4
   11228:	b003      	add	sp, #12
   1122a:	4770      	bx	lr
   1122c:	00020dfb 	.word	0x00020dfb

00011230 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   11230:	b5f0      	push	{r4, r5, r6, r7, lr}
   11232:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   11234:	f011 0f44 	tst.w	r1, #68	; 0x44
   11238:	d005      	beq.n	11246 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   1123a:	4b1a      	ldr	r3, [pc, #104]	; (112a4 <timestamp_print+0x74>)
   1123c:	681c      	ldr	r4, [r3, #0]
   1123e:	b934      	cbnz	r4, 1124e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   11240:	2000      	movs	r0, #0
	}

	return length;
}
   11242:	b005      	add	sp, #20
   11244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   11246:	4918      	ldr	r1, [pc, #96]	; (112a8 <timestamp_print+0x78>)
   11248:	f7ff ffe0 	bl	1120c <print_formatted>
   1124c:	e7f9      	b.n	11242 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   1124e:	4b17      	ldr	r3, [pc, #92]	; (112ac <timestamp_print+0x7c>)
   11250:	6819      	ldr	r1, [r3, #0]
   11252:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   11256:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   1125a:	4a15      	ldr	r2, [pc, #84]	; (112b0 <timestamp_print+0x80>)
   1125c:	fba2 3205 	umull	r3, r2, r2, r5
   11260:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   11262:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   11266:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   1126a:	4b12      	ldr	r3, [pc, #72]	; (112b4 <timestamp_print+0x84>)
   1126c:	fba3 7306 	umull	r7, r3, r3, r6
   11270:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   11272:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   11276:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1127a:	fb05 f101 	mul.w	r1, r5, r1
   1127e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11282:	fb07 1114 	mls	r1, r7, r4, r1
   11286:	fb05 f101 	mul.w	r1, r5, r1
   1128a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   1128e:	9402      	str	r4, [sp, #8]
   11290:	9701      	str	r7, [sp, #4]
   11292:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   11296:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   1129a:	9100      	str	r1, [sp, #0]
   1129c:	4906      	ldr	r1, [pc, #24]	; (112b8 <timestamp_print+0x88>)
   1129e:	f7ff ffb5 	bl	1120c <print_formatted>
   112a2:	e7ce      	b.n	11242 <timestamp_print+0x12>
   112a4:	200362d0 	.word	0x200362d0
   112a8:	00025b2c 	.word	0x00025b2c
   112ac:	200362d4 	.word	0x200362d4
   112b0:	91a2b3c5 	.word	0x91a2b3c5
   112b4:	88888889 	.word	0x88888889
   112b8:	00025b38 	.word	0x00025b38

000112bc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   112bc:	b161      	cbz	r1, 112d8 <color_print+0x1c>
{
   112be:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   112c0:	b12a      	cbz	r2, 112ce <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   112c2:	4a06      	ldr	r2, [pc, #24]	; (112dc <color_print+0x20>)
   112c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   112c8:	b912      	cbnz	r2, 112d0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   112ca:	4a05      	ldr	r2, [pc, #20]	; (112e0 <color_print+0x24>)
   112cc:	e000      	b.n	112d0 <color_print+0x14>
   112ce:	4a04      	ldr	r2, [pc, #16]	; (112e0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   112d0:	4904      	ldr	r1, [pc, #16]	; (112e4 <color_print+0x28>)
   112d2:	f7ff ff9b 	bl	1120c <print_formatted>
	}
}
   112d6:	bd08      	pop	{r3, pc}
   112d8:	4770      	bx	lr
   112da:	bf00      	nop
   112dc:	00025ba8 	.word	0x00025ba8
   112e0:	00025b54 	.word	0x00025b54
   112e4:	000265bc 	.word	0x000265bc

000112e8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   112e8:	f011 0f10 	tst.w	r1, #16
   112ec:	d10b      	bne.n	11306 <newline_print+0x1e>
{
   112ee:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   112f0:	f011 0f20 	tst.w	r1, #32
   112f4:	d003      	beq.n	112fe <newline_print+0x16>
		print_formatted(ctx, "\n");
   112f6:	4904      	ldr	r1, [pc, #16]	; (11308 <newline_print+0x20>)
   112f8:	f7ff ff88 	bl	1120c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   112fc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   112fe:	4903      	ldr	r1, [pc, #12]	; (1130c <newline_print+0x24>)
   11300:	f7ff ff84 	bl	1120c <print_formatted>
   11304:	e7fa      	b.n	112fc <newline_print+0x14>
   11306:	4770      	bx	lr
   11308:	00025944 	.word	0x00025944
   1130c:	00027990 	.word	0x00027990

00011310 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   11310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11314:	4605      	mov	r5, r0
   11316:	460f      	mov	r7, r1
   11318:	4616      	mov	r6, r2
   1131a:	4698      	mov	r8, r3
	newline_print(output, flags);
   1131c:	9906      	ldr	r1, [sp, #24]
   1131e:	f7ff ffe3 	bl	112e8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   11322:	2400      	movs	r4, #0
   11324:	4544      	cmp	r4, r8
   11326:	da05      	bge.n	11334 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   11328:	4923      	ldr	r1, [pc, #140]	; (113b8 <hexdump_line_print+0xa8>)
   1132a:	4628      	mov	r0, r5
   1132c:	f7ff ff6e 	bl	1120c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   11330:	3401      	adds	r4, #1
   11332:	e7f7      	b.n	11324 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11334:	2400      	movs	r4, #0
   11336:	e009      	b.n	1134c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   11338:	491f      	ldr	r1, [pc, #124]	; (113b8 <hexdump_line_print+0xa8>)
   1133a:	4628      	mov	r0, r5
   1133c:	f7ff ff66 	bl	1120c <print_formatted>
   11340:	e00b      	b.n	1135a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   11342:	491e      	ldr	r1, [pc, #120]	; (113bc <hexdump_line_print+0xac>)
   11344:	4628      	mov	r0, r5
   11346:	f7ff ff61 	bl	1120c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1134a:	3401      	adds	r4, #1
   1134c:	2c0f      	cmp	r4, #15
   1134e:	dc0c      	bgt.n	1136a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   11350:	2c00      	cmp	r4, #0
   11352:	dd02      	ble.n	1135a <hexdump_line_print+0x4a>
   11354:	f014 0f07 	tst.w	r4, #7
   11358:	d0ee      	beq.n	11338 <hexdump_line_print+0x28>
		if (i < length) {
   1135a:	42b4      	cmp	r4, r6
   1135c:	d2f1      	bcs.n	11342 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   1135e:	5d3a      	ldrb	r2, [r7, r4]
   11360:	4917      	ldr	r1, [pc, #92]	; (113c0 <hexdump_line_print+0xb0>)
   11362:	4628      	mov	r0, r5
   11364:	f7ff ff52 	bl	1120c <print_formatted>
   11368:	e7ef      	b.n	1134a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   1136a:	4916      	ldr	r1, [pc, #88]	; (113c4 <hexdump_line_print+0xb4>)
   1136c:	4628      	mov	r0, r5
   1136e:	f7ff ff4d 	bl	1120c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11372:	2400      	movs	r4, #0
   11374:	e009      	b.n	1138a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   11376:	4910      	ldr	r1, [pc, #64]	; (113b8 <hexdump_line_print+0xa8>)
   11378:	4628      	mov	r0, r5
   1137a:	f7ff ff47 	bl	1120c <print_formatted>
   1137e:	e00b      	b.n	11398 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   11380:	4911      	ldr	r1, [pc, #68]	; (113c8 <hexdump_line_print+0xb8>)
   11382:	4628      	mov	r0, r5
   11384:	f7ff ff42 	bl	1120c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   11388:	3401      	adds	r4, #1
   1138a:	2c0f      	cmp	r4, #15
   1138c:	dc12      	bgt.n	113b4 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   1138e:	2c00      	cmp	r4, #0
   11390:	dd02      	ble.n	11398 <hexdump_line_print+0x88>
   11392:	f014 0f07 	tst.w	r4, #7
   11396:	d0ee      	beq.n	11376 <hexdump_line_print+0x66>
		if (i < length) {
   11398:	42b4      	cmp	r4, r6
   1139a:	d206      	bcs.n	113aa <hexdump_line_print+0x9a>
			char c = (char)data[i];
   1139c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   1139e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   113a2:	2b5e      	cmp	r3, #94	; 0x5e
   113a4:	d9ec      	bls.n	11380 <hexdump_line_print+0x70>
   113a6:	222e      	movs	r2, #46	; 0x2e
   113a8:	e7ea      	b.n	11380 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   113aa:	4903      	ldr	r1, [pc, #12]	; (113b8 <hexdump_line_print+0xa8>)
   113ac:	4628      	mov	r0, r5
   113ae:	f7ff ff2d 	bl	1120c <print_formatted>
   113b2:	e7e9      	b.n	11388 <hexdump_line_print+0x78>
		}
	}
}
   113b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113b8:	00025b80 	.word	0x00025b80
   113bc:	00025b64 	.word	0x00025b64
   113c0:	00025b5c 	.word	0x00025b5c
   113c4:	00025b68 	.word	0x00025b68
   113c8:	00025b6c 	.word	0x00025b6c

000113cc <ids_print>:
{
   113cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   113d0:	4680      	mov	r8, r0
   113d2:	4616      	mov	r6, r2
   113d4:	461d      	mov	r5, r3
   113d6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   113da:	b959      	cbnz	r1, 113f4 <ids_print+0x28>
	int total = 0;
   113dc:	2400      	movs	r4, #0
	if (source_id >= 0) {
   113de:	2f00      	cmp	r7, #0
   113e0:	db1c      	blt.n	1141c <ids_print+0x50>
		total += print_formatted(output,
   113e2:	b186      	cbz	r6, 11406 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   113e4:	2301      	movs	r3, #1
   113e6:	9a07      	ldr	r2, [sp, #28]
   113e8:	4093      	lsls	r3, r2
				(func_on &&
   113ea:	f013 0f10 	tst.w	r3, #16
   113ee:	d118      	bne.n	11422 <ids_print+0x56>
		total += print_formatted(output,
   113f0:	4e0d      	ldr	r6, [pc, #52]	; (11428 <ids_print+0x5c>)
   113f2:	e009      	b.n	11408 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   113f4:	4b0d      	ldr	r3, [pc, #52]	; (1142c <ids_print+0x60>)
   113f6:	9a07      	ldr	r2, [sp, #28]
   113f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   113fc:	490c      	ldr	r1, [pc, #48]	; (11430 <ids_print+0x64>)
   113fe:	f7ff ff05 	bl	1120c <print_formatted>
   11402:	4604      	mov	r4, r0
   11404:	e7eb      	b.n	113de <ids_print+0x12>
		total += print_formatted(output,
   11406:	4e08      	ldr	r6, [pc, #32]	; (11428 <ids_print+0x5c>)
   11408:	4639      	mov	r1, r7
   1140a:	4628      	mov	r0, r5
   1140c:	f7ff fb48 	bl	10aa0 <log_source_name_get>
   11410:	4602      	mov	r2, r0
   11412:	4631      	mov	r1, r6
   11414:	4640      	mov	r0, r8
   11416:	f7ff fef9 	bl	1120c <print_formatted>
   1141a:	4404      	add	r4, r0
}
   1141c:	4620      	mov	r0, r4
   1141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   11422:	4e04      	ldr	r6, [pc, #16]	; (11434 <ids_print+0x68>)
   11424:	e7f0      	b.n	11408 <ids_print+0x3c>
   11426:	bf00      	nop
   11428:	00025b70 	.word	0x00025b70
   1142c:	00025be4 	.word	0x00025be4
   11430:	00025b7c 	.word	0x00025b7c
   11434:	00025b78 	.word	0x00025b78

00011438 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
   11438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1143c:	b089      	sub	sp, #36	; 0x24
   1143e:	4607      	mov	r7, r0
   11440:	460e      	mov	r6, r1
   11442:	4691      	mov	r9, r2
   11444:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
   11446:	f00f fa6a 	bl	2091e <log_msg_str_get>
   1144a:	4602      	mov	r2, r0
   1144c:	490e      	ldr	r1, [pc, #56]	; (11488 <hexdump_print+0x50>)
   1144e:	4630      	mov	r0, r6
   11450:	f7ff fedc 	bl	1120c <print_formatted>
	uint32_t offset = 0U;
   11454:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
   11456:	2510      	movs	r5, #16
   11458:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1145a:	4623      	mov	r3, r4
   1145c:	aa03      	add	r2, sp, #12
   1145e:	eb0d 0105 	add.w	r1, sp, r5
   11462:	4638      	mov	r0, r7
   11464:	f00f fb0d 	bl	20a82 <log_msg_hexdump_data_get>

		if (length) {
   11468:	9a03      	ldr	r2, [sp, #12]
   1146a:	b152      	cbz	r2, 11482 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   1146c:	f8cd 8000 	str.w	r8, [sp]
   11470:	464b      	mov	r3, r9
   11472:	eb0d 0105 	add.w	r1, sp, r5
   11476:	4630      	mov	r0, r6
   11478:	f7ff ff4a 	bl	11310 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
   1147c:	9d03      	ldr	r5, [sp, #12]
   1147e:	442c      	add	r4, r5
		length = sizeof(buf);
   11480:	e7e9      	b.n	11456 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
   11482:	b009      	add	sp, #36	; 0x24
   11484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11488:	000265bc 	.word	0x000265bc

0001148c <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
   1148c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1148e:	b083      	sub	sp, #12
   11490:	4606      	mov	r6, r0
   11492:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
   11494:	2700      	movs	r7, #0
	size_t offset = 0;
   11496:	463d      	mov	r5, r7
   11498:	e00d      	b.n	114b6 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
   1149a:	68a2      	ldr	r2, [r4, #8]
   1149c:	4413      	add	r3, r2
   1149e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   114a2:	2f0a      	cmp	r7, #10
   114a4:	bf14      	ite	ne
   114a6:	2700      	movne	r7, #0
   114a8:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
   114aa:	4620      	mov	r0, r4
   114ac:	f00f fc98 	bl	20de0 <log_output_flush>
		offset += length;
   114b0:	9b01      	ldr	r3, [sp, #4]
   114b2:	441d      	add	r5, r3
	} while (length > 0);
   114b4:	b173      	cbz	r3, 114d4 <raw_string_print+0x48>
		length = output->size;
   114b6:	68e3      	ldr	r3, [r4, #12]
   114b8:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   114ba:	462b      	mov	r3, r5
   114bc:	aa01      	add	r2, sp, #4
   114be:	68a1      	ldr	r1, [r4, #8]
   114c0:	4630      	mov	r0, r6
   114c2:	f00f fade 	bl	20a82 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   114c6:	6863      	ldr	r3, [r4, #4]
   114c8:	9a01      	ldr	r2, [sp, #4]
   114ca:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   114cc:	9b01      	ldr	r3, [sp, #4]
   114ce:	2b00      	cmp	r3, #0
   114d0:	d0eb      	beq.n	114aa <raw_string_print+0x1e>
   114d2:	e7e2      	b.n	1149a <raw_string_print+0xe>

	if (eol) {
   114d4:	b90f      	cbnz	r7, 114da <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
   114d6:	b003      	add	sp, #12
   114d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   114da:	4902      	ldr	r1, [pc, #8]	; (114e4 <raw_string_print+0x58>)
   114dc:	4620      	mov	r0, r4
   114de:	f7ff fe95 	bl	1120c <print_formatted>
}
   114e2:	e7f8      	b.n	114d6 <raw_string_print+0x4a>
   114e4:	00025b84 	.word	0x00025b84

000114e8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   114e8:	b570      	push	{r4, r5, r6, lr}
   114ea:	b082      	sub	sp, #8
   114ec:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   114ee:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   114f0:	f242 730f 	movw	r3, #9999	; 0x270f
   114f4:	428b      	cmp	r3, r1
   114f6:	bf28      	it	cs
   114f8:	460b      	movcs	r3, r1
   114fa:	4a0e      	ldr	r2, [pc, #56]	; (11534 <log_output_dropped_process+0x4c>)
   114fc:	2105      	movs	r1, #5
   114fe:	4668      	mov	r0, sp
   11500:	f00e fba2 	bl	1fc48 <snprintk>
   11504:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   11506:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11508:	685b      	ldr	r3, [r3, #4]
   1150a:	220b      	movs	r2, #11
   1150c:	490a      	ldr	r1, [pc, #40]	; (11538 <log_output_dropped_process+0x50>)
   1150e:	4628      	mov	r0, r5
   11510:	f00f fabf 	bl	20a92 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   11514:	6863      	ldr	r3, [r4, #4]
   11516:	685b      	ldr	r3, [r3, #4]
   11518:	4632      	mov	r2, r6
   1151a:	4669      	mov	r1, sp
   1151c:	4628      	mov	r0, r5
   1151e:	f00f fab8 	bl	20a92 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   11522:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   11524:	685b      	ldr	r3, [r3, #4]
   11526:	221b      	movs	r2, #27
   11528:	4904      	ldr	r1, [pc, #16]	; (1153c <log_output_dropped_process+0x54>)
   1152a:	4628      	mov	r0, r5
   1152c:	f00f fab1 	bl	20a92 <buffer_write>
}
   11530:	b002      	add	sp, #8
   11532:	bd70      	pop	{r4, r5, r6, pc}
   11534:	000270b0 	.word	0x000270b0
   11538:	00025bd8 	.word	0x00025bd8
   1153c:	00025bbc 	.word	0x00025bbc

00011540 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11540:	4b07      	ldr	r3, [pc, #28]	; (11560 <log_output_timestamp_freq_set+0x20>)
   11542:	2201      	movs	r2, #1
   11544:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   11546:	4b07      	ldr	r3, [pc, #28]	; (11564 <log_output_timestamp_freq_set+0x24>)
   11548:	4298      	cmp	r0, r3
   1154a:	d905      	bls.n	11558 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   1154c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1154e:	4a04      	ldr	r2, [pc, #16]	; (11560 <log_output_timestamp_freq_set+0x20>)
   11550:	6813      	ldr	r3, [r2, #0]
   11552:	005b      	lsls	r3, r3, #1
   11554:	6013      	str	r3, [r2, #0]
   11556:	e7f6      	b.n	11546 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   11558:	4b03      	ldr	r3, [pc, #12]	; (11568 <log_output_timestamp_freq_set+0x28>)
   1155a:	6018      	str	r0, [r3, #0]
}
   1155c:	4770      	bx	lr
   1155e:	bf00      	nop
   11560:	200362d4 	.word	0x200362d4
   11564:	000f4240 	.word	0x000f4240
   11568:	200362d0 	.word	0x200362d0

0001156c <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   1156c:	b570      	push	{r4, r5, r6, lr}
   1156e:	4606      	mov	r6, r0
   11570:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
   11572:	2400      	movs	r4, #0
   11574:	42ac      	cmp	r4, r5
   11576:	d207      	bcs.n	11588 <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   11578:	4b04      	ldr	r3, [pc, #16]	; (1158c <char_out+0x20>)
   1157a:	6818      	ldr	r0, [r3, #0]
   1157c:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   1157e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   11580:	685b      	ldr	r3, [r3, #4]
   11582:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   11584:	3401      	adds	r4, #1
   11586:	e7f5      	b.n	11574 <char_out+0x8>
#endif
	}

	return length;
}
   11588:	4628      	mov	r0, r5
   1158a:	bd70      	pop	{r4, r5, r6, pc}
   1158c:	200362ec 	.word	0x200362ec

00011590 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   11590:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11592:	4803      	ldr	r0, [pc, #12]	; (115a0 <log_backend_uart_init+0x10>)
   11594:	f009 fe92 	bl	1b2bc <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   11598:	4b02      	ldr	r3, [pc, #8]	; (115a4 <log_backend_uart_init+0x14>)
   1159a:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   1159c:	bd08      	pop	{r3, pc}
   1159e:	bf00      	nop
   115a0:	00025bf8 	.word	0x00025bf8
   115a4:	200362ec 	.word	0x200362ec

000115a8 <panic>:

static void panic(struct log_backend const *const backend)
{
   115a8:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   115aa:	4802      	ldr	r0, [pc, #8]	; (115b4 <panic+0xc>)
   115ac:	f00f fc18 	bl	20de0 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   115b0:	bd08      	pop	{r3, pc}
   115b2:	bf00      	nop
   115b4:	00025c30 	.word	0x00025c30

000115b8 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   115b8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   115ba:	4802      	ldr	r0, [pc, #8]	; (115c4 <dropped+0xc>)
   115bc:	f7ff ff94 	bl	114e8 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   115c0:	bd08      	pop	{r3, pc}
   115c2:	bf00      	nop
   115c4:	00025c30 	.word	0x00025c30

000115c8 <put>:
{
   115c8:	b510      	push	{r4, lr}
   115ca:	460c      	mov	r4, r1
	log_msg_get(msg);
   115cc:	4608      	mov	r0, r1
   115ce:	f00f f984 	bl	208da <log_msg_get>
	log_output_msg_process(output, msg, flags);
   115d2:	220f      	movs	r2, #15
   115d4:	4621      	mov	r1, r4
   115d6:	4803      	ldr	r0, [pc, #12]	; (115e4 <put+0x1c>)
   115d8:	f00f fc2b 	bl	20e32 <log_output_msg_process>
	log_msg_put(msg);
   115dc:	4620      	mov	r0, r4
   115de:	f00f f9a0 	bl	20922 <log_msg_put>
}
   115e2:	bd10      	pop	{r4, pc}
   115e4:	00025c30 	.word	0x00025c30

000115e8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   115e8:	4b01      	ldr	r3, [pc, #4]	; (115f0 <log_backend_rtt_init+0x8>)
   115ea:	2201      	movs	r2, #1
   115ec:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   115ee:	4770      	bx	lr
   115f0:	2003811d 	.word	0x2003811d

000115f4 <on_failed_write>:
{
   115f4:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   115f6:	b918      	cbnz	r0, 11600 <on_failed_write+0xc>
		host_present = false;
   115f8:	4b08      	ldr	r3, [pc, #32]	; (1161c <on_failed_write+0x28>)
   115fa:	2200      	movs	r2, #0
   115fc:	701a      	strb	r2, [r3, #0]
}
   115fe:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11600:	4b07      	ldr	r3, [pc, #28]	; (11620 <on_failed_write+0x2c>)
   11602:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   11604:	b123      	cbz	r3, 11610 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   11606:	f241 3088 	movw	r0, #5000	; 0x1388
   1160a:	f013 fc98 	bl	24f3e <z_impl_k_busy_wait>
}
   1160e:	e7f6      	b.n	115fe <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
   11610:	20a4      	movs	r0, #164	; 0xa4
   11612:	2100      	movs	r1, #0
   11614:	f00b f836 	bl	1c684 <z_impl_k_sleep>
}
   11618:	e7f1      	b.n	115fe <on_failed_write+0xa>
   1161a:	bf00      	nop
   1161c:	2003811d 	.word	0x2003811d
   11620:	2003811e 	.word	0x2003811e

00011624 <on_write>:
{
   11624:	b538      	push	{r3, r4, r5, lr}
   11626:	4604      	mov	r4, r0
	host_present = true;
   11628:	4b0a      	ldr	r3, [pc, #40]	; (11654 <on_write+0x30>)
   1162a:	2201      	movs	r2, #1
   1162c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   1162e:	4b0a      	ldr	r3, [pc, #40]	; (11658 <on_write+0x34>)
   11630:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   11632:	b903      	cbnz	r3, 11636 <on_write+0x12>
}
   11634:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   11636:	2000      	movs	r0, #0
   11638:	f009 fdfc 	bl	1b234 <SEGGER_RTT_HasDataUp>
   1163c:	2800      	cmp	r0, #0
   1163e:	d0f9      	beq.n	11634 <on_write+0x10>
   11640:	4b04      	ldr	r3, [pc, #16]	; (11654 <on_write+0x30>)
   11642:	781b      	ldrb	r3, [r3, #0]
   11644:	2b00      	cmp	r3, #0
   11646:	d0f5      	beq.n	11634 <on_write+0x10>
			on_failed_write(retry_cnt--);
   11648:	1e65      	subs	r5, r4, #1
   1164a:	4620      	mov	r0, r4
   1164c:	f7ff ffd2 	bl	115f4 <on_failed_write>
   11650:	462c      	mov	r4, r5
   11652:	e7f0      	b.n	11636 <on_write+0x12>
   11654:	2003811d 	.word	0x2003811d
   11658:	2003811e 	.word	0x2003811e

0001165c <data_out_block_mode>:
{
   1165c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11660:	4606      	mov	r6, r0
   11662:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   11664:	2704      	movs	r7, #4
   11666:	e00d      	b.n	11684 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11668:	462a      	mov	r2, r5
   1166a:	4631      	mov	r1, r6
   1166c:	2000      	movs	r0, #0
   1166e:	f009 fd7d 	bl	1b16c <SEGGER_RTT_WriteSkipNoLock>
   11672:	4604      	mov	r4, r0
   11674:	e01c      	b.n	116b0 <data_out_block_mode+0x54>
			on_write(retry_cnt);
   11676:	4638      	mov	r0, r7
   11678:	f7ff ffd4 	bl	11624 <on_write>
	} while ((ret == 0) && host_present);
   1167c:	bb1c      	cbnz	r4, 116c6 <data_out_block_mode+0x6a>
   1167e:	4b16      	ldr	r3, [pc, #88]	; (116d8 <data_out_block_mode+0x7c>)
   11680:	781b      	ldrb	r3, [r3, #0]
   11682:	b303      	cbz	r3, 116c6 <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11684:	4b15      	ldr	r3, [pc, #84]	; (116dc <data_out_block_mode+0x80>)
   11686:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   11688:	2b00      	cmp	r3, #0
   1168a:	d1ed      	bne.n	11668 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
   1168c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 116e0 <data_out_block_mode+0x84>
   11690:	f04f 32ff 	mov.w	r2, #4294967295
   11694:	f04f 33ff 	mov.w	r3, #4294967295
   11698:	4640      	mov	r0, r8
   1169a:	f00a f937 	bl	1b90c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1169e:	462a      	mov	r2, r5
   116a0:	4631      	mov	r1, r6
   116a2:	2000      	movs	r0, #0
   116a4:	f009 fd62 	bl	1b16c <SEGGER_RTT_WriteSkipNoLock>
   116a8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   116aa:	4640      	mov	r0, r8
   116ac:	f00a f9b8 	bl	1ba20 <z_impl_k_mutex_unlock>
		if (ret) {
   116b0:	2c00      	cmp	r4, #0
   116b2:	d1e0      	bne.n	11676 <data_out_block_mode+0x1a>
		} else if (host_present) {
   116b4:	4b08      	ldr	r3, [pc, #32]	; (116d8 <data_out_block_mode+0x7c>)
   116b6:	781b      	ldrb	r3, [r3, #0]
   116b8:	2b00      	cmp	r3, #0
   116ba:	d0df      	beq.n	1167c <data_out_block_mode+0x20>
			retry_cnt--;
   116bc:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   116be:	4638      	mov	r0, r7
   116c0:	f7ff ff98 	bl	115f4 <on_failed_write>
   116c4:	e7da      	b.n	1167c <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
   116c6:	b914      	cbnz	r4, 116ce <data_out_block_mode+0x72>
   116c8:	4b03      	ldr	r3, [pc, #12]	; (116d8 <data_out_block_mode+0x7c>)
   116ca:	781b      	ldrb	r3, [r3, #0]
   116cc:	b903      	cbnz	r3, 116d0 <data_out_block_mode+0x74>
   116ce:	462c      	mov	r4, r5
}
   116d0:	4620      	mov	r0, r4
   116d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116d6:	bf00      	nop
   116d8:	2003811d 	.word	0x2003811d
   116dc:	2003811e 	.word	0x2003811e
   116e0:	20033bb0 	.word	0x20033bb0

000116e4 <panic>:

static void panic(struct log_backend const *const backend)
{
   116e4:	b508      	push	{r3, lr}
	panic_mode = true;
   116e6:	4b03      	ldr	r3, [pc, #12]	; (116f4 <panic+0x10>)
   116e8:	2201      	movs	r2, #1
   116ea:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
   116ec:	4802      	ldr	r0, [pc, #8]	; (116f8 <panic+0x14>)
   116ee:	f00f fb77 	bl	20de0 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
   116f2:	bd08      	pop	{r3, pc}
   116f4:	2003811e 	.word	0x2003811e
   116f8:	00025c6c 	.word	0x00025c6c

000116fc <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   116fc:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
   116fe:	4802      	ldr	r0, [pc, #8]	; (11708 <dropped+0xc>)
   11700:	f7ff fef2 	bl	114e8 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
   11704:	bd08      	pop	{r3, pc}
   11706:	bf00      	nop
   11708:	00025c6c 	.word	0x00025c6c

0001170c <put>:
{
   1170c:	b510      	push	{r4, lr}
   1170e:	460c      	mov	r4, r1
	log_msg_get(msg);
   11710:	4608      	mov	r0, r1
   11712:	f00f f8e2 	bl	208da <log_msg_get>
	log_output_msg_process(output, msg, flags);
   11716:	220f      	movs	r2, #15
   11718:	4621      	mov	r1, r4
   1171a:	4803      	ldr	r0, [pc, #12]	; (11728 <put+0x1c>)
   1171c:	f00f fb89 	bl	20e32 <log_output_msg_process>
	log_msg_put(msg);
   11720:	4620      	mov	r0, r4
   11722:	f00f f8fe 	bl	20922 <log_msg_put>
}
   11726:	bd10      	pop	{r4, pc}
   11728:	00025c6c 	.word	0x00025c6c

0001172c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   1172c:	4b1b      	ldr	r3, [pc, #108]	; (1179c <pm_system_resume+0x70>)
   1172e:	681b      	ldr	r3, [r3, #0]
   11730:	2b00      	cmp	r3, #0
   11732:	d132      	bne.n	1179a <pm_system_resume+0x6e>
{
   11734:	b530      	push	{r4, r5, lr}
   11736:	b085      	sub	sp, #20
		post_ops_done = 1;
   11738:	4b18      	ldr	r3, [pc, #96]	; (1179c <pm_system_resume+0x70>)
   1173a:	2201      	movs	r2, #1
   1173c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   1173e:	4b18      	ldr	r3, [pc, #96]	; (117a0 <pm_system_resume+0x74>)
   11740:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11744:	ab04      	add	r3, sp, #16
   11746:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1174a:	4b16      	ldr	r3, [pc, #88]	; (117a4 <pm_system_resume+0x78>)
   1174c:	b163      	cbz	r3, 11768 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
   1174e:	f00f ff41 	bl	215d4 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   11752:	f04f 0340 	mov.w	r3, #64	; 0x40
   11756:	f3ef 8511 	mrs	r5, BASEPRI
   1175a:	f383 8811 	msr	BASEPRI, r3
   1175e:	f3bf 8f6f 	isb	sy
   11762:	4b11      	ldr	r3, [pc, #68]	; (117a8 <pm_system_resume+0x7c>)
   11764:	681c      	ldr	r4, [r3, #0]
   11766:	e00a      	b.n	1177e <pm_system_resume+0x52>
	__asm__ volatile(
   11768:	2300      	movs	r3, #0
   1176a:	f383 8811 	msr	BASEPRI, r3
   1176e:	f3bf 8f6f 	isb	sy
}
   11772:	e7ee      	b.n	11752 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11774:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   11776:	b10c      	cbz	r4, 1177c <pm_system_resume+0x50>
	return node->next;
   11778:	6823      	ldr	r3, [r4, #0]
   1177a:	b143      	cbz	r3, 1178e <pm_system_resume+0x62>
{
   1177c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1177e:	b134      	cbz	r4, 1178e <pm_system_resume+0x62>
			callback = notifier->state_exit;
   11780:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   11782:	2b00      	cmp	r3, #0
   11784:	d0f6      	beq.n	11774 <pm_system_resume+0x48>
			callback(z_power_state.state);
   11786:	4a06      	ldr	r2, [pc, #24]	; (117a0 <pm_system_resume+0x74>)
   11788:	7810      	ldrb	r0, [r2, #0]
   1178a:	4798      	blx	r3
   1178c:	e7f2      	b.n	11774 <pm_system_resume+0x48>
	__asm__ volatile(
   1178e:	f385 8811 	msr	BASEPRI, r5
   11792:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
   11796:	b005      	add	sp, #20
   11798:	bd30      	pop	{r4, r5, pc}
   1179a:	4770      	bx	lr
   1179c:	20033914 	.word	0x20033914
   117a0:	2003631c 	.word	0x2003631c
   117a4:	000215d5 	.word	0x000215d5
   117a8:	20036314 	.word	0x20036314

000117ac <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   117ac:	b570      	push	{r4, r5, r6, lr}
   117ae:	b088      	sub	sp, #32
   117b0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   117b2:	4c2a      	ldr	r4, [pc, #168]	; (1185c <pm_system_suspend+0xb0>)
   117b4:	466d      	mov	r5, sp
   117b6:	4601      	mov	r1, r0
   117b8:	4628      	mov	r0, r5
   117ba:	f00f fb79 	bl	20eb0 <pm_policy_next_state>
   117be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   117c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   117c6:	7820      	ldrb	r0, [r4, #0]
   117c8:	2800      	cmp	r0, #0
   117ca:	d045      	beq.n	11858 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   117cc:	4b24      	ldr	r3, [pc, #144]	; (11860 <pm_system_suspend+0xb4>)
   117ce:	2200      	movs	r2, #0
   117d0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   117d2:	f1b6 3fff 	cmp.w	r6, #4294967295
   117d6:	d10c      	bne.n	117f2 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   117d8:	f00a fc40 	bl	1c05c <k_sched_lock>
	__asm__ volatile(
   117dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   117e0:	f3ef 8511 	mrs	r5, BASEPRI
   117e4:	f383 8811 	msr	BASEPRI, r3
   117e8:	f3bf 8f6f 	isb	sy
	return list->head;
   117ec:	4b1d      	ldr	r3, [pc, #116]	; (11864 <pm_system_suspend+0xb8>)
   117ee:	681c      	ldr	r4, [r3, #0]
   117f0:	e016      	b.n	11820 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   117f2:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   117f4:	0c59      	lsrs	r1, r3, #17
   117f6:	03d8      	lsls	r0, r3, #15
   117f8:	4c1b      	ldr	r4, [pc, #108]	; (11868 <pm_system_suspend+0xbc>)
   117fa:	4a1c      	ldr	r2, [pc, #112]	; (1186c <pm_system_suspend+0xc0>)
   117fc:	2300      	movs	r3, #0
   117fe:	1900      	adds	r0, r0, r4
   11800:	f04f 0400 	mov.w	r4, #0
   11804:	eb44 0101 	adc.w	r1, r4, r1
   11808:	f7ee fc7a 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1180c:	2101      	movs	r1, #1
   1180e:	1a30      	subs	r0, r6, r0
   11810:	f013 fb66 	bl	24ee0 <z_set_timeout_expiry>
   11814:	e7e0      	b.n	117d8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11816:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   11818:	b10c      	cbz	r4, 1181e <pm_system_suspend+0x72>
	return node->next;
   1181a:	6823      	ldr	r3, [r4, #0]
   1181c:	b143      	cbz	r3, 11830 <pm_system_suspend+0x84>
{
   1181e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11820:	b134      	cbz	r4, 11830 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
   11822:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   11824:	2b00      	cmp	r3, #0
   11826:	d0f6      	beq.n	11816 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
   11828:	4a0c      	ldr	r2, [pc, #48]	; (1185c <pm_system_suspend+0xb0>)
   1182a:	7810      	ldrb	r0, [r2, #0]
   1182c:	4798      	blx	r3
   1182e:	e7f2      	b.n	11816 <pm_system_suspend+0x6a>
	__asm__ volatile(
   11830:	f385 8811 	msr	BASEPRI, r5
   11834:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
   11838:	4b08      	ldr	r3, [pc, #32]	; (1185c <pm_system_suspend+0xb0>)
   1183a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1183e:	ab08      	add	r3, sp, #32
   11840:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   11844:	4b0a      	ldr	r3, [pc, #40]	; (11870 <pm_system_suspend+0xc4>)
   11846:	b10b      	cbz	r3, 1184c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
   11848:	f00f feb1 	bl	215ae <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   1184c:	f7ff ff6e 	bl	1172c <pm_system_resume>
	k_sched_unlock();
   11850:	f00a fcb4 	bl	1c1bc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   11854:	4b01      	ldr	r3, [pc, #4]	; (1185c <pm_system_suspend+0xb0>)
   11856:	7818      	ldrb	r0, [r3, #0]
}
   11858:	b008      	add	sp, #32
   1185a:	bd70      	pop	{r4, r5, r6, pc}
   1185c:	2003631c 	.word	0x2003631c
   11860:	20033914 	.word	0x20033914
   11864:	20036314 	.word	0x20036314
   11868:	000f423f 	.word	0x000f423f
   1186c:	000f4240 	.word	0x000f4240
   11870:	000215af 	.word	0x000215af

00011874 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   11874:	b510      	push	{r4, lr}
   11876:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   11878:	280a      	cmp	r0, #10
   1187a:	d007      	beq.n	1188c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1187c:	4b07      	ldr	r3, [pc, #28]	; (1189c <console_out+0x28>)
   1187e:	6818      	ldr	r0, [r3, #0]
   11880:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   11882:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   11884:	685b      	ldr	r3, [r3, #4]
   11886:	4798      	blx	r3

	return c;
}
   11888:	4620      	mov	r0, r4
   1188a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1188c:	4b03      	ldr	r3, [pc, #12]	; (1189c <console_out+0x28>)
   1188e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   11890:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   11892:	685b      	ldr	r3, [r3, #4]
   11894:	210d      	movs	r1, #13
   11896:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   11898:	e7f0      	b.n	1187c <console_out+0x8>
   1189a:	bf00      	nop
   1189c:	20036328 	.word	0x20036328

000118a0 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   118a0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   118a2:	4c04      	ldr	r4, [pc, #16]	; (118b4 <uart_console_hook_install+0x14>)
   118a4:	4620      	mov	r0, r4
   118a6:	f001 fe61 	bl	1356c <__stdout_hook_install>
	__printk_hook_install(console_out);
   118aa:	4620      	mov	r0, r4
   118ac:	f7fe fa36 	bl	fd1c <__printk_hook_install>
}
   118b0:	bd10      	pop	{r4, pc}
   118b2:	bf00      	nop
   118b4:	00011875 	.word	0x00011875

000118b8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   118b8:	b508      	push	{r3, lr}
   118ba:	4804      	ldr	r0, [pc, #16]	; (118cc <uart_console_init+0x14>)
   118bc:	f009 fcfe 	bl	1b2bc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   118c0:	4b03      	ldr	r3, [pc, #12]	; (118d0 <uart_console_init+0x18>)
   118c2:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
   118c4:	f7ff ffec 	bl	118a0 <uart_console_hook_install>

	return 0;
}
   118c8:	2000      	movs	r0, #0
   118ca:	bd08      	pop	{r3, pc}
   118cc:	00025bf8 	.word	0x00025bf8
   118d0:	20036328 	.word	0x20036328

000118d4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   118d4:	4800      	ldr	r0, [pc, #0]	; (118d8 <get_hf_flags+0x4>)
   118d6:	4770      	bx	lr
   118d8:	20036380 	.word	0x20036380

000118dc <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   118dc:	4b03      	ldr	r3, [pc, #12]	; (118ec <get_subsys+0x10>)
   118de:	1ac0      	subs	r0, r0, r3
   118e0:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   118e2:	4b03      	ldr	r3, [pc, #12]	; (118f0 <get_subsys+0x14>)
   118e4:	fb03 f000 	mul.w	r0, r3, r0
   118e8:	4770      	bx	lr
   118ea:	bf00      	nop
   118ec:	20036340 	.word	0x20036340
   118f0:	b6db6db7 	.word	0xb6db6db7

000118f4 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   118f4:	b538      	push	{r3, r4, r5, lr}
   118f6:	4605      	mov	r5, r0
   118f8:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   118fa:	f7ff ffef 	bl	118dc <get_subsys>
   118fe:	4601      	mov	r1, r0
   11900:	2240      	movs	r2, #64	; 0x40
   11902:	4803      	ldr	r0, [pc, #12]	; (11910 <onoff_stop+0x1c>)
   11904:	f00f fb52 	bl	20fac <stop>
   11908:	4601      	mov	r1, r0
	notify(mgr, res);
   1190a:	4628      	mov	r0, r5
   1190c:	47a0      	blx	r4
}
   1190e:	bd38      	pop	{r3, r4, r5, pc}
   11910:	00025210 	.word	0x00025210

00011914 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11914:	b530      	push	{r4, r5, lr}
   11916:	b083      	sub	sp, #12
   11918:	4605      	mov	r5, r0
   1191a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1191c:	f7ff ffde 	bl	118dc <get_subsys>
   11920:	4601      	mov	r1, r0
   11922:	2340      	movs	r3, #64	; 0x40
   11924:	9300      	str	r3, [sp, #0]
   11926:	4623      	mov	r3, r4
   11928:	4a05      	ldr	r2, [pc, #20]	; (11940 <onoff_start+0x2c>)
   1192a:	4806      	ldr	r0, [pc, #24]	; (11944 <onoff_start+0x30>)
   1192c:	f00f fb58 	bl	20fe0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   11930:	1e01      	subs	r1, r0, #0
   11932:	db01      	blt.n	11938 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   11934:	b003      	add	sp, #12
   11936:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   11938:	4628      	mov	r0, r5
   1193a:	47a0      	blx	r4
}
   1193c:	e7fa      	b.n	11934 <onoff_start+0x20>
   1193e:	bf00      	nop
   11940:	00021029 	.word	0x00021029
   11944:	00025210 	.word	0x00025210

00011948 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   11948:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1194a:	b110      	cbz	r0, 11952 <clock_event_handler+0xa>
   1194c:	2801      	cmp	r0, #1
   1194e:	d00d      	beq.n	1196c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   11950:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   11952:	2100      	movs	r1, #0
   11954:	4808      	ldr	r0, [pc, #32]	; (11978 <clock_event_handler+0x30>)
   11956:	f00f fab0 	bl	20eba <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1195a:	6883      	ldr	r3, [r0, #8]
   1195c:	f013 0f07 	tst.w	r3, #7
   11960:	d1f6      	bne.n	11950 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   11962:	2100      	movs	r1, #0
   11964:	4804      	ldr	r0, [pc, #16]	; (11978 <clock_event_handler+0x30>)
   11966:	f00f fb0f 	bl	20f88 <clkstarted_handle>
   1196a:	e7f1      	b.n	11950 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1196c:	2101      	movs	r1, #1
   1196e:	4802      	ldr	r0, [pc, #8]	; (11978 <clock_event_handler+0x30>)
   11970:	f00f fb0a 	bl	20f88 <clkstarted_handle>
}
   11974:	e7ec      	b.n	11950 <clock_event_handler+0x8>
   11976:	bf00      	nop
   11978:	00025210 	.word	0x00025210

0001197c <generic_hfclk_start>:
{
   1197c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1197e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11982:	f3ef 8411 	mrs	r4, BASEPRI
   11986:	f383 8811 	msr	BASEPRI, r3
   1198a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1198e:	4a13      	ldr	r2, [pc, #76]	; (119dc <generic_hfclk_start+0x60>)
   11990:	6813      	ldr	r3, [r2, #0]
   11992:	f043 0302 	orr.w	r3, r3, #2
   11996:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11998:	f013 0f01 	tst.w	r3, #1
   1199c:	d108      	bne.n	119b0 <generic_hfclk_start+0x34>
	bool already_started = false;
   1199e:	2300      	movs	r3, #0
	__asm__ volatile(
   119a0:	f384 8811 	msr	BASEPRI, r4
   119a4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   119a8:	b99b      	cbnz	r3, 119d2 <generic_hfclk_start+0x56>
	hfclk_start();
   119aa:	f00f fb45 	bl	21038 <hfclk_start>
}
   119ae:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   119b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   119b4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   119b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   119bc:	f012 0f01 	tst.w	r2, #1
   119c0:	d101      	bne.n	119c6 <generic_hfclk_start+0x4a>
	bool already_started = false;
   119c2:	2300      	movs	r3, #0
   119c4:	e7ec      	b.n	119a0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   119c6:	f7ff ff85 	bl	118d4 <get_hf_flags>
   119ca:	f00f faca 	bl	20f62 <set_on_state>
			already_started = true;
   119ce:	2301      	movs	r3, #1
   119d0:	e7e6      	b.n	119a0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   119d2:	2100      	movs	r1, #0
   119d4:	4802      	ldr	r0, [pc, #8]	; (119e0 <generic_hfclk_start+0x64>)
   119d6:	f00f fad7 	bl	20f88 <clkstarted_handle>
		return;
   119da:	e7e8      	b.n	119ae <generic_hfclk_start+0x32>
   119dc:	20036390 	.word	0x20036390
   119e0:	00025210 	.word	0x00025210

000119e4 <generic_hfclk_stop>:
{
   119e4:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   119e6:	4b0a      	ldr	r3, [pc, #40]	; (11a10 <generic_hfclk_stop+0x2c>)
   119e8:	f3bf 8f5b 	dmb	ish
   119ec:	e853 2f00 	ldrex	r2, [r3]
   119f0:	f022 0102 	bic.w	r1, r2, #2
   119f4:	e843 1000 	strex	r0, r1, [r3]
   119f8:	2800      	cmp	r0, #0
   119fa:	d1f7      	bne.n	119ec <generic_hfclk_stop+0x8>
   119fc:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   11a00:	f012 0f01 	tst.w	r2, #1
   11a04:	d000      	beq.n	11a08 <generic_hfclk_stop+0x24>
}
   11a06:	bd08      	pop	{r3, pc}
	hfclk_stop();
   11a08:	f00f fb20 	bl	2104c <hfclk_stop>
   11a0c:	e7fb      	b.n	11a06 <generic_hfclk_stop+0x22>
   11a0e:	bf00      	nop
   11a10:	20036390 	.word	0x20036390

00011a14 <api_blocking_start>:
{
   11a14:	b500      	push	{lr}
   11a16:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   11a18:	f8cd d000 	str.w	sp, [sp]
   11a1c:	f8cd d004 	str.w	sp, [sp, #4]
   11a20:	2300      	movs	r3, #0
   11a22:	9302      	str	r3, [sp, #8]
   11a24:	2301      	movs	r3, #1
   11a26:	9303      	str	r3, [sp, #12]
   11a28:	ab04      	add	r3, sp, #16
   11a2a:	9304      	str	r3, [sp, #16]
   11a2c:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   11a2e:	466b      	mov	r3, sp
   11a30:	4a06      	ldr	r2, [pc, #24]	; (11a4c <api_blocking_start+0x38>)
   11a32:	f00f faf1 	bl	21018 <api_start>
	if (err < 0) {
   11a36:	2800      	cmp	r0, #0
   11a38:	db05      	blt.n	11a46 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   11a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11a3e:	2300      	movs	r3, #0
   11a40:	4668      	mov	r0, sp
   11a42:	f00a f895 	bl	1bb70 <z_impl_k_sem_take>
}
   11a46:	b007      	add	sp, #28
   11a48:	f85d fb04 	ldr.w	pc, [sp], #4
   11a4c:	00021061 	.word	0x00021061

00011a50 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   11a50:	b570      	push	{r4, r5, r6, lr}
   11a52:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11a54:	2200      	movs	r2, #0
   11a56:	2101      	movs	r1, #1
   11a58:	4610      	mov	r0, r2
   11a5a:	f000 ff33 	bl	128c4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   11a5e:	2000      	movs	r0, #0
   11a60:	f000 fefe 	bl	12860 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11a64:	4811      	ldr	r0, [pc, #68]	; (11aac <clk_init+0x5c>)
   11a66:	f008 f8d9 	bl	19c1c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11a6a:	4b11      	ldr	r3, [pc, #68]	; (11ab0 <clk_init+0x60>)
   11a6c:	4298      	cmp	r0, r3
   11a6e:	d11a      	bne.n	11aa6 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   11a70:	f012 fc1a 	bl	242a8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   11a74:	2400      	movs	r4, #0
   11a76:	e003      	b.n	11a80 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   11a78:	2301      	movs	r3, #1
   11a7a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   11a7c:	441c      	add	r4, r3
   11a7e:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   11a80:	2c01      	cmp	r4, #1
   11a82:	d80e      	bhi.n	11aa2 <clk_init+0x52>
						get_sub_data(dev, i);
   11a84:	4621      	mov	r1, r4
   11a86:	4630      	mov	r0, r6
   11a88:	f00f fa17 	bl	20eba <get_sub_data>
   11a8c:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11a8e:	4621      	mov	r1, r4
   11a90:	4630      	mov	r0, r6
   11a92:	f00f fa1f 	bl	20ed4 <get_onoff_manager>
   11a96:	4907      	ldr	r1, [pc, #28]	; (11ab4 <clk_init+0x64>)
   11a98:	f00e f9bf 	bl	1fe1a <onoff_manager_init>
		if (err < 0) {
   11a9c:	2800      	cmp	r0, #0
   11a9e:	daeb      	bge.n	11a78 <clk_init+0x28>
   11aa0:	e000      	b.n	11aa4 <clk_init+0x54>
	}

	return 0;
   11aa2:	2000      	movs	r0, #0
}
   11aa4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   11aa6:	f06f 0004 	mvn.w	r0, #4
   11aaa:	e7fb      	b.n	11aa4 <clk_init+0x54>
   11aac:	00011949 	.word	0x00011949
   11ab0:	0bad0000 	.word	0x0bad0000
   11ab4:	00025cd8 	.word	0x00025cd8

00011ab8 <lfclk_spinwait>:
{
   11ab8:	b570      	push	{r4, r5, r6, lr}
   11aba:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   11abc:	2801      	cmp	r0, #1
   11abe:	d107      	bne.n	11ad0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11ac4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   11ac8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   11acc:	2b01      	cmp	r3, #1
   11ace:	d058      	beq.n	11b82 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11ad0:	f012 fd8f 	bl	245f2 <k_is_in_isr>
   11ad4:	b928      	cbnz	r0, 11ae2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   11ad6:	4b2e      	ldr	r3, [pc, #184]	; (11b90 <lfclk_spinwait+0xd8>)
   11ad8:	781b      	ldrb	r3, [r3, #0]
   11ada:	2b00      	cmp	r3, #0
   11adc:	d041      	beq.n	11b62 <lfclk_spinwait+0xaa>
   11ade:	2300      	movs	r3, #0
   11ae0:	e000      	b.n	11ae4 <lfclk_spinwait+0x2c>
   11ae2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   11ae4:	461c      	mov	r4, r3
   11ae6:	2b00      	cmp	r3, #0
   11ae8:	d03d      	beq.n	11b66 <lfclk_spinwait+0xae>
	__asm__ volatile(
   11aea:	f04f 0340 	mov.w	r3, #64	; 0x40
   11aee:	f3ef 8611 	mrs	r6, BASEPRI
   11af2:	f383 8811 	msr	BASEPRI, r3
   11af6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   11afa:	b924      	cbnz	r4, 11b06 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   11afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11b00:	2202      	movs	r2, #2
   11b02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11b0a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   11b0e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11b12:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   11b16:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   11b1a:	d12b      	bne.n	11b74 <lfclk_spinwait+0xbc>
    return false;
   11b1c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11b1e:	b11a      	cbz	r2, 11b28 <lfclk_spinwait+0x70>
   11b20:	2b01      	cmp	r3, #1
   11b22:	d029      	beq.n	11b78 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11b24:	2d01      	cmp	r5, #1
   11b26:	d027      	beq.n	11b78 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   11b28:	b1fc      	cbz	r4, 11b6a <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   11b2a:	4630      	mov	r0, r6
   11b2c:	f000 ff6e 	bl	12a0c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11b30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11b34:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11b38:	2b00      	cmp	r3, #0
   11b3a:	d1e4      	bne.n	11b06 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11b3c:	4b15      	ldr	r3, [pc, #84]	; (11b94 <lfclk_spinwait+0xdc>)
   11b3e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   11b40:	2b00      	cmp	r3, #0
   11b42:	d0e0      	beq.n	11b06 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11b44:	4b13      	ldr	r3, [pc, #76]	; (11b94 <lfclk_spinwait+0xdc>)
   11b46:	2200      	movs	r2, #0
   11b48:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11b4a:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   11b4c:	2301      	movs	r3, #1
   11b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   11b52:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11b56:	4a10      	ldr	r2, [pc, #64]	; (11b98 <lfclk_spinwait+0xe0>)
   11b58:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11b5c:	4a0f      	ldr	r2, [pc, #60]	; (11b9c <lfclk_spinwait+0xe4>)
   11b5e:	6013      	str	r3, [r2, #0]
}
   11b60:	e7d1      	b.n	11b06 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11b62:	2301      	movs	r3, #1
   11b64:	e7be      	b.n	11ae4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   11b66:	2600      	movs	r6, #0
   11b68:	e7c7      	b.n	11afa <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   11b6a:	2021      	movs	r0, #33	; 0x21
   11b6c:	2100      	movs	r1, #0
   11b6e:	f00a fd89 	bl	1c684 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11b72:	e7dd      	b.n	11b30 <lfclk_spinwait+0x78>
                return true;
   11b74:	2201      	movs	r2, #1
   11b76:	e7d2      	b.n	11b1e <lfclk_spinwait+0x66>
	if (isr_mode) {
   11b78:	b124      	cbz	r4, 11b84 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   11b7a:	f386 8811 	msr	BASEPRI, r6
   11b7e:	f3bf 8f6f 	isb	sy
}
   11b82:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   11b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11b88:	2202      	movs	r2, #2
   11b8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11b8e:	e7f8      	b.n	11b82 <lfclk_spinwait+0xca>
   11b90:	20038121 	.word	0x20038121
   11b94:	40000104 	.word	0x40000104
   11b98:	e000e100 	.word	0xe000e100
   11b9c:	40000008 	.word	0x40000008

00011ba0 <z_nrf_clock_control_lf_on>:
{
   11ba0:	b510      	push	{r4, lr}
   11ba2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ba4:	4b10      	ldr	r3, [pc, #64]	; (11be8 <z_nrf_clock_control_lf_on+0x48>)
   11ba6:	2101      	movs	r1, #1
   11ba8:	f3bf 8f5b 	dmb	ish
   11bac:	e853 2f00 	ldrex	r2, [r3]
   11bb0:	e843 1000 	strex	r0, r1, [r3]
   11bb4:	2800      	cmp	r0, #0
   11bb6:	d1f9      	bne.n	11bac <z_nrf_clock_control_lf_on+0xc>
   11bb8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   11bbc:	b11a      	cbz	r2, 11bc6 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   11bbe:	1e63      	subs	r3, r4, #1
   11bc0:	2b01      	cmp	r3, #1
   11bc2:	d90c      	bls.n	11bde <z_nrf_clock_control_lf_on+0x3e>
}
   11bc4:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   11bc6:	4809      	ldr	r0, [pc, #36]	; (11bec <z_nrf_clock_control_lf_on+0x4c>)
   11bc8:	f00f f984 	bl	20ed4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   11bcc:	4908      	ldr	r1, [pc, #32]	; (11bf0 <z_nrf_clock_control_lf_on+0x50>)
   11bce:	2300      	movs	r3, #0
   11bd0:	604b      	str	r3, [r1, #4]
   11bd2:	60cb      	str	r3, [r1, #12]
   11bd4:	2301      	movs	r3, #1
   11bd6:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   11bd8:	f00e f93b 	bl	1fe52 <onoff_request>
   11bdc:	e7ef      	b.n	11bbe <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   11bde:	4620      	mov	r0, r4
   11be0:	f7ff ff6a 	bl	11ab8 <lfclk_spinwait>
		break;
   11be4:	e7ee      	b.n	11bc4 <z_nrf_clock_control_lf_on+0x24>
   11be6:	bf00      	nop
   11be8:	20036394 	.word	0x20036394
   11bec:	00025210 	.word	0x00025210
   11bf0:	20036330 	.word	0x20036330

00011bf4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11bf4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   11bf8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11bfc:	4b01      	ldr	r3, [pc, #4]	; (11c04 <set_comparator+0x10>)
   11bfe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   11c02:	4770      	bx	lr
   11c04:	40011000 	.word	0x40011000

00011c08 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   11c08:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11c0c:	4b01      	ldr	r3, [pc, #4]	; (11c14 <get_comparator+0xc>)
   11c0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   11c12:	4770      	bx	lr
   11c14:	40011000 	.word	0x40011000

00011c18 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11c1c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11c1e:	4a02      	ldr	r2, [pc, #8]	; (11c28 <event_enable+0x10>)
   11c20:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   11c24:	4770      	bx	lr
   11c26:	bf00      	nop
   11c28:	40011000 	.word	0x40011000

00011c2c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11c30:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11c32:	4a02      	ldr	r2, [pc, #8]	; (11c3c <event_disable+0x10>)
   11c34:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   11c38:	4770      	bx	lr
   11c3a:	bf00      	nop
   11c3c:	40011000 	.word	0x40011000

00011c40 <counter>:
     return p_reg->COUNTER;
   11c40:	4b01      	ldr	r3, [pc, #4]	; (11c48 <counter+0x8>)
   11c42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   11c46:	4770      	bx	lr
   11c48:	40011000 	.word	0x40011000

00011c4c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   11c4c:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11c4e:	2400      	movs	r4, #0
   11c50:	2c00      	cmp	r4, #0
   11c52:	dd00      	ble.n	11c56 <rtc_nrf_isr+0xa>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   11c54:	bd70      	pop	{r4, r5, r6, pc}
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   11c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11c5a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   11c5c:	4a19      	ldr	r2, [pc, #100]	; (11cc4 <rtc_nrf_isr+0x78>)
   11c5e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   11c62:	4213      	tst	r3, r2
   11c64:	d009      	beq.n	11c7a <rtc_nrf_isr+0x2e>
		    nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan))) {
   11c66:	f104 0350 	add.w	r3, r4, #80	; 0x50
   11c6a:	009b      	lsls	r3, r3, #2
   11c6c:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11c72:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   11c76:	681b      	ldr	r3, [r3, #0]
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   11c78:	b90b      	cbnz	r3, 11c7e <rtc_nrf_isr+0x32>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11c7a:	3401      	adds	r4, #1
   11c7c:	e7e8      	b.n	11c50 <rtc_nrf_isr+0x4>
			event_clear(chan);
   11c7e:	4620      	mov	r0, r4
   11c80:	f00f f9fa 	bl	21078 <event_clear>
			event_disable(chan);
   11c84:	4620      	mov	r0, r4
   11c86:	f7ff ffd1 	bl	11c2c <event_disable>
			cc_val = get_comparator(chan);
   11c8a:	4620      	mov	r0, r4
   11c8c:	f7ff ffbc 	bl	11c08 <get_comparator>
   11c90:	4605      	mov	r5, r0
			now = counter();
   11c92:	f7ff ffd5 	bl	11c40 <counter>
   11c96:	4606      	mov	r6, r0
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
   11c98:	4629      	mov	r1, r5
   11c9a:	f00f f9e9 	bl	21070 <counter_sub>
   11c9e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11ca2:	d800      	bhi.n	11ca6 <rtc_nrf_isr+0x5a>
			cc_val = get_comparator(chan);
   11ca4:	462e      	mov	r6, r5
			handler = cc_data[chan].callback;
   11ca6:	4b08      	ldr	r3, [pc, #32]	; (11cc8 <rtc_nrf_isr+0x7c>)
   11ca8:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
			cc_data[chan].callback = NULL;
   11cac:	2200      	movs	r2, #0
   11cae:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
			if (handler) {
   11cb2:	2d00      	cmp	r5, #0
   11cb4:	d0e1      	beq.n	11c7a <rtc_nrf_isr+0x2e>
				handler(chan, cc_val,
   11cb6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   11cba:	685a      	ldr	r2, [r3, #4]
   11cbc:	4631      	mov	r1, r6
   11cbe:	4620      	mov	r0, r4
   11cc0:	47a8      	blx	r5
   11cc2:	e7da      	b.n	11c7a <rtc_nrf_isr+0x2e>
   11cc4:	40011000 	.word	0x40011000
   11cc8:	2003639c 	.word	0x2003639c

00011ccc <compare_set>:
{
   11ccc:	b538      	push	{r3, r4, r5, lr}
	cc_data[chan].callback = handler;
   11cce:	4c04      	ldr	r4, [pc, #16]	; (11ce0 <compare_set+0x14>)
   11cd0:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	cc_data[chan].user_context = user_data;
   11cd4:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   11cd8:	6063      	str	r3, [r4, #4]
	set_absolute_alarm(chan, cc_value);
   11cda:	f00f f9d9 	bl	21090 <set_absolute_alarm>
}
   11cde:	bd38      	pop	{r3, r4, r5, pc}
   11ce0:	2003639c 	.word	0x2003639c

00011ce4 <sys_clock_timeout_handler>:
{
   11ce4:	b538      	push	{r3, r4, r5, lr}
   11ce6:	4608      	mov	r0, r1
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   11ce8:	4d04      	ldr	r5, [pc, #16]	; (11cfc <sys_clock_timeout_handler+0x18>)
   11cea:	682c      	ldr	r4, [r5, #0]
   11cec:	4621      	mov	r1, r4
   11cee:	f00f f9bf 	bl	21070 <counter_sub>
	last_count += dticks * CYC_PER_TICK;
   11cf2:	4404      	add	r4, r0
   11cf4:	602c      	str	r4, [r5, #0]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   11cf6:	f00a fe4d 	bl	1c994 <sys_clock_announce>
}
   11cfa:	bd38      	pop	{r3, r4, r5, pc}
   11cfc:	200363a8 	.word	0x200363a8

00011d00 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   11d00:	b508      	push	{r3, lr}
    p_reg->PRESCALER = val;
   11d02:	2300      	movs	r3, #0
   11d04:	4a12      	ldr	r2, [pc, #72]	; (11d50 <sys_clock_driver_init+0x50>)
   11d06:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	dd18      	ble.n	11d40 <sys_clock_driver_init+0x40>
   11d0e:	4b11      	ldr	r3, [pc, #68]	; (11d54 <sys_clock_driver_init+0x54>)
   11d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11d14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   11d18:	2200      	movs	r2, #0
   11d1a:	2101      	movs	r1, #1
   11d1c:	2011      	movs	r0, #17
   11d1e:	f000 fdd1 	bl	128c4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11d22:	2011      	movs	r0, #17
   11d24:	f000 fd9c 	bl	12860 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11d28:	2301      	movs	r3, #1
   11d2a:	4a0b      	ldr	r2, [pc, #44]	; (11d58 <sys_clock_driver_init+0x58>)
   11d2c:	6013      	str	r3, [r2, #0]
   11d2e:	3a08      	subs	r2, #8
   11d30:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   11d32:	4a0a      	ldr	r2, [pc, #40]	; (11d5c <sys_clock_driver_init+0x5c>)
   11d34:	6013      	str	r3, [r2, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   11d36:	2002      	movs	r0, #2
   11d38:	f7ff ff32 	bl	11ba0 <z_nrf_clock_control_lf_on>

	return 0;
}
   11d3c:	2000      	movs	r0, #0
   11d3e:	bd08      	pop	{r3, pc}
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11d40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11d44:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   11d46:	4902      	ldr	r1, [pc, #8]	; (11d50 <sys_clock_driver_init+0x50>)
   11d48:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11d4c:	3301      	adds	r3, #1
   11d4e:	e7dc      	b.n	11d0a <sys_clock_driver_init+0xa>
   11d50:	40011000 	.word	0x40011000
   11d54:	e000e100 	.word	0xe000e100
   11d58:	40011008 	.word	0x40011008
   11d5c:	200363a4 	.word	0x200363a4

00011d60 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   11d60:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11d62:	f1b0 3fff 	cmp.w	r0, #4294967295
   11d66:	d007      	beq.n	11d78 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11d68:	1e44      	subs	r4, r0, #1
   11d6a:	2c00      	cmp	r4, #0
   11d6c:	dd07      	ble.n	11d7e <sys_clock_set_timeout+0x1e>
   11d6e:	4b10      	ldr	r3, [pc, #64]	; (11db0 <sys_clock_set_timeout+0x50>)
   11d70:	429c      	cmp	r4, r3
   11d72:	dd05      	ble.n	11d80 <sys_clock_set_timeout+0x20>
   11d74:	4c0f      	ldr	r4, [pc, #60]	; (11db4 <sys_clock_set_timeout+0x54>)
   11d76:	e003      	b.n	11d80 <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11d78:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   11d7c:	e7f4      	b.n	11d68 <sys_clock_set_timeout+0x8>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11d7e:	2400      	movs	r4, #0

	uint32_t unannounced = counter_sub(counter(), last_count);
   11d80:	f7ff ff5e 	bl	11c40 <counter>
   11d84:	4b0c      	ldr	r3, [pc, #48]	; (11db8 <sys_clock_set_timeout+0x58>)
   11d86:	681d      	ldr	r5, [r3, #0]
   11d88:	4629      	mov	r1, r5
   11d8a:	f00f f971 	bl	21070 <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   11d8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11d92:	d300      	bcc.n	11d96 <sys_clock_set_timeout+0x36>
		ticks = 0;
   11d94:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11d96:	1821      	adds	r1, r4, r0
   11d98:	3101      	adds	r1, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   11d9a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   11d9e:	d300      	bcc.n	11da2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   11da0:	4904      	ldr	r1, [pc, #16]	; (11db4 <sys_clock_set_timeout+0x54>)
	}

	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
   11da2:	2300      	movs	r3, #0
   11da4:	4a05      	ldr	r2, [pc, #20]	; (11dbc <sys_clock_set_timeout+0x5c>)
   11da6:	4429      	add	r1, r5
   11da8:	4618      	mov	r0, r3
   11daa:	f7ff ff8f 	bl	11ccc <compare_set>
}
   11dae:	bd38      	pop	{r3, r4, r5, pc}
   11db0:	007ffffe 	.word	0x007ffffe
   11db4:	007fffff 	.word	0x007fffff
   11db8:	200363a8 	.word	0x200363a8
   11dbc:	00011ce5 	.word	0x00011ce5

00011dc0 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   11dc0:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   11dc2:	f7ff ff3d 	bl	11c40 <counter>
   11dc6:	4b02      	ldr	r3, [pc, #8]	; (11dd0 <sys_clock_elapsed+0x10>)
   11dc8:	6819      	ldr	r1, [r3, #0]
   11dca:	f00f f951 	bl	21070 <counter_sub>
}
   11dce:	bd08      	pop	{r3, pc}
   11dd0:	200363a8 	.word	0x200363a8

00011dd4 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   11dd4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   11dd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   11dda:	f3ef 8511 	mrs	r5, BASEPRI
   11dde:	f383 8811 	msr	BASEPRI, r3
   11de2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   11de6:	f7ff ff2b 	bl	11c40 <counter>
   11dea:	4b05      	ldr	r3, [pc, #20]	; (11e00 <sys_clock_cycle_get_32+0x2c>)
   11dec:	681c      	ldr	r4, [r3, #0]
   11dee:	4621      	mov	r1, r4
   11df0:	f00f f93e 	bl	21070 <counter_sub>
   11df4:	4420      	add	r0, r4
	__asm__ volatile(
   11df6:	f385 8811 	msr	BASEPRI, r5
   11dfa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   11dfe:	bd38      	pop	{r3, r4, r5, pc}
   11e00:	200363a8 	.word	0x200363a8

00011e04 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   11e04:	b4f0      	push	{r4, r5, r6, r7}
   11e06:	b08c      	sub	sp, #48	; 0x30
   11e08:	4607      	mov	r7, r0
   11e0a:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   11e0c:	ac01      	add	r4, sp, #4
   11e0e:	4d2a      	ldr	r5, [pc, #168]	; (11eb8 <tc_aes128_set_encrypt_key+0xb4>)
   11e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11e18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   11e1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   11e20:	2f00      	cmp	r7, #0
   11e22:	d045      	beq.n	11eb0 <tc_aes128_set_encrypt_key+0xac>
   11e24:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   11e26:	2e00      	cmp	r6, #0
   11e28:	d044      	beq.n	11eb4 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   11e2a:	2300      	movs	r3, #0
   11e2c:	e00f      	b.n	11e4e <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11e2e:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   11e32:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   11e36:	784a      	ldrb	r2, [r1, #1]
   11e38:	0412      	lsls	r2, r2, #16
   11e3a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11e3e:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11e40:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   11e44:	78c9      	ldrb	r1, [r1, #3]
   11e46:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   11e48:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   11e4c:	3301      	adds	r3, #1
   11e4e:	2b03      	cmp	r3, #3
   11e50:	d9ed      	bls.n	11e2e <tc_aes128_set_encrypt_key+0x2a>
   11e52:	e006      	b.n	11e62 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   11e54:	1f19      	subs	r1, r3, #4
   11e56:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   11e5a:	404a      	eors	r2, r1
   11e5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   11e60:	3301      	adds	r3, #1
   11e62:	2b2b      	cmp	r3, #43	; 0x2b
   11e64:	d820      	bhi.n	11ea8 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   11e66:	1e5a      	subs	r2, r3, #1
   11e68:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   11e6c:	f013 0f03 	tst.w	r3, #3
   11e70:	d1f0      	bne.n	11e54 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   11e72:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   11e76:	0e11      	lsrs	r1, r2, #24
   11e78:	4c10      	ldr	r4, [pc, #64]	; (11ebc <tc_aes128_set_encrypt_key+0xb8>)
   11e7a:	5c65      	ldrb	r5, [r4, r1]
   11e7c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   11e80:	5c61      	ldrb	r1, [r4, r1]
   11e82:	0409      	lsls	r1, r1, #16
   11e84:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   11e88:	f3c2 2507 	ubfx	r5, r2, #8, #8
   11e8c:	5d65      	ldrb	r5, [r4, r5]
   11e8e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   11e92:	b2d2      	uxtb	r2, r2
   11e94:	5ca2      	ldrb	r2, [r4, r2]
   11e96:	4311      	orrs	r1, r2
   11e98:	f023 0203 	bic.w	r2, r3, #3
   11e9c:	ac0c      	add	r4, sp, #48	; 0x30
   11e9e:	4422      	add	r2, r4
   11ea0:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   11ea4:	404a      	eors	r2, r1
   11ea6:	e7d5      	b.n	11e54 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   11ea8:	2001      	movs	r0, #1
}
   11eaa:	b00c      	add	sp, #48	; 0x30
   11eac:	bcf0      	pop	{r4, r5, r6, r7}
   11eae:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   11eb0:	2000      	movs	r0, #0
   11eb2:	e7fa      	b.n	11eaa <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   11eb4:	2000      	movs	r0, #0
   11eb6:	e7f8      	b.n	11eaa <tc_aes128_set_encrypt_key+0xa6>
   11eb8:	000255ec 	.word	0x000255ec
   11ebc:	00025cf0 	.word	0x00025cf0

00011ec0 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   11ec0:	2800      	cmp	r0, #0
   11ec2:	f000 839a 	beq.w	125fa <tc_aes_encrypt+0x73a>
{
   11ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11eca:	b088      	sub	sp, #32
   11ecc:	4616      	mov	r6, r2
   11ece:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   11ed0:	2900      	cmp	r1, #0
   11ed2:	f000 8394 	beq.w	125fe <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   11ed6:	2a00      	cmp	r2, #0
   11ed8:	f000 8393 	beq.w	12602 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   11edc:	2310      	movs	r3, #16
   11ede:	460a      	mov	r2, r1
   11ee0:	4619      	mov	r1, r3
   11ee2:	eb0d 0003 	add.w	r0, sp, r3
   11ee6:	f00f f90d 	bl	21104 <_copy>
	add_round_key(state, s->words);
   11eea:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   11eec:	6833      	ldr	r3, [r6, #0]
   11eee:	f89d 2010 	ldrb.w	r2, [sp, #16]
   11ef2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11ef6:	f88d 2010 	strb.w	r2, [sp, #16]
   11efa:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11efe:	f89d 1011 	ldrb.w	r1, [sp, #17]
   11f02:	404a      	eors	r2, r1
   11f04:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   11f08:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11f0c:	f89d 1012 	ldrb.w	r1, [sp, #18]
   11f10:	404a      	eors	r2, r1
   11f12:	f88d 2012 	strb.w	r2, [sp, #18]
   11f16:	b2db      	uxtb	r3, r3
   11f18:	f89d 2013 	ldrb.w	r2, [sp, #19]
   11f1c:	4053      	eors	r3, r2
   11f1e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   11f22:	6873      	ldr	r3, [r6, #4]
   11f24:	f89d 2014 	ldrb.w	r2, [sp, #20]
   11f28:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11f2c:	f88d 2014 	strb.w	r2, [sp, #20]
   11f30:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11f34:	f89d 1015 	ldrb.w	r1, [sp, #21]
   11f38:	404a      	eors	r2, r1
   11f3a:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   11f3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11f42:	f89d 1016 	ldrb.w	r1, [sp, #22]
   11f46:	404a      	eors	r2, r1
   11f48:	f88d 2016 	strb.w	r2, [sp, #22]
   11f4c:	b2db      	uxtb	r3, r3
   11f4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   11f52:	4053      	eors	r3, r2
   11f54:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   11f58:	68b3      	ldr	r3, [r6, #8]
   11f5a:	f89d 2018 	ldrb.w	r2, [sp, #24]
   11f5e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11f62:	f88d 2018 	strb.w	r2, [sp, #24]
   11f66:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11f6a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   11f6e:	404a      	eors	r2, r1
   11f70:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   11f74:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11f78:	f89d 101a 	ldrb.w	r1, [sp, #26]
   11f7c:	404a      	eors	r2, r1
   11f7e:	f88d 201a 	strb.w	r2, [sp, #26]
   11f82:	b2db      	uxtb	r3, r3
   11f84:	f89d 201b 	ldrb.w	r2, [sp, #27]
   11f88:	4053      	eors	r3, r2
   11f8a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   11f8e:	68f3      	ldr	r3, [r6, #12]
   11f90:	f89d 201c 	ldrb.w	r2, [sp, #28]
   11f94:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11f98:	f88d 201c 	strb.w	r2, [sp, #28]
   11f9c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11fa0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   11fa4:	404a      	eors	r2, r1
   11fa6:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   11faa:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11fae:	f89d 101e 	ldrb.w	r1, [sp, #30]
   11fb2:	404a      	eors	r2, r1
   11fb4:	f88d 201e 	strb.w	r2, [sp, #30]
   11fb8:	b2db      	uxtb	r3, r3
   11fba:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11fbe:	4053      	eors	r3, r2
   11fc0:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   11fc4:	2400      	movs	r4, #0
}
   11fc6:	e239      	b.n	1243c <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   11fc8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   11fcc:	f88d 3000 	strb.w	r3, [sp]
   11fd0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11fd4:	f88d 3001 	strb.w	r3, [sp, #1]
   11fd8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11fdc:	f88d 3002 	strb.w	r3, [sp, #2]
   11fe0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11fe4:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   11fe8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11fec:	f88d 3004 	strb.w	r3, [sp, #4]
   11ff0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11ff4:	f88d 3005 	strb.w	r3, [sp, #5]
   11ff8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   11ffc:	f88d 3006 	strb.w	r3, [sp, #6]
   12000:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12004:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   12008:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1200c:	f88d 3008 	strb.w	r3, [sp, #8]
   12010:	f89d 301d 	ldrb.w	r3, [sp, #29]
   12014:	f88d 3009 	strb.w	r3, [sp, #9]
   12018:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1201c:	f88d 300a 	strb.w	r3, [sp, #10]
   12020:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12024:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   12028:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1202c:	f88d 300c 	strb.w	r3, [sp, #12]
   12030:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12034:	f88d 300d 	strb.w	r3, [sp, #13]
   12038:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1203c:	f88d 300e 	strb.w	r3, [sp, #14]
   12040:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12044:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   12048:	2310      	movs	r3, #16
   1204a:	466a      	mov	r2, sp
   1204c:	4619      	mov	r1, r3
   1204e:	eb0d 0003 	add.w	r0, sp, r3
   12052:	f00f f857 	bl	21104 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12056:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1205a:	f00f f864 	bl	21126 <_double_byte>
   1205e:	4680      	mov	r8, r0
   12060:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12064:	f00f f85f 	bl	21126 <_double_byte>
   12068:	4601      	mov	r1, r0
   1206a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1206e:	f89d 2012 	ldrb.w	r2, [sp, #18]
   12072:	f89d 3013 	ldrb.w	r3, [sp, #19]
   12076:	4041      	eors	r1, r0
   12078:	ea88 0801 	eor.w	r8, r8, r1
   1207c:	ea82 0208 	eor.w	r2, r2, r8
   12080:	4053      	eors	r3, r2
   12082:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12086:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1208a:	f00f f84c 	bl	21126 <_double_byte>
   1208e:	ea88 0800 	eor.w	r8, r8, r0
   12092:	fa5f f888 	uxtb.w	r8, r8
   12096:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1209a:	f00f f844 	bl	21126 <_double_byte>
   1209e:	4602      	mov	r2, r0
   120a0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   120a4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   120a8:	4042      	eors	r2, r0
   120aa:	ea88 0802 	eor.w	r8, r8, r2
   120ae:	ea83 0308 	eor.w	r3, r3, r8
   120b2:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   120b6:	f89d 8010 	ldrb.w	r8, [sp, #16]
   120ba:	f89d 3011 	ldrb.w	r3, [sp, #17]
   120be:	ea88 0803 	eor.w	r8, r8, r3
   120c2:	f00f f830 	bl	21126 <_double_byte>
   120c6:	ea88 0800 	eor.w	r8, r8, r0
   120ca:	fa5f f888 	uxtb.w	r8, r8
   120ce:	f89d 0013 	ldrb.w	r0, [sp, #19]
   120d2:	f00f f828 	bl	21126 <_double_byte>
   120d6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   120da:	4058      	eors	r0, r3
   120dc:	ea88 0800 	eor.w	r8, r8, r0
   120e0:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   120e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   120e8:	f00f f81d 	bl	21126 <_double_byte>
   120ec:	f89d 2010 	ldrb.w	r2, [sp, #16]
   120f0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   120f4:	f89d 8012 	ldrb.w	r8, [sp, #18]
   120f8:	4050      	eors	r0, r2
   120fa:	4043      	eors	r3, r0
   120fc:	ea88 0803 	eor.w	r8, r8, r3
   12100:	fa5f f888 	uxtb.w	r8, r8
   12104:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12108:	f00f f80d 	bl	21126 <_double_byte>
   1210c:	ea88 0800 	eor.w	r8, r8, r0
   12110:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12114:	f89d 0014 	ldrb.w	r0, [sp, #20]
   12118:	f00f f805 	bl	21126 <_double_byte>
   1211c:	4680      	mov	r8, r0
   1211e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   12122:	f00f f800 	bl	21126 <_double_byte>
   12126:	4601      	mov	r1, r0
   12128:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1212c:	f89d 2016 	ldrb.w	r2, [sp, #22]
   12130:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12134:	4041      	eors	r1, r0
   12136:	ea88 0801 	eor.w	r8, r8, r1
   1213a:	ea82 0208 	eor.w	r2, r2, r8
   1213e:	4053      	eors	r3, r2
   12140:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12144:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12148:	f00e ffed 	bl	21126 <_double_byte>
   1214c:	ea88 0800 	eor.w	r8, r8, r0
   12150:	fa5f f888 	uxtb.w	r8, r8
   12154:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12158:	f00e ffe5 	bl	21126 <_double_byte>
   1215c:	4602      	mov	r2, r0
   1215e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   12162:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12166:	4042      	eors	r2, r0
   12168:	ea88 0802 	eor.w	r8, r8, r2
   1216c:	ea83 0308 	eor.w	r3, r3, r8
   12170:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12174:	f89d 8014 	ldrb.w	r8, [sp, #20]
   12178:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1217c:	ea88 0803 	eor.w	r8, r8, r3
   12180:	f00e ffd1 	bl	21126 <_double_byte>
   12184:	ea88 0800 	eor.w	r8, r8, r0
   12188:	fa5f f888 	uxtb.w	r8, r8
   1218c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12190:	f00e ffc9 	bl	21126 <_double_byte>
   12194:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12198:	4058      	eors	r0, r3
   1219a:	ea88 0800 	eor.w	r8, r8, r0
   1219e:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   121a2:	f89d 0014 	ldrb.w	r0, [sp, #20]
   121a6:	f00e ffbe 	bl	21126 <_double_byte>
   121aa:	f89d 2014 	ldrb.w	r2, [sp, #20]
   121ae:	f89d 3015 	ldrb.w	r3, [sp, #21]
   121b2:	f89d 8016 	ldrb.w	r8, [sp, #22]
   121b6:	4050      	eors	r0, r2
   121b8:	4043      	eors	r3, r0
   121ba:	ea88 0803 	eor.w	r8, r8, r3
   121be:	fa5f f888 	uxtb.w	r8, r8
   121c2:	f89d 0017 	ldrb.w	r0, [sp, #23]
   121c6:	f00e ffae 	bl	21126 <_double_byte>
   121ca:	ea88 0800 	eor.w	r8, r8, r0
   121ce:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   121d2:	f89d 0018 	ldrb.w	r0, [sp, #24]
   121d6:	f00e ffa6 	bl	21126 <_double_byte>
   121da:	4680      	mov	r8, r0
   121dc:	f89d 0019 	ldrb.w	r0, [sp, #25]
   121e0:	f00e ffa1 	bl	21126 <_double_byte>
   121e4:	4601      	mov	r1, r0
   121e6:	f89d 0019 	ldrb.w	r0, [sp, #25]
   121ea:	f89d 201a 	ldrb.w	r2, [sp, #26]
   121ee:	f89d 301b 	ldrb.w	r3, [sp, #27]
   121f2:	4041      	eors	r1, r0
   121f4:	ea88 0801 	eor.w	r8, r8, r1
   121f8:	ea82 0208 	eor.w	r2, r2, r8
   121fc:	4053      	eors	r3, r2
   121fe:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   12202:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12206:	f00e ff8e 	bl	21126 <_double_byte>
   1220a:	ea88 0800 	eor.w	r8, r8, r0
   1220e:	fa5f f888 	uxtb.w	r8, r8
   12212:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12216:	f00e ff86 	bl	21126 <_double_byte>
   1221a:	4602      	mov	r2, r0
   1221c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12220:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12224:	4042      	eors	r2, r0
   12226:	ea88 0802 	eor.w	r8, r8, r2
   1222a:	ea83 0308 	eor.w	r3, r3, r8
   1222e:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   12232:	f89d 8018 	ldrb.w	r8, [sp, #24]
   12236:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1223a:	ea88 0803 	eor.w	r8, r8, r3
   1223e:	f00e ff72 	bl	21126 <_double_byte>
   12242:	ea88 0800 	eor.w	r8, r8, r0
   12246:	fa5f f888 	uxtb.w	r8, r8
   1224a:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1224e:	f00e ff6a 	bl	21126 <_double_byte>
   12252:	f89d 301b 	ldrb.w	r3, [sp, #27]
   12256:	4058      	eors	r0, r3
   12258:	ea88 0800 	eor.w	r8, r8, r0
   1225c:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   12260:	f89d 0018 	ldrb.w	r0, [sp, #24]
   12264:	f00e ff5f 	bl	21126 <_double_byte>
   12268:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1226c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12270:	f89d 801a 	ldrb.w	r8, [sp, #26]
   12274:	4050      	eors	r0, r2
   12276:	4043      	eors	r3, r0
   12278:	ea88 0803 	eor.w	r8, r8, r3
   1227c:	fa5f f888 	uxtb.w	r8, r8
   12280:	f89d 001b 	ldrb.w	r0, [sp, #27]
   12284:	f00e ff4f 	bl	21126 <_double_byte>
   12288:	ea88 0800 	eor.w	r8, r8, r0
   1228c:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   12290:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12294:	f00e ff47 	bl	21126 <_double_byte>
   12298:	4680      	mov	r8, r0
   1229a:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1229e:	f00e ff42 	bl	21126 <_double_byte>
   122a2:	4601      	mov	r1, r0
   122a4:	f89d 001d 	ldrb.w	r0, [sp, #29]
   122a8:	f89d 201e 	ldrb.w	r2, [sp, #30]
   122ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
   122b0:	4041      	eors	r1, r0
   122b2:	ea88 0801 	eor.w	r8, r8, r1
   122b6:	ea82 0208 	eor.w	r2, r2, r8
   122ba:	4053      	eors	r3, r2
   122bc:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   122c0:	f89d 801c 	ldrb.w	r8, [sp, #28]
   122c4:	f00e ff2f 	bl	21126 <_double_byte>
   122c8:	ea88 0800 	eor.w	r8, r8, r0
   122cc:	fa5f f888 	uxtb.w	r8, r8
   122d0:	f89d 001e 	ldrb.w	r0, [sp, #30]
   122d4:	f00e ff27 	bl	21126 <_double_byte>
   122d8:	4602      	mov	r2, r0
   122da:	f89d 001e 	ldrb.w	r0, [sp, #30]
   122de:	f89d 301f 	ldrb.w	r3, [sp, #31]
   122e2:	4042      	eors	r2, r0
   122e4:	ea88 0802 	eor.w	r8, r8, r2
   122e8:	ea83 0308 	eor.w	r3, r3, r8
   122ec:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   122f0:	f89d 801c 	ldrb.w	r8, [sp, #28]
   122f4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   122f8:	ea88 0803 	eor.w	r8, r8, r3
   122fc:	f00e ff13 	bl	21126 <_double_byte>
   12300:	ea88 0800 	eor.w	r8, r8, r0
   12304:	fa5f f888 	uxtb.w	r8, r8
   12308:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1230c:	f00e ff0b 	bl	21126 <_double_byte>
   12310:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12314:	4058      	eors	r0, r3
   12316:	ea88 0800 	eor.w	r8, r8, r0
   1231a:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1231e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   12322:	f00e ff00 	bl	21126 <_double_byte>
   12326:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1232a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1232e:	f89d 801e 	ldrb.w	r8, [sp, #30]
   12332:	4050      	eors	r0, r2
   12334:	4043      	eors	r3, r0
   12336:	ea88 0803 	eor.w	r8, r8, r3
   1233a:	fa5f f888 	uxtb.w	r8, r8
   1233e:	f89d 001f 	ldrb.w	r0, [sp, #31]
   12342:	f00e fef0 	bl	21126 <_double_byte>
   12346:	ea88 0800 	eor.w	r8, r8, r0
   1234a:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1234e:	2310      	movs	r3, #16
   12350:	466a      	mov	r2, sp
   12352:	4619      	mov	r1, r3
   12354:	eb0d 0003 	add.w	r0, sp, r3
   12358:	f00e fed4 	bl	21104 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1235c:	3401      	adds	r4, #1
   1235e:	0123      	lsls	r3, r4, #4
   12360:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12364:	58eb      	ldr	r3, [r5, r3]
   12366:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1236a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1236e:	f88d 1010 	strb.w	r1, [sp, #16]
   12372:	f3c3 4107 	ubfx	r1, r3, #16, #8
   12376:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1237a:	4041      	eors	r1, r0
   1237c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   12380:	f3c3 2107 	ubfx	r1, r3, #8, #8
   12384:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12388:	4041      	eors	r1, r0
   1238a:	f88d 1012 	strb.w	r1, [sp, #18]
   1238e:	b2db      	uxtb	r3, r3
   12390:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12394:	404b      	eors	r3, r1
   12396:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1239a:	6853      	ldr	r3, [r2, #4]
   1239c:	f89d 1014 	ldrb.w	r1, [sp, #20]
   123a0:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   123a4:	f88d 1014 	strb.w	r1, [sp, #20]
   123a8:	f3c3 4107 	ubfx	r1, r3, #16, #8
   123ac:	f89d 0015 	ldrb.w	r0, [sp, #21]
   123b0:	4041      	eors	r1, r0
   123b2:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   123b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
   123ba:	f89d 0016 	ldrb.w	r0, [sp, #22]
   123be:	4041      	eors	r1, r0
   123c0:	f88d 1016 	strb.w	r1, [sp, #22]
   123c4:	b2db      	uxtb	r3, r3
   123c6:	f89d 1017 	ldrb.w	r1, [sp, #23]
   123ca:	404b      	eors	r3, r1
   123cc:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   123d0:	6893      	ldr	r3, [r2, #8]
   123d2:	f89d 1018 	ldrb.w	r1, [sp, #24]
   123d6:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   123da:	f88d 1018 	strb.w	r1, [sp, #24]
   123de:	f3c3 4107 	ubfx	r1, r3, #16, #8
   123e2:	f89d 0019 	ldrb.w	r0, [sp, #25]
   123e6:	4041      	eors	r1, r0
   123e8:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   123ec:	f3c3 2107 	ubfx	r1, r3, #8, #8
   123f0:	f89d 001a 	ldrb.w	r0, [sp, #26]
   123f4:	4041      	eors	r1, r0
   123f6:	f88d 101a 	strb.w	r1, [sp, #26]
   123fa:	b2db      	uxtb	r3, r3
   123fc:	f89d 101b 	ldrb.w	r1, [sp, #27]
   12400:	404b      	eors	r3, r1
   12402:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   12406:	68d3      	ldr	r3, [r2, #12]
   12408:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1240c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   12410:	f88d 201c 	strb.w	r2, [sp, #28]
   12414:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12418:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1241c:	404a      	eors	r2, r1
   1241e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   12422:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12426:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1242a:	404a      	eors	r2, r1
   1242c:	f88d 201e 	strb.w	r2, [sp, #30]
   12430:	b2db      	uxtb	r3, r3
   12432:	f89d 201f 	ldrb.w	r2, [sp, #31]
   12436:	4053      	eors	r3, r2
   12438:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   1243c:	2c08      	cmp	r4, #8
   1243e:	d80a      	bhi.n	12456 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   12440:	2300      	movs	r3, #0
   12442:	2b0f      	cmp	r3, #15
   12444:	f63f adc0 	bhi.w	11fc8 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   12448:	a904      	add	r1, sp, #16
   1244a:	5cc8      	ldrb	r0, [r1, r3]
   1244c:	4a6e      	ldr	r2, [pc, #440]	; (12608 <tc_aes_encrypt+0x748>)
   1244e:	5c10      	ldrb	r0, [r2, r0]
   12450:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12452:	3301      	adds	r3, #1
   12454:	e7f5      	b.n	12442 <tc_aes_encrypt+0x582>
   12456:	2300      	movs	r3, #0
   12458:	e005      	b.n	12466 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   1245a:	aa04      	add	r2, sp, #16
   1245c:	5cd1      	ldrb	r1, [r2, r3]
   1245e:	486a      	ldr	r0, [pc, #424]	; (12608 <tc_aes_encrypt+0x748>)
   12460:	5c41      	ldrb	r1, [r0, r1]
   12462:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   12464:	3301      	adds	r3, #1
   12466:	2b0f      	cmp	r3, #15
   12468:	d9f7      	bls.n	1245a <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1246a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1246e:	f88d 3000 	strb.w	r3, [sp]
   12472:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12476:	f88d 3001 	strb.w	r3, [sp, #1]
   1247a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1247e:	f88d 3002 	strb.w	r3, [sp, #2]
   12482:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12486:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1248a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1248e:	f88d 3004 	strb.w	r3, [sp, #4]
   12492:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12496:	f88d 3005 	strb.w	r3, [sp, #5]
   1249a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1249e:	f88d 3006 	strb.w	r3, [sp, #6]
   124a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   124a6:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   124aa:	f89d 3018 	ldrb.w	r3, [sp, #24]
   124ae:	f88d 3008 	strb.w	r3, [sp, #8]
   124b2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   124b6:	f88d 3009 	strb.w	r3, [sp, #9]
   124ba:	f89d 3012 	ldrb.w	r3, [sp, #18]
   124be:	f88d 300a 	strb.w	r3, [sp, #10]
   124c2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   124c6:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   124ca:	f89d 301c 	ldrb.w	r3, [sp, #28]
   124ce:	f88d 300c 	strb.w	r3, [sp, #12]
   124d2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   124d6:	f88d 300d 	strb.w	r3, [sp, #13]
   124da:	f89d 3016 	ldrb.w	r3, [sp, #22]
   124de:	f88d 300e 	strb.w	r3, [sp, #14]
   124e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   124e6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   124ea:	2310      	movs	r3, #16
   124ec:	466a      	mov	r2, sp
   124ee:	4619      	mov	r1, r3
   124f0:	eb0d 0003 	add.w	r0, sp, r3
   124f4:	f00e fe06 	bl	21104 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   124f8:	1c63      	adds	r3, r4, #1
   124fa:	011a      	lsls	r2, r3, #4
   124fc:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   12500:	58b2      	ldr	r2, [r6, r2]
   12502:	f89d 1010 	ldrb.w	r1, [sp, #16]
   12506:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   1250a:	f88d 1010 	strb.w	r1, [sp, #16]
   1250e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12512:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12516:	4041      	eors	r1, r0
   12518:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1251c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12520:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12524:	4041      	eors	r1, r0
   12526:	f88d 1012 	strb.w	r1, [sp, #18]
   1252a:	b2d2      	uxtb	r2, r2
   1252c:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12530:	404a      	eors	r2, r1
   12532:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   12536:	685a      	ldr	r2, [r3, #4]
   12538:	f89d 1014 	ldrb.w	r1, [sp, #20]
   1253c:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12540:	f88d 1014 	strb.w	r1, [sp, #20]
   12544:	f3c2 4107 	ubfx	r1, r2, #16, #8
   12548:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1254c:	4041      	eors	r1, r0
   1254e:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   12552:	f3c2 2107 	ubfx	r1, r2, #8, #8
   12556:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1255a:	4041      	eors	r1, r0
   1255c:	f88d 1016 	strb.w	r1, [sp, #22]
   12560:	b2d2      	uxtb	r2, r2
   12562:	f89d 1017 	ldrb.w	r1, [sp, #23]
   12566:	404a      	eors	r2, r1
   12568:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1256c:	689a      	ldr	r2, [r3, #8]
   1256e:	f89d 1018 	ldrb.w	r1, [sp, #24]
   12572:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   12576:	f88d 1018 	strb.w	r1, [sp, #24]
   1257a:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1257e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   12582:	4041      	eors	r1, r0
   12584:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   12588:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1258c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   12590:	4041      	eors	r1, r0
   12592:	f88d 101a 	strb.w	r1, [sp, #26]
   12596:	b2d2      	uxtb	r2, r2
   12598:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1259c:	404a      	eors	r2, r1
   1259e:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   125a2:	68db      	ldr	r3, [r3, #12]
   125a4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   125a8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   125ac:	f88d 201c 	strb.w	r2, [sp, #28]
   125b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   125b4:	f89d 101d 	ldrb.w	r1, [sp, #29]
   125b8:	404a      	eors	r2, r1
   125ba:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   125be:	f3c3 2207 	ubfx	r2, r3, #8, #8
   125c2:	f89d 101e 	ldrb.w	r1, [sp, #30]
   125c6:	404a      	eors	r2, r1
   125c8:	f88d 201e 	strb.w	r2, [sp, #30]
   125cc:	b2db      	uxtb	r3, r3
   125ce:	f89d 201f 	ldrb.w	r2, [sp, #31]
   125d2:	4053      	eors	r3, r2
   125d4:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   125d8:	2310      	movs	r3, #16
   125da:	eb0d 0203 	add.w	r2, sp, r3
   125de:	4619      	mov	r1, r3
   125e0:	4638      	mov	r0, r7
   125e2:	f00e fd8f 	bl	21104 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   125e6:	2210      	movs	r2, #16
   125e8:	2100      	movs	r1, #0
   125ea:	eb0d 0002 	add.w	r0, sp, r2
   125ee:	f00e fd96 	bl	2111e <_set>

	return TC_CRYPTO_SUCCESS;
   125f2:	2001      	movs	r0, #1
}
   125f4:	b008      	add	sp, #32
   125f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   125fa:	2000      	movs	r0, #0
}
   125fc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   125fe:	2000      	movs	r0, #0
   12600:	e7f8      	b.n	125f4 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   12602:	2000      	movs	r0, #0
   12604:	e7f6      	b.n	125f4 <tc_aes_encrypt+0x734>
   12606:	bf00      	nop
   12608:	00025cf0 	.word	0x00025cf0

0001260c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   1260c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   1260e:	4802      	ldr	r0, [pc, #8]	; (12618 <nrf_cc3xx_platform_abort_init+0xc>)
   12610:	f00a fe20 	bl	1d254 <nrf_cc3xx_platform_set_abort>
}
   12614:	bd08      	pop	{r3, pc}
   12616:	bf00      	nop
   12618:	00025df0 	.word	0x00025df0

0001261c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   1261c:	b1d0      	cbz	r0, 12654 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1261e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   12620:	6842      	ldr	r2, [r0, #4]
   12622:	2a04      	cmp	r2, #4
   12624:	d005      	beq.n	12632 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12626:	b1d2      	cbz	r2, 1265e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   12628:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   1262a:	f009 f9f9 	bl	1ba20 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   1262e:	2000      	movs	r0, #0
    }
}
   12630:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   12632:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12634:	2200      	movs	r2, #0
   12636:	f3bf 8f5b 	dmb	ish
   1263a:	e853 1f00 	ldrex	r1, [r3]
   1263e:	2901      	cmp	r1, #1
   12640:	d103      	bne.n	1264a <mutex_unlock_platform+0x2e>
   12642:	e843 2000 	strex	r0, r2, [r3]
   12646:	2800      	cmp	r0, #0
   12648:	d1f7      	bne.n	1263a <mutex_unlock_platform+0x1e>
   1264a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1264e:	d104      	bne.n	1265a <mutex_unlock_platform+0x3e>
   12650:	4610      	mov	r0, r2
   12652:	e7ed      	b.n	12630 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12654:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   12658:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1265a:	4802      	ldr	r0, [pc, #8]	; (12664 <mutex_unlock_platform+0x48>)
   1265c:	e7e8      	b.n	12630 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   1265e:	4802      	ldr	r0, [pc, #8]	; (12668 <mutex_unlock_platform+0x4c>)
   12660:	e7e6      	b.n	12630 <mutex_unlock_platform+0x14>
   12662:	bf00      	nop
   12664:	ffff8fe9 	.word	0xffff8fe9
   12668:	ffff8fea 	.word	0xffff8fea

0001266c <mutex_lock_platform>:
    if(mutex == NULL) {
   1266c:	b320      	cbz	r0, 126b8 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1266e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   12670:	6842      	ldr	r2, [r0, #4]
   12672:	2a04      	cmp	r2, #4
   12674:	d002      	beq.n	1267c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12676:	b992      	cbnz	r2, 1269e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12678:	4811      	ldr	r0, [pc, #68]	; (126c0 <mutex_lock_platform+0x54>)
   1267a:	e00f      	b.n	1269c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   1267c:	6803      	ldr	r3, [r0, #0]
   1267e:	2201      	movs	r2, #1
   12680:	f3bf 8f5b 	dmb	ish
   12684:	e853 1f00 	ldrex	r1, [r3]
   12688:	2900      	cmp	r1, #0
   1268a:	d103      	bne.n	12694 <mutex_lock_platform+0x28>
   1268c:	e843 2000 	strex	r0, r2, [r3]
   12690:	2800      	cmp	r0, #0
   12692:	d1f7      	bne.n	12684 <mutex_lock_platform+0x18>
   12694:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12698:	d10c      	bne.n	126b4 <mutex_lock_platform+0x48>
   1269a:	2000      	movs	r0, #0
}
   1269c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   1269e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   126a0:	f04f 32ff 	mov.w	r2, #4294967295
   126a4:	f04f 33ff 	mov.w	r3, #4294967295
   126a8:	f009 f930 	bl	1b90c <z_impl_k_mutex_lock>
        if (ret == 0) {
   126ac:	2800      	cmp	r0, #0
   126ae:	d0f5      	beq.n	1269c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   126b0:	4804      	ldr	r0, [pc, #16]	; (126c4 <mutex_lock_platform+0x58>)
   126b2:	e7f3      	b.n	1269c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   126b4:	4803      	ldr	r0, [pc, #12]	; (126c4 <mutex_lock_platform+0x58>)
   126b6:	e7f1      	b.n	1269c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   126b8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   126bc:	4770      	bx	lr
   126be:	bf00      	nop
   126c0:	ffff8fea 	.word	0xffff8fea
   126c4:	ffff8fe9 	.word	0xffff8fe9

000126c8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   126c8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   126ca:	4604      	mov	r4, r0
   126cc:	b188      	cbz	r0, 126f2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   126ce:	6863      	ldr	r3, [r4, #4]
   126d0:	2b04      	cmp	r3, #4
   126d2:	d00d      	beq.n	126f0 <mutex_free_platform+0x28>
   126d4:	2b08      	cmp	r3, #8
   126d6:	d00b      	beq.n	126f0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   126d8:	b153      	cbz	r3, 126f0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   126da:	f013 0f02 	tst.w	r3, #2
   126de:	d00d      	beq.n	126fc <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   126e0:	4621      	mov	r1, r4
   126e2:	4809      	ldr	r0, [pc, #36]	; (12708 <mutex_free_platform+0x40>)
   126e4:	f011 ff47 	bl	24576 <k_mem_slab_free>
        mutex->mutex = NULL;
   126e8:	2300      	movs	r3, #0
   126ea:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   126ec:	2300      	movs	r3, #0
   126ee:	6063      	str	r3, [r4, #4]
}
   126f0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   126f2:	4b06      	ldr	r3, [pc, #24]	; (1270c <mutex_free_platform+0x44>)
   126f4:	685b      	ldr	r3, [r3, #4]
   126f6:	4806      	ldr	r0, [pc, #24]	; (12710 <mutex_free_platform+0x48>)
   126f8:	4798      	blx	r3
   126fa:	e7e8      	b.n	126ce <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   126fc:	2214      	movs	r2, #20
   126fe:	2100      	movs	r1, #0
   12700:	6820      	ldr	r0, [r4, #0]
   12702:	f00e ff34 	bl	2156e <memset>
   12706:	e7f1      	b.n	126ec <mutex_free_platform+0x24>
   12708:	200363ac 	.word	0x200363ac
   1270c:	20033a88 	.word	0x20033a88
   12710:	00025df8 	.word	0x00025df8

00012714 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12714:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12716:	4604      	mov	r4, r0
   12718:	b178      	cbz	r0, 1273a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1271a:	6863      	ldr	r3, [r4, #4]
   1271c:	2b04      	cmp	r3, #4
   1271e:	d00b      	beq.n	12738 <mutex_init_platform+0x24>
   12720:	2b08      	cmp	r3, #8
   12722:	d009      	beq.n	12738 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   12724:	b90b      	cbnz	r3, 1272a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   12726:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   12728:	b163      	cbz	r3, 12744 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   1272a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   1272c:	f011 ffc2 	bl	246b4 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   12730:	6863      	ldr	r3, [r4, #4]
   12732:	f043 0301 	orr.w	r3, r3, #1
   12736:	6063      	str	r3, [r4, #4]
}
   12738:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   1273a:	4b0f      	ldr	r3, [pc, #60]	; (12778 <mutex_init_platform+0x64>)
   1273c:	685b      	ldr	r3, [r3, #4]
   1273e:	480f      	ldr	r0, [pc, #60]	; (1277c <mutex_init_platform+0x68>)
   12740:	4798      	blx	r3
   12742:	e7ea      	b.n	1271a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12744:	f04f 32ff 	mov.w	r2, #4294967295
   12748:	f04f 33ff 	mov.w	r3, #4294967295
   1274c:	4621      	mov	r1, r4
   1274e:	480c      	ldr	r0, [pc, #48]	; (12780 <mutex_init_platform+0x6c>)
   12750:	f008 ffa2 	bl	1b698 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12754:	b908      	cbnz	r0, 1275a <mutex_init_platform+0x46>
   12756:	6823      	ldr	r3, [r4, #0]
   12758:	b91b      	cbnz	r3, 12762 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   1275a:	4b07      	ldr	r3, [pc, #28]	; (12778 <mutex_init_platform+0x64>)
   1275c:	685b      	ldr	r3, [r3, #4]
   1275e:	4809      	ldr	r0, [pc, #36]	; (12784 <mutex_init_platform+0x70>)
   12760:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   12762:	2214      	movs	r2, #20
   12764:	2100      	movs	r1, #0
   12766:	6820      	ldr	r0, [r4, #0]
   12768:	f00e ff01 	bl	2156e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1276c:	6863      	ldr	r3, [r4, #4]
   1276e:	f043 0302 	orr.w	r3, r3, #2
   12772:	6063      	str	r3, [r4, #4]
   12774:	e7d9      	b.n	1272a <mutex_init_platform+0x16>
   12776:	bf00      	nop
   12778:	20033a88 	.word	0x20033a88
   1277c:	00025df8 	.word	0x00025df8
   12780:	200363ac 	.word	0x200363ac
   12784:	00025e20 	.word	0x00025e20

00012788 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12788:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1278a:	2340      	movs	r3, #64	; 0x40
   1278c:	2214      	movs	r2, #20
   1278e:	4904      	ldr	r1, [pc, #16]	; (127a0 <nrf_cc3xx_platform_mutex_init+0x18>)
   12790:	4804      	ldr	r0, [pc, #16]	; (127a4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12792:	f011 fee2 	bl	2455a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12796:	4904      	ldr	r1, [pc, #16]	; (127a8 <nrf_cc3xx_platform_mutex_init+0x20>)
   12798:	4804      	ldr	r0, [pc, #16]	; (127ac <nrf_cc3xx_platform_mutex_init+0x24>)
   1279a:	f00a fe13 	bl	1d3c4 <nrf_cc3xx_platform_set_mutexes>
}
   1279e:	bd08      	pop	{r3, pc}
   127a0:	200363c8 	.word	0x200363c8
   127a4:	200363ac 	.word	0x200363ac
   127a8:	00025e60 	.word	0x00025e60
   127ac:	00025e50 	.word	0x00025e50

000127b0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   127b0:	4a0a      	ldr	r2, [pc, #40]	; (127dc <arch_swap+0x2c>)
   127b2:	6893      	ldr	r3, [r2, #8]
   127b4:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   127b8:	4909      	ldr	r1, [pc, #36]	; (127e0 <arch_swap+0x30>)
   127ba:	6809      	ldr	r1, [r1, #0]
   127bc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   127c0:	4908      	ldr	r1, [pc, #32]	; (127e4 <arch_swap+0x34>)
   127c2:	684b      	ldr	r3, [r1, #4]
   127c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   127c8:	604b      	str	r3, [r1, #4]
   127ca:	2300      	movs	r3, #0
   127cc:	f383 8811 	msr	BASEPRI, r3
   127d0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   127d4:	6893      	ldr	r3, [r2, #8]
}
   127d6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   127da:	4770      	bx	lr
   127dc:	200377cc 	.word	0x200377cc
   127e0:	00027808 	.word	0x00027808
   127e4:	e000ed00 	.word	0xe000ed00

000127e8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   127e8:	4913      	ldr	r1, [pc, #76]	; (12838 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   127ea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   127ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   127f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   127f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   127f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   127fa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   127fc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12800:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12804:	4f0d      	ldr	r7, [pc, #52]	; (1283c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12806:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1280a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   1280c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1280e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12810:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   12814:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12816:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1281a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1281e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12820:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12822:	f000 fdc9 	bl	133b8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12826:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1282a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1282e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12832:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12836:	4770      	bx	lr
    ldr r1, =_kernel
   12838:	200377cc 	.word	0x200377cc
    ldr v4, =_SCS_ICSR
   1283c:	e000ed04 	.word	0xe000ed04

00012840 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   12840:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12844:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12846:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1284a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1284e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12850:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12854:	2902      	cmp	r1, #2
    beq _oops
   12856:	d0ff      	beq.n	12858 <_oops>

00012858 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12858:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1285a:	f00e fd8d 	bl	21378 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1285e:	bd01      	pop	{r0, pc}

00012860 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12860:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12862:	2b00      	cmp	r3, #0
   12864:	db08      	blt.n	12878 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12866:	f000 001f 	and.w	r0, r0, #31
   1286a:	095b      	lsrs	r3, r3, #5
   1286c:	2201      	movs	r2, #1
   1286e:	fa02 f000 	lsl.w	r0, r2, r0
   12872:	4a02      	ldr	r2, [pc, #8]	; (1287c <arch_irq_enable+0x1c>)
   12874:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12878:	4770      	bx	lr
   1287a:	bf00      	nop
   1287c:	e000e100 	.word	0xe000e100

00012880 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12880:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12882:	2b00      	cmp	r3, #0
   12884:	db0d      	blt.n	128a2 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12886:	f000 001f 	and.w	r0, r0, #31
   1288a:	095b      	lsrs	r3, r3, #5
   1288c:	2201      	movs	r2, #1
   1288e:	fa02 f000 	lsl.w	r0, r2, r0
   12892:	3320      	adds	r3, #32
   12894:	4a03      	ldr	r2, [pc, #12]	; (128a4 <arch_irq_disable+0x24>)
   12896:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1289a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1289e:	f3bf 8f6f 	isb	sy
}
   128a2:	4770      	bx	lr
   128a4:	e000e100 	.word	0xe000e100

000128a8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   128a8:	0942      	lsrs	r2, r0, #5
   128aa:	4b05      	ldr	r3, [pc, #20]	; (128c0 <arch_irq_is_enabled+0x18>)
   128ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   128b0:	f000 001f 	and.w	r0, r0, #31
   128b4:	2301      	movs	r3, #1
   128b6:	fa03 f000 	lsl.w	r0, r3, r0
}
   128ba:	4010      	ands	r0, r2
   128bc:	4770      	bx	lr
   128be:	bf00      	nop
   128c0:	e000e100 	.word	0xe000e100

000128c4 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   128c4:	f012 0f01 	tst.w	r2, #1
   128c8:	d10c      	bne.n	128e4 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   128ca:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   128cc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   128ce:	2b00      	cmp	r3, #0
   128d0:	db0a      	blt.n	128e8 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   128d2:	0149      	lsls	r1, r1, #5
   128d4:	b2c9      	uxtb	r1, r1
   128d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   128da:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   128de:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   128e2:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   128e4:	2100      	movs	r1, #0
   128e6:	e7f1      	b.n	128cc <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   128e8:	f000 000f 	and.w	r0, r0, #15
   128ec:	0149      	lsls	r1, r1, #5
   128ee:	b2c9      	uxtb	r1, r1
   128f0:	4b01      	ldr	r3, [pc, #4]	; (128f8 <z_arm_irq_priority_set+0x34>)
   128f2:	5419      	strb	r1, [r3, r0]
}
   128f4:	4770      	bx	lr
   128f6:	bf00      	nop
   128f8:	e000ed14 	.word	0xe000ed14

000128fc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   128fc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   128fe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12900:	4b04      	ldr	r3, [pc, #16]	; (12914 <_arch_isr_direct_pm+0x18>)
   12902:	6a18      	ldr	r0, [r3, #32]
   12904:	b908      	cbnz	r0, 1290a <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12906:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12908:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   1290a:	2200      	movs	r2, #0
   1290c:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   1290e:	f011 fea9 	bl	24664 <z_pm_save_idle_exit>
   12912:	e7f8      	b.n	12906 <_arch_isr_direct_pm+0xa>
   12914:	200377cc 	.word	0x200377cc

00012918 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   12918:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1291a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1291e:	490d      	ldr	r1, [pc, #52]	; (12954 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   12920:	f021 0101 	bic.w	r1, r1, #1
   12924:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   12928:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1292c:	9b01      	ldr	r3, [sp, #4]
   1292e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   12932:	9b02      	ldr	r3, [sp, #8]
   12934:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12938:	9b03      	ldr	r3, [sp, #12]
   1293a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1293e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12942:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   12946:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12948:	2300      	movs	r3, #0
   1294a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1294e:	bc10      	pop	{r4}
   12950:	4770      	bx	lr
   12952:	bf00      	nop
   12954:	0001ff0b 	.word	0x0001ff0b

00012958 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12958:	4b16      	ldr	r3, [pc, #88]	; (129b4 <z_check_thread_stack_fail+0x5c>)
   1295a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   1295c:	b1da      	cbz	r2, 12996 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1295e:	f110 0f16 	cmn.w	r0, #22
   12962:	d01a      	beq.n	1299a <z_check_thread_stack_fail+0x42>
{
   12964:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12966:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1296a:	f1a3 0420 	sub.w	r4, r3, #32
   1296e:	4284      	cmp	r4, r0
   12970:	d805      	bhi.n	1297e <z_check_thread_stack_fail+0x26>
   12972:	4283      	cmp	r3, r0
   12974:	d908      	bls.n	12988 <z_check_thread_stack_fail+0x30>
   12976:	428b      	cmp	r3, r1
   12978:	d808      	bhi.n	1298c <z_check_thread_stack_fail+0x34>
   1297a:	2100      	movs	r1, #0
   1297c:	e000      	b.n	12980 <z_check_thread_stack_fail+0x28>
   1297e:	2100      	movs	r1, #0
   12980:	b931      	cbnz	r1, 12990 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   12982:	2000      	movs	r0, #0
}
   12984:	bc10      	pop	{r4}
   12986:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12988:	2100      	movs	r1, #0
   1298a:	e7f9      	b.n	12980 <z_check_thread_stack_fail+0x28>
   1298c:	2101      	movs	r1, #1
   1298e:	e7f7      	b.n	12980 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   12990:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   12994:	e7f6      	b.n	12984 <z_check_thread_stack_fail+0x2c>
		return 0;
   12996:	2000      	movs	r0, #0
   12998:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1299a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1299e:	428b      	cmp	r3, r1
   129a0:	bf94      	ite	ls
   129a2:	2100      	movls	r1, #0
   129a4:	2101      	movhi	r1, #1
   129a6:	b909      	cbnz	r1, 129ac <z_check_thread_stack_fail+0x54>
	return 0;
   129a8:	2000      	movs	r0, #0
}
   129aa:	4770      	bx	lr
		return thread->stack_info.start;
   129ac:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   129b0:	4770      	bx	lr
   129b2:	bf00      	nop
   129b4:	200377cc 	.word	0x200377cc

000129b8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   129b8:	b508      	push	{r3, lr}
   129ba:	460d      	mov	r5, r1
   129bc:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   129be:	4b08      	ldr	r3, [pc, #32]	; (129e0 <arch_switch_to_main_thread+0x28>)
   129c0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   129c2:	f000 fcf9 	bl	133b8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   129c6:	4620      	mov	r0, r4
   129c8:	f385 8809 	msr	PSP, r5
   129cc:	2100      	movs	r1, #0
   129ce:	b663      	cpsie	if
   129d0:	f381 8811 	msr	BASEPRI, r1
   129d4:	f3bf 8f6f 	isb	sy
   129d8:	2200      	movs	r2, #0
   129da:	2300      	movs	r3, #0
   129dc:	f00d fa95 	bl	1ff0a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   129e0:	200377cc 	.word	0x200377cc

000129e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   129e4:	4901      	ldr	r1, [pc, #4]	; (129ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   129e6:	2210      	movs	r2, #16
	str	r2, [r1]
   129e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   129ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   129ec:	e000ed10 	.word	0xe000ed10

000129f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   129f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   129f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   129f4:	f380 8811 	msr	BASEPRI, r0
	isb
   129f8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   129fc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12a00:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12a02:	b662      	cpsie	i
	isb
   12a04:	f3bf 8f6f 	isb	sy

	bx	lr
   12a08:	4770      	bx	lr
   12a0a:	bf00      	nop

00012a0c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12a0c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12a0e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12a10:	f381 8811 	msr	BASEPRI, r1

	wfe
   12a14:	bf20      	wfe

	msr	BASEPRI, r0
   12a16:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12a1a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12a1c:	4770      	bx	lr
   12a1e:	bf00      	nop

00012a20 <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   12a20:	b570      	push	{r4, r5, r6, lr}
   12a22:	b082      	sub	sp, #8
   12a24:	4604      	mov	r4, r0
   12a26:	4d1f      	ldr	r5, [pc, #124]	; (12aa4 <esf_dump+0x84>)
   12a28:	4b1f      	ldr	r3, [pc, #124]	; (12aa8 <esf_dump+0x88>)
   12a2a:	1aed      	subs	r5, r5, r3
   12a2c:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12a2e:	2601      	movs	r6, #1
   12a30:	f04f 0300 	mov.w	r3, #0
   12a34:	f366 0302 	bfi	r3, r6, #0, #3
   12a38:	f36f 03c5 	bfc	r3, #3, #3
   12a3c:	f365 138f 	bfi	r3, r5, #6, #10
   12a40:	f8ad 3000 	strh.w	r3, [sp]
   12a44:	6883      	ldr	r3, [r0, #8]
   12a46:	6842      	ldr	r2, [r0, #4]
   12a48:	6801      	ldr	r1, [r0, #0]
   12a4a:	4818      	ldr	r0, [pc, #96]	; (12aac <esf_dump+0x8c>)
   12a4c:	f7fe f9ca 	bl	10de4 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12a50:	f04f 0300 	mov.w	r3, #0
   12a54:	f366 0302 	bfi	r3, r6, #0, #3
   12a58:	f36f 03c5 	bfc	r3, #3, #3
   12a5c:	f365 138f 	bfi	r3, r5, #6, #10
   12a60:	f8ad 3000 	strh.w	r3, [sp]
   12a64:	6963      	ldr	r3, [r4, #20]
   12a66:	6922      	ldr	r2, [r4, #16]
   12a68:	68e1      	ldr	r1, [r4, #12]
   12a6a:	4811      	ldr	r0, [pc, #68]	; (12ab0 <esf_dump+0x90>)
   12a6c:	f7fe f9ba 	bl	10de4 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12a70:	f04f 0200 	mov.w	r2, #0
   12a74:	f366 0202 	bfi	r2, r6, #0, #3
   12a78:	f36f 02c5 	bfc	r2, #3, #3
   12a7c:	f365 128f 	bfi	r2, r5, #6, #10
   12a80:	69e1      	ldr	r1, [r4, #28]
   12a82:	480c      	ldr	r0, [pc, #48]	; (12ab4 <esf_dump+0x94>)
   12a84:	f7fe f9ec 	bl	10e60 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12a88:	f04f 0200 	mov.w	r2, #0
   12a8c:	f366 0202 	bfi	r2, r6, #0, #3
   12a90:	f36f 02c5 	bfc	r2, #3, #3
   12a94:	f365 128f 	bfi	r2, r5, #6, #10
   12a98:	69a1      	ldr	r1, [r4, #24]
   12a9a:	4807      	ldr	r0, [pc, #28]	; (12ab8 <esf_dump+0x98>)
   12a9c:	f7fe f9e0 	bl	10e60 <log_1>
		esf->basic.pc);
}
   12aa0:	b002      	add	sp, #8
   12aa2:	bd70      	pop	{r4, r5, r6, pc}
   12aa4:	000254dc 	.word	0x000254dc
   12aa8:	0002545c 	.word	0x0002545c
   12aac:	00025e74 	.word	0x00025e74
   12ab0:	00025ea4 	.word	0x00025ea4
   12ab4:	00025ed4 	.word	0x00025ed4
   12ab8:	00025ee4 	.word	0x00025ee4

00012abc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12abc:	bf30      	wfi
    b z_SysNmiOnReset
   12abe:	f7ff bffd 	b.w	12abc <z_SysNmiOnReset>
   12ac2:	bf00      	nop

00012ac4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   12ac4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12ac6:	4b0b      	ldr	r3, [pc, #44]	; (12af4 <z_arm_prep_c+0x30>)
   12ac8:	4a0b      	ldr	r2, [pc, #44]	; (12af8 <z_arm_prep_c+0x34>)
   12aca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12ace:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12ad0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ad4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12ad8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12adc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12ae4:	f008 fd4c 	bl	1b580 <z_bss_zero>
	z_data_copy();
   12ae8:	f009 fe48 	bl	1c77c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12aec:	f000 fc26 	bl	1333c <z_arm_interrupt_init>
	z_cstart();
   12af0:	f008 fd6c 	bl	1b5cc <z_cstart>
   12af4:	e000ed00 	.word	0xe000ed00
   12af8:	00000000 	.word	0x00000000

00012afc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12afc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12afe:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12b00:	4a0b      	ldr	r2, [pc, #44]	; (12b30 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12b02:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   12b04:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12b06:	bf1e      	ittt	ne
	movne	r1, #0
   12b08:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12b0a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   12b0c:	f011 fdaa 	blne	24664 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12b10:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12b12:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12b16:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12b1a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12b1e:	4905      	ldr	r1, [pc, #20]	; (12b34 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12b20:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12b22:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12b24:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12b26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12b2a:	4903      	ldr	r1, [pc, #12]	; (12b38 <_isr_wrapper+0x3c>)
	bx r1
   12b2c:	4708      	bx	r1
   12b2e:	0000      	.short	0x0000
	ldr r2, =_kernel
   12b30:	200377cc 	.word	0x200377cc
	ldr r1, =_sw_isr_table
   12b34:	000252a0 	.word	0x000252a0
	ldr r1, =z_arm_int_exit
   12b38:	000132ad 	.word	0x000132ad

00012b3c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12b3c:	2000      	movs	r0, #0
    msr CONTROL, r0
   12b3e:	f380 8814 	msr	CONTROL, r0
    isb
   12b42:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   12b46:	f012 fb15 	bl	25174 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12b4a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12b4c:	490d      	ldr	r1, [pc, #52]	; (12b84 <__start+0x48>)
    str r0, [r1]
   12b4e:	6008      	str	r0, [r1, #0]
    dsb
   12b50:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12b54:	480c      	ldr	r0, [pc, #48]	; (12b88 <__start+0x4c>)
    msr msp, r0
   12b56:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12b5a:	f000 fbc5 	bl	132e8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12b5e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12b60:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12b64:	4809      	ldr	r0, [pc, #36]	; (12b8c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12b66:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12b6a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12b6c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12b70:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12b74:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12b76:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12b78:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12b7c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12b80:	f7ff ffa0 	bl	12ac4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12b84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12b88:	2003a080 	.word	0x2003a080
    ldr r0, =z_interrupt_stacks
   12b8c:	2003a200 	.word	0x2003a200

00012b90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12b90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12b94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12b98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12b9a:	4672      	mov	r2, lr
	bl z_arm_fault
   12b9c:	f000 fb1c 	bl	131d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12ba0:	bd01      	pop	{r0, pc}
   12ba2:	bf00      	nop

00012ba4 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   12ba4:	b508      	push	{r3, lr}
   12ba6:	4b4e      	ldr	r3, [pc, #312]	; (12ce0 <usage_fault+0x13c>)
   12ba8:	4a4e      	ldr	r2, [pc, #312]	; (12ce4 <usage_fault+0x140>)
   12baa:	1a9b      	subs	r3, r3, r2
   12bac:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   12bae:	f04f 0100 	mov.w	r1, #0
   12bb2:	2201      	movs	r2, #1
   12bb4:	f362 0102 	bfi	r1, r2, #0, #3
   12bb8:	f36f 01c5 	bfc	r1, #3, #3
   12bbc:	f363 118f 	bfi	r1, r3, #6, #10
   12bc0:	4849      	ldr	r0, [pc, #292]	; (12ce8 <usage_fault+0x144>)
   12bc2:	f7fe fa03 	bl	10fcc <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12bc6:	4b49      	ldr	r3, [pc, #292]	; (12cec <usage_fault+0x148>)
   12bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bca:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   12bce:	d121      	bne.n	12c14 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12bd0:	4b46      	ldr	r3, [pc, #280]	; (12cec <usage_fault+0x148>)
   12bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bd4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   12bd8:	d12d      	bne.n	12c36 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12bda:	4b44      	ldr	r3, [pc, #272]	; (12cec <usage_fault+0x148>)
   12bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bde:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   12be2:	d139      	bne.n	12c58 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12be4:	4b41      	ldr	r3, [pc, #260]	; (12cec <usage_fault+0x148>)
   12be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12be8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   12bec:	d145      	bne.n	12c7a <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12bee:	4b3f      	ldr	r3, [pc, #252]	; (12cec <usage_fault+0x148>)
   12bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bf2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12bf6:	d151      	bne.n	12c9c <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12bf8:	4b3c      	ldr	r3, [pc, #240]	; (12cec <usage_fault+0x148>)
   12bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bfc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12c00:	d15d      	bne.n	12cbe <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12c02:	4a3a      	ldr	r2, [pc, #232]	; (12cec <usage_fault+0x148>)
   12c04:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12c06:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12c0a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12c0e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   12c10:	2000      	movs	r0, #0
   12c12:	bd08      	pop	{r3, pc}
   12c14:	4b32      	ldr	r3, [pc, #200]	; (12ce0 <usage_fault+0x13c>)
   12c16:	4a33      	ldr	r2, [pc, #204]	; (12ce4 <usage_fault+0x140>)
   12c18:	1a9b      	subs	r3, r3, r2
   12c1a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   12c1c:	f04f 0100 	mov.w	r1, #0
   12c20:	2201      	movs	r2, #1
   12c22:	f362 0102 	bfi	r1, r2, #0, #3
   12c26:	f36f 01c5 	bfc	r1, #3, #3
   12c2a:	f363 118f 	bfi	r1, r3, #6, #10
   12c2e:	4830      	ldr	r0, [pc, #192]	; (12cf0 <usage_fault+0x14c>)
   12c30:	f7fe f9cc 	bl	10fcc <log_0>
   12c34:	e7cc      	b.n	12bd0 <usage_fault+0x2c>
   12c36:	4b2a      	ldr	r3, [pc, #168]	; (12ce0 <usage_fault+0x13c>)
   12c38:	4a2a      	ldr	r2, [pc, #168]	; (12ce4 <usage_fault+0x140>)
   12c3a:	1a9b      	subs	r3, r3, r2
   12c3c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   12c3e:	f04f 0100 	mov.w	r1, #0
   12c42:	2201      	movs	r2, #1
   12c44:	f362 0102 	bfi	r1, r2, #0, #3
   12c48:	f36f 01c5 	bfc	r1, #3, #3
   12c4c:	f363 118f 	bfi	r1, r3, #6, #10
   12c50:	4828      	ldr	r0, [pc, #160]	; (12cf4 <usage_fault+0x150>)
   12c52:	f7fe f9bb 	bl	10fcc <log_0>
   12c56:	e7c0      	b.n	12bda <usage_fault+0x36>
   12c58:	4b21      	ldr	r3, [pc, #132]	; (12ce0 <usage_fault+0x13c>)
   12c5a:	4a22      	ldr	r2, [pc, #136]	; (12ce4 <usage_fault+0x140>)
   12c5c:	1a9b      	subs	r3, r3, r2
   12c5e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   12c60:	f04f 0100 	mov.w	r1, #0
   12c64:	2201      	movs	r2, #1
   12c66:	f362 0102 	bfi	r1, r2, #0, #3
   12c6a:	f36f 01c5 	bfc	r1, #3, #3
   12c6e:	f363 118f 	bfi	r1, r3, #6, #10
   12c72:	4821      	ldr	r0, [pc, #132]	; (12cf8 <usage_fault+0x154>)
   12c74:	f7fe f9aa 	bl	10fcc <log_0>
   12c78:	e7b4      	b.n	12be4 <usage_fault+0x40>
   12c7a:	4b19      	ldr	r3, [pc, #100]	; (12ce0 <usage_fault+0x13c>)
   12c7c:	4a19      	ldr	r2, [pc, #100]	; (12ce4 <usage_fault+0x140>)
   12c7e:	1a9b      	subs	r3, r3, r2
   12c80:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12c82:	f04f 0100 	mov.w	r1, #0
   12c86:	2201      	movs	r2, #1
   12c88:	f362 0102 	bfi	r1, r2, #0, #3
   12c8c:	f36f 01c5 	bfc	r1, #3, #3
   12c90:	f363 118f 	bfi	r1, r3, #6, #10
   12c94:	4819      	ldr	r0, [pc, #100]	; (12cfc <usage_fault+0x158>)
   12c96:	f7fe f999 	bl	10fcc <log_0>
   12c9a:	e7a8      	b.n	12bee <usage_fault+0x4a>
   12c9c:	4b10      	ldr	r3, [pc, #64]	; (12ce0 <usage_fault+0x13c>)
   12c9e:	4a11      	ldr	r2, [pc, #68]	; (12ce4 <usage_fault+0x140>)
   12ca0:	1a9b      	subs	r3, r3, r2
   12ca2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12ca4:	f04f 0100 	mov.w	r1, #0
   12ca8:	2201      	movs	r2, #1
   12caa:	f362 0102 	bfi	r1, r2, #0, #3
   12cae:	f36f 01c5 	bfc	r1, #3, #3
   12cb2:	f363 118f 	bfi	r1, r3, #6, #10
   12cb6:	4812      	ldr	r0, [pc, #72]	; (12d00 <usage_fault+0x15c>)
   12cb8:	f7fe f988 	bl	10fcc <log_0>
   12cbc:	e79c      	b.n	12bf8 <usage_fault+0x54>
   12cbe:	4b08      	ldr	r3, [pc, #32]	; (12ce0 <usage_fault+0x13c>)
   12cc0:	4a08      	ldr	r2, [pc, #32]	; (12ce4 <usage_fault+0x140>)
   12cc2:	1a9b      	subs	r3, r3, r2
   12cc4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12cc6:	f04f 0100 	mov.w	r1, #0
   12cca:	2201      	movs	r2, #1
   12ccc:	f362 0102 	bfi	r1, r2, #0, #3
   12cd0:	f36f 01c5 	bfc	r1, #3, #3
   12cd4:	f363 118f 	bfi	r1, r3, #6, #10
   12cd8:	480a      	ldr	r0, [pc, #40]	; (12d04 <usage_fault+0x160>)
   12cda:	f7fe f977 	bl	10fcc <log_0>
   12cde:	e790      	b.n	12c02 <usage_fault+0x5e>
   12ce0:	000254dc 	.word	0x000254dc
   12ce4:	0002545c 	.word	0x0002545c
   12ce8:	00025f14 	.word	0x00025f14
   12cec:	e000ed00 	.word	0xe000ed00
   12cf0:	00025f2c 	.word	0x00025f2c
   12cf4:	00025f40 	.word	0x00025f40
   12cf8:	00025f5c 	.word	0x00025f5c
   12cfc:	00025f7c 	.word	0x00025f7c
   12d00:	00025fa4 	.word	0x00025fa4
   12d04:	00025fc0 	.word	0x00025fc0

00012d08 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   12d08:	b508      	push	{r3, lr}
	*recoverable = false;
   12d0a:	2200      	movs	r2, #0
   12d0c:	700a      	strb	r2, [r1, #0]
   12d0e:	4b08      	ldr	r3, [pc, #32]	; (12d30 <debug_monitor+0x28>)
   12d10:	4908      	ldr	r1, [pc, #32]	; (12d34 <debug_monitor+0x2c>)
   12d12:	1a5b      	subs	r3, r3, r1
   12d14:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   12d16:	f04f 0100 	mov.w	r1, #0
   12d1a:	2001      	movs	r0, #1
   12d1c:	f360 0102 	bfi	r1, r0, #0, #3
   12d20:	f362 01c5 	bfi	r1, r2, #3, #3
   12d24:	f363 118f 	bfi	r1, r3, #6, #10
   12d28:	4803      	ldr	r0, [pc, #12]	; (12d38 <debug_monitor+0x30>)
   12d2a:	f7fe f94f 	bl	10fcc <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   12d2e:	bd08      	pop	{r3, pc}
   12d30:	000254dc 	.word	0x000254dc
   12d34:	0002545c 	.word	0x0002545c
   12d38:	00025fec 	.word	0x00025fec

00012d3c <bus_fault>:
{
   12d3c:	b570      	push	{r4, r5, r6, lr}
   12d3e:	4605      	mov	r5, r0
   12d40:	460e      	mov	r6, r1
   12d42:	4614      	mov	r4, r2
   12d44:	4b5e      	ldr	r3, [pc, #376]	; (12ec0 <bus_fault+0x184>)
   12d46:	4a5f      	ldr	r2, [pc, #380]	; (12ec4 <bus_fault+0x188>)
   12d48:	1a9b      	subs	r3, r3, r2
   12d4a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   12d4c:	f04f 0100 	mov.w	r1, #0
   12d50:	2201      	movs	r2, #1
   12d52:	f362 0102 	bfi	r1, r2, #0, #3
   12d56:	f36f 01c5 	bfc	r1, #3, #3
   12d5a:	f363 118f 	bfi	r1, r3, #6, #10
   12d5e:	485a      	ldr	r0, [pc, #360]	; (12ec8 <bus_fault+0x18c>)
   12d60:	f7fe f934 	bl	10fcc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12d64:	4b59      	ldr	r3, [pc, #356]	; (12ecc <bus_fault+0x190>)
   12d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d68:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   12d6c:	d124      	bne.n	12db8 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12d6e:	4b57      	ldr	r3, [pc, #348]	; (12ecc <bus_fault+0x190>)
   12d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d72:	f413 6f00 	tst.w	r3, #2048	; 0x800
   12d76:	d130      	bne.n	12dda <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12d78:	4b54      	ldr	r3, [pc, #336]	; (12ecc <bus_fault+0x190>)
   12d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d7c:	f413 7f00 	tst.w	r3, #512	; 0x200
   12d80:	d13c      	bne.n	12dfc <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12d82:	4b52      	ldr	r3, [pc, #328]	; (12ecc <bus_fault+0x190>)
   12d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d86:	f413 6f80 	tst.w	r3, #1024	; 0x400
   12d8a:	d165      	bne.n	12e58 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12d8c:	4b4f      	ldr	r3, [pc, #316]	; (12ecc <bus_fault+0x190>)
   12d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d90:	f413 7f80 	tst.w	r3, #256	; 0x100
   12d94:	d171      	bne.n	12e7a <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12d96:	4b4d      	ldr	r3, [pc, #308]	; (12ecc <bus_fault+0x190>)
   12d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12d9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   12d9e:	d17d      	bne.n	12e9c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12da0:	4a4a      	ldr	r2, [pc, #296]	; (12ecc <bus_fault+0x190>)
   12da2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12da4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12da8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12daa:	2101      	movs	r1, #1
   12dac:	4628      	mov	r0, r5
   12dae:	f00e faef 	bl	21390 <memory_fault_recoverable>
   12db2:	7020      	strb	r0, [r4, #0]
}
   12db4:	2000      	movs	r0, #0
   12db6:	bd70      	pop	{r4, r5, r6, pc}
   12db8:	4b41      	ldr	r3, [pc, #260]	; (12ec0 <bus_fault+0x184>)
   12dba:	4a42      	ldr	r2, [pc, #264]	; (12ec4 <bus_fault+0x188>)
   12dbc:	1a9b      	subs	r3, r3, r2
   12dbe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   12dc0:	f04f 0100 	mov.w	r1, #0
   12dc4:	2201      	movs	r2, #1
   12dc6:	f362 0102 	bfi	r1, r2, #0, #3
   12dca:	f36f 01c5 	bfc	r1, #3, #3
   12dce:	f363 118f 	bfi	r1, r3, #6, #10
   12dd2:	483f      	ldr	r0, [pc, #252]	; (12ed0 <bus_fault+0x194>)
   12dd4:	f7fe f8fa 	bl	10fcc <log_0>
   12dd8:	e7c9      	b.n	12d6e <bus_fault+0x32>
   12dda:	4b39      	ldr	r3, [pc, #228]	; (12ec0 <bus_fault+0x184>)
   12ddc:	4a39      	ldr	r2, [pc, #228]	; (12ec4 <bus_fault+0x188>)
   12dde:	1a9b      	subs	r3, r3, r2
   12de0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   12de2:	f04f 0100 	mov.w	r1, #0
   12de6:	2201      	movs	r2, #1
   12de8:	f362 0102 	bfi	r1, r2, #0, #3
   12dec:	f36f 01c5 	bfc	r1, #3, #3
   12df0:	f363 118f 	bfi	r1, r3, #6, #10
   12df4:	4837      	ldr	r0, [pc, #220]	; (12ed4 <bus_fault+0x198>)
   12df6:	f7fe f8e9 	bl	10fcc <log_0>
   12dfa:	e7bd      	b.n	12d78 <bus_fault+0x3c>
   12dfc:	4b30      	ldr	r3, [pc, #192]	; (12ec0 <bus_fault+0x184>)
   12dfe:	4a31      	ldr	r2, [pc, #196]	; (12ec4 <bus_fault+0x188>)
   12e00:	1a9b      	subs	r3, r3, r2
   12e02:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   12e04:	f04f 0100 	mov.w	r1, #0
   12e08:	2201      	movs	r2, #1
   12e0a:	f362 0102 	bfi	r1, r2, #0, #3
   12e0e:	f36f 01c5 	bfc	r1, #3, #3
   12e12:	f363 118f 	bfi	r1, r3, #6, #10
   12e16:	4830      	ldr	r0, [pc, #192]	; (12ed8 <bus_fault+0x19c>)
   12e18:	f7fe f8d8 	bl	10fcc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   12e1c:	4b2b      	ldr	r3, [pc, #172]	; (12ecc <bus_fault+0x190>)
   12e1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12e22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   12e26:	d0ac      	beq.n	12d82 <bus_fault+0x46>
   12e28:	4b25      	ldr	r3, [pc, #148]	; (12ec0 <bus_fault+0x184>)
   12e2a:	4a26      	ldr	r2, [pc, #152]	; (12ec4 <bus_fault+0x188>)
   12e2c:	1a9b      	subs	r3, r3, r2
   12e2e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12e30:	f04f 0200 	mov.w	r2, #0
   12e34:	2001      	movs	r0, #1
   12e36:	f360 0202 	bfi	r2, r0, #0, #3
   12e3a:	f36f 02c5 	bfc	r2, #3, #3
   12e3e:	f363 128f 	bfi	r2, r3, #6, #10
   12e42:	4826      	ldr	r0, [pc, #152]	; (12edc <bus_fault+0x1a0>)
   12e44:	f7fe f80c 	bl	10e60 <log_1>
			if (from_hard_fault != 0) {
   12e48:	2e00      	cmp	r6, #0
   12e4a:	d09a      	beq.n	12d82 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12e4c:	4a1f      	ldr	r2, [pc, #124]	; (12ecc <bus_fault+0x190>)
   12e4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12e50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12e54:	6293      	str	r3, [r2, #40]	; 0x28
   12e56:	e794      	b.n	12d82 <bus_fault+0x46>
   12e58:	4b19      	ldr	r3, [pc, #100]	; (12ec0 <bus_fault+0x184>)
   12e5a:	4a1a      	ldr	r2, [pc, #104]	; (12ec4 <bus_fault+0x188>)
   12e5c:	1a9b      	subs	r3, r3, r2
   12e5e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   12e60:	f04f 0100 	mov.w	r1, #0
   12e64:	2201      	movs	r2, #1
   12e66:	f362 0102 	bfi	r1, r2, #0, #3
   12e6a:	f36f 01c5 	bfc	r1, #3, #3
   12e6e:	f363 118f 	bfi	r1, r3, #6, #10
   12e72:	481b      	ldr	r0, [pc, #108]	; (12ee0 <bus_fault+0x1a4>)
   12e74:	f7fe f8aa 	bl	10fcc <log_0>
   12e78:	e788      	b.n	12d8c <bus_fault+0x50>
   12e7a:	4b11      	ldr	r3, [pc, #68]	; (12ec0 <bus_fault+0x184>)
   12e7c:	4a11      	ldr	r2, [pc, #68]	; (12ec4 <bus_fault+0x188>)
   12e7e:	1a9b      	subs	r3, r3, r2
   12e80:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   12e82:	f04f 0100 	mov.w	r1, #0
   12e86:	2201      	movs	r2, #1
   12e88:	f362 0102 	bfi	r1, r2, #0, #3
   12e8c:	f36f 01c5 	bfc	r1, #3, #3
   12e90:	f363 118f 	bfi	r1, r3, #6, #10
   12e94:	4813      	ldr	r0, [pc, #76]	; (12ee4 <bus_fault+0x1a8>)
   12e96:	f7fe f899 	bl	10fcc <log_0>
   12e9a:	e781      	b.n	12da0 <bus_fault+0x64>
   12e9c:	4b08      	ldr	r3, [pc, #32]	; (12ec0 <bus_fault+0x184>)
   12e9e:	4a09      	ldr	r2, [pc, #36]	; (12ec4 <bus_fault+0x188>)
   12ea0:	1a9b      	subs	r3, r3, r2
   12ea2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12ea4:	f04f 0100 	mov.w	r1, #0
   12ea8:	2201      	movs	r2, #1
   12eaa:	f362 0102 	bfi	r1, r2, #0, #3
   12eae:	f36f 01c5 	bfc	r1, #3, #3
   12eb2:	f363 118f 	bfi	r1, r3, #6, #10
   12eb6:	480c      	ldr	r0, [pc, #48]	; (12ee8 <bus_fault+0x1ac>)
   12eb8:	f7fe f888 	bl	10fcc <log_0>
   12ebc:	e770      	b.n	12da0 <bus_fault+0x64>
   12ebe:	bf00      	nop
   12ec0:	000254dc 	.word	0x000254dc
   12ec4:	0002545c 	.word	0x0002545c
   12ec8:	00026010 	.word	0x00026010
   12ecc:	e000ed00 	.word	0xe000ed00
   12ed0:	00026028 	.word	0x00026028
   12ed4:	0002603c 	.word	0x0002603c
   12ed8:	00026050 	.word	0x00026050
   12edc:	0002606c 	.word	0x0002606c
   12ee0:	00026084 	.word	0x00026084
   12ee4:	000260a0 	.word	0x000260a0
   12ee8:	000260b8 	.word	0x000260b8

00012eec <mem_manage_fault>:
{
   12eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12eee:	4605      	mov	r5, r0
   12ef0:	460c      	mov	r4, r1
   12ef2:	4616      	mov	r6, r2
   12ef4:	4b64      	ldr	r3, [pc, #400]	; (13088 <mem_manage_fault+0x19c>)
   12ef6:	4a65      	ldr	r2, [pc, #404]	; (1308c <mem_manage_fault+0x1a0>)
   12ef8:	1a9b      	subs	r3, r3, r2
   12efa:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   12efc:	f04f 0100 	mov.w	r1, #0
   12f00:	2201      	movs	r2, #1
   12f02:	f362 0102 	bfi	r1, r2, #0, #3
   12f06:	f36f 01c5 	bfc	r1, #3, #3
   12f0a:	f363 118f 	bfi	r1, r3, #6, #10
   12f0e:	4860      	ldr	r0, [pc, #384]	; (13090 <mem_manage_fault+0x1a4>)
   12f10:	f7fe f85c 	bl	10fcc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12f14:	4b5f      	ldr	r3, [pc, #380]	; (13094 <mem_manage_fault+0x1a8>)
   12f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f18:	f013 0f10 	tst.w	r3, #16
   12f1c:	d132      	bne.n	12f84 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12f1e:	4b5d      	ldr	r3, [pc, #372]	; (13094 <mem_manage_fault+0x1a8>)
   12f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f22:	f013 0f08 	tst.w	r3, #8
   12f26:	d13e      	bne.n	12fa6 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12f28:	4b5a      	ldr	r3, [pc, #360]	; (13094 <mem_manage_fault+0x1a8>)
   12f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f2c:	f013 0f02 	tst.w	r3, #2
   12f30:	d14a      	bne.n	12fc8 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   12f32:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12f36:	4b57      	ldr	r3, [pc, #348]	; (13094 <mem_manage_fault+0x1a8>)
   12f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f3a:	f013 0f01 	tst.w	r3, #1
   12f3e:	d175      	bne.n	1302c <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12f40:	4b54      	ldr	r3, [pc, #336]	; (13094 <mem_manage_fault+0x1a8>)
   12f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f44:	f013 0f20 	tst.w	r3, #32
   12f48:	f040 8081 	bne.w	1304e <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12f4c:	4b51      	ldr	r3, [pc, #324]	; (13094 <mem_manage_fault+0x1a8>)
   12f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f50:	f013 0f10 	tst.w	r3, #16
   12f54:	d104      	bne.n	12f60 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12f56:	4b4f      	ldr	r3, [pc, #316]	; (13094 <mem_manage_fault+0x1a8>)
   12f58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12f5a:	f014 0402 	ands.w	r4, r4, #2
   12f5e:	d005      	beq.n	12f6c <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12f60:	4b4c      	ldr	r3, [pc, #304]	; (13094 <mem_manage_fault+0x1a8>)
   12f62:	685c      	ldr	r4, [r3, #4]
   12f64:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   12f68:	f040 8082 	bne.w	13070 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12f6c:	4a49      	ldr	r2, [pc, #292]	; (13094 <mem_manage_fault+0x1a8>)
   12f6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12f70:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12f74:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12f76:	2101      	movs	r1, #1
   12f78:	4628      	mov	r0, r5
   12f7a:	f00e fa09 	bl	21390 <memory_fault_recoverable>
   12f7e:	7030      	strb	r0, [r6, #0]
}
   12f80:	4620      	mov	r0, r4
   12f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f84:	4b40      	ldr	r3, [pc, #256]	; (13088 <mem_manage_fault+0x19c>)
   12f86:	4a41      	ldr	r2, [pc, #260]	; (1308c <mem_manage_fault+0x1a0>)
   12f88:	1a9b      	subs	r3, r3, r2
   12f8a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   12f8c:	f04f 0100 	mov.w	r1, #0
   12f90:	2201      	movs	r2, #1
   12f92:	f362 0102 	bfi	r1, r2, #0, #3
   12f96:	f36f 01c5 	bfc	r1, #3, #3
   12f9a:	f363 118f 	bfi	r1, r3, #6, #10
   12f9e:	483e      	ldr	r0, [pc, #248]	; (13098 <mem_manage_fault+0x1ac>)
   12fa0:	f7fe f814 	bl	10fcc <log_0>
   12fa4:	e7bb      	b.n	12f1e <mem_manage_fault+0x32>
   12fa6:	4b38      	ldr	r3, [pc, #224]	; (13088 <mem_manage_fault+0x19c>)
   12fa8:	4a38      	ldr	r2, [pc, #224]	; (1308c <mem_manage_fault+0x1a0>)
   12faa:	1a9b      	subs	r3, r3, r2
   12fac:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   12fae:	f04f 0100 	mov.w	r1, #0
   12fb2:	2201      	movs	r2, #1
   12fb4:	f362 0102 	bfi	r1, r2, #0, #3
   12fb8:	f36f 01c5 	bfc	r1, #3, #3
   12fbc:	f363 118f 	bfi	r1, r3, #6, #10
   12fc0:	4836      	ldr	r0, [pc, #216]	; (1309c <mem_manage_fault+0x1b0>)
   12fc2:	f7fe f803 	bl	10fcc <log_0>
   12fc6:	e7af      	b.n	12f28 <mem_manage_fault+0x3c>
   12fc8:	4b2f      	ldr	r3, [pc, #188]	; (13088 <mem_manage_fault+0x19c>)
   12fca:	4a30      	ldr	r2, [pc, #192]	; (1308c <mem_manage_fault+0x1a0>)
   12fcc:	1a9b      	subs	r3, r3, r2
   12fce:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   12fd0:	f04f 0100 	mov.w	r1, #0
   12fd4:	2201      	movs	r2, #1
   12fd6:	f362 0102 	bfi	r1, r2, #0, #3
   12fda:	f36f 01c5 	bfc	r1, #3, #3
   12fde:	f363 118f 	bfi	r1, r3, #6, #10
   12fe2:	482f      	ldr	r0, [pc, #188]	; (130a0 <mem_manage_fault+0x1b4>)
   12fe4:	f7fd fff2 	bl	10fcc <log_0>
		uint32_t temp = SCB->MMFAR;
   12fe8:	4b2a      	ldr	r3, [pc, #168]	; (13094 <mem_manage_fault+0x1a8>)
   12fea:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12fee:	f013 0f80 	tst.w	r3, #128	; 0x80
   12ff2:	d102      	bne.n	12ffa <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   12ff4:	f06f 0715 	mvn.w	r7, #21
   12ff8:	e79d      	b.n	12f36 <mem_manage_fault+0x4a>
   12ffa:	4b23      	ldr	r3, [pc, #140]	; (13088 <mem_manage_fault+0x19c>)
   12ffc:	4a23      	ldr	r2, [pc, #140]	; (1308c <mem_manage_fault+0x1a0>)
   12ffe:	1a9b      	subs	r3, r3, r2
   13000:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13002:	f04f 0200 	mov.w	r2, #0
   13006:	2101      	movs	r1, #1
   13008:	f361 0202 	bfi	r2, r1, #0, #3
   1300c:	f36f 02c5 	bfc	r2, #3, #3
   13010:	f363 128f 	bfi	r2, r3, #6, #10
   13014:	4639      	mov	r1, r7
   13016:	4823      	ldr	r0, [pc, #140]	; (130a4 <mem_manage_fault+0x1b8>)
   13018:	f7fd ff22 	bl	10e60 <log_1>
			if (from_hard_fault != 0) {
   1301c:	2c00      	cmp	r4, #0
   1301e:	d08a      	beq.n	12f36 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13020:	4a1c      	ldr	r2, [pc, #112]	; (13094 <mem_manage_fault+0x1a8>)
   13022:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13028:	6293      	str	r3, [r2, #40]	; 0x28
   1302a:	e784      	b.n	12f36 <mem_manage_fault+0x4a>
   1302c:	4b16      	ldr	r3, [pc, #88]	; (13088 <mem_manage_fault+0x19c>)
   1302e:	4a17      	ldr	r2, [pc, #92]	; (1308c <mem_manage_fault+0x1a0>)
   13030:	1a9b      	subs	r3, r3, r2
   13032:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   13034:	f04f 0100 	mov.w	r1, #0
   13038:	2201      	movs	r2, #1
   1303a:	f362 0102 	bfi	r1, r2, #0, #3
   1303e:	f36f 01c5 	bfc	r1, #3, #3
   13042:	f363 118f 	bfi	r1, r3, #6, #10
   13046:	4818      	ldr	r0, [pc, #96]	; (130a8 <mem_manage_fault+0x1bc>)
   13048:	f7fd ffc0 	bl	10fcc <log_0>
   1304c:	e778      	b.n	12f40 <mem_manage_fault+0x54>
   1304e:	4b0e      	ldr	r3, [pc, #56]	; (13088 <mem_manage_fault+0x19c>)
   13050:	4a0e      	ldr	r2, [pc, #56]	; (1308c <mem_manage_fault+0x1a0>)
   13052:	1a9b      	subs	r3, r3, r2
   13054:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   13056:	f04f 0100 	mov.w	r1, #0
   1305a:	2201      	movs	r2, #1
   1305c:	f362 0102 	bfi	r1, r2, #0, #3
   13060:	f36f 01c5 	bfc	r1, #3, #3
   13064:	f363 118f 	bfi	r1, r3, #6, #10
   13068:	4810      	ldr	r0, [pc, #64]	; (130ac <mem_manage_fault+0x1c0>)
   1306a:	f7fd ffaf 	bl	10fcc <log_0>
   1306e:	e76d      	b.n	12f4c <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13070:	4629      	mov	r1, r5
   13072:	4638      	mov	r0, r7
   13074:	f7ff fc70 	bl	12958 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   13078:	4604      	mov	r4, r0
   1307a:	2800      	cmp	r0, #0
   1307c:	f43f af76 	beq.w	12f6c <mem_manage_fault+0x80>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   13080:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13084:	2402      	movs	r4, #2
   13086:	e771      	b.n	12f6c <mem_manage_fault+0x80>
   13088:	000254dc 	.word	0x000254dc
   1308c:	0002545c 	.word	0x0002545c
   13090:	000260e8 	.word	0x000260e8
   13094:	e000ed00 	.word	0xe000ed00
   13098:	00026100 	.word	0x00026100
   1309c:	0002603c 	.word	0x0002603c
   130a0:	00026134 	.word	0x00026134
   130a4:	0002614c 	.word	0x0002614c
   130a8:	00026164 	.word	0x00026164
   130ac:	000260b8 	.word	0x000260b8

000130b0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   130b0:	b570      	push	{r4, r5, r6, lr}
   130b2:	4605      	mov	r5, r0
   130b4:	460c      	mov	r4, r1
   130b6:	4b2d      	ldr	r3, [pc, #180]	; (1316c <hard_fault+0xbc>)
   130b8:	4a2d      	ldr	r2, [pc, #180]	; (13170 <hard_fault+0xc0>)
   130ba:	1a9b      	subs	r3, r3, r2
   130bc:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   130be:	f04f 0100 	mov.w	r1, #0
   130c2:	2201      	movs	r2, #1
   130c4:	f362 0102 	bfi	r1, r2, #0, #3
   130c8:	f36f 01c5 	bfc	r1, #3, #3
   130cc:	f363 118f 	bfi	r1, r3, #6, #10
   130d0:	4828      	ldr	r0, [pc, #160]	; (13174 <hard_fault+0xc4>)
   130d2:	f7fd ff7b 	bl	10fcc <log_0>
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   130d6:	2300      	movs	r3, #0
   130d8:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   130da:	4b27      	ldr	r3, [pc, #156]	; (13178 <hard_fault+0xc8>)
   130dc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   130de:	f016 0602 	ands.w	r6, r6, #2
   130e2:	d105      	bne.n	130f0 <hard_fault+0x40>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   130e4:	4b24      	ldr	r3, [pc, #144]	; (13178 <hard_fault+0xc8>)
   130e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   130e8:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   130ec:	d112      	bne.n	13114 <hard_fault+0x64>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   130ee:	bd70      	pop	{r4, r5, r6, pc}
   130f0:	4b1e      	ldr	r3, [pc, #120]	; (1316c <hard_fault+0xbc>)
   130f2:	4a1f      	ldr	r2, [pc, #124]	; (13170 <hard_fault+0xc0>)
   130f4:	1a9b      	subs	r3, r3, r2
   130f6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   130f8:	f04f 0100 	mov.w	r1, #0
   130fc:	2201      	movs	r2, #1
   130fe:	f362 0102 	bfi	r1, r2, #0, #3
   13102:	f36f 01c5 	bfc	r1, #3, #3
   13106:	f363 118f 	bfi	r1, r3, #6, #10
   1310a:	481c      	ldr	r0, [pc, #112]	; (1317c <hard_fault+0xcc>)
   1310c:	f7fd ff5e 	bl	10fcc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13110:	2000      	movs	r0, #0
   13112:	e7ec      	b.n	130ee <hard_fault+0x3e>
   13114:	4b15      	ldr	r3, [pc, #84]	; (1316c <hard_fault+0xbc>)
   13116:	4a16      	ldr	r2, [pc, #88]	; (13170 <hard_fault+0xc0>)
   13118:	1a9b      	subs	r3, r3, r2
   1311a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   1311c:	f04f 0100 	mov.w	r1, #0
   13120:	2201      	movs	r2, #1
   13122:	f362 0102 	bfi	r1, r2, #0, #3
   13126:	f36f 01c5 	bfc	r1, #3, #3
   1312a:	f363 118f 	bfi	r1, r3, #6, #10
   1312e:	4814      	ldr	r0, [pc, #80]	; (13180 <hard_fault+0xd0>)
   13130:	f7fd ff4c 	bl	10fcc <log_0>
		if (SCB_MMFSR != 0) {
   13134:	4b13      	ldr	r3, [pc, #76]	; (13184 <hard_fault+0xd4>)
   13136:	781b      	ldrb	r3, [r3, #0]
   13138:	b943      	cbnz	r3, 1314c <hard_fault+0x9c>
		} else if (SCB_BFSR != 0) {
   1313a:	4b13      	ldr	r3, [pc, #76]	; (13188 <hard_fault+0xd8>)
   1313c:	781b      	ldrb	r3, [r3, #0]
   1313e:	b95b      	cbnz	r3, 13158 <hard_fault+0xa8>
		} else if (SCB_UFSR != 0) {
   13140:	4b12      	ldr	r3, [pc, #72]	; (1318c <hard_fault+0xdc>)
   13142:	881b      	ldrh	r3, [r3, #0]
   13144:	b29b      	uxth	r3, r3
   13146:	b96b      	cbnz	r3, 13164 <hard_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13148:	4630      	mov	r0, r6
	return reason;
   1314a:	e7d0      	b.n	130ee <hard_fault+0x3e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1314c:	4622      	mov	r2, r4
   1314e:	2101      	movs	r1, #1
   13150:	4628      	mov	r0, r5
   13152:	f7ff fecb 	bl	12eec <mem_manage_fault>
   13156:	e7ca      	b.n	130ee <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
   13158:	4622      	mov	r2, r4
   1315a:	2101      	movs	r1, #1
   1315c:	4628      	mov	r0, r5
   1315e:	f7ff fded 	bl	12d3c <bus_fault>
   13162:	e7c4      	b.n	130ee <hard_fault+0x3e>
			reason = usage_fault(esf);
   13164:	4628      	mov	r0, r5
   13166:	f7ff fd1d 	bl	12ba4 <usage_fault>
   1316a:	e7c0      	b.n	130ee <hard_fault+0x3e>
   1316c:	000254dc 	.word	0x000254dc
   13170:	0002545c 	.word	0x0002545c
   13174:	00026184 	.word	0x00026184
   13178:	e000ed00 	.word	0xe000ed00
   1317c:	0002619c 	.word	0x0002619c
   13180:	000261c0 	.word	0x000261c0
   13184:	e000ed28 	.word	0xe000ed28
   13188:	e000ed29 	.word	0xe000ed29
   1318c:	e000ed2a 	.word	0xe000ed2a

00013190 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   13190:	b508      	push	{r3, lr}
   13192:	460a      	mov	r2, r1
   13194:	480b      	ldr	r0, [pc, #44]	; (131c4 <reserved_exception+0x34>)
   13196:	4b0c      	ldr	r3, [pc, #48]	; (131c8 <reserved_exception+0x38>)
   13198:	1ac0      	subs	r0, r0, r3
   1319a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   1319c:	f04f 0300 	mov.w	r3, #0
   131a0:	2101      	movs	r1, #1
   131a2:	f361 0302 	bfi	r3, r1, #0, #3
   131a6:	f36f 03c5 	bfc	r3, #3, #3
   131aa:	f360 138f 	bfi	r3, r0, #6, #10
   131ae:	2a0f      	cmp	r2, #15
   131b0:	dc05      	bgt.n	131be <reserved_exception+0x2e>
   131b2:	4906      	ldr	r1, [pc, #24]	; (131cc <reserved_exception+0x3c>)
   131b4:	3a10      	subs	r2, #16
   131b6:	4806      	ldr	r0, [pc, #24]	; (131d0 <reserved_exception+0x40>)
   131b8:	f7fd fe88 	bl	10ecc <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   131bc:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   131be:	4905      	ldr	r1, [pc, #20]	; (131d4 <reserved_exception+0x44>)
   131c0:	e7f8      	b.n	131b4 <reserved_exception+0x24>
   131c2:	bf00      	nop
   131c4:	000254dc 	.word	0x000254dc
   131c8:	0002545c 	.word	0x0002545c
   131cc:	000261e0 	.word	0x000261e0
   131d0:	00026214 	.word	0x00026214
   131d4:	000261f8 	.word	0x000261f8

000131d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   131d8:	b570      	push	{r4, r5, r6, lr}
   131da:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   131dc:	4b2b      	ldr	r3, [pc, #172]	; (1328c <z_arm_fault+0xb4>)
   131de:	685d      	ldr	r5, [r3, #4]
   131e0:	f3c5 0508 	ubfx	r5, r5, #0, #9
   131e4:	2300      	movs	r3, #0
   131e6:	f383 8811 	msr	BASEPRI, r3
   131ea:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   131ee:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   131f2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   131f6:	d12a      	bne.n	1324e <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   131f8:	f002 030c 	and.w	r3, r2, #12
   131fc:	2b08      	cmp	r3, #8
   131fe:	d010      	beq.n	13222 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13200:	f012 0f08 	tst.w	r2, #8
   13204:	d020      	beq.n	13248 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   13206:	460c      	mov	r4, r1
	*nested_exc = false;
   13208:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1320a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1320e:	4629      	mov	r1, r5
   13210:	4620      	mov	r0, r4
   13212:	f00e f8bf 	bl	21394 <fault_handle>
   13216:	4605      	mov	r5, r0
	if (recoverable) {
   13218:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1321c:	b1d3      	cbz	r3, 13254 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   1321e:	b00a      	add	sp, #40	; 0x28
   13220:	bd70      	pop	{r4, r5, r6, pc}
   13222:	4b1b      	ldr	r3, [pc, #108]	; (13290 <z_arm_fault+0xb8>)
   13224:	4a1b      	ldr	r2, [pc, #108]	; (13294 <z_arm_fault+0xbc>)
   13226:	1a9b      	subs	r3, r3, r2
   13228:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1322a:	f04f 0100 	mov.w	r1, #0
   1322e:	2201      	movs	r2, #1
   13230:	f362 0102 	bfi	r1, r2, #0, #3
   13234:	f36f 01c5 	bfc	r1, #3, #3
   13238:	f363 118f 	bfi	r1, r3, #6, #10
   1323c:	4816      	ldr	r0, [pc, #88]	; (13298 <z_arm_fault+0xc0>)
   1323e:	f7fd fec5 	bl	10fcc <log_0>
	*nested_exc = false;
   13242:	2600      	movs	r6, #0
		return NULL;
   13244:	4634      	mov	r4, r6
   13246:	e7e0      	b.n	1320a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   13248:	4604      	mov	r4, r0
			*nested_exc = true;
   1324a:	2601      	movs	r6, #1
   1324c:	e7dd      	b.n	1320a <z_arm_fault+0x32>
	*nested_exc = false;
   1324e:	2600      	movs	r6, #0
		return NULL;
   13250:	4634      	mov	r4, r6
   13252:	e7da      	b.n	1320a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13254:	2220      	movs	r2, #32
   13256:	4621      	mov	r1, r4
   13258:	a801      	add	r0, sp, #4
   1325a:	f00e f964 	bl	21526 <memcpy>
	if (nested_exc) {
   1325e:	b14e      	cbz	r6, 13274 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13260:	9b08      	ldr	r3, [sp, #32]
   13262:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13266:	b95a      	cbnz	r2, 13280 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13268:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1326c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   13270:	9308      	str	r3, [sp, #32]
   13272:	e005      	b.n	13280 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13274:	9b08      	ldr	r3, [sp, #32]
   13276:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1327a:	f023 0301 	bic.w	r3, r3, #1
   1327e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   13280:	a901      	add	r1, sp, #4
   13282:	4628      	mov	r0, r5
   13284:	f00e f86c 	bl	21360 <z_arm_fatal_error>
   13288:	e7c9      	b.n	1321e <z_arm_fault+0x46>
   1328a:	bf00      	nop
   1328c:	e000ed00 	.word	0xe000ed00
   13290:	000254dc 	.word	0x000254dc
   13294:	0002545c 	.word	0x0002545c
   13298:	00026228 	.word	0x00026228

0001329c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1329c:	4a02      	ldr	r2, [pc, #8]	; (132a8 <z_arm_fault_init+0xc>)
   1329e:	6953      	ldr	r3, [r2, #20]
   132a0:	f043 0310 	orr.w	r3, r3, #16
   132a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   132a6:	4770      	bx	lr
   132a8:	e000ed00 	.word	0xe000ed00

000132ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   132ac:	4b04      	ldr	r3, [pc, #16]	; (132c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   132ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   132b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   132b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   132b4:	d003      	beq.n	132be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   132b6:	4903      	ldr	r1, [pc, #12]	; (132c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   132b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   132bc:	600a      	str	r2, [r1, #0]

000132be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   132be:	4770      	bx	lr
	ldr r3, =_kernel
   132c0:	200377cc 	.word	0x200377cc
	ldr r1, =_SCS_ICSR
   132c4:	e000ed04 	.word	0xe000ed04

000132c8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   132c8:	4b06      	ldr	r3, [pc, #24]	; (132e4 <z_arm_clear_arm_mpu_config+0x1c>)
   132ca:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   132cc:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   132d0:	2300      	movs	r3, #0
   132d2:	4283      	cmp	r3, r0
   132d4:	da05      	bge.n	132e2 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   132d6:	4a03      	ldr	r2, [pc, #12]	; (132e4 <z_arm_clear_arm_mpu_config+0x1c>)
   132d8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   132da:	2100      	movs	r1, #0
   132dc:	6111      	str	r1, [r2, #16]
   132de:	3301      	adds	r3, #1
   132e0:	e7f7      	b.n	132d2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   132e2:	4770      	bx	lr
   132e4:	e000ed90 	.word	0xe000ed90

000132e8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   132e8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   132ea:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   132ec:	2400      	movs	r4, #0
   132ee:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   132f2:	f7ff ffe9 	bl	132c8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   132f6:	4623      	mov	r3, r4
   132f8:	e008      	b.n	1330c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   132fa:	f103 0120 	add.w	r1, r3, #32
   132fe:	4a0e      	ldr	r2, [pc, #56]	; (13338 <z_arm_init_arch_hw_at_boot+0x50>)
   13300:	f04f 30ff 	mov.w	r0, #4294967295
   13304:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   13308:	3301      	adds	r3, #1
   1330a:	b2db      	uxtb	r3, r3
   1330c:	2b07      	cmp	r3, #7
   1330e:	d9f4      	bls.n	132fa <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13310:	2300      	movs	r3, #0
   13312:	e008      	b.n	13326 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   13314:	f103 0160 	add.w	r1, r3, #96	; 0x60
   13318:	4a07      	ldr	r2, [pc, #28]	; (13338 <z_arm_init_arch_hw_at_boot+0x50>)
   1331a:	f04f 30ff 	mov.w	r0, #4294967295
   1331e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   13322:	3301      	adds	r3, #1
   13324:	b2db      	uxtb	r3, r3
   13326:	2b07      	cmp	r3, #7
   13328:	d9f4      	bls.n	13314 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1332a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1332c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13330:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   13334:	bd10      	pop	{r4, pc}
   13336:	bf00      	nop
   13338:	e000e100 	.word	0xe000e100

0001333c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1333c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1333e:	e006      	b.n	1334e <z_arm_interrupt_init+0x12>
   13340:	f002 010f 	and.w	r1, r2, #15
   13344:	4b09      	ldr	r3, [pc, #36]	; (1336c <z_arm_interrupt_init+0x30>)
   13346:	440b      	add	r3, r1
   13348:	2140      	movs	r1, #64	; 0x40
   1334a:	7619      	strb	r1, [r3, #24]
   1334c:	3201      	adds	r2, #1
   1334e:	2a2f      	cmp	r2, #47	; 0x2f
   13350:	dc0a      	bgt.n	13368 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   13352:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   13354:	2b00      	cmp	r3, #0
   13356:	dbf3      	blt.n	13340 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13358:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1335c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13360:	2140      	movs	r1, #64	; 0x40
   13362:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13366:	e7f1      	b.n	1334c <z_arm_interrupt_init+0x10>
	}
}
   13368:	4770      	bx	lr
   1336a:	bf00      	nop
   1336c:	e000ecfc 	.word	0xe000ecfc

00013370 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13370:	b508      	push	{r3, lr}
	if (_current == thread) {
   13372:	4b08      	ldr	r3, [pc, #32]	; (13394 <z_impl_k_thread_abort+0x24>)
   13374:	689b      	ldr	r3, [r3, #8]
   13376:	4283      	cmp	r3, r0
   13378:	d002      	beq.n	13380 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   1337a:	f009 f9c5 	bl	1c708 <z_thread_abort>
}
   1337e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13380:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13384:	2b00      	cmp	r3, #0
   13386:	d0f8      	beq.n	1337a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13388:	4a03      	ldr	r2, [pc, #12]	; (13398 <z_impl_k_thread_abort+0x28>)
   1338a:	6853      	ldr	r3, [r2, #4]
   1338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13390:	6053      	str	r3, [r2, #4]
   13392:	e7f2      	b.n	1337a <z_impl_k_thread_abort+0xa>
   13394:	200377cc 	.word	0x200377cc
   13398:	e000ed00 	.word	0xe000ed00

0001339c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1339c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1339e:	4b03      	ldr	r3, [pc, #12]	; (133ac <z_arm_configure_static_mpu_regions+0x10>)
   133a0:	4a03      	ldr	r2, [pc, #12]	; (133b0 <z_arm_configure_static_mpu_regions+0x14>)
   133a2:	2101      	movs	r1, #1
   133a4:	4803      	ldr	r0, [pc, #12]	; (133b4 <z_arm_configure_static_mpu_regions+0x18>)
   133a6:	f00e f84a 	bl	2143e <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   133aa:	bd08      	pop	{r3, pc}
   133ac:	20040000 	.word	0x20040000
   133b0:	20000000 	.word	0x20000000
   133b4:	00026258 	.word	0x00026258

000133b8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   133b8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   133ba:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   133be:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   133c0:	4804      	ldr	r0, [pc, #16]	; (133d4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   133c2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   133c4:	2320      	movs	r3, #32
   133c6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   133c8:	4b03      	ldr	r3, [pc, #12]	; (133d8 <z_arm_configure_dynamic_mpu_regions+0x20>)
   133ca:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   133cc:	2101      	movs	r1, #1
   133ce:	f00e f83a 	bl	21446 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   133d2:	bd08      	pop	{r3, pc}
   133d4:	200368c8 	.word	0x200368c8
   133d8:	150b0000 	.word	0x150b0000

000133dc <region_init>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   133dc:	4a06      	ldr	r2, [pc, #24]	; (133f8 <region_init+0x1c>)
   133de:	6090      	str	r0, [r2, #8]
	/* Configure the region */
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   133e0:	680b      	ldr	r3, [r1, #0]
   133e2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   133e6:	4303      	orrs	r3, r0
   133e8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   133ec:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   133ee:	688b      	ldr	r3, [r1, #8]
   133f0:	f043 0301 	orr.w	r3, r3, #1
   133f4:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
}
   133f6:	4770      	bx	lr
   133f8:	e000ed90 	.word	0xe000ed90

000133fc <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   133fc:	b510      	push	{r4, lr}
   133fe:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   13400:	2807      	cmp	r0, #7
   13402:	d803      	bhi.n	1340c <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   13404:	f7ff ffea 	bl	133dc <region_init>

	return index;
   13408:	4620      	mov	r0, r4
}
   1340a:	bd10      	pop	{r4, pc}
   1340c:	4b09      	ldr	r3, [pc, #36]	; (13434 <region_allocate_and_init+0x38>)
   1340e:	4a0a      	ldr	r2, [pc, #40]	; (13438 <region_allocate_and_init+0x3c>)
   13410:	1a9b      	subs	r3, r3, r2
   13412:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13414:	f04f 0200 	mov.w	r2, #0
   13418:	2101      	movs	r1, #1
   1341a:	f361 0202 	bfi	r2, r1, #0, #3
   1341e:	f36f 02c5 	bfc	r2, #3, #3
   13422:	f363 128f 	bfi	r2, r3, #6, #10
   13426:	4601      	mov	r1, r0
   13428:	4804      	ldr	r0, [pc, #16]	; (1343c <region_allocate_and_init+0x40>)
   1342a:	f7fd fd19 	bl	10e60 <log_1>
		return -EINVAL;
   1342e:	f06f 0015 	mvn.w	r0, #21
   13432:	e7ea      	b.n	1340a <region_allocate_and_init+0xe>
   13434:	000254cc 	.word	0x000254cc
   13438:	0002545c 	.word	0x0002545c
   1343c:	00026264 	.word	0x00026264

00013440 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13444:	4680      	mov	r8, r0
   13446:	460f      	mov	r7, r1
   13448:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   1344a:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   1344c:	2400      	movs	r4, #0
   1344e:	e009      	b.n	13464 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   13450:	4629      	mov	r1, r5
   13452:	b2f0      	uxtb	r0, r6
   13454:	f00d ffd4 	bl	21400 <mpu_configure_region>
   13458:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   1345a:	f110 0f16 	cmn.w	r0, #22
   1345e:	d025      	beq.n	134ac <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   13460:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   13462:	3401      	adds	r4, #1
   13464:	42bc      	cmp	r4, r7
   13466:	da21      	bge.n	134ac <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   13468:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   1346c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   13470:	686a      	ldr	r2, [r5, #4]
   13472:	2a00      	cmp	r2, #0
   13474:	d0f5      	beq.n	13462 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   13476:	f1ba 0f00 	cmp.w	sl, #0
   1347a:	d0e9      	beq.n	13450 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   1347c:	4628      	mov	r0, r5
   1347e:	f00d ffae 	bl	213de <mpu_partition_is_valid>
		if (do_sanity_check &&
   13482:	2800      	cmp	r0, #0
   13484:	d1e4      	bne.n	13450 <mpu_configure_regions+0x10>
   13486:	4b0b      	ldr	r3, [pc, #44]	; (134b4 <mpu_configure_regions+0x74>)
   13488:	4a0b      	ldr	r2, [pc, #44]	; (134b8 <mpu_configure_regions+0x78>)
   1348a:	1a9b      	subs	r3, r3, r2
   1348c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   1348e:	f04f 0200 	mov.w	r2, #0
   13492:	2101      	movs	r1, #1
   13494:	f361 0202 	bfi	r2, r1, #0, #3
   13498:	f36f 02c5 	bfc	r2, #3, #3
   1349c:	f363 128f 	bfi	r2, r3, #6, #10
   134a0:	4621      	mov	r1, r4
   134a2:	4806      	ldr	r0, [pc, #24]	; (134bc <mpu_configure_regions+0x7c>)
   134a4:	f7fd fcdc 	bl	10e60 <log_1>
			return -EINVAL;
   134a8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   134ac:	4630      	mov	r0, r6
   134ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   134b2:	bf00      	nop
   134b4:	000254cc 	.word	0x000254cc
   134b8:	0002545c 	.word	0x0002545c
   134bc:	0002628c 	.word	0x0002628c

000134c0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   134c0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   134c2:	4c03      	ldr	r4, [pc, #12]	; (134d0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   134c4:	2301      	movs	r3, #1
   134c6:	7822      	ldrb	r2, [r4, #0]
   134c8:	f7ff ffba 	bl	13440 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   134cc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   134ce:	bd10      	pop	{r4, pc}
   134d0:	2003811f 	.word	0x2003811f

000134d4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   134d4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   134d6:	2300      	movs	r3, #0
   134d8:	4a08      	ldr	r2, [pc, #32]	; (134fc <mpu_configure_dynamic_mpu_regions+0x28>)
   134da:	7812      	ldrb	r2, [r2, #0]
   134dc:	f7ff ffb0 	bl	13440 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   134e0:	f110 0f16 	cmn.w	r0, #22
   134e4:	d008      	beq.n	134f8 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   134e6:	4603      	mov	r3, r0
   134e8:	2b07      	cmp	r3, #7
   134ea:	dc05      	bgt.n	134f8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   134ec:	4a04      	ldr	r2, [pc, #16]	; (13500 <mpu_configure_dynamic_mpu_regions+0x2c>)
   134ee:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   134f0:	2100      	movs	r1, #0
   134f2:	6111      	str	r1, [r2, #16]
   134f4:	3301      	adds	r3, #1
   134f6:	e7f7      	b.n	134e8 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   134f8:	bd08      	pop	{r3, pc}
   134fa:	bf00      	nop
   134fc:	2003811f 	.word	0x2003811f
   13500:	e000ed90 	.word	0xe000ed90

00013504 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13504:	4b03      	ldr	r3, [pc, #12]	; (13514 <arm_core_mpu_enable+0x10>)
   13506:	2205      	movs	r2, #5
   13508:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1350a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1350e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13512:	4770      	bx	lr
   13514:	e000ed90 	.word	0xe000ed90

00013518 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   13518:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1351c:	4b01      	ldr	r3, [pc, #4]	; (13524 <arm_core_mpu_disable+0xc>)
   1351e:	2200      	movs	r2, #0
   13520:	605a      	str	r2, [r3, #4]
}
   13522:	4770      	bx	lr
   13524:	e000ed90 	.word	0xe000ed90

00013528 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   13528:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1352a:	4b0e      	ldr	r3, [pc, #56]	; (13564 <z_arm_mpu_init+0x3c>)
   1352c:	681d      	ldr	r5, [r3, #0]
   1352e:	2d08      	cmp	r5, #8
   13530:	d815      	bhi.n	1355e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13532:	f7ff fff1 	bl	13518 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13536:	2400      	movs	r4, #0
   13538:	42a5      	cmp	r5, r4
   1353a:	d90a      	bls.n	13552 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1353c:	4b09      	ldr	r3, [pc, #36]	; (13564 <z_arm_mpu_init+0x3c>)
   1353e:	6859      	ldr	r1, [r3, #4]
   13540:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   13544:	0093      	lsls	r3, r2, #2
   13546:	4419      	add	r1, r3
   13548:	4620      	mov	r0, r4
   1354a:	f7ff ff47 	bl	133dc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1354e:	3401      	adds	r4, #1
   13550:	e7f2      	b.n	13538 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13552:	4b05      	ldr	r3, [pc, #20]	; (13568 <z_arm_mpu_init+0x40>)
   13554:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   13556:	f7ff ffd5 	bl	13504 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1355a:	2000      	movs	r0, #0
}
   1355c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   1355e:	f04f 30ff 	mov.w	r0, #4294967295
   13562:	e7fb      	b.n	1355c <z_arm_mpu_init+0x34>
   13564:	000262c0 	.word	0x000262c0
   13568:	2003811f 	.word	0x2003811f

0001356c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1356c:	4b01      	ldr	r3, [pc, #4]	; (13574 <__stdout_hook_install+0x8>)
   1356e:	6018      	str	r0, [r3, #0]
}
   13570:	4770      	bx	lr
   13572:	bf00      	nop
   13574:	20033938 	.word	0x20033938

00013578 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13578:	f04f 0340 	mov.w	r3, #64	; 0x40
   1357c:	f3ef 8211 	mrs	r2, BASEPRI
   13580:	f383 8811 	msr	BASEPRI, r3
   13584:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13588:	2301      	movs	r3, #1
   1358a:	4906      	ldr	r1, [pc, #24]	; (135a4 <nordicsemi_nrf52_init+0x2c>)
   1358c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   13590:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   13594:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   13598:	f382 8811 	msr	BASEPRI, r2
   1359c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   135a0:	2000      	movs	r0, #0
   135a2:	4770      	bx	lr
   135a4:	4001e000 	.word	0x4001e000

000135a8 <sys_arch_reboot>:
    *p_gpregret = val;
   135a8:	b2c0      	uxtb	r0, r0
   135aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   135ae:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   135b2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   135b6:	4905      	ldr	r1, [pc, #20]	; (135cc <sys_arch_reboot+0x24>)
   135b8:	68ca      	ldr	r2, [r1, #12]
   135ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   135be:	4b04      	ldr	r3, [pc, #16]	; (135d0 <sys_arch_reboot+0x28>)
   135c0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   135c2:	60cb      	str	r3, [r1, #12]
   135c4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   135c8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   135ca:	e7fd      	b.n	135c8 <sys_arch_reboot+0x20>
   135cc:	e000ed00 	.word	0xe000ed00
   135d0:	05fa0004 	.word	0x05fa0004

000135d4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   135d4:	b130      	cbz	r0, 135e4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   135d6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   135d8:	0180      	lsls	r0, r0, #6
   135da:	4b03      	ldr	r3, [pc, #12]	; (135e8 <arch_busy_wait+0x14>)
   135dc:	f043 0301 	orr.w	r3, r3, #1
   135e0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   135e2:	bd08      	pop	{r3, pc}
   135e4:	4770      	bx	lr
   135e6:	bf00      	nop
   135e8:	000256a0 	.word	0x000256a0

000135ec <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   135ec:	2940      	cmp	r1, #64	; 0x40
   135ee:	bf28      	it	cs
   135f0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   135f2:	2300      	movs	r3, #0
   135f4:	428b      	cmp	r3, r1
   135f6:	d217      	bcs.n	13628 <bt_hex_real+0x3c>
{
   135f8:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   135fa:	5cc4      	ldrb	r4, [r0, r3]
   135fc:	0924      	lsrs	r4, r4, #4
   135fe:	005a      	lsls	r2, r3, #1
   13600:	4e0c      	ldr	r6, [pc, #48]	; (13634 <bt_hex_real+0x48>)
   13602:	5d34      	ldrb	r4, [r6, r4]
   13604:	4d0c      	ldr	r5, [pc, #48]	; (13638 <bt_hex_real+0x4c>)
   13606:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1360a:	5cc4      	ldrb	r4, [r0, r3]
   1360c:	f004 040f 	and.w	r4, r4, #15
   13610:	3201      	adds	r2, #1
   13612:	5d34      	ldrb	r4, [r6, r4]
   13614:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   13616:	3301      	adds	r3, #1
   13618:	428b      	cmp	r3, r1
   1361a:	d3ee      	bcc.n	135fa <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   1361c:	4806      	ldr	r0, [pc, #24]	; (13638 <bt_hex_real+0x4c>)
   1361e:	2200      	movs	r2, #0
   13620:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   13624:	bc70      	pop	{r4, r5, r6}
   13626:	4770      	bx	lr
	str[i * 2] = '\0';
   13628:	4803      	ldr	r0, [pc, #12]	; (13638 <bt_hex_real+0x4c>)
   1362a:	2200      	movs	r2, #0
   1362c:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   13630:	4770      	bx	lr
   13632:	bf00      	nop
   13634:	000262e4 	.word	0x000262e4
   13638:	200368d4 	.word	0x200368d4

0001363c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   1363c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1363e:	b08b      	sub	sp, #44	; 0x2c
   13640:	4604      	mov	r4, r0
	switch (addr->type) {
   13642:	7803      	ldrb	r3, [r0, #0]
   13644:	2b03      	cmp	r3, #3
   13646:	d82c      	bhi.n	136a2 <bt_addr_le_str_real+0x66>
   13648:	e8df f003 	tbb	[pc, r3]
   1364c:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   13650:	4917      	ldr	r1, [pc, #92]	; (136b0 <bt_addr_le_str_real+0x74>)
   13652:	a807      	add	r0, sp, #28
   13654:	f00d fefb 	bl	2144e <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   13658:	7963      	ldrb	r3, [r4, #5]
   1365a:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1365c:	78e1      	ldrb	r1, [r4, #3]
   1365e:	78a0      	ldrb	r0, [r4, #2]
   13660:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   13662:	4d14      	ldr	r5, [pc, #80]	; (136b4 <bt_addr_le_str_real+0x78>)
   13664:	af07      	add	r7, sp, #28
   13666:	9705      	str	r7, [sp, #20]
   13668:	9604      	str	r6, [sp, #16]
   1366a:	9003      	str	r0, [sp, #12]
   1366c:	9102      	str	r1, [sp, #8]
   1366e:	9201      	str	r2, [sp, #4]
   13670:	9300      	str	r3, [sp, #0]
   13672:	79a3      	ldrb	r3, [r4, #6]
   13674:	4a10      	ldr	r2, [pc, #64]	; (136b8 <bt_addr_le_str_real+0x7c>)
   13676:	211e      	movs	r1, #30
   13678:	4628      	mov	r0, r5
   1367a:	f00c fae5 	bl	1fc48 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1367e:	4628      	mov	r0, r5
   13680:	b00b      	add	sp, #44	; 0x2c
   13682:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   13684:	490d      	ldr	r1, [pc, #52]	; (136bc <bt_addr_le_str_real+0x80>)
   13686:	a807      	add	r0, sp, #28
   13688:	f00d fee1 	bl	2144e <strcpy>
		break;
   1368c:	e7e4      	b.n	13658 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   1368e:	490c      	ldr	r1, [pc, #48]	; (136c0 <bt_addr_le_str_real+0x84>)
   13690:	a807      	add	r0, sp, #28
   13692:	f00d fedc 	bl	2144e <strcpy>
		break;
   13696:	e7df      	b.n	13658 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   13698:	490a      	ldr	r1, [pc, #40]	; (136c4 <bt_addr_le_str_real+0x88>)
   1369a:	a807      	add	r0, sp, #28
   1369c:	f00d fed7 	bl	2144e <strcpy>
		break;
   136a0:	e7da      	b.n	13658 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   136a2:	4a09      	ldr	r2, [pc, #36]	; (136c8 <bt_addr_le_str_real+0x8c>)
   136a4:	210a      	movs	r1, #10
   136a6:	a807      	add	r0, sp, #28
   136a8:	f00c face 	bl	1fc48 <snprintk>
		break;
   136ac:	e7d4      	b.n	13658 <bt_addr_le_str_real+0x1c>
   136ae:	bf00      	nop
   136b0:	00025834 	.word	0x00025834
   136b4:	20036958 	.word	0x20036958
   136b8:	0002585c 	.word	0x0002585c
   136bc:	0002583c 	.word	0x0002583c
   136c0:	00025844 	.word	0x00025844
   136c4:	00025850 	.word	0x00025850
   136c8:	0002720c 	.word	0x0002720c

000136cc <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   136cc:	b570      	push	{r4, r5, r6, lr}
   136ce:	4605      	mov	r5, r0
   136d0:	460c      	mov	r4, r1
	switch (src->type) {
   136d2:	7803      	ldrb	r3, [r0, #0]
   136d4:	2b01      	cmp	r3, #1
   136d6:	d010      	beq.n	136fa <uuid_to_uuid128+0x2e>
   136d8:	2b02      	cmp	r3, #2
   136da:	d020      	beq.n	1371e <uuid_to_uuid128+0x52>
   136dc:	b103      	cbz	r3, 136e0 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   136de:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   136e0:	4e12      	ldr	r6, [pc, #72]	; (1372c <uuid_to_uuid128+0x60>)
   136e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   136e4:	6020      	str	r0, [r4, #0]
   136e6:	6061      	str	r1, [r4, #4]
   136e8:	60a2      	str	r2, [r4, #8]
   136ea:	60e3      	str	r3, [r4, #12]
   136ec:	7833      	ldrb	r3, [r6, #0]
   136ee:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   136f0:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   136f2:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   136f4:	0a1b      	lsrs	r3, r3, #8
   136f6:	73a3      	strb	r3, [r4, #14]
}
   136f8:	e7f1      	b.n	136de <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   136fa:	4e0c      	ldr	r6, [pc, #48]	; (1372c <uuid_to_uuid128+0x60>)
   136fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   136fe:	6020      	str	r0, [r4, #0]
   13700:	6061      	str	r1, [r4, #4]
   13702:	60a2      	str	r2, [r4, #8]
   13704:	60e3      	str	r3, [r4, #12]
   13706:	7833      	ldrb	r3, [r6, #0]
   13708:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   1370a:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   1370c:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   1370e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   13712:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13714:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   13716:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   13718:	0e1b      	lsrs	r3, r3, #24
   1371a:	7423      	strb	r3, [r4, #16]
}
   1371c:	e7df      	b.n	136de <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   1371e:	2211      	movs	r2, #17
   13720:	4601      	mov	r1, r0
   13722:	4620      	mov	r0, r4
   13724:	f00d feff 	bl	21526 <memcpy>
		return;
   13728:	e7d9      	b.n	136de <uuid_to_uuid128+0x12>
   1372a:	bf00      	nop
   1372c:	00026300 	.word	0x00026300

00013730 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13730:	b538      	push	{r3, r4, r5, lr}
   13732:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13734:	4805      	ldr	r0, [pc, #20]	; (1374c <bt_buf_get_rx+0x1c>)
   13736:	f00f ffbd 	bl	236b4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1373a:	4605      	mov	r5, r0
   1373c:	b120      	cbz	r0, 13748 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1373e:	2100      	movs	r1, #0
   13740:	3008      	adds	r0, #8
   13742:	f00f ffd9 	bl	236f8 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13746:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13748:	4628      	mov	r0, r5
   1374a:	bd38      	pop	{r3, r4, r5, pc}
   1374c:	20033cf0 	.word	0x20033cf0

00013750 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13750:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   13752:	f04f 0340 	mov.w	r3, #64	; 0x40
   13756:	f3ef 8211 	mrs	r2, BASEPRI
   1375a:	f383 8811 	msr	BASEPRI, r3
   1375e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   13762:	4b0e      	ldr	r3, [pc, #56]	; (1379c <bt_buf_get_cmd_complete+0x4c>)
   13764:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
   13768:	2500      	movs	r5, #0
   1376a:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
	__asm__ volatile(
   1376e:	f382 8811 	msr	BASEPRI, r2
   13772:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   13776:	b14c      	cbz	r4, 1378c <bt_buf_get_cmd_complete+0x3c>
   13778:	2301      	movs	r3, #1
   1377a:	7523      	strb	r3, [r4, #20]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1377c:	4629      	mov	r1, r5
   1377e:	81a5      	strh	r5, [r4, #12]
   13780:	f104 0008 	add.w	r0, r4, #8
   13784:	f00f ffb8 	bl	236f8 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   13788:	4620      	mov	r0, r4
   1378a:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1378c:	4602      	mov	r2, r0
   1378e:	460b      	mov	r3, r1
   13790:	2001      	movs	r0, #1
   13792:	f7ff ffcd 	bl	13730 <bt_buf_get_rx>
   13796:	4604      	mov	r4, r0
   13798:	e7f6      	b.n	13788 <bt_buf_get_cmd_complete+0x38>
   1379a:	bf00      	nop
   1379c:	200002b8 	.word	0x200002b8

000137a0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   137a0:	b510      	push	{r4, lr}
	switch (evt) {
   137a2:	280f      	cmp	r0, #15
   137a4:	d90d      	bls.n	137c2 <bt_buf_get_evt+0x22>
   137a6:	2813      	cmp	r0, #19
   137a8:	d10d      	bne.n	137c6 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   137aa:	4814      	ldr	r0, [pc, #80]	; (137fc <bt_buf_get_evt+0x5c>)
   137ac:	f00f ff82 	bl	236b4 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   137b0:	4604      	mov	r4, r0
   137b2:	b198      	cbz	r0, 137dc <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   137b4:	2100      	movs	r1, #0
   137b6:	3008      	adds	r0, #8
   137b8:	f00f ff9e 	bl	236f8 <net_buf_simple_reserve>
   137bc:	2301      	movs	r3, #1
   137be:	7523      	strb	r3, [r4, #20]
}
   137c0:	e00c      	b.n	137dc <bt_buf_get_evt+0x3c>
	switch (evt) {
   137c2:	280e      	cmp	r0, #14
   137c4:	d205      	bcs.n	137d2 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   137c6:	b959      	cbnz	r1, 137e0 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   137c8:	2001      	movs	r0, #1
   137ca:	f7ff ffb1 	bl	13730 <bt_buf_get_rx>
   137ce:	4604      	mov	r4, r0
   137d0:	e004      	b.n	137dc <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   137d2:	4610      	mov	r0, r2
   137d4:	4619      	mov	r1, r3
   137d6:	f7ff ffbb 	bl	13750 <bt_buf_get_cmd_complete>
   137da:	4604      	mov	r4, r0
	}
}
   137dc:	4620      	mov	r0, r4
   137de:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   137e0:	4807      	ldr	r0, [pc, #28]	; (13800 <bt_buf_get_evt+0x60>)
   137e2:	f00f ff67 	bl	236b4 <net_buf_alloc_fixed>
			if (buf) {
   137e6:	4604      	mov	r4, r0
   137e8:	2800      	cmp	r0, #0
   137ea:	d0f7      	beq.n	137dc <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   137ec:	2100      	movs	r1, #0
   137ee:	3008      	adds	r0, #8
   137f0:	f00f ff82 	bl	236f8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   137f4:	2301      	movs	r3, #1
   137f6:	7523      	strb	r3, [r4, #20]
			return buf;
   137f8:	e7f0      	b.n	137dc <bt_buf_get_evt+0x3c>
   137fa:	bf00      	nop
   137fc:	20033d18 	.word	0x20033d18
   13800:	20033c78 	.word	0x20033c78

00013804 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13804:	2300      	movs	r3, #0
   13806:	2b00      	cmp	r3, #0
   13808:	dd00      	ble.n	1380c <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   1380a:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   1380c:	4a05      	ldr	r2, [pc, #20]	; (13824 <conn_handle_disconnected+0x20>)
   1380e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   13812:	b922      	cbnz	r2, 1381e <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13814:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   13818:	4902      	ldr	r1, [pc, #8]	; (13824 <conn_handle_disconnected+0x20>)
   1381a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1381e:	3301      	adds	r3, #1
   13820:	e7f1      	b.n	13806 <conn_handle_disconnected+0x2>
   13822:	bf00      	nop
   13824:	20036990 	.word	0x20036990

00013828 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   13828:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1382c:	2300      	movs	r3, #0
   1382e:	2b00      	cmp	r3, #0
   13830:	dd01      	ble.n	13836 <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   13832:	2000      	movs	r0, #0
}
   13834:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   13836:	4a06      	ldr	r2, [pc, #24]	; (13850 <conn_handle_is_disconnected+0x28>)
   13838:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1383c:	4282      	cmp	r2, r0
   1383e:	d001      	beq.n	13844 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   13840:	3301      	adds	r3, #1
   13842:	e7f4      	b.n	1382e <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   13844:	4a02      	ldr	r2, [pc, #8]	; (13850 <conn_handle_is_disconnected+0x28>)
   13846:	2100      	movs	r1, #0
   13848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   1384c:	2001      	movs	r0, #1
   1384e:	4770      	bx	lr
   13850:	20036990 	.word	0x20036990

00013854 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   13854:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   13856:	7851      	ldrb	r1, [r2, #1]
   13858:	4b07      	ldr	r3, [pc, #28]	; (13878 <read_local_ver_complete+0x24>)
   1385a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1385e:	8851      	ldrh	r1, [r2, #2]
   13860:	86d9      	strh	r1, [r3, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   13862:	7911      	ldrb	r1, [r2, #4]
   13864:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   13868:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   1386c:	8719      	strh	r1, [r3, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1386e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   13872:	875a      	strh	r2, [r3, #58]	; 0x3a
}
   13874:	4770      	bx	lr
   13876:	bf00      	nop
   13878:	200002b8 	.word	0x200002b8

0001387c <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   1387c:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   1387e:	7a19      	ldrb	r1, [r3, #8]
   13880:	79da      	ldrb	r2, [r3, #7]
   13882:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   13886:	7998      	ldrb	r0, [r3, #6]
   13888:	795a      	ldrb	r2, [r3, #5]
   1388a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1388e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   13892:	7918      	ldrb	r0, [r3, #4]
   13894:	78d9      	ldrb	r1, [r3, #3]
   13896:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1389a:	7898      	ldrb	r0, [r3, #2]
   1389c:	785b      	ldrb	r3, [r3, #1]
   1389e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   138a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   138a6:	4903      	ldr	r1, [pc, #12]	; (138b4 <le_read_supp_states_complete+0x38>)
   138a8:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
   138ac:	f8c1 20ac 	str.w	r2, [r1, #172]	; 0xac
}
   138b0:	4770      	bx	lr
   138b2:	bf00      	nop
   138b4:	200002b8 	.word	0x200002b8

000138b8 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   138b8:	b470      	push	{r4, r5, r6}
   138ba:	b08f      	sub	sp, #60	; 0x3c
   138bc:	4606      	mov	r6, r0
	const char * const str[] = {
   138be:	ac01      	add	r4, sp, #4
   138c0:	4d0a      	ldr	r5, [pc, #40]	; (138ec <ver_str+0x34>)
   138c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   138c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   138c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   138c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   138ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   138cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   138ce:	682b      	ldr	r3, [r5, #0]
   138d0:	6023      	str	r3, [r4, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   138d2:	2e0c      	cmp	r6, #12
   138d4:	d903      	bls.n	138de <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
   138d6:	4806      	ldr	r0, [pc, #24]	; (138f0 <ver_str+0x38>)
}
   138d8:	b00f      	add	sp, #60	; 0x3c
   138da:	bc70      	pop	{r4, r5, r6}
   138dc:	4770      	bx	lr
		return str[ver];
   138de:	ab0e      	add	r3, sp, #56	; 0x38
   138e0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   138e4:	f856 0c34 	ldr.w	r0, [r6, #-52]
   138e8:	e7f6      	b.n	138d8 <ver_str+0x20>
   138ea:	bf00      	nop
   138ec:	00025618 	.word	0x00025618
   138f0:	00026450 	.word	0x00026450

000138f4 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   138f4:	2803      	cmp	r0, #3
   138f6:	d901      	bls.n	138fc <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   138f8:	4802      	ldr	r0, [pc, #8]	; (13904 <vs_hw_platform+0x10>)
}
   138fa:	4770      	bx	lr
		return plat_str[platform];
   138fc:	4b02      	ldr	r3, [pc, #8]	; (13908 <vs_hw_platform+0x14>)
   138fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13902:	4770      	bx	lr
   13904:	00026450 	.word	0x00026450
   13908:	00026a98 	.word	0x00026a98

0001390c <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1390c:	2802      	cmp	r0, #2
   1390e:	d107      	bne.n	13920 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   13910:	2903      	cmp	r1, #3
   13912:	d901      	bls.n	13918 <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   13914:	4803      	ldr	r0, [pc, #12]	; (13924 <vs_hw_variant+0x18>)
}
   13916:	4770      	bx	lr
		return nordic_str[variant];
   13918:	4b03      	ldr	r3, [pc, #12]	; (13928 <vs_hw_variant+0x1c>)
   1391a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1391e:	4770      	bx	lr
		return "unknown";
   13920:	4800      	ldr	r0, [pc, #0]	; (13924 <vs_hw_variant+0x18>)
   13922:	4770      	bx	lr
   13924:	00026450 	.word	0x00026450
   13928:	00026a68 	.word	0x00026a68

0001392c <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   1392c:	2803      	cmp	r0, #3
   1392e:	d901      	bls.n	13934 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   13930:	4802      	ldr	r0, [pc, #8]	; (1393c <vs_fw_variant+0x10>)
}
   13932:	4770      	bx	lr
		return var_str[variant];
   13934:	4b02      	ldr	r3, [pc, #8]	; (13940 <vs_fw_variant+0x14>)
   13936:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1393a:	4770      	bx	lr
   1393c:	00026450 	.word	0x00026450
   13940:	00026ad0 	.word	0x00026ad0

00013944 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   13944:	6883      	ldr	r3, [r0, #8]
   13946:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   13948:	b993      	cbnz	r3, 13970 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1394a:	f3bf 8f5b 	dmb	ish
   1394e:	4b09      	ldr	r3, [pc, #36]	; (13974 <hci_reset_complete+0x30>)
   13950:	f853 2f98 	ldr.w	r2, [r3, #152]!
   13954:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   13958:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1395c:	f3bf 8f5b 	dmb	ish
   13960:	e853 1f00 	ldrex	r1, [r3]
   13964:	e843 2000 	strex	r0, r2, [r3]
   13968:	2800      	cmp	r0, #0
   1396a:	d1f9      	bne.n	13960 <hci_reset_complete+0x1c>
   1396c:	f3bf 8f5b 	dmb	ish
}
   13970:	4770      	bx	lr
   13972:	bf00      	nop
   13974:	200002b8 	.word	0x200002b8

00013978 <read_local_features_complete>:
{
   13978:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1397a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1397c:	2208      	movs	r2, #8
   1397e:	3101      	adds	r1, #1
   13980:	4801      	ldr	r0, [pc, #4]	; (13988 <read_local_features_complete+0x10>)
   13982:	f00d fdd0 	bl	21526 <memcpy>
}
   13986:	bd08      	pop	{r3, pc}
   13988:	200002f4 	.word	0x200002f4

0001398c <read_supported_commands_complete>:
{
   1398c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1398e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   13990:	2240      	movs	r2, #64	; 0x40
   13992:	3101      	adds	r1, #1
   13994:	4801      	ldr	r0, [pc, #4]	; (1399c <read_supported_commands_complete+0x10>)
   13996:	f00d fdc6 	bl	21526 <memcpy>
}
   1399a:	bd08      	pop	{r3, pc}
   1399c:	200002fc 	.word	0x200002fc

000139a0 <read_le_features_complete>:
{
   139a0:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   139a2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   139a4:	2208      	movs	r2, #8
   139a6:	3101      	adds	r1, #1
   139a8:	4801      	ldr	r0, [pc, #4]	; (139b0 <read_le_features_complete+0x10>)
   139aa:	f00d fdbc 	bl	21526 <memcpy>
}
   139ae:	bd08      	pop	{r3, pc}
   139b0:	20000358 	.word	0x20000358

000139b4 <le_read_buffer_size_complete>:
{
   139b4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   139b6:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   139b8:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   139bc:	b299      	uxth	r1, r3
   139be:	4805      	ldr	r0, [pc, #20]	; (139d4 <le_read_buffer_size_complete+0x20>)
   139c0:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
	if (!bt_dev.le.acl_mtu) {
   139c4:	b901      	cbnz	r1, 139c8 <le_read_buffer_size_complete+0x14>
}
   139c6:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   139c8:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   139ca:	460a      	mov	r2, r1
   139cc:	30d0      	adds	r0, #208	; 0xd0
   139ce:	f010 ff59 	bl	24884 <z_impl_k_sem_init>
   139d2:	e7f8      	b.n	139c6 <le_read_buffer_size_complete+0x12>
   139d4:	200002b8 	.word	0x200002b8

000139d8 <read_buffer_size_complete>:
{
   139d8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   139da:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   139dc:	4b07      	ldr	r3, [pc, #28]	; (139fc <read_buffer_size_complete+0x24>)
   139de:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
   139e2:	b103      	cbz	r3, 139e6 <read_buffer_size_complete+0xe>
}
   139e4:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   139e6:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   139ea:	4804      	ldr	r0, [pc, #16]	; (139fc <read_buffer_size_complete+0x24>)
   139ec:	f8a0 30cc 	strh.w	r3, [r0, #204]	; 0xcc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   139f0:	8891      	ldrh	r1, [r2, #4]
   139f2:	460a      	mov	r2, r1
   139f4:	30d0      	adds	r0, #208	; 0xd0
   139f6:	f010 ff45 	bl	24884 <z_impl_k_sem_init>
   139fa:	e7f3      	b.n	139e4 <read_buffer_size_complete+0xc>
   139fc:	200002b8 	.word	0x200002b8

00013a00 <hci_data_buf_overflow>:
{
   13a00:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   13a02:	6881      	ldr	r1, [r0, #8]
   13a04:	4b08      	ldr	r3, [pc, #32]	; (13a28 <hci_data_buf_overflow+0x28>)
   13a06:	4a09      	ldr	r2, [pc, #36]	; (13a2c <hci_data_buf_overflow+0x2c>)
   13a08:	1a9b      	subs	r3, r3, r2
   13a0a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   13a0c:	f04f 0200 	mov.w	r2, #0
   13a10:	2002      	movs	r0, #2
   13a12:	f360 0202 	bfi	r2, r0, #0, #3
   13a16:	f36f 02c5 	bfc	r2, #3, #3
   13a1a:	f363 128f 	bfi	r2, r3, #6, #10
   13a1e:	7809      	ldrb	r1, [r1, #0]
   13a20:	4803      	ldr	r0, [pc, #12]	; (13a30 <hci_data_buf_overflow+0x30>)
   13a22:	f7fd fa1d 	bl	10e60 <log_1>
}
   13a26:	bd08      	pop	{r3, pc}
   13a28:	00025484 	.word	0x00025484
   13a2c:	0002545c 	.word	0x0002545c
   13a30:	00026458 	.word	0x00026458

00013a34 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   13a34:	2801      	cmp	r0, #1
   13a36:	d001      	beq.n	13a3c <find_pending_connect+0x8>
	return NULL;
   13a38:	2000      	movs	r0, #0
}
   13a3a:	4770      	bx	lr
{
   13a3c:	b500      	push	{lr}
   13a3e:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13a40:	2205      	movs	r2, #5
   13a42:	4b0d      	ldr	r3, [pc, #52]	; (13a78 <find_pending_connect+0x44>)
   13a44:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
   13a48:	f002 fea4 	bl	16794 <bt_conn_lookup_state_le>
		if (!conn) {
   13a4c:	b110      	cbz	r0, 13a54 <find_pending_connect+0x20>
}
   13a4e:	b003      	add	sp, #12
   13a50:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   13a54:	4b09      	ldr	r3, [pc, #36]	; (13a7c <find_pending_connect+0x48>)
   13a56:	e893 0003 	ldmia.w	r3, {r0, r1}
   13a5a:	9000      	str	r0, [sp, #0]
   13a5c:	f8ad 1004 	strh.w	r1, [sp, #4]
   13a60:	0c09      	lsrs	r1, r1, #16
   13a62:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13a66:	2204      	movs	r2, #4
   13a68:	4669      	mov	r1, sp
   13a6a:	4b03      	ldr	r3, [pc, #12]	; (13a78 <find_pending_connect+0x44>)
   13a6c:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
   13a70:	f002 fe90 	bl	16794 <bt_conn_lookup_state_le>
		return conn;
   13a74:	e7eb      	b.n	13a4e <find_pending_connect+0x1a>
   13a76:	bf00      	nop
   13a78:	200002b8 	.word	0x200002b8
   13a7c:	0002564c 	.word	0x0002564c

00013a80 <le_conn_complete_adv_timeout>:
{
   13a80:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   13a82:	f002 f82d 	bl	15ae0 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   13a86:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13a88:	f3bf 8f5b 	dmb	ish
   13a8c:	e850 3f00 	ldrex	r3, [r0]
   13a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13a94:	e840 3200 	strex	r2, r3, [r0]
   13a98:	2a00      	cmp	r2, #0
   13a9a:	d1f7      	bne.n	13a8c <le_conn_complete_adv_timeout+0xc>
   13a9c:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_SLAVE, NULL);
   13aa0:	2100      	movs	r1, #0
   13aa2:	2001      	movs	r0, #1
   13aa4:	f7ff ffc6 	bl	13a34 <find_pending_connect>
		if (!conn) {
   13aa8:	4604      	mov	r4, r0
   13aaa:	b140      	cbz	r0, 13abe <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   13aac:	233c      	movs	r3, #60	; 0x3c
   13aae:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13ab0:	2100      	movs	r1, #0
   13ab2:	f002 fc67 	bl	16384 <bt_conn_set_state>
		bt_conn_unref(conn);
   13ab6:	4620      	mov	r0, r4
   13ab8:	f00e f9e4 	bl	21e84 <bt_conn_unref>
}
   13abc:	bd10      	pop	{r4, pc}
   13abe:	4b08      	ldr	r3, [pc, #32]	; (13ae0 <le_conn_complete_adv_timeout+0x60>)
   13ac0:	4a08      	ldr	r2, [pc, #32]	; (13ae4 <le_conn_complete_adv_timeout+0x64>)
   13ac2:	1a9b      	subs	r3, r3, r2
   13ac4:	08db      	lsrs	r3, r3, #3
			BT_ERR("No pending slave connection");
   13ac6:	f04f 0100 	mov.w	r1, #0
   13aca:	2201      	movs	r2, #1
   13acc:	f362 0102 	bfi	r1, r2, #0, #3
   13ad0:	f36f 01c5 	bfc	r1, #3, #3
   13ad4:	f363 118f 	bfi	r1, r3, #6, #10
   13ad8:	4803      	ldr	r0, [pc, #12]	; (13ae8 <le_conn_complete_adv_timeout+0x68>)
   13ada:	f7fd fa77 	bl	10fcc <log_0>
			return;
   13ade:	e7ed      	b.n	13abc <le_conn_complete_adv_timeout+0x3c>
   13ae0:	00025484 	.word	0x00025484
   13ae4:	0002545c 	.word	0x0002545c
   13ae8:	00026480 	.word	0x00026480

00013aec <hci_disconn_complete>:
{
   13aec:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13aee:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13af0:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   13af4:	7823      	ldrb	r3, [r4, #0]
   13af6:	b103      	cbz	r3, 13afa <hci_disconn_complete+0xe>
}
   13af8:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   13afa:	4630      	mov	r0, r6
   13afc:	f002 fc38 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   13b00:	4605      	mov	r5, r0
   13b02:	b168      	cbz	r0, 13b20 <hci_disconn_complete+0x34>
	conn->err = evt->reason;
   13b04:	78e3      	ldrb	r3, [r4, #3]
   13b06:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13b08:	2100      	movs	r1, #0
   13b0a:	f002 fc3b 	bl	16384 <bt_conn_set_state>
	conn->handle = 0U;
   13b0e:	2300      	movs	r3, #0
   13b10:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
   13b12:	78ab      	ldrb	r3, [r5, #2]
   13b14:	2b01      	cmp	r3, #1
   13b16:	d015      	beq.n	13b44 <hci_disconn_complete+0x58>
		bt_conn_unref(conn);
   13b18:	4628      	mov	r0, r5
   13b1a:	f00e f9b3 	bl	21e84 <bt_conn_unref>
		return;
   13b1e:	e7eb      	b.n	13af8 <hci_disconn_complete+0xc>
   13b20:	4b0a      	ldr	r3, [pc, #40]	; (13b4c <hci_disconn_complete+0x60>)
   13b22:	4a0b      	ldr	r2, [pc, #44]	; (13b50 <hci_disconn_complete+0x64>)
   13b24:	1a9b      	subs	r3, r3, r2
   13b26:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   13b28:	f04f 0200 	mov.w	r2, #0
   13b2c:	2101      	movs	r1, #1
   13b2e:	f361 0202 	bfi	r2, r1, #0, #3
   13b32:	f36f 02c5 	bfc	r2, #3, #3
   13b36:	f363 128f 	bfi	r2, r3, #6, #10
   13b3a:	4631      	mov	r1, r6
   13b3c:	4805      	ldr	r0, [pc, #20]	; (13b54 <hci_disconn_complete+0x68>)
   13b3e:	f7fd f98f 	bl	10e60 <log_1>
		return;
   13b42:	e7d9      	b.n	13af8 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   13b44:	4628      	mov	r0, r5
   13b46:	f00e f99d 	bl	21e84 <bt_conn_unref>
   13b4a:	e7d5      	b.n	13af8 <hci_disconn_complete+0xc>
   13b4c:	00025484 	.word	0x00025484
   13b50:	0002545c 	.word	0x0002545c
   13b54:	0002649c 	.word	0x0002649c

00013b58 <hci_num_completed_packets>:
{
   13b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   13b5c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   13b60:	2700      	movs	r7, #0
   13b62:	e05c      	b.n	13c1e <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   13b64:	3b01      	subs	r3, #1
   13b66:	61e3      	str	r3, [r4, #28]
   13b68:	f382 8811 	msr	BASEPRI, r2
   13b6c:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   13b70:	4620      	mov	r0, r4
   13b72:	f002 f9f3 	bl	15f5c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   13b76:	f007 ffd3 	bl	1bb20 <z_impl_k_sem_give>
				continue;
   13b7a:	e025      	b.n	13bc8 <hci_num_completed_packets+0x70>
	list->tail = node;
   13b7c:	61a1      	str	r1, [r4, #24]
   13b7e:	f382 8811 	msr	BASEPRI, r2
   13b82:	f3bf 8f6f 	isb	sy
			if (!node) {
   13b86:	2b00      	cmp	r3, #0
   13b88:	d036      	beq.n	13bf8 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   13b8a:	f04f 0240 	mov.w	r2, #64	; 0x40
   13b8e:	f3ef 8111 	mrs	r1, BASEPRI
   13b92:	f382 8811 	msr	BASEPRI, r2
   13b96:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   13b9a:	68da      	ldr	r2, [r3, #12]
   13b9c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   13b9e:	2200      	movs	r2, #0
   13ba0:	60da      	str	r2, [r3, #12]
	parent->next = child;
   13ba2:	601a      	str	r2, [r3, #0]
	return list->tail;
   13ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13ba6:	2a00      	cmp	r2, #0
   13ba8:	d05a      	beq.n	13c60 <hci_num_completed_packets+0x108>
	parent->next = child;
   13baa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13bac:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   13bae:	f381 8811 	msr	BASEPRI, r1
   13bb2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   13bb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13bba:	f008 f97b 	bl	1beb4 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   13bbe:	4620      	mov	r0, r4
   13bc0:	f002 f9cc 	bl	15f5c <bt_conn_get_pkts>
   13bc4:	f007 ffac 	bl	1bb20 <z_impl_k_sem_give>
{
   13bc8:	462e      	mov	r6, r5
		while (count--) {
   13bca:	1e75      	subs	r5, r6, #1
   13bcc:	b2ad      	uxth	r5, r5
   13bce:	b316      	cbz	r6, 13c16 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   13bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   13bd4:	f3ef 8211 	mrs	r2, BASEPRI
   13bd8:	f383 8811 	msr	BASEPRI, r3
   13bdc:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13be0:	69e3      	ldr	r3, [r4, #28]
   13be2:	2b00      	cmp	r3, #0
   13be4:	d1be      	bne.n	13b64 <hci_num_completed_packets+0xc>
	return list->head;
   13be6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13be8:	2b00      	cmp	r3, #0
   13bea:	d0c8      	beq.n	13b7e <hci_num_completed_packets+0x26>
	return node->next;
   13bec:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   13bee:	6161      	str	r1, [r4, #20]
	return list->tail;
   13bf0:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13bf2:	4298      	cmp	r0, r3
   13bf4:	d1c3      	bne.n	13b7e <hci_num_completed_packets+0x26>
   13bf6:	e7c1      	b.n	13b7c <hci_num_completed_packets+0x24>
   13bf8:	4b1c      	ldr	r3, [pc, #112]	; (13c6c <hci_num_completed_packets+0x114>)
   13bfa:	4a1d      	ldr	r2, [pc, #116]	; (13c70 <hci_num_completed_packets+0x118>)
   13bfc:	1a9b      	subs	r3, r3, r2
   13bfe:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   13c00:	2201      	movs	r2, #1
   13c02:	f362 0902 	bfi	r9, r2, #0, #3
   13c06:	f36f 09c5 	bfc	r9, #3, #3
   13c0a:	f363 198f 	bfi	r9, r3, #6, #10
   13c0e:	4649      	mov	r1, r9
   13c10:	4818      	ldr	r0, [pc, #96]	; (13c74 <hci_num_completed_packets+0x11c>)
   13c12:	f7fd f9db 	bl	10fcc <log_0>
		bt_conn_unref(conn);
   13c16:	4620      	mov	r0, r4
   13c18:	f00e f934 	bl	21e84 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   13c1c:	3701      	adds	r7, #1
   13c1e:	f898 3000 	ldrb.w	r3, [r8]
   13c22:	429f      	cmp	r7, r3
   13c24:	da1f      	bge.n	13c66 <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13c26:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   13c2a:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13c2e:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   13c32:	4628      	mov	r0, r5
   13c34:	f002 fb9c 	bl	16370 <bt_conn_lookup_handle>
		if (!conn) {
   13c38:	4604      	mov	r4, r0
   13c3a:	2800      	cmp	r0, #0
   13c3c:	d1c5      	bne.n	13bca <hci_num_completed_packets+0x72>
   13c3e:	4b0b      	ldr	r3, [pc, #44]	; (13c6c <hci_num_completed_packets+0x114>)
   13c40:	4a0b      	ldr	r2, [pc, #44]	; (13c70 <hci_num_completed_packets+0x118>)
   13c42:	1a9b      	subs	r3, r3, r2
   13c44:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   13c46:	2201      	movs	r2, #1
   13c48:	f362 0a02 	bfi	sl, r2, #0, #3
   13c4c:	f36f 0ac5 	bfc	sl, #3, #3
   13c50:	f363 1a8f 	bfi	sl, r3, #6, #10
   13c54:	4652      	mov	r2, sl
   13c56:	4629      	mov	r1, r5
   13c58:	4807      	ldr	r0, [pc, #28]	; (13c78 <hci_num_completed_packets+0x120>)
   13c5a:	f7fd f901 	bl	10e60 <log_1>
			continue;
   13c5e:	e7dd      	b.n	13c1c <hci_num_completed_packets+0xc4>
	list->tail = node;
   13c60:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   13c62:	6223      	str	r3, [r4, #32]
}
   13c64:	e7a3      	b.n	13bae <hci_num_completed_packets+0x56>
}
   13c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c6a:	bf00      	nop
   13c6c:	00025484 	.word	0x00025484
   13c70:	0002545c 	.word	0x0002545c
   13c74:	000264e0 	.word	0x000264e0
   13c78:	000264c4 	.word	0x000264c4

00013c7c <hci_cmd_done>:
{
   13c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c7e:	b085      	sub	sp, #20
   13c80:	4605      	mov	r5, r0
   13c82:	460e      	mov	r6, r1
   13c84:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13c86:	7990      	ldrb	r0, [r2, #6]
   13c88:	f005 f906 	bl	18e98 <net_buf_pool_get>
   13c8c:	4b50      	ldr	r3, [pc, #320]	; (13dd0 <hci_cmd_done+0x154>)
   13c8e:	4283      	cmp	r3, r0
   13c90:	d01c      	beq.n	13ccc <hci_cmd_done+0x50>
   13c92:	4b50      	ldr	r3, [pc, #320]	; (13dd4 <hci_cmd_done+0x158>)
   13c94:	4a50      	ldr	r2, [pc, #320]	; (13dd8 <hci_cmd_done+0x15c>)
   13c96:	1a9b      	subs	r3, r3, r2
   13c98:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   13c9a:	f04f 0600 	mov.w	r6, #0
   13c9e:	2202      	movs	r2, #2
   13ca0:	f362 0602 	bfi	r6, r2, #0, #3
   13ca4:	f36f 06c5 	bfc	r6, #3, #3
   13ca8:	f363 168f 	bfi	r6, r3, #6, #10
   13cac:	9500      	str	r5, [sp, #0]
   13cae:	79a0      	ldrb	r0, [r4, #6]
   13cb0:	9001      	str	r0, [sp, #4]
   13cb2:	f005 f8f1 	bl	18e98 <net_buf_pool_get>
   13cb6:	9002      	str	r0, [sp, #8]
   13cb8:	4b45      	ldr	r3, [pc, #276]	; (13dd0 <hci_cmd_done+0x154>)
   13cba:	9303      	str	r3, [sp, #12]
   13cbc:	4633      	mov	r3, r6
   13cbe:	2204      	movs	r2, #4
   13cc0:	4669      	mov	r1, sp
   13cc2:	4846      	ldr	r0, [pc, #280]	; (13ddc <hci_cmd_done+0x160>)
   13cc4:	f7fd f93e 	bl	10f44 <log_n>
}
   13cc8:	b005      	add	sp, #20
   13cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cmd(buf)->opcode != opcode) {
   13ccc:	4620      	mov	r0, r4
   13cce:	f005 f8eb 	bl	18ea8 <net_buf_id>
   13cd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13cd6:	4b42      	ldr	r3, [pc, #264]	; (13de0 <hci_cmd_done+0x164>)
   13cd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13cdc:	8843      	ldrh	r3, [r0, #2]
   13cde:	42ab      	cmp	r3, r5
   13ce0:	d129      	bne.n	13d36 <hci_cmd_done+0xba>
	if (cmd(buf)->state && !status) {
   13ce2:	4620      	mov	r0, r4
   13ce4:	f005 f8e0 	bl	18ea8 <net_buf_id>
   13ce8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13cec:	4b3c      	ldr	r3, [pc, #240]	; (13de0 <hci_cmd_done+0x164>)
   13cee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13cf2:	6843      	ldr	r3, [r0, #4]
   13cf4:	b10b      	cbz	r3, 13cfa <hci_cmd_done+0x7e>
   13cf6:	2e00      	cmp	r6, #0
   13cf8:	d039      	beq.n	13d6e <hci_cmd_done+0xf2>
	if (cmd(buf)->sync) {
   13cfa:	4620      	mov	r0, r4
   13cfc:	f005 f8d4 	bl	18ea8 <net_buf_id>
   13d00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d04:	4b36      	ldr	r3, [pc, #216]	; (13de0 <hci_cmd_done+0x164>)
   13d06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d0a:	6883      	ldr	r3, [r0, #8]
   13d0c:	2b00      	cmp	r3, #0
   13d0e:	d0db      	beq.n	13cc8 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   13d10:	4620      	mov	r0, r4
   13d12:	f005 f8c9 	bl	18ea8 <net_buf_id>
   13d16:	4d32      	ldr	r5, [pc, #200]	; (13de0 <hci_cmd_done+0x164>)
   13d18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d1c:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   13d20:	4620      	mov	r0, r4
   13d22:	f005 f8c1 	bl	18ea8 <net_buf_id>
   13d26:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d2a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   13d2e:	68a8      	ldr	r0, [r5, #8]
   13d30:	f007 fef6 	bl	1bb20 <z_impl_k_sem_give>
}
   13d34:	e7c8      	b.n	13cc8 <hci_cmd_done+0x4c>
   13d36:	4b27      	ldr	r3, [pc, #156]	; (13dd4 <hci_cmd_done+0x158>)
   13d38:	4a27      	ldr	r2, [pc, #156]	; (13dd8 <hci_cmd_done+0x15c>)
   13d3a:	1a9b      	subs	r3, r3, r2
   13d3c:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   13d3e:	f04f 0700 	mov.w	r7, #0
   13d42:	2202      	movs	r2, #2
   13d44:	f362 0702 	bfi	r7, r2, #0, #3
   13d48:	f36f 07c5 	bfc	r7, #3, #3
   13d4c:	f363 178f 	bfi	r7, r3, #6, #10
   13d50:	4620      	mov	r0, r4
   13d52:	f005 f8a9 	bl	18ea8 <net_buf_id>
   13d56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d5a:	4b21      	ldr	r3, [pc, #132]	; (13de0 <hci_cmd_done+0x164>)
   13d5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d60:	463b      	mov	r3, r7
   13d62:	8842      	ldrh	r2, [r0, #2]
   13d64:	4629      	mov	r1, r5
   13d66:	481f      	ldr	r0, [pc, #124]	; (13de4 <hci_cmd_done+0x168>)
   13d68:	f7fd f8b0 	bl	10ecc <log_2>
   13d6c:	e7b9      	b.n	13ce2 <hci_cmd_done+0x66>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13d6e:	4620      	mov	r0, r4
   13d70:	f005 f89a 	bl	18ea8 <net_buf_id>
   13d74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13d78:	4b19      	ldr	r3, [pc, #100]	; (13de0 <hci_cmd_done+0x164>)
   13d7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13d7e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   13d80:	6813      	ldr	r3, [r2, #0]
   13d82:	6851      	ldr	r1, [r2, #4]
   13d84:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d86:	f001 051f 	and.w	r5, r1, #31
   13d8a:	2201      	movs	r2, #1
   13d8c:	40aa      	lsls	r2, r5

	if (val) {
   13d8e:	b170      	cbz	r0, 13dae <hci_cmd_done+0x132>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13d90:	0949      	lsrs	r1, r1, #5
   13d92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13d96:	f3bf 8f5b 	dmb	ish
   13d9a:	e853 1f00 	ldrex	r1, [r3]
   13d9e:	4311      	orrs	r1, r2
   13da0:	e843 1000 	strex	r0, r1, [r3]
   13da4:	2800      	cmp	r0, #0
   13da6:	d1f8      	bne.n	13d9a <hci_cmd_done+0x11e>
   13da8:	f3bf 8f5b 	dmb	ish
   13dac:	e7a5      	b.n	13cfa <hci_cmd_done+0x7e>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13dae:	0949      	lsrs	r1, r1, #5
   13db0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13db4:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13db6:	f3bf 8f5b 	dmb	ish
   13dba:	e853 1f00 	ldrex	r1, [r3]
   13dbe:	4011      	ands	r1, r2
   13dc0:	e843 1000 	strex	r0, r1, [r3]
   13dc4:	2800      	cmp	r0, #0
   13dc6:	d1f8      	bne.n	13dba <hci_cmd_done+0x13e>
   13dc8:	f3bf 8f5b 	dmb	ish
	}
}
   13dcc:	e795      	b.n	13cfa <hci_cmd_done+0x7e>
   13dce:	bf00      	nop
   13dd0:	20033cc8 	.word	0x20033cc8
   13dd4:	00025484 	.word	0x00025484
   13dd8:	0002545c 	.word	0x0002545c
   13ddc:	000264f8 	.word	0x000264f8
   13de0:	20036978 	.word	0x20036978
   13de4:	00026530 	.word	0x00026530

00013de8 <hci_cmd_status>:
{
   13de8:	b538      	push	{r3, r4, r5, lr}
   13dea:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   13dec:	2104      	movs	r1, #4
   13dee:	3008      	adds	r0, #8
   13df0:	f00f fd05 	bl	237fe <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13df4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13df6:	4622      	mov	r2, r4
   13df8:	7801      	ldrb	r1, [r0, #0]
   13dfa:	8840      	ldrh	r0, [r0, #2]
   13dfc:	f7ff ff3e 	bl	13c7c <hci_cmd_done>
	if (ncmd) {
   13e00:	b905      	cbnz	r5, 13e04 <hci_cmd_status+0x1c>
}
   13e02:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   13e04:	4801      	ldr	r0, [pc, #4]	; (13e0c <hci_cmd_status+0x24>)
   13e06:	f007 fe8b 	bl	1bb20 <z_impl_k_sem_give>
   13e0a:	e7fa      	b.n	13e02 <hci_cmd_status+0x1a>
   13e0c:	200003a0 	.word	0x200003a0

00013e10 <hci_cmd_complete>:
{
   13e10:	b538      	push	{r3, r4, r5, lr}
   13e12:	4604      	mov	r4, r0
   13e14:	2103      	movs	r1, #3
   13e16:	3008      	adds	r0, #8
   13e18:	f00f fcf1 	bl	237fe <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13e1c:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   13e1e:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   13e20:	4622      	mov	r2, r4
   13e22:	7819      	ldrb	r1, [r3, #0]
   13e24:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13e28:	f7ff ff28 	bl	13c7c <hci_cmd_done>
	if (ncmd) {
   13e2c:	b905      	cbnz	r5, 13e30 <hci_cmd_complete+0x20>
}
   13e2e:	bd38      	pop	{r3, r4, r5, pc}
   13e30:	4801      	ldr	r0, [pc, #4]	; (13e38 <hci_cmd_complete+0x28>)
   13e32:	f007 fe75 	bl	1bb20 <z_impl_k_sem_give>
   13e36:	e7fa      	b.n	13e2e <hci_cmd_complete+0x1e>
   13e38:	200003a0 	.word	0x200003a0

00013e3c <hci_hardware_error>:
{
   13e3c:	b508      	push	{r3, lr}
   13e3e:	2101      	movs	r1, #1
   13e40:	3008      	adds	r0, #8
   13e42:	f00f fcdc 	bl	237fe <net_buf_simple_pull_mem>
   13e46:	4b09      	ldr	r3, [pc, #36]	; (13e6c <hci_hardware_error+0x30>)
   13e48:	4a09      	ldr	r2, [pc, #36]	; (13e70 <hci_hardware_error+0x34>)
   13e4a:	1a9b      	subs	r3, r3, r2
   13e4c:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13e4e:	f04f 0200 	mov.w	r2, #0
   13e52:	2101      	movs	r1, #1
   13e54:	f361 0202 	bfi	r2, r1, #0, #3
   13e58:	f36f 02c5 	bfc	r2, #3, #3
   13e5c:	f363 128f 	bfi	r2, r3, #6, #10
   13e60:	7801      	ldrb	r1, [r0, #0]
   13e62:	4804      	ldr	r0, [pc, #16]	; (13e74 <hci_hardware_error+0x38>)
   13e64:	f7fc fffc 	bl	10e60 <log_1>
}
   13e68:	bd08      	pop	{r3, pc}
   13e6a:	bf00      	nop
   13e6c:	00025484 	.word	0x00025484
   13e70:	0002545c 	.word	0x0002545c
   13e74:	00026564 	.word	0x00026564

00013e78 <hci_vendor_event>:
{
   13e78:	b510      	push	{r4, lr}
   13e7a:	4b0c      	ldr	r3, [pc, #48]	; (13eac <hci_vendor_event+0x34>)
   13e7c:	4a0c      	ldr	r2, [pc, #48]	; (13eb0 <hci_vendor_event+0x38>)
   13e7e:	1a9b      	subs	r3, r3, r2
   13e80:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   13e82:	f04f 0400 	mov.w	r4, #0
   13e86:	2202      	movs	r2, #2
   13e88:	f362 0402 	bfi	r4, r2, #0, #3
   13e8c:	f36f 04c5 	bfc	r4, #3, #3
   13e90:	f363 148f 	bfi	r4, r3, #6, #10
   13e94:	8981      	ldrh	r1, [r0, #12]
   13e96:	6880      	ldr	r0, [r0, #8]
   13e98:	f7ff fba8 	bl	135ec <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   13e9c:	f7fc fe66 	bl	10b6c <z_log_strdup>
   13ea0:	4601      	mov	r1, r0
   13ea2:	4622      	mov	r2, r4
   13ea4:	4803      	ldr	r0, [pc, #12]	; (13eb4 <hci_vendor_event+0x3c>)
   13ea6:	f7fc ffdb 	bl	10e60 <log_1>
}
   13eaa:	bd10      	pop	{r4, pc}
   13eac:	00025484 	.word	0x00025484
   13eb0:	0002545c 	.word	0x0002545c
   13eb4:	00026588 	.word	0x00026588

00013eb8 <bt_dev_show_info>:
{
   13eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ebc:	b086      	sub	sp, #24
   13ebe:	4b3b      	ldr	r3, [pc, #236]	; (13fac <bt_dev_show_info+0xf4>)
   13ec0:	4a3b      	ldr	r2, [pc, #236]	; (13fb0 <bt_dev_show_info+0xf8>)
   13ec2:	1a9b      	subs	r3, r3, r2
   13ec4:	08db      	lsrs	r3, r3, #3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13ec6:	f04f 0400 	mov.w	r4, #0
   13eca:	2203      	movs	r2, #3
   13ecc:	f362 0402 	bfi	r4, r2, #0, #3
   13ed0:	f36f 04c5 	bfc	r4, #3, #3
   13ed4:	f363 148f 	bfi	r4, r3, #6, #10
   13ed8:	4b36      	ldr	r3, [pc, #216]	; (13fb4 <bt_dev_show_info+0xfc>)
   13eda:	79db      	ldrb	r3, [r3, #7]
   13edc:	2b01      	cmp	r3, #1
   13ede:	d92b      	bls.n	13f38 <bt_dev_show_info+0x80>
   13ee0:	4e35      	ldr	r6, [pc, #212]	; (13fb8 <bt_dev_show_info+0x100>)
   13ee2:	4834      	ldr	r0, [pc, #208]	; (13fb4 <bt_dev_show_info+0xfc>)
   13ee4:	f7ff fbaa 	bl	1363c <bt_addr_le_str_real>
   13ee8:	f7fc fe40 	bl	10b6c <z_log_strdup>
   13eec:	4602      	mov	r2, r0
   13eee:	4623      	mov	r3, r4
   13ef0:	4631      	mov	r1, r6
   13ef2:	4832      	ldr	r0, [pc, #200]	; (13fbc <bt_dev_show_info+0x104>)
   13ef4:	f7fc ffea 	bl	10ecc <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   13ef8:	2401      	movs	r4, #1
   13efa:	4b2e      	ldr	r3, [pc, #184]	; (13fb4 <bt_dev_show_info+0xfc>)
   13efc:	79db      	ldrb	r3, [r3, #7]
   13efe:	42a3      	cmp	r3, r4
   13f00:	dd1c      	ble.n	13f3c <bt_dev_show_info+0x84>
   13f02:	4b2a      	ldr	r3, [pc, #168]	; (13fac <bt_dev_show_info+0xf4>)
   13f04:	4a2a      	ldr	r2, [pc, #168]	; (13fb0 <bt_dev_show_info+0xf8>)
   13f06:	1a9b      	subs	r3, r3, r2
   13f08:	08db      	lsrs	r3, r3, #3
		BT_INFO("Identity[%d]: %s",
   13f0a:	2203      	movs	r2, #3
   13f0c:	f362 0502 	bfi	r5, r2, #0, #3
   13f10:	f36f 05c5 	bfc	r5, #3, #3
   13f14:	f363 158f 	bfi	r5, r3, #6, #10
   13f18:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   13f1c:	4825      	ldr	r0, [pc, #148]	; (13fb4 <bt_dev_show_info+0xfc>)
   13f1e:	4418      	add	r0, r3
   13f20:	f7ff fb8c 	bl	1363c <bt_addr_le_str_real>
   13f24:	f7fc fe22 	bl	10b6c <z_log_strdup>
   13f28:	4602      	mov	r2, r0
   13f2a:	462b      	mov	r3, r5
   13f2c:	4621      	mov	r1, r4
   13f2e:	4824      	ldr	r0, [pc, #144]	; (13fc0 <bt_dev_show_info+0x108>)
   13f30:	f7fc ffcc 	bl	10ecc <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   13f34:	3401      	adds	r4, #1
   13f36:	e7e0      	b.n	13efa <bt_dev_show_info+0x42>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13f38:	4e22      	ldr	r6, [pc, #136]	; (13fc4 <bt_dev_show_info+0x10c>)
   13f3a:	e7d2      	b.n	13ee2 <bt_dev_show_info+0x2a>
   13f3c:	4c1b      	ldr	r4, [pc, #108]	; (13fac <bt_dev_show_info+0xf4>)
   13f3e:	4b1c      	ldr	r3, [pc, #112]	; (13fb0 <bt_dev_show_info+0xf8>)
   13f40:	1ae4      	subs	r4, r4, r3
   13f42:	08e4      	lsrs	r4, r4, #3
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   13f44:	2703      	movs	r7, #3
   13f46:	f04f 0500 	mov.w	r5, #0
   13f4a:	f367 0502 	bfi	r5, r7, #0, #3
   13f4e:	f36f 05c5 	bfc	r5, #3, #3
   13f52:	f364 158f 	bfi	r5, r4, #6, #10
   13f56:	4e17      	ldr	r6, [pc, #92]	; (13fb4 <bt_dev_show_info+0xfc>)
   13f58:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   13f5c:	4640      	mov	r0, r8
   13f5e:	f7ff fcab 	bl	138b8 <ver_str>
   13f62:	9002      	str	r0, [sp, #8]
   13f64:	f8cd 800c 	str.w	r8, [sp, #12]
   13f68:	8ef3      	ldrh	r3, [r6, #54]	; 0x36
   13f6a:	9304      	str	r3, [sp, #16]
   13f6c:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   13f6e:	9305      	str	r3, [sp, #20]
   13f70:	462b      	mov	r3, r5
   13f72:	2204      	movs	r2, #4
   13f74:	a902      	add	r1, sp, #8
   13f76:	4814      	ldr	r0, [pc, #80]	; (13fc8 <bt_dev_show_info+0x110>)
   13f78:	f7fc ffe4 	bl	10f44 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   13f7c:	f04f 0500 	mov.w	r5, #0
   13f80:	f367 0502 	bfi	r5, r7, #0, #3
   13f84:	f36f 05c5 	bfc	r5, #3, #3
   13f88:	f364 158f 	bfi	r5, r4, #6, #10
   13f8c:	f896 4035 	ldrb.w	r4, [r6, #53]	; 0x35
   13f90:	4620      	mov	r0, r4
   13f92:	f7ff fc91 	bl	138b8 <ver_str>
   13f96:	4601      	mov	r1, r0
   13f98:	f8ad 5000 	strh.w	r5, [sp]
   13f9c:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   13f9e:	4622      	mov	r2, r4
   13fa0:	480a      	ldr	r0, [pc, #40]	; (13fcc <bt_dev_show_info+0x114>)
   13fa2:	f7fc ff1f 	bl	10de4 <log_3>
}
   13fa6:	b006      	add	sp, #24
   13fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13fac:	00025484 	.word	0x00025484
   13fb0:	0002545c 	.word	0x0002545c
   13fb4:	200002b8 	.word	0x200002b8
   13fb8:	000265ac 	.word	0x000265ac
   13fbc:	000265b0 	.word	0x000265b0
   13fc0:	000265c0 	.word	0x000265c0
   13fc4:	00025988 	.word	0x00025988
   13fc8:	000265d4 	.word	0x000265d4
   13fcc:	00026614 	.word	0x00026614

00013fd0 <hci_acl>:
{
   13fd0:	b570      	push	{r4, r5, r6, lr}
   13fd2:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13fd4:	8983      	ldrh	r3, [r0, #12]
   13fd6:	2b03      	cmp	r3, #3
   13fd8:	d923      	bls.n	14022 <hci_acl+0x52>
   13fda:	2104      	movs	r1, #4
   13fdc:	f104 0008 	add.w	r0, r4, #8
   13fe0:	f00f fc0d 	bl	237fe <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   13fe4:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13fe6:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   13fe8:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   13fea:	f3c0 000b 	ubfx	r0, r0, #0, #12
   13fee:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13ff0:	23ff      	movs	r3, #255	; 0xff
   13ff2:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   13ff4:	89a1      	ldrh	r1, [r4, #12]
   13ff6:	4291      	cmp	r1, r2
   13ff8:	d021      	beq.n	1403e <hci_acl+0x6e>
   13ffa:	4823      	ldr	r0, [pc, #140]	; (14088 <hci_acl+0xb8>)
   13ffc:	4b23      	ldr	r3, [pc, #140]	; (1408c <hci_acl+0xbc>)
   13ffe:	1ac0      	subs	r0, r0, r3
   14000:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14002:	f04f 0300 	mov.w	r3, #0
   14006:	2501      	movs	r5, #1
   14008:	f365 0302 	bfi	r3, r5, #0, #3
   1400c:	f36f 03c5 	bfc	r3, #3, #3
   14010:	f360 138f 	bfi	r3, r0, #6, #10
   14014:	481e      	ldr	r0, [pc, #120]	; (14090 <hci_acl+0xc0>)
   14016:	f7fc ff59 	bl	10ecc <log_2>
		net_buf_unref(buf);
   1401a:	4620      	mov	r0, r4
   1401c:	f00f fb7d 	bl	2371a <net_buf_unref>
}
   14020:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14022:	f240 1377 	movw	r3, #375	; 0x177
   14026:	4a1b      	ldr	r2, [pc, #108]	; (14094 <hci_acl+0xc4>)
   14028:	491b      	ldr	r1, [pc, #108]	; (14098 <hci_acl+0xc8>)
   1402a:	481c      	ldr	r0, [pc, #112]	; (1409c <hci_acl+0xcc>)
   1402c:	f00b fdfe 	bl	1fc2c <printk>
   14030:	4040      	eors	r0, r0
   14032:	f380 8811 	msr	BASEPRI, r0
   14036:	f04f 0003 	mov.w	r0, #3
   1403a:	df02      	svc	2
   1403c:	e7cd      	b.n	13fda <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1403e:	f002 f997 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   14042:	4605      	mov	r5, r0
   14044:	b158      	cbz	r0, 1405e <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   14046:	f002 fa99 	bl	1657c <bt_conn_index>
   1404a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   1404c:	4632      	mov	r2, r6
   1404e:	4621      	mov	r1, r4
   14050:	4628      	mov	r0, r5
   14052:	f00d fee4 	bl	21e1e <bt_conn_recv>
	bt_conn_unref(conn);
   14056:	4628      	mov	r0, r5
   14058:	f00d ff14 	bl	21e84 <bt_conn_unref>
   1405c:	e7e0      	b.n	14020 <hci_acl+0x50>
   1405e:	4b0a      	ldr	r3, [pc, #40]	; (14088 <hci_acl+0xb8>)
   14060:	4a0a      	ldr	r2, [pc, #40]	; (1408c <hci_acl+0xbc>)
   14062:	1a9b      	subs	r3, r3, r2
   14064:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14066:	f04f 0200 	mov.w	r2, #0
   1406a:	2101      	movs	r1, #1
   1406c:	f361 0202 	bfi	r2, r1, #0, #3
   14070:	f36f 02c5 	bfc	r2, #3, #3
   14074:	f363 128f 	bfi	r2, r3, #6, #10
   14078:	8ae1      	ldrh	r1, [r4, #22]
   1407a:	4809      	ldr	r0, [pc, #36]	; (140a0 <hci_acl+0xd0>)
   1407c:	f7fc fef0 	bl	10e60 <log_1>
		net_buf_unref(buf);
   14080:	4620      	mov	r0, r4
   14082:	f00f fb4a 	bl	2371a <net_buf_unref>
		return;
   14086:	e7cb      	b.n	14020 <hci_acl+0x50>
   14088:	00025484 	.word	0x00025484
   1408c:	0002545c 	.word	0x0002545c
   14090:	000266ac 	.word	0x000266ac
   14094:	0002663c 	.word	0x0002663c
   14098:	00026670 	.word	0x00026670
   1409c:	0002668c 	.word	0x0002668c
   140a0:	000266d0 	.word	0x000266d0

000140a4 <le_data_len_change>:
{
   140a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   140a8:	6883      	ldr	r3, [r0, #8]
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
   140aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
   140ae:	88df      	ldrh	r7, [r3, #6]
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
   140b0:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
   140b4:	891e      	ldrh	r6, [r3, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   140b6:	881d      	ldrh	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   140b8:	4628      	mov	r0, r5
   140ba:	f002 f959 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   140be:	b178      	cbz	r0, 140e0 <le_data_len_change+0x3c>
   140c0:	4604      	mov	r4, r0
	conn->le.data_len.tx_max_len = max_tx_octets;
   140c2:	f8a0 90ba 	strh.w	r9, [r0, #186]	; 0xba
	conn->le.data_len.tx_max_time = max_tx_time;
   140c6:	f8a0 80bc 	strh.w	r8, [r0, #188]	; 0xbc
	conn->le.data_len.rx_max_len = max_rx_octets;
   140ca:	f8a0 70be 	strh.w	r7, [r0, #190]	; 0xbe
	conn->le.data_len.rx_max_time = max_rx_time;
   140ce:	f8a0 60c0 	strh.w	r6, [r0, #192]	; 0xc0
	notify_le_data_len_updated(conn);
   140d2:	f002 fa9b 	bl	1660c <notify_le_data_len_updated>
	bt_conn_unref(conn);
   140d6:	4620      	mov	r0, r4
   140d8:	f00d fed4 	bl	21e84 <bt_conn_unref>
}
   140dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   140e0:	4b08      	ldr	r3, [pc, #32]	; (14104 <le_data_len_change+0x60>)
   140e2:	4a09      	ldr	r2, [pc, #36]	; (14108 <le_data_len_change+0x64>)
   140e4:	1a9b      	subs	r3, r3, r2
   140e6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   140e8:	f04f 0200 	mov.w	r2, #0
   140ec:	2101      	movs	r1, #1
   140ee:	f361 0202 	bfi	r2, r1, #0, #3
   140f2:	f36f 02c5 	bfc	r2, #3, #3
   140f6:	f363 128f 	bfi	r2, r3, #6, #10
   140fa:	4629      	mov	r1, r5
   140fc:	4803      	ldr	r0, [pc, #12]	; (1410c <le_data_len_change+0x68>)
   140fe:	f7fc feaf 	bl	10e60 <log_1>
		return;
   14102:	e7eb      	b.n	140dc <le_data_len_change+0x38>
   14104:	00025484 	.word	0x00025484
   14108:	0002545c 	.word	0x0002545c
   1410c:	000266f4 	.word	0x000266f4

00014110 <le_conn_update_complete>:
{
   14110:	b570      	push	{r4, r5, r6, lr}
   14112:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   14114:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14116:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   1411a:	4630      	mov	r0, r6
   1411c:	f002 f928 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   14120:	b148      	cbz	r0, 14136 <le_conn_update_complete+0x26>
   14122:	4605      	mov	r5, r0
	if (!evt->status) {
   14124:	7823      	ldrb	r3, [r4, #0]
   14126:	b1c3      	cbz	r3, 1415a <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   14128:	2b1a      	cmp	r3, #26
   1412a:	d025      	beq.n	14178 <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   1412c:	4628      	mov	r0, r5
   1412e:	f00d fea9 	bl	21e84 <bt_conn_unref>
}
   14132:	b002      	add	sp, #8
   14134:	bd70      	pop	{r4, r5, r6, pc}
   14136:	4b24      	ldr	r3, [pc, #144]	; (141c8 <le_conn_update_complete+0xb8>)
   14138:	4a24      	ldr	r2, [pc, #144]	; (141cc <le_conn_update_complete+0xbc>)
   1413a:	1a9b      	subs	r3, r3, r2
   1413c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1413e:	f04f 0200 	mov.w	r2, #0
   14142:	2101      	movs	r1, #1
   14144:	f361 0202 	bfi	r2, r1, #0, #3
   14148:	f36f 02c5 	bfc	r2, #3, #3
   1414c:	f363 128f 	bfi	r2, r3, #6, #10
   14150:	4631      	mov	r1, r6
   14152:	481f      	ldr	r0, [pc, #124]	; (141d0 <le_conn_update_complete+0xc0>)
   14154:	f7fc fe84 	bl	10e60 <log_1>
		return;
   14158:	e7eb      	b.n	14132 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1415a:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1415e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   14162:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14166:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1416a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1416e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   14172:	f002 fa0f 	bl	16594 <notify_le_param_updated>
   14176:	e7d9      	b.n	1412c <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   14178:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1417a:	2b01      	cmp	r3, #1
   1417c:	d1d6      	bne.n	1412c <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   1417e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14180:	f3bf 8f5b 	dmb	ish
   14184:	e853 2f00 	ldrex	r2, [r3]
   14188:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1418c:	e843 1000 	strex	r0, r1, [r3]
   14190:	2800      	cmp	r0, #0
   14192:	d1f7      	bne.n	14184 <le_conn_update_complete+0x74>
   14194:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
   14198:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1419c:	d1c6      	bne.n	1412c <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   1419e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   141a2:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   141a6:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   141aa:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   141ae:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   141b2:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   141b6:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   141ba:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   141be:	4669      	mov	r1, sp
   141c0:	4628      	mov	r0, r5
   141c2:	f00e f800 	bl	221c6 <bt_l2cap_update_conn_param>
   141c6:	e7b1      	b.n	1412c <le_conn_update_complete+0x1c>
   141c8:	00025484 	.word	0x00025484
   141cc:	0002545c 	.word	0x0002545c
   141d0:	000266f4 	.word	0x000266f4

000141d4 <hci_le_meta_event>:
{
   141d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141d6:	b083      	sub	sp, #12
   141d8:	4604      	mov	r4, r0
   141da:	2101      	movs	r1, #1
   141dc:	3008      	adds	r0, #8
   141de:	f00f fb0e 	bl	237fe <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   141e2:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   141e4:	2300      	movs	r3, #0
   141e6:	2b06      	cmp	r3, #6
   141e8:	d823      	bhi.n	14232 <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   141ea:	4a20      	ldr	r2, [pc, #128]	; (1426c <hci_le_meta_event+0x98>)
   141ec:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   141f0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   141f4:	4295      	cmp	r5, r2
   141f6:	d108      	bne.n	1420a <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   141f8:	89a1      	ldrh	r1, [r4, #12]
   141fa:	7843      	ldrb	r3, [r0, #1]
   141fc:	4299      	cmp	r1, r3
   141fe:	d306      	bcc.n	1420e <hci_le_meta_event+0x3a>
		handler->handler(buf);
   14200:	6843      	ldr	r3, [r0, #4]
   14202:	4620      	mov	r0, r4
   14204:	4798      	blx	r3
}
   14206:	b003      	add	sp, #12
   14208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   1420a:	3301      	adds	r3, #1
   1420c:	e7eb      	b.n	141e6 <hci_le_meta_event+0x12>
   1420e:	4a18      	ldr	r2, [pc, #96]	; (14270 <hci_le_meta_event+0x9c>)
   14210:	4b18      	ldr	r3, [pc, #96]	; (14274 <hci_le_meta_event+0xa0>)
   14212:	1ad2      	subs	r2, r2, r3
   14214:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   14216:	f04f 0300 	mov.w	r3, #0
   1421a:	2001      	movs	r0, #1
   1421c:	f360 0302 	bfi	r3, r0, #0, #3
   14220:	f36f 03c5 	bfc	r3, #3, #3
   14224:	f362 138f 	bfi	r3, r2, #6, #10
   14228:	462a      	mov	r2, r5
   1422a:	4813      	ldr	r0, [pc, #76]	; (14278 <hci_le_meta_event+0xa4>)
   1422c:	f7fc fe4e 	bl	10ecc <log_2>
			return;
   14230:	e7e9      	b.n	14206 <hci_le_meta_event+0x32>
   14232:	4b0f      	ldr	r3, [pc, #60]	; (14270 <hci_le_meta_event+0x9c>)
   14234:	4a0f      	ldr	r2, [pc, #60]	; (14274 <hci_le_meta_event+0xa0>)
   14236:	1a9b      	subs	r3, r3, r2
   14238:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1423a:	f04f 0600 	mov.w	r6, #0
   1423e:	2202      	movs	r2, #2
   14240:	f362 0602 	bfi	r6, r2, #0, #3
   14244:	f36f 06c5 	bfc	r6, #3, #3
   14248:	f363 168f 	bfi	r6, r3, #6, #10
   1424c:	89a7      	ldrh	r7, [r4, #12]
   1424e:	4639      	mov	r1, r7
   14250:	68a0      	ldr	r0, [r4, #8]
   14252:	f7ff f9cb 	bl	135ec <bt_hex_real>
   14256:	f7fc fc89 	bl	10b6c <z_log_strdup>
   1425a:	4603      	mov	r3, r0
   1425c:	f8ad 6000 	strh.w	r6, [sp]
   14260:	463a      	mov	r2, r7
   14262:	4629      	mov	r1, r5
   14264:	4805      	ldr	r0, [pc, #20]	; (1427c <hci_le_meta_event+0xa8>)
   14266:	f7fc fdbd 	bl	10de4 <log_3>
}
   1426a:	e7cc      	b.n	14206 <hci_le_meta_event+0x32>
   1426c:	00026a20 	.word	0x00026a20
   14270:	00025484 	.word	0x00025484
   14274:	0002545c 	.word	0x0002545c
   14278:	00026718 	.word	0x00026718
   1427c:	0002673c 	.word	0x0002673c

00014280 <hci_event>:
{
   14280:	b5f0      	push	{r4, r5, r6, r7, lr}
   14282:	b083      	sub	sp, #12
   14284:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14286:	8983      	ldrh	r3, [r0, #12]
   14288:	2b01      	cmp	r3, #1
   1428a:	d916      	bls.n	142ba <hci_event+0x3a>
   1428c:	2102      	movs	r1, #2
   1428e:	f104 0008 	add.w	r0, r4, #8
   14292:	f00f fab4 	bl	237fe <net_buf_simple_pull_mem>
   14296:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14298:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1429a:	3b05      	subs	r3, #5
   1429c:	2b15      	cmp	r3, #21
   1429e:	d81c      	bhi.n	142da <hci_event+0x5a>
   142a0:	e8df f003 	tbb	[pc, r3]
   142a4:	1b1b1b19 	.word	0x1b1b1b19
   142a8:	1b1b1b1b 	.word	0x1b1b1b1b
   142ac:	1b36361b 	.word	0x1b36361b
   142b0:	1b361b1b 	.word	0x1b361b1b
   142b4:	1b1b1b1b 	.word	0x1b1b1b1b
   142b8:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   142ba:	f640 1303 	movw	r3, #2307	; 0x903
   142be:	4a35      	ldr	r2, [pc, #212]	; (14394 <hci_event+0x114>)
   142c0:	4935      	ldr	r1, [pc, #212]	; (14398 <hci_event+0x118>)
   142c2:	4836      	ldr	r0, [pc, #216]	; (1439c <hci_event+0x11c>)
   142c4:	f00b fcb2 	bl	1fc2c <printk>
   142c8:	4040      	eors	r0, r0
   142ca:	f380 8811 	msr	BASEPRI, r0
   142ce:	f04f 0003 	mov.w	r0, #3
   142d2:	df02      	svc	2
   142d4:	e7da      	b.n	1428c <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   142d6:	2303      	movs	r3, #3
   142d8:	e000      	b.n	142dc <hci_event+0x5c>
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   142da:	2302      	movs	r3, #2
   142dc:	f013 0f02 	tst.w	r3, #2
   142e0:	d018      	beq.n	14314 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   142e2:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   142e4:	2300      	movs	r3, #0
   142e6:	2b03      	cmp	r3, #3
   142e8:	d836      	bhi.n	14358 <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   142ea:	4a2d      	ldr	r2, [pc, #180]	; (143a0 <hci_event+0x120>)
   142ec:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   142f0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   142f4:	4295      	cmp	r5, r2
   142f6:	d11b      	bne.n	14330 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   142f8:	89a1      	ldrh	r1, [r4, #12]
   142fa:	7843      	ldrb	r3, [r0, #1]
   142fc:	4299      	cmp	r1, r3
   142fe:	d319      	bcc.n	14334 <hci_event+0xb4>
		handler->handler(buf);
   14300:	6843      	ldr	r3, [r0, #4]
   14302:	4620      	mov	r0, r4
   14304:	4798      	blx	r3
	net_buf_unref(buf);
   14306:	4620      	mov	r0, r4
   14308:	f00f fa07 	bl	2371a <net_buf_unref>
}
   1430c:	b003      	add	sp, #12
   1430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   14310:	2301      	movs	r3, #1
   14312:	e7e3      	b.n	142dc <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14314:	f640 1307 	movw	r3, #2311	; 0x907
   14318:	4a1e      	ldr	r2, [pc, #120]	; (14394 <hci_event+0x114>)
   1431a:	4922      	ldr	r1, [pc, #136]	; (143a4 <hci_event+0x124>)
   1431c:	481f      	ldr	r0, [pc, #124]	; (1439c <hci_event+0x11c>)
   1431e:	f00b fc85 	bl	1fc2c <printk>
   14322:	4040      	eors	r0, r0
   14324:	f380 8811 	msr	BASEPRI, r0
   14328:	f04f 0003 	mov.w	r0, #3
   1432c:	df02      	svc	2
   1432e:	e7d8      	b.n	142e2 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   14330:	3301      	adds	r3, #1
   14332:	e7d8      	b.n	142e6 <hci_event+0x66>
   14334:	4a1c      	ldr	r2, [pc, #112]	; (143a8 <hci_event+0x128>)
   14336:	4b1d      	ldr	r3, [pc, #116]	; (143ac <hci_event+0x12c>)
   14338:	1ad2      	subs	r2, r2, r3
   1433a:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1433c:	f04f 0300 	mov.w	r3, #0
   14340:	2001      	movs	r0, #1
   14342:	f360 0302 	bfi	r3, r0, #0, #3
   14346:	f36f 03c5 	bfc	r3, #3, #3
   1434a:	f362 138f 	bfi	r3, r2, #6, #10
   1434e:	462a      	mov	r2, r5
   14350:	4817      	ldr	r0, [pc, #92]	; (143b0 <hci_event+0x130>)
   14352:	f7fc fdbb 	bl	10ecc <log_2>
			return;
   14356:	e7d6      	b.n	14306 <hci_event+0x86>
   14358:	4b13      	ldr	r3, [pc, #76]	; (143a8 <hci_event+0x128>)
   1435a:	4a14      	ldr	r2, [pc, #80]	; (143ac <hci_event+0x12c>)
   1435c:	1a9b      	subs	r3, r3, r2
   1435e:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   14360:	f04f 0600 	mov.w	r6, #0
   14364:	2202      	movs	r2, #2
   14366:	f362 0602 	bfi	r6, r2, #0, #3
   1436a:	f36f 06c5 	bfc	r6, #3, #3
   1436e:	f363 168f 	bfi	r6, r3, #6, #10
   14372:	89a7      	ldrh	r7, [r4, #12]
   14374:	4639      	mov	r1, r7
   14376:	68a0      	ldr	r0, [r4, #8]
   14378:	f7ff f938 	bl	135ec <bt_hex_real>
   1437c:	f7fc fbf6 	bl	10b6c <z_log_strdup>
   14380:	4603      	mov	r3, r0
   14382:	f8ad 6000 	strh.w	r6, [sp]
   14386:	463a      	mov	r2, r7
   14388:	4629      	mov	r1, r5
   1438a:	480a      	ldr	r0, [pc, #40]	; (143b4 <hci_event+0x134>)
   1438c:	f7fc fd2a 	bl	10de4 <log_3>
   14390:	e7b9      	b.n	14306 <hci_event+0x86>
   14392:	bf00      	nop
   14394:	0002663c 	.word	0x0002663c
   14398:	00026670 	.word	0x00026670
   1439c:	0002668c 	.word	0x0002668c
   143a0:	00026a78 	.word	0x00026a78
   143a4:	00026760 	.word	0x00026760
   143a8:	00025484 	.word	0x00025484
   143ac:	0002545c 	.word	0x0002545c
   143b0:	00026718 	.word	0x00026718
   143b4:	0002673c 	.word	0x0002673c

000143b8 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   143b8:	b538      	push	{r3, r4, r5, lr}
   143ba:	e003      	b.n	143c4 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   143bc:	f7ff ff60 	bl	14280 <hci_event>
	z_impl_k_yield();
   143c0:	f008 f8cc 	bl	1c55c <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   143c4:	f04f 32ff 	mov.w	r2, #4294967295
   143c8:	f04f 33ff 	mov.w	r3, #4294967295
   143cc:	480f      	ldr	r0, [pc, #60]	; (1440c <hci_rx_thread+0x54>)
   143ce:	f00f f978 	bl	236c2 <net_buf_get>
   143d2:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   143d4:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   143d6:	2901      	cmp	r1, #1
   143d8:	d0f0      	beq.n	143bc <hci_rx_thread+0x4>
   143da:	2903      	cmp	r1, #3
   143dc:	d102      	bne.n	143e4 <hci_rx_thread+0x2c>
			hci_acl(buf);
   143de:	f7ff fdf7 	bl	13fd0 <hci_acl>
			break;
   143e2:	e7ed      	b.n	143c0 <hci_rx_thread+0x8>
   143e4:	4b0a      	ldr	r3, [pc, #40]	; (14410 <hci_rx_thread+0x58>)
   143e6:	4a0b      	ldr	r2, [pc, #44]	; (14414 <hci_rx_thread+0x5c>)
   143e8:	1a9b      	subs	r3, r3, r2
   143ea:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   143ec:	2201      	movs	r2, #1
   143ee:	f362 0502 	bfi	r5, r2, #0, #3
   143f2:	f36f 05c5 	bfc	r5, #3, #3
   143f6:	f363 158f 	bfi	r5, r3, #6, #10
   143fa:	462a      	mov	r2, r5
   143fc:	4806      	ldr	r0, [pc, #24]	; (14418 <hci_rx_thread+0x60>)
   143fe:	f7fc fd2f 	bl	10e60 <log_1>
			net_buf_unref(buf);
   14402:	4620      	mov	r0, r4
   14404:	f00f f989 	bl	2371a <net_buf_unref>
			break;
   14408:	e7da      	b.n	143c0 <hci_rx_thread+0x8>
   1440a:	bf00      	nop
   1440c:	200003bc 	.word	0x200003bc
   14410:	00025484 	.word	0x00025484
   14414:	0002545c 	.word	0x0002545c
   14418:	00026790 	.word	0x00026790

0001441c <bt_hci_cmd_state_set_init>:
{
   1441c:	b510      	push	{r4, lr}
   1441e:	460c      	mov	r4, r1
	state->target = target;
   14420:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   14422:	604b      	str	r3, [r1, #4]
	state->val = val;
   14424:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14428:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1442a:	f004 fd3d 	bl	18ea8 <net_buf_id>
   1442e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14432:	4b02      	ldr	r3, [pc, #8]	; (1443c <bt_hci_cmd_state_set_init+0x20>)
   14434:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14438:	6044      	str	r4, [r0, #4]
}
   1443a:	bd10      	pop	{r4, pc}
   1443c:	20036978 	.word	0x20036978

00014440 <bt_hci_cmd_create>:
{
   14440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14444:	4682      	mov	sl, r0
   14446:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   14448:	f04f 32ff 	mov.w	r2, #4294967295
   1444c:	f04f 33ff 	mov.w	r3, #4294967295
   14450:	4817      	ldr	r0, [pc, #92]	; (144b0 <bt_hci_cmd_create+0x70>)
   14452:	f00f f92f 	bl	236b4 <net_buf_alloc_fixed>
   14456:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   14458:	f100 0808 	add.w	r8, r0, #8
   1445c:	2100      	movs	r1, #0
   1445e:	4640      	mov	r0, r8
   14460:	f00f f94a 	bl	236f8 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14464:	2700      	movs	r7, #0
   14466:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   14468:	4620      	mov	r0, r4
   1446a:	f004 fd1d 	bl	18ea8 <net_buf_id>
   1446e:	4d11      	ldr	r5, [pc, #68]	; (144b4 <bt_hci_cmd_create+0x74>)
   14470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14474:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   14478:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   1447c:	4620      	mov	r0, r4
   1447e:	f004 fd13 	bl	18ea8 <net_buf_id>
   14482:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14486:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1448a:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   1448c:	4620      	mov	r0, r4
   1448e:	f004 fd0b 	bl	18ea8 <net_buf_id>
   14492:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14496:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1449a:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   1449c:	2103      	movs	r1, #3
   1449e:	4640      	mov	r0, r8
   144a0:	f00f f985 	bl	237ae <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   144a4:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   144a8:	7086      	strb	r6, [r0, #2]
}
   144aa:	4620      	mov	r0, r4
   144ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   144b0:	20033cc8 	.word	0x20033cc8
   144b4:	20036978 	.word	0x20036978

000144b8 <bt_hci_cmd_send_sync>:
{
   144b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   144ba:	b087      	sub	sp, #28
   144bc:	4606      	mov	r6, r0
   144be:	4615      	mov	r5, r2
	if (!buf) {
   144c0:	460c      	mov	r4, r1
   144c2:	b361      	cbz	r1, 1451e <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   144c4:	2201      	movs	r2, #1
   144c6:	2100      	movs	r1, #0
   144c8:	4668      	mov	r0, sp
   144ca:	f010 f9db 	bl	24884 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   144ce:	4620      	mov	r0, r4
   144d0:	f004 fcea 	bl	18ea8 <net_buf_id>
   144d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   144d8:	4b2f      	ldr	r3, [pc, #188]	; (14598 <bt_hci_cmd_send_sync+0xe0>)
   144da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   144de:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   144e2:	4620      	mov	r0, r4
   144e4:	f00f f93f 	bl	23766 <net_buf_ref>
   144e8:	4601      	mov	r1, r0
   144ea:	482c      	ldr	r0, [pc, #176]	; (1459c <bt_hci_cmd_send_sync+0xe4>)
   144ec:	f00f f908 	bl	23700 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   144f0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   144f4:	2300      	movs	r3, #0
   144f6:	4668      	mov	r0, sp
   144f8:	f007 fb3a 	bl	1bb70 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   144fc:	4607      	mov	r7, r0
   144fe:	b9b0      	cbnz	r0, 1452e <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   14500:	4620      	mov	r0, r4
   14502:	f004 fcd1 	bl	18ea8 <net_buf_id>
   14506:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1450a:	4b23      	ldr	r3, [pc, #140]	; (14598 <bt_hci_cmd_send_sync+0xe0>)
   1450c:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   14510:	b9ff      	cbnz	r7, 14552 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   14512:	2d00      	cmp	r5, #0
   14514:	d03a      	beq.n	1458c <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   14516:	602c      	str	r4, [r5, #0]
	return 0;
   14518:	2000      	movs	r0, #0
}
   1451a:	b007      	add	sp, #28
   1451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1451e:	f7ff ff8f 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   14522:	4604      	mov	r4, r0
   14524:	2800      	cmp	r0, #0
   14526:	d1cd      	bne.n	144c4 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   14528:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1452c:	e7f5      	b.n	1451a <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1452e:	f240 1331 	movw	r3, #305	; 0x131
   14532:	4a1b      	ldr	r2, [pc, #108]	; (145a0 <bt_hci_cmd_send_sync+0xe8>)
   14534:	491b      	ldr	r1, [pc, #108]	; (145a4 <bt_hci_cmd_send_sync+0xec>)
   14536:	481c      	ldr	r0, [pc, #112]	; (145a8 <bt_hci_cmd_send_sync+0xf0>)
   14538:	f00b fb78 	bl	1fc2c <printk>
   1453c:	4639      	mov	r1, r7
   1453e:	481b      	ldr	r0, [pc, #108]	; (145ac <bt_hci_cmd_send_sync+0xf4>)
   14540:	f00b fb74 	bl	1fc2c <printk>
   14544:	4040      	eors	r0, r0
   14546:	f380 8811 	msr	BASEPRI, r0
   1454a:	f04f 0003 	mov.w	r0, #3
   1454e:	df02      	svc	2
   14550:	e7d6      	b.n	14500 <bt_hci_cmd_send_sync+0x48>
   14552:	4a17      	ldr	r2, [pc, #92]	; (145b0 <bt_hci_cmd_send_sync+0xf8>)
   14554:	4b17      	ldr	r3, [pc, #92]	; (145b4 <bt_hci_cmd_send_sync+0xfc>)
   14556:	1ad2      	subs	r2, r2, r3
   14558:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   1455a:	f04f 0300 	mov.w	r3, #0
   1455e:	2102      	movs	r1, #2
   14560:	f361 0302 	bfi	r3, r1, #0, #3
   14564:	f36f 03c5 	bfc	r3, #3, #3
   14568:	f362 138f 	bfi	r3, r2, #6, #10
   1456c:	463a      	mov	r2, r7
   1456e:	4631      	mov	r1, r6
   14570:	4811      	ldr	r0, [pc, #68]	; (145b8 <bt_hci_cmd_send_sync+0x100>)
   14572:	f7fc fcab 	bl	10ecc <log_2>
		net_buf_unref(buf);
   14576:	4620      	mov	r0, r4
   14578:	f00f f8cf 	bl	2371a <net_buf_unref>
		switch (status) {
   1457c:	2f09      	cmp	r7, #9
   1457e:	d002      	beq.n	14586 <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   14580:	f06f 0004 	mvn.w	r0, #4
   14584:	e7c9      	b.n	1451a <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   14586:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1458a:	e7c6      	b.n	1451a <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   1458c:	4620      	mov	r0, r4
   1458e:	f00f f8c4 	bl	2371a <net_buf_unref>
	return 0;
   14592:	2000      	movs	r0, #0
   14594:	e7c1      	b.n	1451a <bt_hci_cmd_send_sync+0x62>
   14596:	bf00      	nop
   14598:	20036978 	.word	0x20036978
   1459c:	200003d4 	.word	0x200003d4
   145a0:	0002663c 	.word	0x0002663c
   145a4:	000267a4 	.word	0x000267a4
   145a8:	0002668c 	.word	0x0002668c
   145ac:	000267b0 	.word	0x000267b0
   145b0:	00025484 	.word	0x00025484
   145b4:	0002545c 	.word	0x0002545c
   145b8:	000267d0 	.word	0x000267d0

000145bc <common_init>:
{
   145bc:	b510      	push	{r4, lr}
   145be:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   145c0:	4b22      	ldr	r3, [pc, #136]	; (1464c <common_init+0x90>)
   145c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   145c6:	689b      	ldr	r3, [r3, #8]
   145c8:	f013 0f01 	tst.w	r3, #1
   145cc:	d10d      	bne.n	145ea <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   145ce:	aa01      	add	r2, sp, #4
   145d0:	2100      	movs	r1, #0
   145d2:	f640 4003 	movw	r0, #3075	; 0xc03
   145d6:	f7ff ff6f 	bl	144b8 <bt_hci_cmd_send_sync>
		if (err) {
   145da:	4604      	mov	r4, r0
   145dc:	b968      	cbnz	r0, 145fa <common_init+0x3e>
		hci_reset_complete(rsp);
   145de:	9801      	ldr	r0, [sp, #4]
   145e0:	f7ff f9b0 	bl	13944 <hci_reset_complete>
		net_buf_unref(rsp);
   145e4:	9801      	ldr	r0, [sp, #4]
   145e6:	f00f f898 	bl	2371a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   145ea:	aa01      	add	r2, sp, #4
   145ec:	2100      	movs	r1, #0
   145ee:	f241 0003 	movw	r0, #4099	; 0x1003
   145f2:	f7ff ff61 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   145f6:	4604      	mov	r4, r0
   145f8:	b110      	cbz	r0, 14600 <common_init+0x44>
}
   145fa:	4620      	mov	r0, r4
   145fc:	b002      	add	sp, #8
   145fe:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   14600:	9801      	ldr	r0, [sp, #4]
   14602:	f7ff f9b9 	bl	13978 <read_local_features_complete>
	net_buf_unref(rsp);
   14606:	9801      	ldr	r0, [sp, #4]
   14608:	f00f f887 	bl	2371a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1460c:	aa01      	add	r2, sp, #4
   1460e:	2100      	movs	r1, #0
   14610:	f241 0001 	movw	r0, #4097	; 0x1001
   14614:	f7ff ff50 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   14618:	4604      	mov	r4, r0
   1461a:	2800      	cmp	r0, #0
   1461c:	d1ed      	bne.n	145fa <common_init+0x3e>
	read_local_ver_complete(rsp);
   1461e:	9801      	ldr	r0, [sp, #4]
   14620:	f7ff f918 	bl	13854 <read_local_ver_complete>
	net_buf_unref(rsp);
   14624:	9801      	ldr	r0, [sp, #4]
   14626:	f00f f878 	bl	2371a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1462a:	aa01      	add	r2, sp, #4
   1462c:	2100      	movs	r1, #0
   1462e:	f241 0002 	movw	r0, #4098	; 0x1002
   14632:	f7ff ff41 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   14636:	4604      	mov	r4, r0
   14638:	2800      	cmp	r0, #0
   1463a:	d1de      	bne.n	145fa <common_init+0x3e>
	read_supported_commands_complete(rsp);
   1463c:	9801      	ldr	r0, [sp, #4]
   1463e:	f7ff f9a5 	bl	1398c <read_supported_commands_complete>
	net_buf_unref(rsp);
   14642:	9801      	ldr	r0, [sp, #4]
   14644:	f00f f869 	bl	2371a <net_buf_unref>
	return 0;
   14648:	e7d7      	b.n	145fa <common_init+0x3e>
   1464a:	bf00      	nop
   1464c:	200002b8 	.word	0x200002b8

00014650 <le_set_event_mask>:
{
   14650:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14652:	2108      	movs	r1, #8
   14654:	f242 0001 	movw	r0, #8193	; 0x2001
   14658:	f7ff fef2 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   1465c:	b398      	cbz	r0, 146c6 <le_set_event_mask+0x76>
   1465e:	4604      	mov	r4, r0
   14660:	2108      	movs	r1, #8
   14662:	4408      	add	r0, r1
   14664:	f00f f8a3 	bl	237ae <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   14668:	4b18      	ldr	r3, [pc, #96]	; (146cc <le_set_event_mask+0x7c>)
   1466a:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1466e:	f011 0f02 	tst.w	r1, #2
   14672:	d125      	bne.n	146c0 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   14674:	220f      	movs	r2, #15
   14676:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   14678:	f011 0f20 	tst.w	r1, #32
   1467c:	d001      	beq.n	14682 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1467e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   14682:	4912      	ldr	r1, [pc, #72]	; (146cc <le_set_event_mask+0x7c>)
   14684:	f891 10a1 	ldrb.w	r1, [r1, #161]	; 0xa1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14688:	f011 0f09 	tst.w	r1, #9
   1468c:	d001      	beq.n	14692 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1468e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   14692:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   14694:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14698:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1469a:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   1469c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1469e:	0e12      	lsrs	r2, r2, #24
   146a0:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   146a2:	b29a      	uxth	r2, r3
	dst[0] = val;
   146a4:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   146a6:	0a12      	lsrs	r2, r2, #8
   146a8:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   146aa:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   146ac:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   146ae:	0a13      	lsrs	r3, r2, #8
   146b0:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   146b2:	2200      	movs	r2, #0
   146b4:	4621      	mov	r1, r4
   146b6:	f242 0001 	movw	r0, #8193	; 0x2001
   146ba:	f7ff fefd 	bl	144b8 <bt_hci_cmd_send_sync>
}
   146be:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   146c0:	222f      	movs	r2, #47	; 0x2f
   146c2:	2300      	movs	r3, #0
   146c4:	e7d8      	b.n	14678 <le_set_event_mask+0x28>
		return -ENOBUFS;
   146c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   146ca:	e7f8      	b.n	146be <le_set_event_mask+0x6e>
   146cc:	200002b8 	.word	0x200002b8

000146d0 <le_init>:
{
   146d0:	b510      	push	{r4, lr}
   146d2:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   146d4:	4b39      	ldr	r3, [pc, #228]	; (147bc <le_init+0xec>)
   146d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   146da:	f013 0f40 	tst.w	r3, #64	; 0x40
   146de:	d00a      	beq.n	146f6 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   146e0:	aa01      	add	r2, sp, #4
   146e2:	2100      	movs	r1, #0
   146e4:	f242 0003 	movw	r0, #8195	; 0x2003
   146e8:	f7ff fee6 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   146ec:	4603      	mov	r3, r0
   146ee:	b1a8      	cbz	r0, 1471c <le_init+0x4c>
}
   146f0:	4618      	mov	r0, r3
   146f2:	b002      	add	sp, #8
   146f4:	bd10      	pop	{r4, pc}
   146f6:	4b32      	ldr	r3, [pc, #200]	; (147c0 <le_init+0xf0>)
   146f8:	4a32      	ldr	r2, [pc, #200]	; (147c4 <le_init+0xf4>)
   146fa:	1a9b      	subs	r3, r3, r2
   146fc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   146fe:	f04f 0100 	mov.w	r1, #0
   14702:	2201      	movs	r2, #1
   14704:	f362 0102 	bfi	r1, r2, #0, #3
   14708:	f36f 01c5 	bfc	r1, #3, #3
   1470c:	f363 118f 	bfi	r1, r3, #6, #10
   14710:	482d      	ldr	r0, [pc, #180]	; (147c8 <le_init+0xf8>)
   14712:	f7fc fc5b 	bl	10fcc <log_0>
		return -ENODEV;
   14716:	f06f 0312 	mvn.w	r3, #18
   1471a:	e7e9      	b.n	146f0 <le_init+0x20>
	read_le_features_complete(rsp);
   1471c:	9801      	ldr	r0, [sp, #4]
   1471e:	f7ff f93f 	bl	139a0 <read_le_features_complete>
	net_buf_unref(rsp);
   14722:	9801      	ldr	r0, [sp, #4]
   14724:	f00e fff9 	bl	2371a <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14728:	aa01      	add	r2, sp, #4
   1472a:	2100      	movs	r1, #0
   1472c:	f242 0002 	movw	r0, #8194	; 0x2002
   14730:	f7ff fec2 	bl	144b8 <bt_hci_cmd_send_sync>
		if (err) {
   14734:	4603      	mov	r3, r0
   14736:	2800      	cmp	r0, #0
   14738:	d1da      	bne.n	146f0 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   1473a:	9801      	ldr	r0, [sp, #4]
   1473c:	f7ff f93a 	bl	139b4 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   14740:	9801      	ldr	r0, [sp, #4]
   14742:	f00e ffea 	bl	2371a <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14746:	4b1d      	ldr	r3, [pc, #116]	; (147bc <le_init+0xec>)
   14748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1474c:	f013 0f20 	tst.w	r3, #32
   14750:	d018      	beq.n	14784 <le_init+0xb4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14752:	4b1a      	ldr	r3, [pc, #104]	; (147bc <le_init+0xec>)
   14754:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
   14758:	f013 0f08 	tst.w	r3, #8
   1475c:	d00e      	beq.n	1477c <le_init+0xac>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1475e:	aa01      	add	r2, sp, #4
   14760:	2100      	movs	r1, #0
   14762:	f242 001c 	movw	r0, #8220	; 0x201c
   14766:	f7ff fea7 	bl	144b8 <bt_hci_cmd_send_sync>
		if (err) {
   1476a:	4603      	mov	r3, r0
   1476c:	2800      	cmp	r0, #0
   1476e:	d1bf      	bne.n	146f0 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   14770:	9801      	ldr	r0, [sp, #4]
   14772:	f7ff f883 	bl	1387c <le_read_supp_states_complete>
		net_buf_unref(rsp);
   14776:	9801      	ldr	r0, [sp, #4]
   14778:	f00e ffcf 	bl	2371a <net_buf_unref>
	return  le_set_event_mask();
   1477c:	f7ff ff68 	bl	14650 <le_set_event_mask>
   14780:	4603      	mov	r3, r0
   14782:	e7b5      	b.n	146f0 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14784:	2102      	movs	r1, #2
   14786:	f640 406d 	movw	r0, #3181	; 0xc6d
   1478a:	f7ff fe59 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   1478e:	4604      	mov	r4, r0
   14790:	b180      	cbz	r0, 147b4 <le_init+0xe4>
   14792:	2102      	movs	r1, #2
   14794:	3008      	adds	r0, #8
   14796:	f00f f80a 	bl	237ae <net_buf_simple_add>
		cp_le->le = 0x01;
   1479a:	2301      	movs	r3, #1
   1479c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1479e:	2200      	movs	r2, #0
   147a0:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   147a2:	4621      	mov	r1, r4
   147a4:	f640 406d 	movw	r0, #3181	; 0xc6d
   147a8:	f7ff fe86 	bl	144b8 <bt_hci_cmd_send_sync>
		if (err) {
   147ac:	4603      	mov	r3, r0
   147ae:	2800      	cmp	r0, #0
   147b0:	d0cf      	beq.n	14752 <le_init+0x82>
   147b2:	e79d      	b.n	146f0 <le_init+0x20>
			return -ENOBUFS;
   147b4:	f06f 0368 	mvn.w	r3, #104	; 0x68
   147b8:	e79a      	b.n	146f0 <le_init+0x20>
   147ba:	bf00      	nop
   147bc:	200002b8 	.word	0x200002b8
   147c0:	00025484 	.word	0x00025484
   147c4:	0002545c 	.word	0x0002545c
   147c8:	000267ec 	.word	0x000267ec

000147cc <bt_br_init>:
{
   147cc:	b510      	push	{r4, lr}
   147ce:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   147d0:	4b0b      	ldr	r3, [pc, #44]	; (14800 <bt_br_init+0x34>)
   147d2:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
   147d6:	b11b      	cbz	r3, 147e0 <bt_br_init+0x14>
		return 0;
   147d8:	2400      	movs	r4, #0
}
   147da:	4620      	mov	r0, r4
   147dc:	b002      	add	sp, #8
   147de:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   147e0:	aa01      	add	r2, sp, #4
   147e2:	2100      	movs	r1, #0
   147e4:	f241 0005 	movw	r0, #4101	; 0x1005
   147e8:	f7ff fe66 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   147ec:	4604      	mov	r4, r0
   147ee:	2800      	cmp	r0, #0
   147f0:	d1f3      	bne.n	147da <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   147f2:	9801      	ldr	r0, [sp, #4]
   147f4:	f7ff f8f0 	bl	139d8 <read_buffer_size_complete>
	net_buf_unref(rsp);
   147f8:	9801      	ldr	r0, [sp, #4]
   147fa:	f00e ff8e 	bl	2371a <net_buf_unref>
	return 0;
   147fe:	e7ec      	b.n	147da <bt_br_init+0xe>
   14800:	200002b8 	.word	0x200002b8

00014804 <hci_vs_init>:
{
   14804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14808:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1480a:	aa05      	add	r2, sp, #20
   1480c:	2100      	movs	r1, #0
   1480e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14812:	f7ff fe51 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   14816:	2800      	cmp	r0, #0
   14818:	d178      	bne.n	1490c <hci_vs_init+0x108>
	rp.info = (void *)rsp->data;
   1481a:	9b05      	ldr	r3, [sp, #20]
   1481c:	689c      	ldr	r4, [r3, #8]
   1481e:	4d56      	ldr	r5, [pc, #344]	; (14978 <hci_vs_init+0x174>)
   14820:	4b56      	ldr	r3, [pc, #344]	; (1497c <hci_vs_init+0x178>)
   14822:	1aed      	subs	r5, r5, r3
   14824:	08ed      	lsrs	r5, r5, #3
	BT_INFO("HW Platform: %s (0x%04x)",
   14826:	2703      	movs	r7, #3
   14828:	f04f 0600 	mov.w	r6, #0
   1482c:	f367 0602 	bfi	r6, r7, #0, #3
   14830:	f36f 06c5 	bfc	r6, #3, #3
   14834:	f365 168f 	bfi	r6, r5, #6, #10
   14838:	f8b4 8001 	ldrh.w	r8, [r4, #1]
   1483c:	4640      	mov	r0, r8
   1483e:	f7ff f859 	bl	138f4 <vs_hw_platform>
   14842:	4601      	mov	r1, r0
   14844:	4633      	mov	r3, r6
   14846:	4642      	mov	r2, r8
   14848:	484d      	ldr	r0, [pc, #308]	; (14980 <hci_vs_init+0x17c>)
   1484a:	f7fc fb3f 	bl	10ecc <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
   1484e:	f04f 0600 	mov.w	r6, #0
   14852:	f367 0602 	bfi	r6, r7, #0, #3
   14856:	f36f 06c5 	bfc	r6, #3, #3
   1485a:	f365 168f 	bfi	r6, r5, #6, #10
   1485e:	f8b4 8003 	ldrh.w	r8, [r4, #3]
   14862:	4641      	mov	r1, r8
   14864:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   14868:	f7ff f850 	bl	1390c <vs_hw_variant>
   1486c:	4601      	mov	r1, r0
   1486e:	4633      	mov	r3, r6
   14870:	4642      	mov	r2, r8
   14872:	4844      	ldr	r0, [pc, #272]	; (14984 <hci_vs_init+0x180>)
   14874:	f7fc fb2a 	bl	10ecc <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   14878:	f04f 0600 	mov.w	r6, #0
   1487c:	f367 0602 	bfi	r6, r7, #0, #3
   14880:	f36f 06c5 	bfc	r6, #3, #3
   14884:	f365 168f 	bfi	r6, r5, #6, #10
   14888:	7965      	ldrb	r5, [r4, #5]
   1488a:	4628      	mov	r0, r5
   1488c:	f7ff f84e 	bl	1392c <vs_fw_variant>
   14890:	9000      	str	r0, [sp, #0]
   14892:	9501      	str	r5, [sp, #4]
   14894:	79a3      	ldrb	r3, [r4, #6]
   14896:	9302      	str	r3, [sp, #8]
   14898:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1489c:	9303      	str	r3, [sp, #12]
   1489e:	f8d4 3009 	ldr.w	r3, [r4, #9]
   148a2:	9304      	str	r3, [sp, #16]
   148a4:	4633      	mov	r3, r6
   148a6:	2205      	movs	r2, #5
   148a8:	4669      	mov	r1, sp
   148aa:	4837      	ldr	r0, [pc, #220]	; (14988 <hci_vs_init+0x184>)
   148ac:	f7fc fb4a 	bl	10f44 <log_n>
	net_buf_unref(rsp);
   148b0:	9805      	ldr	r0, [sp, #20]
   148b2:	f00e ff32 	bl	2371a <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   148b6:	aa05      	add	r2, sp, #20
   148b8:	2100      	movs	r1, #0
   148ba:	f64f 4002 	movw	r0, #64514	; 0xfc02
   148be:	f7ff fdfb 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   148c2:	2800      	cmp	r0, #0
   148c4:	d135      	bne.n	14932 <hci_vs_init+0x12e>
	rp.cmds = (void *)rsp->data;
   148c6:	9b05      	ldr	r3, [sp, #20]
   148c8:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   148ca:	4c30      	ldr	r4, [pc, #192]	; (1498c <hci_vs_init+0x188>)
   148cc:	2202      	movs	r2, #2
   148ce:	3101      	adds	r1, #1
   148d0:	f104 0085 	add.w	r0, r4, #133	; 0x85
   148d4:	f00c fe27 	bl	21526 <memcpy>
	net_buf_unref(rsp);
   148d8:	9805      	ldr	r0, [sp, #20]
   148da:	f00e ff1e 	bl	2371a <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   148de:	f894 3085 	ldrb.w	r3, [r4, #133]	; 0x85
   148e2:	f013 0f04 	tst.w	r3, #4
   148e6:	d021      	beq.n	1492c <hci_vs_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   148e8:	aa05      	add	r2, sp, #20
   148ea:	2100      	movs	r1, #0
   148ec:	f64f 4003 	movw	r0, #64515	; 0xfc03
   148f0:	f7ff fde2 	bl	144b8 <bt_hci_cmd_send_sync>
		if (err) {
   148f4:	bb70      	cbnz	r0, 14954 <hci_vs_init+0x150>
		rp.feat = (void *)rsp->data;
   148f6:	9b05      	ldr	r3, [sp, #20]
   148f8:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   148fa:	2201      	movs	r2, #1
   148fc:	4411      	add	r1, r2
   148fe:	4824      	ldr	r0, [pc, #144]	; (14990 <hci_vs_init+0x18c>)
   14900:	f00c fe11 	bl	21526 <memcpy>
		net_buf_unref(rsp);
   14904:	9805      	ldr	r0, [sp, #20]
   14906:	f00e ff08 	bl	2371a <net_buf_unref>
   1490a:	e00f      	b.n	1492c <hci_vs_init+0x128>
   1490c:	4b1a      	ldr	r3, [pc, #104]	; (14978 <hci_vs_init+0x174>)
   1490e:	4a1b      	ldr	r2, [pc, #108]	; (1497c <hci_vs_init+0x178>)
   14910:	1a9b      	subs	r3, r3, r2
   14912:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   14914:	f04f 0100 	mov.w	r1, #0
   14918:	2202      	movs	r2, #2
   1491a:	f362 0102 	bfi	r1, r2, #0, #3
   1491e:	f36f 01c5 	bfc	r1, #3, #3
   14922:	f363 118f 	bfi	r1, r3, #6, #10
   14926:	481b      	ldr	r0, [pc, #108]	; (14994 <hci_vs_init+0x190>)
   14928:	f7fc fb50 	bl	10fcc <log_0>
}
   1492c:	b006      	add	sp, #24
   1492e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14932:	4b11      	ldr	r3, [pc, #68]	; (14978 <hci_vs_init+0x174>)
   14934:	4a11      	ldr	r2, [pc, #68]	; (1497c <hci_vs_init+0x178>)
   14936:	1a9b      	subs	r3, r3, r2
   14938:	40fb      	lsrs	r3, r7
		BT_WARN("Failed to read supported vendor commands");
   1493a:	f04f 0100 	mov.w	r1, #0
   1493e:	2202      	movs	r2, #2
   14940:	f362 0102 	bfi	r1, r2, #0, #3
   14944:	f36f 01c5 	bfc	r1, #3, #3
   14948:	f363 118f 	bfi	r1, r3, #6, #10
   1494c:	4812      	ldr	r0, [pc, #72]	; (14998 <hci_vs_init+0x194>)
   1494e:	f7fc fb3d 	bl	10fcc <log_0>
		return;
   14952:	e7eb      	b.n	1492c <hci_vs_init+0x128>
   14954:	4b08      	ldr	r3, [pc, #32]	; (14978 <hci_vs_init+0x174>)
   14956:	4a09      	ldr	r2, [pc, #36]	; (1497c <hci_vs_init+0x178>)
   14958:	1a9b      	subs	r3, r3, r2
   1495a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   1495c:	f04f 0100 	mov.w	r1, #0
   14960:	2202      	movs	r2, #2
   14962:	f362 0102 	bfi	r1, r2, #0, #3
   14966:	f36f 01c5 	bfc	r1, #3, #3
   1496a:	f363 118f 	bfi	r1, r3, #6, #10
   1496e:	480b      	ldr	r0, [pc, #44]	; (1499c <hci_vs_init+0x198>)
   14970:	f7fc fb2c 	bl	10fcc <log_0>
			return;
   14974:	e7da      	b.n	1492c <hci_vs_init+0x128>
   14976:	bf00      	nop
   14978:	00025484 	.word	0x00025484
   1497c:	0002545c 	.word	0x0002545c
   14980:	00026834 	.word	0x00026834
   14984:	00026850 	.word	0x00026850
   14988:	00026868 	.word	0x00026868
   1498c:	200002b8 	.word	0x200002b8
   14990:	2000033c 	.word	0x2000033c
   14994:	00026810 	.word	0x00026810
   14998:	00026898 	.word	0x00026898
   1499c:	000268c4 	.word	0x000268c4

000149a0 <hci_init>:
{
   149a0:	b508      	push	{r3, lr}
	err = common_init();
   149a2:	f7ff fe0b 	bl	145bc <common_init>
	if (err) {
   149a6:	4603      	mov	r3, r0
   149a8:	b108      	cbz	r0, 149ae <hci_init+0xe>
}
   149aa:	4618      	mov	r0, r3
   149ac:	bd08      	pop	{r3, pc}
	err = le_init();
   149ae:	f7ff fe8f 	bl	146d0 <le_init>
	if (err) {
   149b2:	4603      	mov	r3, r0
   149b4:	2800      	cmp	r0, #0
   149b6:	d1f8      	bne.n	149aa <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   149b8:	4b0a      	ldr	r3, [pc, #40]	; (149e4 <hci_init+0x44>)
   149ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   149be:	f013 0f20 	tst.w	r3, #32
   149c2:	d104      	bne.n	149ce <hci_init+0x2e>
		err = bt_br_init();
   149c4:	f7ff ff02 	bl	147cc <bt_br_init>
		if (err) {
   149c8:	4603      	mov	r3, r0
   149ca:	2800      	cmp	r0, #0
   149cc:	d1ed      	bne.n	149aa <hci_init+0xa>
	err = set_event_mask();
   149ce:	f00c fe8b 	bl	216e8 <set_event_mask>
	if (err) {
   149d2:	4603      	mov	r3, r0
   149d4:	2800      	cmp	r0, #0
   149d6:	d1e8      	bne.n	149aa <hci_init+0xa>
	hci_vs_init();
   149d8:	f7ff ff14 	bl	14804 <hci_vs_init>
	err = bt_id_init();
   149dc:	f000 ff3a 	bl	15854 <bt_id_init>
   149e0:	4603      	mov	r3, r0
	if (err) {
   149e2:	e7e2      	b.n	149aa <hci_init+0xa>
   149e4:	200002b8 	.word	0x200002b8

000149e8 <le_phy_update_complete>:
{
   149e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   149ea:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   149ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   149f0:	4630      	mov	r0, r6
   149f2:	f001 fcbd 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   149f6:	b188      	cbz	r0, 14a1c <le_phy_update_complete+0x34>
   149f8:	4604      	mov	r4, r0
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   149fa:	78e8      	ldrb	r0, [r5, #3]
   149fc:	f00c fe96 	bl	2172c <bt_get_phy>
   14a00:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   14a04:	7928      	ldrb	r0, [r5, #4]
   14a06:	f00c fe91 	bl	2172c <bt_get_phy>
   14a0a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   14a0e:	4620      	mov	r0, r4
   14a10:	f001 fe0e 	bl	16630 <notify_le_phy_updated>
	bt_conn_unref(conn);
   14a14:	4620      	mov	r0, r4
   14a16:	f00d fa35 	bl	21e84 <bt_conn_unref>
}
   14a1a:	bd70      	pop	{r4, r5, r6, pc}
   14a1c:	4b08      	ldr	r3, [pc, #32]	; (14a40 <le_phy_update_complete+0x58>)
   14a1e:	4a09      	ldr	r2, [pc, #36]	; (14a44 <le_phy_update_complete+0x5c>)
   14a20:	1a9b      	subs	r3, r3, r2
   14a22:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14a24:	f04f 0200 	mov.w	r2, #0
   14a28:	2101      	movs	r1, #1
   14a2a:	f361 0202 	bfi	r2, r1, #0, #3
   14a2e:	f36f 02c5 	bfc	r2, #3, #3
   14a32:	f363 128f 	bfi	r2, r3, #6, #10
   14a36:	4631      	mov	r1, r6
   14a38:	4803      	ldr	r0, [pc, #12]	; (14a48 <le_phy_update_complete+0x60>)
   14a3a:	f7fc fa11 	bl	10e60 <log_1>
		return;
   14a3e:	e7ec      	b.n	14a1a <le_phy_update_complete+0x32>
   14a40:	00025484 	.word	0x00025484
   14a44:	0002545c 	.word	0x0002545c
   14a48:	000266f4 	.word	0x000266f4

00014a4c <bt_send>:
{
   14a4c:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   14a4e:	4b03      	ldr	r3, [pc, #12]	; (14a5c <bt_send+0x10>)
   14a50:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   14a54:	691b      	ldr	r3, [r3, #16]
   14a56:	4798      	blx	r3
}
   14a58:	bd08      	pop	{r3, pc}
   14a5a:	bf00      	nop
   14a5c:	200002b8 	.word	0x200002b8

00014a60 <bt_hci_cmd_send>:
{
   14a60:	b538      	push	{r3, r4, r5, lr}
   14a62:	4604      	mov	r4, r0
	if (!buf) {
   14a64:	460d      	mov	r5, r1
   14a66:	b151      	cbz	r1, 14a7e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   14a68:	f640 4335 	movw	r3, #3125	; 0xc35
   14a6c:	429c      	cmp	r4, r3
   14a6e:	d00e      	beq.n	14a8e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   14a70:	4629      	mov	r1, r5
   14a72:	4814      	ldr	r0, [pc, #80]	; (14ac4 <bt_hci_cmd_send+0x64>)
   14a74:	f00e fe44 	bl	23700 <net_buf_put>
	return 0;
   14a78:	2400      	movs	r4, #0
}
   14a7a:	4620      	mov	r0, r4
   14a7c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14a7e:	f7ff fcdf 	bl	14440 <bt_hci_cmd_create>
		if (!buf) {
   14a82:	4605      	mov	r5, r0
   14a84:	2800      	cmp	r0, #0
   14a86:	d1ef      	bne.n	14a68 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   14a88:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14a8c:	e7f5      	b.n	14a7a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   14a8e:	4628      	mov	r0, r5
   14a90:	f7ff ffdc 	bl	14a4c <bt_send>
		if (err) {
   14a94:	4604      	mov	r4, r0
   14a96:	2800      	cmp	r0, #0
   14a98:	d0ef      	beq.n	14a7a <bt_hci_cmd_send+0x1a>
   14a9a:	4b0b      	ldr	r3, [pc, #44]	; (14ac8 <bt_hci_cmd_send+0x68>)
   14a9c:	4a0b      	ldr	r2, [pc, #44]	; (14acc <bt_hci_cmd_send+0x6c>)
   14a9e:	1a9b      	subs	r3, r3, r2
   14aa0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   14aa2:	f04f 0200 	mov.w	r2, #0
   14aa6:	2101      	movs	r1, #1
   14aa8:	f361 0202 	bfi	r2, r1, #0, #3
   14aac:	f36f 02c5 	bfc	r2, #3, #3
   14ab0:	f363 128f 	bfi	r2, r3, #6, #10
   14ab4:	4601      	mov	r1, r0
   14ab6:	4806      	ldr	r0, [pc, #24]	; (14ad0 <bt_hci_cmd_send+0x70>)
   14ab8:	f7fc f9d2 	bl	10e60 <log_1>
			net_buf_unref(buf);
   14abc:	4628      	mov	r0, r5
   14abe:	f00e fe2c 	bl	2371a <net_buf_unref>
		return err;
   14ac2:	e7da      	b.n	14a7a <bt_hci_cmd_send+0x1a>
   14ac4:	200003d4 	.word	0x200003d4
   14ac8:	00025484 	.word	0x00025484
   14acc:	0002545c 	.word	0x0002545c
   14ad0:	000268f0 	.word	0x000268f0

00014ad4 <conn_auto_initiate>:
{
   14ad4:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   14ad6:	7a83      	ldrb	r3, [r0, #10]
   14ad8:	2b07      	cmp	r3, #7
   14ada:	d000      	beq.n	14ade <conn_auto_initiate+0xa>
}
   14adc:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14ade:	f3bf 8f5b 	dmb	ish
   14ae2:	6843      	ldr	r3, [r0, #4]
   14ae4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14ae8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   14aec:	d1f6      	bne.n	14adc <conn_auto_initiate+0x8>
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   14aee:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14af0:	b12b      	cbz	r3, 14afe <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   14af2:	4b04      	ldr	r3, [pc, #16]	; (14b04 <conn_auto_initiate+0x30>)
   14af4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   14af8:	f013 0f08 	tst.w	r3, #8
   14afc:	d0ee      	beq.n	14adc <conn_auto_initiate+0x8>
		err = hci_le_read_remote_features(conn);
   14afe:	f00c fe64 	bl	217ca <hci_le_read_remote_features>
		}
   14b02:	e7eb      	b.n	14adc <conn_auto_initiate+0x8>
   14b04:	200002b8 	.word	0x200002b8

00014b08 <bt_hci_le_enh_conn_complete>:
{
   14b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b0c:	b084      	sub	sp, #16
   14b0e:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14b10:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   14b14:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   14b18:	4640      	mov	r0, r8
   14b1a:	f7fe fe85 	bl	13828 <conn_handle_is_disconnected>
   14b1e:	4606      	mov	r6, r0
	if (evt->status) {
   14b20:	7820      	ldrb	r0, [r4, #0]
   14b22:	b1b0      	cbz	r0, 14b52 <bt_hci_le_enh_conn_complete+0x4a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14b24:	283c      	cmp	r0, #60	; 0x3c
   14b26:	d011      	beq.n	14b4c <bt_hci_le_enh_conn_complete+0x44>
   14b28:	4b69      	ldr	r3, [pc, #420]	; (14cd0 <bt_hci_le_enh_conn_complete+0x1c8>)
   14b2a:	4a6a      	ldr	r2, [pc, #424]	; (14cd4 <bt_hci_le_enh_conn_complete+0x1cc>)
   14b2c:	1a9b      	subs	r3, r3, r2
   14b2e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   14b30:	f04f 0200 	mov.w	r2, #0
   14b34:	2102      	movs	r1, #2
   14b36:	f361 0202 	bfi	r2, r1, #0, #3
   14b3a:	f36f 02c5 	bfc	r2, #3, #3
   14b3e:	f363 128f 	bfi	r2, r3, #6, #10
   14b42:	4601      	mov	r1, r0
   14b44:	4864      	ldr	r0, [pc, #400]	; (14cd8 <bt_hci_le_enh_conn_complete+0x1d0>)
   14b46:	f7fc f98b 	bl	10e60 <log_1>
		return;
   14b4a:	e05a      	b.n	14c02 <bt_hci_le_enh_conn_complete+0xfa>
			le_conn_complete_adv_timeout();
   14b4c:	f7fe ff98 	bl	13a80 <le_conn_complete_adv_timeout>
			return;
   14b50:	e057      	b.n	14c02 <bt_hci_le_enh_conn_complete+0xfa>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14b52:	7923      	ldrb	r3, [r4, #4]
   14b54:	3b02      	subs	r3, #2
   14b56:	b2db      	uxtb	r3, r3
   14b58:	2b01      	cmp	r3, #1
   14b5a:	d955      	bls.n	14c08 <bt_hci_le_enh_conn_complete+0x100>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   14b5c:	78e3      	ldrb	r3, [r4, #3]
   14b5e:	2b01      	cmp	r3, #1
   14b60:	d067      	beq.n	14c32 <bt_hci_le_enh_conn_complete+0x12a>
				bt_lookup_id_addr(id, &evt->peer_addr));
   14b62:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   14b64:	4629      	mov	r1, r5
   14b66:	f00c fec1 	bl	218ec <bt_lookup_id_addr>
   14b6a:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   14b6c:	2207      	movs	r2, #7
   14b6e:	4668      	mov	r0, sp
   14b70:	f00c fcd9 	bl	21526 <memcpy>
   14b74:	2207      	movs	r2, #7
   14b76:	4629      	mov	r1, r5
   14b78:	a802      	add	r0, sp, #8
   14b7a:	f00c fcd4 	bl	21526 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   14b7e:	4669      	mov	r1, sp
   14b80:	78e0      	ldrb	r0, [r4, #3]
   14b82:	f7fe ff57 	bl	13a34 <find_pending_connect>
   14b86:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_SLAVE &&
   14b88:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14b8a:	2b01      	cmp	r3, #1
   14b8c:	d055      	beq.n	14c3a <bt_hci_le_enh_conn_complete+0x132>
	if (!conn) {
   14b8e:	2d00      	cmp	r5, #0
   14b90:	d063      	beq.n	14c5a <bt_hci_le_enh_conn_complete+0x152>
	conn->handle = handle;
   14b92:	4628      	mov	r0, r5
   14b94:	f820 7b88 	strh.w	r7, [r0], #136
   14b98:	2207      	movs	r2, #7
   14b9a:	4669      	mov	r1, sp
   14b9c:	f00c fcc3 	bl	21526 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14ba0:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   14ba4:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14ba8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   14bac:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14bb0:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   14bb4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   14bb8:	78e3      	ldrb	r3, [r4, #3]
   14bba:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   14bbc:	2200      	movs	r2, #0
   14bbe:	726a      	strb	r2, [r5, #9]
	conn->le.data_len.tx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   14bc0:	211b      	movs	r1, #27
   14bc2:	f8a5 10ba 	strh.w	r1, [r5, #186]	; 0xba
	conn->le.data_len.tx_max_time = BT_GAP_DATA_TIME_DEFAULT;
   14bc6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14bca:	f8a5 20bc 	strh.w	r2, [r5, #188]	; 0xbc
	conn->le.data_len.rx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   14bce:	f8a5 10be 	strh.w	r1, [r5, #190]	; 0xbe
	conn->le.data_len.rx_max_time = BT_GAP_DATA_TIME_DEFAULT;
   14bd2:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   14bd6:	2201      	movs	r2, #1
   14bd8:	f885 20b8 	strb.w	r2, [r5, #184]	; 0xb8
	conn->le.phy.rx_phy = BT_GAP_LE_PHY_1M;
   14bdc:	f885 20b9 	strb.w	r2, [r5, #185]	; 0xb9
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14be0:	4293      	cmp	r3, r2
   14be2:	d054      	beq.n	14c8e <bt_hci_le_enh_conn_complete+0x186>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14be4:	2107      	movs	r1, #7
   14be6:	4628      	mov	r0, r5
   14be8:	f001 fbcc 	bl	16384 <bt_conn_set_state>
	if (is_disconnected) {
   14bec:	2e00      	cmp	r6, #0
   14bee:	d16a      	bne.n	14cc6 <bt_hci_le_enh_conn_complete+0x1be>
	bt_conn_connected(conn);
   14bf0:	4628      	mov	r0, r5
   14bf2:	f00d f98f 	bl	21f14 <bt_conn_connected>
	conn_auto_initiate(conn);
   14bf6:	4628      	mov	r0, r5
   14bf8:	f7ff ff6c 	bl	14ad4 <conn_auto_initiate>
	bt_conn_unref(conn);
   14bfc:	4628      	mov	r0, r5
   14bfe:	f00d f941 	bl	21e84 <bt_conn_unref>
}
   14c02:	b004      	add	sp, #16
   14c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c08:	2207      	movs	r2, #7
   14c0a:	1d21      	adds	r1, r4, #4
   14c0c:	4668      	mov	r0, sp
   14c0e:	f00c fc8a 	bl	21526 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14c12:	f89d 3000 	ldrb.w	r3, [sp]
   14c16:	3b02      	subs	r3, #2
   14c18:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   14c1c:	2206      	movs	r2, #6
   14c1e:	f104 0111 	add.w	r1, r4, #17
   14c22:	f10d 0009 	add.w	r0, sp, #9
   14c26:	f00c fc7e 	bl	21526 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14c2a:	2301      	movs	r3, #1
   14c2c:	f88d 3008 	strb.w	r3, [sp, #8]
   14c30:	e7a5      	b.n	14b7e <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   14c32:	4b2a      	ldr	r3, [pc, #168]	; (14cdc <bt_hci_le_enh_conn_complete+0x1d4>)
   14c34:	f893 0033 	ldrb.w	r0, [r3, #51]	; 0x33
   14c38:	e793      	b.n	14b62 <bt_hci_le_enh_conn_complete+0x5a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14c3a:	f000 ff51 	bl	15ae0 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   14c3e:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14c40:	f3bf 8f5b 	dmb	ish
   14c44:	e850 3f00 	ldrex	r3, [r0]
   14c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14c4c:	e840 3200 	strex	r2, r3, [r0]
   14c50:	2a00      	cmp	r2, #0
   14c52:	d1f7      	bne.n	14c44 <bt_hci_le_enh_conn_complete+0x13c>
   14c54:	f3bf 8f5b 	dmb	ish
}
   14c58:	e799      	b.n	14b8e <bt_hci_le_enh_conn_complete+0x86>
   14c5a:	4b1d      	ldr	r3, [pc, #116]	; (14cd0 <bt_hci_le_enh_conn_complete+0x1c8>)
   14c5c:	4a1d      	ldr	r2, [pc, #116]	; (14cd4 <bt_hci_le_enh_conn_complete+0x1cc>)
   14c5e:	1a9b      	subs	r3, r3, r2
   14c60:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   14c62:	2201      	movs	r2, #1
   14c64:	f362 0502 	bfi	r5, r2, #0, #3
   14c68:	f36f 05c5 	bfc	r5, #3, #3
   14c6c:	f363 158f 	bfi	r5, r3, #6, #10
   14c70:	1d20      	adds	r0, r4, #4
   14c72:	f7fe fce3 	bl	1363c <bt_addr_le_str_real>
   14c76:	f7fb ff79 	bl	10b6c <z_log_strdup>
   14c7a:	4601      	mov	r1, r0
   14c7c:	462a      	mov	r2, r5
   14c7e:	4818      	ldr	r0, [pc, #96]	; (14ce0 <bt_hci_le_enh_conn_complete+0x1d8>)
   14c80:	f7fc f8ee 	bl	10e60 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14c84:	211f      	movs	r1, #31
   14c86:	4640      	mov	r0, r8
   14c88:	f00c fd5b 	bl	21742 <bt_hci_disconnect>
		return;
   14c8c:	e7b9      	b.n	14c02 <bt_hci_le_enh_conn_complete+0xfa>
	memcpy(dst, src, sizeof(*dst));
   14c8e:	2207      	movs	r2, #7
   14c90:	a902      	add	r1, sp, #8
   14c92:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   14c96:	f00c fc46 	bl	21526 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14c9a:	f000 ff21 	bl	15ae0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   14c9e:	7a29      	ldrb	r1, [r5, #8]
   14ca0:	4c0e      	ldr	r4, [pc, #56]	; (14cdc <bt_hci_le_enh_conn_complete+0x1d4>)
   14ca2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   14ca6:	2207      	movs	r2, #7
   14ca8:	4421      	add	r1, r4
   14caa:	f105 0096 	add.w	r0, r5, #150	; 0x96
   14cae:	f00c fc3a 	bl	21526 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   14cb2:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   14cb6:	2200      	movs	r2, #0
   14cb8:	f001 0340 	and.w	r3, r1, #64	; 0x40
   14cbc:	4313      	orrs	r3, r2
   14cbe:	d091      	beq.n	14be4 <bt_hci_le_enh_conn_complete+0xdc>
			bt_le_adv_resume();
   14cc0:	f00c ff72 	bl	21ba8 <bt_le_adv_resume>
   14cc4:	e78e      	b.n	14be4 <bt_hci_le_enh_conn_complete+0xdc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14cc6:	2101      	movs	r1, #1
   14cc8:	4628      	mov	r0, r5
   14cca:	f001 fb5b 	bl	16384 <bt_conn_set_state>
   14cce:	e78f      	b.n	14bf0 <bt_hci_le_enh_conn_complete+0xe8>
   14cd0:	00025484 	.word	0x00025484
   14cd4:	0002545c 	.word	0x0002545c
   14cd8:	00026914 	.word	0x00026914
   14cdc:	200002b8 	.word	0x200002b8
   14ce0:	00026930 	.word	0x00026930

00014ce4 <le_remote_feat_complete>:
{
   14ce4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   14ce6:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14ce8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   14cec:	4630      	mov	r0, r6
   14cee:	f001 fb3f 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   14cf2:	b1b0      	cbz	r0, 14d22 <le_remote_feat_complete+0x3e>
   14cf4:	4604      	mov	r4, r0
	if (!evt->status) {
   14cf6:	782b      	ldrb	r3, [r5, #0]
   14cf8:	b32b      	cbz	r3, 14d46 <le_remote_feat_complete+0x62>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   14cfa:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14cfc:	f3bf 8f5b 	dmb	ish
   14d00:	e853 2f00 	ldrex	r2, [r3]
   14d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   14d08:	e843 2100 	strex	r1, r2, [r3]
   14d0c:	2900      	cmp	r1, #0
   14d0e:	d1f7      	bne.n	14d00 <le_remote_feat_complete+0x1c>
   14d10:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   14d14:	4620      	mov	r0, r4
   14d16:	f7ff fedd 	bl	14ad4 <conn_auto_initiate>
	bt_conn_unref(conn);
   14d1a:	4620      	mov	r0, r4
   14d1c:	f00d f8b2 	bl	21e84 <bt_conn_unref>
}
   14d20:	bd70      	pop	{r4, r5, r6, pc}
   14d22:	4b0c      	ldr	r3, [pc, #48]	; (14d54 <le_remote_feat_complete+0x70>)
   14d24:	4a0c      	ldr	r2, [pc, #48]	; (14d58 <le_remote_feat_complete+0x74>)
   14d26:	1a9b      	subs	r3, r3, r2
   14d28:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14d2a:	f04f 0200 	mov.w	r2, #0
   14d2e:	2101      	movs	r1, #1
   14d30:	f361 0202 	bfi	r2, r1, #0, #3
   14d34:	f36f 02c5 	bfc	r2, #3, #3
   14d38:	f363 128f 	bfi	r2, r3, #6, #10
   14d3c:	4631      	mov	r1, r6
   14d3e:	4807      	ldr	r0, [pc, #28]	; (14d5c <le_remote_feat_complete+0x78>)
   14d40:	f7fc f88e 	bl	10e60 <log_1>
		return;
   14d44:	e7ec      	b.n	14d20 <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   14d46:	2208      	movs	r2, #8
   14d48:	1ce9      	adds	r1, r5, #3
   14d4a:	30ac      	adds	r0, #172	; 0xac
   14d4c:	f00c fbeb 	bl	21526 <memcpy>
   14d50:	e7d3      	b.n	14cfa <le_remote_feat_complete+0x16>
   14d52:	bf00      	nop
   14d54:	00025484 	.word	0x00025484
   14d58:	0002545c 	.word	0x0002545c
   14d5c:	000266f4 	.word	0x000266f4

00014d60 <le_conn_param_neg_reply>:
{
   14d60:	b570      	push	{r4, r5, r6, lr}
   14d62:	4605      	mov	r5, r0
   14d64:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14d66:	2103      	movs	r1, #3
   14d68:	f242 0021 	movw	r0, #8225	; 0x2021
   14d6c:	f7ff fb68 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   14d70:	b160      	cbz	r0, 14d8c <le_conn_param_neg_reply+0x2c>
   14d72:	4606      	mov	r6, r0
   14d74:	2103      	movs	r1, #3
   14d76:	3008      	adds	r0, #8
   14d78:	f00e fd19 	bl	237ae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   14d7c:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   14d7e:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14d80:	4631      	mov	r1, r6
   14d82:	f242 0021 	movw	r0, #8225	; 0x2021
   14d86:	f7ff fe6b 	bl	14a60 <bt_hci_cmd_send>
}
   14d8a:	bd70      	pop	{r4, r5, r6, pc}
   14d8c:	4b08      	ldr	r3, [pc, #32]	; (14db0 <le_conn_param_neg_reply+0x50>)
   14d8e:	4a09      	ldr	r2, [pc, #36]	; (14db4 <le_conn_param_neg_reply+0x54>)
   14d90:	1a9b      	subs	r3, r3, r2
   14d92:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   14d94:	f04f 0100 	mov.w	r1, #0
   14d98:	2201      	movs	r2, #1
   14d9a:	f362 0102 	bfi	r1, r2, #0, #3
   14d9e:	f36f 01c5 	bfc	r1, #3, #3
   14da2:	f363 118f 	bfi	r1, r3, #6, #10
   14da6:	4804      	ldr	r0, [pc, #16]	; (14db8 <le_conn_param_neg_reply+0x58>)
   14da8:	f7fc f910 	bl	10fcc <log_0>
		return;
   14dac:	e7ed      	b.n	14d8a <le_conn_param_neg_reply+0x2a>
   14dae:	bf00      	nop
   14db0:	00025484 	.word	0x00025484
   14db4:	0002545c 	.word	0x0002545c
   14db8:	0002694c 	.word	0x0002694c

00014dbc <le_conn_param_req>:
{
   14dbc:	b530      	push	{r4, r5, lr}
   14dbe:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14dc0:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   14dc2:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14dc4:	885a      	ldrh	r2, [r3, #2]
   14dc6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14dca:	889a      	ldrh	r2, [r3, #4]
   14dcc:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14dd0:	88da      	ldrh	r2, [r3, #6]
   14dd2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   14dd6:	891b      	ldrh	r3, [r3, #8]
   14dd8:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   14ddc:	4620      	mov	r0, r4
   14dde:	f001 fac7 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   14de2:	b168      	cbz	r0, 14e00 <le_conn_param_req+0x44>
   14de4:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   14de6:	4669      	mov	r1, sp
   14de8:	f001 fc34 	bl	16654 <le_param_req>
   14dec:	b9f0      	cbnz	r0, 14e2c <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14dee:	211e      	movs	r1, #30
   14df0:	4620      	mov	r0, r4
   14df2:	f7ff ffb5 	bl	14d60 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   14df6:	4628      	mov	r0, r5
   14df8:	f00d f844 	bl	21e84 <bt_conn_unref>
}
   14dfc:	b003      	add	sp, #12
   14dfe:	bd30      	pop	{r4, r5, pc}
   14e00:	4b0d      	ldr	r3, [pc, #52]	; (14e38 <le_conn_param_req+0x7c>)
   14e02:	4a0e      	ldr	r2, [pc, #56]	; (14e3c <le_conn_param_req+0x80>)
   14e04:	1a9b      	subs	r3, r3, r2
   14e06:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14e08:	f04f 0200 	mov.w	r2, #0
   14e0c:	2101      	movs	r1, #1
   14e0e:	f361 0202 	bfi	r2, r1, #0, #3
   14e12:	f36f 02c5 	bfc	r2, #3, #3
   14e16:	f363 128f 	bfi	r2, r3, #6, #10
   14e1a:	4621      	mov	r1, r4
   14e1c:	4808      	ldr	r0, [pc, #32]	; (14e40 <le_conn_param_req+0x84>)
   14e1e:	f7fc f81f 	bl	10e60 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14e22:	2102      	movs	r1, #2
   14e24:	4620      	mov	r0, r4
   14e26:	f7ff ff9b 	bl	14d60 <le_conn_param_neg_reply>
		return;
   14e2a:	e7e7      	b.n	14dfc <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   14e2c:	4669      	mov	r1, sp
   14e2e:	4620      	mov	r0, r4
   14e30:	f00c fd26 	bl	21880 <le_conn_param_req_reply>
   14e34:	e7df      	b.n	14df6 <le_conn_param_req+0x3a>
   14e36:	bf00      	nop
   14e38:	00025484 	.word	0x00025484
   14e3c:	0002545c 	.word	0x0002545c
   14e40:	000266f4 	.word	0x000266f4

00014e44 <send_cmd>:
{
   14e44:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14e46:	2200      	movs	r2, #0
   14e48:	2300      	movs	r3, #0
   14e4a:	4837      	ldr	r0, [pc, #220]	; (14f28 <send_cmd+0xe4>)
   14e4c:	f00e fc39 	bl	236c2 <net_buf_get>
	BT_ASSERT(buf);
   14e50:	4604      	mov	r4, r0
   14e52:	b370      	cbz	r0, 14eb2 <send_cmd+0x6e>
   14e54:	4d35      	ldr	r5, [pc, #212]	; (14f2c <send_cmd+0xe8>)
   14e56:	f04f 32ff 	mov.w	r2, #4294967295
   14e5a:	f04f 33ff 	mov.w	r3, #4294967295
   14e5e:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
   14e62:	f006 fe85 	bl	1bb70 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14e66:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   14e6a:	b1b3      	cbz	r3, 14e9a <send_cmd+0x56>
   14e6c:	4b30      	ldr	r3, [pc, #192]	; (14f30 <send_cmd+0xec>)
   14e6e:	4a31      	ldr	r2, [pc, #196]	; (14f34 <send_cmd+0xf0>)
   14e70:	1a9b      	subs	r3, r3, r2
   14e72:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   14e74:	f04f 0100 	mov.w	r1, #0
   14e78:	2201      	movs	r2, #1
   14e7a:	f362 0102 	bfi	r1, r2, #0, #3
   14e7e:	f36f 01c5 	bfc	r1, #3, #3
   14e82:	f363 118f 	bfi	r1, r3, #6, #10
   14e86:	482c      	ldr	r0, [pc, #176]	; (14f38 <send_cmd+0xf4>)
   14e88:	f7fc f8a0 	bl	10fcc <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   14e8c:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   14e90:	f00e fc43 	bl	2371a <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14e94:	2300      	movs	r3, #0
   14e96:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   14e9a:	4620      	mov	r0, r4
   14e9c:	f00e fc63 	bl	23766 <net_buf_ref>
   14ea0:	4b22      	ldr	r3, [pc, #136]	; (14f2c <send_cmd+0xe8>)
   14ea2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	err = bt_send(buf);
   14ea6:	4620      	mov	r0, r4
   14ea8:	f7ff fdd0 	bl	14a4c <bt_send>
	if (err) {
   14eac:	4601      	mov	r1, r0
   14eae:	b970      	cbnz	r0, 14ece <send_cmd+0x8a>
}
   14eb0:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   14eb2:	f640 1316 	movw	r3, #2326	; 0x916
   14eb6:	4a21      	ldr	r2, [pc, #132]	; (14f3c <send_cmd+0xf8>)
   14eb8:	4921      	ldr	r1, [pc, #132]	; (14f40 <send_cmd+0xfc>)
   14eba:	4822      	ldr	r0, [pc, #136]	; (14f44 <send_cmd+0x100>)
   14ebc:	f00a feb6 	bl	1fc2c <printk>
   14ec0:	4040      	eors	r0, r0
   14ec2:	f380 8811 	msr	BASEPRI, r0
   14ec6:	f04f 0003 	mov.w	r0, #3
   14eca:	df02      	svc	2
   14ecc:	e7c2      	b.n	14e54 <send_cmd+0x10>
   14ece:	4b18      	ldr	r3, [pc, #96]	; (14f30 <send_cmd+0xec>)
   14ed0:	4a18      	ldr	r2, [pc, #96]	; (14f34 <send_cmd+0xf0>)
   14ed2:	1a9b      	subs	r3, r3, r2
   14ed4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   14ed6:	f04f 0200 	mov.w	r2, #0
   14eda:	2001      	movs	r0, #1
   14edc:	f360 0202 	bfi	r2, r0, #0, #3
   14ee0:	f36f 02c5 	bfc	r2, #3, #3
   14ee4:	f363 128f 	bfi	r2, r3, #6, #10
   14ee8:	4817      	ldr	r0, [pc, #92]	; (14f48 <send_cmd+0x104>)
   14eea:	f7fb ffb9 	bl	10e60 <log_1>
	z_impl_k_sem_give(sem);
   14eee:	4d0f      	ldr	r5, [pc, #60]	; (14f2c <send_cmd+0xe8>)
   14ef0:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
   14ef4:	f006 fe14 	bl	1bb20 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   14ef8:	4620      	mov	r0, r4
   14efa:	f003 ffd5 	bl	18ea8 <net_buf_id>
   14efe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   14f02:	4b12      	ldr	r3, [pc, #72]	; (14f4c <send_cmd+0x108>)
   14f04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   14f08:	4622      	mov	r2, r4
   14f0a:	211f      	movs	r1, #31
   14f0c:	8840      	ldrh	r0, [r0, #2]
   14f0e:	f7fe feb5 	bl	13c7c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   14f12:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
   14f16:	f00e fc00 	bl	2371a <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14f1a:	2300      	movs	r3, #0
   14f1c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
		net_buf_unref(buf);
   14f20:	4620      	mov	r0, r4
   14f22:	f00e fbfa 	bl	2371a <net_buf_unref>
   14f26:	e7c3      	b.n	14eb0 <send_cmd+0x6c>
   14f28:	200003d4 	.word	0x200003d4
   14f2c:	200002b8 	.word	0x200002b8
   14f30:	00025484 	.word	0x00025484
   14f34:	0002545c 	.word	0x0002545c
   14f38:	00026968 	.word	0x00026968
   14f3c:	0002663c 	.word	0x0002663c
   14f40:	000275ac 	.word	0x000275ac
   14f44:	0002668c 	.word	0x0002668c
   14f48:	000268f0 	.word	0x000268f0
   14f4c:	20036978 	.word	0x20036978

00014f50 <process_events>:
{
   14f50:	b570      	push	{r4, r5, r6, lr}
   14f52:	4604      	mov	r4, r0
   14f54:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   14f56:	e013      	b.n	14f80 <process_events+0x30>
				send_cmd();
   14f58:	f7ff ff74 	bl	14e44 <send_cmd>
   14f5c:	e00e      	b.n	14f7c <process_events+0x2c>
   14f5e:	4b12      	ldr	r3, [pc, #72]	; (14fa8 <process_events+0x58>)
   14f60:	4a12      	ldr	r2, [pc, #72]	; (14fac <process_events+0x5c>)
   14f62:	1a9b      	subs	r3, r3, r2
   14f64:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14f66:	2202      	movs	r2, #2
   14f68:	f362 0602 	bfi	r6, r2, #0, #3
   14f6c:	f36f 06c5 	bfc	r6, #3, #3
   14f70:	f363 168f 	bfi	r6, r3, #6, #10
   14f74:	4632      	mov	r2, r6
   14f76:	480e      	ldr	r0, [pc, #56]	; (14fb0 <process_events+0x60>)
   14f78:	f7fb ff72 	bl	10e60 <log_1>
	for (; count; ev++, count--) {
   14f7c:	3414      	adds	r4, #20
   14f7e:	3d01      	subs	r5, #1
   14f80:	b185      	cbz	r5, 14fa4 <process_events+0x54>
		switch (ev->state) {
   14f82:	68e1      	ldr	r1, [r4, #12]
   14f84:	f3c1 3145 	ubfx	r1, r1, #13, #6
   14f88:	2901      	cmp	r1, #1
   14f8a:	d9f7      	bls.n	14f7c <process_events+0x2c>
   14f8c:	2904      	cmp	r1, #4
   14f8e:	d1e6      	bne.n	14f5e <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   14f90:	7b23      	ldrb	r3, [r4, #12]
   14f92:	2b00      	cmp	r3, #0
   14f94:	d0e0      	beq.n	14f58 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14f96:	2b01      	cmp	r3, #1
   14f98:	d1f0      	bne.n	14f7c <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   14f9a:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   14f9c:	3838      	subs	r0, #56	; 0x38
   14f9e:	f001 fd8f 	bl	16ac0 <bt_conn_process_tx>
   14fa2:	e7eb      	b.n	14f7c <process_events+0x2c>
}
   14fa4:	bd70      	pop	{r4, r5, r6, pc}
   14fa6:	bf00      	nop
   14fa8:	00025484 	.word	0x00025484
   14fac:	0002545c 	.word	0x0002545c
   14fb0:	00026984 	.word	0x00026984

00014fb4 <hci_tx_thread>:
{
   14fb4:	b538      	push	{r3, r4, r5, lr}
   14fb6:	e005      	b.n	14fc4 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   14fb8:	4621      	mov	r1, r4
   14fba:	4813      	ldr	r0, [pc, #76]	; (15008 <hci_tx_thread+0x54>)
   14fbc:	f7ff ffc8 	bl	14f50 <process_events>
	z_impl_k_yield();
   14fc0:	f007 facc 	bl	1c55c <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   14fc4:	4d10      	ldr	r5, [pc, #64]	; (15008 <hci_tx_thread+0x54>)
   14fc6:	68eb      	ldr	r3, [r5, #12]
   14fc8:	f36f 3352 	bfc	r3, #13, #6
   14fcc:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14fce:	f105 0014 	add.w	r0, r5, #20
   14fd2:	f001 f9ad 	bl	16330 <bt_conn_prepare_events>
   14fd6:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   14fd8:	f04f 32ff 	mov.w	r2, #4294967295
   14fdc:	f04f 33ff 	mov.w	r3, #4294967295
   14fe0:	4621      	mov	r1, r4
   14fe2:	4628      	mov	r0, r5
   14fe4:	f007 fdf2 	bl	1cbcc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   14fe8:	2800      	cmp	r0, #0
   14fea:	d0e5      	beq.n	14fb8 <hci_tx_thread+0x4>
   14fec:	f640 1379 	movw	r3, #2425	; 0x979
   14ff0:	4a06      	ldr	r2, [pc, #24]	; (1500c <hci_tx_thread+0x58>)
   14ff2:	4907      	ldr	r1, [pc, #28]	; (15010 <hci_tx_thread+0x5c>)
   14ff4:	4807      	ldr	r0, [pc, #28]	; (15014 <hci_tx_thread+0x60>)
   14ff6:	f00a fe19 	bl	1fc2c <printk>
   14ffa:	4040      	eors	r0, r0
   14ffc:	f380 8811 	msr	BASEPRI, r0
   15000:	f04f 0003 	mov.w	r0, #3
   15004:	df02      	svc	2
   15006:	e7d7      	b.n	14fb8 <hci_tx_thread+0x4>
   15008:	2003393c 	.word	0x2003393c
   1500c:	0002663c 	.word	0x0002663c
   15010:	000267a4 	.word	0x000267a4
   15014:	0002668c 	.word	0x0002668c

00015018 <hci_event_prio>:
{
   15018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1501c:	b084      	sub	sp, #16
   1501e:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15020:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   15024:	4628      	mov	r0, r5
   15026:	f00e fbfa 	bl	2381e <net_buf_simple_headroom>
   1502a:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1502e:	89a3      	ldrh	r3, [r4, #12]
   15030:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15034:	2b01      	cmp	r3, #1
   15036:	d915      	bls.n	15064 <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   15038:	2102      	movs	r1, #2
   1503a:	4628      	mov	r0, r5
   1503c:	f00e fbdf 	bl	237fe <net_buf_simple_pull_mem>
   15040:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15042:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   15044:	3b05      	subs	r3, #5
   15046:	2b15      	cmp	r3, #21
   15048:	d81c      	bhi.n	15084 <hci_event_prio+0x6c>
   1504a:	e8df f003 	tbb	[pc, r3]
   1504e:	1b19      	.short	0x1b19
   15050:	1b1b1b1b 	.word	0x1b1b1b1b
   15054:	3f1b1b1b 	.word	0x3f1b1b1b
   15058:	1b1b1b3f 	.word	0x1b1b1b3f
   1505c:	1b1b1b3f 	.word	0x1b1b1b3f
   15060:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15064:	f640 5306 	movw	r3, #3334	; 0xd06
   15068:	4a3b      	ldr	r2, [pc, #236]	; (15158 <hci_event_prio+0x140>)
   1506a:	493c      	ldr	r1, [pc, #240]	; (1515c <hci_event_prio+0x144>)
   1506c:	483c      	ldr	r0, [pc, #240]	; (15160 <hci_event_prio+0x148>)
   1506e:	f00a fddd 	bl	1fc2c <printk>
   15072:	4040      	eors	r0, r0
   15074:	f380 8811 	msr	BASEPRI, r0
   15078:	f04f 0003 	mov.w	r0, #3
   1507c:	df02      	svc	2
   1507e:	e7db      	b.n	15038 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15080:	2603      	movs	r6, #3
   15082:	e000      	b.n	15086 <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   15084:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15086:	f016 0f01 	tst.w	r6, #1
   1508a:	d021      	beq.n	150d0 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1508c:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   1508e:	2300      	movs	r3, #0
   15090:	2b04      	cmp	r3, #4
   15092:	d83f      	bhi.n	15114 <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   15094:	4a33      	ldr	r2, [pc, #204]	; (15164 <hci_event_prio+0x14c>)
   15096:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   1509a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1509e:	4295      	cmp	r5, r2
   150a0:	d124      	bne.n	150ec <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   150a2:	89a1      	ldrh	r1, [r4, #12]
   150a4:	7843      	ldrb	r3, [r0, #1]
   150a6:	4299      	cmp	r1, r3
   150a8:	d322      	bcc.n	150f0 <hci_event_prio+0xd8>
		handler->handler(buf);
   150aa:	6843      	ldr	r3, [r0, #4]
   150ac:	4620      	mov	r0, r4
   150ae:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   150b0:	f016 0f02 	tst.w	r6, #2
   150b4:	d04c      	beq.n	15150 <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   150b6:	6923      	ldr	r3, [r4, #16]
   150b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   150bc:	4413      	add	r3, r2
   150be:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   150c0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   150c4:	81a3      	strh	r3, [r4, #12]
}
   150c6:	b004      	add	sp, #16
   150c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   150cc:	2601      	movs	r6, #1
   150ce:	e7da      	b.n	15086 <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   150d0:	f640 530a 	movw	r3, #3338	; 0xd0a
   150d4:	4a20      	ldr	r2, [pc, #128]	; (15158 <hci_event_prio+0x140>)
   150d6:	4924      	ldr	r1, [pc, #144]	; (15168 <hci_event_prio+0x150>)
   150d8:	4821      	ldr	r0, [pc, #132]	; (15160 <hci_event_prio+0x148>)
   150da:	f00a fda7 	bl	1fc2c <printk>
   150de:	4040      	eors	r0, r0
   150e0:	f380 8811 	msr	BASEPRI, r0
   150e4:	f04f 0003 	mov.w	r0, #3
   150e8:	df02      	svc	2
   150ea:	e7cf      	b.n	1508c <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   150ec:	3301      	adds	r3, #1
   150ee:	e7cf      	b.n	15090 <hci_event_prio+0x78>
   150f0:	4a1e      	ldr	r2, [pc, #120]	; (1516c <hci_event_prio+0x154>)
   150f2:	4b1f      	ldr	r3, [pc, #124]	; (15170 <hci_event_prio+0x158>)
   150f4:	1ad2      	subs	r2, r2, r3
   150f6:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   150f8:	f04f 0300 	mov.w	r3, #0
   150fc:	2001      	movs	r0, #1
   150fe:	f360 0302 	bfi	r3, r0, #0, #3
   15102:	f36f 03c5 	bfc	r3, #3, #3
   15106:	f362 138f 	bfi	r3, r2, #6, #10
   1510a:	462a      	mov	r2, r5
   1510c:	4819      	ldr	r0, [pc, #100]	; (15174 <hci_event_prio+0x15c>)
   1510e:	f7fb fedd 	bl	10ecc <log_2>
			return;
   15112:	e7cd      	b.n	150b0 <hci_event_prio+0x98>
   15114:	4b15      	ldr	r3, [pc, #84]	; (1516c <hci_event_prio+0x154>)
   15116:	4a16      	ldr	r2, [pc, #88]	; (15170 <hci_event_prio+0x158>)
   15118:	1a9b      	subs	r3, r3, r2
   1511a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1511c:	f04f 0700 	mov.w	r7, #0
   15120:	2202      	movs	r2, #2
   15122:	f362 0702 	bfi	r7, r2, #0, #3
   15126:	f36f 07c5 	bfc	r7, #3, #3
   1512a:	f363 178f 	bfi	r7, r3, #6, #10
   1512e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   15132:	4641      	mov	r1, r8
   15134:	68a0      	ldr	r0, [r4, #8]
   15136:	f7fe fa59 	bl	135ec <bt_hex_real>
   1513a:	f7fb fd17 	bl	10b6c <z_log_strdup>
   1513e:	4603      	mov	r3, r0
   15140:	f8ad 7000 	strh.w	r7, [sp]
   15144:	4642      	mov	r2, r8
   15146:	4629      	mov	r1, r5
   15148:	480b      	ldr	r0, [pc, #44]	; (15178 <hci_event_prio+0x160>)
   1514a:	f7fb fe4b 	bl	10de4 <log_3>
   1514e:	e7af      	b.n	150b0 <hci_event_prio+0x98>
		net_buf_unref(buf);
   15150:	4620      	mov	r0, r4
   15152:	f00e fae2 	bl	2371a <net_buf_unref>
}
   15156:	e7b6      	b.n	150c6 <hci_event_prio+0xae>
   15158:	0002663c 	.word	0x0002663c
   1515c:	00026670 	.word	0x00026670
   15160:	0002668c 	.word	0x0002668c
   15164:	00026aa8 	.word	0x00026aa8
   15168:	000269a8 	.word	0x000269a8
   1516c:	00025484 	.word	0x00025484
   15170:	0002545c 	.word	0x0002545c
   15174:	00026718 	.word	0x00026718
   15178:	0002673c 	.word	0x0002673c

0001517c <bt_recv>:
{
   1517c:	b538      	push	{r3, r4, r5, lr}
   1517e:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15180:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   15182:	2d01      	cmp	r5, #1
   15184:	d007      	beq.n	15196 <bt_recv+0x1a>
   15186:	2d03      	cmp	r5, #3
   15188:	d12c      	bne.n	151e4 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   1518a:	4601      	mov	r1, r0
   1518c:	4821      	ldr	r0, [pc, #132]	; (15214 <bt_recv+0x98>)
   1518e:	f00e fab7 	bl	23700 <net_buf_put>
		return 0;
   15192:	2000      	movs	r0, #0
}
   15194:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   15196:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15198:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   1519a:	3b05      	subs	r3, #5
   1519c:	2b15      	cmp	r3, #21
   1519e:	d80e      	bhi.n	151be <bt_recv+0x42>
   151a0:	e8df f003 	tbb	[pc, r3]
   151a4:	0d0d0d0b 	.word	0x0d0d0d0b
   151a8:	0d0d0d0d 	.word	0x0d0d0d0d
   151ac:	0d0e0e0d 	.word	0x0d0e0e0d
   151b0:	0d0e0d0d 	.word	0x0d0e0d0d
   151b4:	0d0d0d0d 	.word	0x0d0d0d0d
   151b8:	0e0d      	.short	0x0e0d
   151ba:	2503      	movs	r5, #3
   151bc:	e000      	b.n	151c0 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   151be:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   151c0:	f015 0f01 	tst.w	r5, #1
   151c4:	d104      	bne.n	151d0 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   151c6:	f015 0f02 	tst.w	r5, #2
   151ca:	d105      	bne.n	151d8 <bt_recv+0x5c>
		return 0;
   151cc:	2000      	movs	r0, #0
   151ce:	e7e1      	b.n	15194 <bt_recv+0x18>
			hci_event_prio(buf);
   151d0:	4620      	mov	r0, r4
   151d2:	f7ff ff21 	bl	15018 <hci_event_prio>
   151d6:	e7f6      	b.n	151c6 <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   151d8:	4621      	mov	r1, r4
   151da:	480e      	ldr	r0, [pc, #56]	; (15214 <bt_recv+0x98>)
   151dc:	f00e fa90 	bl	23700 <net_buf_put>
		return 0;
   151e0:	2000      	movs	r0, #0
   151e2:	e7d7      	b.n	15194 <bt_recv+0x18>
   151e4:	4b0c      	ldr	r3, [pc, #48]	; (15218 <bt_recv+0x9c>)
   151e6:	4a0d      	ldr	r2, [pc, #52]	; (1521c <bt_recv+0xa0>)
   151e8:	1a9b      	subs	r3, r3, r2
   151ea:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   151ec:	f04f 0200 	mov.w	r2, #0
   151f0:	2101      	movs	r1, #1
   151f2:	f361 0202 	bfi	r2, r1, #0, #3
   151f6:	f36f 02c5 	bfc	r2, #3, #3
   151fa:	f363 128f 	bfi	r2, r3, #6, #10
   151fe:	4629      	mov	r1, r5
   15200:	4807      	ldr	r0, [pc, #28]	; (15220 <bt_recv+0xa4>)
   15202:	f7fb fe2d 	bl	10e60 <log_1>
		net_buf_unref(buf);
   15206:	4620      	mov	r0, r4
   15208:	f00e fa87 	bl	2371a <net_buf_unref>
		return -EINVAL;
   1520c:	f06f 0015 	mvn.w	r0, #21
   15210:	e7c0      	b.n	15194 <bt_recv+0x18>
   15212:	bf00      	nop
   15214:	200003bc 	.word	0x200003bc
   15218:	00025484 	.word	0x00025484
   1521c:	0002545c 	.word	0x0002545c
   15220:	000269c4 	.word	0x000269c4

00015224 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15224:	4b0a      	ldr	r3, [pc, #40]	; (15250 <bt_hci_driver_register+0x2c>)
   15226:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1522a:	b943      	cbnz	r3, 1523e <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1522c:	68c3      	ldr	r3, [r0, #12]
   1522e:	b14b      	cbz	r3, 15244 <bt_hci_driver_register+0x20>
   15230:	6903      	ldr	r3, [r0, #16]
   15232:	b153      	cbz	r3, 1524a <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   15234:	4b06      	ldr	r3, [pc, #24]	; (15250 <bt_hci_driver_register+0x2c>)
   15236:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
	return 0;
   1523a:	2000      	movs	r0, #0
   1523c:	4770      	bx	lr
		return -EALREADY;
   1523e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15242:	4770      	bx	lr
		return -EINVAL;
   15244:	f06f 0015 	mvn.w	r0, #21
   15248:	4770      	bx	lr
   1524a:	f06f 0015 	mvn.w	r0, #21
}
   1524e:	4770      	bx	lr
   15250:	200002b8 	.word	0x200002b8

00015254 <bt_finalize_init>:
{
   15254:	b508      	push	{r3, lr}
   15256:	4b08      	ldr	r3, [pc, #32]	; (15278 <bt_finalize_init+0x24>)
   15258:	f3bf 8f5b 	dmb	ish
   1525c:	e853 2f00 	ldrex	r2, [r3]
   15260:	f042 0202 	orr.w	r2, r2, #2
   15264:	e843 2100 	strex	r1, r2, [r3]
   15268:	2900      	cmp	r1, #0
   1526a:	d1f7      	bne.n	1525c <bt_finalize_init+0x8>
   1526c:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
   15270:	f7fe fe22 	bl	13eb8 <bt_dev_show_info>
}
   15274:	bd08      	pop	{r3, pc}
   15276:	bf00      	nop
   15278:	20000350 	.word	0x20000350

0001527c <init_work>:
{
   1527c:	b508      	push	{r3, lr}
	err = bt_init();
   1527e:	f00c fb24 	bl	218ca <bt_init>
	if (ready_cb) {
   15282:	4b02      	ldr	r3, [pc, #8]	; (1528c <init_work+0x10>)
   15284:	681b      	ldr	r3, [r3, #0]
   15286:	b103      	cbz	r3, 1528a <init_work+0xe>
		ready_cb(err);
   15288:	4798      	blx	r3
}
   1528a:	bd08      	pop	{r3, pc}
   1528c:	20036994 	.word	0x20036994

00015290 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   15290:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   15294:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   15296:	4b41      	ldr	r3, [pc, #260]	; (1539c <bt_enable+0x10c>)
   15298:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1529c:	2b00      	cmp	r3, #0
   1529e:	d050      	beq.n	15342 <bt_enable+0xb2>
   152a0:	4605      	mov	r5, r0
   152a2:	4b3f      	ldr	r3, [pc, #252]	; (153a0 <bt_enable+0x110>)
   152a4:	f3bf 8f5b 	dmb	ish
   152a8:	e853 2f00 	ldrex	r2, [r3]
   152ac:	f042 0101 	orr.w	r1, r2, #1
   152b0:	e843 1000 	strex	r0, r1, [r3]
   152b4:	2800      	cmp	r0, #0
   152b6:	d1f7      	bne.n	152a8 <bt_enable+0x18>
   152b8:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   152bc:	f012 0f01 	tst.w	r2, #1
   152c0:	d168      	bne.n	15394 <bt_enable+0x104>
		}
	} else {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}

	ready_cb = cb;
   152c2:	4b38      	ldr	r3, [pc, #224]	; (153a4 <bt_enable+0x114>)
   152c4:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   152c6:	f04f 0800 	mov.w	r8, #0
   152ca:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   152ce:	4e36      	ldr	r6, [pc, #216]	; (153a8 <bt_enable+0x118>)
   152d0:	e9cd 8906 	strd	r8, r9, [sp, #24]
   152d4:	2400      	movs	r4, #0
   152d6:	9404      	str	r4, [sp, #16]
   152d8:	f06f 0308 	mvn.w	r3, #8
   152dc:	9303      	str	r3, [sp, #12]
   152de:	9402      	str	r4, [sp, #8]
   152e0:	9401      	str	r4, [sp, #4]
   152e2:	9400      	str	r4, [sp, #0]
   152e4:	4b31      	ldr	r3, [pc, #196]	; (153ac <bt_enable+0x11c>)
   152e6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   152ea:	4931      	ldr	r1, [pc, #196]	; (153b0 <bt_enable+0x120>)
   152ec:	4630      	mov	r0, r6
   152ee:	f00f f997 	bl	24620 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   152f2:	4930      	ldr	r1, [pc, #192]	; (153b4 <bt_enable+0x124>)
   152f4:	4630      	mov	r0, r6
   152f6:	f006 fa25 	bl	1b744 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   152fa:	4e2f      	ldr	r6, [pc, #188]	; (153b8 <bt_enable+0x128>)
   152fc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   15300:	9404      	str	r4, [sp, #16]
   15302:	f06f 0307 	mvn.w	r3, #7
   15306:	9303      	str	r3, [sp, #12]
   15308:	9402      	str	r4, [sp, #8]
   1530a:	9401      	str	r4, [sp, #4]
   1530c:	9400      	str	r4, [sp, #0]
   1530e:	4b2b      	ldr	r3, [pc, #172]	; (153bc <bt_enable+0x12c>)
   15310:	f44f 6280 	mov.w	r2, #1024	; 0x400
   15314:	492a      	ldr	r1, [pc, #168]	; (153c0 <bt_enable+0x130>)
   15316:	4630      	mov	r0, r6
   15318:	f00f f982 	bl	24620 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1531c:	4929      	ldr	r1, [pc, #164]	; (153c4 <bt_enable+0x134>)
   1531e:	4630      	mov	r0, r6
   15320:	f006 fa10 	bl	1b744 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   15324:	4b1d      	ldr	r3, [pc, #116]	; (1539c <bt_enable+0x10c>)
   15326:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1532a:	68db      	ldr	r3, [r3, #12]
   1532c:	4798      	blx	r3
	if (err) {
   1532e:	4604      	mov	r4, r0
   15330:	b9d0      	cbnz	r0, 15368 <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   15332:	b35d      	cbz	r5, 1538c <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   15334:	4824      	ldr	r0, [pc, #144]	; (153c8 <bt_enable+0x138>)
   15336:	f006 fdbd 	bl	1beb4 <k_work_submit>
	return 0;
}
   1533a:	4620      	mov	r0, r4
   1533c:	b008      	add	sp, #32
   1533e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   15342:	4b22      	ldr	r3, [pc, #136]	; (153cc <bt_enable+0x13c>)
   15344:	4a22      	ldr	r2, [pc, #136]	; (153d0 <bt_enable+0x140>)
   15346:	1a9b      	subs	r3, r3, r2
   15348:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   1534a:	f04f 0100 	mov.w	r1, #0
   1534e:	2201      	movs	r2, #1
   15350:	f362 0102 	bfi	r1, r2, #0, #3
   15354:	f36f 01c5 	bfc	r1, #3, #3
   15358:	f363 118f 	bfi	r1, r3, #6, #10
   1535c:	481d      	ldr	r0, [pc, #116]	; (153d4 <bt_enable+0x144>)
   1535e:	f7fb fe35 	bl	10fcc <log_0>
		return -ENODEV;
   15362:	f06f 0412 	mvn.w	r4, #18
   15366:	e7e8      	b.n	1533a <bt_enable+0xaa>
   15368:	4b18      	ldr	r3, [pc, #96]	; (153cc <bt_enable+0x13c>)
   1536a:	4a19      	ldr	r2, [pc, #100]	; (153d0 <bt_enable+0x140>)
   1536c:	1a9b      	subs	r3, r3, r2
   1536e:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   15370:	f04f 0200 	mov.w	r2, #0
   15374:	2101      	movs	r1, #1
   15376:	f361 0202 	bfi	r2, r1, #0, #3
   1537a:	f36f 02c5 	bfc	r2, #3, #3
   1537e:	f363 128f 	bfi	r2, r3, #6, #10
   15382:	4601      	mov	r1, r0
   15384:	4814      	ldr	r0, [pc, #80]	; (153d8 <bt_enable+0x148>)
   15386:	f7fb fd6b 	bl	10e60 <log_1>
		return err;
   1538a:	e7d6      	b.n	1533a <bt_enable+0xaa>
		return bt_init();
   1538c:	f00c fa9d 	bl	218ca <bt_init>
   15390:	4604      	mov	r4, r0
   15392:	e7d2      	b.n	1533a <bt_enable+0xaa>
		return -EALREADY;
   15394:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15398:	e7cf      	b.n	1533a <bt_enable+0xaa>
   1539a:	bf00      	nop
   1539c:	200002b8 	.word	0x200002b8
   153a0:	20000350 	.word	0x20000350
   153a4:	20036994 	.word	0x20036994
   153a8:	20034a20 	.word	0x20034a20
   153ac:	00014fb5 	.word	0x00014fb5
   153b0:	20038a20 	.word	0x20038a20
   153b4:	000269f4 	.word	0x000269f4
   153b8:	20034968 	.word	0x20034968
   153bc:	000143b9 	.word	0x000143b9
   153c0:	20038600 	.word	0x20038600
   153c4:	000269fc 	.word	0x000269fc
   153c8:	20000340 	.word	0x20000340
   153cc:	00025484 	.word	0x00025484
   153d0:	0002545c 	.word	0x0002545c
   153d4:	000269d8 	.word	0x000269d8
   153d8:	00026a04 	.word	0x00026a04

000153dc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   153dc:	4800      	ldr	r0, [pc, #0]	; (153e0 <bt_get_name+0x4>)
   153de:	4770      	bx	lr
   153e0:	00025a60 	.word	0x00025a60

000153e4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   153e4:	b570      	push	{r4, r5, r6, lr}
   153e6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   153e8:	2400      	movs	r4, #0
   153ea:	4b0a      	ldr	r3, [pc, #40]	; (15414 <id_find+0x30>)
   153ec:	79db      	ldrb	r3, [r3, #7]
   153ee:	42a3      	cmp	r3, r4
   153f0:	d90c      	bls.n	1540c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   153f2:	4626      	mov	r6, r4
   153f4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   153f8:	2207      	movs	r2, #7
   153fa:	4b06      	ldr	r3, [pc, #24]	; (15414 <id_find+0x30>)
   153fc:	4419      	add	r1, r3
   153fe:	4628      	mov	r0, r5
   15400:	f00c f864 	bl	214cc <memcmp>
   15404:	b120      	cbz	r0, 15410 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   15406:	3401      	adds	r4, #1
   15408:	b2e4      	uxtb	r4, r4
   1540a:	e7ee      	b.n	153ea <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   1540c:	f06f 0601 	mvn.w	r6, #1
}
   15410:	4630      	mov	r0, r6
   15412:	bd70      	pop	{r4, r5, r6, pc}
   15414:	200002b8 	.word	0x200002b8

00015418 <set_random_address>:
{
   15418:	b570      	push	{r4, r5, r6, lr}
   1541a:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1541c:	2206      	movs	r2, #6
   1541e:	4914      	ldr	r1, [pc, #80]	; (15470 <set_random_address+0x58>)
   15420:	f00c f854 	bl	214cc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   15424:	4605      	mov	r5, r0
   15426:	b908      	cbnz	r0, 1542c <set_random_address+0x14>
}
   15428:	4628      	mov	r0, r5
   1542a:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1542c:	2106      	movs	r1, #6
   1542e:	f242 0005 	movw	r0, #8197	; 0x2005
   15432:	f7ff f805 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   15436:	4605      	mov	r5, r0
   15438:	b1b8      	cbz	r0, 1546a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1543a:	2206      	movs	r2, #6
   1543c:	4621      	mov	r1, r4
   1543e:	3008      	adds	r0, #8
   15440:	f00e f9bb 	bl	237ba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   15444:	2200      	movs	r2, #0
   15446:	4629      	mov	r1, r5
   15448:	f242 0005 	movw	r0, #8197	; 0x2005
   1544c:	f7ff f834 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   15450:	4605      	mov	r5, r0
   15452:	2800      	cmp	r0, #0
   15454:	d1e8      	bne.n	15428 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   15456:	4e06      	ldr	r6, [pc, #24]	; (15470 <set_random_address+0x58>)
   15458:	2206      	movs	r2, #6
   1545a:	4621      	mov	r1, r4
   1545c:	4630      	mov	r0, r6
   1545e:	f00c f862 	bl	21526 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   15462:	2301      	movs	r3, #1
   15464:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   15468:	e7de      	b.n	15428 <set_random_address+0x10>
		return -ENOBUFS;
   1546a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1546e:	e7db      	b.n	15428 <set_random_address+0x10>
   15470:	200002e5 	.word	0x200002e5

00015474 <id_create>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   15474:	b530      	push	{r4, r5, lr}
   15476:	b085      	sub	sp, #20
   15478:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1547a:	460d      	mov	r5, r1
   1547c:	b149      	cbz	r1, 15492 <id_create+0x1e>
   1547e:	2300      	movs	r3, #0
   15480:	9302      	str	r3, [sp, #8]
   15482:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   15486:	2207      	movs	r2, #7
   15488:	a902      	add	r1, sp, #8
   1548a:	4628      	mov	r0, r5
   1548c:	f00c f81e 	bl	214cc <memcmp>
   15490:	b9c0      	cbnz	r0, 154c4 <id_create+0x50>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
	} else {
		bt_addr_le_t new_addr;

		do {
			bt_addr_le_create_static(&new_addr);
   15492:	4668      	mov	r0, sp
   15494:	f00c f903 	bl	2169e <bt_addr_le_create_static>
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   15498:	4668      	mov	r0, sp
   1549a:	f7ff ffa3 	bl	153e4 <id_find>
   1549e:	2800      	cmp	r0, #0
   154a0:	daf7      	bge.n	15492 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   154a2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   154a6:	4b0c      	ldr	r3, [pc, #48]	; (154d8 <id_create+0x64>)
   154a8:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   154aa:	2207      	movs	r2, #7
   154ac:	4669      	mov	r1, sp
   154ae:	4620      	mov	r0, r4
   154b0:	f00c f839 	bl	21526 <memcpy>

		if (addr) {
   154b4:	b125      	cbz	r5, 154c0 <id_create+0x4c>
   154b6:	2207      	movs	r2, #7
   154b8:	4621      	mov	r1, r4
   154ba:	4628      	mov	r0, r5
   154bc:	f00c f833 	bl	21526 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   154c0:	b005      	add	sp, #20
   154c2:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   154c4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   154c8:	2207      	movs	r2, #7
   154ca:	4629      	mov	r1, r5
   154cc:	4802      	ldr	r0, [pc, #8]	; (154d8 <id_create+0x64>)
   154ce:	4420      	add	r0, r4
   154d0:	f00c f829 	bl	21526 <memcpy>
}
   154d4:	e7f4      	b.n	154c0 <id_create+0x4c>
   154d6:	bf00      	nop
   154d8:	200002b8 	.word	0x200002b8

000154dc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   154dc:	b570      	push	{r4, r5, r6, lr}
   154de:	b084      	sub	sp, #16
   154e0:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   154e2:	4605      	mov	r5, r0
   154e4:	b340      	cbz	r0, 15538 <bt_id_create+0x5c>
   154e6:	2300      	movs	r3, #0
   154e8:	9300      	str	r3, [sp, #0]
   154ea:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   154ee:	2207      	movs	r2, #7
   154f0:	4669      	mov	r1, sp
   154f2:	f00b ffeb 	bl	214cc <memcmp>
   154f6:	b1f8      	cbz	r0, 15538 <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   154f8:	782b      	ldrb	r3, [r5, #0]
   154fa:	2b01      	cmp	r3, #1
   154fc:	d104      	bne.n	15508 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   154fe:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15504:	2bc0      	cmp	r3, #192	; 0xc0
   15506:	d012      	beq.n	1552e <bt_id_create+0x52>
   15508:	4b24      	ldr	r3, [pc, #144]	; (1559c <bt_id_create+0xc0>)
   1550a:	4a25      	ldr	r2, [pc, #148]	; (155a0 <bt_id_create+0xc4>)
   1550c:	1a9b      	subs	r3, r3, r2
   1550e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   15510:	f04f 0100 	mov.w	r1, #0
   15514:	2201      	movs	r2, #1
   15516:	f362 0102 	bfi	r1, r2, #0, #3
   1551a:	f36f 01c5 	bfc	r1, #3, #3
   1551e:	f363 118f 	bfi	r1, r3, #6, #10
   15522:	4820      	ldr	r0, [pc, #128]	; (155a4 <bt_id_create+0xc8>)
   15524:	f7fb fd52 	bl	10fcc <log_0>
			return -EINVAL;
   15528:	f06f 0615 	mvn.w	r6, #21
   1552c:	e026      	b.n	1557c <bt_id_create+0xa0>
		}

		if (id_find(addr) >= 0) {
   1552e:	4628      	mov	r0, r5
   15530:	f7ff ff58 	bl	153e4 <id_find>
   15534:	2800      	cmp	r0, #0
   15536:	da24      	bge.n	15582 <bt_id_create+0xa6>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15538:	bb4c      	cbnz	r4, 1558e <bt_id_create+0xb2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1553a:	4b1b      	ldr	r3, [pc, #108]	; (155a8 <bt_id_create+0xcc>)
   1553c:	79db      	ldrb	r3, [r3, #7]
   1553e:	2b01      	cmp	r3, #1
   15540:	d028      	beq.n	15594 <bt_id_create+0xb8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15542:	f3bf 8f5b 	dmb	ish
   15546:	4b19      	ldr	r3, [pc, #100]	; (155ac <bt_id_create+0xd0>)
   15548:	681b      	ldr	r3, [r3, #0]
   1554a:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1554e:	f013 0f01 	tst.w	r3, #1
   15552:	d10a      	bne.n	1556a <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   15554:	b1c5      	cbz	r5, 15588 <bt_id_create+0xac>
   15556:	2300      	movs	r3, #0
   15558:	9302      	str	r3, [sp, #8]
   1555a:	f8cd 300b 	str.w	r3, [sp, #11]
   1555e:	2207      	movs	r2, #7
   15560:	a902      	add	r1, sp, #8
   15562:	4628      	mov	r0, r5
   15564:	f00b ffb2 	bl	214cc <memcmp>
   15568:	b170      	cbz	r0, 15588 <bt_id_create+0xac>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   1556a:	4b0f      	ldr	r3, [pc, #60]	; (155a8 <bt_id_create+0xcc>)
   1556c:	79d8      	ldrb	r0, [r3, #7]
   1556e:	1c42      	adds	r2, r0, #1
   15570:	71da      	strb	r2, [r3, #7]
   15572:	4606      	mov	r6, r0
	id_create(new_id, addr, irk);
   15574:	4622      	mov	r2, r4
   15576:	4629      	mov	r1, r5
   15578:	f7ff ff7c 	bl	15474 <id_create>

	return new_id;
}
   1557c:	4630      	mov	r0, r6
   1557e:	b004      	add	sp, #16
   15580:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   15582:	f06f 0677 	mvn.w	r6, #119	; 0x77
   15586:	e7f9      	b.n	1557c <bt_id_create+0xa0>
			return -EINVAL;
   15588:	f06f 0615 	mvn.w	r6, #21
   1558c:	e7f6      	b.n	1557c <bt_id_create+0xa0>
		return -EINVAL;
   1558e:	f06f 0615 	mvn.w	r6, #21
   15592:	e7f3      	b.n	1557c <bt_id_create+0xa0>
		return -ENOMEM;
   15594:	f06f 060b 	mvn.w	r6, #11
   15598:	e7f0      	b.n	1557c <bt_id_create+0xa0>
   1559a:	bf00      	nop
   1559c:	0002548c 	.word	0x0002548c
   155a0:	0002545c 	.word	0x0002545c
   155a4:	00026ae0 	.word	0x00026ae0
   155a8:	200002b8 	.word	0x200002b8
   155ac:	20000350 	.word	0x20000350

000155b0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   155b0:	b530      	push	{r4, r5, lr}
   155b2:	b087      	sub	sp, #28
   155b4:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   155b6:	aa01      	add	r2, sp, #4
   155b8:	2100      	movs	r1, #0
   155ba:	f241 0009 	movw	r0, #4105	; 0x1009
   155be:	f7fe ff7b 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   155c2:	b9f0      	cbnz	r0, 15602 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   155c4:	9b01      	ldr	r3, [sp, #4]
   155c6:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   155c8:	3401      	adds	r4, #1
   155ca:	2300      	movs	r3, #0
   155cc:	9302      	str	r3, [sp, #8]
   155ce:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   155d2:	2206      	movs	r2, #6
   155d4:	a902      	add	r1, sp, #8
   155d6:	4620      	mov	r0, r4
   155d8:	f00b ff78 	bl	214cc <memcmp>
   155dc:	b158      	cbz	r0, 155f6 <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   155de:	4b18      	ldr	r3, [pc, #96]	; (15640 <bt_id_read_public_addr+0x90>)
   155e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   155e4:	9004      	str	r0, [sp, #16]
   155e6:	f8ad 1014 	strh.w	r1, [sp, #20]
   155ea:	2206      	movs	r2, #6
   155ec:	a904      	add	r1, sp, #16
   155ee:	4620      	mov	r0, r4
   155f0:	f00b ff6c 	bl	214cc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   155f4:	b9b8      	cbnz	r0, 15626 <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   155f6:	9801      	ldr	r0, [sp, #4]
   155f8:	f00e f88f 	bl	2371a <net_buf_unref>
		return 0U;
   155fc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   155fe:	b007      	add	sp, #28
   15600:	bd30      	pop	{r4, r5, pc}
   15602:	4b10      	ldr	r3, [pc, #64]	; (15644 <bt_id_read_public_addr+0x94>)
   15604:	4a10      	ldr	r2, [pc, #64]	; (15648 <bt_id_read_public_addr+0x98>)
   15606:	1a9b      	subs	r3, r3, r2
   15608:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   1560a:	f04f 0100 	mov.w	r1, #0
   1560e:	2202      	movs	r2, #2
   15610:	f362 0102 	bfi	r1, r2, #0, #3
   15614:	f36f 01c5 	bfc	r1, #3, #3
   15618:	f363 118f 	bfi	r1, r3, #6, #10
   1561c:	480b      	ldr	r0, [pc, #44]	; (1564c <bt_id_read_public_addr+0x9c>)
   1561e:	f7fb fcd5 	bl	10fcc <log_0>
		return 0U;
   15622:	2000      	movs	r0, #0
   15624:	e7eb      	b.n	155fe <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   15626:	2206      	movs	r2, #6
   15628:	4621      	mov	r1, r4
   1562a:	1c68      	adds	r0, r5, #1
   1562c:	f00b ff7b 	bl	21526 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   15630:	2300      	movs	r3, #0
   15632:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   15634:	9801      	ldr	r0, [sp, #4]
   15636:	f00e f870 	bl	2371a <net_buf_unref>
	return 1U;
   1563a:	2001      	movs	r0, #1
   1563c:	e7df      	b.n	155fe <bt_id_read_public_addr+0x4e>
   1563e:	bf00      	nop
   15640:	00025654 	.word	0x00025654
   15644:	0002548c 	.word	0x0002548c
   15648:	0002545c 	.word	0x0002545c
   1564c:	00026b10 	.word	0x00026b10

00015650 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   15650:	b500      	push	{lr}
   15652:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   15654:	4668      	mov	r0, sp
   15656:	f7ff ffab 	bl	155b0 <bt_id_read_public_addr>
   1565a:	4b06      	ldr	r3, [pc, #24]	; (15674 <bt_setup_public_id_addr+0x24>)
   1565c:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1565e:	b910      	cbnz	r0, 15666 <bt_setup_public_id_addr+0x16>
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
   15660:	b003      	add	sp, #12
   15662:	f85d fb04 	ldr.w	pc, [sp], #4
	id_create(BT_ID_DEFAULT, &addr, irk);
   15666:	2200      	movs	r2, #0
   15668:	4669      	mov	r1, sp
   1566a:	4610      	mov	r0, r2
   1566c:	f7ff ff02 	bl	15474 <id_create>
   15670:	e7f6      	b.n	15660 <bt_setup_public_id_addr+0x10>
   15672:	bf00      	nop
   15674:	200002b8 	.word	0x200002b8

00015678 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   15678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1567c:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1567e:	4b2e      	ldr	r3, [pc, #184]	; (15738 <bt_read_static_addr+0xc0>)
   15680:	f893 5086 	ldrb.w	r5, [r3, #134]	; 0x86
   15684:	f015 0501 	ands.w	r5, r5, #1
   15688:	d010      	beq.n	156ac <bt_read_static_addr+0x34>
   1568a:	4607      	mov	r7, r0
   1568c:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1568e:	aa01      	add	r2, sp, #4
   15690:	2100      	movs	r1, #0
   15692:	f64f 4009 	movw	r0, #64521	; 0xfc09
   15696:	f7fe ff0f 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   1569a:	4604      	mov	r4, r0
   1569c:	b9b8      	cbnz	r0, 156ce <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1569e:	9b01      	ldr	r3, [sp, #4]
   156a0:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   156a2:	7875      	ldrb	r5, [r6, #1]
   156a4:	4545      	cmp	r5, r8
   156a6:	bf28      	it	cs
   156a8:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   156aa:	e029      	b.n	15700 <bt_read_static_addr+0x88>
   156ac:	4b23      	ldr	r3, [pc, #140]	; (1573c <bt_read_static_addr+0xc4>)
   156ae:	4a24      	ldr	r2, [pc, #144]	; (15740 <bt_read_static_addr+0xc8>)
   156b0:	1a9b      	subs	r3, r3, r2
   156b2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   156b4:	f04f 0100 	mov.w	r1, #0
   156b8:	2202      	movs	r2, #2
   156ba:	f362 0102 	bfi	r1, r2, #0, #3
   156be:	f36f 01c5 	bfc	r1, #3, #3
   156c2:	f363 118f 	bfi	r1, r3, #6, #10
   156c6:	481f      	ldr	r0, [pc, #124]	; (15744 <bt_read_static_addr+0xcc>)
   156c8:	f7fb fc80 	bl	10fcc <log_0>
		return 0;
   156cc:	e01e      	b.n	1570c <bt_read_static_addr+0x94>
   156ce:	4b1b      	ldr	r3, [pc, #108]	; (1573c <bt_read_static_addr+0xc4>)
   156d0:	4a1b      	ldr	r2, [pc, #108]	; (15740 <bt_read_static_addr+0xc8>)
   156d2:	1a9b      	subs	r3, r3, r2
   156d4:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   156d6:	f04f 0100 	mov.w	r1, #0
   156da:	2202      	movs	r2, #2
   156dc:	f362 0102 	bfi	r1, r2, #0, #3
   156e0:	f36f 01c5 	bfc	r1, #3, #3
   156e4:	f363 118f 	bfi	r1, r3, #6, #10
   156e8:	4817      	ldr	r0, [pc, #92]	; (15748 <bt_read_static_addr+0xd0>)
   156ea:	f7fb fc6f 	bl	10fcc <log_0>
		return 0;
   156ee:	2500      	movs	r5, #0
   156f0:	e00c      	b.n	1570c <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   156f2:	2216      	movs	r2, #22
   156f4:	1cb1      	adds	r1, r6, #2
   156f6:	fb02 7004 	mla	r0, r2, r4, r7
   156fa:	f00b ff14 	bl	21526 <memcpy>
	for (i = 0; i < cnt; i++) {
   156fe:	3401      	adds	r4, #1
   15700:	42a5      	cmp	r5, r4
   15702:	dcf6      	bgt.n	156f2 <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   15704:	9801      	ldr	r0, [sp, #4]
   15706:	f00e f808 	bl	2371a <net_buf_unref>
	if (!cnt) {
   1570a:	b11d      	cbz	r5, 15714 <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   1570c:	4628      	mov	r0, r5
   1570e:	b002      	add	sp, #8
   15710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15714:	4b09      	ldr	r3, [pc, #36]	; (1573c <bt_read_static_addr+0xc4>)
   15716:	4a0a      	ldr	r2, [pc, #40]	; (15740 <bt_read_static_addr+0xc8>)
   15718:	1a9b      	subs	r3, r3, r2
   1571a:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   1571c:	f04f 0100 	mov.w	r1, #0
   15720:	2202      	movs	r2, #2
   15722:	f362 0102 	bfi	r1, r2, #0, #3
   15726:	f36f 01c5 	bfc	r1, #3, #3
   1572a:	f363 118f 	bfi	r1, r3, #6, #10
   1572e:	4807      	ldr	r0, [pc, #28]	; (1574c <bt_read_static_addr+0xd4>)
   15730:	f7fb fc4c 	bl	10fcc <log_0>
   15734:	e7ea      	b.n	1570c <bt_read_static_addr+0x94>
   15736:	bf00      	nop
   15738:	200002b8 	.word	0x200002b8
   1573c:	0002548c 	.word	0x0002548c
   15740:	0002545c 	.word	0x0002545c
   15744:	00026b30 	.word	0x00026b30
   15748:	00026b5c 	.word	0x00026b5c
   1574c:	00026b7c 	.word	0x00026b7c

00015750 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   15750:	b510      	push	{r4, lr}
   15752:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   15754:	4b14      	ldr	r3, [pc, #80]	; (157a8 <bt_setup_random_id_addr+0x58>)
   15756:	79dc      	ldrb	r4, [r3, #7]
   15758:	b934      	cbnz	r4, 15768 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1575a:	2101      	movs	r1, #1
   1575c:	a802      	add	r0, sp, #8
   1575e:	f7ff ff8b 	bl	15678 <bt_read_static_addr>
   15762:	4b11      	ldr	r3, [pc, #68]	; (157a8 <bt_setup_random_id_addr+0x58>)
   15764:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   15766:	b928      	cbnz	r0, 15774 <bt_setup_random_id_addr+0x24>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15768:	2100      	movs	r1, #0
   1576a:	4608      	mov	r0, r1
   1576c:	f7ff feb6 	bl	154dc <bt_id_create>
}
   15770:	b008      	add	sp, #32
   15772:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15774:	4b0c      	ldr	r3, [pc, #48]	; (157a8 <bt_setup_random_id_addr+0x58>)
   15776:	79db      	ldrb	r3, [r3, #7]
   15778:	42a3      	cmp	r3, r4
   1577a:	d913      	bls.n	157a4 <bt_setup_random_id_addr+0x54>
   1577c:	2206      	movs	r2, #6
   1577e:	2116      	movs	r1, #22
   15780:	ab02      	add	r3, sp, #8
   15782:	fb01 3104 	mla	r1, r1, r4, r3
   15786:	f10d 0001 	add.w	r0, sp, #1
   1578a:	f00b fecc 	bl	21526 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1578e:	2301      	movs	r3, #1
   15790:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
   15794:	2200      	movs	r2, #0
   15796:	4669      	mov	r1, sp
   15798:	4620      	mov	r0, r4
   1579a:	f7ff fe6b 	bl	15474 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1579e:	3401      	adds	r4, #1
   157a0:	b2e4      	uxtb	r4, r4
   157a2:	e7e7      	b.n	15774 <bt_setup_random_id_addr+0x24>
			return 0;
   157a4:	2000      	movs	r0, #0
   157a6:	e7e3      	b.n	15770 <bt_setup_random_id_addr+0x20>
   157a8:	200002b8 	.word	0x200002b8

000157ac <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   157ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157ae:	460d      	mov	r5, r1
   157b0:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   157b2:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   157b4:	f011 0f01 	tst.w	r1, #1
   157b8:	d027      	beq.n	1580a <bt_id_set_adv_own_addr+0x5e>
   157ba:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   157bc:	b142      	cbz	r2, 157d0 <bt_id_set_adv_own_addr+0x24>
   157be:	f011 0f20 	tst.w	r1, #32
   157c2:	d005      	beq.n	157d0 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   157c4:	4b22      	ldr	r3, [pc, #136]	; (15850 <bt_id_set_adv_own_addr+0xa4>)
   157c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   157ca:	f013 0f40 	tst.w	r3, #64	; 0x40
   157ce:	d038      	beq.n	15842 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   157d0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   157d4:	4a1e      	ldr	r2, [pc, #120]	; (15850 <bt_id_set_adv_own_addr+0xa4>)
   157d6:	5cd3      	ldrb	r3, [r2, r3]
   157d8:	2b01      	cmp	r3, #1
   157da:	d00d      	beq.n	157f8 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   157dc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   157e0:	4b1b      	ldr	r3, [pc, #108]	; (15850 <bt_id_set_adv_own_addr+0xa4>)
   157e2:	5d1b      	ldrb	r3, [r3, r4]
   157e4:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   157e6:	b37f      	cbz	r7, 15848 <bt_id_set_adv_own_addr+0x9c>
   157e8:	f015 0f20 	tst.w	r5, #32
   157ec:	d02e      	beq.n	1584c <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   157ee:	f043 0302 	orr.w	r3, r3, #2
   157f2:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   157f4:	2000      	movs	r0, #0
   157f6:	e017      	b.n	15828 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   157f8:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   157fc:	4411      	add	r1, r2
   157fe:	3101      	adds	r1, #1
   15800:	f00c f876 	bl	218f0 <bt_id_set_adv_random_addr>
				if (err) {
   15804:	2800      	cmp	r0, #0
   15806:	d0e9      	beq.n	157dc <bt_id_set_adv_own_addr+0x30>
   15808:	e00e      	b.n	15828 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1580a:	f011 0f04 	tst.w	r1, #4
   1580e:	d013      	beq.n	15838 <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15810:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   15814:	4a0e      	ldr	r2, [pc, #56]	; (15850 <bt_id_set_adv_own_addr+0xa4>)
   15816:	5cd3      	ldrb	r3, [r2, r3]
   15818:	2b01      	cmp	r3, #1
   1581a:	d006      	beq.n	1582a <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   1581c:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   1581e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   15822:	4b0b      	ldr	r3, [pc, #44]	; (15850 <bt_id_set_adv_own_addr+0xa4>)
   15824:	5d1b      	ldrb	r3, [r3, r4]
   15826:	7033      	strb	r3, [r6, #0]
}
   15828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1582a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1582e:	4411      	add	r1, r2
   15830:	3101      	adds	r1, #1
   15832:	f00c f85d 	bl	218f0 <bt_id_set_adv_random_addr>
   15836:	e7f2      	b.n	1581e <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   15838:	f00c f85f 	bl	218fa <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1583c:	2301      	movs	r3, #1
   1583e:	7033      	strb	r3, [r6, #0]
		if (err) {
   15840:	e7f2      	b.n	15828 <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   15842:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15846:	e7ef      	b.n	15828 <bt_id_set_adv_own_addr+0x7c>
	return 0;
   15848:	2000      	movs	r0, #0
   1584a:	e7ed      	b.n	15828 <bt_id_set_adv_own_addr+0x7c>
   1584c:	2000      	movs	r0, #0
   1584e:	e7eb      	b.n	15828 <bt_id_set_adv_own_addr+0x7c>
   15850:	200002b8 	.word	0x200002b8

00015854 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15854:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15856:	4b1c      	ldr	r3, [pc, #112]	; (158c8 <bt_id_init+0x74>)
   15858:	79db      	ldrb	r3, [r3, #7]
   1585a:	b12b      	cbz	r3, 15868 <bt_id_init+0x14>
		BT_DBG("No user identity. Trying to set public.");

		bt_setup_public_id_addr();
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1585c:	4b1a      	ldr	r3, [pc, #104]	; (158c8 <bt_id_init+0x74>)
   1585e:	79db      	ldrb	r3, [r3, #7]
   15860:	b12b      	cbz	r3, 1586e <bt_id_init+0x1a>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   15862:	2400      	movs	r4, #0
}
   15864:	4620      	mov	r0, r4
   15866:	bd10      	pop	{r4, pc}
		bt_setup_public_id_addr();
   15868:	f7ff fef2 	bl	15650 <bt_setup_public_id_addr>
   1586c:	e7f6      	b.n	1585c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1586e:	f7ff ff6f 	bl	15750 <bt_setup_random_id_addr>
		if (err) {
   15872:	4604      	mov	r4, r0
   15874:	b9b0      	cbnz	r0, 158a4 <bt_id_init+0x50>
		err = set_random_address(&bt_dev.id_addr[0].a);
   15876:	4815      	ldr	r0, [pc, #84]	; (158cc <bt_id_init+0x78>)
   15878:	f7ff fdce 	bl	15418 <set_random_address>
		if (err) {
   1587c:	4604      	mov	r4, r0
   1587e:	2800      	cmp	r0, #0
   15880:	d0f0      	beq.n	15864 <bt_id_init+0x10>
   15882:	4b13      	ldr	r3, [pc, #76]	; (158d0 <bt_id_init+0x7c>)
   15884:	4a13      	ldr	r2, [pc, #76]	; (158d4 <bt_id_init+0x80>)
   15886:	1a9b      	subs	r3, r3, r2
   15888:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   1588a:	f04f 0100 	mov.w	r1, #0
   1588e:	2201      	movs	r2, #1
   15890:	f362 0102 	bfi	r1, r2, #0, #3
   15894:	f36f 01c5 	bfc	r1, #3, #3
   15898:	f363 118f 	bfi	r1, r3, #6, #10
   1589c:	480e      	ldr	r0, [pc, #56]	; (158d8 <bt_id_init+0x84>)
   1589e:	f7fb fb95 	bl	10fcc <log_0>
			return err;
   158a2:	e7df      	b.n	15864 <bt_id_init+0x10>
   158a4:	4b0a      	ldr	r3, [pc, #40]	; (158d0 <bt_id_init+0x7c>)
   158a6:	4a0b      	ldr	r2, [pc, #44]	; (158d4 <bt_id_init+0x80>)
   158a8:	1a9b      	subs	r3, r3, r2
   158aa:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   158ac:	f04f 0100 	mov.w	r1, #0
   158b0:	2201      	movs	r2, #1
   158b2:	f362 0102 	bfi	r1, r2, #0, #3
   158b6:	f36f 01c5 	bfc	r1, #3, #3
   158ba:	f363 118f 	bfi	r1, r3, #6, #10
   158be:	4807      	ldr	r0, [pc, #28]	; (158dc <bt_id_init+0x88>)
   158c0:	f7fb fb84 	bl	10fcc <log_0>
			return err;
   158c4:	e7ce      	b.n	15864 <bt_id_init+0x10>
   158c6:	bf00      	nop
   158c8:	200002b8 	.word	0x200002b8
   158cc:	200002b9 	.word	0x200002b9
   158d0:	0002548c 	.word	0x0002548c
   158d4:	0002545c 	.word	0x0002545c
   158d8:	00026bc8 	.word	0x00026bc8
   158dc:	00026ba8 	.word	0x00026ba8

000158e0 <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   158e0:	4800      	ldr	r0, [pc, #0]	; (158e4 <adv_new_legacy+0x4>)
   158e2:	4770      	bx	lr
   158e4:	200002d0 	.word	0x200002d0

000158e8 <set_data_add>:
	size_t len;
};

static int set_data_add(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   158e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158ec:	b083      	sub	sp, #12
   158ee:	4605      	mov	r5, r0
   158f0:	4688      	mov	r8, r1
   158f2:	9201      	str	r2, [sp, #4]
   158f4:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   158f6:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   158fa:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   158fc:	9a00      	ldr	r2, [sp, #0]
   158fe:	4552      	cmp	r2, sl
   15900:	d94b      	bls.n	1599a <set_data_add+0xb2>
		const struct bt_data *data = ad[i].data;
   15902:	9a01      	ldr	r2, [sp, #4]
   15904:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   15908:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   1590c:	2400      	movs	r4, #0
   1590e:	e016      	b.n	1593e <set_data_add+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   15910:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   15914:	b2d6      	uxtb	r6, r2
   15916:	1c59      	adds	r1, r3, #1
   15918:	b2c9      	uxtb	r1, r1
   1591a:	f106 0b01 	add.w	fp, r6, #1
   1591e:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   15922:	3302      	adds	r3, #2
   15924:	fa5f fb83 	uxtb.w	fp, r3
   15928:	f805 c001 	strb.w	ip, [r5, r1]

			memcpy(&set_data[set_data_len], data[j].data, len);
   1592c:	6841      	ldr	r1, [r0, #4]
   1592e:	eb05 000b 	add.w	r0, r5, fp
   15932:	f00b fdf8 	bl	21526 <memcpy>
			set_data_len += len;
   15936:	eb0b 0306 	add.w	r3, fp, r6
   1593a:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   1593c:	3401      	adds	r4, #1
   1593e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   15942:	4294      	cmp	r4, r2
   15944:	d226      	bcs.n	15994 <set_data_add+0xac>
			size_t len = data[j].data_len;
   15946:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   1594a:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   1594c:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   15950:	469e      	mov	lr, r3
   15952:	1899      	adds	r1, r3, r2
   15954:	3102      	adds	r1, #2
   15956:	4541      	cmp	r1, r8
   15958:	d9dc      	bls.n	15914 <set_data_add+0x2c>
				ssize_t shortened_len = set_data_len_max -
   1595a:	eba8 0203 	sub.w	r2, r8, r3
   1595e:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   15960:	f1bc 0f09 	cmp.w	ip, #9
   15964:	d101      	bne.n	1596a <set_data_add+0x82>
   15966:	2a00      	cmp	r2, #0
   15968:	dcd2      	bgt.n	15910 <set_data_add+0x28>
   1596a:	4b0e      	ldr	r3, [pc, #56]	; (159a4 <set_data_add+0xbc>)
   1596c:	4a0e      	ldr	r2, [pc, #56]	; (159a8 <set_data_add+0xc0>)
   1596e:	1a9b      	subs	r3, r3, r2
   15970:	08db      	lsrs	r3, r3, #3
					BT_ERR("Too big advertising data");
   15972:	f04f 0100 	mov.w	r1, #0
   15976:	2201      	movs	r2, #1
   15978:	f362 0102 	bfi	r1, r2, #0, #3
   1597c:	f36f 01c5 	bfc	r1, #3, #3
   15980:	f363 118f 	bfi	r1, r3, #6, #10
   15984:	4809      	ldr	r0, [pc, #36]	; (159ac <set_data_add+0xc4>)
   15986:	f7fb fb21 	bl	10fcc <log_0>
					return -EINVAL;
   1598a:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1598e:	b003      	add	sp, #12
   15990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   15994:	f10a 0a01 	add.w	sl, sl, #1
   15998:	e7b0      	b.n	158fc <set_data_add+0x14>
	*data_len = set_data_len;
   1599a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1599c:	7013      	strb	r3, [r2, #0]
	return 0;
   1599e:	2000      	movs	r0, #0
   159a0:	e7f5      	b.n	1598e <set_data_add+0xa6>
   159a2:	bf00      	nop
   159a4:	0002545c 	.word	0x0002545c
   159a8:	0002545c 	.word	0x0002545c
   159ac:	00026bf0 	.word	0x00026bf0

000159b0 <valid_adv_ext_param>:
{
   159b0:	b510      	push	{r4, lr}
   159b2:	b082      	sub	sp, #8
   159b4:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   159b6:	7800      	ldrb	r0, [r0, #0]
   159b8:	4b23      	ldr	r3, [pc, #140]	; (15a48 <valid_adv_ext_param+0x98>)
   159ba:	79db      	ldrb	r3, [r3, #7]
   159bc:	4298      	cmp	r0, r3
   159be:	d302      	bcc.n	159c6 <valid_adv_ext_param+0x16>
		return false;
   159c0:	2000      	movs	r0, #0
}
   159c2:	b002      	add	sp, #8
   159c4:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   159c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   159ca:	2300      	movs	r3, #0
   159cc:	9300      	str	r3, [sp, #0]
   159ce:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   159d2:	2207      	movs	r2, #7
   159d4:	4669      	mov	r1, sp
   159d6:	4b1c      	ldr	r3, [pc, #112]	; (15a48 <valid_adv_ext_param+0x98>)
   159d8:	4418      	add	r0, r3
   159da:	f00b fd77 	bl	214cc <memcmp>
	if (param->id >= bt_dev.id_count ||
   159de:	2800      	cmp	r0, #0
   159e0:	d0ee      	beq.n	159c0 <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   159e2:	6863      	ldr	r3, [r4, #4]
   159e4:	f013 0f01 	tst.w	r3, #1
   159e8:	d107      	bne.n	159fa <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   159ea:	4a17      	ldr	r2, [pc, #92]	; (15a48 <valid_adv_ext_param+0x98>)
   159ec:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   159f0:	2a08      	cmp	r2, #8
   159f2:	d802      	bhi.n	159fa <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   159f4:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   159f6:	2a9f      	cmp	r2, #159	; 0x9f
   159f8:	d91b      	bls.n	15a32 <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   159fa:	f013 0f30 	tst.w	r3, #48	; 0x30
   159fe:	d001      	beq.n	15a04 <valid_adv_ext_param+0x54>
	    !param->peer) {
   15a00:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   15a02:	b1c2      	cbz	r2, 15a36 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15a04:	f013 0f10 	tst.w	r3, #16
   15a08:	d108      	bne.n	15a1c <valid_adv_ext_param+0x6c>
	    !param->peer) {
   15a0a:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15a0c:	b132      	cbz	r2, 15a1c <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   15a0e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   15a12:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   15a16:	d014      	beq.n	15a42 <valid_adv_ext_param+0x92>
	return true;
   15a18:	2001      	movs	r0, #1
   15a1a:	e7d2      	b.n	159c2 <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   15a1c:	68a2      	ldr	r2, [r4, #8]
   15a1e:	68e1      	ldr	r1, [r4, #12]
   15a20:	428a      	cmp	r2, r1
   15a22:	d80a      	bhi.n	15a3a <valid_adv_ext_param+0x8a>
   15a24:	2a1f      	cmp	r2, #31
   15a26:	d90a      	bls.n	15a3e <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   15a28:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   15a2c:	d9ef      	bls.n	15a0e <valid_adv_ext_param+0x5e>
			return false;
   15a2e:	2000      	movs	r0, #0
   15a30:	e7c7      	b.n	159c2 <valid_adv_ext_param+0x12>
			return false;
   15a32:	2000      	movs	r0, #0
   15a34:	e7c5      	b.n	159c2 <valid_adv_ext_param+0x12>
		return false;
   15a36:	2000      	movs	r0, #0
   15a38:	e7c3      	b.n	159c2 <valid_adv_ext_param+0x12>
			return false;
   15a3a:	2000      	movs	r0, #0
   15a3c:	e7c1      	b.n	159c2 <valid_adv_ext_param+0x12>
   15a3e:	2000      	movs	r0, #0
   15a40:	e7bf      	b.n	159c2 <valid_adv_ext_param+0x12>
		return false;
   15a42:	2000      	movs	r0, #0
   15a44:	e7bd      	b.n	159c2 <valid_adv_ext_param+0x12>
   15a46:	bf00      	nop
   15a48:	200002b8 	.word	0x200002b8

00015a4c <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a4e:	b085      	sub	sp, #20
   15a50:	4604      	mov	r4, r0
   15a52:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   15a54:	4605      	mov	r5, r0
   15a56:	f815 2b09 	ldrb.w	r2, [r5], #9
   15a5a:	4b1f      	ldr	r3, [pc, #124]	; (15ad8 <le_adv_start_add_conn+0x8c>)
   15a5c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15a60:	2300      	movs	r3, #0
   15a62:	9300      	str	r3, [sp, #0]
   15a64:	f8cd 3003 	str.w	r3, [sp, #3]
   15a68:	2207      	movs	r2, #7
   15a6a:	4669      	mov	r1, sp
   15a6c:	4628      	mov	r0, r5
   15a6e:	f00b fd2d 	bl	214cc <memcmp>
   15a72:	b9b8      	cbnz	r0, 15aa4 <le_adv_start_add_conn+0x58>
   15a74:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15a76:	4b19      	ldr	r3, [pc, #100]	; (15adc <le_adv_start_add_conn+0x90>)
   15a78:	e893 0003 	ldmia.w	r3, {r0, r1}
   15a7c:	9002      	str	r0, [sp, #8]
   15a7e:	f8ad 100c 	strh.w	r1, [sp, #12]
   15a82:	0c09      	lsrs	r1, r1, #16
   15a84:	f88d 100e 	strb.w	r1, [sp, #14]
   15a88:	a902      	add	r1, sp, #8
   15a8a:	7820      	ldrb	r0, [r4, #0]
   15a8c:	f00c fa4c 	bl	21f28 <bt_conn_add_le>
		if (!conn) {
   15a90:	4604      	mov	r4, r0
   15a92:	b120      	cbz	r0, 15a9e <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   15a94:	2104      	movs	r1, #4
   15a96:	f000 fc75 	bl	16384 <bt_conn_set_state>
		*out_conn = conn;
   15a9a:	603c      	str	r4, [r7, #0]
		return 0;
   15a9c:	e012      	b.n	15ac4 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   15a9e:	f06f 060b 	mvn.w	r6, #11
   15aa2:	e00f      	b.n	15ac4 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15aa4:	4629      	mov	r1, r5
   15aa6:	7820      	ldrb	r0, [r4, #0]
   15aa8:	f000 fe20 	bl	166ec <bt_conn_exists_le>
   15aac:	b968      	cbnz	r0, 15aca <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   15aae:	4629      	mov	r1, r5
   15ab0:	7820      	ldrb	r0, [r4, #0]
   15ab2:	f00c fa39 	bl	21f28 <bt_conn_add_le>
	if (!conn) {
   15ab6:	4604      	mov	r4, r0
   15ab8:	b150      	cbz	r0, 15ad0 <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   15aba:	2105      	movs	r1, #5
   15abc:	f000 fc62 	bl	16384 <bt_conn_set_state>
	*out_conn = conn;
   15ac0:	603c      	str	r4, [r7, #0]
	return 0;
   15ac2:	2600      	movs	r6, #0
}
   15ac4:	4630      	mov	r0, r6
   15ac6:	b005      	add	sp, #20
   15ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   15aca:	f06f 0615 	mvn.w	r6, #21
   15ace:	e7f9      	b.n	15ac4 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   15ad0:	f06f 060b 	mvn.w	r6, #11
   15ad4:	e7f6      	b.n	15ac4 <le_adv_start_add_conn+0x78>
   15ad6:	bf00      	nop
   15ad8:	200002b8 	.word	0x200002b8
   15adc:	0002565c 	.word	0x0002565c

00015ae0 <bt_le_adv_lookup_legacy>:
}
   15ae0:	4800      	ldr	r0, [pc, #0]	; (15ae4 <bt_le_adv_lookup_legacy+0x4>)
   15ae2:	4770      	bx	lr
   15ae4:	200002d0 	.word	0x200002d0

00015ae8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   15ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aec:	b091      	sub	sp, #68	; 0x44
   15aee:	9207      	str	r2, [sp, #28]
   15af0:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   15af2:	2300      	movs	r3, #0
   15af4:	9309      	str	r3, [sp, #36]	; 0x24
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   15af6:	690f      	ldr	r7, [r1, #16]
   15af8:	ebb7 0a03 	subs.w	sl, r7, r3
   15afc:	bf18      	it	ne
   15afe:	f04f 0a01 	movne.w	sl, #1
   15b02:	f3bf 8f5b 	dmb	ish
   15b06:	4bc6      	ldr	r3, [pc, #792]	; (15e20 <bt_le_adv_start_legacy+0x338>)
   15b08:	681b      	ldr	r3, [r3, #0]
   15b0a:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15b0e:	f013 0f02 	tst.w	r3, #2
   15b12:	f000 81c3 	beq.w	15e9c <bt_le_adv_start_legacy+0x3b4>
   15b16:	4605      	mov	r5, r0
   15b18:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15b1a:	4608      	mov	r0, r1
   15b1c:	f00b fff1 	bl	21b02 <valid_adv_param>
   15b20:	2800      	cmp	r0, #0
   15b22:	f000 81be 	beq.w	15ea2 <bt_le_adv_start_legacy+0x3ba>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   15b26:	4620      	mov	r0, r4
   15b28:	f00b fefc 	bl	21924 <bt_id_adv_random_addr_check>
   15b2c:	4683      	mov	fp, r0
   15b2e:	2800      	cmp	r0, #0
   15b30:	f000 81ba 	beq.w	15ea8 <bt_le_adv_start_legacy+0x3c0>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15b34:	f105 0610 	add.w	r6, r5, #16
   15b38:	f3bf 8f5b 	dmb	ish
   15b3c:	692b      	ldr	r3, [r5, #16]
   15b3e:	f3bf 8f5b 	dmb	ish
   15b42:	f013 0f40 	tst.w	r3, #64	; 0x40
   15b46:	f040 81b2 	bne.w	15eae <bt_le_adv_start_legacy+0x3c6>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   15b4a:	220f      	movs	r2, #15
   15b4c:	2100      	movs	r1, #0
   15b4e:	a80a      	add	r0, sp, #40	; 0x28
   15b50:	f00b fd0d 	bl	2156e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15b54:	68a3      	ldr	r3, [r4, #8]
   15b56:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15b5a:	68e3      	ldr	r3, [r4, #12]
   15b5c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   15b60:	f8d4 9004 	ldr.w	r9, [r4, #4]
   15b64:	4648      	mov	r0, r9
   15b66:	f00b fee1 	bl	2192c <get_adv_channel_map>
   15b6a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   15b6e:	4648      	mov	r0, r9
   15b70:	f00b feda 	bl	21928 <get_filter_policy>
   15b74:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36

	if (adv->id != param->id) {
   15b78:	782a      	ldrb	r2, [r5, #0]
   15b7a:	7823      	ldrb	r3, [r4, #0]
   15b7c:	429a      	cmp	r2, r3
   15b7e:	d00c      	beq.n	15b9a <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15b80:	4ba7      	ldr	r3, [pc, #668]	; (15e20 <bt_le_adv_start_legacy+0x338>)
   15b82:	f3bf 8f5b 	dmb	ish
   15b86:	e853 2f00 	ldrex	r2, [r3]
   15b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   15b8e:	e843 2100 	strex	r1, r2, [r3]
   15b92:	2900      	cmp	r1, #0
   15b94:	d1f7      	bne.n	15b86 <bt_le_adv_start_legacy+0x9e>
   15b96:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   15b9a:	7823      	ldrb	r3, [r4, #0]
   15b9c:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   15b9e:	4aa1      	ldr	r2, [pc, #644]	; (15e24 <bt_le_adv_start_legacy+0x33c>)
   15ba0:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15ba4:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   15ba8:	4652      	mov	r2, sl
   15baa:	6861      	ldr	r1, [r4, #4]
   15bac:	4628      	mov	r0, r5
   15bae:	f7ff fdfd 	bl	157ac <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   15bb2:	4681      	mov	r9, r0
   15bb4:	2800      	cmp	r0, #0
   15bb6:	f040 80f3 	bne.w	15da0 <bt_le_adv_start_legacy+0x2b8>
		return err;
	}

	if (dir_adv) {
   15bba:	b1bf      	cbz	r7, 15bec <bt_le_adv_start_legacy+0x104>
	memcpy(dst, src, sizeof(*dst));
   15bbc:	2207      	movs	r2, #7
   15bbe:	6921      	ldr	r1, [r4, #16]
   15bc0:	f105 0009 	add.w	r0, r5, #9
   15bc4:	f00b fcaf 	bl	21526 <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   15bc8:	6863      	ldr	r3, [r4, #4]
   15bca:	f013 0f01 	tst.w	r3, #1
   15bce:	d020      	beq.n	15c12 <bt_le_adv_start_legacy+0x12a>
		scannable = true;

		if (dir_adv) {
   15bd0:	b1df      	cbz	r7, 15c0a <bt_le_adv_start_legacy+0x122>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   15bd2:	f013 0f10 	tst.w	r3, #16
   15bd6:	d014      	beq.n	15c02 <bt_le_adv_start_legacy+0x11a>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   15bd8:	2304      	movs	r3, #4
   15bda:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15bde:	2207      	movs	r2, #7
   15be0:	6921      	ldr	r1, [r4, #16]
   15be2:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   15be6:	f00b fc9e 	bl	21526 <memcpy>
}
   15bea:	e01c      	b.n	15c26 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15bec:	2300      	movs	r3, #0
   15bee:	930e      	str	r3, [sp, #56]	; 0x38
   15bf0:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
	memcpy(dst, src, sizeof(*dst));
   15bf4:	2207      	movs	r2, #7
   15bf6:	a90e      	add	r1, sp, #56	; 0x38
   15bf8:	f105 0009 	add.w	r0, r5, #9
   15bfc:	f00b fc93 	bl	21526 <memcpy>
   15c00:	e7e2      	b.n	15bc8 <bt_le_adv_start_legacy+0xe0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   15c02:	2301      	movs	r3, #1
   15c04:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15c08:	e7e9      	b.n	15bde <bt_le_adv_start_legacy+0xf6>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			set_param.type = BT_HCI_ADV_IND;
   15c0a:	2300      	movs	r3, #0
   15c0c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15c10:	e009      	b.n	15c26 <bt_le_adv_start_legacy+0x13e>
		}
	} else {
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15c12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15c14:	b382      	cbz	r2, 15c78 <bt_le_adv_start_legacy+0x190>
   15c16:	f04f 0901 	mov.w	r9, #1

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   15c1a:	f019 0b01 	ands.w	fp, r9, #1
   15c1e:	d031      	beq.n	15c84 <bt_le_adv_start_legacy+0x19c>
   15c20:	2302      	movs	r3, #2
   15c22:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15c26:	210f      	movs	r1, #15
   15c28:	f242 0006 	movw	r0, #8198	; 0x2006
   15c2c:	f7fe fc08 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   15c30:	4681      	mov	r9, r0
   15c32:	2800      	cmp	r0, #0
   15c34:	f000 813e 	beq.w	15eb4 <bt_le_adv_start_legacy+0x3cc>
   15c38:	220f      	movs	r2, #15
   15c3a:	a90a      	add	r1, sp, #40	; 0x28
   15c3c:	3008      	adds	r0, #8
   15c3e:	f00d fdbc 	bl	237ba <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   15c42:	2200      	movs	r2, #0
   15c44:	4649      	mov	r1, r9
   15c46:	f242 0006 	movw	r0, #8198	; 0x2006
   15c4a:	f7fe fc35 	bl	144b8 <bt_hci_cmd_send_sync>
	if (err) {
   15c4e:	4681      	mov	r9, r0
   15c50:	2800      	cmp	r0, #0
   15c52:	f040 80a5 	bne.w	15da0 <bt_le_adv_start_legacy+0x2b8>
		return err;
	}

	if (!dir_adv) {
   15c56:	b1bf      	cbz	r7, 15c88 <bt_le_adv_start_legacy+0x1a0>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15c58:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c5a:	f013 0f01 	tst.w	r3, #1
   15c5e:	d030      	beq.n	15cc2 <bt_le_adv_start_legacy+0x1da>
		err = le_adv_start_add_conn(adv, &conn);
   15c60:	a909      	add	r1, sp, #36	; 0x24
   15c62:	4628      	mov	r0, r5
   15c64:	f7ff fef2 	bl	15a4c <le_adv_start_add_conn>
		if (err) {
   15c68:	b358      	cbz	r0, 15cc2 <bt_le_adv_start_legacy+0x1da>
			if (err == -ENOMEM && !dir_adv &&
   15c6a:	f110 0f0c 	cmn.w	r0, #12
   15c6e:	f040 8124 	bne.w	15eba <bt_le_adv_start_legacy+0x3d2>
   15c72:	b307      	cbz	r7, 15cb6 <bt_le_adv_start_legacy+0x1ce>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   15c74:	4681      	mov	r9, r0
   15c76:	e093      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15c78:	f013 0f08 	tst.w	r3, #8
   15c7c:	d0cd      	beq.n	15c1a <bt_le_adv_start_legacy+0x132>
   15c7e:	f04f 0901 	mov.w	r9, #1
   15c82:	e7ca      	b.n	15c1a <bt_le_adv_start_legacy+0x132>
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   15c84:	2303      	movs	r3, #3
   15c86:	e7cc      	b.n	15c22 <bt_le_adv_start_legacy+0x13a>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
   15c88:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15c8a:	f3c3 4280 	ubfx	r2, r3, #18, #1
   15c8e:	9204      	str	r2, [sp, #16]
   15c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15c94:	9303      	str	r3, [sp, #12]
   15c96:	f8cd b008 	str.w	fp, [sp, #8]
   15c9a:	2300      	movs	r3, #0
   15c9c:	9301      	str	r3, [sp, #4]
   15c9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15ca0:	9300      	str	r3, [sp, #0]
   15ca2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   15ca4:	4642      	mov	r2, r8
   15ca6:	9907      	ldr	r1, [sp, #28]
   15ca8:	4628      	mov	r0, r5
   15caa:	f00b fe8b 	bl	219c4 <le_adv_update>
		if (err) {
   15cae:	2800      	cmp	r0, #0
   15cb0:	d0d2      	beq.n	15c58 <bt_le_adv_start_legacy+0x170>
			return err;
   15cb2:	4681      	mov	r9, r0
   15cb4:	e074      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   15cb6:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   15cb8:	f012 0f02 	tst.w	r2, #2
   15cbc:	d00c      	beq.n	15cd8 <bt_le_adv_start_legacy+0x1f0>
			return err;
   15cbe:	4681      	mov	r9, r0
   15cc0:	e06e      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   15cc2:	2101      	movs	r1, #1
   15cc4:	4628      	mov	r0, r5
   15cc6:	f00b ff55 	bl	21b74 <bt_le_adv_set_enable>
	if (err) {
   15cca:	4605      	mov	r5, r0
   15ccc:	2800      	cmp	r0, #0
   15cce:	d16b      	bne.n	15da8 <bt_le_adv_start_legacy+0x2c0>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
   15cd2:	b108      	cbz	r0, 15cd8 <bt_le_adv_start_legacy+0x1f0>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   15cd4:	f00c f8d6 	bl	21e84 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15cd8:	2f00      	cmp	r7, #0
   15cda:	d07f      	beq.n	15ddc <bt_le_adv_start_legacy+0x2f4>
   15cdc:	464b      	mov	r3, r9
	if (val) {
   15cde:	f013 0f01 	tst.w	r3, #1
   15ce2:	f000 8083 	beq.w	15dec <bt_le_adv_start_legacy+0x304>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15ce6:	f3bf 8f5b 	dmb	ish
   15cea:	e856 3f00 	ldrex	r3, [r6]
   15cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15cf2:	e846 3200 	strex	r2, r3, [r6]
   15cf6:	2a00      	cmp	r2, #0
   15cf8:	d1f7      	bne.n	15cea <bt_le_adv_start_legacy+0x202>
   15cfa:	f3bf 8f5b 	dmb	ish
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
			  param->options & BT_LE_ADV_OPT_USE_NAME);
   15cfe:	6863      	ldr	r3, [r4, #4]
   15d00:	f013 0f08 	tst.w	r3, #8
   15d04:	d07f      	beq.n	15e06 <bt_le_adv_start_legacy+0x31e>
   15d06:	f3bf 8f5b 	dmb	ish
   15d0a:	e856 3f00 	ldrex	r3, [r6]
   15d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15d12:	e846 3200 	strex	r2, r3, [r6]
   15d16:	2a00      	cmp	r2, #0
   15d18:	d1f7      	bne.n	15d0a <bt_le_adv_start_legacy+0x222>
   15d1a:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
			  param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD);
   15d1e:	6863      	ldr	r3, [r4, #4]
   15d20:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15d24:	f000 8086 	beq.w	15e34 <bt_le_adv_start_legacy+0x34c>
   15d28:	f3bf 8f5b 	dmb	ish
   15d2c:	e856 3f00 	ldrex	r3, [r6]
   15d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   15d34:	e846 3200 	strex	r2, r3, [r6]
   15d38:	2a00      	cmp	r2, #0
   15d3a:	d1f7      	bne.n	15d2c <bt_le_adv_start_legacy+0x244>
   15d3c:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   15d40:	6863      	ldr	r3, [r4, #4]
   15d42:	f013 0f01 	tst.w	r3, #1
   15d46:	f000 8082 	beq.w	15e4e <bt_le_adv_start_legacy+0x366>
   15d4a:	f3bf 8f5b 	dmb	ish
   15d4e:	e856 3f00 	ldrex	r3, [r6]
   15d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15d56:	e846 3200 	strex	r2, r3, [r6]
   15d5a:	2a00      	cmp	r2, #0
   15d5c:	d1f7      	bne.n	15d4e <bt_le_adv_start_legacy+0x266>
   15d5e:	f3bf 8f5b 	dmb	ish
   15d62:	f1bb 0f00 	cmp.w	fp, #0
   15d66:	d07f      	beq.n	15e68 <bt_le_adv_start_legacy+0x380>
   15d68:	f3bf 8f5b 	dmb	ish
   15d6c:	e856 3f00 	ldrex	r3, [r6]
   15d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15d74:	e846 3200 	strex	r2, r3, [r6]
   15d78:	2a00      	cmp	r2, #0
   15d7a:	d1f7      	bne.n	15d6c <bt_le_adv_start_legacy+0x284>
   15d7c:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   15d80:	6863      	ldr	r3, [r4, #4]
   15d82:	f013 0f04 	tst.w	r3, #4
   15d86:	d07c      	beq.n	15e82 <bt_le_adv_start_legacy+0x39a>
   15d88:	f3bf 8f5b 	dmb	ish
   15d8c:	e856 3f00 	ldrex	r3, [r6]
   15d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   15d94:	e846 3200 	strex	r2, r3, [r6]
   15d98:	2a00      	cmp	r2, #0
   15d9a:	d1f7      	bne.n	15d8c <bt_le_adv_start_legacy+0x2a4>
   15d9c:	f3bf 8f5b 	dmb	ish

	return 0;
}
   15da0:	4648      	mov	r0, r9
   15da2:	b011      	add	sp, #68	; 0x44
   15da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15da8:	4b1f      	ldr	r3, [pc, #124]	; (15e28 <bt_le_adv_start_legacy+0x340>)
   15daa:	4a20      	ldr	r2, [pc, #128]	; (15e2c <bt_le_adv_start_legacy+0x344>)
   15dac:	1a9b      	subs	r3, r3, r2
   15dae:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start advertiser");
   15db0:	f04f 0100 	mov.w	r1, #0
   15db4:	2201      	movs	r2, #1
   15db6:	f362 0102 	bfi	r1, r2, #0, #3
   15dba:	f36f 01c5 	bfc	r1, #3, #3
   15dbe:	f363 118f 	bfi	r1, r3, #6, #10
   15dc2:	481b      	ldr	r0, [pc, #108]	; (15e30 <bt_le_adv_start_legacy+0x348>)
   15dc4:	f7fb f902 	bl	10fcc <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
   15dca:	b128      	cbz	r0, 15dd8 <bt_le_adv_start_legacy+0x2f0>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15dcc:	2100      	movs	r1, #0
   15dce:	f000 fad9 	bl	16384 <bt_conn_set_state>
			bt_conn_unref(conn);
   15dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
   15dd4:	f00c f856 	bl	21e84 <bt_conn_unref>
		return err;
   15dd8:	46a9      	mov	r9, r5
   15dda:	e7e1      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   15ddc:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   15dde:	f013 0f02 	tst.w	r3, #2
   15de2:	d001      	beq.n	15de8 <bt_le_adv_start_legacy+0x300>
   15de4:	464b      	mov	r3, r9
   15de6:	e77a      	b.n	15cde <bt_le_adv_start_legacy+0x1f6>
   15de8:	2301      	movs	r3, #1
   15dea:	e778      	b.n	15cde <bt_le_adv_start_legacy+0x1f6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15dec:	f3bf 8f5b 	dmb	ish
   15df0:	e856 3f00 	ldrex	r3, [r6]
   15df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   15df8:	e846 3200 	strex	r2, r3, [r6]
   15dfc:	2a00      	cmp	r2, #0
   15dfe:	d1f7      	bne.n	15df0 <bt_le_adv_start_legacy+0x308>
   15e00:	f3bf 8f5b 	dmb	ish
   15e04:	e77b      	b.n	15cfe <bt_le_adv_start_legacy+0x216>
   15e06:	f3bf 8f5b 	dmb	ish
   15e0a:	e856 3f00 	ldrex	r3, [r6]
   15e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15e12:	e846 3200 	strex	r2, r3, [r6]
   15e16:	2a00      	cmp	r2, #0
   15e18:	d1f7      	bne.n	15e0a <bt_le_adv_start_legacy+0x322>
   15e1a:	f3bf 8f5b 	dmb	ish
   15e1e:	e77e      	b.n	15d1e <bt_le_adv_start_legacy+0x236>
   15e20:	20000350 	.word	0x20000350
   15e24:	200002b8 	.word	0x200002b8
   15e28:	0002545c 	.word	0x0002545c
   15e2c:	0002545c 	.word	0x0002545c
   15e30:	00026c0c 	.word	0x00026c0c
   15e34:	f3bf 8f5b 	dmb	ish
   15e38:	e856 3f00 	ldrex	r3, [r6]
   15e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
   15e40:	e846 3200 	strex	r2, r3, [r6]
   15e44:	2a00      	cmp	r2, #0
   15e46:	d1f7      	bne.n	15e38 <bt_le_adv_start_legacy+0x350>
   15e48:	f3bf 8f5b 	dmb	ish
   15e4c:	e778      	b.n	15d40 <bt_le_adv_start_legacy+0x258>
   15e4e:	f3bf 8f5b 	dmb	ish
   15e52:	e856 3f00 	ldrex	r3, [r6]
   15e56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   15e5a:	e846 3200 	strex	r2, r3, [r6]
   15e5e:	2a00      	cmp	r2, #0
   15e60:	d1f7      	bne.n	15e52 <bt_le_adv_start_legacy+0x36a>
   15e62:	f3bf 8f5b 	dmb	ish
   15e66:	e77c      	b.n	15d62 <bt_le_adv_start_legacy+0x27a>
   15e68:	f3bf 8f5b 	dmb	ish
   15e6c:	e856 3f00 	ldrex	r3, [r6]
   15e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   15e74:	e846 3200 	strex	r2, r3, [r6]
   15e78:	2a00      	cmp	r2, #0
   15e7a:	d1f7      	bne.n	15e6c <bt_le_adv_start_legacy+0x384>
   15e7c:	f3bf 8f5b 	dmb	ish
   15e80:	e77e      	b.n	15d80 <bt_le_adv_start_legacy+0x298>
   15e82:	f3bf 8f5b 	dmb	ish
   15e86:	e856 3f00 	ldrex	r3, [r6]
   15e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   15e8e:	e846 3200 	strex	r2, r3, [r6]
   15e92:	2a00      	cmp	r2, #0
   15e94:	d1f7      	bne.n	15e86 <bt_le_adv_start_legacy+0x39e>
   15e96:	f3bf 8f5b 	dmb	ish
}
   15e9a:	e781      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		return -EAGAIN;
   15e9c:	f06f 090a 	mvn.w	r9, #10
   15ea0:	e77e      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		return -EINVAL;
   15ea2:	f06f 0915 	mvn.w	r9, #21
   15ea6:	e77b      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		return -EINVAL;
   15ea8:	f06f 0915 	mvn.w	r9, #21
   15eac:	e778      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		return -EALREADY;
   15eae:	f06f 0977 	mvn.w	r9, #119	; 0x77
   15eb2:	e775      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
		return -ENOBUFS;
   15eb4:	f06f 0968 	mvn.w	r9, #104	; 0x68
   15eb8:	e772      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
			return err;
   15eba:	4681      	mov	r9, r0
   15ebc:	e770      	b.n	15da0 <bt_le_adv_start_legacy+0x2b8>
   15ebe:	bf00      	nop

00015ec0 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   15ec0:	b538      	push	{r3, r4, r5, lr}
   15ec2:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   15ec4:	4b06      	ldr	r3, [pc, #24]	; (15ee0 <notify_disconnected+0x20>)
   15ec6:	681c      	ldr	r4, [r3, #0]
   15ec8:	e000      	b.n	15ecc <notify_disconnected+0xc>
   15eca:	69a4      	ldr	r4, [r4, #24]
   15ecc:	b134      	cbz	r4, 15edc <notify_disconnected+0x1c>
		if (cb->disconnected) {
   15ece:	6863      	ldr	r3, [r4, #4]
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d0fa      	beq.n	15eca <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   15ed4:	7a69      	ldrb	r1, [r5, #9]
   15ed6:	4628      	mov	r0, r5
   15ed8:	4798      	blx	r3
   15eda:	e7f6      	b.n	15eca <notify_disconnected+0xa>
		}
	}
}
   15edc:	bd38      	pop	{r3, r4, r5, pc}
   15ede:	bf00      	nop
   15ee0:	20036998 	.word	0x20036998

00015ee4 <tx_free>:
{
   15ee4:	b508      	push	{r3, lr}
   15ee6:	4601      	mov	r1, r0
	tx->cb = NULL;
   15ee8:	2300      	movs	r3, #0
   15eea:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   15eec:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   15eee:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   15ef0:	4801      	ldr	r0, [pc, #4]	; (15ef8 <tx_free+0x14>)
   15ef2:	f00e fc74 	bl	247de <k_queue_append>
}
   15ef6:	bd08      	pop	{r3, pc}
   15ef8:	20033c38 	.word	0x20033c38

00015efc <conn_tx_alloc>:
{
   15efc:	b508      	push	{r3, lr}
	return z_impl_k_current_get();
   15efe:	f006 fbed 	bl	1c6dc <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15f02:	4b08      	ldr	r3, [pc, #32]	; (15f24 <conn_tx_alloc+0x28>)
   15f04:	4283      	cmp	r3, r0
   15f06:	d007      	beq.n	15f18 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   15f08:	f04f 32ff 	mov.w	r2, #4294967295
   15f0c:	f04f 33ff 	mov.w	r3, #4294967295
   15f10:	4805      	ldr	r0, [pc, #20]	; (15f28 <conn_tx_alloc+0x2c>)
   15f12:	f005 fdc9 	bl	1baa8 <z_impl_k_queue_get>
}
   15f16:	bd08      	pop	{r3, pc}
   15f18:	2200      	movs	r2, #0
   15f1a:	2300      	movs	r3, #0
   15f1c:	4802      	ldr	r0, [pc, #8]	; (15f28 <conn_tx_alloc+0x2c>)
   15f1e:	f005 fdc3 	bl	1baa8 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   15f22:	e7f8      	b.n	15f16 <conn_tx_alloc+0x1a>
   15f24:	20035110 	.word	0x20035110
   15f28:	20033c38 	.word	0x20033c38

00015f2c <notify_connected>:
{
   15f2c:	b538      	push	{r3, r4, r5, lr}
   15f2e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   15f30:	4b09      	ldr	r3, [pc, #36]	; (15f58 <notify_connected+0x2c>)
   15f32:	681c      	ldr	r4, [r3, #0]
   15f34:	e000      	b.n	15f38 <notify_connected+0xc>
   15f36:	69a4      	ldr	r4, [r4, #24]
   15f38:	b134      	cbz	r4, 15f48 <notify_connected+0x1c>
		if (cb->connected) {
   15f3a:	6823      	ldr	r3, [r4, #0]
   15f3c:	2b00      	cmp	r3, #0
   15f3e:	d0fa      	beq.n	15f36 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   15f40:	7a69      	ldrb	r1, [r5, #9]
   15f42:	4628      	mov	r0, r5
   15f44:	4798      	blx	r3
   15f46:	e7f6      	b.n	15f36 <notify_connected+0xa>
	if (!conn->err) {
   15f48:	7a6b      	ldrb	r3, [r5, #9]
   15f4a:	b103      	cbz	r3, 15f4e <notify_connected+0x22>
}
   15f4c:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   15f4e:	4628      	mov	r0, r5
   15f50:	f002 feea 	bl	18d28 <bt_gatt_connected>
}
   15f54:	e7fa      	b.n	15f4c <notify_connected+0x20>
   15f56:	bf00      	nop
   15f58:	20036998 	.word	0x20036998

00015f5c <bt_conn_get_pkts>:
}
   15f5c:	4800      	ldr	r0, [pc, #0]	; (15f60 <bt_conn_get_pkts+0x4>)
   15f5e:	4770      	bx	lr
   15f60:	20000388 	.word	0x20000388

00015f64 <send_frag>:
{
   15f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15f68:	4605      	mov	r5, r0
   15f6a:	460e      	mov	r6, r1
   15f6c:	4691      	mov	r9, r2
   15f6e:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   15f70:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   15f72:	f7ff fff3 	bl	15f5c <bt_conn_get_pkts>
   15f76:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   15f78:	f04f 32ff 	mov.w	r2, #4294967295
   15f7c:	f04f 33ff 	mov.w	r3, #4294967295
   15f80:	f005 fdf6 	bl	1bb70 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   15f84:	7aab      	ldrb	r3, [r5, #10]
   15f86:	2b07      	cmp	r3, #7
   15f88:	d159      	bne.n	1603e <send_frag+0xda>
   15f8a:	f04f 0240 	mov.w	r2, #64	; 0x40
   15f8e:	f3ef 8311 	mrs	r3, BASEPRI
   15f92:	f382 8811 	msr	BASEPRI, r2
   15f96:	f3bf 8f6f 	isb	sy
	if (tx) {
   15f9a:	b1af      	cbz	r7, 15fc8 <send_frag+0x64>
	parent->next = child;
   15f9c:	2200      	movs	r2, #0
   15f9e:	603a      	str	r2, [r7, #0]
	return list->tail;
   15fa0:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   15fa2:	b172      	cbz	r2, 15fc2 <send_frag+0x5e>
	parent->next = child;
   15fa4:	6017      	str	r7, [r2, #0]
	list->tail = node;
   15fa6:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   15fa8:	f383 8811 	msr	BASEPRI, r3
   15fac:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   15fb0:	464a      	mov	r2, r9
   15fb2:	4631      	mov	r1, r6
   15fb4:	4628      	mov	r0, r5
   15fb6:	f00b fe73 	bl	21ca0 <send_acl>
	if (err) {
   15fba:	4601      	mov	r1, r0
   15fbc:	b988      	cbnz	r0, 15fe2 <send_frag+0x7e>
	return true;
   15fbe:	2001      	movs	r0, #1
   15fc0:	e046      	b.n	16050 <send_frag+0xec>
   15fc2:	61af      	str	r7, [r5, #24]
	list->head = node;
   15fc4:	616f      	str	r7, [r5, #20]
}
   15fc6:	e7ef      	b.n	15fa8 <send_frag+0x44>
	return list->tail;
   15fc8:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   15fca:	b13a      	cbz	r2, 15fdc <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   15fcc:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   15fd0:	f8da 2000 	ldr.w	r2, [sl]
   15fd4:	3201      	adds	r2, #1
   15fd6:	f8ca 2000 	str.w	r2, [sl]
   15fda:	e7e5      	b.n	15fa8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15fdc:	f105 0a1c 	add.w	sl, r5, #28
   15fe0:	e7f6      	b.n	15fd0 <send_frag+0x6c>
   15fe2:	4b26      	ldr	r3, [pc, #152]	; (1607c <send_frag+0x118>)
   15fe4:	4a26      	ldr	r2, [pc, #152]	; (16080 <send_frag+0x11c>)
   15fe6:	1a9b      	subs	r3, r3, r2
   15fe8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   15fea:	f04f 0200 	mov.w	r2, #0
   15fee:	2001      	movs	r0, #1
   15ff0:	f360 0202 	bfi	r2, r0, #0, #3
   15ff4:	f36f 02c5 	bfc	r2, #3, #3
   15ff8:	f363 128f 	bfi	r2, r3, #6, #10
   15ffc:	4821      	ldr	r0, [pc, #132]	; (16084 <send_frag+0x120>)
   15ffe:	f7fa ff2f 	bl	10e60 <log_1>
	__asm__ volatile(
   16002:	f04f 0340 	mov.w	r3, #64	; 0x40
   16006:	f3ef 8011 	mrs	r0, BASEPRI
   1600a:	f383 8811 	msr	BASEPRI, r3
   1600e:	f3bf 8f6f 	isb	sy
		if (tx) {
   16012:	b347      	cbz	r7, 16066 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   16014:	4639      	mov	r1, r7
	return list->head;
   16016:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16018:	2200      	movs	r2, #0
   1601a:	b163      	cbz	r3, 16036 <send_frag+0xd2>
   1601c:	428b      	cmp	r3, r1
   1601e:	d002      	beq.n	16026 <send_frag+0xc2>
   16020:	461a      	mov	r2, r3
   16022:	681b      	ldr	r3, [r3, #0]
   16024:	e7f9      	b.n	1601a <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   16026:	b1aa      	cbz	r2, 16054 <send_frag+0xf0>
	return node->next;
   16028:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   1602a:	6013      	str	r3, [r2, #0]
	return list->tail;
   1602c:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1602e:	42bb      	cmp	r3, r7
   16030:	d017      	beq.n	16062 <send_frag+0xfe>
	parent->next = child;
   16032:	2300      	movs	r3, #0
   16034:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   16036:	f380 8811 	msr	BASEPRI, r0
   1603a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1603e:	4640      	mov	r0, r8
   16040:	f005 fd6e 	bl	1bb20 <z_impl_k_sem_give>
	if (tx) {
   16044:	b117      	cbz	r7, 1604c <send_frag+0xe8>
		tx_free(tx);
   16046:	4638      	mov	r0, r7
   16048:	f7ff ff4c 	bl	15ee4 <tx_free>
	if (always_consume) {
   1604c:	b98c      	cbnz	r4, 16072 <send_frag+0x10e>
	return false;
   1604e:	4620      	mov	r0, r4
}
   16050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   16054:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   16056:	616b      	str	r3, [r5, #20]
	return list->tail;
   16058:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1605a:	42ba      	cmp	r2, r7
   1605c:	d1e9      	bne.n	16032 <send_frag+0xce>
	list->tail = node;
   1605e:	61ab      	str	r3, [r5, #24]
}
   16060:	e7e7      	b.n	16032 <send_frag+0xce>
	list->tail = node;
   16062:	61aa      	str	r2, [r5, #24]
}
   16064:	e7e5      	b.n	16032 <send_frag+0xce>
			(*pending_no_cb)--;
   16066:	f8da 3000 	ldr.w	r3, [sl]
   1606a:	3b01      	subs	r3, #1
   1606c:	f8ca 3000 	str.w	r3, [sl]
   16070:	e7e1      	b.n	16036 <send_frag+0xd2>
		net_buf_unref(buf);
   16072:	4630      	mov	r0, r6
   16074:	f00d fb51 	bl	2371a <net_buf_unref>
	return false;
   16078:	2000      	movs	r0, #0
   1607a:	e7e9      	b.n	16050 <send_frag+0xec>
   1607c:	00025474 	.word	0x00025474
   16080:	0002545c 	.word	0x0002545c
   16084:	000268f0 	.word	0x000268f0

00016088 <bt_conn_new>:
{
   16088:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   1608a:	2300      	movs	r3, #0
   1608c:	428b      	cmp	r3, r1
   1608e:	d227      	bcs.n	160e0 <bt_conn_new+0x58>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16090:	24c8      	movs	r4, #200	; 0xc8
   16092:	fb04 0403 	mla	r4, r4, r3, r0
   16096:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1609a:	2501      	movs	r5, #1
   1609c:	f3bf 8f5b 	dmb	ish
   160a0:	e852 6f00 	ldrex	r6, [r2]
   160a4:	2e00      	cmp	r6, #0
   160a6:	d104      	bne.n	160b2 <bt_conn_new+0x2a>
   160a8:	e842 5c00 	strex	ip, r5, [r2]
   160ac:	f1bc 0f00 	cmp.w	ip, #0
   160b0:	d1f6      	bne.n	160a0 <bt_conn_new+0x18>
   160b2:	f3bf 8f5b 	dmb	ish
   160b6:	d111      	bne.n	160dc <bt_conn_new+0x54>
	if (!conn) {
   160b8:	b174      	cbz	r4, 160d8 <bt_conn_new+0x50>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   160ba:	22c4      	movs	r2, #196	; 0xc4
   160bc:	2100      	movs	r1, #0
   160be:	4620      	mov	r0, r4
   160c0:	f00b fa55 	bl	2156e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   160c4:	4907      	ldr	r1, [pc, #28]	; (160e4 <bt_conn_new+0x5c>)
   160c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
   160ca:	f00e fc8a 	bl	249e2 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   160ce:	4906      	ldr	r1, [pc, #24]	; (160e8 <bt_conn_new+0x60>)
   160d0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   160d4:	f00e fc5f 	bl	24996 <k_work_init>
}
   160d8:	4620      	mov	r0, r4
   160da:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   160dc:	442b      	add	r3, r5
   160de:	e7d5      	b.n	1608c <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   160e0:	2400      	movs	r4, #0
   160e2:	e7e9      	b.n	160b8 <bt_conn_new+0x30>
   160e4:	000168cd 	.word	0x000168cd
   160e8:	00021c97 	.word	0x00021c97

000160ec <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   160ec:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   160ee:	2101      	movs	r1, #1
   160f0:	4801      	ldr	r0, [pc, #4]	; (160f8 <acl_conn_new+0xc>)
   160f2:	f7ff ffc9 	bl	16088 <bt_conn_new>
}
   160f6:	bd08      	pop	{r3, pc}
   160f8:	20034ad8 	.word	0x20034ad8

000160fc <bt_acl_recv>:
{
   160fc:	b570      	push	{r4, r5, r6, lr}
   160fe:	4604      	mov	r4, r0
   16100:	460d      	mov	r5, r1
	switch (flags) {
   16102:	2a01      	cmp	r2, #1
   16104:	d02c      	beq.n	16160 <bt_acl_recv+0x64>
   16106:	4611      	mov	r1, r2
   16108:	2a02      	cmp	r2, #2
   1610a:	d16e      	bne.n	161ea <bt_acl_recv+0xee>
		if (conn->rx) {
   1610c:	6903      	ldr	r3, [r0, #16]
   1610e:	b193      	cbz	r3, 16136 <bt_acl_recv+0x3a>
   16110:	4b4c      	ldr	r3, [pc, #304]	; (16244 <bt_acl_recv+0x148>)
   16112:	4a4d      	ldr	r2, [pc, #308]	; (16248 <bt_acl_recv+0x14c>)
   16114:	1a9b      	subs	r3, r3, r2
   16116:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   16118:	f04f 0100 	mov.w	r1, #0
   1611c:	2201      	movs	r2, #1
   1611e:	f362 0102 	bfi	r1, r2, #0, #3
   16122:	f36f 01c5 	bfc	r1, #3, #3
   16126:	f363 118f 	bfi	r1, r3, #6, #10
   1612a:	4848      	ldr	r0, [pc, #288]	; (1624c <bt_acl_recv+0x150>)
   1612c:	f7fa ff4e 	bl	10fcc <log_0>
			bt_conn_reset_rx_state(conn);
   16130:	4620      	mov	r0, r4
   16132:	f00b fe18 	bl	21d66 <bt_conn_reset_rx_state>
		conn->rx = buf;
   16136:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16138:	6921      	ldr	r1, [r4, #16]
   1613a:	8988      	ldrh	r0, [r1, #12]
   1613c:	2801      	cmp	r0, #1
   1613e:	d96a      	bls.n	16216 <bt_acl_recv+0x11a>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16140:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   16142:	785d      	ldrb	r5, [r3, #1]
   16144:	781a      	ldrb	r2, [r3, #0]
   16146:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1614a:	3204      	adds	r2, #4
   1614c:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   1614e:	4290      	cmp	r0, r2
   16150:	d361      	bcc.n	16216 <bt_acl_recv+0x11a>
	if (conn->rx->len > acl_total_len) {
   16152:	d861      	bhi.n	16218 <bt_acl_recv+0x11c>
	conn->rx = NULL;
   16154:	2300      	movs	r3, #0
   16156:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   16158:	4620      	mov	r0, r4
   1615a:	f000 fea3 	bl	16ea4 <bt_l2cap_recv>
   1615e:	e05a      	b.n	16216 <bt_acl_recv+0x11a>
		if (!conn->rx) {
   16160:	6900      	ldr	r0, [r0, #16]
   16162:	b180      	cbz	r0, 16186 <bt_acl_recv+0x8a>
		if (!buf->len) {
   16164:	898e      	ldrh	r6, [r1, #12]
   16166:	b32e      	cbz	r6, 161b4 <bt_acl_recv+0xb8>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16168:	3008      	adds	r0, #8
   1616a:	f00d fb5c 	bl	23826 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1616e:	4286      	cmp	r6, r0
   16170:	d824      	bhi.n	161bc <bt_acl_recv+0xc0>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   16172:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16174:	89aa      	ldrh	r2, [r5, #12]
   16176:	68a9      	ldr	r1, [r5, #8]
   16178:	3008      	adds	r0, #8
   1617a:	f00d fb1e 	bl	237ba <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1617e:	4628      	mov	r0, r5
   16180:	f00d facb 	bl	2371a <net_buf_unref>
		break;
   16184:	e7d8      	b.n	16138 <bt_acl_recv+0x3c>
   16186:	4b2f      	ldr	r3, [pc, #188]	; (16244 <bt_acl_recv+0x148>)
   16188:	4a2f      	ldr	r2, [pc, #188]	; (16248 <bt_acl_recv+0x14c>)
   1618a:	1a9b      	subs	r3, r3, r2
   1618c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   1618e:	f04f 0100 	mov.w	r1, #0
   16192:	2201      	movs	r2, #1
   16194:	f362 0102 	bfi	r1, r2, #0, #3
   16198:	f36f 01c5 	bfc	r1, #3, #3
   1619c:	f363 118f 	bfi	r1, r3, #6, #10
   161a0:	482b      	ldr	r0, [pc, #172]	; (16250 <bt_acl_recv+0x154>)
   161a2:	f7fa ff13 	bl	10fcc <log_0>
			bt_conn_reset_rx_state(conn);
   161a6:	4620      	mov	r0, r4
   161a8:	f00b fddd 	bl	21d66 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   161ac:	4628      	mov	r0, r5
   161ae:	f00d fab4 	bl	2371a <net_buf_unref>
			return;
   161b2:	e030      	b.n	16216 <bt_acl_recv+0x11a>
			net_buf_unref(buf);
   161b4:	4608      	mov	r0, r1
   161b6:	f00d fab0 	bl	2371a <net_buf_unref>
			return;
   161ba:	e02c      	b.n	16216 <bt_acl_recv+0x11a>
   161bc:	4b21      	ldr	r3, [pc, #132]	; (16244 <bt_acl_recv+0x148>)
   161be:	4a22      	ldr	r2, [pc, #136]	; (16248 <bt_acl_recv+0x14c>)
   161c0:	1a9b      	subs	r3, r3, r2
   161c2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   161c4:	f04f 0100 	mov.w	r1, #0
   161c8:	2201      	movs	r2, #1
   161ca:	f362 0102 	bfi	r1, r2, #0, #3
   161ce:	f36f 01c5 	bfc	r1, #3, #3
   161d2:	f363 118f 	bfi	r1, r3, #6, #10
   161d6:	481f      	ldr	r0, [pc, #124]	; (16254 <bt_acl_recv+0x158>)
   161d8:	f7fa fef8 	bl	10fcc <log_0>
			bt_conn_reset_rx_state(conn);
   161dc:	4620      	mov	r0, r4
   161de:	f00b fdc2 	bl	21d66 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   161e2:	4628      	mov	r0, r5
   161e4:	f00d fa99 	bl	2371a <net_buf_unref>
			return;
   161e8:	e015      	b.n	16216 <bt_acl_recv+0x11a>
   161ea:	4b16      	ldr	r3, [pc, #88]	; (16244 <bt_acl_recv+0x148>)
   161ec:	4a16      	ldr	r2, [pc, #88]	; (16248 <bt_acl_recv+0x14c>)
   161ee:	1a9b      	subs	r3, r3, r2
   161f0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   161f2:	f04f 0200 	mov.w	r2, #0
   161f6:	2001      	movs	r0, #1
   161f8:	f360 0202 	bfi	r2, r0, #0, #3
   161fc:	f36f 02c5 	bfc	r2, #3, #3
   16200:	f363 128f 	bfi	r2, r3, #6, #10
   16204:	4814      	ldr	r0, [pc, #80]	; (16258 <bt_acl_recv+0x15c>)
   16206:	f7fa fe2b 	bl	10e60 <log_1>
		bt_conn_reset_rx_state(conn);
   1620a:	4620      	mov	r0, r4
   1620c:	f00b fdab 	bl	21d66 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   16210:	4628      	mov	r0, r5
   16212:	f00d fa82 	bl	2371a <net_buf_unref>
}
   16216:	bd70      	pop	{r4, r5, r6, pc}
   16218:	490a      	ldr	r1, [pc, #40]	; (16244 <bt_acl_recv+0x148>)
   1621a:	4b0b      	ldr	r3, [pc, #44]	; (16248 <bt_acl_recv+0x14c>)
   1621c:	1ac9      	subs	r1, r1, r3
   1621e:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   16220:	f04f 0300 	mov.w	r3, #0
   16224:	2501      	movs	r5, #1
   16226:	f365 0302 	bfi	r3, r5, #0, #3
   1622a:	f36f 03c5 	bfc	r3, #3, #3
   1622e:	f361 138f 	bfi	r3, r1, #6, #10
   16232:	4601      	mov	r1, r0
   16234:	4809      	ldr	r0, [pc, #36]	; (1625c <bt_acl_recv+0x160>)
   16236:	f7fa fe49 	bl	10ecc <log_2>
		bt_conn_reset_rx_state(conn);
   1623a:	4620      	mov	r0, r4
   1623c:	f00b fd93 	bl	21d66 <bt_conn_reset_rx_state>
		return;
   16240:	e7e9      	b.n	16216 <bt_acl_recv+0x11a>
   16242:	bf00      	nop
   16244:	00025474 	.word	0x00025474
   16248:	0002545c 	.word	0x0002545c
   1624c:	00026c30 	.word	0x00026c30
   16250:	00026c50 	.word	0x00026c50
   16254:	00026c70 	.word	0x00026c70
   16258:	00026c98 	.word	0x00026c98
   1625c:	00026cb8 	.word	0x00026cb8

00016260 <bt_conn_send_cb>:
{
   16260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16264:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16266:	7a83      	ldrb	r3, [r0, #10]
   16268:	2b07      	cmp	r3, #7
   1626a:	d118      	bne.n	1629e <bt_conn_send_cb+0x3e>
   1626c:	4604      	mov	r4, r0
   1626e:	460d      	mov	r5, r1
   16270:	4616      	mov	r6, r2
	if (cb) {
   16272:	2a00      	cmp	r2, #0
   16274:	d04f      	beq.n	16316 <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   16276:	f7ff fe41 	bl	15efc <conn_tx_alloc>
		if (!tx) {
   1627a:	4680      	mov	r8, r0
   1627c:	b310      	cbz	r0, 162c4 <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   1627e:	7aa3      	ldrb	r3, [r4, #10]
   16280:	2b07      	cmp	r3, #7
   16282:	d132      	bne.n	162ea <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   16284:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   16286:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   16288:	2300      	movs	r3, #0
   1628a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1628c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1628e:	4629      	mov	r1, r5
   16290:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16294:	f00d fa34 	bl	23700 <net_buf_put>
	return 0;
   16298:	2000      	movs	r0, #0
}
   1629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1629e:	4b1f      	ldr	r3, [pc, #124]	; (1631c <bt_conn_send_cb+0xbc>)
   162a0:	4a1f      	ldr	r2, [pc, #124]	; (16320 <bt_conn_send_cb+0xc0>)
   162a2:	1a9b      	subs	r3, r3, r2
   162a4:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   162a6:	f04f 0100 	mov.w	r1, #0
   162aa:	2201      	movs	r2, #1
   162ac:	f362 0102 	bfi	r1, r2, #0, #3
   162b0:	f36f 01c5 	bfc	r1, #3, #3
   162b4:	f363 118f 	bfi	r1, r3, #6, #10
   162b8:	481a      	ldr	r0, [pc, #104]	; (16324 <bt_conn_send_cb+0xc4>)
   162ba:	f7fa fe87 	bl	10fcc <log_0>
		return -ENOTCONN;
   162be:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   162c2:	e7ea      	b.n	1629a <bt_conn_send_cb+0x3a>
   162c4:	4b15      	ldr	r3, [pc, #84]	; (1631c <bt_conn_send_cb+0xbc>)
   162c6:	4a16      	ldr	r2, [pc, #88]	; (16320 <bt_conn_send_cb+0xc0>)
   162c8:	1a9b      	subs	r3, r3, r2
   162ca:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   162cc:	f04f 0100 	mov.w	r1, #0
   162d0:	2201      	movs	r2, #1
   162d2:	f362 0102 	bfi	r1, r2, #0, #3
   162d6:	f36f 01c5 	bfc	r1, #3, #3
   162da:	f363 118f 	bfi	r1, r3, #6, #10
   162de:	4812      	ldr	r0, [pc, #72]	; (16328 <bt_conn_send_cb+0xc8>)
   162e0:	f7fa fe74 	bl	10fcc <log_0>
			return -ENOBUFS;
   162e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   162e8:	e7d7      	b.n	1629a <bt_conn_send_cb+0x3a>
   162ea:	4b0c      	ldr	r3, [pc, #48]	; (1631c <bt_conn_send_cb+0xbc>)
   162ec:	4a0c      	ldr	r2, [pc, #48]	; (16320 <bt_conn_send_cb+0xc0>)
   162ee:	1a9b      	subs	r3, r3, r2
   162f0:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   162f2:	f04f 0100 	mov.w	r1, #0
   162f6:	2202      	movs	r2, #2
   162f8:	f362 0102 	bfi	r1, r2, #0, #3
   162fc:	f36f 01c5 	bfc	r1, #3, #3
   16300:	f363 118f 	bfi	r1, r3, #6, #10
   16304:	4809      	ldr	r0, [pc, #36]	; (1632c <bt_conn_send_cb+0xcc>)
   16306:	f7fa fe61 	bl	10fcc <log_0>
			tx_free(tx);
   1630a:	4640      	mov	r0, r8
   1630c:	f7ff fdea 	bl	15ee4 <tx_free>
			return -ENOTCONN;
   16310:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16314:	e7c1      	b.n	1629a <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   16316:	2300      	movs	r3, #0
   16318:	614b      	str	r3, [r1, #20]
   1631a:	e7b8      	b.n	1628e <bt_conn_send_cb+0x2e>
   1631c:	00025474 	.word	0x00025474
   16320:	0002545c 	.word	0x0002545c
   16324:	00026cd4 	.word	0x00026cd4
   16328:	00026ce4 	.word	0x00026ce4
   1632c:	00026d04 	.word	0x00026d04

00016330 <bt_conn_prepare_events>:
{
   16330:	b570      	push	{r4, r5, r6, lr}
   16332:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   16334:	4b0c      	ldr	r3, [pc, #48]	; (16368 <bt_conn_prepare_events+0x38>)
   16336:	2400      	movs	r4, #0
   16338:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1633a:	4622      	mov	r2, r4
   1633c:	2101      	movs	r1, #1
   1633e:	f00e fecd 	bl	250dc <k_poll_event_init>
   16342:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16344:	2c00      	cmp	r4, #0
   16346:	dd01      	ble.n	1634c <bt_conn_prepare_events+0x1c>
}
   16348:	4628      	mov	r0, r5
   1634a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1634c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   16350:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   16354:	4b05      	ldr	r3, [pc, #20]	; (1636c <bt_conn_prepare_events+0x3c>)
   16356:	20c8      	movs	r0, #200	; 0xc8
   16358:	fb00 3004 	mla	r0, r0, r4, r3
   1635c:	f00b fd2a 	bl	21db4 <conn_prepare_events>
   16360:	b900      	cbnz	r0, 16364 <bt_conn_prepare_events+0x34>
			ev_count++;
   16362:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16364:	3401      	adds	r4, #1
   16366:	e7ed      	b.n	16344 <bt_conn_prepare_events+0x14>
   16368:	20033978 	.word	0x20033978
   1636c:	20034ad8 	.word	0x20034ad8

00016370 <bt_conn_lookup_handle>:
{
   16370:	b508      	push	{r3, lr}
   16372:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   16374:	2101      	movs	r1, #1
   16376:	4802      	ldr	r0, [pc, #8]	; (16380 <bt_conn_lookup_handle+0x10>)
   16378:	f00b fda1 	bl	21ebe <conn_lookup_handle>
}
   1637c:	bd08      	pop	{r3, pc}
   1637e:	bf00      	nop
   16380:	20034ad8 	.word	0x20034ad8

00016384 <bt_conn_set_state>:
{
   16384:	b570      	push	{r4, r5, r6, lr}
   16386:	460e      	mov	r6, r1
	if (conn->state == state) {
   16388:	7a85      	ldrb	r5, [r0, #10]
   1638a:	428d      	cmp	r5, r1
   1638c:	d010      	beq.n	163b0 <bt_conn_set_state+0x2c>
   1638e:	4604      	mov	r4, r0
	conn->state = state;
   16390:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   16392:	b915      	cbnz	r5, 1639a <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   16394:	7883      	ldrb	r3, [r0, #2]
   16396:	2b08      	cmp	r3, #8
   16398:	d137      	bne.n	1640a <bt_conn_set_state+0x86>
	switch (conn->state) {
   1639a:	7aa3      	ldrb	r3, [r4, #10]
   1639c:	2b08      	cmp	r3, #8
   1639e:	f200 80bb 	bhi.w	16518 <bt_conn_set_state+0x194>
   163a2:	e8df f003 	tbb	[pc, r3]
   163a6:	b54e      	.short	0xb54e
   163a8:	b8b8b8b8 	.word	0xb8b8b8b8
   163ac:	35b8      	.short	0x35b8
   163ae:	b8          	.byte	0xb8
   163af:	00          	.byte	0x00
   163b0:	4b62      	ldr	r3, [pc, #392]	; (1653c <bt_conn_set_state+0x1b8>)
   163b2:	4a63      	ldr	r2, [pc, #396]	; (16540 <bt_conn_set_state+0x1bc>)
   163b4:	1a9b      	subs	r3, r3, r2
   163b6:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   163b8:	f04f 0200 	mov.w	r2, #0
   163bc:	2102      	movs	r1, #2
   163be:	f361 0202 	bfi	r2, r1, #0, #3
   163c2:	f36f 02c5 	bfc	r2, #3, #3
   163c6:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   163ca:	2e08      	cmp	r6, #8
   163cc:	d819      	bhi.n	16402 <bt_conn_set_state+0x7e>
   163ce:	e8df f006 	tbb	[pc, r6]
   163d2:	1a05      	.short	0x1a05
   163d4:	0c0e100a 	.word	0x0c0e100a
   163d8:	1412      	.short	0x1412
   163da:	16          	.byte	0x16
   163db:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   163dc:	4959      	ldr	r1, [pc, #356]	; (16544 <bt_conn_set_state+0x1c0>)
   163de:	485a      	ldr	r0, [pc, #360]	; (16548 <bt_conn_set_state+0x1c4>)
   163e0:	f7fa fd3e 	bl	10e60 <log_1>
		return;
   163e4:	e097      	b.n	16516 <bt_conn_set_state+0x192>
		return "connect-scan";
   163e6:	4959      	ldr	r1, [pc, #356]	; (1654c <bt_conn_set_state+0x1c8>)
   163e8:	e7f9      	b.n	163de <bt_conn_set_state+0x5a>
		return "connect-dir-adv";
   163ea:	4959      	ldr	r1, [pc, #356]	; (16550 <bt_conn_set_state+0x1cc>)
   163ec:	e7f7      	b.n	163de <bt_conn_set_state+0x5a>
		return "connect-adv";
   163ee:	4959      	ldr	r1, [pc, #356]	; (16554 <bt_conn_set_state+0x1d0>)
   163f0:	e7f5      	b.n	163de <bt_conn_set_state+0x5a>
		return "connect-auto";
   163f2:	4959      	ldr	r1, [pc, #356]	; (16558 <bt_conn_set_state+0x1d4>)
   163f4:	e7f3      	b.n	163de <bt_conn_set_state+0x5a>
		return "connect";
   163f6:	4959      	ldr	r1, [pc, #356]	; (1655c <bt_conn_set_state+0x1d8>)
   163f8:	e7f1      	b.n	163de <bt_conn_set_state+0x5a>
		return "connected";
   163fa:	4959      	ldr	r1, [pc, #356]	; (16560 <bt_conn_set_state+0x1dc>)
   163fc:	e7ef      	b.n	163de <bt_conn_set_state+0x5a>
		return "disconnect";
   163fe:	4959      	ldr	r1, [pc, #356]	; (16564 <bt_conn_set_state+0x1e0>)
   16400:	e7ed      	b.n	163de <bt_conn_set_state+0x5a>
		return "(unknown)";
   16402:	4959      	ldr	r1, [pc, #356]	; (16568 <bt_conn_set_state+0x1e4>)
   16404:	e7eb      	b.n	163de <bt_conn_set_state+0x5a>
		return "disconnect-complete";
   16406:	4959      	ldr	r1, [pc, #356]	; (1656c <bt_conn_set_state+0x1e8>)
   16408:	e7e9      	b.n	163de <bt_conn_set_state+0x5a>
			bt_conn_ref(conn);
   1640a:	f00b fd14 	bl	21e36 <bt_conn_ref>
   1640e:	e7c4      	b.n	1639a <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16410:	78a3      	ldrb	r3, [r4, #2]
   16412:	2b04      	cmp	r3, #4
   16414:	d07f      	beq.n	16516 <bt_conn_set_state+0x192>
		k_fifo_init(&conn->tx_queue);
   16416:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1641a:	f00e f9d4 	bl	247c6 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1641e:	2100      	movs	r1, #0
   16420:	4853      	ldr	r0, [pc, #332]	; (16570 <bt_conn_set_state+0x1ec>)
   16422:	f006 fe75 	bl	1d110 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   16426:	2300      	movs	r3, #0
   16428:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1642a:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_SLAVE) {
   1642c:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1642e:	2b01      	cmp	r3, #1
   16430:	d171      	bne.n	16516 <bt_conn_set_state+0x192>
			k_work_schedule(&conn->deferred_work,
   16432:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16436:	2300      	movs	r3, #0
   16438:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1643c:	f005 fd80 	bl	1bf40 <k_work_schedule>
   16440:	e069      	b.n	16516 <bt_conn_set_state+0x192>
		if (conn->type == BT_CONN_TYPE_ISO) {
   16442:	78a3      	ldrb	r3, [r4, #2]
   16444:	2b08      	cmp	r3, #8
   16446:	d066      	beq.n	16516 <bt_conn_set_state+0x192>
		if (conn->type == BT_CONN_TYPE_SCO) {
   16448:	2b04      	cmp	r3, #4
   1644a:	d008      	beq.n	1645e <bt_conn_set_state+0xda>
		switch (old_state) {
   1644c:	2d08      	cmp	r5, #8
   1644e:	d862      	bhi.n	16516 <bt_conn_set_state+0x192>
   16450:	e8df f005 	tbb	[pc, r5]
   16454:	4430094c 	.word	0x4430094c
   16458:	4c263a48 	.word	0x4c263a48
   1645c:	4c          	.byte	0x4c
   1645d:	00          	.byte	0x00
			bt_conn_unref(conn);
   1645e:	4620      	mov	r0, r4
   16460:	f00b fd10 	bl	21e84 <bt_conn_unref>
			break;
   16464:	e057      	b.n	16516 <bt_conn_set_state+0x192>
			tx_notify(conn);
   16466:	4620      	mov	r0, r4
   16468:	f00b fbf0 	bl	21c4c <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1646c:	78a3      	ldrb	r3, [r4, #2]
   1646e:	2b01      	cmp	r3, #1
   16470:	d011      	beq.n	16496 <bt_conn_set_state+0x112>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   16472:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16474:	f3bf 8f5b 	dmb	ish
   16478:	e854 3f00 	ldrex	r3, [r4]
   1647c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16480:	e844 3200 	strex	r2, r3, [r4]
   16484:	2a00      	cmp	r2, #0
   16486:	d1f7      	bne.n	16478 <bt_conn_set_state+0xf4>
   16488:	f3bf 8f5b 	dmb	ish
   1648c:	2100      	movs	r1, #0
   1648e:	4838      	ldr	r0, [pc, #224]	; (16570 <bt_conn_set_state+0x1ec>)
   16490:	f006 fe3e 	bl	1d110 <z_impl_k_poll_signal_raise>
   16494:	e03f      	b.n	16516 <bt_conn_set_state+0x192>
				k_work_cancel_delayable(&conn->deferred_work);
   16496:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1649a:	f00e faee 	bl	24a7a <k_work_cancel_delayable>
   1649e:	e7e8      	b.n	16472 <bt_conn_set_state+0xee>
			if (conn->err) {
   164a0:	7a63      	ldrb	r3, [r4, #9]
   164a2:	b91b      	cbnz	r3, 164ac <bt_conn_set_state+0x128>
			bt_conn_unref(conn);
   164a4:	4620      	mov	r0, r4
   164a6:	f00b fced 	bl	21e84 <bt_conn_unref>
			break;
   164aa:	e034      	b.n	16516 <bt_conn_set_state+0x192>
				notify_connected(conn);
   164ac:	4620      	mov	r0, r4
   164ae:	f7ff fd3d 	bl	15f2c <notify_connected>
   164b2:	e7f7      	b.n	164a4 <bt_conn_set_state+0x120>
			if (conn->err) {
   164b4:	7a63      	ldrb	r3, [r4, #9]
   164b6:	b91b      	cbnz	r3, 164c0 <bt_conn_set_state+0x13c>
			bt_conn_unref(conn);
   164b8:	4620      	mov	r0, r4
   164ba:	f00b fce3 	bl	21e84 <bt_conn_unref>
			break;
   164be:	e02a      	b.n	16516 <bt_conn_set_state+0x192>
				notify_connected(conn);
   164c0:	4620      	mov	r0, r4
   164c2:	f7ff fd33 	bl	15f2c <notify_connected>
   164c6:	e7f7      	b.n	164b8 <bt_conn_set_state+0x134>
			if (conn->err) {
   164c8:	7a63      	ldrb	r3, [r4, #9]
   164ca:	b91b      	cbnz	r3, 164d4 <bt_conn_set_state+0x150>
			bt_conn_unref(conn);
   164cc:	4620      	mov	r0, r4
   164ce:	f00b fcd9 	bl	21e84 <bt_conn_unref>
			break;
   164d2:	e020      	b.n	16516 <bt_conn_set_state+0x192>
				notify_connected(conn);
   164d4:	4620      	mov	r0, r4
   164d6:	f7ff fd29 	bl	15f2c <notify_connected>
   164da:	e7f7      	b.n	164cc <bt_conn_set_state+0x148>
			bt_conn_unref(conn);
   164dc:	4620      	mov	r0, r4
   164de:	f00b fcd1 	bl	21e84 <bt_conn_unref>
			break;
   164e2:	e018      	b.n	16516 <bt_conn_set_state+0x192>
			bt_conn_unref(conn);
   164e4:	4620      	mov	r0, r4
   164e6:	f00b fccd 	bl	21e84 <bt_conn_unref>
			break;
   164ea:	e014      	b.n	16516 <bt_conn_set_state+0x192>
   164ec:	4b13      	ldr	r3, [pc, #76]	; (1653c <bt_conn_set_state+0x1b8>)
   164ee:	4a14      	ldr	r2, [pc, #80]	; (16540 <bt_conn_set_state+0x1bc>)
   164f0:	1a9b      	subs	r3, r3, r2
   164f2:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   164f4:	f04f 0200 	mov.w	r2, #0
   164f8:	2102      	movs	r1, #2
   164fa:	f361 0202 	bfi	r2, r1, #0, #3
   164fe:	f36f 02c5 	bfc	r2, #3, #3
   16502:	f363 128f 	bfi	r2, r3, #6, #10
   16506:	4631      	mov	r1, r6
   16508:	481a      	ldr	r0, [pc, #104]	; (16574 <bt_conn_set_state+0x1f0>)
   1650a:	f7fa fca9 	bl	10e60 <log_1>
   1650e:	e002      	b.n	16516 <bt_conn_set_state+0x192>
		process_unack_tx(conn);
   16510:	4620      	mov	r0, r4
   16512:	f00b fbe7 	bl	21ce4 <process_unack_tx>
}
   16516:	bd70      	pop	{r4, r5, r6, pc}
   16518:	4b08      	ldr	r3, [pc, #32]	; (1653c <bt_conn_set_state+0x1b8>)
   1651a:	4a09      	ldr	r2, [pc, #36]	; (16540 <bt_conn_set_state+0x1bc>)
   1651c:	1a9b      	subs	r3, r3, r2
   1651e:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   16520:	f04f 0200 	mov.w	r2, #0
   16524:	2102      	movs	r1, #2
   16526:	f361 0202 	bfi	r2, r1, #0, #3
   1652a:	f36f 02c5 	bfc	r2, #3, #3
   1652e:	f363 128f 	bfi	r2, r3, #6, #10
   16532:	4631      	mov	r1, r6
   16534:	4810      	ldr	r0, [pc, #64]	; (16578 <bt_conn_set_state+0x1f4>)
   16536:	f7fa fc93 	bl	10e60 <log_1>
   1653a:	e7ec      	b.n	16516 <bt_conn_set_state+0x192>
   1653c:	00025474 	.word	0x00025474
   16540:	0002545c 	.word	0x0002545c
   16544:	00026d9c 	.word	0x00026d9c
   16548:	00026dac 	.word	0x00026dac
   1654c:	00026d4c 	.word	0x00026d4c
   16550:	00026d5c 	.word	0x00026d5c
   16554:	00026d6c 	.word	0x00026d6c
   16558:	00026d78 	.word	0x00026d78
   1655c:	00026d88 	.word	0x00026d88
   16560:	00027040 	.word	0x00027040
   16564:	00026d90 	.word	0x00026d90
   16568:	00026d2c 	.word	0x00026d2c
   1656c:	00026d38 	.word	0x00026d38
   16570:	20033978 	.word	0x20033978
   16574:	00026dc0 	.word	0x00026dc0
   16578:	00026dd8 	.word	0x00026dd8

0001657c <bt_conn_index>:
		index = conn - acl_conns;
   1657c:	4b03      	ldr	r3, [pc, #12]	; (1658c <bt_conn_index+0x10>)
   1657e:	1ac0      	subs	r0, r0, r3
   16580:	10c0      	asrs	r0, r0, #3
   16582:	4b03      	ldr	r3, [pc, #12]	; (16590 <bt_conn_index+0x14>)
   16584:	fb03 f000 	mul.w	r0, r3, r0
}
   16588:	b2c0      	uxtb	r0, r0
   1658a:	4770      	bx	lr
   1658c:	20034ad8 	.word	0x20034ad8
   16590:	c28f5c29 	.word	0xc28f5c29

00016594 <notify_le_param_updated>:
{
   16594:	b570      	push	{r4, r5, r6, lr}
   16596:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16598:	f3bf 8f5b 	dmb	ish
   1659c:	6843      	ldr	r3, [r0, #4]
   1659e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   165a2:	f413 7f00 	tst.w	r3, #512	; 0x200
   165a6:	d010      	beq.n	165ca <notify_le_param_updated+0x36>
   165a8:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   165aa:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   165ae:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   165b2:	428b      	cmp	r3, r1
   165b4:	d309      	bcc.n	165ca <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   165b6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   165ba:	428b      	cmp	r3, r1
   165bc:	d805      	bhi.n	165ca <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   165be:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   165c2:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   165c6:	4299      	cmp	r1, r3
   165c8:	d002      	beq.n	165d0 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   165ca:	4b0f      	ldr	r3, [pc, #60]	; (16608 <notify_le_param_updated+0x74>)
   165cc:	681c      	ldr	r4, [r3, #0]
   165ce:	e00d      	b.n	165ec <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   165d0:	f3bf 8f5b 	dmb	ish
   165d4:	e852 3f00 	ldrex	r3, [r2]
   165d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   165dc:	e842 3100 	strex	r1, r3, [r2]
   165e0:	2900      	cmp	r1, #0
   165e2:	d1f7      	bne.n	165d4 <notify_le_param_updated+0x40>
   165e4:	f3bf 8f5b 	dmb	ish
}
   165e8:	e7ef      	b.n	165ca <notify_le_param_updated+0x36>
   165ea:	69a4      	ldr	r4, [r4, #24]
   165ec:	b15c      	cbz	r4, 16606 <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   165ee:	68e6      	ldr	r6, [r4, #12]
   165f0:	2e00      	cmp	r6, #0
   165f2:	d0fa      	beq.n	165ea <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   165f4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   165f8:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   165fc:	f8b5 109e 	ldrh.w	r1, [r5, #158]	; 0x9e
   16600:	4628      	mov	r0, r5
   16602:	47b0      	blx	r6
   16604:	e7f1      	b.n	165ea <notify_le_param_updated+0x56>
}
   16606:	bd70      	pop	{r4, r5, r6, pc}
   16608:	20036998 	.word	0x20036998

0001660c <notify_le_data_len_updated>:
{
   1660c:	b538      	push	{r3, r4, r5, lr}
   1660e:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16610:	4b06      	ldr	r3, [pc, #24]	; (1662c <notify_le_data_len_updated+0x20>)
   16612:	681c      	ldr	r4, [r3, #0]
   16614:	e000      	b.n	16618 <notify_le_data_len_updated+0xc>
   16616:	69a4      	ldr	r4, [r4, #24]
   16618:	b13c      	cbz	r4, 1662a <notify_le_data_len_updated+0x1e>
		if (cb->le_data_len_updated) {
   1661a:	6963      	ldr	r3, [r4, #20]
   1661c:	2b00      	cmp	r3, #0
   1661e:	d0fa      	beq.n	16616 <notify_le_data_len_updated+0xa>
			cb->le_data_len_updated(conn, &conn->le.data_len);
   16620:	f105 01ba 	add.w	r1, r5, #186	; 0xba
   16624:	4628      	mov	r0, r5
   16626:	4798      	blx	r3
   16628:	e7f5      	b.n	16616 <notify_le_data_len_updated+0xa>
}
   1662a:	bd38      	pop	{r3, r4, r5, pc}
   1662c:	20036998 	.word	0x20036998

00016630 <notify_le_phy_updated>:
{
   16630:	b538      	push	{r3, r4, r5, lr}
   16632:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16634:	4b06      	ldr	r3, [pc, #24]	; (16650 <notify_le_phy_updated+0x20>)
   16636:	681c      	ldr	r4, [r3, #0]
   16638:	e000      	b.n	1663c <notify_le_phy_updated+0xc>
   1663a:	69a4      	ldr	r4, [r4, #24]
   1663c:	b13c      	cbz	r4, 1664e <notify_le_phy_updated+0x1e>
		if (cb->le_phy_updated) {
   1663e:	6923      	ldr	r3, [r4, #16]
   16640:	2b00      	cmp	r3, #0
   16642:	d0fa      	beq.n	1663a <notify_le_phy_updated+0xa>
			cb->le_phy_updated(conn, &conn->le.phy);
   16644:	f105 01b8 	add.w	r1, r5, #184	; 0xb8
   16648:	4628      	mov	r0, r5
   1664a:	4798      	blx	r3
   1664c:	e7f5      	b.n	1663a <notify_le_phy_updated+0xa>
}
   1664e:	bd38      	pop	{r3, r4, r5, pc}
   16650:	20036998 	.word	0x20036998

00016654 <le_param_req>:
{
   16654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16656:	4606      	mov	r6, r0
   16658:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1665a:	4608      	mov	r0, r1
   1665c:	f00b f88b 	bl	21776 <bt_le_conn_params_valid>
   16660:	4607      	mov	r7, r0
   16662:	b198      	cbz	r0, 1668c <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
   16664:	4b0a      	ldr	r3, [pc, #40]	; (16690 <le_param_req+0x3c>)
   16666:	681c      	ldr	r4, [r3, #0]
   16668:	e000      	b.n	1666c <le_param_req+0x18>
   1666a:	69a4      	ldr	r4, [r4, #24]
   1666c:	b174      	cbz	r4, 1668c <le_param_req+0x38>
		if (!cb->le_param_req) {
   1666e:	68a3      	ldr	r3, [r4, #8]
   16670:	2b00      	cmp	r3, #0
   16672:	d0fa      	beq.n	1666a <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   16674:	4629      	mov	r1, r5
   16676:	4630      	mov	r0, r6
   16678:	4798      	blx	r3
   1667a:	b130      	cbz	r0, 1668a <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
   1667c:	4628      	mov	r0, r5
   1667e:	f00b f87a 	bl	21776 <bt_le_conn_params_valid>
   16682:	2800      	cmp	r0, #0
   16684:	d1f1      	bne.n	1666a <le_param_req+0x16>
			return false;
   16686:	4607      	mov	r7, r0
   16688:	e000      	b.n	1668c <le_param_req+0x38>
			return false;
   1668a:	4607      	mov	r7, r0
}
   1668c:	4638      	mov	r0, r7
   1668e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16690:	20036998 	.word	0x20036998

00016694 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   16694:	4b02      	ldr	r3, [pc, #8]	; (166a0 <bt_conn_cb_register+0xc>)
   16696:	681a      	ldr	r2, [r3, #0]
   16698:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   1669a:	6018      	str	r0, [r3, #0]
}
   1669c:	4770      	bx	lr
   1669e:	bf00      	nop
   166a0:	20036998 	.word	0x20036998

000166a4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   166a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   166a6:	4607      	mov	r7, r0
   166a8:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   166aa:	2400      	movs	r4, #0
   166ac:	2c00      	cmp	r4, #0
   166ae:	dd02      	ble.n	166b6 <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   166b0:	2500      	movs	r5, #0
}
   166b2:	4628      	mov	r0, r5
   166b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   166b6:	4b0c      	ldr	r3, [pc, #48]	; (166e8 <bt_conn_lookup_addr_le+0x44>)
   166b8:	20c8      	movs	r0, #200	; 0xc8
   166ba:	fb00 3004 	mla	r0, r0, r4, r3
   166be:	f00b fbba 	bl	21e36 <bt_conn_ref>
		if (!conn) {
   166c2:	4605      	mov	r5, r0
   166c4:	b170      	cbz	r0, 166e4 <bt_conn_lookup_addr_le+0x40>
		if (conn->type != BT_CONN_TYPE_LE) {
   166c6:	7883      	ldrb	r3, [r0, #2]
   166c8:	2b01      	cmp	r3, #1
   166ca:	d109      	bne.n	166e0 <bt_conn_lookup_addr_le+0x3c>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   166cc:	4632      	mov	r2, r6
   166ce:	4639      	mov	r1, r7
   166d0:	f00b fc41 	bl	21f56 <bt_conn_is_peer_addr_le>
   166d4:	2800      	cmp	r0, #0
   166d6:	d1ec      	bne.n	166b2 <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   166d8:	4628      	mov	r0, r5
   166da:	f00b fbd3 	bl	21e84 <bt_conn_unref>
			continue;
   166de:	e001      	b.n	166e4 <bt_conn_lookup_addr_le+0x40>
			bt_conn_unref(conn);
   166e0:	f00b fbd0 	bl	21e84 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   166e4:	3401      	adds	r4, #1
   166e6:	e7e1      	b.n	166ac <bt_conn_lookup_addr_le+0x8>
   166e8:	20034ad8 	.word	0x20034ad8

000166ec <bt_conn_exists_le>:
{
   166ec:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   166ee:	f7ff ffd9 	bl	166a4 <bt_conn_lookup_addr_le>
	if (conn) {
   166f2:	b908      	cbnz	r0, 166f8 <bt_conn_exists_le+0xc>
	return false;
   166f4:	2000      	movs	r0, #0
}
   166f6:	bd10      	pop	{r4, pc}
   166f8:	4604      	mov	r4, r0
   166fa:	4b19      	ldr	r3, [pc, #100]	; (16760 <bt_conn_exists_le+0x74>)
   166fc:	4a19      	ldr	r2, [pc, #100]	; (16764 <bt_conn_exists_le+0x78>)
   166fe:	1a9b      	subs	r3, r3, r2
   16700:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   16702:	f04f 0200 	mov.w	r2, #0
   16706:	2102      	movs	r1, #2
   16708:	f361 0202 	bfi	r2, r1, #0, #3
   1670c:	f36f 02c5 	bfc	r2, #3, #3
   16710:	f363 128f 	bfi	r2, r3, #6, #10
   16714:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   16716:	2b08      	cmp	r3, #8
   16718:	d81d      	bhi.n	16756 <bt_conn_exists_le+0x6a>
   1671a:	e8df f003 	tbb	[pc, r3]
   1671e:	1e05      	.short	0x1e05
   16720:	1012140e 	.word	0x1012140e
   16724:	1816      	.short	0x1816
   16726:	1a          	.byte	0x1a
   16727:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   16728:	490f      	ldr	r1, [pc, #60]	; (16768 <bt_conn_exists_le+0x7c>)
   1672a:	4810      	ldr	r0, [pc, #64]	; (1676c <bt_conn_exists_le+0x80>)
   1672c:	f7fa fb98 	bl	10e60 <log_1>
		bt_conn_unref(conn);
   16730:	4620      	mov	r0, r4
   16732:	f00b fba7 	bl	21e84 <bt_conn_unref>
		return true;
   16736:	2001      	movs	r0, #1
   16738:	e7dd      	b.n	166f6 <bt_conn_exists_le+0xa>
		return "connect-scan";
   1673a:	490d      	ldr	r1, [pc, #52]	; (16770 <bt_conn_exists_le+0x84>)
   1673c:	e7f5      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   1673e:	490d      	ldr	r1, [pc, #52]	; (16774 <bt_conn_exists_le+0x88>)
   16740:	e7f3      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "connect-adv";
   16742:	490d      	ldr	r1, [pc, #52]	; (16778 <bt_conn_exists_le+0x8c>)
   16744:	e7f1      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "connect-auto";
   16746:	490d      	ldr	r1, [pc, #52]	; (1677c <bt_conn_exists_le+0x90>)
   16748:	e7ef      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "connect";
   1674a:	490d      	ldr	r1, [pc, #52]	; (16780 <bt_conn_exists_le+0x94>)
   1674c:	e7ed      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "connected";
   1674e:	490d      	ldr	r1, [pc, #52]	; (16784 <bt_conn_exists_le+0x98>)
   16750:	e7eb      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "disconnect";
   16752:	490d      	ldr	r1, [pc, #52]	; (16788 <bt_conn_exists_le+0x9c>)
   16754:	e7e9      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "(unknown)";
   16756:	490d      	ldr	r1, [pc, #52]	; (1678c <bt_conn_exists_le+0xa0>)
   16758:	e7e7      	b.n	1672a <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   1675a:	490d      	ldr	r1, [pc, #52]	; (16790 <bt_conn_exists_le+0xa4>)
   1675c:	e7e5      	b.n	1672a <bt_conn_exists_le+0x3e>
   1675e:	bf00      	nop
   16760:	00025474 	.word	0x00025474
   16764:	0002545c 	.word	0x0002545c
   16768:	00026d9c 	.word	0x00026d9c
   1676c:	00026df4 	.word	0x00026df4
   16770:	00026d4c 	.word	0x00026d4c
   16774:	00026d5c 	.word	0x00026d5c
   16778:	00026d6c 	.word	0x00026d6c
   1677c:	00026d78 	.word	0x00026d78
   16780:	00026d88 	.word	0x00026d88
   16784:	00027040 	.word	0x00027040
   16788:	00026d90 	.word	0x00026d90
   1678c:	00026d2c 	.word	0x00026d2c
   16790:	00026d38 	.word	0x00026d38

00016794 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16798:	4680      	mov	r8, r0
   1679a:	460f      	mov	r7, r1
   1679c:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1679e:	2400      	movs	r4, #0
   167a0:	2c00      	cmp	r4, #0
   167a2:	dd03      	ble.n	167ac <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   167a4:	2500      	movs	r5, #0
}
   167a6:	4628      	mov	r0, r5
   167a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   167ac:	4b11      	ldr	r3, [pc, #68]	; (167f4 <bt_conn_lookup_state_le+0x60>)
   167ae:	20c8      	movs	r0, #200	; 0xc8
   167b0:	fb00 3004 	mla	r0, r0, r4, r3
   167b4:	f00b fb3f 	bl	21e36 <bt_conn_ref>
		if (!conn) {
   167b8:	4605      	mov	r5, r0
   167ba:	b188      	cbz	r0, 167e0 <bt_conn_lookup_state_le+0x4c>
		if (conn->type != BT_CONN_TYPE_LE) {
   167bc:	7883      	ldrb	r3, [r0, #2]
   167be:	2b01      	cmp	r3, #1
   167c0:	d110      	bne.n	167e4 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   167c2:	b127      	cbz	r7, 167ce <bt_conn_lookup_state_le+0x3a>
   167c4:	463a      	mov	r2, r7
   167c6:	4641      	mov	r1, r8
   167c8:	f00b fbc5 	bl	21f56 <bt_conn_is_peer_addr_le>
   167cc:	b168      	cbz	r0, 167ea <bt_conn_lookup_state_le+0x56>
		if (!(conn->state == state && conn->id == id)) {
   167ce:	7aab      	ldrb	r3, [r5, #10]
   167d0:	42b3      	cmp	r3, r6
   167d2:	d102      	bne.n	167da <bt_conn_lookup_state_le+0x46>
   167d4:	7a2b      	ldrb	r3, [r5, #8]
   167d6:	4543      	cmp	r3, r8
   167d8:	d0e5      	beq.n	167a6 <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   167da:	4628      	mov	r0, r5
   167dc:	f00b fb52 	bl	21e84 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   167e0:	3401      	adds	r4, #1
   167e2:	e7dd      	b.n	167a0 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   167e4:	f00b fb4e 	bl	21e84 <bt_conn_unref>
			continue;
   167e8:	e7fa      	b.n	167e0 <bt_conn_lookup_state_le+0x4c>
			bt_conn_unref(conn);
   167ea:	4628      	mov	r0, r5
   167ec:	f00b fb4a 	bl	21e84 <bt_conn_unref>
			continue;
   167f0:	e7f6      	b.n	167e0 <bt_conn_lookup_state_le+0x4c>
   167f2:	bf00      	nop
   167f4:	20034ad8 	.word	0x20034ad8

000167f8 <bt_conn_get_info>:
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
	info->type = conn->type;
   167f8:	7883      	ldrb	r3, [r0, #2]
   167fa:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   167fc:	78c3      	ldrb	r3, [r0, #3]
   167fe:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   16800:	7a03      	ldrb	r3, [r0, #8]
   16802:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   16804:	7883      	ldrb	r3, [r0, #2]
   16806:	2b01      	cmp	r3, #1
   16808:	d127      	bne.n	1685a <bt_conn_get_info+0x62>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1680a:	f100 0388 	add.w	r3, r0, #136	; 0x88
   1680e:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   16810:	7a03      	ldrb	r3, [r0, #8]
   16812:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   16816:	4a12      	ldr	r2, [pc, #72]	; (16860 <bt_conn_get_info+0x68>)
   16818:	4413      	add	r3, r2
   1681a:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1681c:	78c3      	ldrb	r3, [r0, #3]
   1681e:	b9ab      	cbnz	r3, 1684c <bt_conn_get_info+0x54>
			info->le.local = &conn->le.init_addr;
   16820:	f100 038f 	add.w	r3, r0, #143	; 0x8f
   16824:	60cb      	str	r3, [r1, #12]
			info->le.remote = &conn->le.resp_addr;
   16826:	f100 0396 	add.w	r3, r0, #150	; 0x96
   1682a:	610b      	str	r3, [r1, #16]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   1682c:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   16830:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   16832:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   16836:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   16838:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   1683c:	830b      	strh	r3, [r1, #24]
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   1683e:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
   16842:	61cb      	str	r3, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
   16844:	30ba      	adds	r0, #186	; 0xba
   16846:	6208      	str	r0, [r1, #32]
#endif
		return 0;
   16848:	2000      	movs	r0, #0
   1684a:	4770      	bx	lr
			info->le.local = &conn->le.resp_addr;
   1684c:	f100 0396 	add.w	r3, r0, #150	; 0x96
   16850:	60cb      	str	r3, [r1, #12]
			info->le.remote = &conn->le.init_addr;
   16852:	f100 038f 	add.w	r3, r0, #143	; 0x8f
   16856:	610b      	str	r3, [r1, #16]
   16858:	e7e8      	b.n	1682c <bt_conn_get_info+0x34>
		}
		return 0;
#endif
	}

	return -EINVAL;
   1685a:	f06f 0015 	mvn.w	r0, #21
}
   1685e:	4770      	bx	lr
   16860:	200002b8 	.word	0x200002b8

00016864 <send_conn_le_param_update>:
{
   16864:	b538      	push	{r3, r4, r5, lr}
   16866:	4604      	mov	r4, r0
   16868:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1686a:	4608      	mov	r0, r1
   1686c:	f00a ff83 	bl	21776 <bt_le_conn_params_valid>
   16870:	b330      	cbz	r0, 168c0 <send_conn_le_param_update+0x5c>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16872:	4b15      	ldr	r3, [pc, #84]	; (168c8 <send_conn_le_param_update+0x64>)
   16874:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   16878:	f013 0f02 	tst.w	r3, #2
   1687c:	d004      	beq.n	16888 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1687e:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16882:	f013 0f02 	tst.w	r3, #2
   16886:	d10d      	bne.n	168a4 <send_conn_le_param_update+0x40>
	     (conn->role == BT_HCI_ROLE_MASTER)) {
   16888:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   1688a:	b9a3      	cbnz	r3, 168b6 <send_conn_le_param_update+0x52>
		rc = bt_conn_le_conn_update(conn, param);
   1688c:	4629      	mov	r1, r5
   1688e:	4620      	mov	r0, r4
   16890:	f00b fb8a 	bl	21fa8 <bt_conn_le_conn_update>
		if (rc == 0) {
   16894:	b998      	cbnz	r0, 168be <send_conn_le_param_update+0x5a>
			conn->le.pending_latency = param->latency;
   16896:	88ab      	ldrh	r3, [r5, #4]
   16898:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1689c:	88eb      	ldrh	r3, [r5, #6]
   1689e:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   168a2:	e00c      	b.n	168be <send_conn_le_param_update+0x5a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168a4:	f3bf 8f5b 	dmb	ish
   168a8:	6863      	ldr	r3, [r4, #4]
   168aa:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   168ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
   168b2:	d1e9      	bne.n	16888 <send_conn_le_param_update+0x24>
   168b4:	e7ea      	b.n	1688c <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   168b6:	4629      	mov	r1, r5
   168b8:	4620      	mov	r0, r4
   168ba:	f00b fc84 	bl	221c6 <bt_l2cap_update_conn_param>
}
   168be:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   168c0:	f06f 0015 	mvn.w	r0, #21
   168c4:	e7fb      	b.n	168be <send_conn_le_param_update+0x5a>
   168c6:	bf00      	nop
   168c8:	200002b8 	.word	0x200002b8

000168cc <deferred_work>:
{
   168cc:	b530      	push	{r4, r5, lr}
   168ce:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   168d0:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   168d4:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   168d8:	b3b3      	cbz	r3, 16948 <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   168da:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   168de:	2b01      	cmp	r3, #1
   168e0:	d130      	bne.n	16944 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   168e2:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   168e6:	f3bf 8f5b 	dmb	ish
   168ea:	e855 3f00 	ldrex	r3, [r5]
   168ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   168f2:	e845 2100 	strex	r1, r2, [r5]
   168f6:	2900      	cmp	r1, #0
   168f8:	d1f7      	bne.n	168ea <deferred_work+0x1e>
   168fa:	f3bf 8f5b 	dmb	ish
   168fe:	f413 7f00 	tst.w	r3, #512	; 0x200
   16902:	d02b      	beq.n	1695c <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16904:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   16908:	f8ad 3000 	strh.w	r3, [sp]
   1690c:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   16910:	f8ad 3002 	strh.w	r3, [sp, #2]
   16914:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   16918:	f8ad 3004 	strh.w	r3, [sp, #4]
   1691c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   16920:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   16924:	4669      	mov	r1, sp
   16926:	4620      	mov	r0, r4
   16928:	f7ff ff9c 	bl	16864 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1692c:	f3bf 8f5b 	dmb	ish
   16930:	e855 3f00 	ldrex	r3, [r5]
   16934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16938:	e845 3200 	strex	r2, r3, [r5]
   1693c:	2a00      	cmp	r2, #0
   1693e:	d1f7      	bne.n	16930 <deferred_work+0x64>
   16940:	f3bf 8f5b 	dmb	ish
}
   16944:	b005      	add	sp, #20
   16946:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   16948:	4620      	mov	r0, r4
   1694a:	f00b fbae 	bl	220aa <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1694e:	4620      	mov	r0, r4
   16950:	f7ff fab6 	bl	15ec0 <notify_disconnected>
		bt_conn_unref(conn);
   16954:	4620      	mov	r0, r4
   16956:	f00b fa95 	bl	21e84 <bt_conn_unref>
		return;
   1695a:	e7f3      	b.n	16944 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   1695c:	4a05      	ldr	r2, [pc, #20]	; (16974 <deferred_work+0xa8>)
   1695e:	ab02      	add	r3, sp, #8
   16960:	e892 0003 	ldmia.w	r2, {r0, r1}
   16964:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   16968:	4619      	mov	r1, r3
   1696a:	4620      	mov	r0, r4
   1696c:	f7ff ff7a 	bl	16864 <send_conn_le_param_update>
   16970:	e7dc      	b.n	1692c <deferred_work+0x60>
   16972:	bf00      	nop
   16974:	00025664 	.word	0x00025664

00016978 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   16978:	b538      	push	{r3, r4, r5, lr}
   1697a:	460c      	mov	r4, r1
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());

	if (!pool) {
   1697c:	4601      	mov	r1, r0
   1697e:	b150      	cbz	r0, 16996 <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   16980:	4608      	mov	r0, r1
   16982:	f00c fe97 	bl	236b4 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   16986:	4605      	mov	r5, r0
   16988:	b138      	cbz	r0, 1699a <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   1698a:	1d21      	adds	r1, r4, #4
   1698c:	3008      	adds	r0, #8
   1698e:	f00c feb3 	bl	236f8 <net_buf_simple_reserve>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   16992:	4628      	mov	r0, r5
   16994:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   16996:	4909      	ldr	r1, [pc, #36]	; (169bc <bt_conn_create_pdu_timeout+0x44>)
   16998:	e7f2      	b.n	16980 <bt_conn_create_pdu_timeout+0x8>
   1699a:	4b09      	ldr	r3, [pc, #36]	; (169c0 <bt_conn_create_pdu_timeout+0x48>)
   1699c:	4a09      	ldr	r2, [pc, #36]	; (169c4 <bt_conn_create_pdu_timeout+0x4c>)
   1699e:	1a9b      	subs	r3, r3, r2
   169a0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   169a2:	f04f 0100 	mov.w	r1, #0
   169a6:	2202      	movs	r2, #2
   169a8:	f362 0102 	bfi	r1, r2, #0, #3
   169ac:	f36f 01c5 	bfc	r1, #3, #3
   169b0:	f363 118f 	bfi	r1, r3, #6, #10
   169b4:	4804      	ldr	r0, [pc, #16]	; (169c8 <bt_conn_create_pdu_timeout+0x50>)
   169b6:	f7fa fb09 	bl	10fcc <log_0>
		return NULL;
   169ba:	e7ea      	b.n	16992 <bt_conn_create_pdu_timeout+0x1a>
   169bc:	20033c50 	.word	0x20033c50
   169c0:	00025474 	.word	0x00025474
   169c4:	0002545c 	.word	0x0002545c
   169c8:	00026e18 	.word	0x00026e18

000169cc <bt_conn_create_frag_timeout>:
{
   169cc:	b508      	push	{r3, lr}
   169ce:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   169d0:	4801      	ldr	r0, [pc, #4]	; (169d8 <bt_conn_create_frag_timeout+0xc>)
   169d2:	f7ff ffd1 	bl	16978 <bt_conn_create_pdu_timeout>
}
   169d6:	bd08      	pop	{r3, pc}
   169d8:	20033ca0 	.word	0x20033ca0

000169dc <create_frag>:
{
   169dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169de:	4606      	mov	r6, r0
   169e0:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   169e2:	f04f 32ff 	mov.w	r2, #4294967295
   169e6:	f04f 33ff 	mov.w	r3, #4294967295
   169ea:	2000      	movs	r0, #0
   169ec:	f7ff ffee 	bl	169cc <bt_conn_create_frag_timeout>
   169f0:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   169f2:	7ab3      	ldrb	r3, [r6, #10]
   169f4:	2b07      	cmp	r3, #7
   169f6:	d11a      	bne.n	16a2e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   169f8:	2300      	movs	r3, #0
   169fa:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   169fc:	4b10      	ldr	r3, [pc, #64]	; (16a40 <create_frag+0x64>)
   169fe:	f8b3 60cc 	ldrh.w	r6, [r3, #204]	; 0xcc
	return net_buf_simple_tailroom(&buf->b);
   16a02:	f100 0708 	add.w	r7, r0, #8
   16a06:	4638      	mov	r0, r7
   16a08:	f00c ff0d 	bl	23826 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16a0c:	4286      	cmp	r6, r0
   16a0e:	d212      	bcs.n	16a36 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   16a10:	4b0b      	ldr	r3, [pc, #44]	; (16a40 <create_frag+0x64>)
   16a12:	f8b3 60cc 	ldrh.w	r6, [r3, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16a16:	4632      	mov	r2, r6
   16a18:	f855 1f08 	ldr.w	r1, [r5, #8]!
   16a1c:	4638      	mov	r0, r7
   16a1e:	f00c fecc 	bl	237ba <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16a22:	4631      	mov	r1, r6
   16a24:	4628      	mov	r0, r5
   16a26:	f00c fee2 	bl	237ee <net_buf_simple_pull>
}
   16a2a:	4620      	mov	r0, r4
   16a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   16a2e:	f00c fe74 	bl	2371a <net_buf_unref>
		return NULL;
   16a32:	2400      	movs	r4, #0
   16a34:	e7f9      	b.n	16a2a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   16a36:	4638      	mov	r0, r7
   16a38:	f00c fef5 	bl	23826 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16a3c:	b286      	uxth	r6, r0
   16a3e:	e7ea      	b.n	16a16 <create_frag+0x3a>
   16a40:	200002b8 	.word	0x200002b8

00016a44 <send_buf>:
{
   16a44:	b538      	push	{r3, r4, r5, lr}
   16a46:	4605      	mov	r5, r0
   16a48:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   16a4a:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   16a4c:	4a1b      	ldr	r2, [pc, #108]	; (16abc <send_buf+0x78>)
   16a4e:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	; 0xcc
	if (buf->len <= conn_mtu(conn)) {
   16a52:	429a      	cmp	r2, r3
   16a54:	d21f      	bcs.n	16a96 <send_buf+0x52>
	frag = create_frag(conn, buf);
   16a56:	f7ff ffc1 	bl	169dc <create_frag>
	if (!frag) {
   16a5a:	4601      	mov	r1, r0
   16a5c:	b350      	cbz	r0, 16ab4 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16a5e:	2301      	movs	r3, #1
   16a60:	2200      	movs	r2, #0
   16a62:	4628      	mov	r0, r5
   16a64:	f7ff fa7e 	bl	15f64 <send_frag>
   16a68:	4603      	mov	r3, r0
   16a6a:	b1c8      	cbz	r0, 16aa0 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   16a6c:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   16a6e:	4a13      	ldr	r2, [pc, #76]	; (16abc <send_buf+0x78>)
   16a70:	f8b2 20cc 	ldrh.w	r2, [r2, #204]	; 0xcc
	while (buf->len > conn_mtu(conn)) {
   16a74:	429a      	cmp	r2, r3
   16a76:	d215      	bcs.n	16aa4 <send_buf+0x60>
		frag = create_frag(conn, buf);
   16a78:	4621      	mov	r1, r4
   16a7a:	4628      	mov	r0, r5
   16a7c:	f7ff ffae 	bl	169dc <create_frag>
		if (!frag) {
   16a80:	4601      	mov	r1, r0
   16a82:	b1c8      	cbz	r0, 16ab8 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16a84:	2301      	movs	r3, #1
   16a86:	461a      	mov	r2, r3
   16a88:	4628      	mov	r0, r5
   16a8a:	f7ff fa6b 	bl	15f64 <send_frag>
   16a8e:	4603      	mov	r3, r0
   16a90:	2800      	cmp	r0, #0
   16a92:	d1eb      	bne.n	16a6c <send_buf+0x28>
   16a94:	e004      	b.n	16aa0 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   16a96:	2300      	movs	r3, #0
   16a98:	2202      	movs	r2, #2
   16a9a:	f7ff fa63 	bl	15f64 <send_frag>
   16a9e:	4603      	mov	r3, r0
}
   16aa0:	4618      	mov	r0, r3
   16aa2:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   16aa4:	2300      	movs	r3, #0
   16aa6:	2203      	movs	r2, #3
   16aa8:	4621      	mov	r1, r4
   16aaa:	4628      	mov	r0, r5
   16aac:	f7ff fa5a 	bl	15f64 <send_frag>
   16ab0:	4603      	mov	r3, r0
   16ab2:	e7f5      	b.n	16aa0 <send_buf+0x5c>
		return false;
   16ab4:	2300      	movs	r3, #0
   16ab6:	e7f3      	b.n	16aa0 <send_buf+0x5c>
			return false;
   16ab8:	2300      	movs	r3, #0
   16aba:	e7f1      	b.n	16aa0 <send_buf+0x5c>
   16abc:	200002b8 	.word	0x200002b8

00016ac0 <bt_conn_process_tx>:
{
   16ac0:	b538      	push	{r3, r4, r5, lr}
   16ac2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16ac4:	7a83      	ldrb	r3, [r0, #10]
   16ac6:	b97b      	cbnz	r3, 16ae8 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   16ac8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16aca:	f3bf 8f5b 	dmb	ish
   16ace:	e853 2f00 	ldrex	r2, [r3]
   16ad2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   16ad6:	e843 1000 	strex	r0, r1, [r3]
   16ada:	2800      	cmp	r0, #0
   16adc:	d1f7      	bne.n	16ace <bt_conn_process_tx+0xe>
   16ade:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   16ae2:	f012 0f40 	tst.w	r2, #64	; 0x40
   16ae6:	d10d      	bne.n	16b04 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16ae8:	2200      	movs	r2, #0
   16aea:	2300      	movs	r3, #0
   16aec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16af0:	f00c fde7 	bl	236c2 <net_buf_get>
	BT_ASSERT(buf);
   16af4:	4605      	mov	r5, r0
   16af6:	b148      	cbz	r0, 16b0c <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   16af8:	4629      	mov	r1, r5
   16afa:	4620      	mov	r0, r4
   16afc:	f7ff ffa2 	bl	16a44 <send_buf>
   16b00:	b190      	cbz	r0, 16b28 <bt_conn_process_tx+0x68>
}
   16b02:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   16b04:	4620      	mov	r0, r4
   16b06:	f00b f937 	bl	21d78 <conn_cleanup>
		return;
   16b0a:	e7fa      	b.n	16b02 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   16b0c:	f240 23c6 	movw	r3, #710	; 0x2c6
   16b10:	4a07      	ldr	r2, [pc, #28]	; (16b30 <bt_conn_process_tx+0x70>)
   16b12:	4908      	ldr	r1, [pc, #32]	; (16b34 <bt_conn_process_tx+0x74>)
   16b14:	4808      	ldr	r0, [pc, #32]	; (16b38 <bt_conn_process_tx+0x78>)
   16b16:	f009 f889 	bl	1fc2c <printk>
   16b1a:	4040      	eors	r0, r0
   16b1c:	f380 8811 	msr	BASEPRI, r0
   16b20:	f04f 0003 	mov.w	r0, #3
   16b24:	df02      	svc	2
   16b26:	e7e7      	b.n	16af8 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   16b28:	4628      	mov	r0, r5
   16b2a:	f00c fdf6 	bl	2371a <net_buf_unref>
   16b2e:	e7e8      	b.n	16b02 <bt_conn_process_tx+0x42>
   16b30:	00026e44 	.word	0x00026e44
   16b34:	000275ac 	.word	0x000275ac
   16b38:	0002668c 	.word	0x0002668c

00016b3c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16b3c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16b3e:	2400      	movs	r4, #0
   16b40:	2c04      	cmp	r4, #4
   16b42:	dc07      	bgt.n	16b54 <bt_conn_init+0x18>
		k_fifo_put(&free_tx, &conn_tx[i]);
   16b44:	4909      	ldr	r1, [pc, #36]	; (16b6c <bt_conn_init+0x30>)
   16b46:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   16b4a:	4809      	ldr	r0, [pc, #36]	; (16b70 <bt_conn_init+0x34>)
   16b4c:	f00d fe47 	bl	247de <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16b50:	3401      	adds	r4, #1
   16b52:	e7f5      	b.n	16b40 <bt_conn_init+0x4>
	}

	bt_att_init();
   16b54:	f00c f86c 	bl	22c30 <bt_att_init>

	err = bt_smp_init();
   16b58:	f00c fce2 	bl	23520 <bt_smp_init>
	if (err) {
   16b5c:	4604      	mov	r4, r0
   16b5e:	b108      	cbz	r0, 16b64 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16b60:	4620      	mov	r0, r4
   16b62:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   16b64:	f00b fb5c 	bl	22220 <bt_l2cap_init>
	return 0;
   16b68:	e7fa      	b.n	16b60 <bt_conn_init+0x24>
   16b6a:	bf00      	nop
   16b6c:	2003699c 	.word	0x2003699c
   16b70:	20033c38 	.word	0x20033c38

00016b74 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   16b74:	4a05      	ldr	r2, [pc, #20]	; (16b8c <get_ident+0x18>)
   16b76:	7813      	ldrb	r3, [r2, #0]
   16b78:	3301      	adds	r3, #1
   16b7a:	b2db      	uxtb	r3, r3
   16b7c:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   16b7e:	b90b      	cbnz	r3, 16b84 <get_ident+0x10>
		ident++;
   16b80:	3301      	adds	r3, #1
   16b82:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   16b84:	4b01      	ldr	r3, [pc, #4]	; (16b8c <get_ident+0x18>)
   16b86:	7818      	ldrb	r0, [r3, #0]
   16b88:	4770      	bx	lr
   16b8a:	bf00      	nop
   16b8c:	20038120 	.word	0x20038120

00016b90 <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   16b90:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   16b92:	898b      	ldrh	r3, [r1, #12]
   16b94:	2b01      	cmp	r3, #1
   16b96:	d900      	bls.n	16b9a <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   16b98:	bd08      	pop	{r3, pc}
   16b9a:	4b08      	ldr	r3, [pc, #32]	; (16bbc <le_conn_param_rsp+0x2c>)
   16b9c:	4a08      	ldr	r2, [pc, #32]	; (16bc0 <le_conn_param_rsp+0x30>)
   16b9e:	1a9b      	subs	r3, r3, r2
   16ba0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   16ba2:	f04f 0100 	mov.w	r1, #0
   16ba6:	2201      	movs	r2, #1
   16ba8:	f362 0102 	bfi	r1, r2, #0, #3
   16bac:	f36f 01c5 	bfc	r1, #3, #3
   16bb0:	f363 118f 	bfi	r1, r3, #6, #10
   16bb4:	4803      	ldr	r0, [pc, #12]	; (16bc4 <le_conn_param_rsp+0x34>)
   16bb6:	f7fa fa09 	bl	10fcc <log_0>
		return;
   16bba:	e7ed      	b.n	16b98 <le_conn_param_rsp+0x8>
   16bbc:	00025494 	.word	0x00025494
   16bc0:	0002545c 	.word	0x0002545c
   16bc4:	00026e9c 	.word	0x00026e9c

00016bc8 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   16bc8:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16bca:	2300      	movs	r3, #0
   16bcc:	2b00      	cmp	r3, #0
   16bce:	dd13      	ble.n	16bf8 <l2cap_accept+0x30>
   16bd0:	4b12      	ldr	r3, [pc, #72]	; (16c1c <l2cap_accept+0x54>)
   16bd2:	4a13      	ldr	r2, [pc, #76]	; (16c20 <l2cap_accept+0x58>)
   16bd4:	1a9b      	subs	r3, r3, r2
   16bd6:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   16bd8:	f04f 0200 	mov.w	r2, #0
   16bdc:	2101      	movs	r1, #1
   16bde:	f361 0202 	bfi	r2, r1, #0, #3
   16be2:	f36f 02c5 	bfc	r2, #3, #3
   16be6:	f363 128f 	bfi	r2, r3, #6, #10
   16bea:	4601      	mov	r1, r0
   16bec:	480d      	ldr	r0, [pc, #52]	; (16c24 <l2cap_accept+0x5c>)
   16bee:	f7fa f937 	bl	10e60 <log_1>

	return -ENOMEM;
   16bf2:	f06f 000b 	mvn.w	r0, #11
}
   16bf6:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   16bf8:	22e8      	movs	r2, #232	; 0xe8
   16bfa:	fb02 f203 	mul.w	r2, r2, r3
   16bfe:	4c0a      	ldr	r4, [pc, #40]	; (16c28 <l2cap_accept+0x60>)
   16c00:	58a2      	ldr	r2, [r4, r2]
   16c02:	b10a      	cbz	r2, 16c08 <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16c04:	3301      	adds	r3, #1
   16c06:	e7e1      	b.n	16bcc <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   16c08:	4a07      	ldr	r2, [pc, #28]	; (16c28 <l2cap_accept+0x60>)
   16c0a:	20e8      	movs	r0, #232	; 0xe8
   16c0c:	fb00 2303 	mla	r3, r0, r3, r2
   16c10:	4a06      	ldr	r2, [pc, #24]	; (16c2c <l2cap_accept+0x64>)
   16c12:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   16c14:	600b      	str	r3, [r1, #0]
		return 0;
   16c16:	2000      	movs	r0, #0
   16c18:	e7ed      	b.n	16bf6 <l2cap_accept+0x2e>
   16c1a:	bf00      	nop
   16c1c:	00025494 	.word	0x00025494
   16c20:	0002545c 	.word	0x0002545c
   16c24:	00026eb8 	.word	0x00026eb8
   16c28:	20034ba0 	.word	0x20034ba0
   16c2c:	0002701c 	.word	0x0002701c

00016c30 <l2cap_rtx_timeout>:
{
   16c30:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   16c32:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   16c36:	f850 5c10 	ldr.w	r5, [r0, #-16]
   16c3a:	4b0c      	ldr	r3, [pc, #48]	; (16c6c <l2cap_rtx_timeout+0x3c>)
   16c3c:	4a0c      	ldr	r2, [pc, #48]	; (16c70 <l2cap_rtx_timeout+0x40>)
   16c3e:	1a9b      	subs	r3, r3, r2
   16c40:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   16c42:	f04f 0200 	mov.w	r2, #0
   16c46:	2101      	movs	r1, #1
   16c48:	f361 0202 	bfi	r2, r1, #0, #3
   16c4c:	f36f 02c5 	bfc	r2, #3, #3
   16c50:	f363 128f 	bfi	r2, r3, #6, #10
   16c54:	4621      	mov	r1, r4
   16c56:	4807      	ldr	r0, [pc, #28]	; (16c74 <l2cap_rtx_timeout+0x44>)
   16c58:	f7fa f902 	bl	10e60 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   16c5c:	4621      	mov	r1, r4
   16c5e:	4628      	mov	r0, r5
   16c60:	f00b f9d8 	bl	22014 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   16c64:	4620      	mov	r0, r4
   16c66:	f00b f9fd 	bl	22064 <bt_l2cap_chan_del>
}
   16c6a:	bd38      	pop	{r3, r4, r5, pc}
   16c6c:	00025494 	.word	0x00025494
   16c70:	0002545c 	.word	0x0002545c
   16c74:	00026ee0 	.word	0x00026ee0

00016c78 <l2cap_chan_add>:
{
   16c78:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   16c7a:	b1d9      	cbz	r1, 16cb4 <l2cap_chan_add+0x3c>
   16c7c:	4604      	mov	r4, r0
   16c7e:	4615      	mov	r5, r2
   16c80:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16c82:	4914      	ldr	r1, [pc, #80]	; (16cd4 <l2cap_chan_add+0x5c>)
   16c84:	f106 0010 	add.w	r0, r6, #16
   16c88:	f00d feab 	bl	249e2 <k_work_init_delayable>
	atomic_clear(chan->status);
   16c8c:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16c90:	2200      	movs	r2, #0
   16c92:	f3bf 8f5b 	dmb	ish
   16c96:	e853 1f00 	ldrex	r1, [r3]
   16c9a:	e843 2000 	strex	r0, r2, [r3]
   16c9e:	2800      	cmp	r0, #0
   16ca0:	d1f9      	bne.n	16c96 <l2cap_chan_add+0x1e>
   16ca2:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   16ca6:	462a      	mov	r2, r5
   16ca8:	4631      	mov	r1, r6
   16caa:	4620      	mov	r0, r4
   16cac:	f00b f9ed 	bl	2208a <bt_l2cap_chan_add>
	return true;
   16cb0:	2001      	movs	r0, #1
}
   16cb2:	bd70      	pop	{r4, r5, r6, pc}
   16cb4:	4b08      	ldr	r3, [pc, #32]	; (16cd8 <l2cap_chan_add+0x60>)
   16cb6:	4a09      	ldr	r2, [pc, #36]	; (16cdc <l2cap_chan_add+0x64>)
   16cb8:	1a9b      	subs	r3, r3, r2
   16cba:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   16cbc:	2201      	movs	r2, #1
   16cbe:	f362 0102 	bfi	r1, r2, #0, #3
   16cc2:	f36f 01c5 	bfc	r1, #3, #3
   16cc6:	f363 118f 	bfi	r1, r3, #6, #10
   16cca:	4805      	ldr	r0, [pc, #20]	; (16ce0 <l2cap_chan_add+0x68>)
   16ccc:	f7fa f97e 	bl	10fcc <log_0>
		return false;
   16cd0:	2000      	movs	r0, #0
   16cd2:	e7ee      	b.n	16cb2 <l2cap_chan_add+0x3a>
   16cd4:	00016c31 	.word	0x00016c31
   16cd8:	00025494 	.word	0x00025494
   16cdc:	0002545c 	.word	0x0002545c
   16ce0:	00026ef0 	.word	0x00026ef0

00016ce4 <bt_l2cap_connected>:
{
   16ce4:	b530      	push	{r4, r5, lr}
   16ce6:	b083      	sub	sp, #12
   16ce8:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16cea:	4c1a      	ldr	r4, [pc, #104]	; (16d54 <bt_l2cap_connected+0x70>)
   16cec:	e000      	b.n	16cf0 <bt_l2cap_connected+0xc>
   16cee:	340c      	adds	r4, #12
   16cf0:	4b19      	ldr	r3, [pc, #100]	; (16d58 <bt_l2cap_connected+0x74>)
   16cf2:	429c      	cmp	r4, r3
   16cf4:	d22c      	bcs.n	16d50 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   16cf6:	6863      	ldr	r3, [r4, #4]
   16cf8:	a901      	add	r1, sp, #4
   16cfa:	4628      	mov	r0, r5
   16cfc:	4798      	blx	r3
   16cfe:	2800      	cmp	r0, #0
   16d00:	dbf5      	blt.n	16cee <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   16d02:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   16d04:	8823      	ldrh	r3, [r4, #0]
   16d06:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   16d0a:	f8a1 307c 	strh.w	r3, [r1, #124]	; 0x7c
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16d0e:	68a2      	ldr	r2, [r4, #8]
   16d10:	4628      	mov	r0, r5
   16d12:	f7ff ffb1 	bl	16c78 <l2cap_chan_add>
   16d16:	b1d8      	cbz	r0, 16d50 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   16d18:	9801      	ldr	r0, [sp, #4]
   16d1a:	6843      	ldr	r3, [r0, #4]
   16d1c:	681b      	ldr	r3, [r3, #0]
   16d1e:	b103      	cbz	r3, 16d22 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   16d20:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   16d22:	9b01      	ldr	r3, [sp, #4]
   16d24:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d26:	f3bf 8f5b 	dmb	ish
   16d2a:	e853 2f00 	ldrex	r2, [r3]
   16d2e:	f042 0201 	orr.w	r2, r2, #1
   16d32:	e843 2100 	strex	r1, r2, [r3]
   16d36:	2900      	cmp	r1, #0
   16d38:	d1f7      	bne.n	16d2a <bt_l2cap_connected+0x46>
   16d3a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16d3e:	9801      	ldr	r0, [sp, #4]
   16d40:	6843      	ldr	r3, [r0, #4]
   16d42:	699b      	ldr	r3, [r3, #24]
   16d44:	2b00      	cmp	r3, #0
   16d46:	d0d2      	beq.n	16cee <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   16d48:	f100 0168 	add.w	r1, r0, #104	; 0x68
   16d4c:	4798      	blx	r3
   16d4e:	e7ce      	b.n	16cee <bt_l2cap_connected+0xa>
}
   16d50:	b003      	add	sp, #12
   16d52:	bd30      	pop	{r4, r5, pc}
   16d54:	00025420 	.word	0x00025420
   16d58:	00025444 	.word	0x00025444

00016d5c <l2cap_create_le_sig_pdu>:
{
   16d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d5e:	460c      	mov	r4, r1
   16d60:	4616      	mov	r6, r2
   16d62:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   16d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   16d68:	2300      	movs	r3, #0
   16d6a:	2100      	movs	r1, #0
   16d6c:	4608      	mov	r0, r1
   16d6e:	f00b f9bd 	bl	220ec <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16d72:	4607      	mov	r7, r0
   16d74:	b140      	cbz	r0, 16d88 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   16d76:	2104      	movs	r1, #4
   16d78:	3008      	adds	r0, #8
   16d7a:	f00c fd18 	bl	237ae <net_buf_simple_add>
	hdr->code = code;
   16d7e:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   16d80:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   16d82:	8045      	strh	r5, [r0, #2]
}
   16d84:	4638      	mov	r0, r7
   16d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16d88:	4b08      	ldr	r3, [pc, #32]	; (16dac <l2cap_create_le_sig_pdu+0x50>)
   16d8a:	4a09      	ldr	r2, [pc, #36]	; (16db0 <l2cap_create_le_sig_pdu+0x54>)
   16d8c:	1a9b      	subs	r3, r3, r2
   16d8e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   16d90:	f04f 0200 	mov.w	r2, #0
   16d94:	2101      	movs	r1, #1
   16d96:	f361 0202 	bfi	r2, r1, #0, #3
   16d9a:	f36f 02c5 	bfc	r2, #3, #3
   16d9e:	f363 128f 	bfi	r2, r3, #6, #10
   16da2:	4621      	mov	r1, r4
   16da4:	4803      	ldr	r0, [pc, #12]	; (16db4 <l2cap_create_le_sig_pdu+0x58>)
   16da6:	f7fa f85b 	bl	10e60 <log_1>
		return NULL;
   16daa:	e7eb      	b.n	16d84 <l2cap_create_le_sig_pdu+0x28>
   16dac:	00025494 	.word	0x00025494
   16db0:	0002545c 	.word	0x0002545c
   16db4:	00026f14 	.word	0x00026f14

00016db8 <l2cap_recv>:
{
   16db8:	b570      	push	{r4, r5, r6, lr}
   16dba:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   16dbc:	898b      	ldrh	r3, [r1, #12]
   16dbe:	2b03      	cmp	r3, #3
   16dc0:	d917      	bls.n	16df2 <l2cap_recv+0x3a>
   16dc2:	4606      	mov	r6, r0
   16dc4:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   16dc6:	2104      	movs	r1, #4
   16dc8:	f104 0008 	add.w	r0, r4, #8
   16dcc:	f00c fd17 	bl	237fe <net_buf_simple_pull_mem>
   16dd0:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   16dd2:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   16dd4:	89a1      	ldrh	r1, [r4, #12]
   16dd6:	4291      	cmp	r1, r2
   16dd8:	d11e      	bne.n	16e18 <l2cap_recv+0x60>
	if (!hdr->ident) {
   16dda:	7843      	ldrb	r3, [r0, #1]
   16ddc:	b36b      	cbz	r3, 16e3a <l2cap_recv+0x82>
	switch (hdr->code) {
   16dde:	7801      	ldrb	r1, [r0, #0]
   16de0:	2901      	cmp	r1, #1
   16de2:	d016      	beq.n	16e12 <l2cap_recv+0x5a>
   16de4:	2913      	cmp	r1, #19
   16de6:	d139      	bne.n	16e5c <l2cap_recv+0xa4>
		le_conn_param_rsp(l2cap, buf);
   16de8:	4621      	mov	r1, r4
   16dea:	4630      	mov	r0, r6
   16dec:	f7ff fed0 	bl	16b90 <le_conn_param_rsp>
		break;
   16df0:	e00f      	b.n	16e12 <l2cap_recv+0x5a>
   16df2:	4b26      	ldr	r3, [pc, #152]	; (16e8c <l2cap_recv+0xd4>)
   16df4:	4a26      	ldr	r2, [pc, #152]	; (16e90 <l2cap_recv+0xd8>)
   16df6:	1a9b      	subs	r3, r3, r2
   16df8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   16dfa:	f04f 0100 	mov.w	r1, #0
   16dfe:	2201      	movs	r2, #1
   16e00:	f362 0102 	bfi	r1, r2, #0, #3
   16e04:	f36f 01c5 	bfc	r1, #3, #3
   16e08:	f363 118f 	bfi	r1, r3, #6, #10
   16e0c:	4821      	ldr	r0, [pc, #132]	; (16e94 <l2cap_recv+0xdc>)
   16e0e:	f7fa f8dd 	bl	10fcc <log_0>
}
   16e12:	2000      	movs	r0, #0
   16e14:	b002      	add	sp, #8
   16e16:	bd70      	pop	{r4, r5, r6, pc}
   16e18:	481c      	ldr	r0, [pc, #112]	; (16e8c <l2cap_recv+0xd4>)
   16e1a:	4b1d      	ldr	r3, [pc, #116]	; (16e90 <l2cap_recv+0xd8>)
   16e1c:	1ac0      	subs	r0, r0, r3
   16e1e:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   16e20:	f04f 0300 	mov.w	r3, #0
   16e24:	2401      	movs	r4, #1
   16e26:	f364 0302 	bfi	r3, r4, #0, #3
   16e2a:	f36f 03c5 	bfc	r3, #3, #3
   16e2e:	f360 138f 	bfi	r3, r0, #6, #10
   16e32:	4819      	ldr	r0, [pc, #100]	; (16e98 <l2cap_recv+0xe0>)
   16e34:	f7fa f84a 	bl	10ecc <log_2>
		return 0;
   16e38:	e7eb      	b.n	16e12 <l2cap_recv+0x5a>
   16e3a:	4b14      	ldr	r3, [pc, #80]	; (16e8c <l2cap_recv+0xd4>)
   16e3c:	4a14      	ldr	r2, [pc, #80]	; (16e90 <l2cap_recv+0xd8>)
   16e3e:	1a9b      	subs	r3, r3, r2
   16e40:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   16e42:	f04f 0100 	mov.w	r1, #0
   16e46:	2201      	movs	r2, #1
   16e48:	f362 0102 	bfi	r1, r2, #0, #3
   16e4c:	f36f 01c5 	bfc	r1, #3, #3
   16e50:	f363 118f 	bfi	r1, r3, #6, #10
   16e54:	4811      	ldr	r0, [pc, #68]	; (16e9c <l2cap_recv+0xe4>)
   16e56:	f7fa f8b9 	bl	10fcc <log_0>
		return 0;
   16e5a:	e7da      	b.n	16e12 <l2cap_recv+0x5a>
   16e5c:	4b0b      	ldr	r3, [pc, #44]	; (16e8c <l2cap_recv+0xd4>)
   16e5e:	4a0c      	ldr	r2, [pc, #48]	; (16e90 <l2cap_recv+0xd8>)
   16e60:	1a9b      	subs	r3, r3, r2
   16e62:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   16e64:	f04f 0200 	mov.w	r2, #0
   16e68:	2002      	movs	r0, #2
   16e6a:	f360 0202 	bfi	r2, r0, #0, #3
   16e6e:	f36f 02c5 	bfc	r2, #3, #3
   16e72:	f363 128f 	bfi	r2, r3, #6, #10
   16e76:	480a      	ldr	r0, [pc, #40]	; (16ea0 <l2cap_recv+0xe8>)
   16e78:	f7f9 fff2 	bl	10e60 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   16e7c:	7869      	ldrb	r1, [r5, #1]
   16e7e:	2200      	movs	r2, #0
   16e80:	9200      	str	r2, [sp, #0]
   16e82:	4613      	mov	r3, r2
   16e84:	6830      	ldr	r0, [r6, #0]
   16e86:	f00b f94b 	bl	22120 <l2cap_send_reject>
		break;
   16e8a:	e7c2      	b.n	16e12 <l2cap_recv+0x5a>
   16e8c:	00025494 	.word	0x00025494
   16e90:	0002545c 	.word	0x0002545c
   16e94:	00026f3c 	.word	0x00026f3c
   16e98:	00026f5c 	.word	0x00026f5c
   16e9c:	00026f80 	.word	0x00026f80
   16ea0:	00026fa4 	.word	0x00026fa4

00016ea4 <bt_l2cap_recv>:
{
   16ea4:	b570      	push	{r4, r5, r6, lr}
   16ea6:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   16ea8:	898b      	ldrh	r3, [r1, #12]
   16eaa:	2b03      	cmp	r3, #3
   16eac:	d90f      	bls.n	16ece <bt_l2cap_recv+0x2a>
   16eae:	4605      	mov	r5, r0
   16eb0:	2104      	movs	r1, #4
   16eb2:	f104 0008 	add.w	r0, r4, #8
   16eb6:	f00c fca2 	bl	237fe <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   16eba:	8846      	ldrh	r6, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16ebc:	4631      	mov	r1, r6
   16ebe:	4628      	mov	r0, r5
   16ec0:	f00b f96e 	bl	221a0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16ec4:	b1b8      	cbz	r0, 16ef6 <bt_l2cap_recv+0x52>
	l2cap_chan_recv(chan, buf);
   16ec6:	4621      	mov	r1, r4
   16ec8:	f00b f896 	bl	21ff8 <l2cap_chan_recv>
}
   16ecc:	bd70      	pop	{r4, r5, r6, pc}
   16ece:	4b14      	ldr	r3, [pc, #80]	; (16f20 <bt_l2cap_recv+0x7c>)
   16ed0:	4a14      	ldr	r2, [pc, #80]	; (16f24 <bt_l2cap_recv+0x80>)
   16ed2:	1a9b      	subs	r3, r3, r2
   16ed4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   16ed6:	f04f 0100 	mov.w	r1, #0
   16eda:	2201      	movs	r2, #1
   16edc:	f362 0102 	bfi	r1, r2, #0, #3
   16ee0:	f36f 01c5 	bfc	r1, #3, #3
   16ee4:	f363 118f 	bfi	r1, r3, #6, #10
   16ee8:	480f      	ldr	r0, [pc, #60]	; (16f28 <bt_l2cap_recv+0x84>)
   16eea:	f7fa f86f 	bl	10fcc <log_0>
		net_buf_unref(buf);
   16eee:	4620      	mov	r0, r4
   16ef0:	f00c fc13 	bl	2371a <net_buf_unref>
		return;
   16ef4:	e7ea      	b.n	16ecc <bt_l2cap_recv+0x28>
   16ef6:	4b0a      	ldr	r3, [pc, #40]	; (16f20 <bt_l2cap_recv+0x7c>)
   16ef8:	4a0a      	ldr	r2, [pc, #40]	; (16f24 <bt_l2cap_recv+0x80>)
   16efa:	1a9b      	subs	r3, r3, r2
   16efc:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   16efe:	f04f 0200 	mov.w	r2, #0
   16f02:	2102      	movs	r1, #2
   16f04:	f361 0202 	bfi	r2, r1, #0, #3
   16f08:	f36f 02c5 	bfc	r2, #3, #3
   16f0c:	f363 128f 	bfi	r2, r3, #6, #10
   16f10:	4631      	mov	r1, r6
   16f12:	4806      	ldr	r0, [pc, #24]	; (16f2c <bt_l2cap_recv+0x88>)
   16f14:	f7f9 ffa4 	bl	10e60 <log_1>
		net_buf_unref(buf);
   16f18:	4620      	mov	r0, r4
   16f1a:	f00c fbfe 	bl	2371a <net_buf_unref>
		return;
   16f1e:	e7d5      	b.n	16ecc <bt_l2cap_recv+0x28>
   16f20:	00025494 	.word	0x00025494
   16f24:	0002545c 	.word	0x0002545c
   16f28:	00026fc4 	.word	0x00026fc4
   16f2c:	00026fe4 	.word	0x00026fe4

00016f30 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   16f30:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   16f32:	4b03      	ldr	r3, [pc, #12]	; (16f40 <att_cfm_sent+0x10>)
   16f34:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16f38:	f00b f973 	bl	22222 <att_sent>
}
   16f3c:	bd08      	pop	{r3, pc}
   16f3e:	bf00      	nop
   16f40:	00022513 	.word	0x00022513

00016f44 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   16f44:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   16f46:	4b03      	ldr	r3, [pc, #12]	; (16f54 <att_rsp_sent+0x10>)
   16f48:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16f4c:	f00b f969 	bl	22222 <att_sent>
}
   16f50:	bd08      	pop	{r3, pc}
   16f52:	bf00      	nop
   16f54:	0002252f 	.word	0x0002252f

00016f58 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   16f58:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16f5a:	4b03      	ldr	r3, [pc, #12]	; (16f68 <att_req_sent+0x10>)
   16f5c:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16f60:	f00b f95f 	bl	22222 <att_sent>
}
   16f64:	bd08      	pop	{r3, pc}
   16f66:	bf00      	nop
   16f68:	000224fb 	.word	0x000224fb

00016f6c <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   16f6c:	4b08      	ldr	r3, [pc, #32]	; (16f90 <att_cb+0x24>)
   16f6e:	4298      	cmp	r0, r3
   16f70:	d009      	beq.n	16f86 <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   16f72:	4b08      	ldr	r3, [pc, #32]	; (16f94 <att_cb+0x28>)
   16f74:	4298      	cmp	r0, r3
   16f76:	d008      	beq.n	16f8a <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   16f78:	4b07      	ldr	r3, [pc, #28]	; (16f98 <att_cb+0x2c>)
   16f7a:	4298      	cmp	r0, r3
   16f7c:	d001      	beq.n	16f82 <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   16f7e:	4807      	ldr	r0, [pc, #28]	; (16f9c <att_cb+0x30>)
	}
}
   16f80:	4770      	bx	lr
		return att_req_sent;
   16f82:	4807      	ldr	r0, [pc, #28]	; (16fa0 <att_cb+0x34>)
   16f84:	4770      	bx	lr
		return att_rsp_sent;
   16f86:	4807      	ldr	r0, [pc, #28]	; (16fa4 <att_cb+0x38>)
   16f88:	4770      	bx	lr
		return att_cfm_sent;
   16f8a:	4807      	ldr	r0, [pc, #28]	; (16fa8 <att_cb+0x3c>)
   16f8c:	4770      	bx	lr
   16f8e:	bf00      	nop
   16f90:	0002252f 	.word	0x0002252f
   16f94:	00022513 	.word	0x00022513
   16f98:	000224fb 	.word	0x000224fb
   16f9c:	00022223 	.word	0x00022223
   16fa0:	00016f59 	.word	0x00016f59
   16fa4:	00016f45 	.word	0x00016f45
   16fa8:	00016f31 	.word	0x00016f31

00016fac <chan_cb>:
{
   16fac:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   16fae:	6883      	ldr	r3, [r0, #8]
   16fb0:	7818      	ldrb	r0, [r3, #0]
   16fb2:	f00b f97f 	bl	222b4 <att_op_get_type>
   16fb6:	3801      	subs	r0, #1
   16fb8:	2804      	cmp	r0, #4
   16fba:	d808      	bhi.n	16fce <chan_cb+0x22>
   16fbc:	e8df f000 	tbb	[pc, r0]
   16fc0:	09070305 	.word	0x09070305
   16fc4:	05          	.byte	0x05
   16fc5:	00          	.byte	0x00
   16fc6:	4804      	ldr	r0, [pc, #16]	; (16fd8 <chan_cb+0x2c>)
   16fc8:	e000      	b.n	16fcc <chan_cb+0x20>
		return chan_req_sent;
   16fca:	4804      	ldr	r0, [pc, #16]	; (16fdc <chan_cb+0x30>)
}
   16fcc:	bd08      	pop	{r3, pc}
		return NULL;
   16fce:	2000      	movs	r0, #0
   16fd0:	e7fc      	b.n	16fcc <chan_cb+0x20>
		return chan_cfm_sent;
   16fd2:	4803      	ldr	r0, [pc, #12]	; (16fe0 <chan_cb+0x34>)
   16fd4:	e7fa      	b.n	16fcc <chan_cb+0x20>
   16fd6:	bf00      	nop
   16fd8:	0002252f 	.word	0x0002252f
   16fdc:	000224fb 	.word	0x000224fb
   16fe0:	00022513 	.word	0x00022513

00016fe4 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   16fe4:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   16fe6:	7a83      	ldrb	r3, [r0, #10]
   16fe8:	2b07      	cmp	r3, #7
   16fea:	d111      	bne.n	17010 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16fec:	2104      	movs	r1, #4
   16fee:	f00b f8d7 	bl	221a0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16ff2:	4604      	mov	r4, r0
   16ff4:	b1f0      	cbz	r0, 17034 <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16ff6:	f3bf 8f5b 	dmb	ish
   16ffa:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   16ffe:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   17002:	f013 0f04 	tst.w	r3, #4
   17006:	d126      	bne.n	17056 <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   17008:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   1700c:	4620      	mov	r0, r4
   1700e:	bd10      	pop	{r4, pc}
   17010:	4b1a      	ldr	r3, [pc, #104]	; (1707c <att_get+0x98>)
   17012:	4a1b      	ldr	r2, [pc, #108]	; (17080 <att_get+0x9c>)
   17014:	1a9b      	subs	r3, r3, r2
   17016:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   17018:	f04f 0100 	mov.w	r1, #0
   1701c:	2202      	movs	r2, #2
   1701e:	f362 0102 	bfi	r1, r2, #0, #3
   17022:	f36f 01c5 	bfc	r1, #3, #3
   17026:	f363 118f 	bfi	r1, r3, #6, #10
   1702a:	4816      	ldr	r0, [pc, #88]	; (17084 <att_get+0xa0>)
   1702c:	f7f9 ffce 	bl	10fcc <log_0>
		return NULL;
   17030:	2400      	movs	r4, #0
   17032:	e7eb      	b.n	1700c <att_get+0x28>
   17034:	4b11      	ldr	r3, [pc, #68]	; (1707c <att_get+0x98>)
   17036:	4a12      	ldr	r2, [pc, #72]	; (17080 <att_get+0x9c>)
   17038:	1a9b      	subs	r3, r3, r2
   1703a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   1703c:	f04f 0100 	mov.w	r1, #0
   17040:	2201      	movs	r2, #1
   17042:	f362 0102 	bfi	r1, r2, #0, #3
   17046:	f36f 01c5 	bfc	r1, #3, #3
   1704a:	f363 118f 	bfi	r1, r3, #6, #10
   1704e:	480e      	ldr	r0, [pc, #56]	; (17088 <att_get+0xa4>)
   17050:	f7f9 ffbc 	bl	10fcc <log_0>
		return NULL;
   17054:	e7da      	b.n	1700c <att_get+0x28>
   17056:	4b09      	ldr	r3, [pc, #36]	; (1707c <att_get+0x98>)
   17058:	4a09      	ldr	r2, [pc, #36]	; (17080 <att_get+0x9c>)
   1705a:	1a9b      	subs	r3, r3, r2
   1705c:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   1705e:	f04f 0100 	mov.w	r1, #0
   17062:	2202      	movs	r2, #2
   17064:	f362 0102 	bfi	r1, r2, #0, #3
   17068:	f36f 01c5 	bfc	r1, #3, #3
   1706c:	f363 118f 	bfi	r1, r3, #6, #10
   17070:	4806      	ldr	r0, [pc, #24]	; (1708c <att_get+0xa8>)
   17072:	f7f9 ffab 	bl	10fcc <log_0>
		return NULL;
   17076:	2400      	movs	r4, #0
   17078:	e7c8      	b.n	1700c <att_get+0x28>
   1707a:	bf00      	nop
   1707c:	00025464 	.word	0x00025464
   17080:	0002545c 	.word	0x0002545c
   17084:	0002703c 	.word	0x0002703c
   17088:	0002704c 	.word	0x0002704c
   1708c:	00027068 	.word	0x00027068

00017090 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   17090:	b570      	push	{r4, r5, r6, lr}
   17092:	b082      	sub	sp, #8
   17094:	4605      	mov	r5, r0
   17096:	460e      	mov	r6, r1
	return list->head;
   17098:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1709a:	b10b      	cbz	r3, 170a0 <att_chan_new+0x10>
   1709c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   170a0:	9301      	str	r3, [sp, #4]
	int quota = 0;
   170a2:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   170a4:	e014      	b.n	170d0 <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   170a6:	3101      	adds	r1, #1
   170a8:	e017      	b.n	170da <att_chan_new+0x4a>
   170aa:	4b2d      	ldr	r3, [pc, #180]	; (17160 <att_chan_new+0xd0>)
   170ac:	4a2d      	ldr	r2, [pc, #180]	; (17164 <att_chan_new+0xd4>)
   170ae:	1a9b      	subs	r3, r3, r2
   170b0:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   170b2:	f04f 0200 	mov.w	r2, #0
   170b6:	2001      	movs	r0, #1
   170b8:	f360 0202 	bfi	r2, r0, #0, #3
   170bc:	f36f 02c5 	bfc	r2, #3, #3
   170c0:	f363 128f 	bfi	r2, r3, #6, #10
   170c4:	4828      	ldr	r0, [pc, #160]	; (17168 <att_chan_new+0xd8>)
   170c6:	f7f9 fecb 	bl	10e60 <log_1>
			return NULL;
   170ca:	2400      	movs	r4, #0
   170cc:	e033      	b.n	17136 <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   170ce:	9301      	str	r3, [sp, #4]
   170d0:	9c01      	ldr	r4, [sp, #4]
   170d2:	b174      	cbz	r4, 170f2 <att_chan_new+0x62>
		if (chan->att == att) {
   170d4:	6823      	ldr	r3, [r4, #0]
   170d6:	42ab      	cmp	r3, r5
   170d8:	d0e5      	beq.n	170a6 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   170da:	2901      	cmp	r1, #1
   170dc:	d0e5      	beq.n	170aa <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   170de:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   170e2:	d0f4      	beq.n	170ce <att_chan_new+0x3e>
	return node->next;
   170e4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   170e8:	2b00      	cmp	r3, #0
   170ea:	d0f0      	beq.n	170ce <att_chan_new+0x3e>
   170ec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   170f0:	e7ed      	b.n	170ce <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   170f2:	2200      	movs	r2, #0
   170f4:	2300      	movs	r3, #0
   170f6:	a901      	add	r1, sp, #4
   170f8:	481c      	ldr	r0, [pc, #112]	; (1716c <att_chan_new+0xdc>)
   170fa:	f004 facd 	bl	1b698 <k_mem_slab_alloc>
   170fe:	b9e8      	cbnz	r0, 1713c <att_chan_new+0xac>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   17100:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17104:	2100      	movs	r1, #0
   17106:	9801      	ldr	r0, [sp, #4]
   17108:	f00a fa31 	bl	2156e <memset>
	chan->chan.chan.ops = &ops;
   1710c:	9801      	ldr	r0, [sp, #4]
   1710e:	4b18      	ldr	r3, [pc, #96]	; (17170 <att_chan_new+0xe0>)
   17110:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   17112:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   17114:	f00d fb57 	bl	247c6 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   17118:	9b01      	ldr	r3, [sp, #4]
   1711a:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1711c:	f3bf 8f5b 	dmb	ish
   17120:	e853 2f00 	ldrex	r2, [r3]
   17124:	e843 6100 	strex	r1, r6, [r3]
   17128:	2900      	cmp	r1, #0
   1712a:	d1f9      	bne.n	17120 <att_chan_new+0x90>
   1712c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   17130:	9b01      	ldr	r3, [sp, #4]
   17132:	601d      	str	r5, [r3, #0]

	return chan;
   17134:	9c01      	ldr	r4, [sp, #4]
}
   17136:	4620      	mov	r0, r4
   17138:	b002      	add	sp, #8
   1713a:	bd70      	pop	{r4, r5, r6, pc}
   1713c:	4b08      	ldr	r3, [pc, #32]	; (17160 <att_chan_new+0xd0>)
   1713e:	4a09      	ldr	r2, [pc, #36]	; (17164 <att_chan_new+0xd4>)
   17140:	1a9b      	subs	r3, r3, r2
   17142:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   17144:	f04f 0200 	mov.w	r2, #0
   17148:	2101      	movs	r1, #1
   1714a:	f361 0202 	bfi	r2, r1, #0, #3
   1714e:	f36f 02c5 	bfc	r2, #3, #3
   17152:	f363 128f 	bfi	r2, r3, #6, #10
   17156:	6829      	ldr	r1, [r5, #0]
   17158:	4806      	ldr	r0, [pc, #24]	; (17174 <att_chan_new+0xe4>)
   1715a:	f7f9 fe81 	bl	10e60 <log_1>
		return NULL;
   1715e:	e7ea      	b.n	17136 <att_chan_new+0xa6>
   17160:	00025464 	.word	0x00025464
   17164:	0002545c 	.word	0x0002545c
   17168:	0002708c 	.word	0x0002708c
   1716c:	20033b14 	.word	0x20033b14
   17170:	20033988 	.word	0x20033988
   17174:	000270b4 	.word	0x000270b4

00017178 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   17178:	b570      	push	{r4, r5, r6, lr}
   1717a:	b082      	sub	sp, #8
   1717c:	4606      	mov	r6, r0
   1717e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   17180:	2200      	movs	r2, #0
   17182:	2300      	movs	r3, #0
   17184:	a901      	add	r1, sp, #4
   17186:	4819      	ldr	r0, [pc, #100]	; (171ec <bt_att_accept+0x74>)
   17188:	f004 fa86 	bl	1b698 <k_mem_slab_alloc>
   1718c:	b9b0      	cbnz	r0, 171bc <bt_att_accept+0x44>
   1718e:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   17190:	222c      	movs	r2, #44	; 0x2c
   17192:	2100      	movs	r1, #0
   17194:	9801      	ldr	r0, [sp, #4]
   17196:	f00a f9ea 	bl	2156e <memset>
	att->conn = conn;
   1719a:	9b01      	ldr	r3, [sp, #4]
   1719c:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   1719e:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   171a0:	2100      	movs	r1, #0
   171a2:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   171a4:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   171a6:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   171a8:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   171aa:	f7ff ff71 	bl	17090 <att_chan_new>
	if (!chan) {
   171ae:	4603      	mov	r3, r0
   171b0:	b1c0      	cbz	r0, 171e4 <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   171b2:	3308      	adds	r3, #8
   171b4:	6023      	str	r3, [r4, #0]

	return 0;
}
   171b6:	4628      	mov	r0, r5
   171b8:	b002      	add	sp, #8
   171ba:	bd70      	pop	{r4, r5, r6, pc}
   171bc:	4b0c      	ldr	r3, [pc, #48]	; (171f0 <bt_att_accept+0x78>)
   171be:	4a0d      	ldr	r2, [pc, #52]	; (171f4 <bt_att_accept+0x7c>)
   171c0:	1a9b      	subs	r3, r3, r2
   171c2:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   171c4:	f04f 0200 	mov.w	r2, #0
   171c8:	2101      	movs	r1, #1
   171ca:	f361 0202 	bfi	r2, r1, #0, #3
   171ce:	f36f 02c5 	bfc	r2, #3, #3
   171d2:	f363 128f 	bfi	r2, r3, #6, #10
   171d6:	4631      	mov	r1, r6
   171d8:	4807      	ldr	r0, [pc, #28]	; (171f8 <bt_att_accept+0x80>)
   171da:	f7f9 fe41 	bl	10e60 <log_1>
		return -ENOMEM;
   171de:	f06f 050b 	mvn.w	r5, #11
   171e2:	e7e8      	b.n	171b6 <bt_att_accept+0x3e>
		return -ENOMEM;
   171e4:	f06f 050b 	mvn.w	r5, #11
   171e8:	e7e5      	b.n	171b6 <bt_att_accept+0x3e>
   171ea:	bf00      	nop
   171ec:	20033af8 	.word	0x20033af8
   171f0:	00025464 	.word	0x00025464
   171f4:	0002545c 	.word	0x0002545c
   171f8:	000270dc 	.word	0x000270dc

000171fc <bt_att_released>:
{
   171fc:	b500      	push	{lr}
   171fe:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17200:	3808      	subs	r0, #8
   17202:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   17204:	a901      	add	r1, sp, #4
   17206:	4803      	ldr	r0, [pc, #12]	; (17214 <bt_att_released+0x18>)
   17208:	f00d f9b5 	bl	24576 <k_mem_slab_free>
}
   1720c:	b003      	add	sp, #12
   1720e:	f85d fb04 	ldr.w	pc, [sp], #4
   17212:	bf00      	nop
   17214:	20033b14 	.word	0x20033b14

00017218 <chan_send>:
{
   17218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1721c:	b083      	sub	sp, #12
   1721e:	4604      	mov	r4, r0
   17220:	460d      	mov	r5, r1
   17222:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   17224:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17226:	781b      	ldrb	r3, [r3, #0]
   17228:	2bd2      	cmp	r3, #210	; 0xd2
   1722a:	d021      	beq.n	17270 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   1722c:	f105 0008 	add.w	r0, r5, #8
   17230:	f00c faf5 	bl	2381e <net_buf_simple_headroom>
   17234:	b287      	uxth	r7, r0
	state->len = buf->len;
   17236:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   1723a:	b3a6      	cbz	r6, 172a6 <chan_send+0x8e>
   1723c:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17240:	f854 8b08 	ldr.w	r8, [r4], #8
   17244:	4630      	mov	r0, r6
   17246:	f7ff fe91 	bl	16f6c <att_cb>
   1724a:	4603      	mov	r3, r0
   1724c:	f8d8 0000 	ldr.w	r0, [r8]
   17250:	9400      	str	r4, [sp, #0]
   17252:	462a      	mov	r2, r5
   17254:	2104      	movs	r1, #4
   17256:	f00a ff4e 	bl	220f6 <bt_l2cap_send_cb>
	if (err) {
   1725a:	4680      	mov	r8, r0
   1725c:	b120      	cbz	r0, 17268 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1725e:	6928      	ldr	r0, [r5, #16]
   17260:	4438      	add	r0, r7
   17262:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   17264:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   17268:	4640      	mov	r0, r8
   1726a:	b003      	add	sp, #12
   1726c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   17270:	6803      	ldr	r3, [r0, #0]
   17272:	6818      	ldr	r0, [r3, #0]
   17274:	f00c f951 	bl	2351a <bt_smp_sign>
		if (err) {
   17278:	4680      	mov	r8, r0
   1727a:	2800      	cmp	r0, #0
   1727c:	d0d6      	beq.n	1722c <chan_send+0x14>
   1727e:	4b0c      	ldr	r3, [pc, #48]	; (172b0 <chan_send+0x98>)
   17280:	4a0c      	ldr	r2, [pc, #48]	; (172b4 <chan_send+0x9c>)
   17282:	1a9b      	subs	r3, r3, r2
   17284:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   17286:	f04f 0100 	mov.w	r1, #0
   1728a:	2201      	movs	r2, #1
   1728c:	f362 0102 	bfi	r1, r2, #0, #3
   17290:	f36f 01c5 	bfc	r1, #3, #3
   17294:	f363 118f 	bfi	r1, r3, #6, #10
   17298:	4807      	ldr	r0, [pc, #28]	; (172b8 <chan_send+0xa0>)
   1729a:	f7f9 fe97 	bl	10fcc <log_0>
			net_buf_unref(buf);
   1729e:	4628      	mov	r0, r5
   172a0:	f00c fa3b 	bl	2371a <net_buf_unref>
			return err;
   172a4:	e7e0      	b.n	17268 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   172a6:	4628      	mov	r0, r5
   172a8:	f7ff fe80 	bl	16fac <chan_cb>
   172ac:	4606      	mov	r6, r0
   172ae:	e7c5      	b.n	1723c <chan_send+0x24>
   172b0:	00025464 	.word	0x00025464
   172b4:	0002545c 	.word	0x0002545c
   172b8:	00027104 	.word	0x00027104

000172bc <read_group_cb>:
{
   172bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   172be:	b085      	sub	sp, #20
   172c0:	4605      	mov	r5, r0
   172c2:	460e      	mov	r6, r1
   172c4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   172c6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   172c8:	2300      	movs	r3, #0
   172ca:	f88d 3008 	strb.w	r3, [sp, #8]
   172ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   172d2:	f8ad 300a 	strh.w	r3, [sp, #10]
   172d6:	a902      	add	r1, sp, #8
   172d8:	6800      	ldr	r0, [r0, #0]
   172da:	f00a f999 	bl	21610 <bt_uuid_cmp>
   172de:	b158      	cbz	r0, 172f8 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   172e0:	2300      	movs	r3, #0
   172e2:	f88d 300c 	strb.w	r3, [sp, #12]
   172e6:	f642 0301 	movw	r3, #10241	; 0x2801
   172ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   172ee:	a903      	add	r1, sp, #12
   172f0:	6828      	ldr	r0, [r5, #0]
   172f2:	f00a f98d 	bl	21610 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   172f6:	bb30      	cbnz	r0, 17346 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   172f8:	6861      	ldr	r1, [r4, #4]
   172fa:	6828      	ldr	r0, [r5, #0]
   172fc:	f00a f988 	bl	21610 <bt_uuid_cmp>
   17300:	bb48      	cbnz	r0, 17356 <read_group_cb+0x9a>
	if (data->rsp->len &&
   17302:	68e3      	ldr	r3, [r4, #12]
   17304:	781a      	ldrb	r2, [r3, #0]
   17306:	b132      	cbz	r2, 17316 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   17308:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   1730c:	68a1      	ldr	r1, [r4, #8]
   1730e:	8989      	ldrh	r1, [r1, #12]
   17310:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   17312:	4293      	cmp	r3, r2
   17314:	db24      	blt.n	17360 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   17316:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   17318:	2104      	movs	r1, #4
   1731a:	3008      	adds	r0, #8
   1731c:	f00c fa47 	bl	237ae <net_buf_simple_add>
   17320:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17322:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17324:	6923      	ldr	r3, [r4, #16]
   17326:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   17328:	9401      	str	r4, [sp, #4]
   1732a:	4b10      	ldr	r3, [pc, #64]	; (1736c <read_group_cb+0xb0>)
   1732c:	9300      	str	r3, [sp, #0]
   1732e:	2300      	movs	r3, #0
   17330:	68a2      	ldr	r2, [r4, #8]
   17332:	4629      	mov	r1, r5
   17334:	4638      	mov	r0, r7
   17336:	f00b f9d9 	bl	226ec <att_chan_read>
	if (read < 0) {
   1733a:	2800      	cmp	r0, #0
   1733c:	db12      	blt.n	17364 <read_group_cb+0xa8>
	if (!data->group) {
   1733e:	6923      	ldr	r3, [r4, #16]
   17340:	b193      	cbz	r3, 17368 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   17342:	2001      	movs	r0, #1
   17344:	e00a      	b.n	1735c <read_group_cb+0xa0>
		if (data->group &&
   17346:	6923      	ldr	r3, [r4, #16]
   17348:	b11b      	cbz	r3, 17352 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1734a:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1734c:	42b2      	cmp	r2, r6
   1734e:	d200      	bcs.n	17352 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17350:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17352:	2001      	movs	r0, #1
   17354:	e002      	b.n	1735c <read_group_cb+0xa0>
		data->group = NULL;
   17356:	2300      	movs	r3, #0
   17358:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1735a:	2001      	movs	r0, #1
}
   1735c:	b005      	add	sp, #20
   1735e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   17360:	2000      	movs	r0, #0
   17362:	e7fb      	b.n	1735c <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   17364:	2000      	movs	r0, #0
   17366:	e7f9      	b.n	1735c <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   17368:	2000      	movs	r0, #0
   1736a:	e7f7      	b.n	1735c <read_group_cb+0xa0>
   1736c:	00022287 	.word	0x00022287

00017370 <read_type_cb>:
{
   17370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17374:	b083      	sub	sp, #12
   17376:	4606      	mov	r6, r0
   17378:	4688      	mov	r8, r1
   1737a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1737c:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1737e:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   17380:	6851      	ldr	r1, [r2, #4]
   17382:	6800      	ldr	r0, [r0, #0]
   17384:	f00a f944 	bl	21610 <bt_uuid_cmp>
   17388:	b120      	cbz	r0, 17394 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1738a:	2501      	movs	r5, #1
}
   1738c:	4628      	mov	r0, r5
   1738e:	b003      	add	sp, #12
   17390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   17394:	2215      	movs	r2, #21
   17396:	4631      	mov	r1, r6
   17398:	4628      	mov	r0, r5
   1739a:	f00b ffc5 	bl	23328 <bt_gatt_check_perm>
   1739e:	4605      	mov	r5, r0
   173a0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   173a2:	b130      	cbz	r0, 173b2 <read_type_cb+0x42>
		if (data->rsp->len) {
   173a4:	68e3      	ldr	r3, [r4, #12]
   173a6:	781b      	ldrb	r3, [r3, #0]
   173a8:	b10b      	cbz	r3, 173ae <read_type_cb+0x3e>
			data->err = 0x00;
   173aa:	2300      	movs	r3, #0
   173ac:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   173ae:	2500      	movs	r5, #0
   173b0:	e7ec      	b.n	1738c <read_type_cb+0x1c>
	data->err = 0x00;
   173b2:	f04f 0900 	mov.w	r9, #0
   173b6:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   173ba:	68a0      	ldr	r0, [r4, #8]
   173bc:	f00c f9d7 	bl	2376e <net_buf_frag_last>
   173c0:	2102      	movs	r1, #2
   173c2:	3008      	adds	r0, #8
   173c4:	f00c f9f3 	bl	237ae <net_buf_simple_add>
   173c8:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   173ca:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   173ce:	9401      	str	r4, [sp, #4]
   173d0:	4b11      	ldr	r3, [pc, #68]	; (17418 <read_type_cb+0xa8>)
   173d2:	9300      	str	r3, [sp, #0]
   173d4:	464b      	mov	r3, r9
   173d6:	68a2      	ldr	r2, [r4, #8]
   173d8:	4631      	mov	r1, r6
   173da:	4638      	mov	r0, r7
   173dc:	f00b f986 	bl	226ec <att_chan_read>
	if (read < 0) {
   173e0:	2800      	cmp	r0, #0
   173e2:	db07      	blt.n	173f4 <read_type_cb+0x84>
	if (!data->item) {
   173e4:	6923      	ldr	r3, [r4, #16]
   173e6:	2b00      	cmp	r3, #0
   173e8:	d0d0      	beq.n	1738c <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   173ea:	f8b7 5086 	ldrh.w	r5, [r7, #134]	; 0x86
   173ee:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   173f0:	2200      	movs	r2, #0

	while (buf) {
   173f2:	e006      	b.n	17402 <read_type_cb+0x92>
		data->err = err_to_att(read);
   173f4:	f00a ff2b 	bl	2224e <err_to_att>
   173f8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   173fa:	e7c7      	b.n	1738c <read_type_cb+0x1c>
		bytes += buf->len;
   173fc:	8999      	ldrh	r1, [r3, #12]
   173fe:	440a      	add	r2, r1
		buf = buf->frags;
   17400:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   17402:	2b00      	cmp	r3, #0
   17404:	d1fa      	bne.n	173fc <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   17406:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   17408:	68e3      	ldr	r3, [r4, #12]
   1740a:	781d      	ldrb	r5, [r3, #0]
   1740c:	42aa      	cmp	r2, r5
   1740e:	bf94      	ite	ls
   17410:	2500      	movls	r5, #0
   17412:	2501      	movhi	r5, #1
   17414:	e7ba      	b.n	1738c <read_type_cb+0x1c>
   17416:	bf00      	nop
   17418:	0002225f 	.word	0x0002225f

0001741c <find_type_cb>:
{
   1741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17420:	b093      	sub	sp, #76	; 0x4c
   17422:	4606      	mov	r6, r0
   17424:	460f      	mov	r7, r1
   17426:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   17428:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1742c:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17430:	2300      	movs	r3, #0
   17432:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   17436:	f642 0301 	movw	r3, #10241	; 0x2801
   1743a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1743e:	a910      	add	r1, sp, #64	; 0x40
   17440:	6800      	ldr	r0, [r0, #0]
   17442:	f00a f8e5 	bl	21610 <bt_uuid_cmp>
   17446:	b928      	cbnz	r0, 17454 <find_type_cb+0x38>
	data->group = NULL;
   17448:	2300      	movs	r3, #0
   1744a:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   1744c:	2001      	movs	r0, #1
}
   1744e:	b013      	add	sp, #76	; 0x4c
   17450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   17454:	2300      	movs	r3, #0
   17456:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1745a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1745e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   17462:	a911      	add	r1, sp, #68	; 0x44
   17464:	6830      	ldr	r0, [r6, #0]
   17466:	f00a f8d3 	bl	21610 <bt_uuid_cmp>
   1746a:	b928      	cbnz	r0, 17478 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1746c:	f8b8 1086 	ldrh.w	r1, [r8, #134]	; 0x86
   17470:	6868      	ldr	r0, [r5, #4]
   17472:	4603      	mov	r3, r0
	size_t bytes = 0;
   17474:	2400      	movs	r4, #0
	while (buf) {
   17476:	e00a      	b.n	1748e <find_type_cb+0x72>
		if (data->group &&
   17478:	68ab      	ldr	r3, [r5, #8]
   1747a:	b11b      	cbz	r3, 17484 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1747c:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1747e:	42ba      	cmp	r2, r7
   17480:	d200      	bcs.n	17484 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   17482:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17484:	2001      	movs	r0, #1
   17486:	e7e2      	b.n	1744e <find_type_cb+0x32>
		bytes += buf->len;
   17488:	899a      	ldrh	r2, [r3, #12]
   1748a:	4414      	add	r4, r2
		buf = buf->frags;
   1748c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1748e:	2b00      	cmp	r3, #0
   17490:	d1fa      	bne.n	17488 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17492:	1b0c      	subs	r4, r1, r4
   17494:	2c03      	cmp	r4, #3
   17496:	d801      	bhi.n	1749c <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   17498:	2000      	movs	r0, #0
   1749a:	e7d8      	b.n	1744e <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   1749c:	f00c f967 	bl	2376e <net_buf_frag_last>
   174a0:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   174a2:	f8b8 a086 	ldrh.w	sl, [r8, #134]	; 0x86
   174a6:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   174a8:	2200      	movs	r2, #0
	while (buf) {
   174aa:	b11b      	cbz	r3, 174b4 <find_type_cb+0x98>
		bytes += buf->len;
   174ac:	8999      	ldrh	r1, [r3, #12]
   174ae:	440a      	add	r2, r1
		buf = buf->frags;
   174b0:	681b      	ldr	r3, [r3, #0]
   174b2:	e7fa      	b.n	174aa <find_type_cb+0x8e>
   174b4:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   174b8:	f104 0b08 	add.w	fp, r4, #8
   174bc:	4658      	mov	r0, fp
   174be:	f00c f9b2 	bl	23826 <net_buf_simple_tailroom>
   174c2:	4582      	cmp	sl, r0
   174c4:	d22b      	bcs.n	1751e <find_type_cb+0x102>
   174c6:	f8b8 0086 	ldrh.w	r0, [r8, #134]	; 0x86
   174ca:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   174cc:	2200      	movs	r2, #0
	while (buf) {
   174ce:	e002      	b.n	174d6 <find_type_cb+0xba>
		bytes += buf->len;
   174d0:	8999      	ldrh	r1, [r3, #12]
   174d2:	440a      	add	r2, r1
		buf = buf->frags;
   174d4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   174d6:	2b00      	cmp	r3, #0
   174d8:	d1fa      	bne.n	174d0 <find_type_cb+0xb4>
   174da:	1a80      	subs	r0, r0, r2
	if (!len) {
   174dc:	b318      	cbz	r0, 17526 <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   174de:	f8d6 8004 	ldr.w	r8, [r6, #4]
   174e2:	2300      	movs	r3, #0
   174e4:	9300      	str	r3, [sp, #0]
   174e6:	2310      	movs	r3, #16
   174e8:	aa0c      	add	r2, sp, #48	; 0x30
   174ea:	4631      	mov	r1, r6
   174ec:	4648      	mov	r0, r9
   174ee:	47c0      	blx	r8
	if (read < 0) {
   174f0:	1e06      	subs	r6, r0, #0
   174f2:	dba9      	blt.n	17448 <find_type_cb+0x2c>
	if (read != data->value_len) {
   174f4:	7c2a      	ldrb	r2, [r5, #16]
   174f6:	42b2      	cmp	r2, r6
   174f8:	d049      	beq.n	1758e <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   174fa:	68e9      	ldr	r1, [r5, #12]
   174fc:	a807      	add	r0, sp, #28
   174fe:	f00a f8a5 	bl	2164c <bt_uuid_create>
   17502:	b300      	cbz	r0, 17546 <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   17504:	b2f2      	uxtb	r2, r6
   17506:	a90c      	add	r1, sp, #48	; 0x30
   17508:	a802      	add	r0, sp, #8
   1750a:	f00a f89f 	bl	2164c <bt_uuid_create>
   1750e:	b360      	cbz	r0, 1756a <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17510:	a902      	add	r1, sp, #8
   17512:	a807      	add	r0, sp, #28
   17514:	f00a f87c 	bl	21610 <bt_uuid_cmp>
   17518:	2800      	cmp	r0, #0
   1751a:	d040      	beq.n	1759e <find_type_cb+0x182>
   1751c:	e794      	b.n	17448 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1751e:	4658      	mov	r0, fp
   17520:	f00c f981 	bl	23826 <net_buf_simple_tailroom>
   17524:	e7da      	b.n	174dc <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   17526:	686b      	ldr	r3, [r5, #4]
   17528:	7998      	ldrb	r0, [r3, #6]
   1752a:	f001 fcb5 	bl	18e98 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1752e:	2200      	movs	r2, #0
   17530:	2300      	movs	r3, #0
   17532:	f00c f8bf 	bl	236b4 <net_buf_alloc_fixed>
		if (!frag) {
   17536:	4604      	mov	r4, r0
   17538:	2800      	cmp	r0, #0
   1753a:	d088      	beq.n	1744e <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   1753c:	4601      	mov	r1, r0
   1753e:	6868      	ldr	r0, [r5, #4]
   17540:	f00c f926 	bl	23790 <net_buf_frag_add>
   17544:	e7cb      	b.n	174de <find_type_cb+0xc2>
   17546:	4b1c      	ldr	r3, [pc, #112]	; (175b8 <find_type_cb+0x19c>)
   17548:	4a1c      	ldr	r2, [pc, #112]	; (175bc <find_type_cb+0x1a0>)
   1754a:	1a9b      	subs	r3, r3, r2
   1754c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1754e:	f04f 0200 	mov.w	r2, #0
   17552:	2102      	movs	r1, #2
   17554:	f361 0202 	bfi	r2, r1, #0, #3
   17558:	f36f 02c5 	bfc	r2, #3, #3
   1755c:	f363 128f 	bfi	r2, r3, #6, #10
   17560:	7c29      	ldrb	r1, [r5, #16]
   17562:	4817      	ldr	r0, [pc, #92]	; (175c0 <find_type_cb+0x1a4>)
   17564:	f7f9 fc7c 	bl	10e60 <log_1>
			goto skip;
   17568:	e76e      	b.n	17448 <find_type_cb+0x2c>
   1756a:	4b13      	ldr	r3, [pc, #76]	; (175b8 <find_type_cb+0x19c>)
   1756c:	4a13      	ldr	r2, [pc, #76]	; (175bc <find_type_cb+0x1a0>)
   1756e:	1a9b      	subs	r3, r3, r2
   17570:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   17572:	f04f 0200 	mov.w	r2, #0
   17576:	2102      	movs	r1, #2
   17578:	f361 0202 	bfi	r2, r1, #0, #3
   1757c:	f36f 02c5 	bfc	r2, #3, #3
   17580:	f363 128f 	bfi	r2, r3, #6, #10
   17584:	4631      	mov	r1, r6
   17586:	480f      	ldr	r0, [pc, #60]	; (175c4 <find_type_cb+0x1a8>)
   17588:	f7f9 fc6a 	bl	10e60 <log_1>
			goto skip;
   1758c:	e75c      	b.n	17448 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   1758e:	4632      	mov	r2, r6
   17590:	a90c      	add	r1, sp, #48	; 0x30
   17592:	68e8      	ldr	r0, [r5, #12]
   17594:	f009 ff9a 	bl	214cc <memcmp>
   17598:	2800      	cmp	r0, #0
   1759a:	f47f af55 	bne.w	17448 <find_type_cb+0x2c>
	data->err = 0x00;
   1759e:	2300      	movs	r3, #0
   175a0:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   175a2:	2104      	movs	r1, #4
   175a4:	f104 0008 	add.w	r0, r4, #8
   175a8:	f00c f901 	bl	237ae <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   175ac:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   175ae:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   175b0:	68ab      	ldr	r3, [r5, #8]
   175b2:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   175b4:	2001      	movs	r0, #1
   175b6:	e74a      	b.n	1744e <find_type_cb+0x32>
   175b8:	00025464 	.word	0x00025464
   175bc:	0002545c 	.word	0x0002545c
   175c0:	00027118 	.word	0x00027118
   175c4:	00027138 	.word	0x00027138

000175c8 <bt_att_connected>:
{
   175c8:	b538      	push	{r3, r4, r5, lr}
   175ca:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   175cc:	4605      	mov	r5, r0
   175ce:	f855 0908 	ldr.w	r0, [r5], #-8
   175d2:	f00b f9fc 	bl	229ce <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   175d6:	4629      	mov	r1, r5
   175d8:	6800      	ldr	r0, [r0, #0]
   175da:	f00a feec 	bl	223b6 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   175de:	f3bf 8f5b 	dmb	ish
   175e2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   175e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   175ea:	f013 0f08 	tst.w	r3, #8
   175ee:	d104      	bne.n	175fa <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   175f0:	2317      	movs	r3, #23
   175f2:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   175f6:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   175fa:	4628      	mov	r0, r5
   175fc:	f00b f9a1 	bl	22942 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   17600:	4902      	ldr	r1, [pc, #8]	; (1760c <bt_att_connected+0x44>)
   17602:	f504 7084 	add.w	r0, r4, #264	; 0x108
   17606:	f00d f9ec 	bl	249e2 <k_work_init_delayable>
}
   1760a:	bd38      	pop	{r3, r4, r5, pc}
   1760c:	00017f51 	.word	0x00017f51

00017610 <bt_att_chan_create_pdu>:
{
   17610:	b538      	push	{r3, r4, r5, lr}
   17612:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   17614:	3201      	adds	r2, #1
   17616:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   1761a:	428a      	cmp	r2, r1
   1761c:	d810      	bhi.n	17640 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   1761e:	4628      	mov	r0, r5
   17620:	f00a fe48 	bl	222b4 <att_op_get_type>
   17624:	2802      	cmp	r0, #2
   17626:	d01d      	beq.n	17664 <bt_att_chan_create_pdu+0x54>
   17628:	2804      	cmp	r0, #4
   1762a:	d01b      	beq.n	17664 <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1762c:	f04f 32ff 	mov.w	r2, #4294967295
   17630:	f04f 33ff 	mov.w	r3, #4294967295
   17634:	2100      	movs	r1, #0
   17636:	4608      	mov	r0, r1
   17638:	f00a fd58 	bl	220ec <bt_l2cap_create_pdu_timeout>
   1763c:	4604      	mov	r4, r0
   1763e:	e019      	b.n	17674 <bt_att_chan_create_pdu+0x64>
   17640:	481a      	ldr	r0, [pc, #104]	; (176ac <bt_att_chan_create_pdu+0x9c>)
   17642:	4b1b      	ldr	r3, [pc, #108]	; (176b0 <bt_att_chan_create_pdu+0xa0>)
   17644:	1ac0      	subs	r0, r0, r3
   17646:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   17648:	f04f 0300 	mov.w	r3, #0
   1764c:	2402      	movs	r4, #2
   1764e:	f364 0302 	bfi	r3, r4, #0, #3
   17652:	f36f 03c5 	bfc	r3, #3, #3
   17656:	f360 138f 	bfi	r3, r0, #6, #10
   1765a:	4816      	ldr	r0, [pc, #88]	; (176b4 <bt_att_chan_create_pdu+0xa4>)
   1765c:	f7f9 fc36 	bl	10ecc <log_2>
		return NULL;
   17660:	2400      	movs	r4, #0
   17662:	e00e      	b.n	17682 <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   17664:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17668:	2300      	movs	r3, #0
   1766a:	2100      	movs	r1, #0
   1766c:	4608      	mov	r0, r1
   1766e:	f00a fd3d 	bl	220ec <bt_l2cap_create_pdu_timeout>
   17672:	4604      	mov	r4, r0
	if (!buf) {
   17674:	b13c      	cbz	r4, 17686 <bt_att_chan_create_pdu+0x76>
   17676:	2101      	movs	r1, #1
   17678:	f104 0008 	add.w	r0, r4, #8
   1767c:	f00c f897 	bl	237ae <net_buf_simple_add>
	hdr->code = op;
   17680:	7005      	strb	r5, [r0, #0]
}
   17682:	4620      	mov	r0, r4
   17684:	bd38      	pop	{r3, r4, r5, pc}
   17686:	4b09      	ldr	r3, [pc, #36]	; (176ac <bt_att_chan_create_pdu+0x9c>)
   17688:	4a09      	ldr	r2, [pc, #36]	; (176b0 <bt_att_chan_create_pdu+0xa0>)
   1768a:	1a9b      	subs	r3, r3, r2
   1768c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1768e:	f04f 0200 	mov.w	r2, #0
   17692:	2101      	movs	r1, #1
   17694:	f361 0202 	bfi	r2, r1, #0, #3
   17698:	f36f 02c5 	bfc	r2, #3, #3
   1769c:	f363 128f 	bfi	r2, r3, #6, #10
   176a0:	4629      	mov	r1, r5
   176a2:	4805      	ldr	r0, [pc, #20]	; (176b8 <bt_att_chan_create_pdu+0xa8>)
   176a4:	f7f9 fbdc 	bl	10e60 <log_1>
		return NULL;
   176a8:	e7eb      	b.n	17682 <bt_att_chan_create_pdu+0x72>
   176aa:	bf00      	nop
   176ac:	00025464 	.word	0x00025464
   176b0:	0002545c 	.word	0x0002545c
   176b4:	00027158 	.word	0x00027158
   176b8:	00026f14 	.word	0x00026f14

000176bc <send_err_rsp>:
	if (!req) {
   176bc:	b901      	cbnz	r1, 176c0 <send_err_rsp+0x4>
   176be:	4770      	bx	lr
{
   176c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176c4:	4606      	mov	r6, r0
   176c6:	4615      	mov	r5, r2
   176c8:	461c      	mov	r4, r3
   176ca:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   176cc:	2204      	movs	r2, #4
   176ce:	2101      	movs	r1, #1
   176d0:	f7ff ff9e 	bl	17610 <bt_att_chan_create_pdu>
	if (!buf) {
   176d4:	4680      	mov	r8, r0
   176d6:	b160      	cbz	r0, 176f2 <send_err_rsp+0x36>
   176d8:	2104      	movs	r1, #4
   176da:	3008      	adds	r0, #8
   176dc:	f00c f867 	bl	237ae <net_buf_simple_add>
	rsp->request = req;
   176e0:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   176e2:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   176e6:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   176e8:	4a03      	ldr	r2, [pc, #12]	; (176f8 <send_err_rsp+0x3c>)
   176ea:	4641      	mov	r1, r8
   176ec:	4630      	mov	r0, r6
   176ee:	f00a fff0 	bl	226d2 <bt_att_chan_send_rsp>
}
   176f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   176f6:	bf00      	nop
   176f8:	0002252f 	.word	0x0002252f

000176fc <bt_att_recv>:
{
   176fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   17700:	898b      	ldrh	r3, [r1, #12]
   17702:	b1bb      	cbz	r3, 17734 <bt_att_recv+0x38>
   17704:	4607      	mov	r7, r0
   17706:	460e      	mov	r6, r1
   17708:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   1770c:	2101      	movs	r1, #1
   1770e:	f106 0008 	add.w	r0, r6, #8
   17712:	f00c f874 	bl	237fe <net_buf_simple_pull_mem>
   17716:	4605      	mov	r5, r0
	if (!att_chan->att) {
   17718:	f857 3c08 	ldr.w	r3, [r7, #-8]
   1771c:	b1d3      	cbz	r3, 17754 <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1771e:	2300      	movs	r3, #0
   17720:	2b0c      	cmp	r3, #12
   17722:	d81e      	bhi.n	17762 <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   17724:	782c      	ldrb	r4, [r5, #0]
   17726:	4a57      	ldr	r2, [pc, #348]	; (17884 <bt_att_recv+0x188>)
   17728:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1772c:	4294      	cmp	r4, r2
   1772e:	d014      	beq.n	1775a <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17730:	3301      	adds	r3, #1
   17732:	e7f5      	b.n	17720 <bt_att_recv+0x24>
   17734:	4b54      	ldr	r3, [pc, #336]	; (17888 <bt_att_recv+0x18c>)
   17736:	4a55      	ldr	r2, [pc, #340]	; (1788c <bt_att_recv+0x190>)
   17738:	1a9b      	subs	r3, r3, r2
   1773a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   1773c:	f04f 0100 	mov.w	r1, #0
   17740:	2201      	movs	r2, #1
   17742:	f362 0102 	bfi	r1, r2, #0, #3
   17746:	f36f 01c5 	bfc	r1, #3, #3
   1774a:	f363 118f 	bfi	r1, r3, #6, #10
   1774e:	4850      	ldr	r0, [pc, #320]	; (17890 <bt_att_recv+0x194>)
   17750:	f7f9 fc3c 	bl	10fcc <log_0>
}
   17754:	2000      	movs	r0, #0
   17756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   1775a:	4c4a      	ldr	r4, [pc, #296]	; (17884 <bt_att_recv+0x188>)
   1775c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   17760:	e000      	b.n	17764 <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17762:	2400      	movs	r4, #0
	if (!handler) {
   17764:	b1cc      	cbz	r4, 1779a <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   17766:	78a3      	ldrb	r3, [r4, #2]
   17768:	2b01      	cmp	r3, #1
   1776a:	d034      	beq.n	177d6 <bt_att_recv+0xda>
		} else if (handler->type == ATT_INDICATION &&
   1776c:	78a3      	ldrb	r3, [r4, #2]
   1776e:	2b05      	cmp	r3, #5
   17770:	d053      	beq.n	1781a <bt_att_recv+0x11e>
	if (buf->len < handler->expect_len) {
   17772:	89b1      	ldrh	r1, [r6, #12]
   17774:	7863      	ldrb	r3, [r4, #1]
   17776:	4299      	cmp	r1, r3
   17778:	d370      	bcc.n	1785c <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   1777a:	6863      	ldr	r3, [r4, #4]
   1777c:	4631      	mov	r1, r6
   1777e:	4640      	mov	r0, r8
   17780:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   17782:	78a3      	ldrb	r3, [r4, #2]
   17784:	2b01      	cmp	r3, #1
   17786:	d1e5      	bne.n	17754 <bt_att_recv+0x58>
   17788:	2800      	cmp	r0, #0
   1778a:	d0e3      	beq.n	17754 <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1778c:	4603      	mov	r3, r0
   1778e:	2200      	movs	r2, #0
   17790:	7829      	ldrb	r1, [r5, #0]
   17792:	4640      	mov	r0, r8
   17794:	f7ff ff92 	bl	176bc <send_err_rsp>
   17798:	e7dc      	b.n	17754 <bt_att_recv+0x58>
   1779a:	4b3b      	ldr	r3, [pc, #236]	; (17888 <bt_att_recv+0x18c>)
   1779c:	4a3b      	ldr	r2, [pc, #236]	; (1788c <bt_att_recv+0x190>)
   1779e:	1a9b      	subs	r3, r3, r2
   177a0:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   177a2:	f04f 0200 	mov.w	r2, #0
   177a6:	2102      	movs	r1, #2
   177a8:	f361 0202 	bfi	r2, r1, #0, #3
   177ac:	f36f 02c5 	bfc	r2, #3, #3
   177b0:	f363 128f 	bfi	r2, r3, #6, #10
   177b4:	7829      	ldrb	r1, [r5, #0]
   177b6:	4837      	ldr	r0, [pc, #220]	; (17894 <bt_att_recv+0x198>)
   177b8:	f7f9 fb52 	bl	10e60 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   177bc:	782c      	ldrb	r4, [r5, #0]
   177be:	4620      	mov	r0, r4
   177c0:	f00a fd78 	bl	222b4 <att_op_get_type>
   177c4:	2800      	cmp	r0, #0
   177c6:	d0c5      	beq.n	17754 <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   177c8:	2306      	movs	r3, #6
   177ca:	2200      	movs	r2, #0
   177cc:	4621      	mov	r1, r4
   177ce:	4640      	mov	r0, r8
   177d0:	f7ff ff74 	bl	176bc <send_err_rsp>
		return 0;
   177d4:	e7be      	b.n	17754 <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   177d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   177da:	f3bf 8f5b 	dmb	ish
   177de:	e853 2f00 	ldrex	r2, [r3]
   177e2:	f042 0101 	orr.w	r1, r2, #1
   177e6:	e843 1000 	strex	r0, r1, [r3]
   177ea:	2800      	cmp	r0, #0
   177ec:	d1f7      	bne.n	177de <bt_att_recv+0xe2>
   177ee:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   177f2:	f012 0f01 	tst.w	r2, #1
   177f6:	d0b9      	beq.n	1776c <bt_att_recv+0x70>
   177f8:	4b23      	ldr	r3, [pc, #140]	; (17888 <bt_att_recv+0x18c>)
   177fa:	4a24      	ldr	r2, [pc, #144]	; (1788c <bt_att_recv+0x190>)
   177fc:	1a9b      	subs	r3, r3, r2
   177fe:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   17800:	f04f 0100 	mov.w	r1, #0
   17804:	2202      	movs	r2, #2
   17806:	f362 0102 	bfi	r1, r2, #0, #3
   1780a:	f36f 01c5 	bfc	r1, #3, #3
   1780e:	f363 118f 	bfi	r1, r3, #6, #10
   17812:	4821      	ldr	r0, [pc, #132]	; (17898 <bt_att_recv+0x19c>)
   17814:	f7f9 fbda 	bl	10fcc <log_0>
			return 0;
   17818:	e79c      	b.n	17754 <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   1781a:	37e8      	adds	r7, #232	; 0xe8
   1781c:	f3bf 8f5b 	dmb	ish
   17820:	e857 3f00 	ldrex	r3, [r7]
   17824:	f043 0202 	orr.w	r2, r3, #2
   17828:	e847 2100 	strex	r1, r2, [r7]
   1782c:	2900      	cmp	r1, #0
   1782e:	d1f7      	bne.n	17820 <bt_att_recv+0x124>
   17830:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   17834:	f013 0f02 	tst.w	r3, #2
   17838:	d09b      	beq.n	17772 <bt_att_recv+0x76>
   1783a:	4b13      	ldr	r3, [pc, #76]	; (17888 <bt_att_recv+0x18c>)
   1783c:	4a13      	ldr	r2, [pc, #76]	; (1788c <bt_att_recv+0x190>)
   1783e:	1a9b      	subs	r3, r3, r2
   17840:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   17842:	f04f 0100 	mov.w	r1, #0
   17846:	2202      	movs	r2, #2
   17848:	f362 0102 	bfi	r1, r2, #0, #3
   1784c:	f36f 01c5 	bfc	r1, #3, #3
   17850:	f363 118f 	bfi	r1, r3, #6, #10
   17854:	4811      	ldr	r0, [pc, #68]	; (1789c <bt_att_recv+0x1a0>)
   17856:	f7f9 fbb9 	bl	10fcc <log_0>
			return 0;
   1785a:	e77b      	b.n	17754 <bt_att_recv+0x58>
   1785c:	4a0a      	ldr	r2, [pc, #40]	; (17888 <bt_att_recv+0x18c>)
   1785e:	4b0b      	ldr	r3, [pc, #44]	; (1788c <bt_att_recv+0x190>)
   17860:	1ad2      	subs	r2, r2, r3
   17862:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   17864:	f04f 0300 	mov.w	r3, #0
   17868:	2001      	movs	r0, #1
   1786a:	f360 0302 	bfi	r3, r0, #0, #3
   1786e:	f36f 03c5 	bfc	r3, #3, #3
   17872:	f362 138f 	bfi	r3, r2, #6, #10
   17876:	782a      	ldrb	r2, [r5, #0]
   17878:	4809      	ldr	r0, [pc, #36]	; (178a0 <bt_att_recv+0x1a4>)
   1787a:	f7f9 fb27 	bl	10ecc <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   1787e:	2004      	movs	r0, #4
   17880:	e77f      	b.n	17782 <bt_att_recv+0x86>
   17882:	bf00      	nop
   17884:	0002725c 	.word	0x0002725c
   17888:	00025464 	.word	0x00025464
   1788c:	0002545c 	.word	0x0002545c
   17890:	00027180 	.word	0x00027180
   17894:	0002719c 	.word	0x0002719c
   17898:	000271b8 	.word	0x000271b8
   1789c:	000271d4 	.word	0x000271d4
   178a0:	000271f4 	.word	0x000271f4

000178a4 <att_write_rsp>:
{
   178a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178a8:	b08a      	sub	sp, #40	; 0x28
   178aa:	4604      	mov	r4, r0
   178ac:	4617      	mov	r7, r2
   178ae:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   178b0:	6803      	ldr	r3, [r0, #0]
   178b2:	4688      	mov	r8, r1
   178b4:	3900      	subs	r1, #0
   178b6:	bf18      	it	ne
   178b8:	2101      	movne	r1, #1
   178ba:	6818      	ldr	r0, [r3, #0]
   178bc:	f00b fdb8 	bl	23430 <bt_gatt_change_aware>
   178c0:	2800      	cmp	r0, #0
   178c2:	d04f      	beq.n	17964 <att_write_rsp+0xc0>
	if (!handle) {
   178c4:	b925      	cbnz	r5, 178d0 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   178c6:	2601      	movs	r6, #1
}
   178c8:	4630      	mov	r0, r6
   178ca:	b00a      	add	sp, #40	; 0x28
   178cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   178d0:	2218      	movs	r2, #24
   178d2:	2100      	movs	r1, #0
   178d4:	a804      	add	r0, sp, #16
   178d6:	f009 fe4a 	bl	2156e <memset>
	if (rsp) {
   178da:	b13f      	cbz	r7, 178ec <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   178dc:	2200      	movs	r2, #0
   178de:	4639      	mov	r1, r7
   178e0:	4620      	mov	r0, r4
   178e2:	f7ff fe95 	bl	17610 <bt_att_chan_create_pdu>
   178e6:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   178e8:	2800      	cmp	r0, #0
   178ea:	d03d      	beq.n	17968 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   178ec:	6823      	ldr	r3, [r4, #0]
   178ee:	681b      	ldr	r3, [r3, #0]
   178f0:	9304      	str	r3, [sp, #16]
	data.req = req;
   178f2:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   178f6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   178fa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   178fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17900:	9307      	str	r3, [sp, #28]
	data.len = len;
   17902:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   17906:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1790a:	2301      	movs	r3, #1
   1790c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   17910:	ab04      	add	r3, sp, #16
   17912:	9302      	str	r3, [sp, #8]
   17914:	4b15      	ldr	r3, [pc, #84]	; (1796c <att_write_rsp+0xc8>)
   17916:	9301      	str	r3, [sp, #4]
   17918:	2200      	movs	r2, #0
   1791a:	9200      	str	r2, [sp, #0]
   1791c:	4613      	mov	r3, r2
   1791e:	4629      	mov	r1, r5
   17920:	4628      	mov	r0, r5
   17922:	f000 fddf 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17926:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1792a:	b93e      	cbnz	r6, 1793c <att_write_rsp+0x98>
	if (data.buf) {
   1792c:	9905      	ldr	r1, [sp, #20]
   1792e:	2900      	cmp	r1, #0
   17930:	d0ca      	beq.n	178c8 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17932:	4a0f      	ldr	r2, [pc, #60]	; (17970 <att_write_rsp+0xcc>)
   17934:	4620      	mov	r0, r4
   17936:	f00a fecc 	bl	226d2 <bt_att_chan_send_rsp>
   1793a:	e7c5      	b.n	178c8 <att_write_rsp+0x24>
		if (rsp) {
   1793c:	b927      	cbnz	r7, 17948 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1793e:	f1b8 0f18 	cmp.w	r8, #24
   17942:	d00c      	beq.n	1795e <att_write_rsp+0xba>
   17944:	2600      	movs	r6, #0
   17946:	e7bf      	b.n	178c8 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   17948:	9805      	ldr	r0, [sp, #20]
   1794a:	f00b fee6 	bl	2371a <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1794e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   17952:	462a      	mov	r2, r5
   17954:	4641      	mov	r1, r8
   17956:	4620      	mov	r0, r4
   17958:	f7ff feb0 	bl	176bc <send_err_rsp>
   1795c:	e7ef      	b.n	1793e <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1795e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   17962:	e7b1      	b.n	178c8 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17964:	2612      	movs	r6, #18
   17966:	e7af      	b.n	178c8 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   17968:	260e      	movs	r6, #14
   1796a:	e7ad      	b.n	178c8 <att_write_rsp+0x24>
   1796c:	0002267d 	.word	0x0002267d
   17970:	0002252f 	.word	0x0002252f

00017974 <bt_att_create_pdu>:
{
   17974:	b570      	push	{r4, r5, r6, lr}
   17976:	460e      	mov	r6, r1
   17978:	4615      	mov	r5, r2
	att = att_get(conn);
   1797a:	f7ff fb33 	bl	16fe4 <att_get>
	if (!att) {
   1797e:	4604      	mov	r4, r0
   17980:	b340      	cbz	r0, 179d4 <bt_att_create_pdu+0x60>
	return list->head;
   17982:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   17984:	b344      	cbz	r4, 179d8 <bt_att_create_pdu+0x64>
   17986:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   1798a:	d027      	beq.n	179dc <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1798c:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   17990:	d008      	beq.n	179a4 <bt_att_create_pdu+0x30>
	return node->next;
   17992:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   17996:	b128      	cbz	r0, 179a4 <bt_att_create_pdu+0x30>
   17998:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1799c:	e002      	b.n	179a4 <bt_att_create_pdu+0x30>
   1799e:	4603      	mov	r3, r0
   179a0:	4604      	mov	r4, r0
   179a2:	4618      	mov	r0, r3
   179a4:	b1e4      	cbz	r4, 179e0 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   179a6:	1c6b      	adds	r3, r5, #1
   179a8:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
   179ac:	4293      	cmp	r3, r2
   179ae:	d90b      	bls.n	179c8 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   179b0:	2800      	cmp	r0, #0
   179b2:	d0f4      	beq.n	1799e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   179b4:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   179b8:	d0f2      	beq.n	179a0 <bt_att_create_pdu+0x2c>
	return node->next;
   179ba:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   179be:	2b00      	cmp	r3, #0
   179c0:	d0ee      	beq.n	179a0 <bt_att_create_pdu+0x2c>
   179c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   179c6:	e7eb      	b.n	179a0 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   179c8:	462a      	mov	r2, r5
   179ca:	4631      	mov	r1, r6
   179cc:	4620      	mov	r0, r4
   179ce:	f7ff fe1f 	bl	17610 <bt_att_chan_create_pdu>
   179d2:	4604      	mov	r4, r0
}
   179d4:	4620      	mov	r0, r4
   179d6:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   179d8:	4620      	mov	r0, r4
   179da:	e7e3      	b.n	179a4 <bt_att_create_pdu+0x30>
   179dc:	4620      	mov	r0, r4
   179de:	e7e1      	b.n	179a4 <bt_att_create_pdu+0x30>
   179e0:	4b08      	ldr	r3, [pc, #32]	; (17a04 <bt_att_create_pdu+0x90>)
   179e2:	4a09      	ldr	r2, [pc, #36]	; (17a08 <bt_att_create_pdu+0x94>)
   179e4:	1a9b      	subs	r3, r3, r2
   179e6:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   179e8:	f04f 0200 	mov.w	r2, #0
   179ec:	2102      	movs	r1, #2
   179ee:	f361 0202 	bfi	r2, r1, #0, #3
   179f2:	f36f 02c5 	bfc	r2, #3, #3
   179f6:	f363 128f 	bfi	r2, r3, #6, #10
   179fa:	1c69      	adds	r1, r5, #1
   179fc:	4803      	ldr	r0, [pc, #12]	; (17a0c <bt_att_create_pdu+0x98>)
   179fe:	f7f9 fa2f 	bl	10e60 <log_1>
	return NULL;
   17a02:	e7e7      	b.n	179d4 <bt_att_create_pdu+0x60>
   17a04:	00025464 	.word	0x00025464
   17a08:	0002545c 	.word	0x0002545c
   17a0c:	00027214 	.word	0x00027214

00017a10 <att_read_group_rsp>:
{
   17a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a14:	b08a      	sub	sp, #40	; 0x28
   17a16:	4604      	mov	r4, r0
   17a18:	460f      	mov	r7, r1
   17a1a:	4615      	mov	r5, r2
   17a1c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17a1e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17a22:	2214      	movs	r2, #20
   17a24:	2100      	movs	r1, #0
   17a26:	eb0d 0002 	add.w	r0, sp, r2
   17a2a:	f009 fda0 	bl	2156e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17a2e:	2201      	movs	r2, #1
   17a30:	2111      	movs	r1, #17
   17a32:	4640      	mov	r0, r8
   17a34:	f7ff ff9e 	bl	17974 <bt_att_create_pdu>
   17a38:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   17a3a:	b350      	cbz	r0, 17a92 <att_read_group_rsp+0x82>
	data.chan = chan;
   17a3c:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   17a3e:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   17a40:	2101      	movs	r1, #1
   17a42:	3008      	adds	r0, #8
   17a44:	f00b feb3 	bl	237ae <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17a48:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   17a4a:	2200      	movs	r2, #0
   17a4c:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   17a4e:	9209      	str	r2, [sp, #36]	; 0x24
   17a50:	ab05      	add	r3, sp, #20
   17a52:	9302      	str	r3, [sp, #8]
   17a54:	4b10      	ldr	r3, [pc, #64]	; (17a98 <att_read_group_rsp+0x88>)
   17a56:	9301      	str	r3, [sp, #4]
   17a58:	9200      	str	r2, [sp, #0]
   17a5a:	4613      	mov	r3, r2
   17a5c:	4631      	mov	r1, r6
   17a5e:	4628      	mov	r0, r5
   17a60:	f000 fd40 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   17a64:	9b08      	ldr	r3, [sp, #32]
   17a66:	781e      	ldrb	r6, [r3, #0]
   17a68:	b14e      	cbz	r6, 17a7e <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17a6a:	4a0c      	ldr	r2, [pc, #48]	; (17a9c <att_read_group_rsp+0x8c>)
   17a6c:	9907      	ldr	r1, [sp, #28]
   17a6e:	4620      	mov	r0, r4
   17a70:	f00a fe2f 	bl	226d2 <bt_att_chan_send_rsp>
	return 0;
   17a74:	2600      	movs	r6, #0
}
   17a76:	4630      	mov	r0, r6
   17a78:	b00a      	add	sp, #40	; 0x28
   17a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17a7e:	9807      	ldr	r0, [sp, #28]
   17a80:	f00b fe4b 	bl	2371a <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   17a84:	230a      	movs	r3, #10
   17a86:	462a      	mov	r2, r5
   17a88:	2110      	movs	r1, #16
   17a8a:	4620      	mov	r0, r4
   17a8c:	f7ff fe16 	bl	176bc <send_err_rsp>
		return 0;
   17a90:	e7f1      	b.n	17a76 <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   17a92:	260e      	movs	r6, #14
   17a94:	e7ef      	b.n	17a76 <att_read_group_rsp+0x66>
   17a96:	bf00      	nop
   17a98:	000172bd 	.word	0x000172bd
   17a9c:	0002252f 	.word	0x0002252f

00017aa0 <att_read_mult_req>:
{
   17aa0:	b570      	push	{r4, r5, r6, lr}
   17aa2:	b088      	sub	sp, #32
   17aa4:	4606      	mov	r6, r0
   17aa6:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   17aa8:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   17aaa:	2101      	movs	r1, #1
   17aac:	4620      	mov	r0, r4
   17aae:	f00b fcbf 	bl	23430 <bt_gatt_change_aware>
   17ab2:	2800      	cmp	r0, #0
   17ab4:	d039      	beq.n	17b2a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   17ab6:	2210      	movs	r2, #16
   17ab8:	2100      	movs	r1, #0
   17aba:	eb0d 0002 	add.w	r0, sp, r2
   17abe:	f009 fd56 	bl	2156e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   17ac2:	2200      	movs	r2, #0
   17ac4:	210f      	movs	r1, #15
   17ac6:	4620      	mov	r0, r4
   17ac8:	f7ff ff54 	bl	17974 <bt_att_create_pdu>
   17acc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17ace:	b378      	cbz	r0, 17b30 <att_read_mult_req+0x90>
	data.chan = chan;
   17ad0:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   17ad2:	89ab      	ldrh	r3, [r5, #12]
   17ad4:	2b01      	cmp	r3, #1
   17ad6:	d921      	bls.n	17b1c <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   17ad8:	f105 0008 	add.w	r0, r5, #8
   17adc:	f00b fe97 	bl	2380e <net_buf_simple_pull_le16>
   17ae0:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17ae2:	2301      	movs	r3, #1
   17ae4:	f88d 301c 	strb.w	r3, [sp, #28]
   17ae8:	ab04      	add	r3, sp, #16
   17aea:	9302      	str	r3, [sp, #8]
   17aec:	4b11      	ldr	r3, [pc, #68]	; (17b34 <att_read_mult_req+0x94>)
   17aee:	9301      	str	r3, [sp, #4]
   17af0:	2200      	movs	r2, #0
   17af2:	9200      	str	r2, [sp, #0]
   17af4:	4613      	mov	r3, r2
   17af6:	4601      	mov	r1, r0
   17af8:	f000 fcf4 	bl	184e4 <bt_gatt_foreach_attr_type>
		if (data.err) {
   17afc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17b00:	2b00      	cmp	r3, #0
   17b02:	d0e6      	beq.n	17ad2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   17b04:	9806      	ldr	r0, [sp, #24]
   17b06:	f00b fe08 	bl	2371a <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   17b0a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17b0e:	4622      	mov	r2, r4
   17b10:	210e      	movs	r1, #14
   17b12:	4630      	mov	r0, r6
   17b14:	f7ff fdd2 	bl	176bc <send_err_rsp>
			return 0;
   17b18:	2000      	movs	r0, #0
   17b1a:	e007      	b.n	17b2c <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17b1c:	4a06      	ldr	r2, [pc, #24]	; (17b38 <att_read_mult_req+0x98>)
   17b1e:	9906      	ldr	r1, [sp, #24]
   17b20:	4630      	mov	r0, r6
   17b22:	f00a fdd6 	bl	226d2 <bt_att_chan_send_rsp>
	return 0;
   17b26:	2000      	movs	r0, #0
   17b28:	e000      	b.n	17b2c <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17b2a:	2012      	movs	r0, #18
}
   17b2c:	b008      	add	sp, #32
   17b2e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   17b30:	200e      	movs	r0, #14
   17b32:	e7fb      	b.n	17b2c <att_read_mult_req+0x8c>
   17b34:	00022843 	.word	0x00022843
   17b38:	0002252f 	.word	0x0002252f

00017b3c <att_read_rsp>:
{
   17b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b40:	b088      	sub	sp, #32
   17b42:	4604      	mov	r4, r0
   17b44:	4688      	mov	r8, r1
   17b46:	4616      	mov	r6, r2
   17b48:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17b4a:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   17b4c:	2101      	movs	r1, #1
   17b4e:	4638      	mov	r0, r7
   17b50:	f00b fc6e 	bl	23430 <bt_gatt_change_aware>
   17b54:	2800      	cmp	r0, #0
   17b56:	d03a      	beq.n	17bce <att_read_rsp+0x92>
	if (!handle) {
   17b58:	b925      	cbnz	r5, 17b64 <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   17b5a:	2601      	movs	r6, #1
}
   17b5c:	4630      	mov	r0, r6
   17b5e:	b008      	add	sp, #32
   17b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   17b64:	2210      	movs	r2, #16
   17b66:	2100      	movs	r1, #0
   17b68:	eb0d 0002 	add.w	r0, sp, r2
   17b6c:	f009 fcff 	bl	2156e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17b70:	2200      	movs	r2, #0
   17b72:	4631      	mov	r1, r6
   17b74:	4638      	mov	r0, r7
   17b76:	f7ff fefd 	bl	17974 <bt_att_create_pdu>
   17b7a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17b7c:	b348      	cbz	r0, 17bd2 <att_read_rsp+0x96>
	data.chan = chan;
   17b7e:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   17b80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   17b84:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17b88:	2301      	movs	r3, #1
   17b8a:	f88d 301c 	strb.w	r3, [sp, #28]
   17b8e:	ab04      	add	r3, sp, #16
   17b90:	9302      	str	r3, [sp, #8]
   17b92:	4b11      	ldr	r3, [pc, #68]	; (17bd8 <att_read_rsp+0x9c>)
   17b94:	9301      	str	r3, [sp, #4]
   17b96:	2200      	movs	r2, #0
   17b98:	9200      	str	r2, [sp, #0]
   17b9a:	4613      	mov	r3, r2
   17b9c:	4629      	mov	r1, r5
   17b9e:	4628      	mov	r0, r5
   17ba0:	f000 fca0 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17ba4:	f89d 601c 	ldrb.w	r6, [sp, #28]
   17ba8:	b92e      	cbnz	r6, 17bb6 <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17baa:	4a0c      	ldr	r2, [pc, #48]	; (17bdc <att_read_rsp+0xa0>)
   17bac:	9906      	ldr	r1, [sp, #24]
   17bae:	4620      	mov	r0, r4
   17bb0:	f00a fd8f 	bl	226d2 <bt_att_chan_send_rsp>
	return 0;
   17bb4:	e7d2      	b.n	17b5c <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   17bb6:	9806      	ldr	r0, [sp, #24]
   17bb8:	f00b fdaf 	bl	2371a <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   17bbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17bc0:	462a      	mov	r2, r5
   17bc2:	4641      	mov	r1, r8
   17bc4:	4620      	mov	r0, r4
   17bc6:	f7ff fd79 	bl	176bc <send_err_rsp>
		return 0;
   17bca:	2600      	movs	r6, #0
   17bcc:	e7c6      	b.n	17b5c <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17bce:	2612      	movs	r6, #18
   17bd0:	e7c4      	b.n	17b5c <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   17bd2:	260e      	movs	r6, #14
   17bd4:	e7c2      	b.n	17b5c <att_read_rsp+0x20>
   17bd6:	bf00      	nop
   17bd8:	00022843 	.word	0x00022843
   17bdc:	0002252f 	.word	0x0002252f

00017be0 <att_read_type_rsp>:
{
   17be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17be4:	b08a      	sub	sp, #40	; 0x28
   17be6:	4604      	mov	r4, r0
   17be8:	460f      	mov	r7, r1
   17bea:	4615      	mov	r5, r2
   17bec:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17bee:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17bf2:	2218      	movs	r2, #24
   17bf4:	2100      	movs	r1, #0
   17bf6:	a804      	add	r0, sp, #16
   17bf8:	f009 fcb9 	bl	2156e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   17bfc:	2201      	movs	r2, #1
   17bfe:	2109      	movs	r1, #9
   17c00:	4640      	mov	r0, r8
   17c02:	f7ff feb7 	bl	17974 <bt_att_create_pdu>
   17c06:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17c08:	b368      	cbz	r0, 17c66 <att_read_type_rsp+0x86>
	data.chan = chan;
   17c0a:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   17c0c:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   17c0e:	2101      	movs	r1, #1
   17c10:	3008      	adds	r0, #8
   17c12:	f00b fdcc 	bl	237ae <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17c16:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   17c18:	2200      	movs	r2, #0
   17c1a:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17c1c:	230a      	movs	r3, #10
   17c1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17c22:	ab04      	add	r3, sp, #16
   17c24:	9302      	str	r3, [sp, #8]
   17c26:	4b11      	ldr	r3, [pc, #68]	; (17c6c <att_read_type_rsp+0x8c>)
   17c28:	9301      	str	r3, [sp, #4]
   17c2a:	9200      	str	r2, [sp, #0]
   17c2c:	4613      	mov	r3, r2
   17c2e:	4631      	mov	r1, r6
   17c30:	4628      	mov	r0, r5
   17c32:	f000 fc57 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17c36:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   17c3a:	b946      	cbnz	r6, 17c4e <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17c3c:	4a0c      	ldr	r2, [pc, #48]	; (17c70 <att_read_type_rsp+0x90>)
   17c3e:	9906      	ldr	r1, [sp, #24]
   17c40:	4620      	mov	r0, r4
   17c42:	f00a fd46 	bl	226d2 <bt_att_chan_send_rsp>
}
   17c46:	4630      	mov	r0, r6
   17c48:	b00a      	add	sp, #40	; 0x28
   17c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17c4e:	9806      	ldr	r0, [sp, #24]
   17c50:	f00b fd63 	bl	2371a <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   17c54:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   17c58:	462a      	mov	r2, r5
   17c5a:	2108      	movs	r1, #8
   17c5c:	4620      	mov	r0, r4
   17c5e:	f7ff fd2d 	bl	176bc <send_err_rsp>
		return 0;
   17c62:	2600      	movs	r6, #0
   17c64:	e7ef      	b.n	17c46 <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   17c66:	260e      	movs	r6, #14
   17c68:	e7ed      	b.n	17c46 <att_read_type_rsp+0x66>
   17c6a:	bf00      	nop
   17c6c:	00017371 	.word	0x00017371
   17c70:	0002252f 	.word	0x0002252f

00017c74 <att_find_type_rsp>:
{
   17c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c78:	b08a      	sub	sp, #40	; 0x28
   17c7a:	4604      	mov	r4, r0
   17c7c:	460d      	mov	r5, r1
   17c7e:	4616      	mov	r6, r2
   17c80:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17c82:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17c86:	2214      	movs	r2, #20
   17c88:	2100      	movs	r1, #0
   17c8a:	eb0d 0002 	add.w	r0, sp, r2
   17c8e:	f009 fc6e 	bl	2156e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   17c92:	2200      	movs	r2, #0
   17c94:	2107      	movs	r1, #7
   17c96:	4640      	mov	r0, r8
   17c98:	f7ff fe6c 	bl	17974 <bt_att_create_pdu>
   17c9c:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17c9e:	b360      	cbz	r0, 17cfa <att_find_type_rsp+0x86>
	data.chan = chan;
   17ca0:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   17ca2:	2200      	movs	r2, #0
   17ca4:	9207      	str	r2, [sp, #28]
	data.value = value;
   17ca6:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   17ca8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   17cac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17cb0:	230a      	movs	r3, #10
   17cb2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   17cb6:	ab05      	add	r3, sp, #20
   17cb8:	9302      	str	r3, [sp, #8]
   17cba:	4b11      	ldr	r3, [pc, #68]	; (17d00 <att_find_type_rsp+0x8c>)
   17cbc:	9301      	str	r3, [sp, #4]
   17cbe:	9200      	str	r2, [sp, #0]
   17cc0:	4613      	mov	r3, r2
   17cc2:	4631      	mov	r1, r6
   17cc4:	4628      	mov	r0, r5
   17cc6:	f000 fc0d 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   17cca:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   17cce:	b946      	cbnz	r6, 17ce2 <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17cd0:	4a0c      	ldr	r2, [pc, #48]	; (17d04 <att_find_type_rsp+0x90>)
   17cd2:	9906      	ldr	r1, [sp, #24]
   17cd4:	4620      	mov	r0, r4
   17cd6:	f00a fcfc 	bl	226d2 <bt_att_chan_send_rsp>
}
   17cda:	4630      	mov	r0, r6
   17cdc:	b00a      	add	sp, #40	; 0x28
   17cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17ce2:	9806      	ldr	r0, [sp, #24]
   17ce4:	f00b fd19 	bl	2371a <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   17ce8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   17cec:	462a      	mov	r2, r5
   17cee:	2106      	movs	r1, #6
   17cf0:	4620      	mov	r0, r4
   17cf2:	f7ff fce3 	bl	176bc <send_err_rsp>
		return 0;
   17cf6:	2600      	movs	r6, #0
   17cf8:	e7ef      	b.n	17cda <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   17cfa:	260e      	movs	r6, #14
   17cfc:	e7ed      	b.n	17cda <att_find_type_rsp+0x66>
   17cfe:	bf00      	nop
   17d00:	0001741d 	.word	0x0001741d
   17d04:	0002252f 	.word	0x0002252f

00017d08 <att_find_info_rsp>:
{
   17d08:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d0a:	b089      	sub	sp, #36	; 0x24
   17d0c:	4604      	mov	r4, r0
   17d0e:	460f      	mov	r7, r1
   17d10:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   17d12:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17d14:	2210      	movs	r2, #16
   17d16:	2100      	movs	r1, #0
   17d18:	eb0d 0002 	add.w	r0, sp, r2
   17d1c:	f009 fc27 	bl	2156e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   17d20:	2200      	movs	r2, #0
   17d22:	2105      	movs	r1, #5
   17d24:	4628      	mov	r0, r5
   17d26:	f7ff fe25 	bl	17974 <bt_att_create_pdu>
   17d2a:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   17d2c:	b300      	cbz	r0, 17d70 <att_find_info_rsp+0x68>
	data.chan = chan;
   17d2e:	9404      	str	r4, [sp, #16]
   17d30:	ab04      	add	r3, sp, #16
   17d32:	9302      	str	r3, [sp, #8]
   17d34:	4b0f      	ldr	r3, [pc, #60]	; (17d74 <att_find_info_rsp+0x6c>)
   17d36:	9301      	str	r3, [sp, #4]
   17d38:	2200      	movs	r2, #0
   17d3a:	9200      	str	r2, [sp, #0]
   17d3c:	4613      	mov	r3, r2
   17d3e:	4631      	mov	r1, r6
   17d40:	4638      	mov	r0, r7
   17d42:	f000 fbcf 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   17d46:	9b06      	ldr	r3, [sp, #24]
   17d48:	b13b      	cbz	r3, 17d5a <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17d4a:	4a0b      	ldr	r2, [pc, #44]	; (17d78 <att_find_info_rsp+0x70>)
   17d4c:	9905      	ldr	r1, [sp, #20]
   17d4e:	4620      	mov	r0, r4
   17d50:	f00a fcbf 	bl	226d2 <bt_att_chan_send_rsp>
	return 0;
   17d54:	2000      	movs	r0, #0
}
   17d56:	b009      	add	sp, #36	; 0x24
   17d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   17d5a:	9805      	ldr	r0, [sp, #20]
   17d5c:	f00b fcdd 	bl	2371a <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   17d60:	230a      	movs	r3, #10
   17d62:	463a      	mov	r2, r7
   17d64:	2104      	movs	r1, #4
   17d66:	4620      	mov	r0, r4
   17d68:	f7ff fca8 	bl	176bc <send_err_rsp>
		return 0;
   17d6c:	2000      	movs	r0, #0
   17d6e:	e7f2      	b.n	17d56 <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   17d70:	200e      	movs	r0, #14
   17d72:	e7f0      	b.n	17d56 <att_find_info_rsp+0x4e>
   17d74:	0002288b 	.word	0x0002288b
   17d78:	0002252f 	.word	0x0002252f

00017d7c <att_mtu_req>:
{
   17d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d7e:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   17d80:	6803      	ldr	r3, [r0, #0]
   17d82:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17d84:	f3bf 8f5b 	dmb	ish
   17d88:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   17d8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   17d90:	f013 0f08 	tst.w	r3, #8
   17d94:	d122      	bne.n	17ddc <att_mtu_req+0x60>
	req = (void *)buf->data;
   17d96:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   17d98:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   17d9a:	2e16      	cmp	r6, #22
   17d9c:	d920      	bls.n	17de0 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   17d9e:	2202      	movs	r2, #2
   17da0:	2103      	movs	r1, #3
   17da2:	f7ff fde7 	bl	17974 <bt_att_create_pdu>
	if (!pdu) {
   17da6:	4607      	mov	r7, r0
   17da8:	b1e0      	cbz	r0, 17de4 <att_mtu_req+0x68>
   17daa:	2102      	movs	r1, #2
   17dac:	3008      	adds	r0, #8
   17dae:	f00b fcfe 	bl	237ae <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   17db2:	2500      	movs	r5, #0
   17db4:	237c      	movs	r3, #124	; 0x7c
   17db6:	7003      	strb	r3, [r0, #0]
   17db8:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   17dba:	4a0b      	ldr	r2, [pc, #44]	; (17de8 <att_mtu_req+0x6c>)
   17dbc:	4639      	mov	r1, r7
   17dbe:	4620      	mov	r0, r4
   17dc0:	f00a fc87 	bl	226d2 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   17dc4:	2e7c      	cmp	r6, #124	; 0x7c
   17dc6:	bf28      	it	cs
   17dc8:	267c      	movcs	r6, #124	; 0x7c
   17dca:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   17dce:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   17dd2:	4620      	mov	r0, r4
   17dd4:	f00a fdb5 	bl	22942 <att_chan_mtu_updated>
	return 0;
   17dd8:	4628      	mov	r0, r5
}
   17dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   17ddc:	2006      	movs	r0, #6
   17dde:	e7fc      	b.n	17dda <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   17de0:	2004      	movs	r0, #4
   17de2:	e7fa      	b.n	17dda <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   17de4:	200e      	movs	r0, #14
   17de6:	e7f8      	b.n	17dda <att_mtu_req+0x5e>
   17de8:	0002252f 	.word	0x0002252f

00017dec <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17dec:	b500      	push	{lr}
   17dee:	b083      	sub	sp, #12
   17df0:	4602      	mov	r2, r0
   17df2:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   17df4:	2100      	movs	r1, #0
   17df6:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17df8:	a901      	add	r1, sp, #4
   17dfa:	4807      	ldr	r0, [pc, #28]	; (17e18 <bt_att_req_alloc+0x2c>)
   17dfc:	f003 fc4c 	bl	1b698 <k_mem_slab_alloc>
   17e00:	b940      	cbnz	r0, 17e14 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   17e02:	2210      	movs	r2, #16
   17e04:	2100      	movs	r1, #0
   17e06:	9801      	ldr	r0, [sp, #4]
   17e08:	f009 fbb1 	bl	2156e <memset>

	return req;
   17e0c:	9801      	ldr	r0, [sp, #4]
}
   17e0e:	b003      	add	sp, #12
   17e10:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   17e14:	2000      	movs	r0, #0
   17e16:	e7fa      	b.n	17e0e <bt_att_req_alloc+0x22>
   17e18:	20033b30 	.word	0x20033b30

00017e1c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   17e1c:	b500      	push	{lr}
   17e1e:	b083      	sub	sp, #12
   17e20:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   17e22:	6880      	ldr	r0, [r0, #8]
   17e24:	b120      	cbz	r0, 17e30 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   17e26:	f00b fc78 	bl	2371a <net_buf_unref>
		req->buf = NULL;
   17e2a:	9b01      	ldr	r3, [sp, #4]
   17e2c:	2200      	movs	r2, #0
   17e2e:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   17e30:	a901      	add	r1, sp, #4
   17e32:	4803      	ldr	r0, [pc, #12]	; (17e40 <bt_att_req_free+0x24>)
   17e34:	f00c fb9f 	bl	24576 <k_mem_slab_free>
}
   17e38:	b003      	add	sp, #12
   17e3a:	f85d fb04 	ldr.w	pc, [sp], #4
   17e3e:	bf00      	nop
   17e40:	20033b30 	.word	0x20033b30

00017e44 <att_handle_rsp>:
{
   17e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e48:	b082      	sub	sp, #8
   17e4a:	4604      	mov	r4, r0
   17e4c:	460f      	mov	r7, r1
   17e4e:	4691      	mov	r9, r2
   17e50:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   17e52:	f500 7088 	add.w	r0, r0, #272	; 0x110
   17e56:	f00c fe10 	bl	24a7a <k_work_cancel_delayable>
	if (!chan->req) {
   17e5a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   17e5e:	b1f8      	cbz	r0, 17ea0 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   17e60:	4b1a      	ldr	r3, [pc, #104]	; (17ecc <att_handle_rsp+0x88>)
   17e62:	4298      	cmp	r0, r3
   17e64:	d02e      	beq.n	17ec4 <att_handle_rsp+0x80>
	func = chan->req->func;
   17e66:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   17e68:	f04f 0a00 	mov.w	sl, #0
   17e6c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   17e70:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   17e74:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   17e78:	f7ff ffd0 	bl	17e1c <bt_att_req_free>
	chan->req = NULL;
   17e7c:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   17e80:	6820      	ldr	r0, [r4, #0]
   17e82:	f00a faf6 	bl	22472 <att_req_send_process>
	if (func) {
   17e86:	b13d      	cbz	r5, 17e98 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   17e88:	6823      	ldr	r3, [r4, #0]
   17e8a:	6818      	ldr	r0, [r3, #0]
   17e8c:	f8cd 8000 	str.w	r8, [sp]
   17e90:	464b      	mov	r3, r9
   17e92:	463a      	mov	r2, r7
   17e94:	4631      	mov	r1, r6
   17e96:	47a8      	blx	r5
}
   17e98:	2000      	movs	r0, #0
   17e9a:	b002      	add	sp, #8
   17e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ea0:	4b0b      	ldr	r3, [pc, #44]	; (17ed0 <att_handle_rsp+0x8c>)
   17ea2:	4a0c      	ldr	r2, [pc, #48]	; (17ed4 <att_handle_rsp+0x90>)
   17ea4:	1a9b      	subs	r3, r3, r2
   17ea6:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   17ea8:	f04f 0100 	mov.w	r1, #0
   17eac:	2202      	movs	r2, #2
   17eae:	f362 0102 	bfi	r1, r2, #0, #3
   17eb2:	f36f 01c5 	bfc	r1, #3, #3
   17eb6:	f363 118f 	bfi	r1, r3, #6, #10
   17eba:	4807      	ldr	r0, [pc, #28]	; (17ed8 <att_handle_rsp+0x94>)
   17ebc:	f7f9 f886 	bl	10fcc <log_0>
	bt_att_func_t func = NULL;
   17ec0:	2500      	movs	r5, #0
		goto process;
   17ec2:	e7dd      	b.n	17e80 <att_handle_rsp+0x3c>
		chan->req = NULL;
   17ec4:	2500      	movs	r5, #0
   17ec6:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   17eca:	e7d9      	b.n	17e80 <att_handle_rsp+0x3c>
   17ecc:	200369ec 	.word	0x200369ec
   17ed0:	00025464 	.word	0x00025464
   17ed4:	0002545c 	.word	0x0002545c
   17ed8:	00027230 	.word	0x00027230

00017edc <att_reset>:
{
   17edc:	b570      	push	{r4, r5, r6, lr}
   17ede:	b084      	sub	sp, #16
   17ee0:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   17ee2:	2200      	movs	r2, #0
   17ee4:	2300      	movs	r3, #0
   17ee6:	9803      	ldr	r0, [sp, #12]
   17ee8:	300c      	adds	r0, #12
   17eea:	f00b fbea 	bl	236c2 <net_buf_get>
   17eee:	4603      	mov	r3, r0
   17ef0:	b118      	cbz	r0, 17efa <att_reset+0x1e>
		net_buf_unref(buf);
   17ef2:	4618      	mov	r0, r3
   17ef4:	f00b fc11 	bl	2371a <net_buf_unref>
   17ef8:	e7f3      	b.n	17ee2 <att_reset+0x6>
	att->conn = NULL;
   17efa:	9b03      	ldr	r3, [sp, #12]
   17efc:	2200      	movs	r2, #0
   17efe:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17f00:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   17f02:	685d      	ldr	r5, [r3, #4]
   17f04:	b11d      	cbz	r5, 17f0e <att_reset+0x32>
   17f06:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f08:	b135      	cbz	r5, 17f18 <att_reset+0x3c>
	return node->next;
   17f0a:	682c      	ldr	r4, [r5, #0]
   17f0c:	e004      	b.n	17f18 <att_reset+0x3c>
   17f0e:	462c      	mov	r4, r5
   17f10:	e002      	b.n	17f18 <att_reset+0x3c>
   17f12:	4623      	mov	r3, r4
   17f14:	4625      	mov	r5, r4
   17f16:	461c      	mov	r4, r3
   17f18:	b195      	cbz	r5, 17f40 <att_reset+0x64>
		if (req->func) {
   17f1a:	686e      	ldr	r6, [r5, #4]
   17f1c:	b136      	cbz	r6, 17f2c <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   17f1e:	68eb      	ldr	r3, [r5, #12]
   17f20:	9300      	str	r3, [sp, #0]
   17f22:	2300      	movs	r3, #0
   17f24:	461a      	mov	r2, r3
   17f26:	210e      	movs	r1, #14
   17f28:	4618      	mov	r0, r3
   17f2a:	47b0      	blx	r6
		bt_att_req_free(req);
   17f2c:	4628      	mov	r0, r5
   17f2e:	f7ff ff75 	bl	17e1c <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17f32:	2c00      	cmp	r4, #0
   17f34:	d0ed      	beq.n	17f12 <att_reset+0x36>
   17f36:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   17f38:	2c00      	cmp	r4, #0
   17f3a:	d0eb      	beq.n	17f14 <att_reset+0x38>
	return node->next;
   17f3c:	6823      	ldr	r3, [r4, #0]
   17f3e:	e7e9      	b.n	17f14 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
   17f40:	a903      	add	r1, sp, #12
   17f42:	4802      	ldr	r0, [pc, #8]	; (17f4c <att_reset+0x70>)
   17f44:	f00c fb17 	bl	24576 <k_mem_slab_free>
}
   17f48:	b004      	add	sp, #16
   17f4a:	bd70      	pop	{r4, r5, r6, pc}
   17f4c:	20033af8 	.word	0x20033af8

00017f50 <att_timeout>:
{
   17f50:	b510      	push	{r4, lr}
   17f52:	4604      	mov	r4, r0
   17f54:	4b0a      	ldr	r3, [pc, #40]	; (17f80 <att_timeout+0x30>)
   17f56:	4a0b      	ldr	r2, [pc, #44]	; (17f84 <att_timeout+0x34>)
   17f58:	1a9b      	subs	r3, r3, r2
   17f5a:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   17f5c:	f04f 0100 	mov.w	r1, #0
   17f60:	2201      	movs	r2, #1
   17f62:	f362 0102 	bfi	r1, r2, #0, #3
   17f66:	f36f 01c5 	bfc	r1, #3, #3
   17f6a:	f363 118f 	bfi	r1, r3, #6, #10
   17f6e:	4806      	ldr	r0, [pc, #24]	; (17f88 <att_timeout+0x38>)
   17f70:	f7f9 f82c 	bl	10fcc <log_0>
	bt_att_disconnected(&chan->chan.chan);
   17f74:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   17f78:	f00a fe9f 	bl	22cba <bt_att_disconnected>
}
   17f7c:	bd10      	pop	{r4, pc}
   17f7e:	bf00      	nop
   17f80:	00025464 	.word	0x00025464
   17f84:	0002545c 	.word	0x0002545c
   17f88:	00027248 	.word	0x00027248

00017f8c <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17f8c:	4b0d      	ldr	r3, [pc, #52]	; (17fc4 <bt_gatt_service_init+0x38>)
   17f8e:	2201      	movs	r2, #1
   17f90:	f3bf 8f5b 	dmb	ish
   17f94:	e853 1f00 	ldrex	r1, [r3]
   17f98:	2900      	cmp	r1, #0
   17f9a:	d103      	bne.n	17fa4 <bt_gatt_service_init+0x18>
   17f9c:	e843 2000 	strex	r0, r2, [r3]
   17fa0:	2800      	cmp	r0, #0
   17fa2:	d1f7      	bne.n	17f94 <bt_gatt_service_init+0x8>
   17fa4:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   17fa8:	d101      	bne.n	17fae <bt_gatt_service_init+0x22>
		return;
	}

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17faa:	4b07      	ldr	r3, [pc, #28]	; (17fc8 <bt_gatt_service_init+0x3c>)
   17fac:	e006      	b.n	17fbc <bt_gatt_service_init+0x30>
   17fae:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   17fb0:	685a      	ldr	r2, [r3, #4]
   17fb2:	4906      	ldr	r1, [pc, #24]	; (17fcc <bt_gatt_service_init+0x40>)
   17fb4:	8808      	ldrh	r0, [r1, #0]
   17fb6:	4402      	add	r2, r0
   17fb8:	800a      	strh	r2, [r1, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17fba:	3308      	adds	r3, #8
   17fbc:	4a04      	ldr	r2, [pc, #16]	; (17fd0 <bt_gatt_service_init+0x44>)
   17fbe:	4293      	cmp	r3, r2
   17fc0:	d3f6      	bcc.n	17fb0 <bt_gatt_service_init+0x24>
	}
}
   17fc2:	4770      	bx	lr
   17fc4:	20036a3c 	.word	0x20036a3c
   17fc8:	00025444 	.word	0x00025444
   17fcc:	20038118 	.word	0x20038118
   17fd0:	0002545c 	.word	0x0002545c

00017fd4 <find_cf_cfg>:
{
   17fd4:	b570      	push	{r4, r5, r6, lr}
   17fd6:	b082      	sub	sp, #8
   17fd8:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17fda:	2400      	movs	r4, #0
   17fdc:	2c00      	cmp	r4, #0
   17fde:	dd03      	ble.n	17fe8 <find_cf_cfg+0x14>
	return NULL;
   17fe0:	2500      	movs	r5, #0
}
   17fe2:	4628      	mov	r0, r5
   17fe4:	b002      	add	sp, #8
   17fe6:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17fe8:	4d0e      	ldr	r5, [pc, #56]	; (18024 <find_cf_cfg+0x50>)
   17fea:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   17fee:	b166      	cbz	r6, 1800a <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17ff0:	490c      	ldr	r1, [pc, #48]	; (18024 <find_cf_cfg+0x50>)
   17ff2:	0123      	lsls	r3, r4, #4
   17ff4:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   17ff8:	3201      	adds	r2, #1
   17ffa:	5cc9      	ldrb	r1, [r1, r3]
   17ffc:	4630      	mov	r0, r6
   17ffe:	f009 ffaa 	bl	21f56 <bt_conn_is_peer_addr_le>
   18002:	2800      	cmp	r0, #0
   18004:	d1ed      	bne.n	17fe2 <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   18006:	3401      	adds	r4, #1
   18008:	e7e8      	b.n	17fdc <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1800a:	4628      	mov	r0, r5
   1800c:	2300      	movs	r3, #0
   1800e:	9300      	str	r3, [sp, #0]
   18010:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18014:	2207      	movs	r2, #7
   18016:	4669      	mov	r1, sp
   18018:	3001      	adds	r0, #1
   1801a:	f009 fa57 	bl	214cc <memcmp>
   1801e:	2800      	cmp	r0, #0
   18020:	d1f1      	bne.n	18006 <find_cf_cfg+0x32>
   18022:	e7de      	b.n	17fe2 <find_cf_cfg+0xe>
   18024:	20036a04 	.word	0x20036a04

00018028 <find_sc_cfg>:
{
   18028:	b570      	push	{r4, r5, r6, lr}
   1802a:	4606      	mov	r6, r0
   1802c:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1802e:	2400      	movs	r4, #0
   18030:	b10c      	cbz	r4, 18036 <find_sc_cfg+0xe>
	return NULL;
   18032:	2000      	movs	r0, #0
}
   18034:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   18036:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1803a:	4a0c      	ldr	r2, [pc, #48]	; (1806c <find_sc_cfg+0x44>)
   1803c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   18040:	429e      	cmp	r6, r3
   18042:	d001      	beq.n	18048 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18044:	3401      	adds	r4, #1
   18046:	e7f3      	b.n	18030 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   18048:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1804c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   18050:	2207      	movs	r2, #7
   18052:	4629      	mov	r1, r5
   18054:	3001      	adds	r0, #1
   18056:	f009 fa39 	bl	214cc <memcmp>
		if (id == sc_cfg[i].id &&
   1805a:	2800      	cmp	r0, #0
   1805c:	d1f2      	bne.n	18044 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1805e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18062:	4802      	ldr	r0, [pc, #8]	; (1806c <find_sc_cfg+0x44>)
   18064:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   18068:	e7e4      	b.n	18034 <find_sc_cfg+0xc>
   1806a:	bf00      	nop
   1806c:	20036a18 	.word	0x20036a18

00018070 <cf_write>:
{
   18070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18074:	461d      	mov	r5, r3
   18076:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1807a:	2b01      	cmp	r3, #1
   1807c:	d83f      	bhi.n	180fe <cf_write+0x8e>
   1807e:	4606      	mov	r6, r0
   18080:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   18082:	462f      	mov	r7, r5
   18084:	442b      	add	r3, r5
   18086:	2b01      	cmp	r3, #1
   18088:	d83c      	bhi.n	18104 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1808a:	f7ff ffa3 	bl	17fd4 <find_cf_cfg>
	if (!cfg) {
   1808e:	4604      	mov	r4, r0
   18090:	b1f0      	cbz	r0, 180d0 <cf_write+0x60>
	if (!cfg) {
   18092:	b30c      	cbz	r4, 180d8 <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
   18094:	462a      	mov	r2, r5
   18096:	4641      	mov	r1, r8
   18098:	4620      	mov	r0, r4
   1809a:	f00a fe71 	bl	22d80 <cf_set_value>
   1809e:	b3a0      	cbz	r0, 1810a <cf_write+0x9a>
	memcpy(dst, src, sizeof(*dst));
   180a0:	2207      	movs	r2, #7
   180a2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   180a6:	1c60      	adds	r0, r4, #1
   180a8:	f009 fa3d 	bl	21526 <memcpy>
	cfg->id = conn->id;
   180ac:	7a33      	ldrb	r3, [r6, #8]
   180ae:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   180b2:	f3bf 8f5b 	dmb	ish
   180b6:	e854 3f00 	ldrex	r3, [r4]
   180ba:	f043 0301 	orr.w	r3, r3, #1
   180be:	e844 3200 	strex	r2, r3, [r4]
   180c2:	2a00      	cmp	r2, #0
   180c4:	d1f7      	bne.n	180b6 <cf_write+0x46>
   180c6:	f3bf 8f5b 	dmb	ish
}
   180ca:	4638      	mov	r0, r7
   180cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   180d0:	f7ff ff80 	bl	17fd4 <find_cf_cfg>
   180d4:	4604      	mov	r4, r0
   180d6:	e7dc      	b.n	18092 <cf_write+0x22>
   180d8:	4b0d      	ldr	r3, [pc, #52]	; (18110 <cf_write+0xa0>)
   180da:	4a0e      	ldr	r2, [pc, #56]	; (18114 <cf_write+0xa4>)
   180dc:	1a9b      	subs	r3, r3, r2
   180de:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   180e0:	f04f 0100 	mov.w	r1, #0
   180e4:	2202      	movs	r2, #2
   180e6:	f362 0102 	bfi	r1, r2, #0, #3
   180ea:	f36f 01c5 	bfc	r1, #3, #3
   180ee:	f363 118f 	bfi	r1, r3, #6, #10
   180f2:	4809      	ldr	r0, [pc, #36]	; (18118 <cf_write+0xa8>)
   180f4:	f7f8 ff6a 	bl	10fcc <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   180f8:	f06f 0710 	mvn.w	r7, #16
   180fc:	e7e5      	b.n	180ca <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   180fe:	f06f 0706 	mvn.w	r7, #6
   18102:	e7e2      	b.n	180ca <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18104:	f06f 070c 	mvn.w	r7, #12
   18108:	e7df      	b.n	180ca <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1810a:	f06f 0712 	mvn.w	r7, #18
   1810e:	e7dc      	b.n	180ca <cf_write+0x5a>
   18110:	0002547c 	.word	0x0002547c
   18114:	0002545c 	.word	0x0002545c
   18118:	000272c4 	.word	0x000272c4

0001811c <sc_save>:
{
   1811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18120:	b082      	sub	sp, #8
   18122:	4607      	mov	r7, r0
   18124:	4688      	mov	r8, r1
   18126:	4616      	mov	r6, r2
   18128:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1812a:	f7ff ff7d 	bl	18028 <find_sc_cfg>
	if (!cfg) {
   1812e:	4604      	mov	r4, r0
   18130:	b170      	cbz	r0, 18150 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   18132:	8923      	ldrh	r3, [r4, #8]
   18134:	b90b      	cbnz	r3, 1813a <sc_save+0x1e>
   18136:	8963      	ldrh	r3, [r4, #10]
   18138:	b353      	cbz	r3, 18190 <sc_save+0x74>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1813a:	462b      	mov	r3, r5
   1813c:	4632      	mov	r2, r6
   1813e:	f104 010a 	add.w	r1, r4, #10
   18142:	f104 0008 	add.w	r0, r4, #8
   18146:	f00a fe06 	bl	22d56 <update_range>
}
   1814a:	b002      	add	sp, #8
   1814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18150:	9000      	str	r0, [sp, #0]
   18152:	f8cd 0003 	str.w	r0, [sp, #3]
   18156:	4669      	mov	r1, sp
   18158:	f7ff ff66 	bl	18028 <find_sc_cfg>
		if (!cfg) {
   1815c:	4604      	mov	r4, r0
   1815e:	b130      	cbz	r0, 1816e <sc_save+0x52>
		cfg->id = id;
   18160:	f800 7b01 	strb.w	r7, [r0], #1
   18164:	2207      	movs	r2, #7
   18166:	4641      	mov	r1, r8
   18168:	f009 f9dd 	bl	21526 <memcpy>
   1816c:	e7e1      	b.n	18132 <sc_save+0x16>
   1816e:	4b0a      	ldr	r3, [pc, #40]	; (18198 <sc_save+0x7c>)
   18170:	4a0a      	ldr	r2, [pc, #40]	; (1819c <sc_save+0x80>)
   18172:	1a9b      	subs	r3, r3, r2
   18174:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   18176:	f04f 0100 	mov.w	r1, #0
   1817a:	2201      	movs	r2, #1
   1817c:	f362 0102 	bfi	r1, r2, #0, #3
   18180:	f36f 01c5 	bfc	r1, #3, #3
   18184:	f363 118f 	bfi	r1, r3, #6, #10
   18188:	4805      	ldr	r0, [pc, #20]	; (181a0 <sc_save+0x84>)
   1818a:	f7f8 ff1f 	bl	10fcc <log_0>
			return;
   1818e:	e7dc      	b.n	1814a <sc_save+0x2e>
		cfg->data.start = start;
   18190:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   18192:	8165      	strh	r5, [r4, #10]
		goto done;
   18194:	e7d9      	b.n	1814a <sc_save+0x2e>
   18196:	bf00      	nop
   18198:	0002547c 	.word	0x0002547c
   1819c:	0002545c 	.word	0x0002545c
   181a0:	000272f0 	.word	0x000272f0

000181a4 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   181a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   181a8:	461c      	mov	r4, r3
   181aa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   181ae:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   181b0:	2b00      	cmp	r3, #0
   181b2:	d157      	bne.n	18264 <bt_gatt_attr_write_ccc+0xc0>
   181b4:	4681      	mov	r9, r0
   181b6:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   181b8:	1e63      	subs	r3, r4, #1
   181ba:	b29b      	uxth	r3, r3
   181bc:	2b01      	cmp	r3, #1
   181be:	d854      	bhi.n	1826a <bt_gatt_attr_write_ccc+0xc6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   181c0:	2c01      	cmp	r4, #1
   181c2:	d91d      	bls.n	18200 <bt_gatt_attr_write_ccc+0x5c>
   181c4:	7853      	ldrb	r3, [r2, #1]
   181c6:	7815      	ldrb	r5, [r2, #0]
   181c8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   181cc:	4639      	mov	r1, r7
   181ce:	4648      	mov	r0, r9
   181d0:	f00a febe 	bl	22f50 <find_ccc_cfg>
	if (!cfg) {
   181d4:	4680      	mov	r8, r0
   181d6:	b1a8      	cbz	r0, 18204 <bt_gatt_attr_write_ccc+0x60>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   181d8:	693b      	ldr	r3, [r7, #16]
   181da:	b143      	cbz	r3, 181ee <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   181dc:	462a      	mov	r2, r5
   181de:	4631      	mov	r1, r6
   181e0:	4648      	mov	r0, r9
   181e2:	4798      	blx	r3

		if (write < 0) {
   181e4:	2800      	cmp	r0, #0
   181e6:	db09      	blt.n	181fc <bt_gatt_attr_write_ccc+0x58>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   181e8:	3801      	subs	r0, #1
   181ea:	2801      	cmp	r0, #1
   181ec:	d840      	bhi.n	18270 <bt_gatt_attr_write_ccc+0xcc>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   181ee:	f8a8 5008 	strh.w	r5, [r8, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   181f2:	897b      	ldrh	r3, [r7, #10]
   181f4:	429d      	cmp	r5, r3
   181f6:	d12c      	bne.n	18252 <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_conn_enqueue(conn);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   181f8:	b385      	cbz	r5, 1825c <bt_gatt_attr_write_ccc+0xb8>
		clear_ccc_cfg(cfg);
	}

	return len;
   181fa:	4620      	mov	r0, r4
}
   181fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   18200:	7815      	ldrb	r5, [r2, #0]
   18202:	e7e3      	b.n	181cc <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   18204:	b90d      	cbnz	r5, 1820a <bt_gatt_attr_write_ccc+0x66>
			return len;
   18206:	4620      	mov	r0, r4
   18208:	e7f8      	b.n	181fc <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   1820a:	4639      	mov	r1, r7
   1820c:	2000      	movs	r0, #0
   1820e:	f00a fe9f 	bl	22f50 <find_ccc_cfg>
		if (!cfg) {
   18212:	4680      	mov	r8, r0
   18214:	b150      	cbz	r0, 1822c <bt_gatt_attr_write_ccc+0x88>
   18216:	2207      	movs	r2, #7
   18218:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1821c:	3001      	adds	r0, #1
   1821e:	f009 f982 	bl	21526 <memcpy>
		cfg->id = conn->id;
   18222:	f899 3008 	ldrb.w	r3, [r9, #8]
   18226:	f888 3000 	strb.w	r3, [r8]
   1822a:	e7d5      	b.n	181d8 <bt_gatt_attr_write_ccc+0x34>
   1822c:	4b12      	ldr	r3, [pc, #72]	; (18278 <bt_gatt_attr_write_ccc+0xd4>)
   1822e:	4a13      	ldr	r2, [pc, #76]	; (1827c <bt_gatt_attr_write_ccc+0xd8>)
   18230:	1a9b      	subs	r3, r3, r2
   18232:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   18234:	f04f 0100 	mov.w	r1, #0
   18238:	2202      	movs	r2, #2
   1823a:	f362 0102 	bfi	r1, r2, #0, #3
   1823e:	f36f 01c5 	bfc	r1, #3, #3
   18242:	f363 118f 	bfi	r1, r3, #6, #10
   18246:	480e      	ldr	r0, [pc, #56]	; (18280 <bt_gatt_attr_write_ccc+0xdc>)
   18248:	f7f8 fec0 	bl	10fcc <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1824c:	f06f 0010 	mvn.w	r0, #16
   18250:	e7d4      	b.n	181fc <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   18252:	4639      	mov	r1, r7
   18254:	4630      	mov	r0, r6
   18256:	f00a fdc7 	bl	22de8 <gatt_ccc_changed>
   1825a:	e7cd      	b.n	181f8 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   1825c:	4640      	mov	r0, r8
   1825e:	f00a fea3 	bl	22fa8 <clear_ccc_cfg>
   18262:	e7ca      	b.n	181fa <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18264:	f06f 0006 	mvn.w	r0, #6
   18268:	e7c8      	b.n	181fc <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1826a:	f06f 000c 	mvn.w	r0, #12
   1826e:	e7c5      	b.n	181fc <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   18270:	f06f 000d 	mvn.w	r0, #13
   18274:	e7c2      	b.n	181fc <bt_gatt_attr_write_ccc+0x58>
   18276:	bf00      	nop
   18278:	0002547c 	.word	0x0002547c
   1827c:	0002545c 	.word	0x0002545c
   18280:	00027310 	.word	0x00027310

00018284 <sc_clear>:
{
   18284:	b538      	push	{r3, r4, r5, lr}
   18286:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18288:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1828c:	4629      	mov	r1, r5
   1828e:	7a00      	ldrb	r0, [r0, #8]
   18290:	f009 fb2a 	bl	218e8 <bt_addr_le_is_bonded>
   18294:	b1b8      	cbz	r0, 182c6 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   18296:	4629      	mov	r1, r5
   18298:	7a20      	ldrb	r0, [r4, #8]
   1829a:	f00a fe9b 	bl	22fd4 <bt_gatt_clear_sc>
		if (err) {
   1829e:	4601      	mov	r1, r0
   182a0:	b900      	cbnz	r0, 182a4 <sc_clear+0x20>
}
   182a2:	bd38      	pop	{r3, r4, r5, pc}
   182a4:	4b0c      	ldr	r3, [pc, #48]	; (182d8 <sc_clear+0x54>)
   182a6:	4a0d      	ldr	r2, [pc, #52]	; (182dc <sc_clear+0x58>)
   182a8:	1a9b      	subs	r3, r3, r2
   182aa:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   182ac:	f04f 0200 	mov.w	r2, #0
   182b0:	2001      	movs	r0, #1
   182b2:	f360 0202 	bfi	r2, r0, #0, #3
   182b6:	f36f 02c5 	bfc	r2, #3, #3
   182ba:	f363 128f 	bfi	r2, r3, #6, #10
   182be:	4808      	ldr	r0, [pc, #32]	; (182e0 <sc_clear+0x5c>)
   182c0:	f7f8 fdce 	bl	10e60 <log_1>
   182c4:	e7ed      	b.n	182a2 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   182c6:	4629      	mov	r1, r5
   182c8:	7a20      	ldrb	r0, [r4, #8]
   182ca:	f7ff fead 	bl	18028 <find_sc_cfg>
		if (cfg) {
   182ce:	2800      	cmp	r0, #0
   182d0:	d0e7      	beq.n	182a2 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   182d2:	f00a fe79 	bl	22fc8 <clear_sc_cfg>
}
   182d6:	e7e4      	b.n	182a2 <sc_clear+0x1e>
   182d8:	0002547c 	.word	0x0002547c
   182dc:	0002545c 	.word	0x0002545c
   182e0:	0002732c 	.word	0x0002732c

000182e4 <sc_indicate_rsp>:
{
   182e4:	b510      	push	{r4, lr}
   182e6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   182e8:	4b19      	ldr	r3, [pc, #100]	; (18350 <sc_indicate_rsp+0x6c>)
   182ea:	f103 0250 	add.w	r2, r3, #80	; 0x50
   182ee:	f3bf 8f5b 	dmb	ish
   182f2:	e852 1f00 	ldrex	r1, [r2]
   182f6:	f021 0102 	bic.w	r1, r1, #2
   182fa:	e842 1000 	strex	r0, r1, [r2]
   182fe:	2800      	cmp	r0, #0
   18300:	d1f7      	bne.n	182f2 <sc_indicate_rsp+0xe>
   18302:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18306:	f3bf 8f5b 	dmb	ish
   1830a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1830c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   18310:	f013 0f01 	tst.w	r3, #1
   18314:	d116      	bne.n	18344 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   18316:	4620      	mov	r0, r4
   18318:	f7ff fe5c 	bl	17fd4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1831c:	4603      	mov	r3, r0
   1831e:	b180      	cbz	r0, 18342 <sc_indicate_rsp+0x5e>
   18320:	7a02      	ldrb	r2, [r0, #8]
   18322:	f012 0f01 	tst.w	r2, #1
   18326:	d00c      	beq.n	18342 <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18328:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1832a:	f3bf 8f5b 	dmb	ish
   1832e:	e853 2f00 	ldrex	r2, [r3]
   18332:	f042 0201 	orr.w	r2, r2, #1
   18336:	e843 2100 	strex	r1, r2, [r3]
   1833a:	2900      	cmp	r1, #0
   1833c:	d1f7      	bne.n	1832e <sc_indicate_rsp+0x4a>
   1833e:	f3bf 8f5b 	dmb	ish
}
   18342:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   18344:	2200      	movs	r2, #0
   18346:	2300      	movs	r3, #0
   18348:	4802      	ldr	r0, [pc, #8]	; (18354 <sc_indicate_rsp+0x70>)
   1834a:	f003 fe01 	bl	1bf50 <k_work_reschedule>
   1834e:	e7e2      	b.n	18316 <sc_indicate_rsp+0x32>
   18350:	20034cf0 	.word	0x20034cf0
   18354:	20034d10 	.word	0x20034d10

00018358 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   18358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1835c:	6881      	ldr	r1, [r0, #8]
   1835e:	4b2d      	ldr	r3, [pc, #180]	; (18414 <disconnected_cb+0xbc>)
   18360:	4299      	cmp	r1, r3
   18362:	d002      	beq.n	1836a <disconnected_cb+0x12>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   18364:	2001      	movs	r0, #1
   18366:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1836a:	4604      	mov	r4, r0
   1836c:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1836e:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   18370:	897b      	ldrh	r3, [r7, #10]
   18372:	2b00      	cmp	r3, #0
   18374:	d0f6      	beq.n	18364 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18376:	2500      	movs	r5, #0
	value_used = false;
   18378:	46aa      	mov	sl, r5
   1837a:	e021      	b.n	183c0 <disconnected_cb+0x68>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1837c:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   18380:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   18384:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   18388:	b1cb      	cbz	r3, 183be <disconnected_cb+0x66>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1838a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1838e:	f108 0901 	add.w	r9, r8, #1
   18392:	464a      	mov	r2, r9
   18394:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   18398:	4630      	mov	r0, r6
   1839a:	f009 fddc 	bl	21f56 <bt_conn_is_peer_addr_le>
   1839e:	bb00      	cbnz	r0, 183e2 <disconnected_cb+0x8a>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   183a0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   183a4:	4649      	mov	r1, r9
   183a6:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   183aa:	f7fe f97b 	bl	166a4 <bt_conn_lookup_addr_le>
			if (tmp) {
   183ae:	4603      	mov	r3, r0
   183b0:	b128      	cbz	r0, 183be <disconnected_cb+0x66>
				if (tmp->state == BT_CONN_CONNECTED) {
   183b2:	7a82      	ldrb	r2, [r0, #10]
   183b4:	2a07      	cmp	r2, #7
   183b6:	d011      	beq.n	183dc <disconnected_cb+0x84>
				bt_conn_unref(tmp);
   183b8:	4618      	mov	r0, r3
   183ba:	f009 fd63 	bl	21e84 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   183be:	3501      	adds	r5, #1
   183c0:	2d00      	cmp	r5, #0
   183c2:	d0db      	beq.n	1837c <disconnected_cb+0x24>
	if (!value_used) {
   183c4:	f1ba 0f00 	cmp.w	sl, #0
   183c8:	d1cc      	bne.n	18364 <disconnected_cb+0xc>
		ccc->value = 0U;
   183ca:	2300      	movs	r3, #0
   183cc:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   183ce:	68fb      	ldr	r3, [r7, #12]
   183d0:	2b00      	cmp	r3, #0
   183d2:	d0c7      	beq.n	18364 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   183d4:	2100      	movs	r1, #0
   183d6:	4620      	mov	r0, r4
   183d8:	4798      	blx	r3
   183da:	e7c3      	b.n	18364 <disconnected_cb+0xc>
					value_used = true;
   183dc:	f04f 0a01 	mov.w	sl, #1
   183e0:	e7ea      	b.n	183b8 <disconnected_cb+0x60>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   183e2:	f106 0b88 	add.w	fp, r6, #136	; 0x88
   183e6:	4659      	mov	r1, fp
   183e8:	7a30      	ldrb	r0, [r6, #8]
   183ea:	f009 fa7d 	bl	218e8 <bt_addr_le_is_bonded>
   183ee:	b950      	cbnz	r0, 18406 <disconnected_cb+0xae>
				if (ccc == &sc_ccc) {
   183f0:	4b09      	ldr	r3, [pc, #36]	; (18418 <disconnected_cb+0xc0>)
   183f2:	429f      	cmp	r7, r3
   183f4:	d003      	beq.n	183fe <disconnected_cb+0xa6>
				clear_ccc_cfg(cfg);
   183f6:	4640      	mov	r0, r8
   183f8:	f00a fdd6 	bl	22fa8 <clear_ccc_cfg>
   183fc:	e7df      	b.n	183be <disconnected_cb+0x66>
					sc_clear(conn);
   183fe:	4630      	mov	r0, r6
   18400:	f7ff ff40 	bl	18284 <sc_clear>
   18404:	e7f7      	b.n	183f6 <disconnected_cb+0x9e>
   18406:	2207      	movs	r2, #7
   18408:	4659      	mov	r1, fp
   1840a:	4648      	mov	r0, r9
   1840c:	f009 f88b 	bl	21526 <memcpy>
}
   18410:	e7d5      	b.n	183be <disconnected_cb+0x66>
   18412:	bf00      	nop
   18414:	000181a5 	.word	0x000181a5
   18418:	20033a34 	.word	0x20033a34

0001841c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1841c:	4b13      	ldr	r3, [pc, #76]	; (1846c <bt_gatt_init+0x50>)
   1841e:	2201      	movs	r2, #1
   18420:	f3bf 8f5b 	dmb	ish
   18424:	e853 1f00 	ldrex	r1, [r3]
   18428:	2900      	cmp	r1, #0
   1842a:	d103      	bne.n	18434 <bt_gatt_init+0x18>
   1842c:	e843 2000 	strex	r0, r2, [r3]
   18430:	2800      	cmp	r0, #0
   18432:	d1f7      	bne.n	18424 <bt_gatt_init+0x8>
   18434:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   18438:	d116      	bne.n	18468 <bt_gatt_init+0x4c>
{
   1843a:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1843c:	f7ff fda6 	bl	17f8c <bt_gatt_service_init>
	list->head = NULL;
   18440:	4b0b      	ldr	r3, [pc, #44]	; (18470 <bt_gatt_init+0x54>)
   18442:	2200      	movs	r2, #0
   18444:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   18446:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   18448:	4c0a      	ldr	r4, [pc, #40]	; (18474 <bt_gatt_init+0x58>)
   1844a:	490b      	ldr	r1, [pc, #44]	; (18478 <bt_gatt_init+0x5c>)
   1844c:	4620      	mov	r0, r4
   1844e:	f00c fac8 	bl	249e2 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   18452:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18456:	2300      	movs	r3, #0
   18458:	4620      	mov	r0, r4
   1845a:	f003 fd71 	bl	1bf40 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1845e:	4907      	ldr	r1, [pc, #28]	; (1847c <bt_gatt_init+0x60>)
   18460:	4807      	ldr	r0, [pc, #28]	; (18480 <bt_gatt_init+0x64>)
   18462:	f00c fabe 	bl	249e2 <k_work_init_delayable>
}
   18466:	bd10      	pop	{r4, pc}
   18468:	4770      	bx	lr
   1846a:	bf00      	nop
   1846c:	20036a14 	.word	0x20036a14
   18470:	200369fc 	.word	0x200369fc
   18474:	20034c98 	.word	0x20034c98
   18478:	0002331f 	.word	0x0002331f
   1847c:	0001887d 	.word	0x0001887d
   18480:	20034d10 	.word	0x20034d10

00018484 <bt_gatt_attr_get_handle>:
	if (!attr) {
   18484:	b328      	cbz	r0, 184d2 <bt_gatt_attr_get_handle+0x4e>
{
   18486:	b4f0      	push	{r4, r5, r6, r7}
   18488:	4606      	mov	r6, r0
	if (attr->handle) {
   1848a:	8a00      	ldrh	r0, [r0, #16]
   1848c:	bb20      	cbnz	r0, 184d8 <bt_gatt_attr_get_handle+0x54>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1848e:	4d13      	ldr	r5, [pc, #76]	; (184dc <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   18490:	2201      	movs	r2, #1
   18492:	e003      	b.n	1849c <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   18494:	686b      	ldr	r3, [r5, #4]
   18496:	441a      	add	r2, r3
   18498:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1849a:	3508      	adds	r5, #8
   1849c:	4b10      	ldr	r3, [pc, #64]	; (184e0 <bt_gatt_attr_get_handle+0x5c>)
   1849e:	429d      	cmp	r5, r3
   184a0:	d21a      	bcs.n	184d8 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   184a2:	682c      	ldr	r4, [r5, #0]
   184a4:	42b4      	cmp	r4, r6
   184a6:	d8f5      	bhi.n	18494 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   184a8:	686f      	ldr	r7, [r5, #4]
   184aa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   184ae:	009b      	lsls	r3, r3, #2
   184b0:	3b14      	subs	r3, #20
   184b2:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   184b4:	42b3      	cmp	r3, r6
   184b6:	d3ed      	bcc.n	18494 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   184b8:	2300      	movs	r3, #0
   184ba:	429f      	cmp	r7, r3
   184bc:	d9ed      	bls.n	1849a <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   184be:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   184c2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   184c6:	42b1      	cmp	r1, r6
   184c8:	d005      	beq.n	184d6 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   184ca:	3301      	adds	r3, #1
   184cc:	3201      	adds	r2, #1
   184ce:	b292      	uxth	r2, r2
   184d0:	e7f3      	b.n	184ba <bt_gatt_attr_get_handle+0x36>
		return 0;
   184d2:	2000      	movs	r0, #0
}
   184d4:	4770      	bx	lr
				return handle;
   184d6:	4610      	mov	r0, r2
}
   184d8:	bcf0      	pop	{r4, r5, r6, r7}
   184da:	4770      	bx	lr
   184dc:	00025444 	.word	0x00025444
   184e0:	0002545c 	.word	0x0002545c

000184e4 <bt_gatt_foreach_attr_type>:
{
   184e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184e8:	b089      	sub	sp, #36	; 0x24
   184ea:	4607      	mov	r7, r0
   184ec:	468a      	mov	sl, r1
   184ee:	4690      	mov	r8, r2
   184f0:	4699      	mov	r9, r3
   184f2:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   184f6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   184fa:	b91b      	cbnz	r3, 18504 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   184fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18500:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   18504:	4b19      	ldr	r3, [pc, #100]	; (1856c <bt_gatt_foreach_attr_type+0x88>)
   18506:	881b      	ldrh	r3, [r3, #0]
   18508:	42bb      	cmp	r3, r7
   1850a:	d22c      	bcs.n	18566 <bt_gatt_foreach_attr_type+0x82>
}
   1850c:	b009      	add	sp, #36	; 0x24
   1850e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   18512:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18514:	3608      	adds	r6, #8
   18516:	4b16      	ldr	r3, [pc, #88]	; (18570 <bt_gatt_foreach_attr_type+0x8c>)
   18518:	429e      	cmp	r6, r3
   1851a:	d2f7      	bcs.n	1850c <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   1851c:	6873      	ldr	r3, [r6, #4]
   1851e:	18e2      	adds	r2, r4, r3
   18520:	42ba      	cmp	r2, r7
   18522:	d3f6      	bcc.n	18512 <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   18524:	2500      	movs	r5, #0
   18526:	9707      	str	r7, [sp, #28]
   18528:	6873      	ldr	r3, [r6, #4]
   1852a:	42ab      	cmp	r3, r5
   1852c:	d919      	bls.n	18562 <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1852e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   18532:	f8cd b010 	str.w	fp, [sp, #16]
   18536:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18538:	9303      	str	r3, [sp, #12]
   1853a:	ab12      	add	r3, sp, #72	; 0x48
   1853c:	9302      	str	r3, [sp, #8]
   1853e:	f8cd 9004 	str.w	r9, [sp, #4]
   18542:	f8cd 8000 	str.w	r8, [sp]
   18546:	4653      	mov	r3, sl
   18548:	9a07      	ldr	r2, [sp, #28]
   1854a:	4621      	mov	r1, r4
   1854c:	6837      	ldr	r7, [r6, #0]
   1854e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   18552:	f00a fd5d 	bl	23010 <gatt_foreach_iter>
   18556:	2800      	cmp	r0, #0
   18558:	d0d8      	beq.n	1850c <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1855a:	3501      	adds	r5, #1
   1855c:	3401      	adds	r4, #1
   1855e:	b2a4      	uxth	r4, r4
   18560:	e7e2      	b.n	18528 <bt_gatt_foreach_attr_type+0x44>
   18562:	9f07      	ldr	r7, [sp, #28]
   18564:	e7d6      	b.n	18514 <bt_gatt_foreach_attr_type+0x30>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   18566:	4e03      	ldr	r6, [pc, #12]	; (18574 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   18568:	2401      	movs	r4, #1
   1856a:	e7d4      	b.n	18516 <bt_gatt_foreach_attr_type+0x32>
   1856c:	20038118 	.word	0x20038118
   18570:	0002545c 	.word	0x0002545c
   18574:	00025444 	.word	0x00025444

00018578 <db_hash_gen>:
{
   18578:	b510      	push	{r4, lr}
   1857a:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   1857c:	2300      	movs	r3, #0
   1857e:	9348      	str	r3, [sp, #288]	; 0x120
   18580:	9349      	str	r3, [sp, #292]	; 0x124
   18582:	934a      	str	r3, [sp, #296]	; 0x128
   18584:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   18586:	aa1c      	add	r2, sp, #112	; 0x70
   18588:	a948      	add	r1, sp, #288	; 0x120
   1858a:	a804      	add	r0, sp, #16
   1858c:	f008 fe0e 	bl	211ac <tc_cmac_setup>
   18590:	b190      	cbz	r0, 185b8 <db_hash_gen+0x40>
   18592:	ac04      	add	r4, sp, #16
   18594:	9402      	str	r4, [sp, #8]
   18596:	4b26      	ldr	r3, [pc, #152]	; (18630 <db_hash_gen+0xb8>)
   18598:	9301      	str	r3, [sp, #4]
   1859a:	2200      	movs	r2, #0
   1859c:	9200      	str	r2, [sp, #0]
   1859e:	4613      	mov	r3, r2
   185a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   185a4:	2001      	movs	r0, #1
   185a6:	f7ff ff9d 	bl	184e4 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   185aa:	4621      	mov	r1, r4
   185ac:	4821      	ldr	r0, [pc, #132]	; (18634 <db_hash_gen+0xbc>)
   185ae:	f008 fe98 	bl	212e2 <tc_cmac_final>
   185b2:	b190      	cbz	r0, 185da <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   185b4:	2300      	movs	r3, #0
   185b6:	e029      	b.n	1860c <db_hash_gen+0x94>
   185b8:	4b1f      	ldr	r3, [pc, #124]	; (18638 <db_hash_gen+0xc0>)
   185ba:	4a20      	ldr	r2, [pc, #128]	; (1863c <db_hash_gen+0xc4>)
   185bc:	1a9b      	subs	r3, r3, r2
   185be:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   185c0:	f04f 0100 	mov.w	r1, #0
   185c4:	2201      	movs	r2, #1
   185c6:	f362 0102 	bfi	r1, r2, #0, #3
   185ca:	f36f 01c5 	bfc	r1, #3, #3
   185ce:	f363 118f 	bfi	r1, r3, #6, #10
   185d2:	481b      	ldr	r0, [pc, #108]	; (18640 <db_hash_gen+0xc8>)
   185d4:	f7f8 fcfa 	bl	10fcc <log_0>
		return;
   185d8:	e027      	b.n	1862a <db_hash_gen+0xb2>
   185da:	4b17      	ldr	r3, [pc, #92]	; (18638 <db_hash_gen+0xc0>)
   185dc:	4a17      	ldr	r2, [pc, #92]	; (1863c <db_hash_gen+0xc4>)
   185de:	1a9b      	subs	r3, r3, r2
   185e0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   185e2:	f04f 0100 	mov.w	r1, #0
   185e6:	2201      	movs	r2, #1
   185e8:	f362 0102 	bfi	r1, r2, #0, #3
   185ec:	f36f 01c5 	bfc	r1, #3, #3
   185f0:	f363 118f 	bfi	r1, r3, #6, #10
   185f4:	4813      	ldr	r0, [pc, #76]	; (18644 <db_hash_gen+0xcc>)
   185f6:	f7f8 fce9 	bl	10fcc <log_0>
		return;
   185fa:	e016      	b.n	1862a <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   185fc:	4a0d      	ldr	r2, [pc, #52]	; (18634 <db_hash_gen+0xbc>)
   185fe:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   18600:	f1c3 010f 	rsb	r1, r3, #15
   18604:	5c54      	ldrb	r4, [r2, r1]
   18606:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   18608:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1860a:	3301      	adds	r3, #1
   1860c:	2b07      	cmp	r3, #7
   1860e:	d9f5      	bls.n	185fc <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18610:	4b0d      	ldr	r3, [pc, #52]	; (18648 <db_hash_gen+0xd0>)
   18612:	f3bf 8f5b 	dmb	ish
   18616:	e853 2f00 	ldrex	r2, [r3]
   1861a:	f042 0204 	orr.w	r2, r2, #4
   1861e:	e843 2100 	strex	r1, r2, [r3]
   18622:	2900      	cmp	r1, #0
   18624:	d1f7      	bne.n	18616 <db_hash_gen+0x9e>
   18626:	f3bf 8f5b 	dmb	ish
}
   1862a:	b04c      	add	sp, #304	; 0x130
   1862c:	bd10      	pop	{r4, pc}
   1862e:	bf00      	nop
   18630:	00022e43 	.word	0x00022e43
   18634:	20034c88 	.word	0x20034c88
   18638:	0002547c 	.word	0x0002547c
   1863c:	0002545c 	.word	0x0002545c
   18640:	00027344 	.word	0x00027344
   18644:	00027360 	.word	0x00027360
   18648:	20034d40 	.word	0x20034d40

0001864c <gatt_find_by_uuid>:
{
   1864c:	b510      	push	{r4, lr}
   1864e:	b084      	sub	sp, #16
   18650:	4604      	mov	r4, r0
   18652:	460a      	mov	r2, r1
	found->attr = NULL;
   18654:	2300      	movs	r3, #0
   18656:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   18658:	9002      	str	r0, [sp, #8]
   1865a:	4907      	ldr	r1, [pc, #28]	; (18678 <gatt_find_by_uuid+0x2c>)
   1865c:	9101      	str	r1, [sp, #4]
   1865e:	2101      	movs	r1, #1
   18660:	9100      	str	r1, [sp, #0]
   18662:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18666:	8880      	ldrh	r0, [r0, #4]
   18668:	f7ff ff3c 	bl	184e4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1866c:	6820      	ldr	r0, [r4, #0]
}
   1866e:	3800      	subs	r0, #0
   18670:	bf18      	it	ne
   18672:	2001      	movne	r0, #1
   18674:	b004      	add	sp, #16
   18676:	bd10      	pop	{r4, pc}
   18678:	00022e3b 	.word	0x00022e3b

0001867c <bt_gatt_attr_next>:
{
   1867c:	b510      	push	{r4, lr}
   1867e:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   18680:	2400      	movs	r4, #0
   18682:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   18684:	f7ff fefe 	bl	18484 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   18688:	3001      	adds	r0, #1
   1868a:	b280      	uxth	r0, r0
   1868c:	ab05      	add	r3, sp, #20
   1868e:	9302      	str	r3, [sp, #8]
   18690:	4b05      	ldr	r3, [pc, #20]	; (186a8 <bt_gatt_attr_next+0x2c>)
   18692:	9301      	str	r3, [sp, #4]
   18694:	9400      	str	r4, [sp, #0]
   18696:	4623      	mov	r3, r4
   18698:	4622      	mov	r2, r4
   1869a:	4601      	mov	r1, r0
   1869c:	f7ff ff22 	bl	184e4 <bt_gatt_foreach_attr_type>
}
   186a0:	9805      	ldr	r0, [sp, #20]
   186a2:	b006      	add	sp, #24
   186a4:	bd10      	pop	{r4, pc}
   186a6:	bf00      	nop
   186a8:	00022de3 	.word	0x00022de3

000186ac <gatt_indicate>:
{
   186ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   186b0:	b082      	sub	sp, #8
   186b2:	4606      	mov	r6, r0
   186b4:	460f      	mov	r7, r1
   186b6:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   186b8:	2214      	movs	r2, #20
   186ba:	6861      	ldr	r1, [r4, #4]
   186bc:	f00a fe34 	bl	23328 <bt_gatt_check_perm>
   186c0:	bb80      	cbnz	r0, 18724 <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   186c2:	8aa5      	ldrh	r5, [r4, #20]
   186c4:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   186c6:	9500      	str	r5, [sp, #0]
   186c8:	231d      	movs	r3, #29
   186ca:	2200      	movs	r2, #0
   186cc:	4621      	mov	r1, r4
   186ce:	482d      	ldr	r0, [pc, #180]	; (18784 <gatt_indicate+0xd8>)
   186d0:	f00a fcc9 	bl	23066 <gatt_req_alloc>
	if (!req) {
   186d4:	4680      	mov	r8, r0
   186d6:	2800      	cmp	r0, #0
   186d8:	d051      	beq.n	1877e <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   186da:	462a      	mov	r2, r5
   186dc:	211d      	movs	r1, #29
   186de:	4630      	mov	r0, r6
   186e0:	f7ff f948 	bl	17974 <bt_att_create_pdu>
	if (!buf) {
   186e4:	4681      	mov	r9, r0
   186e6:	b380      	cbz	r0, 1874a <gatt_indicate+0x9e>
   186e8:	f100 0a08 	add.w	sl, r0, #8
   186ec:	2102      	movs	r1, #2
   186ee:	4650      	mov	r0, sl
   186f0:	f00b f85d 	bl	237ae <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   186f4:	4605      	mov	r5, r0
   186f6:	f825 7b02 	strh.w	r7, [r5], #2
   186fa:	8aa1      	ldrh	r1, [r4, #20]
   186fc:	4650      	mov	r0, sl
   186fe:	f00b f856 	bl	237ae <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   18702:	8aa2      	ldrh	r2, [r4, #20]
   18704:	6921      	ldr	r1, [r4, #16]
   18706:	4628      	mov	r0, r5
   18708:	f008 ff0d 	bl	21526 <memcpy>
	req->buf = buf;
   1870c:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   18710:	4641      	mov	r1, r8
   18712:	4630      	mov	r0, r6
   18714:	f00a fb08 	bl	22d28 <bt_att_req_send>
	if (err) {
   18718:	4604      	mov	r4, r0
   1871a:	bb60      	cbnz	r0, 18776 <gatt_indicate+0xca>
}
   1871c:	4620      	mov	r0, r4
   1871e:	b002      	add	sp, #8
   18720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18724:	4b18      	ldr	r3, [pc, #96]	; (18788 <gatt_indicate+0xdc>)
   18726:	4a19      	ldr	r2, [pc, #100]	; (1878c <gatt_indicate+0xe0>)
   18728:	1a9b      	subs	r3, r3, r2
   1872a:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1872c:	f04f 0100 	mov.w	r1, #0
   18730:	2202      	movs	r2, #2
   18732:	f362 0102 	bfi	r1, r2, #0, #3
   18736:	f36f 01c5 	bfc	r1, #3, #3
   1873a:	f363 118f 	bfi	r1, r3, #6, #10
   1873e:	4814      	ldr	r0, [pc, #80]	; (18790 <gatt_indicate+0xe4>)
   18740:	f7f8 fc44 	bl	10fcc <log_0>
		return -EPERM;
   18744:	f04f 34ff 	mov.w	r4, #4294967295
   18748:	e7e8      	b.n	1871c <gatt_indicate+0x70>
   1874a:	4b0f      	ldr	r3, [pc, #60]	; (18788 <gatt_indicate+0xdc>)
   1874c:	4a0f      	ldr	r2, [pc, #60]	; (1878c <gatt_indicate+0xe0>)
   1874e:	1a9b      	subs	r3, r3, r2
   18750:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   18752:	f04f 0100 	mov.w	r1, #0
   18756:	2202      	movs	r2, #2
   18758:	f362 0102 	bfi	r1, r2, #0, #3
   1875c:	f36f 01c5 	bfc	r1, #3, #3
   18760:	f363 118f 	bfi	r1, r3, #6, #10
   18764:	480b      	ldr	r0, [pc, #44]	; (18794 <gatt_indicate+0xe8>)
   18766:	f7f8 fc31 	bl	10fcc <log_0>
		bt_att_req_free(req);
   1876a:	4640      	mov	r0, r8
   1876c:	f7ff fb56 	bl	17e1c <bt_att_req_free>
		return -ENOMEM;
   18770:	f06f 040b 	mvn.w	r4, #11
   18774:	e7d2      	b.n	1871c <gatt_indicate+0x70>
		bt_att_req_free(req);
   18776:	4640      	mov	r0, r8
   18778:	f7ff fb50 	bl	17e1c <bt_att_req_free>
   1877c:	e7ce      	b.n	1871c <gatt_indicate+0x70>
		return -ENOMEM;
   1877e:	f06f 040b 	mvn.w	r4, #11
   18782:	e7cb      	b.n	1871c <gatt_indicate+0x70>
   18784:	00022e19 	.word	0x00022e19
   18788:	0002547c 	.word	0x0002547c
   1878c:	0002545c 	.word	0x0002545c
   18790:	0002737c 	.word	0x0002737c
   18794:	00027394 	.word	0x00027394

00018798 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18798:	f3bf 8f5b 	dmb	ish
   1879c:	4b35      	ldr	r3, [pc, #212]	; (18874 <bt_gatt_indicate+0xdc>)
   1879e:	681b      	ldr	r3, [r3, #0]
   187a0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   187a4:	f013 0f02 	tst.w	r3, #2
   187a8:	d05e      	beq.n	18868 <bt_gatt_indicate+0xd0>
{
   187aa:	b530      	push	{r4, r5, lr}
   187ac:	b08d      	sub	sp, #52	; 0x34
   187ae:	4605      	mov	r5, r0
   187b0:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   187b2:	b110      	cbz	r0, 187ba <bt_gatt_indicate+0x22>
   187b4:	7a83      	ldrb	r3, [r0, #10]
   187b6:	2b07      	cmp	r3, #7
   187b8:	d159      	bne.n	1886e <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   187ba:	6860      	ldr	r0, [r4, #4]
   187bc:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   187be:	f7ff fe61 	bl	18484 <bt_gatt_attr_get_handle>
   187c2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   187c6:	6821      	ldr	r1, [r4, #0]
   187c8:	b341      	cbz	r1, 1881c <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   187ca:	a805      	add	r0, sp, #20
   187cc:	f7ff ff3e 	bl	1864c <gatt_find_by_uuid>
   187d0:	b308      	cbz	r0, 18816 <bt_gatt_indicate+0x7e>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   187d2:	9b05      	ldr	r3, [sp, #20]
   187d4:	6818      	ldr	r0, [r3, #0]
   187d6:	2300      	movs	r3, #0
   187d8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   187dc:	f642 0303 	movw	r3, #10243	; 0x2803
   187e0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   187e4:	a90b      	add	r1, sp, #44	; 0x2c
   187e6:	f008 ff13 	bl	21610 <bt_uuid_cmp>
   187ea:	b948      	cbnz	r0, 18800 <bt_gatt_indicate+0x68>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   187ec:	9805      	ldr	r0, [sp, #20]
   187ee:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   187f0:	799b      	ldrb	r3, [r3, #6]
   187f2:	f013 0f20 	tst.w	r3, #32
   187f6:	d016      	beq.n	18826 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   187f8:	f00a fd42 	bl	23280 <bt_gatt_attr_value_handle>
   187fc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   18800:	b1a5      	cbz	r5, 1882c <bt_gatt_indicate+0x94>
		params->_ref = 1;
   18802:	2301      	movs	r3, #1
   18804:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   18806:	4622      	mov	r2, r4
   18808:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1880c:	4628      	mov	r0, r5
   1880e:	f7ff ff4d 	bl	186ac <gatt_indicate>
}
   18812:	b00d      	add	sp, #52	; 0x34
   18814:	bd30      	pop	{r4, r5, pc}
			return -ENOENT;
   18816:	f06f 0001 	mvn.w	r0, #1
   1881a:	e7fa      	b.n	18812 <bt_gatt_indicate+0x7a>
		if (!data.handle) {
   1881c:	2800      	cmp	r0, #0
   1881e:	d1d8      	bne.n	187d2 <bt_gatt_indicate+0x3a>
			return -ENOENT;
   18820:	f06f 0001 	mvn.w	r0, #1
   18824:	e7f5      	b.n	18812 <bt_gatt_indicate+0x7a>
			return -EINVAL;
   18826:	f06f 0015 	mvn.w	r0, #21
   1882a:	e7f2      	b.n	18812 <bt_gatt_indicate+0x7a>
	data.err = -ENOTCONN;
   1882c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18830:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   18832:	2302      	movs	r3, #2
   18834:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   18838:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1883a:	2300      	movs	r3, #0
   1883c:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1883e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   18842:	f642 1202 	movw	r2, #10498	; 0x2902
   18846:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1884a:	aa05      	add	r2, sp, #20
   1884c:	9202      	str	r2, [sp, #8]
   1884e:	4a0a      	ldr	r2, [pc, #40]	; (18878 <bt_gatt_indicate+0xe0>)
   18850:	9201      	str	r2, [sp, #4]
   18852:	2201      	movs	r2, #1
   18854:	9200      	str	r2, [sp, #0]
   18856:	aa0a      	add	r2, sp, #40	; 0x28
   18858:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1885c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   18860:	f7ff fe40 	bl	184e4 <bt_gatt_foreach_attr_type>
	return data.err;
   18864:	9807      	ldr	r0, [sp, #28]
   18866:	e7d4      	b.n	18812 <bt_gatt_indicate+0x7a>
		return -EAGAIN;
   18868:	f06f 000a 	mvn.w	r0, #10
}
   1886c:	4770      	bx	lr
		return -ENOTCONN;
   1886e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18872:	e7ce      	b.n	18812 <bt_gatt_indicate+0x7a>
   18874:	20000350 	.word	0x20000350
   18878:	00018b25 	.word	0x00018b25

0001887c <sc_process>:
{
   1887c:	b510      	push	{r4, lr}
   1887e:	b082      	sub	sp, #8
   18880:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   18882:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   18886:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1888a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1888e:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   18892:	f1a0 0120 	sub.w	r1, r0, #32
   18896:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1889a:	f3bf 8f5b 	dmb	ish
   1889e:	e854 2f00 	ldrex	r2, [r4]
   188a2:	f022 0201 	bic.w	r2, r2, #1
   188a6:	e844 2000 	strex	r0, r2, [r4]
   188aa:	2800      	cmp	r0, #0
   188ac:	d1f7      	bne.n	1889e <sc_process+0x22>
   188ae:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   188b2:	2000      	movs	r0, #0
   188b4:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   188b8:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   188bc:	4a0e      	ldr	r2, [pc, #56]	; (188f8 <sc_process+0x7c>)
   188be:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   188c2:	4a0e      	ldr	r2, [pc, #56]	; (188fc <sc_process+0x80>)
   188c4:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   188c8:	aa01      	add	r2, sp, #4
   188ca:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   188ce:	2204      	movs	r2, #4
   188d0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   188d4:	f7ff ff60 	bl	18798 <bt_gatt_indicate>
   188d8:	b108      	cbz	r0, 188de <sc_process+0x62>
}
   188da:	b002      	add	sp, #8
   188dc:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   188de:	f3bf 8f5b 	dmb	ish
   188e2:	e854 3f00 	ldrex	r3, [r4]
   188e6:	f043 0302 	orr.w	r3, r3, #2
   188ea:	e844 3200 	strex	r2, r3, [r4]
   188ee:	2a00      	cmp	r2, #0
   188f0:	d1f7      	bne.n	188e2 <sc_process+0x66>
   188f2:	f3bf 8f5b 	dmb	ish
   188f6:	e7f0      	b.n	188da <sc_process+0x5e>
   188f8:	00027454 	.word	0x00027454
   188fc:	000182e5 	.word	0x000182e5

00018900 <sc_restore>:
{
   18900:	b530      	push	{r4, r5, lr}
   18902:	b083      	sub	sp, #12
   18904:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   18906:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1890a:	7a00      	ldrb	r0, [r0, #8]
   1890c:	f7ff fb8c 	bl	18028 <find_sc_cfg>
	if (!cfg) {
   18910:	b308      	cbz	r0, 18956 <sc_restore+0x56>
   18912:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
   18914:	8903      	ldrh	r3, [r0, #8]
   18916:	b90b      	cbnz	r3, 1891c <sc_restore+0x1c>
   18918:	8942      	ldrh	r2, [r0, #10]
   1891a:	b1e2      	cbz	r2, 18956 <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1891c:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18920:	896b      	ldrh	r3, [r5, #10]
   18922:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   18926:	4620      	mov	r0, r4
   18928:	f7fd fe28 	bl	1657c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1892c:	4913      	ldr	r1, [pc, #76]	; (1897c <sc_restore+0x7c>)
   1892e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18932:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   18936:	4a12      	ldr	r2, [pc, #72]	; (18980 <sc_restore+0x80>)
   18938:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1893a:	4a12      	ldr	r2, [pc, #72]	; (18984 <sc_restore+0x84>)
   1893c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1893e:	aa01      	add	r2, sp, #4
   18940:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18942:	2204      	movs	r2, #4
   18944:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18946:	4619      	mov	r1, r3
   18948:	4620      	mov	r0, r4
   1894a:	f7ff ff25 	bl	18798 <bt_gatt_indicate>
   1894e:	b920      	cbnz	r0, 1895a <sc_restore+0x5a>
	sc_reset(cfg);
   18950:	4628      	mov	r0, r5
   18952:	f00a fb56 	bl	23002 <sc_reset>
}
   18956:	b003      	add	sp, #12
   18958:	bd30      	pop	{r4, r5, pc}
   1895a:	4b0b      	ldr	r3, [pc, #44]	; (18988 <sc_restore+0x88>)
   1895c:	4a0b      	ldr	r2, [pc, #44]	; (1898c <sc_restore+0x8c>)
   1895e:	1a9b      	subs	r3, r3, r2
   18960:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   18962:	f04f 0100 	mov.w	r1, #0
   18966:	2201      	movs	r2, #1
   18968:	f362 0102 	bfi	r1, r2, #0, #3
   1896c:	f36f 01c5 	bfc	r1, #3, #3
   18970:	f363 118f 	bfi	r1, r3, #6, #10
   18974:	4806      	ldr	r0, [pc, #24]	; (18990 <sc_restore+0x90>)
   18976:	f7f8 fb29 	bl	10fcc <log_0>
   1897a:	e7e9      	b.n	18950 <sc_restore+0x50>
   1897c:	20036a24 	.word	0x20036a24
   18980:	00027454 	.word	0x00027454
   18984:	00022f23 	.word	0x00022f23
   18988:	0002547c 	.word	0x0002547c
   1898c:	0002545c 	.word	0x0002545c
   18990:	000273bc 	.word	0x000273bc

00018994 <gatt_notify>:
{
   18994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18998:	4606      	mov	r6, r0
   1899a:	460f      	mov	r7, r1
   1899c:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1899e:	2214      	movs	r2, #20
   189a0:	6861      	ldr	r1, [r4, #4]
   189a2:	f00a fcc1 	bl	23328 <bt_gatt_check_perm>
   189a6:	bb08      	cbnz	r0, 189ec <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   189a8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   189aa:	3202      	adds	r2, #2
   189ac:	211b      	movs	r1, #27
   189ae:	4630      	mov	r0, r6
   189b0:	f7fe ffe0 	bl	17974 <bt_att_create_pdu>
	if (!buf) {
   189b4:	4680      	mov	r8, r0
   189b6:	b360      	cbz	r0, 18a12 <gatt_notify+0x7e>
   189b8:	f100 0908 	add.w	r9, r0, #8
   189bc:	2102      	movs	r1, #2
   189be:	4648      	mov	r0, r9
   189c0:	f00a fef5 	bl	237ae <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   189c4:	4605      	mov	r5, r0
   189c6:	f825 7b02 	strh.w	r7, [r5], #2
   189ca:	89a1      	ldrh	r1, [r4, #12]
   189cc:	4648      	mov	r0, r9
   189ce:	f00a feee 	bl	237ae <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   189d2:	89a2      	ldrh	r2, [r4, #12]
   189d4:	68a1      	ldr	r1, [r4, #8]
   189d6:	4628      	mov	r0, r5
   189d8:	f008 fda5 	bl	21526 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   189dc:	6963      	ldr	r3, [r4, #20]
   189de:	6922      	ldr	r2, [r4, #16]
   189e0:	4641      	mov	r1, r8
   189e2:	4630      	mov	r0, r6
   189e4:	f00a f97b 	bl	22cde <bt_att_send>
}
   189e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   189ec:	4b12      	ldr	r3, [pc, #72]	; (18a38 <gatt_notify+0xa4>)
   189ee:	4a13      	ldr	r2, [pc, #76]	; (18a3c <gatt_notify+0xa8>)
   189f0:	1a9b      	subs	r3, r3, r2
   189f2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   189f4:	f04f 0100 	mov.w	r1, #0
   189f8:	2202      	movs	r2, #2
   189fa:	f362 0102 	bfi	r1, r2, #0, #3
   189fe:	f36f 01c5 	bfc	r1, #3, #3
   18a02:	f363 118f 	bfi	r1, r3, #6, #10
   18a06:	480e      	ldr	r0, [pc, #56]	; (18a40 <gatt_notify+0xac>)
   18a08:	f7f8 fae0 	bl	10fcc <log_0>
		return -EPERM;
   18a0c:	f04f 30ff 	mov.w	r0, #4294967295
   18a10:	e7ea      	b.n	189e8 <gatt_notify+0x54>
   18a12:	4b09      	ldr	r3, [pc, #36]	; (18a38 <gatt_notify+0xa4>)
   18a14:	4a09      	ldr	r2, [pc, #36]	; (18a3c <gatt_notify+0xa8>)
   18a16:	1a9b      	subs	r3, r3, r2
   18a18:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   18a1a:	f04f 0100 	mov.w	r1, #0
   18a1e:	2202      	movs	r2, #2
   18a20:	f362 0102 	bfi	r1, r2, #0, #3
   18a24:	f36f 01c5 	bfc	r1, #3, #3
   18a28:	f363 118f 	bfi	r1, r3, #6, #10
   18a2c:	4805      	ldr	r0, [pc, #20]	; (18a44 <gatt_notify+0xb0>)
   18a2e:	f7f8 facd 	bl	10fcc <log_0>
		return -ENOMEM;
   18a32:	f06f 000b 	mvn.w	r0, #11
   18a36:	e7d7      	b.n	189e8 <gatt_notify+0x54>
   18a38:	0002547c 	.word	0x0002547c
   18a3c:	0002545c 	.word	0x0002545c
   18a40:	0002737c 	.word	0x0002737c
   18a44:	000273dc 	.word	0x000273dc

00018a48 <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18a48:	f3bf 8f5b 	dmb	ish
   18a4c:	4b33      	ldr	r3, [pc, #204]	; (18b1c <bt_gatt_notify_cb+0xd4>)
   18a4e:	681b      	ldr	r3, [r3, #0]
   18a50:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18a54:	f013 0f02 	tst.w	r3, #2
   18a58:	d05a      	beq.n	18b10 <bt_gatt_notify_cb+0xc8>
{
   18a5a:	b530      	push	{r4, r5, lr}
   18a5c:	b08d      	sub	sp, #52	; 0x34
   18a5e:	4604      	mov	r4, r0
   18a60:	460d      	mov	r5, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18a62:	b110      	cbz	r0, 18a6a <bt_gatt_notify_cb+0x22>
   18a64:	7a83      	ldrb	r3, [r0, #10]
   18a66:	2b07      	cmp	r3, #7
   18a68:	d155      	bne.n	18b16 <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
   18a6a:	6868      	ldr	r0, [r5, #4]
   18a6c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18a6e:	f7ff fd09 	bl	18484 <bt_gatt_attr_get_handle>
   18a72:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   18a76:	6829      	ldr	r1, [r5, #0]
   18a78:	b331      	cbz	r1, 18ac8 <bt_gatt_notify_cb+0x80>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   18a7a:	a805      	add	r0, sp, #20
   18a7c:	f7ff fde6 	bl	1864c <gatt_find_by_uuid>
   18a80:	b1f8      	cbz	r0, 18ac2 <bt_gatt_notify_cb+0x7a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   18a82:	9b05      	ldr	r3, [sp, #20]
   18a84:	6818      	ldr	r0, [r3, #0]
   18a86:	2300      	movs	r3, #0
   18a88:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   18a8c:	f642 0303 	movw	r3, #10243	; 0x2803
   18a90:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   18a94:	a90b      	add	r1, sp, #44	; 0x2c
   18a96:	f008 fdbb 	bl	21610 <bt_uuid_cmp>
   18a9a:	b948      	cbnz	r0, 18ab0 <bt_gatt_notify_cb+0x68>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   18a9c:	9805      	ldr	r0, [sp, #20]
   18a9e:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   18aa0:	799b      	ldrb	r3, [r3, #6]
   18aa2:	f013 0f10 	tst.w	r3, #16
   18aa6:	d014      	beq.n	18ad2 <bt_gatt_notify_cb+0x8a>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   18aa8:	f00a fbea 	bl	23280 <bt_gatt_attr_value_handle>
   18aac:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   18ab0:	b194      	cbz	r4, 18ad8 <bt_gatt_notify_cb+0x90>
		return gatt_notify(conn, data.handle, params);
   18ab2:	462a      	mov	r2, r5
   18ab4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   18ab8:	4620      	mov	r0, r4
   18aba:	f7ff ff6b 	bl	18994 <gatt_notify>
}
   18abe:	b00d      	add	sp, #52	; 0x34
   18ac0:	bd30      	pop	{r4, r5, pc}
			return -ENOENT;
   18ac2:	f06f 0001 	mvn.w	r0, #1
   18ac6:	e7fa      	b.n	18abe <bt_gatt_notify_cb+0x76>
		if (!data.handle) {
   18ac8:	2800      	cmp	r0, #0
   18aca:	d1da      	bne.n	18a82 <bt_gatt_notify_cb+0x3a>
			return -ENOENT;
   18acc:	f06f 0001 	mvn.w	r0, #1
   18ad0:	e7f5      	b.n	18abe <bt_gatt_notify_cb+0x76>
			return -EINVAL;
   18ad2:	f06f 0015 	mvn.w	r0, #21
   18ad6:	e7f2      	b.n	18abe <bt_gatt_notify_cb+0x76>
	data.err = -ENOTCONN;
   18ad8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   18adc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   18ade:	2201      	movs	r2, #1
   18ae0:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   18ae4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   18ae6:	2300      	movs	r3, #0
   18ae8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   18aec:	f642 1102 	movw	r1, #10498	; 0x2902
   18af0:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   18af4:	a905      	add	r1, sp, #20
   18af6:	9102      	str	r1, [sp, #8]
   18af8:	4909      	ldr	r1, [pc, #36]	; (18b20 <bt_gatt_notify_cb+0xd8>)
   18afa:	9101      	str	r1, [sp, #4]
   18afc:	9200      	str	r2, [sp, #0]
   18afe:	aa0a      	add	r2, sp, #40	; 0x28
   18b00:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18b04:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   18b08:	f7ff fcec 	bl	184e4 <bt_gatt_foreach_attr_type>
	return data.err;
   18b0c:	9807      	ldr	r0, [sp, #28]
   18b0e:	e7d6      	b.n	18abe <bt_gatt_notify_cb+0x76>
		return -EAGAIN;
   18b10:	f06f 000a 	mvn.w	r0, #10
}
   18b14:	4770      	bx	lr
		return -ENOTCONN;
   18b16:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18b1a:	e7d0      	b.n	18abe <bt_gatt_notify_cb+0x76>
   18b1c:	20000350 	.word	0x20000350
   18b20:	00018b25 	.word	0x00018b25

00018b24 <notify_cb>:
{
   18b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b28:	b083      	sub	sp, #12
   18b2a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18b2c:	6882      	ldr	r2, [r0, #8]
   18b2e:	4b50      	ldr	r3, [pc, #320]	; (18c70 <notify_cb+0x14c>)
   18b30:	429a      	cmp	r2, r3
   18b32:	d005      	beq.n	18b40 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   18b34:	f04f 0a01 	mov.w	sl, #1
}
   18b38:	4650      	mov	r0, sl
   18b3a:	b003      	add	sp, #12
   18b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b40:	4607      	mov	r7, r0
	ccc = attr->user_data;
   18b42:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18b44:	4b4b      	ldr	r3, [pc, #300]	; (18c74 <notify_cb+0x150>)
   18b46:	429d      	cmp	r5, r3
   18b48:	d031      	beq.n	18bae <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18b4a:	2400      	movs	r4, #0
   18b4c:	e05c      	b.n	18c08 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   18b4e:	6933      	ldr	r3, [r6, #16]
   18b50:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   18b52:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18b56:	8853      	ldrh	r3, [r2, #2]
   18b58:	8812      	ldrh	r2, [r2, #0]
   18b5a:	4649      	mov	r1, r9
   18b5c:	f8df c118 	ldr.w	ip, [pc, #280]	; 18c78 <notify_cb+0x154>
   18b60:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   18b64:	f7ff fada 	bl	1811c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18b68:	3401      	adds	r4, #1
   18b6a:	2c00      	cmp	r4, #0
   18b6c:	d1ed      	bne.n	18b4a <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   18b6e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   18b72:	4b41      	ldr	r3, [pc, #260]	; (18c78 <notify_cb+0x154>)
   18b74:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   18b78:	f109 0901 	add.w	r9, r9, #1
   18b7c:	2300      	movs	r3, #0
   18b7e:	9300      	str	r3, [sp, #0]
   18b80:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18b84:	2207      	movs	r2, #7
   18b86:	4669      	mov	r1, sp
   18b88:	4648      	mov	r0, r9
   18b8a:	f008 fc9f 	bl	214cc <memcmp>
   18b8e:	2800      	cmp	r0, #0
   18b90:	d0ea      	beq.n	18b68 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   18b92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18b96:	2207      	movs	r2, #7
   18b98:	4649      	mov	r1, r9
   18b9a:	4837      	ldr	r0, [pc, #220]	; (18c78 <notify_cb+0x154>)
   18b9c:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   18ba0:	f7fd fdf8 	bl	16794 <bt_conn_lookup_state_le>
			if (!conn) {
   18ba4:	2800      	cmp	r0, #0
   18ba6:	d0d2      	beq.n	18b4e <notify_cb+0x2a>
			bt_conn_unref(conn);
   18ba8:	f009 f96c 	bl	21e84 <bt_conn_unref>
   18bac:	e7dc      	b.n	18b68 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18bae:	2400      	movs	r4, #0
   18bb0:	e7db      	b.n	18b6a <notify_cb+0x46>
			bt_conn_unref(conn);
   18bb2:	f009 f967 	bl	21e84 <bt_conn_unref>
			continue;
   18bb6:	e026      	b.n	18c06 <notify_cb+0xe2>
			bt_conn_unref(conn);
   18bb8:	4648      	mov	r0, r9
   18bba:	f009 f963 	bl	21e84 <bt_conn_unref>
			continue;
   18bbe:	e022      	b.n	18c06 <notify_cb+0xe2>
   18bc0:	4b2e      	ldr	r3, [pc, #184]	; (18c7c <notify_cb+0x158>)
   18bc2:	4a2f      	ldr	r2, [pc, #188]	; (18c80 <notify_cb+0x15c>)
   18bc4:	1a9b      	subs	r3, r3, r2
   18bc6:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   18bc8:	2202      	movs	r2, #2
   18bca:	f362 0802 	bfi	r8, r2, #0, #3
   18bce:	f36f 08c5 	bfc	r8, #3, #3
   18bd2:	f363 188f 	bfi	r8, r3, #6, #10
   18bd6:	4641      	mov	r1, r8
   18bd8:	482a      	ldr	r0, [pc, #168]	; (18c84 <notify_cb+0x160>)
   18bda:	f7f8 f9f7 	bl	10fcc <log_0>
			continue;
   18bde:	e012      	b.n	18c06 <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   18be0:	6932      	ldr	r2, [r6, #16]
   18be2:	88b1      	ldrh	r1, [r6, #4]
   18be4:	4648      	mov	r0, r9
   18be6:	f7ff fd61 	bl	186ac <gatt_indicate>
			if (err == 0) {
   18bea:	4683      	mov	fp, r0
   18bec:	b918      	cbnz	r0, 18bf6 <notify_cb+0xd2>
				data->ind_params->_ref++;
   18bee:	6932      	ldr	r2, [r6, #16]
   18bf0:	7d93      	ldrb	r3, [r2, #22]
   18bf2:	3301      	adds	r3, #1
   18bf4:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18bf6:	4648      	mov	r0, r9
   18bf8:	f009 f944 	bl	21e84 <bt_conn_unref>
		if (err < 0) {
   18bfc:	f1bb 0f00 	cmp.w	fp, #0
   18c00:	db9a      	blt.n	18b38 <notify_cb+0x14>
		data->err = 0;
   18c02:	2300      	movs	r3, #0
   18c04:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18c06:	3401      	adds	r4, #1
   18c08:	bb74      	cbnz	r4, 18c68 <notify_cb+0x144>
		if (cfg->value != data->type) {
   18c0a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18c0e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   18c12:	891a      	ldrh	r2, [r3, #8]
   18c14:	89b3      	ldrh	r3, [r6, #12]
   18c16:	429a      	cmp	r2, r3
   18c18:	d1f5      	bne.n	18c06 <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18c1a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   18c1e:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   18c22:	3101      	adds	r1, #1
   18c24:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   18c28:	f7fd fd3c 	bl	166a4 <bt_conn_lookup_addr_le>
		if (!conn) {
   18c2c:	4681      	mov	r9, r0
   18c2e:	2800      	cmp	r0, #0
   18c30:	d0e9      	beq.n	18c06 <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   18c32:	7a83      	ldrb	r3, [r0, #10]
   18c34:	2b07      	cmp	r3, #7
   18c36:	d1bc      	bne.n	18bb2 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18c38:	696b      	ldr	r3, [r5, #20]
   18c3a:	b11b      	cbz	r3, 18c44 <notify_cb+0x120>
   18c3c:	4639      	mov	r1, r7
   18c3e:	4798      	blx	r3
   18c40:	2800      	cmp	r0, #0
   18c42:	d0b9      	beq.n	18bb8 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   18c44:	2214      	movs	r2, #20
   18c46:	4639      	mov	r1, r7
   18c48:	4648      	mov	r0, r9
   18c4a:	f00a fb6d 	bl	23328 <bt_gatt_check_perm>
   18c4e:	4682      	mov	sl, r0
   18c50:	2800      	cmp	r0, #0
   18c52:	d1b5      	bne.n	18bc0 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   18c54:	89b3      	ldrh	r3, [r6, #12]
   18c56:	2b02      	cmp	r3, #2
   18c58:	d0c2      	beq.n	18be0 <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18c5a:	6932      	ldr	r2, [r6, #16]
   18c5c:	88b1      	ldrh	r1, [r6, #4]
   18c5e:	4648      	mov	r0, r9
   18c60:	f7ff fe98 	bl	18994 <gatt_notify>
   18c64:	4683      	mov	fp, r0
   18c66:	e7c6      	b.n	18bf6 <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   18c68:	f04f 0a01 	mov.w	sl, #1
   18c6c:	e764      	b.n	18b38 <notify_cb+0x14>
   18c6e:	bf00      	nop
   18c70:	000181a5 	.word	0x000181a5
   18c74:	20033a34 	.word	0x20033a34
   18c78:	20036a18 	.word	0x20036a18
   18c7c:	0002547c 	.word	0x0002547c
   18c80:	0002545c 	.word	0x0002545c
   18c84:	0002737c 	.word	0x0002737c

00018c88 <update_ccc>:
{
   18c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   18c8c:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   18c8e:	6882      	ldr	r2, [r0, #8]
   18c90:	4b20      	ldr	r3, [pc, #128]	; (18d14 <update_ccc+0x8c>)
   18c92:	429a      	cmp	r2, r3
   18c94:	d002      	beq.n	18c9c <update_ccc+0x14>
}
   18c96:	2001      	movs	r0, #1
   18c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c9c:	4604      	mov	r4, r0
	ccc = attr->user_data;
   18c9e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18ca2:	2500      	movs	r5, #0
   18ca4:	2d00      	cmp	r5, #0
   18ca6:	d1f6      	bne.n	18c96 <update_ccc+0xe>
		if (!cfg->value ||
   18ca8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   18cac:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   18cb0:	891b      	ldrh	r3, [r3, #8]
   18cb2:	b36b      	cbz	r3, 18d10 <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18cb4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   18cb8:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   18cbc:	3201      	adds	r2, #1
   18cbe:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   18cc2:	4638      	mov	r0, r7
   18cc4:	f009 f947 	bl	21f56 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   18cc8:	b310      	cbz	r0, 18d10 <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   18cca:	222a      	movs	r2, #42	; 0x2a
   18ccc:	4621      	mov	r1, r4
   18cce:	4638      	mov	r0, r7
   18cd0:	f00a fb2a 	bl	23328 <bt_gatt_check_perm>
		if (err) {
   18cd4:	b108      	cbz	r0, 18cda <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   18cd6:	2803      	cmp	r0, #3
   18cd8:	d00a      	beq.n	18cf0 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   18cda:	4641      	mov	r1, r8
   18cdc:	4620      	mov	r0, r4
   18cde:	f00a f883 	bl	22de8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   18ce2:	4b0d      	ldr	r3, [pc, #52]	; (18d18 <update_ccc+0x90>)
   18ce4:	4598      	cmp	r8, r3
   18ce6:	d1d6      	bne.n	18c96 <update_ccc+0xe>
			sc_restore(conn);
   18ce8:	4638      	mov	r0, r7
   18cea:	f7ff fe09 	bl	18900 <sc_restore>
   18cee:	e7d2      	b.n	18c96 <update_ccc+0xe>
   18cf0:	4b0a      	ldr	r3, [pc, #40]	; (18d1c <update_ccc+0x94>)
   18cf2:	4a0b      	ldr	r2, [pc, #44]	; (18d20 <update_ccc+0x98>)
   18cf4:	1a9b      	subs	r3, r3, r2
   18cf6:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   18cf8:	2202      	movs	r2, #2
   18cfa:	f362 0602 	bfi	r6, r2, #0, #3
   18cfe:	f36f 06c5 	bfc	r6, #3, #3
   18d02:	f363 168f 	bfi	r6, r3, #6, #10
   18d06:	4632      	mov	r2, r6
   18d08:	4621      	mov	r1, r4
   18d0a:	4806      	ldr	r0, [pc, #24]	; (18d24 <update_ccc+0x9c>)
   18d0c:	f7f8 f8a8 	bl	10e60 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18d10:	3501      	adds	r5, #1
   18d12:	e7c7      	b.n	18ca4 <update_ccc+0x1c>
   18d14:	000181a5 	.word	0x000181a5
   18d18:	20033a34 	.word	0x20033a34
   18d1c:	0002547c 	.word	0x0002547c
   18d20:	0002545c 	.word	0x0002545c
   18d24:	00027408 	.word	0x00027408

00018d28 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   18d28:	b500      	push	{lr}
   18d2a:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   18d2c:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   18d2e:	2001      	movs	r0, #1
   18d30:	f88d 0014 	strb.w	r0, [sp, #20]
   18d34:	ab04      	add	r3, sp, #16
   18d36:	9302      	str	r3, [sp, #8]
   18d38:	4b05      	ldr	r3, [pc, #20]	; (18d50 <bt_gatt_connected+0x28>)
   18d3a:	9301      	str	r3, [sp, #4]
   18d3c:	2200      	movs	r2, #0
   18d3e:	9200      	str	r2, [sp, #0]
   18d40:	4613      	mov	r3, r2
   18d42:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d46:	f7ff fbcd 	bl	184e4 <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   18d4a:	b007      	add	sp, #28
   18d4c:	f85d fb04 	ldr.w	pc, [sp], #4
   18d50:	00018c89 	.word	0x00018c89

00018d54 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d56:	4605      	mov	r5, r0
   18d58:	460e      	mov	r6, r1
   18d5a:	4617      	mov	r7, r2
	return list->head;
   18d5c:	4b0a      	ldr	r3, [pc, #40]	; (18d88 <bt_gatt_att_max_mtu_changed+0x34>)
   18d5e:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18d60:	b134      	cbz	r4, 18d70 <bt_gatt_att_max_mtu_changed+0x1c>
   18d62:	3c04      	subs	r4, #4
   18d64:	e004      	b.n	18d70 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18d66:	1d23      	adds	r3, r4, #4
   18d68:	d00b      	beq.n	18d82 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   18d6a:	6864      	ldr	r4, [r4, #4]
   18d6c:	b15c      	cbz	r4, 18d86 <bt_gatt_att_max_mtu_changed+0x32>
   18d6e:	3c04      	subs	r4, #4
   18d70:	b14c      	cbz	r4, 18d86 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   18d72:	6823      	ldr	r3, [r4, #0]
   18d74:	2b00      	cmp	r3, #0
   18d76:	d0f6      	beq.n	18d66 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   18d78:	463a      	mov	r2, r7
   18d7a:	4631      	mov	r1, r6
   18d7c:	4628      	mov	r0, r5
   18d7e:	4798      	blx	r3
   18d80:	e7f1      	b.n	18d66 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18d82:	461c      	mov	r4, r3
   18d84:	e7f4      	b.n	18d70 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   18d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d88:	200369fc 	.word	0x200369fc

00018d8c <db_hash_read>:
{
   18d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d8e:	b085      	sub	sp, #20
   18d90:	4604      	mov	r4, r0
   18d92:	460d      	mov	r5, r1
   18d94:	4616      	mov	r6, r2
   18d96:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   18d98:	4812      	ldr	r0, [pc, #72]	; (18de4 <db_hash_read+0x58>)
   18d9a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   18d9e:	3010      	adds	r0, #16
   18da0:	f00b fe7b 	bl	24a9a <k_work_cancel_delayable_sync>
   18da4:	f3bf 8f5b 	dmb	ish
   18da8:	4b0f      	ldr	r3, [pc, #60]	; (18de8 <db_hash_read+0x5c>)
   18daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   18dac:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   18db0:	f013 0f04 	tst.w	r3, #4
   18db4:	d012      	beq.n	18ddc <db_hash_read+0x50>
	bt_gatt_change_aware(conn, true);
   18db6:	2101      	movs	r1, #1
   18db8:	4620      	mov	r0, r4
   18dba:	f00a fb39 	bl	23430 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18dbe:	2310      	movs	r3, #16
   18dc0:	9302      	str	r3, [sp, #8]
   18dc2:	4b08      	ldr	r3, [pc, #32]	; (18de4 <db_hash_read+0x58>)
   18dc4:	9301      	str	r3, [sp, #4]
   18dc6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18dca:	9300      	str	r3, [sp, #0]
   18dcc:	463b      	mov	r3, r7
   18dce:	4632      	mov	r2, r6
   18dd0:	4629      	mov	r1, r5
   18dd2:	4620      	mov	r0, r4
   18dd4:	f00a f998 	bl	23108 <bt_gatt_attr_read>
}
   18dd8:	b005      	add	sp, #20
   18dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   18ddc:	2001      	movs	r0, #1
   18dde:	f7ff fbcb 	bl	18578 <db_hash_gen>
   18de2:	e7e8      	b.n	18db6 <db_hash_read+0x2a>
   18de4:	20034c88 	.word	0x20034c88
   18de8:	20034cf0 	.word	0x20034cf0

00018dec <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18dec:	b510      	push	{r4, lr}
   18dee:	b084      	sub	sp, #16
   18df0:	4604      	mov	r4, r0
   18df2:	9002      	str	r0, [sp, #8]
   18df4:	4b07      	ldr	r3, [pc, #28]	; (18e14 <bt_gatt_disconnected+0x28>)
   18df6:	9301      	str	r3, [sp, #4]
   18df8:	2200      	movs	r2, #0
   18dfa:	9200      	str	r2, [sp, #0]
   18dfc:	4613      	mov	r3, r2
   18dfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e02:	2001      	movs	r0, #1
   18e04:	f7ff fb6e 	bl	184e4 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   18e08:	4620      	mov	r0, r4
   18e0a:	f00a f959 	bl	230c0 <remove_cf_cfg>
#endif
}
   18e0e:	b004      	add	sp, #16
   18e10:	bd10      	pop	{r4, pc}
   18e12:	bf00      	nop
   18e14:	00018359 	.word	0x00018359

00018e18 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18e18:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18e1a:	2300      	movs	r3, #0
   18e1c:	2b00      	cmp	r3, #0
   18e1e:	dd13      	ble.n	18e48 <bt_smp_accept+0x30>
   18e20:	4b12      	ldr	r3, [pc, #72]	; (18e6c <bt_smp_accept+0x54>)
   18e22:	4a13      	ldr	r2, [pc, #76]	; (18e70 <bt_smp_accept+0x58>)
   18e24:	1a9b      	subs	r3, r3, r2
   18e26:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   18e28:	f04f 0200 	mov.w	r2, #0
   18e2c:	2101      	movs	r1, #1
   18e2e:	f361 0202 	bfi	r2, r1, #0, #3
   18e32:	f36f 02c5 	bfc	r2, #3, #3
   18e36:	f363 128f 	bfi	r2, r3, #6, #10
   18e3a:	4601      	mov	r1, r0
   18e3c:	480d      	ldr	r0, [pc, #52]	; (18e74 <bt_smp_accept+0x5c>)
   18e3e:	f7f8 f80f 	bl	10e60 <log_1>

	return -ENOMEM;
   18e42:	f06f 000b 	mvn.w	r0, #11
}
   18e46:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   18e48:	22e8      	movs	r2, #232	; 0xe8
   18e4a:	fb02 f203 	mul.w	r2, r2, r3
   18e4e:	4c0a      	ldr	r4, [pc, #40]	; (18e78 <bt_smp_accept+0x60>)
   18e50:	58a2      	ldr	r2, [r4, r2]
   18e52:	b10a      	cbz	r2, 18e58 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18e54:	3301      	adds	r3, #1
   18e56:	e7e1      	b.n	18e1c <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   18e58:	4a07      	ldr	r2, [pc, #28]	; (18e78 <bt_smp_accept+0x60>)
   18e5a:	20e8      	movs	r0, #232	; 0xe8
   18e5c:	fb00 2303 	mla	r3, r0, r3, r2
   18e60:	4a06      	ldr	r2, [pc, #24]	; (18e7c <bt_smp_accept+0x64>)
   18e62:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   18e64:	600b      	str	r3, [r1, #0]
		return 0;
   18e66:	2000      	movs	r0, #0
   18e68:	e7ed      	b.n	18e46 <bt_smp_accept+0x2e>
   18e6a:	bf00      	nop
   18e6c:	000254a4 	.word	0x000254a4
   18e70:	0002545c 	.word	0x0002545c
   18e74:	00027558 	.word	0x00027558
   18e78:	20034d48 	.word	0x20034d48
   18e7c:	00027588 	.word	0x00027588

00018e80 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   18e80:	4b03      	ldr	r3, [pc, #12]	; (18e90 <pool_id+0x10>)
   18e82:	1ac0      	subs	r0, r0, r3
   18e84:	10c0      	asrs	r0, r0, #3
}
   18e86:	4b03      	ldr	r3, [pc, #12]	; (18e94 <pool_id+0x14>)
   18e88:	fb03 f000 	mul.w	r0, r3, r0
   18e8c:	4770      	bx	lr
   18e8e:	bf00      	nop
   18e90:	20033c50 	.word	0x20033c50
   18e94:	cccccccd 	.word	0xcccccccd

00018e98 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
   18e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
   18e9c:	4b01      	ldr	r3, [pc, #4]	; (18ea4 <net_buf_pool_get+0xc>)
   18e9e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   18ea2:	4770      	bx	lr
   18ea4:	20033c50 	.word	0x20033c50

00018ea8 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   18ea8:	b510      	push	{r4, lr}
   18eaa:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18eac:	7980      	ldrb	r0, [r0, #6]
   18eae:	f7ff fff3 	bl	18e98 <net_buf_pool_get>

	return buf - pool->__bufs;
   18eb2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   18eb4:	1a24      	subs	r4, r4, r0
   18eb6:	10e4      	asrs	r4, r4, #3
}
   18eb8:	4801      	ldr	r0, [pc, #4]	; (18ec0 <net_buf_id+0x18>)
   18eba:	fb00 f004 	mul.w	r0, r0, r4
   18ebe:	bd10      	pop	{r4, pc}
   18ec0:	aaaaaaab 	.word	0xaaaaaaab

00018ec4 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   18ec4:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   18ec6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   18ec8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   18ecc:	d06f      	beq.n	18fae <baudrate_set+0xea>
   18ece:	d83a      	bhi.n	18f46 <baudrate_set+0x82>
   18ed0:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   18ed4:	d06e      	beq.n	18fb4 <baudrate_set+0xf0>
   18ed6:	d90a      	bls.n	18eee <baudrate_set+0x2a>
   18ed8:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   18edc:	d075      	beq.n	18fca <baudrate_set+0x106>
   18ede:	d924      	bls.n	18f2a <baudrate_set+0x66>
   18ee0:	f647 2312 	movw	r3, #31250	; 0x7a12
   18ee4:	4299      	cmp	r1, r3
   18ee6:	d12b      	bne.n	18f40 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18ee8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   18eec:	e013      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18eee:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   18ef2:	d061      	beq.n	18fb8 <baudrate_set+0xf4>
   18ef4:	d907      	bls.n	18f06 <baudrate_set+0x42>
   18ef6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   18efa:	d063      	beq.n	18fc4 <baudrate_set+0x100>
   18efc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   18f00:	d110      	bne.n	18f24 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   18f02:	4b3c      	ldr	r3, [pc, #240]	; (18ff4 <baudrate_set+0x130>)
   18f04:	e007      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18f06:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   18f0a:	d058      	beq.n	18fbe <baudrate_set+0xfa>
   18f0c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   18f10:	d105      	bne.n	18f1e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   18f12:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   18f16:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   18f1a:	2000      	movs	r0, #0
   18f1c:	4770      	bx	lr
	switch (baudrate) {
   18f1e:	f06f 0015 	mvn.w	r0, #21
   18f22:	4770      	bx	lr
   18f24:	f06f 0015 	mvn.w	r0, #21
   18f28:	4770      	bx	lr
   18f2a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   18f2e:	d04e      	beq.n	18fce <baudrate_set+0x10a>
   18f30:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   18f34:	d101      	bne.n	18f3a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   18f36:	4b30      	ldr	r3, [pc, #192]	; (18ff8 <baudrate_set+0x134>)
   18f38:	e7ed      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18f3a:	f06f 0015 	mvn.w	r0, #21
   18f3e:	4770      	bx	lr
   18f40:	f06f 0015 	mvn.w	r0, #21
   18f44:	4770      	bx	lr
   18f46:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   18f4a:	d042      	beq.n	18fd2 <baudrate_set+0x10e>
   18f4c:	d909      	bls.n	18f62 <baudrate_set+0x9e>
   18f4e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   18f52:	d046      	beq.n	18fe2 <baudrate_set+0x11e>
   18f54:	d91f      	bls.n	18f96 <baudrate_set+0xd2>
   18f56:	4b29      	ldr	r3, [pc, #164]	; (18ffc <baudrate_set+0x138>)
   18f58:	4299      	cmp	r1, r3
   18f5a:	d148      	bne.n	18fee <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   18f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18f60:	e7d9      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18f62:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   18f66:	d037      	beq.n	18fd8 <baudrate_set+0x114>
   18f68:	d905      	bls.n	18f76 <baudrate_set+0xb2>
   18f6a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   18f6e:	d10f      	bne.n	18f90 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   18f70:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   18f74:	e7cf      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18f76:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   18f7a:	4299      	cmp	r1, r3
   18f7c:	d02e      	beq.n	18fdc <baudrate_set+0x118>
   18f7e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   18f82:	d102      	bne.n	18f8a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   18f84:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   18f88:	e7c5      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18f8a:	f06f 0015 	mvn.w	r0, #21
   18f8e:	4770      	bx	lr
   18f90:	f06f 0015 	mvn.w	r0, #21
   18f94:	4770      	bx	lr
   18f96:	4b1a      	ldr	r3, [pc, #104]	; (19000 <baudrate_set+0x13c>)
   18f98:	4299      	cmp	r1, r3
   18f9a:	d025      	beq.n	18fe8 <baudrate_set+0x124>
   18f9c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   18fa0:	d102      	bne.n	18fa8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   18fa2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   18fa6:	e7b6      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18fa8:	f06f 0015 	mvn.w	r0, #21
   18fac:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   18fae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   18fb2:	e7b0      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18fb4:	4b13      	ldr	r3, [pc, #76]	; (19004 <baudrate_set+0x140>)
   18fb6:	e7ae      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18fb8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18fbc:	e7ab      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18fbe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   18fc2:	e7a8      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   18fc4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   18fc8:	e7a5      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   18fca:	4b0f      	ldr	r3, [pc, #60]	; (19008 <baudrate_set+0x144>)
   18fcc:	e7a3      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   18fce:	4b0f      	ldr	r3, [pc, #60]	; (1900c <baudrate_set+0x148>)
   18fd0:	e7a1      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   18fd2:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   18fd6:	e79e      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   18fd8:	4b0d      	ldr	r3, [pc, #52]	; (19010 <baudrate_set+0x14c>)
   18fda:	e79c      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   18fdc:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   18fe0:	e799      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   18fe2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18fe6:	e796      	b.n	18f16 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   18fe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18fec:	e793      	b.n	18f16 <baudrate_set+0x52>
	switch (baudrate) {
   18fee:	f06f 0015 	mvn.w	r0, #21
}
   18ff2:	4770      	bx	lr
   18ff4:	0013b000 	.word	0x0013b000
   18ff8:	004ea000 	.word	0x004ea000
   18ffc:	000f4240 	.word	0x000f4240
   19000:	0003d090 	.word	0x0003d090
   19004:	00275000 	.word	0x00275000
   19008:	0075c000 	.word	0x0075c000
   1900c:	003af000 	.word	0x003af000
   19010:	013a9000 	.word	0x013a9000

00019014 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   19014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19018:	4605      	mov	r5, r0
   1901a:	460f      	mov	r7, r1
	return dev->data;
   1901c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19020:	f00b fae7 	bl	245f2 <k_is_in_isr>
   19024:	b920      	cbnz	r0, 19030 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   19026:	4b16      	ldr	r3, [pc, #88]	; (19080 <uarte_nrfx_poll_out+0x6c>)
   19028:	781b      	ldrb	r3, [r3, #0]
   1902a:	b1ab      	cbz	r3, 19058 <uarte_nrfx_poll_out+0x44>
   1902c:	2300      	movs	r3, #0
   1902e:	e000      	b.n	19032 <uarte_nrfx_poll_out+0x1e>
   19030:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   19032:	b19b      	cbz	r3, 1905c <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   19034:	f04f 0340 	mov.w	r3, #64	; 0x40
   19038:	f3ef 8411 	mrs	r4, BASEPRI
   1903c:	f383 8811 	msr	BASEPRI, r3
   19040:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   19044:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   19046:	4628      	mov	r0, r5
   19048:	f00a fca7 	bl	2399a <is_tx_ready>
   1904c:	b950      	cbnz	r0, 19064 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1904e:	f384 8811 	msr	BASEPRI, r4
   19052:	f3bf 8f6f 	isb	sy
}
   19056:	e7ed      	b.n	19034 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19058:	2301      	movs	r3, #1
   1905a:	e7ea      	b.n	19032 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1905c:	4628      	mov	r0, r5
   1905e:	f00a fceb 	bl	23a38 <wait_tx_ready>
   19062:	4606      	mov	r6, r0
	}

	data->char_out = c;
   19064:	4641      	mov	r1, r8
   19066:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   1906a:	2201      	movs	r2, #1
   1906c:	4628      	mov	r0, r5
   1906e:	f00a fcae 	bl	239ce <tx_start>
	__asm__ volatile(
   19072:	f386 8811 	msr	BASEPRI, r6
   19076:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1907a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1907e:	bf00      	nop
   19080:	20038121 	.word	0x20038121

00019084 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   19084:	b538      	push	{r3, r4, r5, lr}
   19086:	4604      	mov	r4, r0
   19088:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1908a:	f101 0012 	add.w	r0, r1, #18
   1908e:	f001 fb81 	bl	1a794 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   19092:	4b14      	ldr	r3, [pc, #80]	; (190e4 <endtx_stoptx_ppi_init+0x60>)
   19094:	4298      	cmp	r0, r3
   19096:	d111      	bne.n	190bc <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   19098:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1909a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1909e:	340c      	adds	r4, #12
    p_reg->CH[(uint32_t) channel].EEP = eep;
   190a0:	4a11      	ldr	r2, [pc, #68]	; (190e8 <endtx_stoptx_ppi_init+0x64>)
   190a2:	33a2      	adds	r3, #162	; 0xa2
   190a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   190a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   190ac:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   190ae:	7ca9      	ldrb	r1, [r5, #18]
   190b0:	2301      	movs	r3, #1
   190b2:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   190b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   190b8:	2000      	movs	r0, #0
}
   190ba:	bd38      	pop	{r3, r4, r5, pc}
   190bc:	4b0b      	ldr	r3, [pc, #44]	; (190ec <endtx_stoptx_ppi_init+0x68>)
   190be:	4a0c      	ldr	r2, [pc, #48]	; (190f0 <endtx_stoptx_ppi_init+0x6c>)
   190c0:	1a9b      	subs	r3, r3, r2
   190c2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   190c4:	f04f 0100 	mov.w	r1, #0
   190c8:	2201      	movs	r2, #1
   190ca:	f362 0102 	bfi	r1, r2, #0, #3
   190ce:	f36f 01c5 	bfc	r1, #3, #3
   190d2:	f363 118f 	bfi	r1, r3, #6, #10
   190d6:	4807      	ldr	r0, [pc, #28]	; (190f4 <endtx_stoptx_ppi_init+0x70>)
   190d8:	f7f7 ff78 	bl	10fcc <log_0>
		return -EIO;
   190dc:	f06f 0004 	mvn.w	r0, #4
   190e0:	e7eb      	b.n	190ba <endtx_stoptx_ppi_init+0x36>
   190e2:	bf00      	nop
   190e4:	0bad0000 	.word	0x0bad0000
   190e8:	4001f000 	.word	0x4001f000
   190ec:	0002550c 	.word	0x0002550c
   190f0:	0002545c 	.word	0x0002545c
   190f4:	000275bc 	.word	0x000275bc

000190f8 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
   190f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190fc:	4606      	mov	r6, r0
   190fe:	460c      	mov	r4, r1
	return dev->config;
   19100:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   19102:	681d      	ldr	r5, [r3, #0]
	return dev->data;
   19104:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   19106:	2300      	movs	r3, #0
   19108:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1910c:	6038      	str	r0, [r7, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   1910e:	680b      	ldr	r3, [r1, #0]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   19110:	f003 011f 	and.w	r1, r3, #31

    return pin_number >> 5;
   19114:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19116:	2b01      	cmp	r3, #1
   19118:	f000 809b 	beq.w	19252 <uarte_instance_init+0x15a>
        case 0: return NRF_P0;
   1911c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19120:	2301      	movs	r3, #1
   19122:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   19124:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(config->pseltxd);
   19128:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1912a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1912e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19130:	2b01      	cmp	r3, #1
   19132:	f000 8090 	beq.w	19256 <uarte_instance_init+0x15e>
        case 0: return NRF_P0;
   19136:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1913a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1913e:	2203      	movs	r2, #3
   19140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   19144:	6863      	ldr	r3, [r4, #4]
   19146:	f1b3 3fff 	cmp.w	r3, #4294967295
   1914a:	d00c      	beq.n	19166 <uarte_instance_init+0x6e>
    *p_pin = pin_number & 0x1F;
   1914c:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19150:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19152:	2b01      	cmp	r3, #1
   19154:	f000 8081 	beq.w	1925a <uarte_instance_init+0x162>
        case 0: return NRF_P0;
   19158:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1915c:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   19160:	220c      	movs	r2, #12
   19162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   19166:	6822      	ldr	r2, [r4, #0]
   19168:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
   1916a:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1916e:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   19172:	68a3      	ldr	r3, [r4, #8]
   19174:	f1b3 3fff 	cmp.w	r3, #4294967295
   19178:	d00b      	beq.n	19192 <uarte_instance_init+0x9a>
    *p_pin = pin_number & 0x1F;
   1917a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1917e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19180:	2b01      	cmp	r3, #1
   19182:	d06c      	beq.n	1925e <uarte_instance_init+0x166>
        case 0: return NRF_P0;
   19184:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19188:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1918c:	220c      	movs	r2, #12
   1918e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   19192:	68e3      	ldr	r3, [r4, #12]
   19194:	f1b3 3fff 	cmp.w	r3, #4294967295
   19198:	d017      	beq.n	191ca <uarte_instance_init+0xd2>
    *p_pin = pin_number & 0x1F;
   1919a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1919e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   191a0:	2b01      	cmp	r3, #1
   191a2:	d05e      	beq.n	19262 <uarte_instance_init+0x16a>
        case 0: return NRF_P0;
   191a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   191a8:	2301      	movs	r3, #1
   191aa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   191ac:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   191b0:	68e3      	ldr	r3, [r4, #12]
    *p_pin = pin_number & 0x1F;
   191b2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   191b6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   191b8:	2b01      	cmp	r3, #1
   191ba:	d054      	beq.n	19266 <uarte_instance_init+0x16e>
        case 0: return NRF_P0;
   191bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   191c0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   191c4:	2203      	movs	r2, #3
   191c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   191ca:	68e2      	ldr	r2, [r4, #12]
   191cc:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
   191ce:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   191d2:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   191d6:	6931      	ldr	r1, [r6, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   191d8:	3104      	adds	r1, #4
   191da:	4630      	mov	r0, r6
   191dc:	f00a fb70 	bl	238c0 <uarte_nrfx_configure>
	if (err) {
   191e0:	4680      	mov	r8, r0
   191e2:	bb98      	cbnz	r0, 1924c <uarte_instance_init+0x154>
	return dev->config;
   191e4:	6873      	ldr	r3, [r6, #4]
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   191e6:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   191e8:	f013 0f08 	tst.w	r3, #8
   191ec:	d13d      	bne.n	1926a <uarte_instance_init+0x172>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   191ee:	2308      	movs	r3, #8
   191f0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   191f4:	6863      	ldr	r3, [r4, #4]
   191f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   191fa:	d00c      	beq.n	19216 <uarte_instance_init+0x11e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   191fc:	2300      	movs	r3, #0
   191fe:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   19202:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   19206:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1920a:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1920e:	2301      	movs	r3, #1
   19210:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19214:	602b      	str	r3, [r5, #0]
	return dev->config;
   19216:	6873      	ldr	r3, [r6, #4]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   19218:	685b      	ldr	r3, [r3, #4]
   1921a:	f013 0f08 	tst.w	r3, #8
   1921e:	d103      	bne.n	19228 <uarte_instance_init+0x130>
    p_reg->INTENSET = mask;
   19220:	f44f 7380 	mov.w	r3, #256	; 0x100
   19224:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	return dev->config;
   19228:	6873      	ldr	r3, [r6, #4]
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1922a:	685b      	ldr	r3, [r3, #4]
   1922c:	f013 0f10 	tst.w	r3, #16
   19230:	d003      	beq.n	1923a <uarte_instance_init+0x142>
   19232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   19236:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1923a:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1923c:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19240:	2300      	movs	r3, #0
   19242:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19246:	2301      	movs	r3, #1
   19248:	60ab      	str	r3, [r5, #8]
   1924a:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1924c:	4640      	mov	r0, r8
   1924e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   19252:	4a0a      	ldr	r2, [pc, #40]	; (1927c <uarte_instance_init+0x184>)
   19254:	e764      	b.n	19120 <uarte_instance_init+0x28>
   19256:	4909      	ldr	r1, [pc, #36]	; (1927c <uarte_instance_init+0x184>)
   19258:	e76f      	b.n	1913a <uarte_instance_init+0x42>
   1925a:	4908      	ldr	r1, [pc, #32]	; (1927c <uarte_instance_init+0x184>)
   1925c:	e77e      	b.n	1915c <uarte_instance_init+0x64>
   1925e:	4907      	ldr	r1, [pc, #28]	; (1927c <uarte_instance_init+0x184>)
   19260:	e792      	b.n	19188 <uarte_instance_init+0x90>
   19262:	4906      	ldr	r1, [pc, #24]	; (1927c <uarte_instance_init+0x184>)
   19264:	e7a0      	b.n	191a8 <uarte_instance_init+0xb0>
   19266:	4905      	ldr	r1, [pc, #20]	; (1927c <uarte_instance_init+0x184>)
   19268:	e7aa      	b.n	191c0 <uarte_instance_init+0xc8>
		err = endtx_stoptx_ppi_init(uarte, data);
   1926a:	4639      	mov	r1, r7
   1926c:	4628      	mov	r0, r5
   1926e:	f7ff ff09 	bl	19084 <endtx_stoptx_ppi_init>
		if (err < 0) {
   19272:	2800      	cmp	r0, #0
   19274:	dabb      	bge.n	191ee <uarte_instance_init+0xf6>
			return err;
   19276:	4680      	mov	r8, r0
   19278:	e7e8      	b.n	1924c <uarte_instance_init+0x154>
   1927a:	bf00      	nop
   1927c:	50000300 	.word	0x50000300

00019280 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   19280:	b530      	push	{r4, r5, lr}
   19282:	b085      	sub	sp, #20
   19284:	4605      	mov	r5, r0
   19286:	4b0a      	ldr	r3, [pc, #40]	; (192b0 <uarte_0_init+0x30>)
   19288:	466c      	mov	r4, sp
   1928a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1928c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   19290:	2200      	movs	r2, #0
   19292:	2101      	movs	r1, #1
   19294:	2002      	movs	r0, #2
   19296:	f7f9 fb15 	bl	128c4 <z_arm_irq_priority_set>
   1929a:	2002      	movs	r0, #2
   1929c:	f7f9 fae0 	bl	12860 <arch_irq_enable>
   192a0:	2200      	movs	r2, #0
   192a2:	4621      	mov	r1, r4
   192a4:	4628      	mov	r0, r5
   192a6:	f7ff ff27 	bl	190f8 <uarte_instance_init>
   192aa:	b005      	add	sp, #20
   192ac:	bd30      	pop	{r4, r5, pc}
   192ae:	bf00      	nop
   192b0:	0002566c 	.word	0x0002566c

000192b4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   192b4:	b530      	push	{r4, r5, lr}
   192b6:	b085      	sub	sp, #20
   192b8:	4605      	mov	r5, r0
   192ba:	466c      	mov	r4, sp
   192bc:	4b09      	ldr	r3, [pc, #36]	; (192e4 <uarte_1_init+0x30>)
   192be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   192c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   192c4:	2200      	movs	r2, #0
   192c6:	2101      	movs	r1, #1
   192c8:	2028      	movs	r0, #40	; 0x28
   192ca:	f7f9 fafb 	bl	128c4 <z_arm_irq_priority_set>
   192ce:	2028      	movs	r0, #40	; 0x28
   192d0:	f7f9 fac6 	bl	12860 <arch_irq_enable>
   192d4:	2200      	movs	r2, #0
   192d6:	4621      	mov	r1, r4
   192d8:	4628      	mov	r0, r5
   192da:	f7ff ff0d 	bl	190f8 <uarte_instance_init>
   192de:	b005      	add	sp, #20
   192e0:	bd30      	pop	{r4, r5, pc}
   192e2:	bf00      	nop
   192e4:	0002567c 	.word	0x0002567c

000192e8 <random_byte_get>:
	__asm__ volatile(
   192e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   192ec:	f3ef 8211 	mrs	r2, BASEPRI
   192f0:	f383 8811 	msr	BASEPRI, r3
   192f4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   192f8:	4b09      	ldr	r3, [pc, #36]	; (19320 <random_byte_get+0x38>)
   192fa:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   192fc:	b16b      	cbz	r3, 1931a <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   192fe:	4b09      	ldr	r3, [pc, #36]	; (19324 <random_byte_get+0x3c>)
   19300:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   19304:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19306:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1930a:	2100      	movs	r1, #0
   1930c:	6019      	str	r1, [r3, #0]
   1930e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   19310:	f382 8811 	msr	BASEPRI, r2
   19314:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   19318:	4770      	bx	lr
	int retval = -EAGAIN;
   1931a:	f06f 000a 	mvn.w	r0, #10
   1931e:	e7f7      	b.n	19310 <random_byte_get+0x28>
   19320:	4000d100 	.word	0x4000d100
   19324:	4000d000 	.word	0x4000d000

00019328 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1932c:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1932e:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   19332:	78c5      	ldrb	r5, [r0, #3]
   19334:	462f      	mov	r7, r5
	__asm__ volatile(
   19336:	f04f 0340 	mov.w	r3, #64	; 0x40
   1933a:	f3ef 8811 	mrs	r8, BASEPRI
   1933e:	f383 8811 	msr	BASEPRI, r3
   19342:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   19346:	7800      	ldrb	r0, [r0, #0]
   19348:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1934a:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1934e:	ebac 0c00 	sub.w	ip, ip, r0
   19352:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   19356:	4562      	cmp	r2, ip
   19358:	d901      	bls.n	1935e <rng_pool_get+0x36>
		len = available;
   1935a:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1935e:	1883      	adds	r3, r0, r2
   19360:	402b      	ands	r3, r5
   19362:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   19364:	f388 8811 	msr	BASEPRI, r8
   19368:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1936c:	460b      	mov	r3, r1
}
   1936e:	e006      	b.n	1937e <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   19370:	1932      	adds	r2, r6, r4
   19372:	7952      	ldrb	r2, [r2, #5]
   19374:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   19378:	3401      	adds	r4, #1
   1937a:	403c      	ands	r4, r7
	while (likely(len--)) {
   1937c:	462a      	mov	r2, r5
   1937e:	1e55      	subs	r5, r2, #1
   19380:	b2ad      	uxth	r5, r5
   19382:	2a00      	cmp	r2, #0
   19384:	d1f4      	bne.n	19370 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   19386:	4570      	cmp	r0, lr
   19388:	d10d      	bne.n	193a6 <rng_pool_get+0x7e>
	__asm__ volatile(
   1938a:	f04f 0040 	mov.w	r0, #64	; 0x40
   1938e:	f3ef 8211 	mrs	r2, BASEPRI
   19392:	f380 8811 	msr	BASEPRI, r0
   19396:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1939a:	7830      	ldrb	r0, [r6, #0]
   1939c:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1939e:	f382 8811 	msr	BASEPRI, r2
   193a2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   193a6:	1a5b      	subs	r3, r3, r1
   193a8:	b298      	uxth	r0, r3
	available = available - len;
   193aa:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   193ae:	7933      	ldrb	r3, [r6, #4]
   193b0:	4563      	cmp	r3, ip
   193b2:	d302      	bcc.n	193ba <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   193b4:	4b02      	ldr	r3, [pc, #8]	; (193c0 <rng_pool_get+0x98>)
   193b6:	2201      	movs	r2, #1
   193b8:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   193ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   193be:	bf00      	nop
   193c0:	4000d000 	.word	0x4000d000

000193c4 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   193c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193c6:	460d      	mov	r5, r1
   193c8:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   193ca:	f013 0f01 	tst.w	r3, #1
   193ce:	d103      	bne.n	193d8 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   193d0:	4822      	ldr	r0, [pc, #136]	; (1945c <entropy_nrf5_get_entropy_isr+0x98>)
   193d2:	f7ff ffa9 	bl	19328 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   193d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   193d8:	b90a      	cbnz	r2, 193de <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   193da:	4620      	mov	r0, r4
   193dc:	e7fb      	b.n	193d6 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   193de:	f04f 0340 	mov.w	r3, #64	; 0x40
   193e2:	f3ef 8611 	mrs	r6, BASEPRI
   193e6:	f383 8811 	msr	BASEPRI, r3
   193ea:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   193ee:	200d      	movs	r0, #13
   193f0:	f7f9 fa5a 	bl	128a8 <arch_irq_is_enabled>
   193f4:	4607      	mov	r7, r0
		irq_disable(IRQN);
   193f6:	200d      	movs	r0, #13
   193f8:	f7f9 fa42 	bl	12880 <arch_irq_disable>
	__asm__ volatile(
   193fc:	f386 8811 	msr	BASEPRI, r6
   19400:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19404:	4b16      	ldr	r3, [pc, #88]	; (19460 <entropy_nrf5_get_entropy_isr+0x9c>)
   19406:	2200      	movs	r2, #0
   19408:	601a      	str	r2, [r3, #0]
   1940a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1940c:	4b15      	ldr	r3, [pc, #84]	; (19464 <entropy_nrf5_get_entropy_isr+0xa0>)
   1940e:	2201      	movs	r2, #1
   19410:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19412:	4b15      	ldr	r3, [pc, #84]	; (19468 <entropy_nrf5_get_entropy_isr+0xa4>)
   19414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19418:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1941c:	4626      	mov	r6, r4
   1941e:	e004      	b.n	1942a <entropy_nrf5_get_entropy_isr+0x66>
   19420:	f3bf 8f4f 	dsb	sy
				__WFE();
   19424:	bf20      	wfe
				__SEV();
   19426:	bf40      	sev
				__WFE();
   19428:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1942a:	4b0d      	ldr	r3, [pc, #52]	; (19460 <entropy_nrf5_get_entropy_isr+0x9c>)
   1942c:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1942e:	2b00      	cmp	r3, #0
   19430:	d0f6      	beq.n	19420 <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   19432:	f7ff ff59 	bl	192e8 <random_byte_get>
   19436:	4b0c      	ldr	r3, [pc, #48]	; (19468 <entropy_nrf5_get_entropy_isr+0xa4>)
   19438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1943c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   19440:	2800      	cmp	r0, #0
   19442:	db02      	blt.n	1944a <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   19444:	3e01      	subs	r6, #1
   19446:	b2b6      	uxth	r6, r6
   19448:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1944a:	2e00      	cmp	r6, #0
   1944c:	d1ed      	bne.n	1942a <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1944e:	2f00      	cmp	r7, #0
   19450:	d0c3      	beq.n	193da <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   19452:	200d      	movs	r0, #13
   19454:	f7f9 fa04 	bl	12860 <arch_irq_enable>
   19458:	e7bf      	b.n	193da <entropy_nrf5_get_entropy_isr+0x16>
   1945a:	bf00      	nop
   1945c:	20036a7c 	.word	0x20036a7c
   19460:	4000d100 	.word	0x4000d100
   19464:	4000d000 	.word	0x4000d000
   19468:	e000e100 	.word	0xe000e100

0001946c <isr>:
{
   1946c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1946e:	f7ff ff3b 	bl	192e8 <random_byte_get>
	if (byte < 0) {
   19472:	2800      	cmp	r0, #0
   19474:	db06      	blt.n	19484 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   19476:	b2c4      	uxtb	r4, r0
   19478:	4621      	mov	r1, r4
   1947a:	480a      	ldr	r0, [pc, #40]	; (194a4 <isr+0x38>)
   1947c:	f00a fb03 	bl	23a86 <rng_pool_put>
	if (ret < 0) {
   19480:	2800      	cmp	r0, #0
   19482:	db00      	blt.n	19486 <isr+0x1a>
}
   19484:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   19486:	4621      	mov	r1, r4
   19488:	4807      	ldr	r0, [pc, #28]	; (194a8 <isr+0x3c>)
   1948a:	f00a fafc 	bl	23a86 <rng_pool_put>
		if (ret < 0) {
   1948e:	2800      	cmp	r0, #0
   19490:	db03      	blt.n	1949a <isr+0x2e>
	z_impl_k_sem_give(sem);
   19492:	4806      	ldr	r0, [pc, #24]	; (194ac <isr+0x40>)
   19494:	f002 fb44 	bl	1bb20 <z_impl_k_sem_give>
}
   19498:	e7f4      	b.n	19484 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1949a:	4b05      	ldr	r3, [pc, #20]	; (194b0 <isr+0x44>)
   1949c:	2201      	movs	r2, #1
   1949e:	601a      	str	r2, [r3, #0]
}
   194a0:	e7f7      	b.n	19492 <isr+0x26>
   194a2:	bf00      	nop
   194a4:	20036a7c 	.word	0x20036a7c
   194a8:	20036a91 	.word	0x20036a91
   194ac:	20036a64 	.word	0x20036a64
   194b0:	4000d004 	.word	0x4000d004

000194b4 <entropy_nrf5_get_entropy>:
{
   194b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194b6:	460f      	mov	r7, r1
   194b8:	4614      	mov	r4, r2
	while (len) {
   194ba:	e002      	b.n	194c2 <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   194bc:	1b64      	subs	r4, r4, r5
   194be:	b2a4      	uxth	r4, r4
		buf += bytes;
   194c0:	442f      	add	r7, r5
	while (len) {
   194c2:	b1e4      	cbz	r4, 194fe <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   194c4:	4e0f      	ldr	r6, [pc, #60]	; (19504 <entropy_nrf5_get_entropy+0x50>)
   194c6:	f04f 32ff 	mov.w	r2, #4294967295
   194ca:	f04f 33ff 	mov.w	r3, #4294967295
   194ce:	4630      	mov	r0, r6
   194d0:	f002 fb4e 	bl	1bb70 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   194d4:	4622      	mov	r2, r4
   194d6:	4639      	mov	r1, r7
   194d8:	f106 0045 	add.w	r0, r6, #69	; 0x45
   194dc:	f7ff ff24 	bl	19328 <rng_pool_get>
   194e0:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   194e2:	4630      	mov	r0, r6
   194e4:	f002 fb1c 	bl	1bb20 <z_impl_k_sem_give>
		if (bytes == 0U) {
   194e8:	2d00      	cmp	r5, #0
   194ea:	d1e7      	bne.n	194bc <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   194ec:	f04f 32ff 	mov.w	r2, #4294967295
   194f0:	f04f 33ff 	mov.w	r3, #4294967295
   194f4:	f106 0018 	add.w	r0, r6, #24
   194f8:	f002 fb3a 	bl	1bb70 <z_impl_k_sem_take>
			continue;
   194fc:	e7e1      	b.n	194c2 <entropy_nrf5_get_entropy+0xe>
}
   194fe:	2000      	movs	r0, #0
   19500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19502:	bf00      	nop
   19504:	20036a4c 	.word	0x20036a4c

00019508 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19508:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1950a:	4c18      	ldr	r4, [pc, #96]	; (1956c <entropy_nrf5_init+0x64>)
   1950c:	2201      	movs	r2, #1
   1950e:	4611      	mov	r1, r2
   19510:	4620      	mov	r0, r4
   19512:	f00b f9b7 	bl	24884 <z_impl_k_sem_init>
   19516:	2201      	movs	r2, #1
   19518:	2100      	movs	r1, #0
   1951a:	f104 0018 	add.w	r0, r4, #24
   1951e:	f00b f9b1 	bl	24884 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   19522:	2204      	movs	r2, #4
   19524:	2108      	movs	r1, #8
   19526:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1952a:	f00a fac0 	bl	23aae <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1952e:	220c      	movs	r2, #12
   19530:	2110      	movs	r1, #16
   19532:	f104 0030 	add.w	r0, r4, #48	; 0x30
   19536:	f00a faba 	bl	23aae <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1953a:	4b0d      	ldr	r3, [pc, #52]	; (19570 <entropy_nrf5_init+0x68>)
   1953c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19540:	f022 0201 	bic.w	r2, r2, #1
   19544:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19548:	4a0a      	ldr	r2, [pc, #40]	; (19574 <entropy_nrf5_init+0x6c>)
   1954a:	2400      	movs	r4, #0
   1954c:	6014      	str	r4, [r2, #0]
   1954e:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   19550:	2101      	movs	r1, #1
   19552:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19556:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   19558:	4622      	mov	r2, r4
   1955a:	200d      	movs	r0, #13
   1955c:	f7f9 f9b2 	bl	128c4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19560:	200d      	movs	r0, #13
   19562:	f7f9 f97d 	bl	12860 <arch_irq_enable>

	return 0;
}
   19566:	4620      	mov	r0, r4
   19568:	bd10      	pop	{r4, pc}
   1956a:	bf00      	nop
   1956c:	20036a4c 	.word	0x20036a4c
   19570:	4000d000 	.word	0x4000d000
   19574:	4000d100 	.word	0x4000d100

00019578 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19578:	b508      	push	{r3, lr}
   1957a:	4602      	mov	r2, r0
   1957c:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1957e:	4802      	ldr	r0, [pc, #8]	; (19588 <multithreading_lock_acquire+0x10>)
   19580:	f002 f9c4 	bl	1b90c <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   19584:	bd08      	pop	{r3, pc}
   19586:	bf00      	nop
   19588:	20033b74 	.word	0x20033b74

0001958c <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1958c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1958e:	4802      	ldr	r0, [pc, #8]	; (19598 <multithreading_lock_release+0xc>)
   19590:	f002 fa46 	bl	1ba20 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   19594:	bd08      	pop	{r3, pc}
   19596:	bf00      	nop
   19598:	20033b74 	.word	0x20033b74

0001959c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1959c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1959e:	f7f7 fd45 	bl	1102c <z_impl_log_panic>
   195a2:	4b09      	ldr	r3, [pc, #36]	; (195c8 <k_sys_fatal_error_handler+0x2c>)
   195a4:	4a09      	ldr	r2, [pc, #36]	; (195cc <k_sys_fatal_error_handler+0x30>)
   195a6:	1a9b      	subs	r3, r3, r2
   195a8:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   195aa:	f04f 0100 	mov.w	r1, #0
   195ae:	2201      	movs	r2, #1
   195b0:	f362 0102 	bfi	r1, r2, #0, #3
   195b4:	f36f 01c5 	bfc	r1, #3, #3
   195b8:	f363 118f 	bfi	r1, r3, #6, #10
   195bc:	4804      	ldr	r0, [pc, #16]	; (195d0 <k_sys_fatal_error_handler+0x34>)
   195be:	f7f7 fd05 	bl	10fcc <log_0>
		sys_arch_reboot(0);
   195c2:	2000      	movs	r0, #0
   195c4:	f7f9 fff0 	bl	135a8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   195c8:	000254b4 	.word	0x000254b4
   195cc:	0002545c 	.word	0x0002545c
   195d0:	00027638 	.word	0x00027638

000195d4 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   195d4:	b510      	push	{r4, lr}
   195d6:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   195d8:	4a03      	ldr	r2, [pc, #12]	; (195e8 <rand_prio_low_vector_get_blocking+0x14>)
   195da:	6810      	ldr	r0, [r2, #0]
   195dc:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   195de:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   195e0:	680c      	ldr	r4, [r1, #0]
   195e2:	4619      	mov	r1, r3
   195e4:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   195e6:	bd10      	pop	{r4, pc}
   195e8:	20036aa4 	.word	0x20036aa4

000195ec <sdc_assertion_handler>:
{
   195ec:	b538      	push	{r3, r4, r5, lr}
   195ee:	460d      	mov	r5, r1
   195f0:	4b0d      	ldr	r3, [pc, #52]	; (19628 <sdc_assertion_handler+0x3c>)
   195f2:	4a0e      	ldr	r2, [pc, #56]	; (1962c <sdc_assertion_handler+0x40>)
   195f4:	1a9b      	subs	r3, r3, r2
   195f6:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   195f8:	f04f 0400 	mov.w	r4, #0
   195fc:	2201      	movs	r2, #1
   195fe:	f362 0402 	bfi	r4, r2, #0, #3
   19602:	f36f 04c5 	bfc	r4, #3, #3
   19606:	f363 148f 	bfi	r4, r3, #6, #10
   1960a:	f7f7 faaf 	bl	10b6c <z_log_strdup>
   1960e:	4601      	mov	r1, r0
   19610:	4623      	mov	r3, r4
   19612:	462a      	mov	r2, r5
   19614:	4806      	ldr	r0, [pc, #24]	; (19630 <sdc_assertion_handler+0x44>)
   19616:	f7f7 fc59 	bl	10ecc <log_2>
	k_oops();
   1961a:	4040      	eors	r0, r0
   1961c:	f380 8811 	msr	BASEPRI, r0
   19620:	f04f 0003 	mov.w	r0, #3
   19624:	df02      	svc	2
}
   19626:	bd38      	pop	{r3, r4, r5, pc}
   19628:	000254f4 	.word	0x000254f4
   1962c:	0002545c 	.word	0x0002545c
   19630:	00027658 	.word	0x00027658

00019634 <host_signal>:
{
   19634:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   19636:	4802      	ldr	r0, [pc, #8]	; (19640 <host_signal+0xc>)
   19638:	f002 fa72 	bl	1bb20 <z_impl_k_sem_give>
}
   1963c:	bd08      	pop	{r3, pc}
   1963e:	bf00      	nop
   19640:	20033c08 	.word	0x20033c08

00019644 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   19644:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   19646:	4803      	ldr	r0, [pc, #12]	; (19654 <hci_driver_init+0x10>)
   19648:	f7fb fdec 	bl	15224 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1964c:	4802      	ldr	r0, [pc, #8]	; (19658 <hci_driver_init+0x14>)
   1964e:	f7ea fa61 	bl	3b14 <sdc_init>
	return err;
}
   19652:	bd08      	pop	{r3, pc}
   19654:	00027778 	.word	0x00027778
   19658:	000195ed 	.word	0x000195ed

0001965c <acl_handle>:
{
   1965c:	b538      	push	{r3, r4, r5, lr}
   1965e:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19660:	f04f 30ff 	mov.w	r0, #4294967295
   19664:	f04f 31ff 	mov.w	r1, #4294967295
   19668:	f7ff ff86 	bl	19578 <multithreading_lock_acquire>
	if (!errcode) {
   1966c:	4605      	mov	r5, r0
   1966e:	b108      	cbz	r0, 19674 <acl_handle+0x18>
}
   19670:	4628      	mov	r0, r5
   19672:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   19674:	68a0      	ldr	r0, [r4, #8]
   19676:	f7f2 fc65 	bl	bf44 <sdc_hci_data_put>
   1967a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1967c:	f7ff ff86 	bl	1958c <multithreading_lock_release>
		if (errcode) {
   19680:	2d00      	cmp	r5, #0
   19682:	d0f5      	beq.n	19670 <acl_handle+0x14>
   19684:	4801      	ldr	r0, [pc, #4]	; (1968c <acl_handle+0x30>)
   19686:	f002 fa4b 	bl	1bb20 <z_impl_k_sem_give>
}
   1968a:	e7f1      	b.n	19670 <acl_handle+0x14>
   1968c:	20033c08 	.word	0x20033c08

00019690 <cmd_handle>:
{
   19690:	b538      	push	{r3, r4, r5, lr}
   19692:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19694:	f04f 30ff 	mov.w	r0, #4294967295
   19698:	f04f 31ff 	mov.w	r1, #4294967295
   1969c:	f7ff ff6c 	bl	19578 <multithreading_lock_acquire>
	if (!errcode) {
   196a0:	4604      	mov	r4, r0
   196a2:	b110      	cbz	r0, 196aa <cmd_handle+0x1a>
	if (errcode) {
   196a4:	b144      	cbz	r4, 196b8 <cmd_handle+0x28>
}
   196a6:	4620      	mov	r0, r4
   196a8:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   196aa:	68a8      	ldr	r0, [r5, #8]
   196ac:	f000 f9bc 	bl	19a28 <hci_internal_cmd_put>
   196b0:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   196b2:	f7ff ff6b 	bl	1958c <multithreading_lock_release>
   196b6:	e7f5      	b.n	196a4 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   196b8:	4801      	ldr	r0, [pc, #4]	; (196c0 <cmd_handle+0x30>)
   196ba:	f002 fa31 	bl	1bb20 <z_impl_k_sem_give>
	return 0;
   196be:	e7f2      	b.n	196a6 <cmd_handle+0x16>
   196c0:	20033c08 	.word	0x20033c08

000196c4 <rand_prio_high_vector_get>:
{
   196c4:	b538      	push	{r3, r4, r5, lr}
   196c6:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   196c8:	4b07      	ldr	r3, [pc, #28]	; (196e8 <rand_prio_high_vector_get+0x24>)
   196ca:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   196cc:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   196ce:	685d      	ldr	r5, [r3, #4]
   196d0:	b13d      	cbz	r5, 196e2 <rand_prio_high_vector_get+0x1e>
   196d2:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   196d4:	2300      	movs	r3, #0
   196d6:	4621      	mov	r1, r4
   196d8:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   196da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   196de:	b2c0      	uxtb	r0, r0
   196e0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   196e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   196e6:	e7f8      	b.n	196da <rand_prio_high_vector_get+0x16>
   196e8:	20036aa4 	.word	0x20036aa4

000196ec <rand_prio_low_vector_get>:
{
   196ec:	b538      	push	{r3, r4, r5, lr}
   196ee:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   196f0:	4b07      	ldr	r3, [pc, #28]	; (19710 <rand_prio_low_vector_get+0x24>)
   196f2:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   196f4:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   196f6:	685d      	ldr	r5, [r3, #4]
   196f8:	b13d      	cbz	r5, 1970a <rand_prio_low_vector_get+0x1e>
   196fa:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   196fc:	2300      	movs	r3, #0
   196fe:	4621      	mov	r1, r4
   19700:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   19702:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   19706:	b2c0      	uxtb	r0, r0
   19708:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1970a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1970e:	e7f8      	b.n	19702 <rand_prio_low_vector_get+0x16>
   19710:	20036aa4 	.word	0x20036aa4

00019714 <event_packet_process>:
{
   19714:	b570      	push	{r4, r5, r6, lr}
   19716:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   19718:	f00a f9fd 	bl	23b16 <event_packet_is_discardable>
   1971c:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1971e:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19720:	461d      	mov	r5, r3
   19722:	b183      	cbz	r3, 19746 <event_packet_process+0x32>
   19724:	2200      	movs	r2, #0
   19726:	2300      	movs	r3, #0
   19728:	4629      	mov	r1, r5
   1972a:	f7fa f839 	bl	137a0 <bt_buf_get_evt>
	if (!evt_buf) {
   1972e:	4606      	mov	r6, r0
   19730:	b170      	cbz	r0, 19750 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   19732:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19734:	3202      	adds	r2, #2
   19736:	4621      	mov	r1, r4
   19738:	3008      	adds	r0, #8
   1973a:	f00a f83e 	bl	237ba <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1973e:	4630      	mov	r0, r6
   19740:	f7fb fd1c 	bl	1517c <bt_recv>
}
   19744:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19746:	f04f 32ff 	mov.w	r2, #4294967295
   1974a:	f04f 33ff 	mov.w	r3, #4294967295
   1974e:	e7eb      	b.n	19728 <event_packet_process+0x14>
		if (discardable) {
   19750:	2d00      	cmp	r5, #0
   19752:	d1f7      	bne.n	19744 <event_packet_process+0x30>
   19754:	4b08      	ldr	r3, [pc, #32]	; (19778 <event_packet_process+0x64>)
   19756:	4a09      	ldr	r2, [pc, #36]	; (1977c <event_packet_process+0x68>)
   19758:	1a9b      	subs	r3, r3, r2
   1975a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   1975c:	f04f 0100 	mov.w	r1, #0
   19760:	2201      	movs	r2, #1
   19762:	f362 0102 	bfi	r1, r2, #0, #3
   19766:	f36f 01c5 	bfc	r1, #3, #3
   1976a:	f363 118f 	bfi	r1, r3, #6, #10
   1976e:	4804      	ldr	r0, [pc, #16]	; (19780 <event_packet_process+0x6c>)
   19770:	f7f7 fc2c 	bl	10fcc <log_0>
		return;
   19774:	e7e6      	b.n	19744 <event_packet_process+0x30>
   19776:	bf00      	nop
   19778:	000254f4 	.word	0x000254f4
   1977c:	0002545c 	.word	0x0002545c
   19780:	00027680 	.word	0x00027680

00019784 <data_packet_process>:
{
   19784:	b538      	push	{r3, r4, r5, lr}
   19786:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   19788:	f04f 32ff 	mov.w	r2, #4294967295
   1978c:	f04f 33ff 	mov.w	r3, #4294967295
   19790:	2003      	movs	r0, #3
   19792:	f7f9 ffcd 	bl	13730 <bt_buf_get_rx>
	if (!data_buf) {
   19796:	b150      	cbz	r0, 197ae <data_packet_process+0x2a>
   19798:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1979a:	8862      	ldrh	r2, [r4, #2]
   1979c:	3204      	adds	r2, #4
   1979e:	4621      	mov	r1, r4
   197a0:	3008      	adds	r0, #8
   197a2:	f00a f80a 	bl	237ba <net_buf_simple_add_mem>
	bt_recv(data_buf);
   197a6:	4628      	mov	r0, r5
   197a8:	f7fb fce8 	bl	1517c <bt_recv>
}
   197ac:	bd38      	pop	{r3, r4, r5, pc}
   197ae:	4b08      	ldr	r3, [pc, #32]	; (197d0 <data_packet_process+0x4c>)
   197b0:	4a08      	ldr	r2, [pc, #32]	; (197d4 <data_packet_process+0x50>)
   197b2:	1a9b      	subs	r3, r3, r2
   197b4:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   197b6:	f04f 0100 	mov.w	r1, #0
   197ba:	2201      	movs	r2, #1
   197bc:	f362 0102 	bfi	r1, r2, #0, #3
   197c0:	f36f 01c5 	bfc	r1, #3, #3
   197c4:	f363 118f 	bfi	r1, r3, #6, #10
   197c8:	4803      	ldr	r0, [pc, #12]	; (197d8 <data_packet_process+0x54>)
   197ca:	f7f7 fbff 	bl	10fcc <log_0>
		return;
   197ce:	e7ed      	b.n	197ac <data_packet_process+0x28>
   197d0:	000254f4 	.word	0x000254f4
   197d4:	0002545c 	.word	0x0002545c
   197d8:	0002769c 	.word	0x0002769c

000197dc <recv_thread>:
{
   197dc:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   197de:	2500      	movs	r5, #0
	bool received_evt = false;
   197e0:	462c      	mov	r4, r5
   197e2:	e00a      	b.n	197fa <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   197e4:	4d0b      	ldr	r5, [pc, #44]	; (19814 <recv_thread+0x38>)
   197e6:	4628      	mov	r0, r5
   197e8:	f00a f9c9 	bl	23b7e <fetch_and_process_hci_evt>
   197ec:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   197ee:	4628      	mov	r0, r5
   197f0:	f00a f9de 	bl	23bb0 <fetch_and_process_acl_data>
   197f4:	4605      	mov	r5, r0
	z_impl_k_yield();
   197f6:	f002 feb1 	bl	1c55c <z_impl_k_yield>
		if (!received_evt && !received_data) {
   197fa:	2c00      	cmp	r4, #0
   197fc:	d1f2      	bne.n	197e4 <recv_thread+0x8>
   197fe:	2d00      	cmp	r5, #0
   19800:	d1f0      	bne.n	197e4 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   19802:	f04f 32ff 	mov.w	r2, #4294967295
   19806:	f04f 33ff 	mov.w	r3, #4294967295
   1980a:	4803      	ldr	r0, [pc, #12]	; (19818 <recv_thread+0x3c>)
   1980c:	f002 f9b0 	bl	1bb70 <z_impl_k_sem_take>
   19810:	e7e8      	b.n	197e4 <recv_thread+0x8>
   19812:	bf00      	nop
   19814:	20036aa8 	.word	0x20036aa8
   19818:	20033c08 	.word	0x20033c08

0001981c <configure_memory_usage>:
{
   1981c:	b500      	push	{lr}
   1981e:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   19820:	2000      	movs	r0, #0
   19822:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19826:	aa01      	add	r2, sp, #4
   19828:	2101      	movs	r1, #1
   1982a:	f7ea f903 	bl	3a34 <sdc_cfg_set>
	if (required_memory < 0) {
   1982e:	2800      	cmp	r0, #0
   19830:	db33      	blt.n	1989a <configure_memory_usage+0x7e>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   19832:	2301      	movs	r3, #1
   19834:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19838:	aa01      	add	r2, sp, #4
   1983a:	2102      	movs	r1, #2
   1983c:	2000      	movs	r0, #0
   1983e:	f7ea f8f9 	bl	3a34 <sdc_cfg_set>
	if (required_memory < 0) {
   19842:	2800      	cmp	r0, #0
   19844:	db29      	blt.n	1989a <configure_memory_usage+0x7e>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   19846:	231b      	movs	r3, #27
   19848:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1984c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   19850:	2302      	movs	r3, #2
   19852:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   19856:	2103      	movs	r1, #3
   19858:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1985c:	aa01      	add	r2, sp, #4
   1985e:	2000      	movs	r0, #0
   19860:	f7ea f8e8 	bl	3a34 <sdc_cfg_set>
	if (required_memory < 0) {
   19864:	2800      	cmp	r0, #0
   19866:	db18      	blt.n	1989a <configure_memory_usage+0x7e>
	cfg.event_length.event_length_us =
   19868:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1986c:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1986e:	aa01      	add	r2, sp, #4
   19870:	2104      	movs	r1, #4
   19872:	2000      	movs	r0, #0
   19874:	f7ea f8de 	bl	3a34 <sdc_cfg_set>
	if (required_memory < 0) {
   19878:	2800      	cmp	r0, #0
   1987a:	db0e      	blt.n	1989a <configure_memory_usage+0x7e>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1987c:	2301      	movs	r3, #1
   1987e:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19882:	aa01      	add	r2, sp, #4
   19884:	2105      	movs	r1, #5
   19886:	2000      	movs	r0, #0
   19888:	f7ea f8d4 	bl	3a34 <sdc_cfg_set>
	if (required_memory < 0) {
   1988c:	2800      	cmp	r0, #0
   1988e:	db04      	blt.n	1989a <configure_memory_usage+0x7e>
	if (required_memory > sizeof(sdc_mempool)) {
   19890:	f240 63e6 	movw	r3, #1766	; 0x6e6
   19894:	4298      	cmp	r0, r3
   19896:	d803      	bhi.n	198a0 <configure_memory_usage+0x84>
	return 0;
   19898:	2000      	movs	r0, #0
}
   1989a:	b003      	add	sp, #12
   1989c:	f85d fb04 	ldr.w	pc, [sp], #4
   198a0:	4a0d      	ldr	r2, [pc, #52]	; (198d8 <configure_memory_usage+0xbc>)
   198a2:	4b0e      	ldr	r3, [pc, #56]	; (198dc <configure_memory_usage+0xc0>)
   198a4:	1ad2      	subs	r2, r2, r3
   198a6:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   198a8:	f04f 0300 	mov.w	r3, #0
   198ac:	2101      	movs	r1, #1
   198ae:	f361 0302 	bfi	r3, r1, #0, #3
   198b2:	f36f 03c5 	bfc	r3, #3, #3
   198b6:	f362 138f 	bfi	r3, r2, #6, #10
   198ba:	4602      	mov	r2, r0
   198bc:	f240 61e6 	movw	r1, #1766	; 0x6e6
   198c0:	4807      	ldr	r0, [pc, #28]	; (198e0 <configure_memory_usage+0xc4>)
   198c2:	f7f7 fb03 	bl	10ecc <log_2>
		k_panic();
   198c6:	4040      	eors	r0, r0
   198c8:	f380 8811 	msr	BASEPRI, r0
   198cc:	f04f 0004 	mov.w	r0, #4
   198d0:	df02      	svc	2
		return -ENOMEM;
   198d2:	f06f 000b 	mvn.w	r0, #11
   198d6:	e7e0      	b.n	1989a <configure_memory_usage+0x7e>
   198d8:	000254f4 	.word	0x000254f4
   198dc:	0002545c 	.word	0x0002545c
   198e0:	000276b8 	.word	0x000276b8

000198e4 <hci_driver_open>:
{
   198e4:	b530      	push	{r4, r5, lr}
   198e6:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   198e8:	4d41      	ldr	r5, [pc, #260]	; (199f0 <hci_driver_open+0x10c>)
   198ea:	2200      	movs	r2, #0
   198ec:	2300      	movs	r3, #0
   198ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   198f2:	2400      	movs	r4, #0
   198f4:	9404      	str	r4, [sp, #16]
   198f6:	f06f 0309 	mvn.w	r3, #9
   198fa:	9303      	str	r3, [sp, #12]
   198fc:	9402      	str	r4, [sp, #8]
   198fe:	9401      	str	r4, [sp, #4]
   19900:	9400      	str	r4, [sp, #0]
   19902:	4b3c      	ldr	r3, [pc, #240]	; (199f4 <hci_driver_open+0x110>)
   19904:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19908:	493b      	ldr	r1, [pc, #236]	; (199f8 <hci_driver_open+0x114>)
   1990a:	4628      	mov	r0, r5
   1990c:	f00a fe88 	bl	24620 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19910:	493a      	ldr	r1, [pc, #232]	; (199fc <hci_driver_open+0x118>)
   19912:	4628      	mov	r0, r5
   19914:	f001 ff16 	bl	1b744 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   19918:	a80b      	add	r0, sp, #44	; 0x2c
   1991a:	f7ea f87d 	bl	3a18 <sdc_build_revision_get>
   1991e:	4a38      	ldr	r2, [pc, #224]	; (19a00 <hci_driver_open+0x11c>)
   19920:	4b38      	ldr	r3, [pc, #224]	; (19a04 <hci_driver_open+0x120>)
   19922:	1ad2      	subs	r2, r2, r3
   19924:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   19926:	f04f 0300 	mov.w	r3, #0
   1992a:	2103      	movs	r1, #3
   1992c:	f361 0302 	bfi	r3, r1, #0, #3
   19930:	f364 03c5 	bfi	r3, r4, #3, #3
   19934:	f362 138f 	bfi	r3, r2, #6, #10
   19938:	2214      	movs	r2, #20
   1993a:	a90b      	add	r1, sp, #44	; 0x2c
   1993c:	4832      	ldr	r0, [pc, #200]	; (19a08 <hci_driver_open+0x124>)
   1993e:	f7f7 fb23 	bl	10f88 <log_hexdump>
	err = configure_supported_features();
   19942:	f00a f94e 	bl	23be2 <configure_supported_features>
	if (err) {
   19946:	b118      	cbz	r0, 19950 <hci_driver_open+0x6c>
		return -err;
   19948:	4244      	negs	r4, r0
}
   1994a:	4620      	mov	r0, r4
   1994c:	b011      	add	sp, #68	; 0x44
   1994e:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   19950:	f7ff ff64 	bl	1981c <configure_memory_usage>
	if (err) {
   19954:	4604      	mov	r4, r0
   19956:	2800      	cmp	r0, #0
   19958:	d1f7      	bne.n	1994a <hci_driver_open+0x66>
   1995a:	482c      	ldr	r0, [pc, #176]	; (19a0c <hci_driver_open+0x128>)
   1995c:	f001 fcae 	bl	1b2bc <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19960:	4b2b      	ldr	r3, [pc, #172]	; (19a10 <hci_driver_open+0x12c>)
   19962:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   19964:	b1a8      	cbz	r0, 19992 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   19966:	4a2b      	ldr	r2, [pc, #172]	; (19a14 <hci_driver_open+0x130>)
   19968:	ab08      	add	r3, sp, #32
   1996a:	ca07      	ldmia	r2, {r0, r1, r2}
   1996c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   19970:	4618      	mov	r0, r3
   19972:	f7ea f9e9 	bl	3d48 <sdc_rand_source_register>
	if (err) {
   19976:	4604      	mov	r4, r0
   19978:	b9f0      	cbnz	r0, 199b8 <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1997a:	f04f 30ff 	mov.w	r0, #4294967295
   1997e:	f04f 31ff 	mov.w	r1, #4294967295
   19982:	f7ff fdf9 	bl	19578 <multithreading_lock_acquire>
	if (!err) {
   19986:	4605      	mov	r5, r0
   19988:	b350      	cbz	r0, 199e0 <hci_driver_open+0xfc>
	if (err < 0) {
   1998a:	2d00      	cmp	r5, #0
   1998c:	dadd      	bge.n	1994a <hci_driver_open+0x66>
		return err;
   1998e:	462c      	mov	r4, r5
   19990:	e7db      	b.n	1994a <hci_driver_open+0x66>
   19992:	4b1b      	ldr	r3, [pc, #108]	; (19a00 <hci_driver_open+0x11c>)
   19994:	4a1b      	ldr	r2, [pc, #108]	; (19a04 <hci_driver_open+0x120>)
   19996:	1a9b      	subs	r3, r3, r2
   19998:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1999a:	f04f 0100 	mov.w	r1, #0
   1999e:	2201      	movs	r2, #1
   199a0:	f362 0102 	bfi	r1, r2, #0, #3
   199a4:	f36f 01c5 	bfc	r1, #3, #3
   199a8:	f363 118f 	bfi	r1, r3, #6, #10
   199ac:	481a      	ldr	r0, [pc, #104]	; (19a18 <hci_driver_open+0x134>)
   199ae:	f7f7 fb0d 	bl	10fcc <log_0>
		return -ENODEV;
   199b2:	f06f 0412 	mvn.w	r4, #18
   199b6:	e7c8      	b.n	1994a <hci_driver_open+0x66>
   199b8:	4b11      	ldr	r3, [pc, #68]	; (19a00 <hci_driver_open+0x11c>)
   199ba:	4a12      	ldr	r2, [pc, #72]	; (19a04 <hci_driver_open+0x120>)
   199bc:	1a9b      	subs	r3, r3, r2
   199be:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   199c0:	f04f 0200 	mov.w	r2, #0
   199c4:	2101      	movs	r1, #1
   199c6:	f361 0202 	bfi	r2, r1, #0, #3
   199ca:	f36f 02c5 	bfc	r2, #3, #3
   199ce:	f363 128f 	bfi	r2, r3, #6, #10
   199d2:	4601      	mov	r1, r0
   199d4:	4811      	ldr	r0, [pc, #68]	; (19a1c <hci_driver_open+0x138>)
   199d6:	f7f7 fa43 	bl	10e60 <log_1>
		return -EINVAL;
   199da:	f06f 0415 	mvn.w	r4, #21
   199de:	e7b4      	b.n	1994a <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   199e0:	490f      	ldr	r1, [pc, #60]	; (19a20 <hci_driver_open+0x13c>)
   199e2:	4810      	ldr	r0, [pc, #64]	; (19a24 <hci_driver_open+0x140>)
   199e4:	f7ea f868 	bl	3ab8 <sdc_enable>
   199e8:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   199ea:	f7ff fdcf 	bl	1958c <multithreading_lock_release>
   199ee:	e7cc      	b.n	1998a <hci_driver_open+0xa6>
   199f0:	20034e30 	.word	0x20034e30
   199f4:	000197dd 	.word	0x000197dd
   199f8:	20039040 	.word	0x20039040
   199fc:	000276dc 	.word	0x000276dc
   19a00:	000254f4 	.word	0x000254f4
   19a04:	0002545c 	.word	0x0002545c
   19a08:	000276e4 	.word	0x000276e4
   19a0c:	00027618 	.word	0x00027618
   19a10:	20036aa4 	.word	0x20036aa4
   19a14:	0002568c 	.word	0x0002568c
   19a18:	0002770c 	.word	0x0002770c
   19a1c:	0002772c 	.word	0x0002772c
   19a20:	20036b2c 	.word	0x20036b2c
   19a24:	00019635 	.word	0x00019635

00019a28 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   19a28:	4b0b      	ldr	r3, [pc, #44]	; (19a58 <hci_internal_cmd_put+0x30>)
   19a2a:	781b      	ldrb	r3, [r3, #0]
   19a2c:	b96b      	cbnz	r3, 19a4a <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   19a2e:	7883      	ldrb	r3, [r0, #2]
   19a30:	3303      	adds	r3, #3
   19a32:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   19a36:	dc0b      	bgt.n	19a50 <hci_internal_cmd_put+0x28>
{
   19a38:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   19a3a:	4c07      	ldr	r4, [pc, #28]	; (19a58 <hci_internal_cmd_put+0x30>)
   19a3c:	1c61      	adds	r1, r4, #1
   19a3e:	f00a fba8 	bl	24192 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   19a42:	2301      	movs	r3, #1
   19a44:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   19a46:	2000      	movs	r0, #0
}
   19a48:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   19a4a:	f04f 30ff 	mov.w	r0, #4294967295
   19a4e:	4770      	bx	lr
		return -EINVAL;
   19a50:	f06f 0015 	mvn.w	r0, #21
}
   19a54:	4770      	bx	lr
   19a56:	bf00      	nop
   19a58:	20037214 	.word	0x20037214

00019a5c <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   19a5c:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   19a5e:	4b07      	ldr	r3, [pc, #28]	; (19a7c <hci_internal_evt_get+0x20>)
   19a60:	781b      	ldrb	r3, [r3, #0]
   19a62:	b913      	cbnz	r3, 19a6a <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   19a64:	f7f2 fa79 	bl	bf5a <sdc_hci_evt_get>
}
   19a68:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   19a6a:	4c04      	ldr	r4, [pc, #16]	; (19a7c <hci_internal_evt_get+0x20>)
   19a6c:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   19a6e:	3202      	adds	r2, #2
   19a70:	1c61      	adds	r1, r4, #1
   19a72:	f007 fd58 	bl	21526 <memcpy>
		cmd_complete_or_status.occurred = false;
   19a76:	2000      	movs	r0, #0
   19a78:	7020      	strb	r0, [r4, #0]
		return 0;
   19a7a:	e7f5      	b.n	19a68 <hci_internal_evt_get+0xc>
   19a7c:	20037214 	.word	0x20037214

00019a80 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   19a80:	b538      	push	{r3, r4, r5, lr}
   19a82:	4605      	mov	r5, r0
   19a84:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   19a86:	4b0a      	ldr	r3, [pc, #40]	; (19ab0 <bt_rand+0x30>)
   19a88:	681b      	ldr	r3, [r3, #0]
   19a8a:	b13b      	cbz	r3, 19a9c <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   19a8c:	4b08      	ldr	r3, [pc, #32]	; (19ab0 <bt_rand+0x30>)
   19a8e:	6818      	ldr	r0, [r3, #0]
   19a90:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   19a92:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   19a94:	681b      	ldr	r3, [r3, #0]
   19a96:	4629      	mov	r1, r5
   19a98:	4798      	blx	r3
}
   19a9a:	bd38      	pop	{r3, r4, r5, pc}
   19a9c:	4805      	ldr	r0, [pc, #20]	; (19ab4 <bt_rand+0x34>)
   19a9e:	f001 fc0d 	bl	1b2bc <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   19aa2:	4b03      	ldr	r3, [pc, #12]	; (19ab0 <bt_rand+0x30>)
   19aa4:	6018      	str	r0, [r3, #0]
		if (!dev) {
   19aa6:	2800      	cmp	r0, #0
   19aa8:	d1f0      	bne.n	19a8c <bt_rand+0xc>
			return -ENODEV;
   19aaa:	f06f 0012 	mvn.w	r0, #18
   19aae:	e7f4      	b.n	19a9a <bt_rand+0x1a>
   19ab0:	2003725c 	.word	0x2003725c
   19ab4:	00027618 	.word	0x00027618

00019ab8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   19ab8:	b510      	push	{r4, lr}
   19aba:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   19abc:	f00a fbc0 	bl	24240 <m_config_clock_source_get>
   19ac0:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   19ac4:	2332      	movs	r3, #50	; 0x32
   19ac6:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   19aca:	2300      	movs	r3, #0
   19acc:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   19ad0:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   19ad4:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   19ad8:	4a0c      	ldr	r2, [pc, #48]	; (19b0c <mpsl_lib_init+0x54>)
   19ada:	2119      	movs	r1, #25
   19adc:	4668      	mov	r0, sp
   19ade:	f7e9 fdf1 	bl	36c4 <mpsl_init>
	if (err) {
   19ae2:	4604      	mov	r4, r0
   19ae4:	b110      	cbz	r0, 19aec <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   19ae6:	4620      	mov	r0, r4
   19ae8:	b002      	add	sp, #8
   19aea:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19aec:	2201      	movs	r2, #1
   19aee:	2100      	movs	r1, #0
   19af0:	2008      	movs	r0, #8
   19af2:	f7f8 fee7 	bl	128c4 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19af6:	2201      	movs	r2, #1
   19af8:	2100      	movs	r1, #0
   19afa:	200b      	movs	r0, #11
   19afc:	f7f8 fee2 	bl	128c4 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   19b00:	2201      	movs	r2, #1
   19b02:	2100      	movs	r1, #0
   19b04:	4610      	mov	r0, r2
   19b06:	f7f8 fedd 	bl	128c4 <z_arm_irq_priority_set>
	return 0;
   19b0a:	e7ec      	b.n	19ae6 <mpsl_lib_init+0x2e>
   19b0c:	00019b11 	.word	0x00019b11

00019b10 <m_assert_handler>:
{
   19b10:	b538      	push	{r3, r4, r5, lr}
   19b12:	460d      	mov	r5, r1
   19b14:	4b0d      	ldr	r3, [pc, #52]	; (19b4c <m_assert_handler+0x3c>)
   19b16:	4a0e      	ldr	r2, [pc, #56]	; (19b50 <m_assert_handler+0x40>)
   19b18:	1a9b      	subs	r3, r3, r2
   19b1a:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   19b1c:	f04f 0400 	mov.w	r4, #0
   19b20:	2201      	movs	r2, #1
   19b22:	f362 0402 	bfi	r4, r2, #0, #3
   19b26:	f36f 04c5 	bfc	r4, #3, #3
   19b2a:	f363 148f 	bfi	r4, r3, #6, #10
   19b2e:	f7f7 f81d 	bl	10b6c <z_log_strdup>
   19b32:	4601      	mov	r1, r0
   19b34:	4623      	mov	r3, r4
   19b36:	462a      	mov	r2, r5
   19b38:	4806      	ldr	r0, [pc, #24]	; (19b54 <m_assert_handler+0x44>)
   19b3a:	f7f7 f9c7 	bl	10ecc <log_2>
	k_oops();
   19b3e:	4040      	eors	r0, r0
   19b40:	f380 8811 	msr	BASEPRI, r0
   19b44:	f04f 0003 	mov.w	r0, #3
   19b48:	df02      	svc	2
}
   19b4a:	bd38      	pop	{r3, r4, r5, pc}
   19b4c:	000254c4 	.word	0x000254c4
   19b50:	0002545c 	.word	0x0002545c
   19b54:	000277b0 	.word	0x000277b0

00019b58 <signal_thread>:
{
   19b58:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   19b5a:	f04f 34ff 	mov.w	r4, #4294967295
   19b5e:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   19b62:	4622      	mov	r2, r4
   19b64:	462b      	mov	r3, r5
   19b66:	4806      	ldr	r0, [pc, #24]	; (19b80 <signal_thread+0x28>)
   19b68:	f002 f802 	bl	1bb70 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   19b6c:	4620      	mov	r0, r4
   19b6e:	4629      	mov	r1, r5
   19b70:	f7ff fd02 	bl	19578 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   19b74:	f7f1 fda4 	bl	b6c0 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   19b78:	f7ff fd08 	bl	1958c <multithreading_lock_release>
	while (true) {
   19b7c:	e7ed      	b.n	19b5a <signal_thread+0x2>
   19b7e:	bf00      	nop
   19b80:	20033c20 	.word	0x20033c20

00019b84 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   19b84:	b530      	push	{r4, r5, lr}
   19b86:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19b88:	4d0f      	ldr	r5, [pc, #60]	; (19bc8 <mpsl_signal_thread_init+0x44>)
   19b8a:	2200      	movs	r2, #0
   19b8c:	2300      	movs	r3, #0
   19b8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19b92:	2400      	movs	r4, #0
   19b94:	9404      	str	r4, [sp, #16]
   19b96:	f06f 0309 	mvn.w	r3, #9
   19b9a:	9303      	str	r3, [sp, #12]
   19b9c:	9402      	str	r4, [sp, #8]
   19b9e:	9401      	str	r4, [sp, #4]
   19ba0:	9400      	str	r4, [sp, #0]
   19ba2:	4b0a      	ldr	r3, [pc, #40]	; (19bcc <mpsl_signal_thread_init+0x48>)
   19ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19ba8:	4909      	ldr	r1, [pc, #36]	; (19bd0 <mpsl_signal_thread_init+0x4c>)
   19baa:	4628      	mov	r0, r5
   19bac:	f00a fd38 	bl	24620 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19bb0:	4908      	ldr	r1, [pc, #32]	; (19bd4 <mpsl_signal_thread_init+0x50>)
   19bb2:	4628      	mov	r0, r5
   19bb4:	f001 fdc6 	bl	1b744 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   19bb8:	4622      	mov	r2, r4
   19bba:	2104      	movs	r1, #4
   19bbc:	2019      	movs	r0, #25
   19bbe:	f7f8 fe81 	bl	128c4 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   19bc2:	4620      	mov	r0, r4
   19bc4:	b009      	add	sp, #36	; 0x24
   19bc6:	bd30      	pop	{r4, r5, pc}
   19bc8:	20034ee8 	.word	0x20034ee8
   19bcc:	00019b59 	.word	0x00019b59
   19bd0:	20039460 	.word	0x20039460
   19bd4:	000277c4 	.word	0x000277c4

00019bd8 <mpsl_low_prio_irq_handler>:
{
   19bd8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   19bda:	4802      	ldr	r0, [pc, #8]	; (19be4 <mpsl_low_prio_irq_handler+0xc>)
   19bdc:	f001 ffa0 	bl	1bb20 <z_impl_k_sem_give>
}
   19be0:	bd08      	pop	{r3, pc}
   19be2:	bf00      	nop
   19be4:	20033c20 	.word	0x20033c20

00019be8 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   19be8:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19bea:	4b02      	ldr	r3, [pc, #8]	; (19bf4 <mpsl_hfclk_callback+0xc>)
   19bec:	681b      	ldr	r3, [r3, #0]
   19bee:	2000      	movs	r0, #0
   19bf0:	4798      	blx	r3
}
   19bf2:	bd08      	pop	{r3, pc}
   19bf4:	20037260 	.word	0x20037260

00019bf8 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   19bf8:	b508      	push	{r3, lr}
	switch (domain) {
   19bfa:	b128      	cbz	r0, 19c08 <nrfx_clock_start+0x10>
   19bfc:	2801      	cmp	r0, #1
   19bfe:	d102      	bne.n	19c06 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   19c00:	4804      	ldr	r0, [pc, #16]	; (19c14 <nrfx_clock_start+0x1c>)
   19c02:	f7e9 fbbf 	bl	3384 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   19c06:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19c08:	4b03      	ldr	r3, [pc, #12]	; (19c18 <nrfx_clock_start+0x20>)
   19c0a:	681b      	ldr	r3, [r3, #0]
   19c0c:	2001      	movs	r0, #1
   19c0e:	4798      	blx	r3
}
   19c10:	e7f9      	b.n	19c06 <nrfx_clock_start+0xe>
   19c12:	bf00      	nop
   19c14:	00019be9 	.word	0x00019be9
   19c18:	20037260 	.word	0x20037260

00019c1c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   19c1c:	4b01      	ldr	r3, [pc, #4]	; (19c24 <nrfx_clock_init+0x8>)
   19c1e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   19c20:	4801      	ldr	r0, [pc, #4]	; (19c28 <nrfx_clock_init+0xc>)
   19c22:	4770      	bx	lr
   19c24:	20037260 	.word	0x20037260
   19c28:	0bad0000 	.word	0x0bad0000

00019c2c <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19c2c:	4b03      	ldr	r3, [pc, #12]	; (19c3c <nrf52_errata_36+0x10>)
   19c2e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19c30:	2b08      	cmp	r3, #8
   19c32:	d001      	beq.n	19c38 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   19c34:	2000      	movs	r0, #0
   19c36:	4770      	bx	lr
                        return true;
   19c38:	2001      	movs	r0, #1
    #endif
}
   19c3a:	4770      	bx	lr
   19c3c:	10000130 	.word	0x10000130

00019c40 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19c40:	4b03      	ldr	r3, [pc, #12]	; (19c50 <nrf52_errata_66+0x10>)
   19c42:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19c44:	2b08      	cmp	r3, #8
   19c46:	d001      	beq.n	19c4c <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   19c48:	2000      	movs	r0, #0
   19c4a:	4770      	bx	lr
                        return true;
   19c4c:	2001      	movs	r0, #1
    #endif
}
   19c4e:	4770      	bx	lr
   19c50:	10000130 	.word	0x10000130

00019c54 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19c54:	4b08      	ldr	r3, [pc, #32]	; (19c78 <nrf52_errata_98+0x24>)
   19c56:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19c58:	3304      	adds	r3, #4
   19c5a:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19c5c:	2a08      	cmp	r2, #8
   19c5e:	d001      	beq.n	19c64 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19c60:	2000      	movs	r0, #0
   19c62:	4770      	bx	lr
                switch(var2)
   19c64:	2b00      	cmp	r3, #0
   19c66:	d804      	bhi.n	19c72 <nrf52_errata_98+0x1e>
   19c68:	e8df f003 	tbb	[pc, r3]
   19c6c:	01          	.byte	0x01
   19c6d:	00          	.byte	0x00
            if (var1 == 0x08)
   19c6e:	2001      	movs	r0, #1
   19c70:	4770      	bx	lr
                        return false;
   19c72:	2000      	movs	r0, #0
    #endif
}
   19c74:	4770      	bx	lr
   19c76:	bf00      	nop
   19c78:	10000130 	.word	0x10000130

00019c7c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19c7c:	4b08      	ldr	r3, [pc, #32]	; (19ca0 <nrf52_errata_103+0x24>)
   19c7e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19c80:	3304      	adds	r3, #4
   19c82:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19c84:	2a08      	cmp	r2, #8
   19c86:	d001      	beq.n	19c8c <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19c88:	2000      	movs	r0, #0
   19c8a:	4770      	bx	lr
                switch(var2)
   19c8c:	2b00      	cmp	r3, #0
   19c8e:	d804      	bhi.n	19c9a <nrf52_errata_103+0x1e>
   19c90:	e8df f003 	tbb	[pc, r3]
   19c94:	01          	.byte	0x01
   19c95:	00          	.byte	0x00
            if (var1 == 0x08)
   19c96:	2001      	movs	r0, #1
   19c98:	4770      	bx	lr
                        return false;
   19c9a:	2000      	movs	r0, #0
    #endif
}
   19c9c:	4770      	bx	lr
   19c9e:	bf00      	nop
   19ca0:	10000130 	.word	0x10000130

00019ca4 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19ca4:	4b08      	ldr	r3, [pc, #32]	; (19cc8 <nrf52_errata_115+0x24>)
   19ca6:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19ca8:	3304      	adds	r3, #4
   19caa:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19cac:	2a08      	cmp	r2, #8
   19cae:	d001      	beq.n	19cb4 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19cb0:	2000      	movs	r0, #0
   19cb2:	4770      	bx	lr
                switch(var2)
   19cb4:	2b00      	cmp	r3, #0
   19cb6:	d804      	bhi.n	19cc2 <nrf52_errata_115+0x1e>
   19cb8:	e8df f003 	tbb	[pc, r3]
   19cbc:	01          	.byte	0x01
   19cbd:	00          	.byte	0x00
            if (var1 == 0x08)
   19cbe:	2001      	movs	r0, #1
   19cc0:	4770      	bx	lr
                        return false;
   19cc2:	2000      	movs	r0, #0
    #endif
}
   19cc4:	4770      	bx	lr
   19cc6:	bf00      	nop
   19cc8:	10000130 	.word	0x10000130

00019ccc <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19ccc:	4b08      	ldr	r3, [pc, #32]	; (19cf0 <nrf52_errata_120+0x24>)
   19cce:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19cd0:	3304      	adds	r3, #4
   19cd2:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19cd4:	2a08      	cmp	r2, #8
   19cd6:	d001      	beq.n	19cdc <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19cd8:	2000      	movs	r0, #0
   19cda:	4770      	bx	lr
                switch(var2)
   19cdc:	2b00      	cmp	r3, #0
   19cde:	d804      	bhi.n	19cea <nrf52_errata_120+0x1e>
   19ce0:	e8df f003 	tbb	[pc, r3]
   19ce4:	01          	.byte	0x01
   19ce5:	00          	.byte	0x00
            if (var1 == 0x08)
   19ce6:	2001      	movs	r0, #1
   19ce8:	4770      	bx	lr
                        return false;
   19cea:	2000      	movs	r0, #0
    #endif
}
   19cec:	4770      	bx	lr
   19cee:	bf00      	nop
   19cf0:	10000130 	.word	0x10000130

00019cf4 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19cf4:	4b03      	ldr	r3, [pc, #12]	; (19d04 <nrf52_errata_136+0x10>)
   19cf6:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19cf8:	2b08      	cmp	r3, #8
   19cfa:	d001      	beq.n	19d00 <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   19cfc:	2000      	movs	r0, #0
   19cfe:	4770      	bx	lr
                        return true;
   19d00:	2001      	movs	r0, #1
    #endif
}
   19d02:	4770      	bx	lr
   19d04:	10000130 	.word	0x10000130

00019d08 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19d08:	4b06      	ldr	r3, [pc, #24]	; (19d24 <nrf52_errata_249+0x1c>)
   19d0a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19d0c:	4a06      	ldr	r2, [pc, #24]	; (19d28 <nrf52_errata_249+0x20>)
   19d0e:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19d10:	2b08      	cmp	r3, #8
   19d12:	d001      	beq.n	19d18 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   19d14:	2000      	movs	r0, #0
   19d16:	4770      	bx	lr
                switch(var2)
   19d18:	2a03      	cmp	r2, #3
   19d1a:	d801      	bhi.n	19d20 <nrf52_errata_249+0x18>
   19d1c:	2000      	movs	r0, #0
   19d1e:	4770      	bx	lr
                        return true;
   19d20:	2001      	movs	r0, #1
    #endif
}
   19d22:	4770      	bx	lr
   19d24:	10000130 	.word	0x10000130
   19d28:	10000134 	.word	0x10000134

00019d2c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19d2c:	4b02      	ldr	r3, [pc, #8]	; (19d38 <nvmc_wait+0xc>)
   19d2e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   19d32:	2b00      	cmp	r3, #0
   19d34:	d0fa      	beq.n	19d2c <nvmc_wait>
}
   19d36:	4770      	bx	lr
   19d38:	4001e000 	.word	0x4001e000

00019d3c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   19d3c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19d3e:	4b03      	ldr	r3, [pc, #12]	; (19d4c <nvmc_config+0x10>)
   19d40:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   19d44:	f7ff fff2 	bl	19d2c <nvmc_wait>
}
   19d48:	bd08      	pop	{r3, pc}
   19d4a:	bf00      	nop
   19d4c:	4001e000 	.word	0x4001e000

00019d50 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19d50:	4b01      	ldr	r3, [pc, #4]	; (19d58 <SystemCoreClockUpdate+0x8>)
   19d52:	4a02      	ldr	r2, [pc, #8]	; (19d5c <SystemCoreClockUpdate+0xc>)
   19d54:	601a      	str	r2, [r3, #0]
}
   19d56:	4770      	bx	lr
   19d58:	20033a74 	.word	0x20033a74
   19d5c:	03d09000 	.word	0x03d09000

00019d60 <SystemInit>:

void SystemInit(void)
{
   19d60:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19d62:	f7ff ff63 	bl	19c2c <nrf52_errata_36>
   19d66:	b140      	cbz	r0, 19d7a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19d6c:	2200      	movs	r2, #0
   19d6e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19d72:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19d76:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19d7a:	f7ff ff61 	bl	19c40 <nrf52_errata_66>
   19d7e:	2800      	cmp	r0, #0
   19d80:	d046      	beq.n	19e10 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19d86:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19d8a:	4b56      	ldr	r3, [pc, #344]	; (19ee4 <SystemInit+0x184>)
   19d8c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19d90:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19d94:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19d98:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19d9c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19da0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19da4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19da8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19dac:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19db0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19db4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19db8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19dbc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19dc0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19dc4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19dc8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19dcc:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19dd0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19dd4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19dd8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19ddc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19de0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19de4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19de8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19dec:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19df0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19df4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19df8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19dfc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19e00:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19e04:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19e08:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19e0c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   19e10:	f7ff ff20 	bl	19c54 <nrf52_errata_98>
   19e14:	b110      	cbz	r0, 19e1c <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   19e16:	4b34      	ldr	r3, [pc, #208]	; (19ee8 <SystemInit+0x188>)
   19e18:	4a34      	ldr	r2, [pc, #208]	; (19eec <SystemInit+0x18c>)
   19e1a:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   19e1c:	f7ff ff2e 	bl	19c7c <nrf52_errata_103>
   19e20:	b118      	cbz	r0, 19e2a <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19e22:	4b33      	ldr	r3, [pc, #204]	; (19ef0 <SystemInit+0x190>)
   19e24:	22fb      	movs	r2, #251	; 0xfb
   19e26:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19e2a:	f7ff ff3b 	bl	19ca4 <nrf52_errata_115>
   19e2e:	b148      	cbz	r0, 19e44 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   19e30:	4930      	ldr	r1, [pc, #192]	; (19ef4 <SystemInit+0x194>)
   19e32:	680b      	ldr	r3, [r1, #0]
   19e34:	f023 030f 	bic.w	r3, r3, #15
   19e38:	4a2f      	ldr	r2, [pc, #188]	; (19ef8 <SystemInit+0x198>)
   19e3a:	6812      	ldr	r2, [r2, #0]
   19e3c:	f002 020f 	and.w	r2, r2, #15
   19e40:	4313      	orrs	r3, r2
   19e42:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19e44:	f7ff ff42 	bl	19ccc <nrf52_errata_120>
   19e48:	b118      	cbz	r0, 19e52 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   19e4a:	4b2c      	ldr	r3, [pc, #176]	; (19efc <SystemInit+0x19c>)
   19e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   19e50:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19e52:	f7ff ff4f 	bl	19cf4 <nrf52_errata_136>
   19e56:	b160      	cbz	r0, 19e72 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19e5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   19e60:	f013 0f01 	tst.w	r3, #1
   19e64:	d005      	beq.n	19e72 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19e6a:	f06f 0201 	mvn.w	r2, #1
   19e6e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   19e72:	f7ff ff49 	bl	19d08 <nrf52_errata_249>
   19e76:	b138      	cbz	r0, 19e88 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19e78:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19e7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   19e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19e84:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19e88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19e8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   19e90:	2b00      	cmp	r3, #0
   19e92:	db08      	blt.n	19ea6 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19e94:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19e98:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19e9c:	2b00      	cmp	r3, #0
   19e9e:	db02      	blt.n	19ea6 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   19ea0:	f7ff ff56 	bl	19d50 <SystemCoreClockUpdate>
}
   19ea4:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   19ea6:	2001      	movs	r0, #1
   19ea8:	f7ff ff48 	bl	19d3c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19eac:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   19eb0:	2512      	movs	r5, #18
   19eb2:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   19eb6:	f7ff ff39 	bl	19d2c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19eba:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   19ebe:	f7ff ff35 	bl	19d2c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   19ec2:	2000      	movs	r0, #0
   19ec4:	f7ff ff3a 	bl	19d3c <nvmc_config>
   19ec8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19ecc:	490c      	ldr	r1, [pc, #48]	; (19f00 <SystemInit+0x1a0>)
   19ece:	68ca      	ldr	r2, [r1, #12]
   19ed0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19ed4:	4b0b      	ldr	r3, [pc, #44]	; (19f04 <SystemInit+0x1a4>)
   19ed6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19ed8:	60cb      	str	r3, [r1, #12]
   19eda:	f3bf 8f4f 	dsb	sy
    __NOP();
   19ede:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19ee0:	e7fd      	b.n	19ede <SystemInit+0x17e>
   19ee2:	bf00      	nop
   19ee4:	4000c000 	.word	0x4000c000
   19ee8:	4000568c 	.word	0x4000568c
   19eec:	00038148 	.word	0x00038148
   19ef0:	4000f000 	.word	0x4000f000
   19ef4:	40000ee4 	.word	0x40000ee4
   19ef8:	10000258 	.word	0x10000258
   19efc:	40029640 	.word	0x40029640
   19f00:	e000ed00 	.word	0xe000ed00
   19f04:	05fa0004 	.word	0x05fa0004

00019f08 <pin_in_use>:

static gpiote_control_block_t m_cb;

static bool pin_in_use(uint32_t pin)
{
    return (m_cb.pin_assignments[pin] != PIN_NOT_USED);
   19f08:	4b03      	ldr	r3, [pc, #12]	; (19f18 <pin_in_use+0x10>)
   19f0a:	4403      	add	r3, r0
   19f0c:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
   19f10:	3001      	adds	r0, #1
   19f12:	bf18      	it	ne
   19f14:	2001      	movne	r0, #1
   19f16:	4770      	bx	lr
   19f18:	20037264 	.word	0x20037264

00019f1c <pin_in_use_by_te>:
}


static bool pin_in_use_by_te(uint32_t pin)
{
    return (m_cb.pin_assignments[pin] >= 0 && m_cb.pin_assignments[pin] < GPIOTE_CH_NUM) ?
   19f1c:	4b04      	ldr	r3, [pc, #16]	; (19f30 <pin_in_use_by_te+0x14>)
   19f1e:	4403      	add	r3, r0
   19f20:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
   19f24:	b2c0      	uxtb	r0, r0
            true : false;
}
   19f26:	2807      	cmp	r0, #7
   19f28:	bf8c      	ite	hi
   19f2a:	2000      	movhi	r0, #0
   19f2c:	2001      	movls	r0, #1
   19f2e:	4770      	bx	lr
   19f30:	20037264 	.word	0x20037264

00019f34 <pin_in_use_by_port>:


static bool pin_in_use_by_port(uint32_t pin)
{
    return (m_cb.pin_assignments[pin] >= GPIOTE_CH_NUM);
   19f34:	4b04      	ldr	r3, [pc, #16]	; (19f48 <pin_in_use_by_port+0x14>)
   19f36:	4403      	add	r3, r0
   19f38:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
   19f3c:	2807      	cmp	r0, #7
   19f3e:	bfd4      	ite	le
   19f40:	2000      	movle	r0, #0
   19f42:	2001      	movgt	r0, #1
   19f44:	4770      	bx	lr
   19f46:	bf00      	nop
   19f48:	20037264 	.word	0x20037264

00019f4c <pin_in_use_by_gpiote>:


static bool pin_in_use_by_gpiote(uint32_t pin)
{
    return (m_cb.pin_assignments[pin] >= 0);
   19f4c:	4b03      	ldr	r3, [pc, #12]	; (19f5c <pin_in_use_by_gpiote+0x10>)
   19f4e:	4403      	add	r3, r0
   19f50:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
   19f54:	43c0      	mvns	r0, r0
   19f56:	0fc0      	lsrs	r0, r0, #31
   19f58:	4770      	bx	lr
   19f5a:	bf00      	nop
   19f5c:	20037264 	.word	0x20037264

00019f60 <pin_in_use_by_te_set>:

static void pin_in_use_by_te_set(uint32_t                  pin,
                                 uint32_t                  channel_id,
                                 nrfx_gpiote_evt_handler_t handler,
                                 bool                      is_channel)
{
   19f60:	b430      	push	{r4, r5}
    m_cb.pin_assignments[pin] = channel_id;
   19f62:	4c06      	ldr	r4, [pc, #24]	; (19f7c <pin_in_use_by_te_set+0x1c>)
   19f64:	1825      	adds	r5, r4, r0
   19f66:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
    m_cb.handlers[channel_id] = handler;
   19f6a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
    if (!is_channel)
   19f6e:	b91b      	cbnz	r3, 19f78 <pin_in_use_by_te_set+0x18>
    {
        m_cb.port_handlers_pins[channel_id - GPIOTE_CH_NUM] = (int8_t)pin;
   19f70:	3908      	subs	r1, #8
   19f72:	4421      	add	r1, r4
   19f74:	f881 0054 	strb.w	r0, [r1, #84]	; 0x54
    }
}
   19f78:	bc30      	pop	{r4, r5}
   19f7a:	4770      	bx	lr
   19f7c:	20037264 	.word	0x20037264

00019f80 <pin_in_use_set>:


static void pin_in_use_set(uint32_t pin)
{
    m_cb.pin_assignments[pin] = PIN_USED;
   19f80:	4b02      	ldr	r3, [pc, #8]	; (19f8c <pin_in_use_set+0xc>)
   19f82:	4403      	add	r3, r0
   19f84:	22fe      	movs	r2, #254	; 0xfe
   19f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
   19f8a:	4770      	bx	lr
   19f8c:	20037264 	.word	0x20037264

00019f90 <pin_in_use_clear>:


static void pin_in_use_clear(uint32_t pin)
{
    m_cb.pin_assignments[pin] = PIN_NOT_USED;
   19f90:	4b02      	ldr	r3, [pc, #8]	; (19f9c <pin_in_use_clear+0xc>)
   19f92:	4403      	add	r3, r0
   19f94:	22ff      	movs	r2, #255	; 0xff
   19f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
   19f9a:	4770      	bx	lr
   19f9c:	20037264 	.word	0x20037264

00019fa0 <pin_configured_set>:
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_set(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   19fa0:	08c2      	lsrs	r2, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   19fa2:	f000 0007 	and.w	r0, r0, #7
    p_mask8[byte_idx] |= (1 << bit);
   19fa6:	4903      	ldr	r1, [pc, #12]	; (19fb4 <pin_configured_set+0x14>)
   19fa8:	2301      	movs	r3, #1
   19faa:	4083      	lsls	r3, r0
   19fac:	5c88      	ldrb	r0, [r1, r2]
   19fae:	4318      	orrs	r0, r3
   19fb0:	5488      	strb	r0, [r1, r2]


static void pin_configured_set(uint32_t pin)
{
    nrf_bitmask_bit_set(pin, m_cb.configured_pins);
}
   19fb2:	4770      	bx	lr
   19fb4:	200372b9 	.word	0x200372b9

00019fb8 <channel_port_get>:
    return 0 != nrf_bitmask_bit_is_set(pin, m_cb.configured_pins);
}

static int8_t channel_port_get(uint32_t pin)
{
    return m_cb.pin_assignments[pin];
   19fb8:	4b02      	ldr	r3, [pc, #8]	; (19fc4 <channel_port_get+0xc>)
   19fba:	4403      	add	r3, r0
}
   19fbc:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
   19fc0:	4770      	bx	lr
   19fc2:	bf00      	nop
   19fc4:	20037264 	.word	0x20037264

00019fc8 <channel_handler_get>:


static nrfx_gpiote_evt_handler_t channel_handler_get(uint32_t channel)
{
    if ((m_cb.handlers[channel] != UNALLOCATED_HANDLER_ADDRESS)
   19fc8:	4b04      	ldr	r3, [pc, #16]	; (19fdc <channel_handler_get+0x14>)
   19fca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
        && (m_cb.handlers[channel] != ALLOCATED_HANDLER_ADDRESS))
   19fce:	1c83      	adds	r3, r0, #2
    if ((m_cb.handlers[channel] != UNALLOCATED_HANDLER_ADDRESS)
   19fd0:	2b01      	cmp	r3, #1
   19fd2:	d900      	bls.n	19fd6 <channel_handler_get+0xe>
    }
    else
    {
        return NULL;
    }
}
   19fd4:	4770      	bx	lr
        return NULL;
   19fd6:	2000      	movs	r0, #0
   19fd8:	e7fc      	b.n	19fd4 <channel_handler_get+0xc>
   19fda:	bf00      	nop
   19fdc:	20037264 	.word	0x20037264

00019fe0 <port_handler_pin_get>:

static nrfx_gpiote_pin_t port_handler_pin_get(uint32_t handler_idx)
{
    uint8_t pin_and_polarity = (uint8_t)m_cb.port_handlers_pins[handler_idx];
   19fe0:	4b03      	ldr	r3, [pc, #12]	; (19ff0 <port_handler_pin_get+0x10>)
   19fe2:	4403      	add	r3, r0
   19fe4:	f993 0054 	ldrsb.w	r0, [r3, #84]	; 0x54
    return (nrfx_gpiote_pin_t)(pin_and_polarity & ~POLARITY_FIELD_MASK);
}
   19fe8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   19fec:	4770      	bx	lr
   19fee:	bf00      	nop
   19ff0:	20037264 	.word	0x20037264

00019ff4 <port_handler_polarity_get>:

static nrf_gpiote_polarity_t port_handler_polarity_get(uint32_t handler_idx)
{
    uint8_t pin_and_polarity = (uint8_t)m_cb.port_handlers_pins[handler_idx];
   19ff4:	4b03      	ldr	r3, [pc, #12]	; (1a004 <port_handler_polarity_get+0x10>)
   19ff6:	4403      	add	r3, r0
   19ff8:	f993 0054 	ldrsb.w	r0, [r3, #84]	; 0x54
    return (nrf_gpiote_polarity_t)((pin_and_polarity & POLARITY_FIELD_MASK) >> POLARITY_FIELD_POS);
}
   19ffc:	f3c0 1081 	ubfx	r0, r0, #6, #2
   1a000:	4770      	bx	lr
   1a002:	bf00      	nop
   1a004:	20037264 	.word	0x20037264

0001a008 <low_accuracy_channel_alloc>:
	__asm__ volatile(
   1a008:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a00c:	f3ef 8311 	mrs	r3, BASEPRI
   1a010:	f382 8811 	msr	BASEPRI, r2
   1a014:	f3bf 8f6f 	isb	sy
static bool low_accuracy_channel_alloc(uint8_t channel_id)
{
    bool ret = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_cb.handlers[channel_id] == UNALLOCATED_HANDLER_ADDRESS)
   1a018:	4a09      	ldr	r2, [pc, #36]	; (1a040 <low_accuracy_channel_alloc+0x38>)
   1a01a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   1a01e:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a022:	d005      	beq.n	1a030 <low_accuracy_channel_alloc+0x28>
    bool ret = false;
   1a024:	2000      	movs	r0, #0
	__asm__ volatile(
   1a026:	f383 8811 	msr	BASEPRI, r3
   1a02a:	f3bf 8f6f 	isb	sy
        ret = true;
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return ret;
}
   1a02e:	4770      	bx	lr
        m_cb.handlers[channel_id] = ALLOCATED_HANDLER_ADDRESS;
   1a030:	4a03      	ldr	r2, [pc, #12]	; (1a040 <low_accuracy_channel_alloc+0x38>)
   1a032:	f06f 0101 	mvn.w	r1, #1
   1a036:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        ret = true;
   1a03a:	2001      	movs	r0, #1
   1a03c:	e7f3      	b.n	1a026 <low_accuracy_channel_alloc+0x1e>
   1a03e:	bf00      	nop
   1a040:	20037264 	.word	0x20037264

0001a044 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
   1a044:	4b04      	ldr	r3, [pc, #16]	; (1a058 <is_allocated_channel+0x14>)
   1a046:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1a048:	2301      	movs	r3, #1
   1a04a:	4083      	lsls	r3, r0
   1a04c:	421a      	tst	r2, r3
}
   1a04e:	bf14      	ite	ne
   1a050:	2001      	movne	r0, #1
   1a052:	2000      	moveq	r0, #0
   1a054:	4770      	bx	lr
   1a056:	bf00      	nop
   1a058:	20037264 	.word	0x20037264

0001a05c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
   1a05c:	2301      	movs	r3, #1
   1a05e:	fa03 f000 	lsl.w	r0, r3, r0
   1a062:	4a02      	ldr	r2, [pc, #8]	; (1a06c <channel_allocated_set+0x10>)
   1a064:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1a066:	4303      	orrs	r3, r0
   1a068:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   1a06a:	4770      	bx	lr
   1a06c:	20037264 	.word	0x20037264

0001a070 <latch_pending_read_and_check>:
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   1a070:	b410      	push	{r4}
   1a072:	b083      	sub	sp, #12
   1a074:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1a076:	4b12      	ldr	r3, [pc, #72]	; (1a0c0 <latch_pending_read_and_check+0x50>)
   1a078:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a07c:	ab02      	add	r3, sp, #8
   1a07e:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1a082:	4620      	mov	r0, r4
   1a084:	2300      	movs	r3, #0
   1a086:	e00b      	b.n	1a0a0 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   1a088:	aa02      	add	r2, sp, #8
   1a08a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1a08e:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1a092:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1a096:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1a09a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1a09e:	3301      	adds	r3, #1
   1a0a0:	2b01      	cmp	r3, #1
   1a0a2:	d9f1      	bls.n	1a088 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1a0a4:	2300      	movs	r3, #0
   1a0a6:	2b01      	cmp	r3, #1
   1a0a8:	d804      	bhi.n	1a0b4 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   1a0aa:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1a0ae:	b92a      	cbnz	r2, 1a0bc <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1a0b0:	3301      	adds	r3, #1
   1a0b2:	e7f8      	b.n	1a0a6 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1a0b4:	2000      	movs	r0, #0
}
   1a0b6:	b003      	add	sp, #12
   1a0b8:	bc10      	pop	{r4}
   1a0ba:	4770      	bx	lr
            return true;
   1a0bc:	2001      	movs	r0, #1
   1a0be:	e7fa      	b.n	1a0b6 <latch_pending_read_and_check+0x46>
   1a0c0:	00025698 	.word	0x00025698

0001a0c4 <port_event_handle>:

static void port_event_handle(uint32_t * latch)
{
   1a0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0c8:	4606      	mov	r6, r0
    do {
        for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS; i++)
   1a0ca:	2400      	movs	r4, #0
   1a0cc:	b134      	cbz	r4, 1a0dc <port_event_handle+0x18>
                {
                    handler(pin, polarity);
                }
            }
        }
    } while (latch_pending_read_and_check(latch));
   1a0ce:	4630      	mov	r0, r6
   1a0d0:	f7ff ffce 	bl	1a070 <latch_pending_read_and_check>
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d1f8      	bne.n	1a0ca <port_event_handle+0x6>
}
   1a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (m_cb.port_handlers_pins[i] == PIN_NOT_USED)
   1a0dc:	4b2a      	ldr	r3, [pc, #168]	; (1a188 <port_event_handle+0xc4>)
   1a0de:	4423      	add	r3, r4
   1a0e0:	f993 3054 	ldrsb.w	r3, [r3, #84]	; 0x54
   1a0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a0e8:	d04b      	beq.n	1a182 <port_event_handle+0xbe>
            nrfx_gpiote_pin_t pin = port_handler_pin_get(i);
   1a0ea:	4620      	mov	r0, r4
   1a0ec:	f7ff ff78 	bl	19fe0 <port_handler_pin_get>
   1a0f0:	4605      	mov	r5, r0
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1a0f2:	08c3      	lsrs	r3, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1a0f4:	f000 0207 	and.w	r2, r0, #7
    return ((1U << bit) & p_mask8[byte_idx]) != 0U;
   1a0f8:	5cf3      	ldrb	r3, [r6, r3]
   1a0fa:	40d3      	lsrs	r3, r2
            if (nrf_bitmask_bit_is_set(pin, latch))
   1a0fc:	f013 0f01 	tst.w	r3, #1
   1a100:	d03f      	beq.n	1a182 <port_event_handle+0xbe>
                nrf_gpiote_polarity_t polarity = port_handler_polarity_get(i);
   1a102:	4620      	mov	r0, r4
   1a104:	f7ff ff76 	bl	19ff4 <port_handler_polarity_get>
   1a108:	4680      	mov	r8, r0
    *p_pin = pin_number & 0x1F;
   1a10a:	f005 011f 	and.w	r1, r5, #31
    return pin_number >> 5;
   1a10e:	096b      	lsrs	r3, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a110:	2b01      	cmp	r3, #1
   1a112:	d02b      	beq.n	1a16c <port_event_handle+0xa8>
        case 0: return NRF_P0;
   1a114:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a118:	f501 73e0 	add.w	r3, r1, #448	; 0x1c0
   1a11c:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   1a120:	f3c7 4701 	ubfx	r7, r7, #16, #2
                    (sense == NRF_GPIO_PIN_SENSE_HIGH) ? NRF_GPIO_PIN_SENSE_LOW :
   1a124:	2f02      	cmp	r7, #2
   1a126:	d023      	beq.n	1a170 <port_event_handle+0xac>
   1a128:	f04f 0c02 	mov.w	ip, #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a12c:	f501 70e0 	add.w	r0, r1, #448	; 0x1c0
   1a130:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1a134:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a138:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   1a13c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    reg->LATCH = (1 << pin_number);
   1a140:	2301      	movs	r3, #1
   1a142:	408b      	lsls	r3, r1
   1a144:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
                    channel_handler_get((uint32_t)channel_port_get(pin));
   1a148:	4628      	mov	r0, r5
   1a14a:	f7ff ff35 	bl	19fb8 <channel_port_get>
   1a14e:	f7ff ff3b 	bl	19fc8 <channel_handler_get>
                if (handler &&
   1a152:	4603      	mov	r3, r0
   1a154:	b1a8      	cbz	r0, 1a182 <port_event_handle+0xbe>
   1a156:	f1b8 0f03 	cmp.w	r8, #3
   1a15a:	d00f      	beq.n	1a17c <port_event_handle+0xb8>
                    ((polarity == NRF_GPIOTE_POLARITY_TOGGLE) ||
   1a15c:	2f02      	cmp	r7, #2
   1a15e:	d00a      	beq.n	1a176 <port_event_handle+0xb2>
                     (sense == NRF_GPIO_PIN_SENSE_HIGH && polarity == NRF_GPIOTE_POLARITY_LOTOHI) ||
   1a160:	2f03      	cmp	r7, #3
   1a162:	d10e      	bne.n	1a182 <port_event_handle+0xbe>
                     (sense == NRF_GPIO_PIN_SENSE_LOW && polarity == NRF_GPIOTE_POLARITY_HITOLO)))
   1a164:	f1b8 0f02 	cmp.w	r8, #2
   1a168:	d10b      	bne.n	1a182 <port_event_handle+0xbe>
   1a16a:	e007      	b.n	1a17c <port_event_handle+0xb8>
        case 1: return NRF_P1;
   1a16c:	4a07      	ldr	r2, [pc, #28]	; (1a18c <port_event_handle+0xc8>)
   1a16e:	e7d3      	b.n	1a118 <port_event_handle+0x54>
                    (sense == NRF_GPIO_PIN_SENSE_HIGH) ? NRF_GPIO_PIN_SENSE_LOW :
   1a170:	f04f 0c03 	mov.w	ip, #3
   1a174:	e7da      	b.n	1a12c <port_event_handle+0x68>
                     (sense == NRF_GPIO_PIN_SENSE_HIGH && polarity == NRF_GPIOTE_POLARITY_LOTOHI) ||
   1a176:	f1b8 0f01 	cmp.w	r8, #1
   1a17a:	d1f1      	bne.n	1a160 <port_event_handle+0x9c>
                    handler(pin, polarity);
   1a17c:	4641      	mov	r1, r8
   1a17e:	4628      	mov	r0, r5
   1a180:	4798      	blx	r3
        for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS; i++)
   1a182:	3401      	adds	r4, #1
   1a184:	e7a2      	b.n	1a0cc <port_event_handle+0x8>
   1a186:	bf00      	nop
   1a188:	20037264 	.word	0x20037264
   1a18c:	50000300 	.word	0x50000300

0001a190 <nrfx_gpiote_init>:
{
   1a190:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1a192:	4b26      	ldr	r3, [pc, #152]	; (1a22c <nrfx_gpiote_init+0x9c>)
   1a194:	f893 505b 	ldrb.w	r5, [r3, #91]	; 0x5b
   1a198:	2d00      	cmp	r5, #0
   1a19a:	d144      	bne.n	1a226 <nrfx_gpiote_init+0x96>
    for (i = 0; i < MAX_PIN_NUMBER; i++)
   1a19c:	462c      	mov	r4, r5
   1a19e:	e00b      	b.n	1a1b8 <nrfx_gpiote_init+0x28>
            mask = P0_FEATURE_PINS_PRESENT;
   1a1a0:	f04f 33ff 	mov.w	r3, #4294967295
   1a1a4:	e000      	b.n	1a1a8 <nrfx_gpiote_init+0x18>
    switch (port)
   1a1a6:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   1a1a8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1a1ac:	40d3      	lsrs	r3, r2
        if (nrf_gpio_pin_present_check(i))
   1a1ae:	f013 0f01 	tst.w	r3, #1
   1a1b2:	d10b      	bne.n	1a1cc <nrfx_gpiote_init+0x3c>
    for (i = 0; i < MAX_PIN_NUMBER; i++)
   1a1b4:	3401      	adds	r4, #1
   1a1b6:	b2e4      	uxtb	r4, r4
   1a1b8:	2c2f      	cmp	r4, #47	; 0x2f
   1a1ba:	d80c      	bhi.n	1a1d6 <nrfx_gpiote_init+0x46>
        if (nrf_gpio_pin_present_check(i))
   1a1bc:	4620      	mov	r0, r4
    switch (port)
   1a1be:	0963      	lsrs	r3, r4, #5
   1a1c0:	d0ee      	beq.n	1a1a0 <nrfx_gpiote_init+0x10>
   1a1c2:	2b01      	cmp	r3, #1
   1a1c4:	d1ef      	bne.n	1a1a6 <nrfx_gpiote_init+0x16>
            mask = P1_FEATURE_PINS_PRESENT;
   1a1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a1ca:	e7ed      	b.n	1a1a8 <nrfx_gpiote_init+0x18>
            pin_in_use_clear(i);
   1a1cc:	f7ff fee0 	bl	19f90 <pin_in_use_clear>
   1a1d0:	e7f0      	b.n	1a1b4 <nrfx_gpiote_init+0x24>
    for (i = 0; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
   1a1d2:	3501      	adds	r5, #1
   1a1d4:	b2ed      	uxtb	r5, r5
   1a1d6:	2d08      	cmp	r5, #8
   1a1d8:	d80d      	bhi.n	1a1f6 <nrfx_gpiote_init+0x66>
        m_cb.handlers[i] = UNALLOCATED_HANDLER_ADDRESS;
   1a1da:	4b14      	ldr	r3, [pc, #80]	; (1a22c <nrfx_gpiote_init+0x9c>)
   1a1dc:	f04f 32ff 	mov.w	r2, #4294967295
   1a1e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
        if (i >= GPIOTE_CH_NUM)
   1a1e4:	2d07      	cmp	r5, #7
   1a1e6:	d9f4      	bls.n	1a1d2 <nrfx_gpiote_init+0x42>
            m_cb.port_handlers_pins[i - GPIOTE_CH_NUM] = (int8_t)PIN_NOT_USED;
   1a1e8:	f1a5 0208 	sub.w	r2, r5, #8
   1a1ec:	4413      	add	r3, r2
   1a1ee:	22ff      	movs	r2, #255	; 0xff
   1a1f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
   1a1f4:	e7ed      	b.n	1a1d2 <nrfx_gpiote_init+0x42>
    memset(m_cb.configured_pins, 0, sizeof(m_cb.configured_pins));
   1a1f6:	4c0d      	ldr	r4, [pc, #52]	; (1a22c <nrfx_gpiote_init+0x9c>)
   1a1f8:	2206      	movs	r2, #6
   1a1fa:	2100      	movs	r1, #0
   1a1fc:	f104 0055 	add.w	r0, r4, #85	; 0x55
   1a200:	f007 f9b5 	bl	2156e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1a204:	2006      	movs	r0, #6
   1a206:	f7f8 fb2b 	bl	12860 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a20a:	4b09      	ldr	r3, [pc, #36]	; (1a230 <nrfx_gpiote_init+0xa0>)
   1a20c:	2200      	movs	r2, #0
   1a20e:	601a      	str	r2, [r3, #0]
   1a210:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a212:	4b08      	ldr	r3, [pc, #32]	; (1a234 <nrfx_gpiote_init+0xa4>)
   1a214:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a218:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1a21c:	2301      	movs	r3, #1
   1a21e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    return err_code;
   1a222:	4805      	ldr	r0, [pc, #20]	; (1a238 <nrfx_gpiote_init+0xa8>)
}
   1a224:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1a226:	4805      	ldr	r0, [pc, #20]	; (1a23c <nrfx_gpiote_init+0xac>)
   1a228:	e7fc      	b.n	1a224 <nrfx_gpiote_init+0x94>
   1a22a:	bf00      	nop
   1a22c:	20037264 	.word	0x20037264
   1a230:	4000617c 	.word	0x4000617c
   1a234:	40006000 	.word	0x40006000
   1a238:	0bad0000 	.word	0x0bad0000
   1a23c:	0bad0005 	.word	0x0bad0005

0001a240 <nrfx_gpiote_channel_alloc>:
{
   1a240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a244:	4680      	mov	r8, r0
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a246:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1a248:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1a24a:	4f17      	ldr	r7, [pc, #92]	; (1a2a8 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a24c:	e013      	b.n	1a276 <nrfx_gpiote_channel_alloc+0x36>
            channel_allocated_set(ch_idx);
   1a24e:	4620      	mov	r0, r4
   1a250:	f7ff ff04 	bl	1a05c <channel_allocated_set>
            *p_channel = ch_idx;
   1a254:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
   1a258:	4f14      	ldr	r7, [pc, #80]	; (1a2ac <nrfx_gpiote_channel_alloc+0x6c>)
   1a25a:	f386 8811 	msr	BASEPRI, r6
   1a25e:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1a262:	4b12      	ldr	r3, [pc, #72]	; (1a2ac <nrfx_gpiote_channel_alloc+0x6c>)
   1a264:	429f      	cmp	r7, r3
   1a266:	d01b      	beq.n	1a2a0 <nrfx_gpiote_channel_alloc+0x60>
        mask &= ~(1UL << ch_idx);
   1a268:	2301      	movs	r3, #1
   1a26a:	fa03 f309 	lsl.w	r3, r3, r9
   1a26e:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a272:	3401      	adds	r4, #1
   1a274:	b2e4      	uxtb	r4, r4
   1a276:	b19d      	cbz	r5, 1a2a0 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
   1a278:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a27c:	f3ef 8611 	mrs	r6, BASEPRI
   1a280:	f383 8811 	msr	BASEPRI, r3
   1a284:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1a288:	46a1      	mov	r9, r4
   1a28a:	fa25 f304 	lsr.w	r3, r5, r4
   1a28e:	f013 0f01 	tst.w	r3, #1
   1a292:	d0e2      	beq.n	1a25a <nrfx_gpiote_channel_alloc+0x1a>
   1a294:	4620      	mov	r0, r4
   1a296:	f7ff fed5 	bl	1a044 <is_allocated_channel>
   1a29a:	2800      	cmp	r0, #0
   1a29c:	d1dd      	bne.n	1a25a <nrfx_gpiote_channel_alloc+0x1a>
   1a29e:	e7d6      	b.n	1a24e <nrfx_gpiote_channel_alloc+0xe>
}
   1a2a0:	4638      	mov	r0, r7
   1a2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a2a6:	bf00      	nop
   1a2a8:	0bad0002 	.word	0x0bad0002
   1a2ac:	0bad0000 	.word	0x0bad0000

0001a2b0 <accuracy_channel_alloc>:
{
   1a2b0:	b510      	push	{r4, lr}
   1a2b2:	b082      	sub	sp, #8
    if (hi_accuracy)
   1a2b4:	b930      	cbnz	r0, 1a2c4 <accuracy_channel_alloc+0x14>
        for (uint8_t i = GPIOTE_CH_NUM; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
   1a2b6:	2408      	movs	r4, #8
   1a2b8:	2c08      	cmp	r4, #8
   1a2ba:	d910      	bls.n	1a2de <accuracy_channel_alloc+0x2e>
    int8_t channel_id = NO_CHANNELS;
   1a2bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   1a2c0:	b002      	add	sp, #8
   1a2c2:	bd10      	pop	{r4, pc}
        if (nrfx_gpiote_channel_alloc(&i) == NRFX_SUCCESS)
   1a2c4:	f10d 0007 	add.w	r0, sp, #7
   1a2c8:	f7ff ffba 	bl	1a240 <nrfx_gpiote_channel_alloc>
   1a2cc:	4b08      	ldr	r3, [pc, #32]	; (1a2f0 <accuracy_channel_alloc+0x40>)
   1a2ce:	4298      	cmp	r0, r3
   1a2d0:	d002      	beq.n	1a2d8 <accuracy_channel_alloc+0x28>
    int8_t channel_id = NO_CHANNELS;
   1a2d2:	f04f 30ff 	mov.w	r0, #4294967295
   1a2d6:	e7f3      	b.n	1a2c0 <accuracy_channel_alloc+0x10>
            channel_id = i;
   1a2d8:	f99d 0007 	ldrsb.w	r0, [sp, #7]
   1a2dc:	e7f0      	b.n	1a2c0 <accuracy_channel_alloc+0x10>
            if (low_accuracy_channel_alloc(i))
   1a2de:	4620      	mov	r0, r4
   1a2e0:	f7ff fe92 	bl	1a008 <low_accuracy_channel_alloc>
   1a2e4:	b910      	cbnz	r0, 1a2ec <accuracy_channel_alloc+0x3c>
        for (uint8_t i = GPIOTE_CH_NUM; i < (GPIOTE_CH_NUM + NRFX_GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS); i++)
   1a2e6:	3401      	adds	r4, #1
   1a2e8:	b2e4      	uxtb	r4, r4
   1a2ea:	e7e5      	b.n	1a2b8 <accuracy_channel_alloc+0x8>
                channel_id = i;
   1a2ec:	b260      	sxtb	r0, r4
                break;
   1a2ee:	e7e7      	b.n	1a2c0 <accuracy_channel_alloc+0x10>
   1a2f0:	0bad0000 	.word	0x0bad0000

0001a2f4 <gpiote_out_init>:
{
   1a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a2f6:	4605      	mov	r5, r0
   1a2f8:	460e      	mov	r6, r1
   1a2fa:	4617      	mov	r7, r2
   1a2fc:	461c      	mov	r4, r3
    if (pin_in_use(pin))
   1a2fe:	f7ff fe03 	bl	19f08 <pin_in_use>
   1a302:	2800      	cmp	r0, #0
   1a304:	d169      	bne.n	1a3da <gpiote_out_init+0xe6>
        if (p_config->task_pin)
   1a306:	78b3      	ldrb	r3, [r6, #2]
   1a308:	2b00      	cmp	r3, #0
   1a30a:	d04d      	beq.n	1a3a8 <gpiote_out_init+0xb4>
            if (prealloc)
   1a30c:	b12f      	cbz	r7, 1a31a <gpiote_out_init+0x26>
                ch = channel;
   1a30e:	b264      	sxtb	r4, r4
            if (ch != NO_CHANNELS)
   1a310:	f1b4 3fff 	cmp.w	r4, #4294967295
   1a314:	d106      	bne.n	1a324 <gpiote_out_init+0x30>
                err_code = NRFX_ERROR_NO_MEM;
   1a316:	4832      	ldr	r0, [pc, #200]	; (1a3e0 <gpiote_out_init+0xec>)
   1a318:	e060      	b.n	1a3dc <gpiote_out_init+0xe8>
                ch = accuracy_channel_alloc(true);
   1a31a:	2001      	movs	r0, #1
   1a31c:	f7ff ffc8 	bl	1a2b0 <accuracy_channel_alloc>
   1a320:	4604      	mov	r4, r0
   1a322:	e7f5      	b.n	1a310 <gpiote_out_init+0x1c>
                pin_in_use_by_te_set(pin, ch, NULL, true);
   1a324:	2301      	movs	r3, #1
   1a326:	2200      	movs	r2, #0
   1a328:	4621      	mov	r1, r4
   1a32a:	4628      	mov	r0, r5
   1a32c:	f7ff fe18 	bl	19f60 <pin_in_use_by_te_set>
                nrf_gpiote_task_configure(NRF_GPIOTE,
   1a330:	7831      	ldrb	r1, [r6, #0]
   1a332:	7872      	ldrb	r2, [r6, #1]
                                                 uint32_t              idx,
                                                 uint32_t              pin,
                                                 nrf_gpiote_polarity_t polarity,
                                                 nrf_gpiote_outinit_t  init_val)
{
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1a334:	482b      	ldr	r0, [pc, #172]	; (1a3e4 <gpiote_out_init+0xf0>)
   1a336:	f504 74a2 	add.w	r4, r4, #324	; 0x144
   1a33a:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   1a33e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1a342:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1a346:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
                          GPIOTE_CONFIG_POLARITY_Msk |
                          GPIOTE_CONFIG_OUTINIT_Msk);

  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a34a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   1a34e:	022b      	lsls	r3, r5, #8
   1a350:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a354:	0409      	lsls	r1, r1, #16
   1a356:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a35a:	430b      	orrs	r3, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1a35c:	0512      	lsls	r2, r2, #20
   1a35e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1a362:	4313      	orrs	r3, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a364:	433b      	orrs	r3, r7
   1a366:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            if (p_config->init_state == NRF_GPIOTE_INITIAL_VALUE_HIGH)
   1a36a:	7873      	ldrb	r3, [r6, #1]
   1a36c:	2b01      	cmp	r3, #1
   1a36e:	d022      	beq.n	1a3b6 <gpiote_out_init+0xc2>
    *p_pin = pin_number & 0x1F;
   1a370:	f005 021f 	and.w	r2, r5, #31
    return pin_number >> 5;
   1a374:	096b      	lsrs	r3, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a376:	2b01      	cmp	r3, #1
   1a378:	d02b      	beq.n	1a3d2 <gpiote_out_init+0xde>
        case 0: return NRF_P0;
   1a37a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a37e:	2301      	movs	r3, #1
   1a380:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1a382:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   1a386:	f005 031f 	and.w	r3, r5, #31
    return pin_number >> 5;
   1a38a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a38c:	2a01      	cmp	r2, #1
   1a38e:	d022      	beq.n	1a3d6 <gpiote_out_init+0xe2>
        case 0: return NRF_P0;
   1a390:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a394:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a398:	2103      	movs	r1, #3
   1a39a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            pin_configured_set(pin);
   1a39e:	4628      	mov	r0, r5
   1a3a0:	f7ff fdfe 	bl	19fa0 <pin_configured_set>
   1a3a4:	4810      	ldr	r0, [pc, #64]	; (1a3e8 <gpiote_out_init+0xf4>)
   1a3a6:	e019      	b.n	1a3dc <gpiote_out_init+0xe8>
        else if (prealloc)
   1a3a8:	b10f      	cbz	r7, 1a3ae <gpiote_out_init+0xba>
            err_code = NRFX_ERROR_INVALID_PARAM;
   1a3aa:	4810      	ldr	r0, [pc, #64]	; (1a3ec <gpiote_out_init+0xf8>)
    return err_code;
   1a3ac:	e016      	b.n	1a3dc <gpiote_out_init+0xe8>
            pin_in_use_set(pin);
   1a3ae:	4628      	mov	r0, r5
   1a3b0:	f7ff fde6 	bl	19f80 <pin_in_use_set>
        if (err_code == NRFX_SUCCESS)
   1a3b4:	e7d9      	b.n	1a36a <gpiote_out_init+0x76>
    *p_pin = pin_number & 0x1F;
   1a3b6:	f005 021f 	and.w	r2, r5, #31
    return pin_number >> 5;
   1a3ba:	096b      	lsrs	r3, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a3bc:	2b01      	cmp	r3, #1
   1a3be:	d006      	beq.n	1a3ce <gpiote_out_init+0xda>
        case 0: return NRF_P0;
   1a3c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a3c4:	2301      	movs	r3, #1
   1a3c6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1a3c8:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   1a3cc:	e7db      	b.n	1a386 <gpiote_out_init+0x92>
        case 1: return NRF_P1;
   1a3ce:	4908      	ldr	r1, [pc, #32]	; (1a3f0 <gpiote_out_init+0xfc>)
   1a3d0:	e7f8      	b.n	1a3c4 <gpiote_out_init+0xd0>
   1a3d2:	4907      	ldr	r1, [pc, #28]	; (1a3f0 <gpiote_out_init+0xfc>)
   1a3d4:	e7d3      	b.n	1a37e <gpiote_out_init+0x8a>
   1a3d6:	4a06      	ldr	r2, [pc, #24]	; (1a3f0 <gpiote_out_init+0xfc>)
   1a3d8:	e7dc      	b.n	1a394 <gpiote_out_init+0xa0>
        err_code = NRFX_ERROR_BUSY;
   1a3da:	4806      	ldr	r0, [pc, #24]	; (1a3f4 <gpiote_out_init+0x100>)
}
   1a3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a3de:	bf00      	nop
   1a3e0:	0bad0002 	.word	0x0bad0002
   1a3e4:	40006000 	.word	0x40006000
   1a3e8:	0bad0000 	.word	0x0bad0000
   1a3ec:	0bad0004 	.word	0x0bad0004
   1a3f0:	50000300 	.word	0x50000300
   1a3f4:	0bad000b 	.word	0x0bad000b

0001a3f8 <gpiote_in_init>:
{
   1a3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3fc:	4604      	mov	r4, r0
   1a3fe:	460d      	mov	r5, r1
   1a400:	4616      	mov	r6, r2
    if (prealloc && !p_config->hi_accuracy)
   1a402:	461f      	mov	r7, r3
   1a404:	b11b      	cbz	r3, 1a40e <gpiote_in_init+0x16>
   1a406:	788b      	ldrb	r3, [r1, #2]
   1a408:	f013 0f02 	tst.w	r3, #2
   1a40c:	d071      	beq.n	1a4f2 <gpiote_in_init+0xfa>
    if (pin_in_use_by_gpiote(pin))
   1a40e:	4620      	mov	r0, r4
   1a410:	f7ff fd9c 	bl	19f4c <pin_in_use_by_gpiote>
   1a414:	2800      	cmp	r0, #0
   1a416:	d16e      	bne.n	1a4f6 <gpiote_in_init+0xfe>
        if (prealloc)
   1a418:	b137      	cbz	r7, 1a428 <gpiote_in_init+0x30>
            ch = channel;
   1a41a:	f99d 7018 	ldrsb.w	r7, [sp, #24]
        if (ch != NO_CHANNELS)
   1a41e:	f1b7 3fff 	cmp.w	r7, #4294967295
   1a422:	d108      	bne.n	1a436 <gpiote_in_init+0x3e>
            err_code = NRFX_ERROR_NO_MEM;
   1a424:	4835      	ldr	r0, [pc, #212]	; (1a4fc <gpiote_in_init+0x104>)
   1a426:	e067      	b.n	1a4f8 <gpiote_in_init+0x100>
            ch = accuracy_channel_alloc(p_config->hi_accuracy);
   1a428:	78a8      	ldrb	r0, [r5, #2]
   1a42a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1a42e:	f7ff ff3f 	bl	1a2b0 <accuracy_channel_alloc>
   1a432:	4607      	mov	r7, r0
   1a434:	e7f3      	b.n	1a41e <gpiote_in_init+0x26>
            pin_in_use_by_te_set(pin, ch, evt_handler, p_config->hi_accuracy);
   1a436:	46b8      	mov	r8, r7
   1a438:	78ab      	ldrb	r3, [r5, #2]
   1a43a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a43e:	4632      	mov	r2, r6
   1a440:	4639      	mov	r1, r7
   1a442:	4620      	mov	r0, r4
   1a444:	f7ff fd8c 	bl	19f60 <pin_in_use_by_te_set>
            if (!p_config->skip_gpio_setup)
   1a448:	78ab      	ldrb	r3, [r5, #2]
   1a44a:	f013 0f04 	tst.w	r3, #4
   1a44e:	d114      	bne.n	1a47a <gpiote_in_init+0x82>
                if (p_config->is_watcher)
   1a450:	f013 0f01 	tst.w	r3, #1
   1a454:	d031      	beq.n	1a4ba <gpiote_in_init+0xc2>
    *p_pin = pin_number & 0x1F;
   1a456:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1a45a:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a45c:	2a01      	cmp	r2, #1
   1a45e:	d02a      	beq.n	1a4b6 <gpiote_in_init+0xbe>
        case 0: return NRF_P0;
   1a460:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_INPUT_Msk;
   1a464:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a468:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1a46c:	f022 0202 	bic.w	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);
   1a470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                pin_configured_set(pin);
   1a474:	4620      	mov	r0, r4
   1a476:	f7ff fd93 	bl	19fa0 <pin_configured_set>
            if (p_config->hi_accuracy)
   1a47a:	78ab      	ldrb	r3, [r5, #2]
   1a47c:	f013 0f02 	tst.w	r3, #2
   1a480:	d02b      	beq.n	1a4da <gpiote_in_init+0xe2>
                nrf_gpiote_event_configure(NRF_GPIOTE, (uint32_t)ch, pin, p_config->sense);
   1a482:	782a      	ldrb	r2, [r5, #0]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a484:	481e      	ldr	r0, [pc, #120]	; (1a500 <gpiote_in_init+0x108>)
   1a486:	f508 73a2 	add.w	r3, r8, #324	; 0x144
   1a48a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   1a48e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1a492:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1a496:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a49a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   1a49e:	0224      	lsls	r4, r4, #8
   1a4a0:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1a4a4:	0412      	lsls	r2, r2, #16
   1a4a6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a4aa:	4314      	orrs	r4, r2
   1a4ac:	430c      	orrs	r4, r1
   1a4ae:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a4b2:	4814      	ldr	r0, [pc, #80]	; (1a504 <gpiote_in_init+0x10c>)
}
   1a4b4:	e020      	b.n	1a4f8 <gpiote_in_init+0x100>
        case 1: return NRF_P1;
   1a4b6:	4914      	ldr	r1, [pc, #80]	; (1a508 <gpiote_in_init+0x110>)
   1a4b8:	e7d4      	b.n	1a464 <gpiote_in_init+0x6c>
                    nrf_gpio_cfg_input(pin, p_config->pull);
   1a4ba:	786a      	ldrb	r2, [r5, #1]
    *p_pin = pin_number & 0x1F;
   1a4bc:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1a4c0:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a4c2:	2901      	cmp	r1, #1
   1a4c4:	d007      	beq.n	1a4d6 <gpiote_in_init+0xde>
        case 0: return NRF_P0;
   1a4c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a4ca:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
   1a4cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a4d4:	e7ce      	b.n	1a474 <gpiote_in_init+0x7c>
        case 1: return NRF_P1;
   1a4d6:	490c      	ldr	r1, [pc, #48]	; (1a508 <gpiote_in_init+0x110>)
   1a4d8:	e7f7      	b.n	1a4ca <gpiote_in_init+0xd2>
                m_cb.port_handlers_pins[ch - GPIOTE_CH_NUM] |= (p_config->sense) <<
   1a4da:	3f08      	subs	r7, #8
   1a4dc:	782a      	ldrb	r2, [r5, #0]
   1a4de:	4b0b      	ldr	r3, [pc, #44]	; (1a50c <gpiote_in_init+0x114>)
   1a4e0:	441f      	add	r7, r3
   1a4e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
   1a4e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
   1a4ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a4ee:	4805      	ldr	r0, [pc, #20]	; (1a504 <gpiote_in_init+0x10c>)
   1a4f0:	e002      	b.n	1a4f8 <gpiote_in_init+0x100>
        return NRFX_ERROR_INVALID_PARAM;
   1a4f2:	4807      	ldr	r0, [pc, #28]	; (1a510 <gpiote_in_init+0x118>)
   1a4f4:	e000      	b.n	1a4f8 <gpiote_in_init+0x100>
        err_code = NRFX_ERROR_BUSY;
   1a4f6:	4807      	ldr	r0, [pc, #28]	; (1a514 <gpiote_in_init+0x11c>)
}
   1a4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4fc:	0bad0002 	.word	0x0bad0002
   1a500:	40006000 	.word	0x40006000
   1a504:	0bad0000 	.word	0x0bad0000
   1a508:	50000300 	.word	0x50000300
   1a50c:	20037264 	.word	0x20037264
   1a510:	0bad0004 	.word	0x0bad0004
   1a514:	0bad000b 	.word	0x0bad000b

0001a518 <nrfx_gpiote_out_set>:
    *p_pin = pin_number & 0x1F;
   1a518:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1a51c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a51e:	2801      	cmp	r0, #1
   1a520:	d006      	beq.n	1a530 <nrfx_gpiote_out_set+0x18>
        case 0: return NRF_P0;
   1a522:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a526:	2301      	movs	r3, #1
   1a528:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1a52a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   1a52e:	4770      	bx	lr
        case 1: return NRF_P1;
   1a530:	4a00      	ldr	r2, [pc, #0]	; (1a534 <nrfx_gpiote_out_set+0x1c>)
   1a532:	e7f8      	b.n	1a526 <nrfx_gpiote_out_set+0xe>
   1a534:	50000300 	.word	0x50000300

0001a538 <nrfx_gpiote_out_clear>:
    *p_pin = pin_number & 0x1F;
   1a538:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   1a53c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a53e:	2801      	cmp	r0, #1
   1a540:	d006      	beq.n	1a550 <nrfx_gpiote_out_clear+0x18>
        case 0: return NRF_P0;
   1a542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a546:	2301      	movs	r3, #1
   1a548:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1a54a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1a54e:	4770      	bx	lr
        case 1: return NRF_P1;
   1a550:	4a00      	ldr	r2, [pc, #0]	; (1a554 <nrfx_gpiote_out_clear+0x1c>)
   1a552:	e7f8      	b.n	1a546 <nrfx_gpiote_out_clear+0xe>
   1a554:	50000300 	.word	0x50000300

0001a558 <nrfx_gpiote_in_event_enable>:
{
   1a558:	b570      	push	{r4, r5, r6, lr}
   1a55a:	4604      	mov	r4, r0
   1a55c:	460d      	mov	r5, r1
    if (pin_in_use_by_port(pin))
   1a55e:	f7ff fce9 	bl	19f34 <pin_in_use_by_port>
   1a562:	b388      	cbz	r0, 1a5c8 <nrfx_gpiote_in_event_enable+0x70>
            port_handler_polarity_get(channel_port_get(pin) - GPIOTE_CH_NUM);
   1a564:	4620      	mov	r0, r4
   1a566:	f7ff fd27 	bl	19fb8 <channel_port_get>
   1a56a:	3808      	subs	r0, #8
   1a56c:	f7ff fd42 	bl	19ff4 <port_handler_polarity_get>
        if (polarity == NRF_GPIOTE_POLARITY_TOGGLE)
   1a570:	2803      	cmp	r0, #3
   1a572:	d014      	beq.n	1a59e <nrfx_gpiote_in_event_enable+0x46>
                    NRF_GPIO_PIN_SENSE_HIGH : NRF_GPIO_PIN_SENSE_LOW;
   1a574:	2801      	cmp	r0, #1
   1a576:	d023      	beq.n	1a5c0 <nrfx_gpiote_in_event_enable+0x68>
   1a578:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   1a57a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1a57e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a580:	2c01      	cmp	r4, #1
   1a582:	d01f      	beq.n	1a5c4 <nrfx_gpiote_in_event_enable+0x6c>
        case 0: return NRF_P0;
   1a584:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a588:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1a58c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   1a590:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a594:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1a598:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
   1a59c:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
   1a59e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1a5a2:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a5a4:	2b01      	cmp	r3, #1
   1a5a6:	d009      	beq.n	1a5bc <nrfx_gpiote_in_event_enable+0x64>
        case 0: return NRF_P0;
   1a5a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   1a5ac:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a5b0:	40d3      	lsrs	r3, r2
                    NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1a5b2:	f013 0f01 	tst.w	r3, #1
   1a5b6:	d1e0      	bne.n	1a57a <nrfx_gpiote_in_event_enable+0x22>
   1a5b8:	2002      	movs	r0, #2
   1a5ba:	e7de      	b.n	1a57a <nrfx_gpiote_in_event_enable+0x22>
        case 1: return NRF_P1;
   1a5bc:	4b18      	ldr	r3, [pc, #96]	; (1a620 <nrfx_gpiote_in_event_enable+0xc8>)
   1a5be:	e7f5      	b.n	1a5ac <nrfx_gpiote_in_event_enable+0x54>
                    NRF_GPIO_PIN_SENSE_HIGH : NRF_GPIO_PIN_SENSE_LOW;
   1a5c0:	2002      	movs	r0, #2
   1a5c2:	e7da      	b.n	1a57a <nrfx_gpiote_in_event_enable+0x22>
   1a5c4:	4916      	ldr	r1, [pc, #88]	; (1a620 <nrfx_gpiote_in_event_enable+0xc8>)
   1a5c6:	e7df      	b.n	1a588 <nrfx_gpiote_in_event_enable+0x30>
    else if (pin_in_use_by_te(pin))
   1a5c8:	4620      	mov	r0, r4
   1a5ca:	f7ff fca7 	bl	19f1c <pin_in_use_by_te>
   1a5ce:	2800      	cmp	r0, #0
   1a5d0:	d0e4      	beq.n	1a59c <nrfx_gpiote_in_event_enable+0x44>
        int32_t            channel = (int32_t)channel_port_get(pin);
   1a5d2:	4620      	mov	r0, r4
   1a5d4:	f7ff fcf0 	bl	19fb8 <channel_port_get>
   1a5d8:	4606      	mov	r6, r0
        nrf_gpiote_event_t event   = nrf_gpiote_in_event_get((uint8_t)channel);
   1a5da:	b2c3      	uxtb	r3, r0
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1a5dc:	009b      	lsls	r3, r3, #2
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a5de:	4911      	ldr	r1, [pc, #68]	; (1a624 <nrfx_gpiote_in_event_enable+0xcc>)
   1a5e0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1a5e4:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
   1a5e8:	f042 0201 	orr.w	r2, r2, #1
   1a5ec:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
    return ((uint32_t)p_reg + event);
   1a5f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a5f4:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a5f8:	2200      	movs	r2, #0
   1a5fa:	601a      	str	r2, [r3, #0]
   1a5fc:	681b      	ldr	r3, [r3, #0]
        if (int_enable)
   1a5fe:	2d00      	cmp	r5, #0
   1a600:	d0cc      	beq.n	1a59c <nrfx_gpiote_in_event_enable+0x44>
            nrfx_gpiote_evt_handler_t handler = channel_handler_get((uint32_t)channel_port_get(pin));
   1a602:	4620      	mov	r0, r4
   1a604:	f7ff fcd8 	bl	19fb8 <channel_port_get>
   1a608:	f7ff fcde 	bl	19fc8 <channel_handler_get>
            if (handler)
   1a60c:	2800      	cmp	r0, #0
   1a60e:	d0c5      	beq.n	1a59c <nrfx_gpiote_in_event_enable+0x44>
                nrf_gpiote_int_enable(NRF_GPIOTE, 1 << channel);
   1a610:	2001      	movs	r0, #1
   1a612:	fa00 f606 	lsl.w	r6, r0, r6
    p_reg->INTENSET = mask;
   1a616:	4b03      	ldr	r3, [pc, #12]	; (1a624 <nrfx_gpiote_in_event_enable+0xcc>)
   1a618:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
}
   1a61c:	e7be      	b.n	1a59c <nrfx_gpiote_in_event_enable+0x44>
   1a61e:	bf00      	nop
   1a620:	50000300 	.word	0x50000300
   1a624:	40006000 	.word	0x40006000

0001a628 <nrfx_gpiote_in_is_set>:
    *p_pin = pin_number & 0x1F;
   1a628:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   1a62c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a62e:	2801      	cmp	r0, #1
   1a630:	d007      	beq.n	1a642 <nrfx_gpiote_in_is_set+0x1a>
        case 0: return NRF_P0;
   1a632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return p_reg->IN;
   1a636:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1a63a:	40d8      	lsrs	r0, r3
}
   1a63c:	f000 0001 	and.w	r0, r0, #1
   1a640:	4770      	bx	lr
        case 1: return NRF_P1;
   1a642:	4a01      	ldr	r2, [pc, #4]	; (1a648 <nrfx_gpiote_in_is_set+0x20>)
   1a644:	e7f7      	b.n	1a636 <nrfx_gpiote_in_is_set+0xe>
   1a646:	bf00      	nop
   1a648:	50000300 	.word	0x50000300

0001a64c <nrfx_gpiote_irq_handler>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

void nrfx_gpiote_irq_handler(void)
{
   1a64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a650:	b084      	sub	sp, #16
    uint32_t status            = 0;
    uint32_t input[GPIO_COUNT] = {0};
   1a652:	2500      	movs	r5, #0
   1a654:	9502      	str	r5, [sp, #8]
   1a656:	9503      	str	r5, [sp, #12]

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    uint32_t            i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t            mask  = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1a658:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   1a65a:	f44f 7380 	mov.w	r3, #256	; 0x100

    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a65e:	4629      	mov	r1, r5
   1a660:	e003      	b.n	1a66a <nrfx_gpiote_irq_handler+0x1e>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   1a662:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   1a664:	3304      	adds	r3, #4
   1a666:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a668:	3101      	adds	r1, #1
   1a66a:	2907      	cmp	r1, #7
   1a66c:	d814      	bhi.n	1a698 <nrfx_gpiote_irq_handler+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a66e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1a672:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1a676:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1a678:	2a00      	cmp	r2, #0
   1a67a:	d0f2      	beq.n	1a662 <nrfx_gpiote_irq_handler+0x16>
    return p_reg->INTENSET & mask;
   1a67c:	4a2a      	ldr	r2, [pc, #168]	; (1a728 <nrfx_gpiote_irq_handler+0xdc>)
   1a67e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1a682:	4202      	tst	r2, r0
   1a684:	d0ed      	beq.n	1a662 <nrfx_gpiote_irq_handler+0x16>
    return ((uint32_t)p_reg + event);
   1a686:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1a68a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a68e:	2400      	movs	r4, #0
   1a690:	6014      	str	r4, [r2, #0]
   1a692:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   1a694:	4305      	orrs	r5, r0
   1a696:	e7e4      	b.n	1a662 <nrfx_gpiote_irq_handler+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a698:	4b24      	ldr	r3, [pc, #144]	; (1a72c <nrfx_gpiote_irq_handler+0xe0>)
   1a69a:	681b      	ldr	r3, [r3, #0]
    }

    /* collect PORT status event, if event is set read pins state. Processing is postponed to the
     * end of interrupt. */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1a69c:	b1d3      	cbz	r3, 1a6d4 <nrfx_gpiote_irq_handler+0x88>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a69e:	4a23      	ldr	r2, [pc, #140]	; (1a72c <nrfx_gpiote_irq_handler+0xe0>)
   1a6a0:	2300      	movs	r3, #0
   1a6a2:	6013      	str	r3, [r2, #0]
   1a6a4:	6812      	ldr	r2, [r2, #0]
    {
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
        status |= (uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   1a6a6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1a6aa:	4921      	ldr	r1, [pc, #132]	; (1a730 <nrfx_gpiote_irq_handler+0xe4>)
   1a6ac:	466a      	mov	r2, sp
   1a6ae:	c903      	ldmia	r1, {r0, r1}
   1a6b0:	e882 0003 	stmia.w	r2, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1a6b4:	a802      	add	r0, sp, #8
   1a6b6:	e00b      	b.n	1a6d0 <nrfx_gpiote_irq_handler+0x84>
        *p_masks = gpio_regs[i]->LATCH;
   1a6b8:	aa04      	add	r2, sp, #16
   1a6ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1a6be:	f852 2c10 	ldr.w	r2, [r2, #-16]
   1a6c2:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1a6c6:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1a6ca:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1a6ce:	3301      	adds	r3, #1
   1a6d0:	2b01      	cmp	r3, #1
   1a6d2:	d9f1      	bls.n	1a6b8 <nrfx_gpiote_irq_handler+0x6c>
        nrf_gpio_ports_read(0, GPIO_COUNT, input);
#endif
    }

    /* Process pin events. */
    if (status & NRF_GPIOTE_INT_IN_MASK)
   1a6d4:	f015 0fff 	tst.w	r5, #255	; 0xff
   1a6d8:	d11f      	bne.n	1a71a <nrfx_gpiote_irq_handler+0xce>
            mask <<= 1;
        }
    }

    /* Process PORT event. */
    if (status & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   1a6da:	2d00      	cmp	r5, #0
   1a6dc:	db20      	blt.n	1a720 <nrfx_gpiote_irq_handler+0xd4>
    {
        port_event_handle(input);
    }
}
   1a6de:	b004      	add	sp, #16
   1a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mask <<= 1;
   1a6e4:	0076      	lsls	r6, r6, #1
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a6e6:	3401      	adds	r4, #1
   1a6e8:	2c07      	cmp	r4, #7
   1a6ea:	d8f6      	bhi.n	1a6da <nrfx_gpiote_irq_handler+0x8e>
            if (mask & status)
   1a6ec:	422e      	tst	r6, r5
   1a6ee:	d0f9      	beq.n	1a6e4 <nrfx_gpiote_irq_handler+0x98>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a6f0:	4b0d      	ldr	r3, [pc, #52]	; (1a728 <nrfx_gpiote_irq_handler+0xdc>)
   1a6f2:	f504 72a2 	add.w	r2, r4, #324	; 0x144
   1a6f6:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
   1a6fa:	f3c7 2705 	ubfx	r7, r7, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1a6fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1a702:	f3c1 4801 	ubfx	r8, r1, #16, #2
                nrfx_gpiote_evt_handler_t handler  = channel_handler_get(i);
   1a706:	4620      	mov	r0, r4
   1a708:	f7ff fc5e 	bl	19fc8 <channel_handler_get>
                if (handler)
   1a70c:	4603      	mov	r3, r0
   1a70e:	2800      	cmp	r0, #0
   1a710:	d0e8      	beq.n	1a6e4 <nrfx_gpiote_irq_handler+0x98>
                    handler(pin, polarity);
   1a712:	4641      	mov	r1, r8
   1a714:	4638      	mov	r0, r7
   1a716:	4798      	blx	r3
   1a718:	e7e4      	b.n	1a6e4 <nrfx_gpiote_irq_handler+0x98>
        mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1a71a:	2601      	movs	r6, #1
        for (i = 0; i < GPIOTE_CH_NUM; i++)
   1a71c:	2400      	movs	r4, #0
   1a71e:	e7e3      	b.n	1a6e8 <nrfx_gpiote_irq_handler+0x9c>
        port_event_handle(input);
   1a720:	a802      	add	r0, sp, #8
   1a722:	f7ff fccf 	bl	1a0c4 <port_event_handle>
}
   1a726:	e7da      	b.n	1a6de <nrfx_gpiote_irq_handler+0x92>
   1a728:	40006000 	.word	0x40006000
   1a72c:	4000617c 	.word	0x4000617c
   1a730:	00025698 	.word	0x00025698

0001a734 <is_programmable_app_channel>:
 * @retval true  The channel is a programmable application channel.
 * @retval false The channel is used by a stack (for example SoftDevice) or is preprogrammed.
 */
static bool is_programmable_app_channel(nrf_ppi_channel_t channel)
{
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
   1a734:	4b06      	ldr	r3, [pc, #24]	; (1a750 <is_programmable_app_channel+0x1c>)
   1a736:	681a      	ldr	r2, [r3, #0]
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1a738:	2301      	movs	r3, #1
   1a73a:	fa03 f000 	lsl.w	r0, r3, r0
   1a73e:	ea20 0002 	bic.w	r0, r0, r2
   1a742:	f3c0 0013 	ubfx	r0, r0, #0, #20
}
   1a746:	3800      	subs	r0, #0
   1a748:	bf18      	it	ne
   1a74a:	2001      	movne	r0, #1
   1a74c:	4770      	bx	lr
   1a74e:	bf00      	nop
   1a750:	0002778c 	.word	0x0002778c

0001a754 <are_app_channels>:
 * @retval true  All specified channels can be used by an application.
 * @retval false At least one specified channel is used by a stack (for example SoftDevice).
 */
static bool are_app_channels(uint32_t channel_mask)
{
    return ((~(NRFX_PPI_ALL_APP_CHANNELS_MASK) & channel_mask) == 0);
   1a754:	4b03      	ldr	r3, [pc, #12]	; (1a764 <are_app_channels+0x10>)
   1a756:	681b      	ldr	r3, [r3, #0]
   1a758:	4203      	tst	r3, r0
}
   1a75a:	bf0c      	ite	eq
   1a75c:	2001      	moveq	r0, #1
   1a75e:	2000      	movne	r0, #0
   1a760:	4770      	bx	lr
   1a762:	bf00      	nop
   1a764:	0002778c 	.word	0x0002778c

0001a768 <is_allocated_channel>:
   1a768:	2301      	movs	r3, #1
   1a76a:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1a76c:	4a03      	ldr	r2, [pc, #12]	; (1a77c <is_allocated_channel+0x14>)
   1a76e:	6812      	ldr	r2, [r2, #0]
   1a770:	4213      	tst	r3, r2
}
   1a772:	bf14      	ite	ne
   1a774:	2001      	movne	r0, #1
   1a776:	2000      	moveq	r0, #0
   1a778:	4770      	bx	lr
   1a77a:	bf00      	nop
   1a77c:	200372c4 	.word	0x200372c4

0001a780 <channel_allocated_set>:
   1a780:	2301      	movs	r3, #1
   1a782:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1a786:	4a02      	ldr	r2, [pc, #8]	; (1a790 <channel_allocated_set+0x10>)
   1a788:	6813      	ldr	r3, [r2, #0]
   1a78a:	4303      	orrs	r3, r0
   1a78c:	6013      	str	r3, [r2, #0]
}
   1a78e:	4770      	bx	lr
   1a790:	200372c4 	.word	0x200372c4

0001a794 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1a794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a798:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1a79a:	4b18      	ldr	r3, [pc, #96]	; (1a7fc <nrfx_ppi_channel_alloc+0x68>)
   1a79c:	681e      	ldr	r6, [r3, #0]
   1a79e:	43f6      	mvns	r6, r6
   1a7a0:	f3c6 0613 	ubfx	r6, r6, #0, #20

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a7a4:	2400      	movs	r4, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1a7a6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1a804 <nrfx_ppi_channel_alloc+0x70>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a7aa:	e011      	b.n	1a7d0 <nrfx_ppi_channel_alloc+0x3c>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
   1a7ac:	4620      	mov	r0, r4
   1a7ae:	f7ff ffe7 	bl	1a780 <channel_allocated_set>
            *p_channel = channel;
   1a7b2:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
   1a7b6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1a800 <nrfx_ppi_channel_alloc+0x6c>
	__asm__ volatile(
   1a7ba:	f387 8811 	msr	BASEPRI, r7
   1a7be:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
   1a7c2:	4b0f      	ldr	r3, [pc, #60]	; (1a800 <nrfx_ppi_channel_alloc+0x6c>)
   1a7c4:	4598      	cmp	r8, r3
   1a7c6:	d016      	beq.n	1a7f6 <nrfx_ppi_channel_alloc+0x62>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1a7c8:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a7cc:	3401      	adds	r4, #1
   1a7ce:	b2e4      	uxtb	r4, r4
   1a7d0:	b18e      	cbz	r6, 1a7f6 <nrfx_ppi_channel_alloc+0x62>
	__asm__ volatile(
   1a7d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7d6:	f3ef 8711 	mrs	r7, BASEPRI
   1a7da:	f383 8811 	msr	BASEPRI, r3
   1a7de:	f3bf 8f6f 	isb	sy
   1a7e2:	2501      	movs	r5, #1
   1a7e4:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1a7e6:	4235      	tst	r5, r6
   1a7e8:	d0e7      	beq.n	1a7ba <nrfx_ppi_channel_alloc+0x26>
   1a7ea:	4620      	mov	r0, r4
   1a7ec:	f7ff ffbc 	bl	1a768 <is_allocated_channel>
   1a7f0:	2800      	cmp	r0, #0
   1a7f2:	d1e2      	bne.n	1a7ba <nrfx_ppi_channel_alloc+0x26>
   1a7f4:	e7da      	b.n	1a7ac <nrfx_ppi_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a7f6:	4640      	mov	r0, r8
   1a7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a7fc:	0002778c 	.word	0x0002778c
   1a800:	0bad0000 	.word	0x0bad0000
   1a804:	0bad0002 	.word	0x0bad0002

0001a808 <nrfx_ppi_channel_enable>:
    return err_code;
#endif
}

nrfx_err_t nrfx_ppi_channel_enable(nrf_ppi_channel_t channel)
{
   1a808:	b510      	push	{r4, lr}
   1a80a:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1a80c:	f009 fd85 	bl	2431a <is_app_channel>
   1a810:	b178      	cbz	r0, 1a832 <nrfx_ppi_channel_enable+0x2a>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (is_programmable_app_channel(channel) && !is_allocated_channel(channel))
   1a812:	4620      	mov	r0, r4
   1a814:	f7ff ff8e 	bl	1a734 <is_programmable_app_channel>
   1a818:	b118      	cbz	r0, 1a822 <nrfx_ppi_channel_enable+0x1a>
   1a81a:	4620      	mov	r0, r4
   1a81c:	f7ff ffa4 	bl	1a768 <is_allocated_channel>
   1a820:	b148      	cbz	r0, 1a836 <nrfx_ppi_channel_enable+0x2e>
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
   1a822:	2001      	movs	r0, #1
   1a824:	fa00 f404 	lsl.w	r4, r0, r4
   1a828:	4b04      	ldr	r3, [pc, #16]	; (1a83c <nrfx_ppi_channel_enable+0x34>)
   1a82a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a82e:	4804      	ldr	r0, [pc, #16]	; (1a840 <nrfx_ppi_channel_enable+0x38>)
}
   1a830:	e000      	b.n	1a834 <nrfx_ppi_channel_enable+0x2c>
        err_code = NRFX_ERROR_INVALID_PARAM;
   1a832:	4804      	ldr	r0, [pc, #16]	; (1a844 <nrfx_ppi_channel_enable+0x3c>)
    {
        nrf_ppi_channel_enable(NRF_PPI, channel);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a834:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_INVALID_STATE;
   1a836:	4804      	ldr	r0, [pc, #16]	; (1a848 <nrfx_ppi_channel_enable+0x40>)
    return err_code;
   1a838:	e7fc      	b.n	1a834 <nrfx_ppi_channel_enable+0x2c>
   1a83a:	bf00      	nop
   1a83c:	4001f000 	.word	0x4001f000
   1a840:	0bad0000 	.word	0x0bad0000
   1a844:	0bad0004 	.word	0x0bad0004
   1a848:	0bad0005 	.word	0x0bad0005

0001a84c <spi_xfer>:
}

static void spi_xfer(NRF_SPI_Type               * p_spi,
                     spi_control_block_t        * p_cb,
                     nrfx_spi_xfer_desc_t const * p_xfer_desc)
{
   1a84c:	b538      	push	{r3, r4, r5, lr}
   1a84e:	4604      	mov	r4, r0
   1a850:	460d      	mov	r5, r1
    p_cb->bytes_transferred = 0;
   1a852:	2300      	movs	r3, #0
   1a854:	620b      	str	r3, [r1, #32]
}

NRF_STATIC_INLINE void nrf_spi_int_disable(NRF_SPI_Type * p_reg,
                                           uint32_t       mask)
{
    p_reg->INTENCLR = mask;
   1a856:	2104      	movs	r1, #4
   1a858:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a85c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1a860:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108

    // Start the transfer by writing some byte to the TXD register;
    // if TX buffer is not empty, take the first byte from this buffer,
    // otherwise - use over-run character.
    nrf_spi_txd_set(p_spi,
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1a864:	6853      	ldr	r3, [r2, #4]
    nrf_spi_txd_set(p_spi,
   1a866:	b183      	cbz	r3, 1a88a <spi_xfer+0x3e>
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1a868:	6813      	ldr	r3, [r2, #0]
    nrf_spi_txd_set(p_spi,
   1a86a:	781b      	ldrb	r3, [r3, #0]
#endif
}

NRF_STATIC_INLINE void nrf_spi_txd_set(NRF_SPI_Type * p_reg, uint8_t data)
{
    p_reg->TXD = data;
   1a86c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

    // TXD register is double buffered, so next byte to be transmitted can
    // be written immediately, if needed, i.e. if TX or RX transfer is to
    // be more that 1 byte long. Again - if there is something more in TX
    // buffer send it, otherwise use over-run character.
    if (p_xfer_desc->tx_length > 1)
   1a870:	6853      	ldr	r3, [r2, #4]
   1a872:	2b01      	cmp	r3, #1
   1a874:	d90b      	bls.n	1a88e <spi_xfer+0x42>
    {
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1a876:	6813      	ldr	r3, [r2, #0]
   1a878:	785b      	ldrb	r3, [r3, #1]
   1a87a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    // For blocking mode (user handler not provided) wait here for READY
    // events (indicating that the byte from TXD register was transmitted
    // and a new incoming byte was moved to the RXD register) and continue
    // transaction until all requested bytes are transferred.
    // In non-blocking mode - IRQ service routine will do this stuff.
    if (p_cb->handler)
   1a87e:	682b      	ldr	r3, [r5, #0]
   1a880:	b163      	cbz	r3, 1a89c <spi_xfer+0x50>
    p_reg->INTENSET = mask;
   1a882:	2304      	movs	r3, #4
   1a884:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
        {
            nrf_gpio_pin_set(p_cb->ss_pin);
        }
    }
}
   1a888:	bd38      	pop	{r3, r4, r5, pc}
    nrf_spi_txd_set(p_spi,
   1a88a:	7feb      	ldrb	r3, [r5, #31]
   1a88c:	e7ee      	b.n	1a86c <spi_xfer+0x20>
    else if (p_xfer_desc->rx_length > 1)
   1a88e:	68d3      	ldr	r3, [r2, #12]
   1a890:	2b01      	cmp	r3, #1
   1a892:	d9f4      	bls.n	1a87e <spi_xfer+0x32>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1a894:	7feb      	ldrb	r3, [r5, #31]
    p_reg->TXD = data;
   1a896:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
}
   1a89a:	e7f0      	b.n	1a87e <spi_xfer+0x32>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a89c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1a8a0:	2b00      	cmp	r3, #0
   1a8a2:	d0fb      	beq.n	1a89c <spi_xfer+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1a8aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1a8ae:	4629      	mov	r1, r5
   1a8b0:	4620      	mov	r0, r4
   1a8b2:	f009 fd39 	bl	24328 <transfer_byte>
   1a8b6:	2800      	cmp	r0, #0
   1a8b8:	d1f0      	bne.n	1a89c <spi_xfer+0x50>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a8ba:	7fab      	ldrb	r3, [r5, #30]
   1a8bc:	2bff      	cmp	r3, #255	; 0xff
   1a8be:	d0e3      	beq.n	1a888 <spi_xfer+0x3c>
    *p_pin = pin_number & 0x1F;
   1a8c0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1a8c4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a8c6:	2b01      	cmp	r3, #1
   1a8c8:	d006      	beq.n	1a8d8 <spi_xfer+0x8c>
        case 0: return NRF_P0;
   1a8ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a8ce:	2301      	movs	r3, #1
   1a8d0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1a8d2:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
}
   1a8d6:	e7d7      	b.n	1a888 <spi_xfer+0x3c>
        case 1: return NRF_P1;
   1a8d8:	4900      	ldr	r1, [pc, #0]	; (1a8dc <spi_xfer+0x90>)
   1a8da:	e7f8      	b.n	1a8ce <spi_xfer+0x82>
   1a8dc:	50000300 	.word	0x50000300

0001a8e0 <nrfx_spi_init>:
{
   1a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1a8e2:	7904      	ldrb	r4, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1a8e4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1a8e8:	4d6e      	ldr	r5, [pc, #440]	; (1aaa4 <nrfx_spi_init+0x1c4>)
   1a8ea:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   1a8ee:	7f2d      	ldrb	r5, [r5, #28]
   1a8f0:	2d00      	cmp	r5, #0
   1a8f2:	f040 80d5 	bne.w	1aaa0 <nrfx_spi_init+0x1c0>
    p_cb->handler = handler;
   1a8f6:	4d6b      	ldr	r5, [pc, #428]	; (1aaa4 <nrfx_spi_init+0x1c4>)
   1a8f8:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
   1a8fc:	f845 2036 	str.w	r2, [r5, r6, lsl #3]
    p_cb->p_context = p_context;
   1a900:	607b      	str	r3, [r7, #4]
    if (p_config->mode <= NRF_SPI_MODE_1)
   1a902:	7b0b      	ldrb	r3, [r1, #12]
   1a904:	2b01      	cmp	r3, #1
   1a906:	f240 809f 	bls.w	1aa48 <nrfx_spi_init+0x168>
        nrf_gpio_pin_set(p_config->sck_pin);
   1a90a:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1a90c:	f003 061f 	and.w	r6, r3, #31
    return pin_number >> 5;
   1a910:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a912:	2b01      	cmp	r3, #1
   1a914:	f000 80a7 	beq.w	1aa66 <nrfx_spi_init+0x186>
        case 0: return NRF_P0;
   1a918:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a91c:	2301      	movs	r3, #1
   1a91e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1a920:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    nrf_gpio_cfg(p_config->sck_pin,
   1a924:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1a926:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
   1a92a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a92c:	2b01      	cmp	r3, #1
   1a92e:	f000 809c 	beq.w	1aa6a <nrfx_spi_init+0x18a>
        case 0: return NRF_P0;
   1a932:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a936:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1a93a:	2501      	movs	r5, #1
   1a93c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1a940:	784b      	ldrb	r3, [r1, #1]
   1a942:	2bff      	cmp	r3, #255	; 0xff
   1a944:	f000 8095 	beq.w	1aa72 <nrfx_spi_init+0x192>
        mosi_pin = p_config->mosi_pin;
   1a948:	461d      	mov	r5, r3
    *p_pin = pin_number & 0x1F;
   1a94a:	f003 061f 	and.w	r6, r3, #31
    return pin_number >> 5;
   1a94e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a950:	2b01      	cmp	r3, #1
   1a952:	f000 808c 	beq.w	1aa6e <nrfx_spi_init+0x18e>
        case 0: return NRF_P0;
   1a956:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a95a:	2301      	movs	r3, #1
   1a95c:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1a95e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
   1a962:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1a966:	2303      	movs	r3, #3
   1a968:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1a96c:	788b      	ldrb	r3, [r1, #2]
   1a96e:	2bff      	cmp	r3, #255	; 0xff
   1a970:	f000 8085 	beq.w	1aa7e <nrfx_spi_init+0x19e>
        miso_pin = p_config->miso_pin;
   1a974:	461e      	mov	r6, r3
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1a976:	f891 c00e 	ldrb.w	ip, [r1, #14]
    *p_pin = pin_number & 0x1F;
   1a97a:	f003 071f 	and.w	r7, r3, #31
    return pin_number >> 5;
   1a97e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a980:	2b01      	cmp	r3, #1
   1a982:	d079      	beq.n	1aa78 <nrfx_spi_init+0x198>
        case 0: return NRF_P0;
   1a984:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a988:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1a98c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   1a990:	f84e c023 	str.w	ip, [lr, r3, lsl #2]
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1a994:	78cb      	ldrb	r3, [r1, #3]
   1a996:	2bff      	cmp	r3, #255	; 0xff
   1a998:	d018      	beq.n	1a9cc <nrfx_spi_init+0xec>
    *p_pin = pin_number & 0x1F;
   1a99a:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1a99e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a9a0:	2b01      	cmp	r3, #1
   1a9a2:	d06f      	beq.n	1aa84 <nrfx_spi_init+0x1a4>
        case 0: return NRF_P0;
   1a9a4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1a9a8:	2301      	movs	r3, #1
   1a9aa:	fa03 f30c 	lsl.w	r3, r3, ip
    p_reg->OUTSET = set_mask;
   1a9ae:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
        nrf_gpio_cfg_output(p_config->ss_pin);
   1a9b2:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
   1a9b4:	f003 071f 	and.w	r7, r3, #31
    return pin_number >> 5;
   1a9b8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a9ba:	2b01      	cmp	r3, #1
   1a9bc:	d064      	beq.n	1aa88 <nrfx_spi_init+0x1a8>
        case 0: return NRF_P0;
   1a9be:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1a9c2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
   1a9c6:	2703      	movs	r7, #3
   1a9c8:	f84c 7023 	str.w	r7, [ip, r3, lsl #2]
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1a9cc:	7903      	ldrb	r3, [r0, #4]
   1a9ce:	f891 c003 	ldrb.w	ip, [r1, #3]
   1a9d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1a9d6:	4f33      	ldr	r7, [pc, #204]	; (1aaa4 <nrfx_spi_init+0x1c4>)
   1a9d8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   1a9dc:	f883 c01e 	strb.w	ip, [r3, #30]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1a9e0:	6803      	ldr	r3, [r0, #0]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1a9e2:	780f      	ldrb	r7, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1a9e4:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1a9e8:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1a9ec:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    nrf_spi_frequency_set(p_spi, p_config->frequency);
   1a9f0:	688d      	ldr	r5, [r1, #8]
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1a9f2:	f8c3 5524 	str.w	r5, [r3, #1316]	; 0x524
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1a9f6:	7b0e      	ldrb	r6, [r1, #12]
   1a9f8:	7b4d      	ldrb	r5, [r1, #13]
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1a9fa:	3d00      	subs	r5, #0
   1a9fc:	bf18      	it	ne
   1a9fe:	2501      	movne	r5, #1
    switch (spi_mode)
   1aa00:	2e02      	cmp	r6, #2
   1aa02:	d047      	beq.n	1aa94 <nrfx_spi_init+0x1b4>
   1aa04:	2e03      	cmp	r6, #3
   1aa06:	d048      	beq.n	1aa9a <nrfx_spi_init+0x1ba>
   1aa08:	2e01      	cmp	r6, #1
   1aa0a:	d040      	beq.n	1aa8e <nrfx_spi_init+0x1ae>
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1aa0c:	f8c3 5554 	str.w	r5, [r3, #1364]	; 0x554
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1aa10:	7905      	ldrb	r5, [r0, #4]
   1aa12:	794e      	ldrb	r6, [r1, #5]
   1aa14:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1aa18:	4922      	ldr	r1, [pc, #136]	; (1aaa4 <nrfx_spi_init+0x1c4>)
   1aa1a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
   1aa1e:	77ee      	strb	r6, [r5, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1aa20:	2101      	movs	r1, #1
   1aa22:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    if (p_cb->handler)
   1aa26:	b122      	cbz	r2, 1aa32 <nrfx_spi_init+0x152>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1aa28:	6800      	ldr	r0, [r0, #0]
   1aa2a:	f340 3007 	sbfx	r0, r0, #12, #8
   1aa2e:	f7f7 ff17 	bl	12860 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   1aa32:	4b1c      	ldr	r3, [pc, #112]	; (1aaa4 <nrfx_spi_init+0x1c4>)
   1aa34:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1aa38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1aa3c:	2100      	movs	r1, #0
   1aa3e:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1aa40:	2301      	movs	r3, #1
   1aa42:	7713      	strb	r3, [r2, #28]
    return err_code;
   1aa44:	4818      	ldr	r0, [pc, #96]	; (1aaa8 <nrfx_spi_init+0x1c8>)
}
   1aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_gpio_pin_clear(p_config->sck_pin);
   1aa48:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1aa4a:	f003 061f 	and.w	r6, r3, #31
    return pin_number >> 5;
   1aa4e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1aa50:	2b01      	cmp	r3, #1
   1aa52:	d006      	beq.n	1aa62 <nrfx_spi_init+0x182>
        case 0: return NRF_P0;
   1aa54:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1aa58:	2301      	movs	r3, #1
   1aa5a:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   1aa5c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
}
   1aa60:	e760      	b.n	1a924 <nrfx_spi_init+0x44>
        case 1: return NRF_P1;
   1aa62:	4d12      	ldr	r5, [pc, #72]	; (1aaac <nrfx_spi_init+0x1cc>)
   1aa64:	e7f8      	b.n	1aa58 <nrfx_spi_init+0x178>
   1aa66:	4d11      	ldr	r5, [pc, #68]	; (1aaac <nrfx_spi_init+0x1cc>)
   1aa68:	e758      	b.n	1a91c <nrfx_spi_init+0x3c>
   1aa6a:	4e10      	ldr	r6, [pc, #64]	; (1aaac <nrfx_spi_init+0x1cc>)
   1aa6c:	e763      	b.n	1a936 <nrfx_spi_init+0x56>
   1aa6e:	4f0f      	ldr	r7, [pc, #60]	; (1aaac <nrfx_spi_init+0x1cc>)
   1aa70:	e773      	b.n	1a95a <nrfx_spi_init+0x7a>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1aa72:	f04f 35ff 	mov.w	r5, #4294967295
   1aa76:	e779      	b.n	1a96c <nrfx_spi_init+0x8c>
   1aa78:	f8df e030 	ldr.w	lr, [pc, #48]	; 1aaac <nrfx_spi_init+0x1cc>
   1aa7c:	e784      	b.n	1a988 <nrfx_spi_init+0xa8>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1aa7e:	f04f 36ff 	mov.w	r6, #4294967295
   1aa82:	e787      	b.n	1a994 <nrfx_spi_init+0xb4>
   1aa84:	4f09      	ldr	r7, [pc, #36]	; (1aaac <nrfx_spi_init+0x1cc>)
   1aa86:	e78f      	b.n	1a9a8 <nrfx_spi_init+0xc8>
   1aa88:	f8df c020 	ldr.w	ip, [pc, #32]	; 1aaac <nrfx_spi_init+0x1cc>
   1aa8c:	e799      	b.n	1a9c2 <nrfx_spi_init+0xe2>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1aa8e:	f045 0502 	orr.w	r5, r5, #2
        break;
   1aa92:	e7bb      	b.n	1aa0c <nrfx_spi_init+0x12c>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1aa94:	f045 0504 	orr.w	r5, r5, #4
        break;
   1aa98:	e7b8      	b.n	1aa0c <nrfx_spi_init+0x12c>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1aa9a:	f045 0506 	orr.w	r5, r5, #6
        break;
   1aa9e:	e7b5      	b.n	1aa0c <nrfx_spi_init+0x12c>
        return err_code;
   1aaa0:	4803      	ldr	r0, [pc, #12]	; (1aab0 <nrfx_spi_init+0x1d0>)
   1aaa2:	e7d0      	b.n	1aa46 <nrfx_spi_init+0x166>
   1aaa4:	200372c8 	.word	0x200372c8
   1aaa8:	0bad0000 	.word	0x0bad0000
   1aaac:	50000300 	.word	0x50000300
   1aab0:	0bad0005 	.word	0x0bad0005

0001aab4 <nrfx_spi_uninit>:
{
   1aab4:	b538      	push	{r3, r4, r5, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1aab6:	7904      	ldrb	r4, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1aab8:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   1aaba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1aabe:	4b31      	ldr	r3, [pc, #196]	; (1ab84 <nrfx_spi_uninit+0xd0>)
   1aac0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   1aac4:	b133      	cbz	r3, 1aad4 <nrfx_spi_uninit+0x20>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1aac6:	f345 3007 	sbfx	r0, r5, #12, #8
   1aaca:	f7f7 fed9 	bl	12880 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1aace:	2304      	movs	r3, #4
   1aad0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   1aad4:	2300      	movs	r3, #0
   1aad6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    return p_reg->PSEL.SCK;
   1aada:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   1aade:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1aae2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1aae4:	2b01      	cmp	r3, #1
   1aae6:	d044      	beq.n	1ab72 <nrfx_spi_uninit+0xbe>
        case 0: return NRF_P0;
   1aae8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1aaec:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1aaf0:	2202      	movs	r2, #2
   1aaf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MISO;
   1aaf6:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   1aafa:	f1b3 3fff 	cmp.w	r3, #4294967295
   1aafe:	d00b      	beq.n	1ab18 <nrfx_spi_uninit+0x64>
    *p_pin = pin_number & 0x1F;
   1ab00:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ab04:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ab06:	2b01      	cmp	r3, #1
   1ab08:	d035      	beq.n	1ab76 <nrfx_spi_uninit+0xc2>
        case 0: return NRF_P0;
   1ab0a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ab0e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1ab12:	2202      	movs	r2, #2
   1ab14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return p_reg->PSEL.MOSI;
   1ab18:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
    if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   1ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ab20:	d00b      	beq.n	1ab3a <nrfx_spi_uninit+0x86>
    *p_pin = pin_number & 0x1F;
   1ab22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ab26:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ab28:	2b01      	cmp	r3, #1
   1ab2a:	d026      	beq.n	1ab7a <nrfx_spi_uninit+0xc6>
        case 0: return NRF_P0;
   1ab2c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ab30:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1ab34:	2202      	movs	r2, #2
   1ab36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1ab3a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ab3e:	4a11      	ldr	r2, [pc, #68]	; (1ab84 <nrfx_spi_uninit+0xd0>)
   1ab40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1ab44:	7f9b      	ldrb	r3, [r3, #30]
   1ab46:	2bff      	cmp	r3, #255	; 0xff
   1ab48:	d00b      	beq.n	1ab62 <nrfx_spi_uninit+0xae>
    *p_pin = pin_number & 0x1F;
   1ab4a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ab4e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ab50:	2b01      	cmp	r3, #1
   1ab52:	d014      	beq.n	1ab7e <nrfx_spi_uninit+0xca>
        case 0: return NRF_P0;
   1ab54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ab58:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1ab5c:	2202      	movs	r2, #2
   1ab5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1ab62:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1ab66:	4b07      	ldr	r3, [pc, #28]	; (1ab84 <nrfx_spi_uninit+0xd0>)
   1ab68:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ab6c:	2300      	movs	r3, #0
   1ab6e:	7723      	strb	r3, [r4, #28]
}
   1ab70:	bd38      	pop	{r3, r4, r5, pc}
        case 1: return NRF_P1;
   1ab72:	4905      	ldr	r1, [pc, #20]	; (1ab88 <nrfx_spi_uninit+0xd4>)
   1ab74:	e7ba      	b.n	1aaec <nrfx_spi_uninit+0x38>
   1ab76:	4904      	ldr	r1, [pc, #16]	; (1ab88 <nrfx_spi_uninit+0xd4>)
   1ab78:	e7c9      	b.n	1ab0e <nrfx_spi_uninit+0x5a>
   1ab7a:	4903      	ldr	r1, [pc, #12]	; (1ab88 <nrfx_spi_uninit+0xd4>)
   1ab7c:	e7d8      	b.n	1ab30 <nrfx_spi_uninit+0x7c>
   1ab7e:	4902      	ldr	r1, [pc, #8]	; (1ab88 <nrfx_spi_uninit+0xd4>)
   1ab80:	e7ea      	b.n	1ab58 <nrfx_spi_uninit+0xa4>
   1ab82:	bf00      	nop
   1ab84:	200372c8 	.word	0x200372c8
   1ab88:	50000300 	.word	0x50000300

0001ab8c <nrfx_spi_xfer>:

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1ab8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ab90:	7904      	ldrb	r4, [r0, #4]
   1ab92:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ab96:	4f23      	ldr	r7, [pc, #140]	; (1ac24 <nrfx_spi_xfer+0x98>)
   1ab98:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1ab9c:	7f7b      	ldrb	r3, [r7, #29]
   1ab9e:	2b00      	cmp	r3, #0
   1aba0:	d13d      	bne.n	1ac1e <nrfx_spi_xfer+0x92>
   1aba2:	4606      	mov	r6, r0
   1aba4:	460d      	mov	r5, r1
   1aba6:	4696      	mov	lr, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1aba8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1abac:	4a1d      	ldr	r2, [pc, #116]	; (1ac24 <nrfx_spi_xfer+0x98>)
   1abae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1abb2:	b10b      	cbz	r3, 1abb8 <nrfx_spi_xfer+0x2c>
        {
            p_cb->transfer_in_progress = true;
   1abb4:	2201      	movs	r2, #1
   1abb6:	777a      	strb	r2, [r7, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1abb8:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   1abbc:	4b19      	ldr	r3, [pc, #100]	; (1ac24 <nrfx_spi_xfer+0x98>)
   1abbe:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
   1abc2:	f10c 080c 	add.w	r8, ip, #12
   1abc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1abca:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
    p_cb->abort = false;
   1abce:	2300      	movs	r3, #0
   1abd0:	f88c 3024 	strb.w	r3, [ip, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1abd4:	f89c 301e 	ldrb.w	r3, [ip, #30]
   1abd8:	2bff      	cmp	r3, #255	; 0xff
   1abda:	d00a      	beq.n	1abf2 <nrfx_spi_xfer+0x66>
    *p_pin = pin_number & 0x1F;
   1abdc:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   1abe0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1abe2:	2b01      	cmp	r3, #1
   1abe4:	d012      	beq.n	1ac0c <nrfx_spi_xfer+0x80>
        case 0: return NRF_P0;
   1abe6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1abea:	2301      	movs	r3, #1
   1abec:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   1abee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   1abf2:	f1be 0f00 	cmp.w	lr, #0
   1abf6:	d00b      	beq.n	1ac10 <nrfx_spi_xfer+0x84>
    {
        p_cb->transfer_in_progress = false;
   1abf8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1abfc:	4b09      	ldr	r3, [pc, #36]	; (1ac24 <nrfx_spi_xfer+0x98>)
   1abfe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ac02:	2300      	movs	r3, #0
   1ac04:	7763      	strb	r3, [r4, #29]
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1ac06:	4808      	ldr	r0, [pc, #32]	; (1ac28 <nrfx_spi_xfer+0x9c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ac08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   1ac0c:	4a07      	ldr	r2, [pc, #28]	; (1ac2c <nrfx_spi_xfer+0xa0>)
   1ac0e:	e7ec      	b.n	1abea <nrfx_spi_xfer+0x5e>
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1ac10:	462a      	mov	r2, r5
   1ac12:	4639      	mov	r1, r7
   1ac14:	6830      	ldr	r0, [r6, #0]
   1ac16:	f7ff fe19 	bl	1a84c <spi_xfer>
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ac1a:	4805      	ldr	r0, [pc, #20]	; (1ac30 <nrfx_spi_xfer+0xa4>)
   1ac1c:	e7f4      	b.n	1ac08 <nrfx_spi_xfer+0x7c>
        return err_code;
   1ac1e:	4805      	ldr	r0, [pc, #20]	; (1ac34 <nrfx_spi_xfer+0xa8>)
   1ac20:	e7f2      	b.n	1ac08 <nrfx_spi_xfer+0x7c>
   1ac22:	bf00      	nop
   1ac24:	200372c8 	.word	0x200372c8
   1ac28:	0bad0003 	.word	0x0bad0003
   1ac2c:	50000300 	.word	0x50000300
   1ac30:	0bad0000 	.word	0x0bad0000
   1ac34:	0bad000b 	.word	0x0bad000b

0001ac38 <spim_pin_uninit>:
    return err_code;
}

static void spim_pin_uninit(uint32_t pin)
{
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   1ac38:	f1b0 3fff 	cmp.w	r0, #4294967295
   1ac3c:	d00b      	beq.n	1ac56 <spim_pin_uninit+0x1e>
    *p_pin = pin_number & 0x1F;
   1ac3e:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   1ac42:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ac44:	2801      	cmp	r0, #1
   1ac46:	d007      	beq.n	1ac58 <spim_pin_uninit+0x20>
        case 0: return NRF_P0;
   1ac48:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ac4c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ac50:	2202      	movs	r2, #2
   1ac52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        return;
    }

    nrf_gpio_cfg_default(pin);
}
   1ac56:	4770      	bx	lr
        case 1: return NRF_P1;
   1ac58:	4900      	ldr	r1, [pc, #0]	; (1ac5c <spim_pin_uninit+0x24>)
   1ac5a:	e7f7      	b.n	1ac4c <spim_pin_uninit+0x14>
   1ac5c:	50000300 	.word	0x50000300

0001ac60 <finish_transfer>:
    return nrfx_spim_xfer(p_instance, p_xfer_desc, 0);
}
#endif

static void finish_transfer(spim_control_block_t * p_cb)
{
   1ac60:	b508      	push	{r3, lr}
   1ac62:	4603      	mov	r3, r0
    // If Slave Select signal is used, this is the time to deactivate it.
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1ac64:	7fc2      	ldrb	r2, [r0, #31]
   1ac66:	2aff      	cmp	r2, #255	; 0xff
   1ac68:	d00c      	beq.n	1ac84 <finish_transfer+0x24>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   1ac6a:	7f81      	ldrb	r1, [r0, #30]
   1ac6c:	b1a9      	cbz	r1, 1ac9a <finish_transfer+0x3a>
    *p_pin = pin_number & 0x1F;
   1ac6e:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1ac72:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ac74:	2a01      	cmp	r2, #1
   1ac76:	d00e      	beq.n	1ac96 <finish_transfer+0x36>
        case 0: return NRF_P0;
   1ac78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ac7c:	2201      	movs	r2, #1
   1ac7e:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1ac80:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
        }
    }

    // By clearing this flag before calling the handler we allow subsequent
    // transfers to be started directly from the handler function.
    p_cb->transfer_in_progress = false;
   1ac84:	2200      	movs	r2, #0
   1ac86:	775a      	strb	r2, [r3, #29]

    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   1ac88:	721a      	strb	r2, [r3, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1ac8a:	4618      	mov	r0, r3
   1ac8c:	f850 2b08 	ldr.w	r2, [r0], #8
   1ac90:	6859      	ldr	r1, [r3, #4]
   1ac92:	4790      	blx	r2
}
   1ac94:	bd08      	pop	{r3, pc}
        case 1: return NRF_P1;
   1ac96:	4808      	ldr	r0, [pc, #32]	; (1acb8 <finish_transfer+0x58>)
   1ac98:	e7f0      	b.n	1ac7c <finish_transfer+0x1c>
    *p_pin = pin_number & 0x1F;
   1ac9a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1ac9e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1aca0:	2a01      	cmp	r2, #1
   1aca2:	d006      	beq.n	1acb2 <finish_transfer+0x52>
        case 0: return NRF_P0;
   1aca4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1aca8:	2201      	movs	r2, #1
   1acaa:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1acac:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
}
   1acb0:	e7e8      	b.n	1ac84 <finish_transfer+0x24>
        case 1: return NRF_P1;
   1acb2:	4801      	ldr	r0, [pc, #4]	; (1acb8 <finish_transfer+0x58>)
   1acb4:	e7f8      	b.n	1aca8 <finish_transfer+0x48>
   1acb6:	bf00      	nop
   1acb8:	50000300 	.word	0x50000300

0001acbc <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   1acbc:	b570      	push	{r4, r5, r6, lr}
   1acbe:	4604      	mov	r4, r0
   1acc0:	460e      	mov	r6, r1
   1acc2:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1acc4:	6813      	ldr	r3, [r2, #0]
   1acc6:	b123      	cbz	r3, 1acd2 <spim_xfer+0x16>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1acc8:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
   1accc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1acd0:	d106      	bne.n	1ace0 <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1acd2:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   1acd4:	b141      	cbz	r1, 1ace8 <spim_xfer+0x2c>
   1acd6:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   1acda:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   1acde:	d003      	beq.n	1ace8 <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
   1ace0:	2300      	movs	r3, #0
   1ace2:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   1ace4:	4828      	ldr	r0, [pc, #160]	; (1ad88 <spim_xfer+0xcc>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ace6:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   1ace8:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1acea:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1acee:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   1acf2:	6891      	ldr	r1, [r2, #8]
   1acf4:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1acf6:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1acfa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1acfe:	2300      	movs	r3, #0
   1ad00:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1ad04:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
   1ad08:	4629      	mov	r1, r5
   1ad0a:	4620      	mov	r0, r4
   1ad0c:	f009 fb50 	bl	243b0 <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1ad10:	f015 0208 	ands.w	r2, r5, #8
   1ad14:	d101      	bne.n	1ad1a <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ad16:	2301      	movs	r3, #1
   1ad18:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
   1ad1a:	6833      	ldr	r3, [r6, #0]
   1ad1c:	b14b      	cbz	r3, 1ad32 <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
   1ad1e:	f015 0f04 	tst.w	r5, #4
   1ad22:	bf0c      	ite	eq
   1ad24:	2101      	moveq	r1, #1
   1ad26:	2100      	movne	r1, #0
   1ad28:	4620      	mov	r0, r4
   1ad2a:	f009 fb38 	bl	2439e <spim_int_enable>
    return err_code;
   1ad2e:	4817      	ldr	r0, [pc, #92]	; (1ad8c <spim_xfer+0xd0>)
   1ad30:	e7d9      	b.n	1ace6 <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   1ad32:	b91a      	cbnz	r2, 1ad3c <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ad34:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   1ad38:	2b00      	cmp	r3, #0
   1ad3a:	d0fb      	beq.n	1ad34 <spim_xfer+0x78>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1ad3c:	7ff3      	ldrb	r3, [r6, #31]
   1ad3e:	2bff      	cmp	r3, #255	; 0xff
   1ad40:	d01f      	beq.n	1ad82 <spim_xfer+0xc6>
                if (p_cb->ss_active_high)
   1ad42:	7fb2      	ldrb	r2, [r6, #30]
   1ad44:	b172      	cbz	r2, 1ad64 <spim_xfer+0xa8>
    *p_pin = pin_number & 0x1F;
   1ad46:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ad4a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ad4c:	2b01      	cmp	r3, #1
   1ad4e:	d007      	beq.n	1ad60 <spim_xfer+0xa4>
        case 0: return NRF_P0;
   1ad50:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ad54:	2301      	movs	r3, #1
   1ad56:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1ad58:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
    return err_code;
   1ad5c:	480b      	ldr	r0, [pc, #44]	; (1ad8c <spim_xfer+0xd0>)
}
   1ad5e:	e7c2      	b.n	1ace6 <spim_xfer+0x2a>
        case 1: return NRF_P1;
   1ad60:	490b      	ldr	r1, [pc, #44]	; (1ad90 <spim_xfer+0xd4>)
   1ad62:	e7f7      	b.n	1ad54 <spim_xfer+0x98>
    *p_pin = pin_number & 0x1F;
   1ad64:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ad68:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ad6a:	2b01      	cmp	r3, #1
   1ad6c:	d007      	beq.n	1ad7e <spim_xfer+0xc2>
        case 0: return NRF_P0;
   1ad6e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ad72:	2301      	movs	r3, #1
   1ad74:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1ad76:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
   1ad7a:	4804      	ldr	r0, [pc, #16]	; (1ad8c <spim_xfer+0xd0>)
}
   1ad7c:	e7b3      	b.n	1ace6 <spim_xfer+0x2a>
        case 1: return NRF_P1;
   1ad7e:	4904      	ldr	r1, [pc, #16]	; (1ad90 <spim_xfer+0xd4>)
   1ad80:	e7f7      	b.n	1ad72 <spim_xfer+0xb6>
   1ad82:	4802      	ldr	r0, [pc, #8]	; (1ad8c <spim_xfer+0xd0>)
   1ad84:	e7af      	b.n	1ace6 <spim_xfer+0x2a>
   1ad86:	bf00      	nop
   1ad88:	0bad000a 	.word	0x0bad000a
   1ad8c:	0bad0000 	.word	0x0bad0000
   1ad90:	50000300 	.word	0x50000300

0001ad94 <nrfx_spim_init>:
{
   1ad94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ad98:	7904      	ldrb	r4, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ad9a:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
   1ad9e:	4d81      	ldr	r5, [pc, #516]	; (1afa4 <nrfx_spim_init+0x210>)
   1ada0:	eb05 0586 	add.w	r5, r5, r6, lsl #2
   1ada4:	7f2f      	ldrb	r7, [r5, #28]
   1ada6:	2f00      	cmp	r7, #0
   1ada8:	f040 80f9 	bne.w	1af9e <nrfx_spim_init+0x20a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   1adac:	6805      	ldr	r5, [r0, #0]
    p_cb->handler = handler;
   1adae:	4e7d      	ldr	r6, [pc, #500]	; (1afa4 <nrfx_spim_init+0x210>)
   1adb0:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
   1adb4:	eb06 0e8c 	add.w	lr, r6, ip, lsl #2
   1adb8:	f846 202c 	str.w	r2, [r6, ip, lsl #2]
    p_cb->p_context = p_context;
   1adbc:	f8ce 3004 	str.w	r3, [lr, #4]
    if (p_config->mode <= NRF_SPIM_MODE_1)
   1adc0:	7b0b      	ldrb	r3, [r1, #12]
   1adc2:	2b01      	cmp	r3, #1
   1adc4:	f240 80ab 	bls.w	1af1e <nrfx_spim_init+0x18a>
        nrf_gpio_pin_set(p_config->sck_pin);
   1adc8:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1adca:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1adce:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1add0:	2b01      	cmp	r3, #1
   1add2:	f000 80b4 	beq.w	1af3e <nrfx_spim_init+0x1aa>
        case 0: return NRF_P0;
   1add6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1adda:	2301      	movs	r3, #1
   1addc:	fa03 f30c 	lsl.w	r3, r3, ip
    p_reg->OUTSET = set_mask;
   1ade0:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
   1ade4:	688b      	ldr	r3, [r1, #8]
   1ade6:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   1adea:	f000 80aa 	beq.w	1af42 <nrfx_spim_init+0x1ae>
    nrf_gpio_cfg(p_config->sck_pin,
   1adee:	780e      	ldrb	r6, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1adf0:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   1adf4:	0976      	lsrs	r6, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1adf6:	2e01      	cmp	r6, #1
   1adf8:	f000 80a5 	beq.w	1af46 <nrfx_spim_init+0x1b2>
        case 0: return NRF_P0;
   1adfc:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1ae00:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ae02:	f047 0601 	orr.w	r6, r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   1ae06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ae0a:	f84c 6023 	str.w	r6, [ip, r3, lsl #2]
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   1ae0e:	784e      	ldrb	r6, [r1, #1]
   1ae10:	2eff      	cmp	r6, #255	; 0xff
   1ae12:	f000 809e 	beq.w	1af52 <nrfx_spim_init+0x1be>
        mosi_pin = p_config->mosi_pin;
   1ae16:	46b4      	mov	ip, r6
    *p_pin = pin_number & 0x1F;
   1ae18:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   1ae1c:	0976      	lsrs	r6, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ae1e:	2e01      	cmp	r6, #1
   1ae20:	f000 8094 	beq.w	1af4c <nrfx_spim_init+0x1b8>
        case 0: return NRF_P0;
   1ae24:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ae28:	2601      	movs	r6, #1
   1ae2a:	409e      	lsls	r6, r3
    p_reg->OUTCLR = clr_mask;
   1ae2c:	f8ce 650c 	str.w	r6, [lr, #1292]	; 0x50c
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ae30:	f047 0603 	orr.w	r6, r7, #3
    reg->PIN_CNF[pin_number] = cnf;
   1ae34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ae38:	f84e 6023 	str.w	r6, [lr, r3, lsl #2]
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   1ae3c:	788e      	ldrb	r6, [r1, #2]
   1ae3e:	2eff      	cmp	r6, #255	; 0xff
   1ae40:	f000 808d 	beq.w	1af5e <nrfx_spim_init+0x1ca>
        miso_pin = p_config->miso_pin;
   1ae44:	46b6      	mov	lr, r6
        nrf_gpio_cfg(miso_pin,
   1ae46:	f891 800e 	ldrb.w	r8, [r1, #14]
    *p_pin = pin_number & 0x1F;
   1ae4a:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
   1ae4e:	0976      	lsrs	r6, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ae50:	2e01      	cmp	r6, #1
   1ae52:	f000 8081 	beq.w	1af58 <nrfx_spim_init+0x1c4>
        case 0: return NRF_P0;
   1ae56:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1ae5a:	ea47 0688 	orr.w	r6, r7, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1ae5e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ae62:	f849 6023 	str.w	r6, [r9, r3, lsl #2]
    p_cb->ss_pin = p_config->ss_pin;
   1ae66:	78cb      	ldrb	r3, [r1, #3]
   1ae68:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   1ae6c:	4e4d      	ldr	r6, [pc, #308]	; (1afa4 <nrfx_spim_init+0x210>)
   1ae6e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
   1ae72:	77f3      	strb	r3, [r6, #31]
    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1ae74:	2bff      	cmp	r3, #255	; 0xff
   1ae76:	d023      	beq.n	1aec0 <nrfx_spim_init+0x12c>
        if (p_config->ss_active_high)
   1ae78:	790e      	ldrb	r6, [r1, #4]
   1ae7a:	2e00      	cmp	r6, #0
   1ae7c:	d074      	beq.n	1af68 <nrfx_spim_init+0x1d4>
    *p_pin = pin_number & 0x1F;
   1ae7e:	f003 081f 	and.w	r8, r3, #31
    return pin_number >> 5;
   1ae82:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ae84:	2b01      	cmp	r3, #1
   1ae86:	d06d      	beq.n	1af64 <nrfx_spim_init+0x1d0>
        case 0: return NRF_P0;
   1ae88:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1ae8c:	2301      	movs	r3, #1
   1ae8e:	fa03 f308 	lsl.w	r3, r3, r8
    p_reg->OUTCLR = clr_mask;
   1ae92:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
        nrf_gpio_cfg(p_config->ss_pin,
   1ae96:	78cb      	ldrb	r3, [r1, #3]
    *p_pin = pin_number & 0x1F;
   1ae98:	f003 061f 	and.w	r6, r3, #31
    return pin_number >> 5;
   1ae9c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1ae9e:	2b01      	cmp	r3, #1
   1aea0:	d071      	beq.n	1af86 <nrfx_spim_init+0x1f2>
        case 0: return NRF_P0;
   1aea2:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1aea6:	f047 0703 	orr.w	r7, r7, #3
    reg->PIN_CNF[pin_number] = cnf;
   1aeaa:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1aeae:	f848 7026 	str.w	r7, [r8, r6, lsl #2]
        p_cb->ss_active_high = p_config->ss_active_high;
   1aeb2:	790f      	ldrb	r7, [r1, #4]
   1aeb4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1aeb8:	4e3a      	ldr	r6, [pc, #232]	; (1afa4 <nrfx_spim_init+0x210>)
   1aeba:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1aebe:	779f      	strb	r7, [r3, #30]
    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   1aec0:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK  = sck_pin;
   1aec2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   1aec6:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1aeca:	f8c5 e510 	str.w	lr, [r5, #1296]	; 0x510
    nrf_spim_frequency_set(p_spim, p_config->frequency);
   1aece:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
   1aed0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   1aed4:	7b0e      	ldrb	r6, [r1, #12]
   1aed6:	7b4b      	ldrb	r3, [r1, #13]
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   1aed8:	3b00      	subs	r3, #0
   1aeda:	bf18      	it	ne
   1aedc:	2301      	movne	r3, #1
    switch (spi_mode)
   1aede:	2e02      	cmp	r6, #2
   1aee0:	d057      	beq.n	1af92 <nrfx_spim_init+0x1fe>
   1aee2:	2e03      	cmp	r6, #3
   1aee4:	d058      	beq.n	1af98 <nrfx_spim_init+0x204>
   1aee6:	2e01      	cmp	r6, #1
   1aee8:	d050      	beq.n	1af8c <nrfx_spim_init+0x1f8>
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1aeea:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    nrf_spim_orc_set(p_spim, p_config->orc);
   1aeee:	798b      	ldrb	r3, [r1, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   1aef0:	f8c5 35c0 	str.w	r3, [r5, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1aef4:	2307      	movs	r3, #7
   1aef6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    if (p_cb->handler)
   1aefa:	b122      	cbz	r2, 1af06 <nrfx_spim_init+0x172>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1aefc:	6800      	ldr	r0, [r0, #0]
   1aefe:	f340 3007 	sbfx	r0, r0, #12, #8
   1af02:	f7f7 fcad 	bl	12860 <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   1af06:	4b27      	ldr	r3, [pc, #156]	; (1afa4 <nrfx_spim_init+0x210>)
   1af08:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1af0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1af10:	2100      	movs	r1, #0
   1af12:	7751      	strb	r1, [r2, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1af14:	2301      	movs	r3, #1
   1af16:	7713      	strb	r3, [r2, #28]
    return err_code;
   1af18:	4823      	ldr	r0, [pc, #140]	; (1afa8 <nrfx_spim_init+0x214>)
}
   1af1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_clear(p_config->sck_pin);
   1af1e:	780b      	ldrb	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   1af20:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1af24:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1af26:	2b01      	cmp	r3, #1
   1af28:	d007      	beq.n	1af3a <nrfx_spim_init+0x1a6>
        case 0: return NRF_P0;
   1af2a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1af2e:	2301      	movs	r3, #1
   1af30:	fa03 f30c 	lsl.w	r3, r3, ip
    p_reg->OUTCLR = clr_mask;
   1af34:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
}
   1af38:	e754      	b.n	1ade4 <nrfx_spim_init+0x50>
        case 1: return NRF_P1;
   1af3a:	4e1c      	ldr	r6, [pc, #112]	; (1afac <nrfx_spim_init+0x218>)
   1af3c:	e7f7      	b.n	1af2e <nrfx_spim_init+0x19a>
   1af3e:	4e1b      	ldr	r6, [pc, #108]	; (1afac <nrfx_spim_init+0x218>)
   1af40:	e74b      	b.n	1adda <nrfx_spim_init+0x46>
    pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M) ? NRF_GPIO_PIN_H0H1 : NRF_GPIO_PIN_S0S1;
   1af42:	2703      	movs	r7, #3
   1af44:	e753      	b.n	1adee <nrfx_spim_init+0x5a>
   1af46:	f8df c064 	ldr.w	ip, [pc, #100]	; 1afac <nrfx_spim_init+0x218>
   1af4a:	e759      	b.n	1ae00 <nrfx_spim_init+0x6c>
   1af4c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1afac <nrfx_spim_init+0x218>
   1af50:	e76a      	b.n	1ae28 <nrfx_spim_init+0x94>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   1af52:	f04f 3cff 	mov.w	ip, #4294967295
   1af56:	e771      	b.n	1ae3c <nrfx_spim_init+0xa8>
   1af58:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1afac <nrfx_spim_init+0x218>
   1af5c:	e77d      	b.n	1ae5a <nrfx_spim_init+0xc6>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   1af5e:	f04f 3eff 	mov.w	lr, #4294967295
   1af62:	e780      	b.n	1ae66 <nrfx_spim_init+0xd2>
   1af64:	4e11      	ldr	r6, [pc, #68]	; (1afac <nrfx_spim_init+0x218>)
   1af66:	e791      	b.n	1ae8c <nrfx_spim_init+0xf8>
    *p_pin = pin_number & 0x1F;
   1af68:	f003 081f 	and.w	r8, r3, #31
    return pin_number >> 5;
   1af6c:	095e      	lsrs	r6, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1af6e:	2e01      	cmp	r6, #1
   1af70:	d007      	beq.n	1af82 <nrfx_spim_init+0x1ee>
        case 0: return NRF_P0;
   1af72:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1af76:	2301      	movs	r3, #1
   1af78:	fa03 f308 	lsl.w	r3, r3, r8
    p_reg->OUTSET = set_mask;
   1af7c:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
}
   1af80:	e789      	b.n	1ae96 <nrfx_spim_init+0x102>
        case 1: return NRF_P1;
   1af82:	4e0a      	ldr	r6, [pc, #40]	; (1afac <nrfx_spim_init+0x218>)
   1af84:	e7f7      	b.n	1af76 <nrfx_spim_init+0x1e2>
   1af86:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1afac <nrfx_spim_init+0x218>
   1af8a:	e78c      	b.n	1aea6 <nrfx_spim_init+0x112>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1af8c:	f043 0302 	orr.w	r3, r3, #2
        break;
   1af90:	e7ab      	b.n	1aeea <nrfx_spim_init+0x156>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1af92:	f043 0304 	orr.w	r3, r3, #4
        break;
   1af96:	e7a8      	b.n	1aeea <nrfx_spim_init+0x156>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   1af98:	f043 0306 	orr.w	r3, r3, #6
        break;
   1af9c:	e7a5      	b.n	1aeea <nrfx_spim_init+0x156>
        return err_code;
   1af9e:	4804      	ldr	r0, [pc, #16]	; (1afb0 <nrfx_spim_init+0x21c>)
   1afa0:	e7bb      	b.n	1af1a <nrfx_spim_init+0x186>
   1afa2:	bf00      	nop
   1afa4:	200372f0 	.word	0x200372f0
   1afa8:	0bad0000 	.word	0x0bad0000
   1afac:	50000300 	.word	0x50000300
   1afb0:	0bad0005 	.word	0x0bad0005

0001afb4 <nrfx_spim_uninit>:
{
   1afb4:	b570      	push	{r4, r5, r6, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1afb6:	7904      	ldrb	r4, [r0, #4]
   1afb8:	4b21      	ldr	r3, [pc, #132]	; (1b040 <nrfx_spim_uninit+0x8c>)
   1afba:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1afbe:	eb03 0682 	add.w	r6, r3, r2, lsl #2
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   1afc2:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   1afc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1afc8:	b143      	cbz	r3, 1afdc <nrfx_spim_uninit+0x28>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1afca:	f345 3007 	sbfx	r0, r5, #12, #8
   1afce:	f7f7 fc57 	bl	12880 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1afd2:	4b1c      	ldr	r3, [pc, #112]	; (1b044 <nrfx_spim_uninit+0x90>)
   1afd4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
        if (p_cb->transfer_in_progress)
   1afd8:	7f73      	ldrb	r3, [r6, #29]
   1afda:	bb53      	cbnz	r3, 1b032 <nrfx_spim_uninit+0x7e>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   1afdc:	2300      	movs	r3, #0
   1afde:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
    return p_reg->PSEL.SCK;
   1afe2:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   1afe6:	f7ff fe27 	bl	1ac38 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   1afea:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510
    spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   1afee:	f7ff fe23 	bl	1ac38 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   1aff2:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
    spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   1aff6:	f7ff fe1f 	bl	1ac38 <spim_pin_uninit>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1affa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1affe:	4a10      	ldr	r2, [pc, #64]	; (1b040 <nrfx_spim_uninit+0x8c>)
   1b000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b004:	7fdb      	ldrb	r3, [r3, #31]
   1b006:	2bff      	cmp	r3, #255	; 0xff
   1b008:	d00b      	beq.n	1b022 <nrfx_spim_uninit+0x6e>
    *p_pin = pin_number & 0x1F;
   1b00a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b00e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b010:	2b01      	cmp	r3, #1
   1b012:	d013      	beq.n	1b03c <nrfx_spim_uninit+0x88>
        case 0: return NRF_P0;
   1b014:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1b018:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1b01c:	2202      	movs	r2, #2
   1b01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1b022:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1b026:	4b06      	ldr	r3, [pc, #24]	; (1b040 <nrfx_spim_uninit+0x8c>)
   1b028:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1b02c:	2300      	movs	r3, #0
   1b02e:	7723      	strb	r3, [r4, #28]
}
   1b030:	bd70      	pop	{r4, r5, r6, pc}
            spim_abort(p_spim, p_cb);
   1b032:	4631      	mov	r1, r6
   1b034:	4628      	mov	r0, r5
   1b036:	f009 f9df 	bl	243f8 <spim_abort>
   1b03a:	e7cf      	b.n	1afdc <nrfx_spim_uninit+0x28>
        case 1: return NRF_P1;
   1b03c:	4902      	ldr	r1, [pc, #8]	; (1b048 <nrfx_spim_uninit+0x94>)
   1b03e:	e7eb      	b.n	1b018 <nrfx_spim_uninit+0x64>
   1b040:	200372f0 	.word	0x200372f0
   1b044:	00080152 	.word	0x00080152
   1b048:	50000300 	.word	0x50000300

0001b04c <nrfx_spim_xfer>:

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   1b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1b050:	7904      	ldrb	r4, [r0, #4]
   1b052:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1b056:	4f25      	ldr	r7, [pc, #148]	; (1b0ec <nrfx_spim_xfer+0xa0>)
   1b058:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1b05c:	7f7b      	ldrb	r3, [r7, #29]
   1b05e:	2b00      	cmp	r3, #0
   1b060:	d142      	bne.n	1b0e8 <nrfx_spim_xfer+0x9c>
   1b062:	4606      	mov	r6, r0
   1b064:	460d      	mov	r5, r1
   1b066:	4694      	mov	ip, r2
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   1b068:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1b06c:	4a1f      	ldr	r2, [pc, #124]	; (1b0ec <nrfx_spim_xfer+0xa0>)
   1b06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b072:	b123      	cbz	r3, 1b07e <nrfx_spim_xfer+0x32>
   1b074:	f01c 0f14 	tst.w	ip, #20
   1b078:	d101      	bne.n	1b07e <nrfx_spim_xfer+0x32>
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   1b07a:	2201      	movs	r2, #1
   1b07c:	777a      	strb	r2, [r7, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1b07e:	eb04 0ec4 	add.w	lr, r4, r4, lsl #3
   1b082:	4b1a      	ldr	r3, [pc, #104]	; (1b0ec <nrfx_spim_xfer+0xa0>)
   1b084:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   1b088:	f10e 080c 	add.w	r8, lr, #12
   1b08c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b090:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   1b094:	f89e 301f 	ldrb.w	r3, [lr, #31]
   1b098:	2bff      	cmp	r3, #255	; 0xff
   1b09a:	d00d      	beq.n	1b0b8 <nrfx_spim_xfer+0x6c>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
#endif
        {
            if (p_cb->ss_active_high)
   1b09c:	f89e 201e 	ldrb.w	r2, [lr, #30]
   1b0a0:	b1a2      	cbz	r2, 1b0cc <nrfx_spim_xfer+0x80>
    *p_pin = pin_number & 0x1F;
   1b0a2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b0a6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b0a8:	2b01      	cmp	r3, #1
   1b0aa:	d00d      	beq.n	1b0c8 <nrfx_spim_xfer+0x7c>
        case 0: return NRF_P0;
   1b0ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b0b0:	2301      	movs	r3, #1
   1b0b2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1b0b4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
                nrf_gpio_pin_clear(p_cb->ss_pin);
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   1b0b8:	4663      	mov	r3, ip
   1b0ba:	462a      	mov	r2, r5
   1b0bc:	4639      	mov	r1, r7
   1b0be:	6830      	ldr	r0, [r6, #0]
   1b0c0:	f7ff fdfc 	bl	1acbc <spim_xfer>
}
   1b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   1b0c8:	4909      	ldr	r1, [pc, #36]	; (1b0f0 <nrfx_spim_xfer+0xa4>)
   1b0ca:	e7f1      	b.n	1b0b0 <nrfx_spim_xfer+0x64>
    *p_pin = pin_number & 0x1F;
   1b0cc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b0d0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1b0d2:	2b01      	cmp	r3, #1
   1b0d4:	d006      	beq.n	1b0e4 <nrfx_spim_xfer+0x98>
        case 0: return NRF_P0;
   1b0d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b0da:	2301      	movs	r3, #1
   1b0dc:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1b0de:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
}
   1b0e2:	e7e9      	b.n	1b0b8 <nrfx_spim_xfer+0x6c>
        case 1: return NRF_P1;
   1b0e4:	4902      	ldr	r1, [pc, #8]	; (1b0f0 <nrfx_spim_xfer+0xa4>)
   1b0e6:	e7f8      	b.n	1b0da <nrfx_spim_xfer+0x8e>
        return err_code;
   1b0e8:	4802      	ldr	r0, [pc, #8]	; (1b0f4 <nrfx_spim_xfer+0xa8>)
   1b0ea:	e7eb      	b.n	1b0c4 <nrfx_spim_xfer+0x78>
   1b0ec:	200372f0 	.word	0x200372f0
   1b0f0:	50000300 	.word	0x50000300
   1b0f4:	0bad000b 	.word	0x0bad000b

0001b0f8 <nrfx_spim_1_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM1_ENABLED)
void nrfx_spim_1_irq_handler(void)
{
   1b0f8:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM1, &m_cb[NRFX_SPIM1_INST_IDX]);
   1b0fa:	4903      	ldr	r1, [pc, #12]	; (1b108 <nrfx_spim_1_irq_handler+0x10>)
   1b0fc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1b100:	f009 f96b 	bl	243da <irq_handler>
}
   1b104:	bd08      	pop	{r3, pc}
   1b106:	bf00      	nop
   1b108:	200372f0 	.word	0x200372f0

0001b10c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1b10c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1b10e:	4c11      	ldr	r4, [pc, #68]	; (1b154 <_DoInit+0x48>)
   1b110:	2303      	movs	r3, #3
   1b112:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1b114:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1b116:	4a10      	ldr	r2, [pc, #64]	; (1b158 <_DoInit+0x4c>)
   1b118:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1b11a:	4b10      	ldr	r3, [pc, #64]	; (1b15c <_DoInit+0x50>)
   1b11c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1b11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1b122:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1b124:	2300      	movs	r3, #0
   1b126:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1b128:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1b12a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1b12c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1b12e:	4a0c      	ldr	r2, [pc, #48]	; (1b160 <_DoInit+0x54>)
   1b130:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1b132:	2210      	movs	r2, #16
   1b134:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1b136:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1b138:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1b13a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1b13c:	4909      	ldr	r1, [pc, #36]	; (1b164 <_DoInit+0x58>)
   1b13e:	1de0      	adds	r0, r4, #7
   1b140:	f006 f985 	bl	2144e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1b144:	4908      	ldr	r1, [pc, #32]	; (1b168 <_DoInit+0x5c>)
   1b146:	4620      	mov	r0, r4
   1b148:	f006 f981 	bl	2144e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1b14c:	2320      	movs	r3, #32
   1b14e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1b150:	bd10      	pop	{r4, pc}
   1b152:	bf00      	nop
   1b154:	20037314 	.word	0x20037314
   1b158:	000277dc 	.word	0x000277dc
   1b15c:	200373cc 	.word	0x200373cc
   1b160:	200373bc 	.word	0x200373bc
   1b164:	000277e8 	.word	0x000277e8
   1b168:	000277ec 	.word	0x000277ec

0001b16c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1b16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b170:	4604      	mov	r4, r0
   1b172:	460e      	mov	r6, r1
   1b174:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1b176:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b17a:	4a2d      	ldr	r2, [pc, #180]	; (1b230 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1b17c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1b180:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1b182:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1b184:	42bb      	cmp	r3, r7
   1b186:	d84b      	bhi.n	1b220 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1b188:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1b18c:	4928      	ldr	r1, [pc, #160]	; (1b230 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1b18e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1b192:	f8d2 8020 	ldr.w	r8, [r2, #32]
   1b196:	eba8 0907 	sub.w	r9, r8, r7
   1b19a:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1b19e:	4295      	cmp	r5, r2
   1b1a0:	d904      	bls.n	1b1ac <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   1b1a2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1b1a4:	429d      	cmp	r5, r3
   1b1a6:	d916      	bls.n	1b1d6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   1b1a8:	2000      	movs	r0, #0
   1b1aa:	e03e      	b.n	1b22a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1b1ac:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1b230 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   1b1b0:	1c63      	adds	r3, r4, #1
   1b1b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b1b6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1b1ba:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1b1bc:	462a      	mov	r2, r5
   1b1be:	4631      	mov	r1, r6
   1b1c0:	4438      	add	r0, r7
   1b1c2:	f006 f9b0 	bl	21526 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   1b1c6:	443d      	add	r5, r7
   1b1c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b1cc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   1b1d0:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
   1b1d2:	2001      	movs	r0, #1
   1b1d4:	e029      	b.n	1b22a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1b1d6:	1c43      	adds	r3, r0, #1
   1b1d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b1dc:	4a14      	ldr	r2, [pc, #80]	; (1b230 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1b1de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b1e2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1b1e4:	464a      	mov	r2, r9
   1b1e6:	4631      	mov	r1, r6
   1b1e8:	4438      	add	r0, r7
   1b1ea:	f006 f99c 	bl	21526 <memcpy>
      NumBytes -= Rem;
   1b1ee:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
   1b1f2:	197f      	adds	r7, r7, r5
   1b1f4:	d107      	bne.n	1b206 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
   1b1f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b1fa:	4b0d      	ldr	r3, [pc, #52]	; (1b230 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1b1fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1b200:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   1b202:	2001      	movs	r0, #1
   1b204:	e011      	b.n	1b22a <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   1b206:	1c63      	adds	r3, r4, #1
   1b208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b20c:	4a08      	ldr	r2, [pc, #32]	; (1b230 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1b20e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1b212:	463a      	mov	r2, r7
   1b214:	eb06 0109 	add.w	r1, r6, r9
   1b218:	6858      	ldr	r0, [r3, #4]
   1b21a:	f006 f984 	bl	21526 <memcpy>
   1b21e:	e7ea      	b.n	1b1f6 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
   1b220:	1bdb      	subs	r3, r3, r7
   1b222:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1b224:	42ab      	cmp	r3, r5
   1b226:	d2c1      	bcs.n	1b1ac <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   1b228:	2000      	movs	r0, #0
}
   1b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b22e:	bf00      	nop
   1b230:	20037314 	.word	0x20037314

0001b234 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1b234:	4b06      	ldr	r3, [pc, #24]	; (1b250 <SEGGER_RTT_HasDataUp+0x1c>)
   1b236:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1b23a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1b23e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   1b240:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1b244:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1b248:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   1b24a:	1a80      	subs	r0, r0, r2
   1b24c:	4770      	bx	lr
   1b24e:	bf00      	nop
   1b250:	20037314 	.word	0x20037314

0001b254 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1b254:	4b03      	ldr	r3, [pc, #12]	; (1b264 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1b256:	4a04      	ldr	r2, [pc, #16]	; (1b268 <z_device_state_init+0x14>)
   1b258:	4293      	cmp	r3, r2
   1b25a:	d201      	bcs.n	1b260 <z_device_state_init+0xc>
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
   1b25c:	3318      	adds	r3, #24
   1b25e:	e7fa      	b.n	1b256 <z_device_state_init+0x2>
	}
}
   1b260:	4770      	bx	lr
   1b262:	bf00      	nop
   1b264:	00025210 	.word	0x00025210
   1b268:	000252a0 	.word	0x000252a0

0001b26c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1b26c:	b570      	push	{r4, r5, r6, lr}
   1b26e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b270:	4b11      	ldr	r3, [pc, #68]	; (1b2b8 <z_sys_init_run_level+0x4c>)
   1b272:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b276:	e009      	b.n	1b28c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1b278:	4240      	negs	r0, r0
   1b27a:	e017      	b.n	1b2ac <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1b27c:	68eb      	ldr	r3, [r5, #12]
   1b27e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1b280:	68ea      	ldr	r2, [r5, #12]
   1b282:	7853      	ldrb	r3, [r2, #1]
   1b284:	f043 0301 	orr.w	r3, r3, #1
   1b288:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b28a:	3408      	adds	r4, #8
   1b28c:	1c73      	adds	r3, r6, #1
   1b28e:	4a0a      	ldr	r2, [pc, #40]	; (1b2b8 <z_sys_init_run_level+0x4c>)
   1b290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1b294:	42a3      	cmp	r3, r4
   1b296:	d90d      	bls.n	1b2b4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1b298:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1b29a:	6823      	ldr	r3, [r4, #0]
   1b29c:	4628      	mov	r0, r5
   1b29e:	4798      	blx	r3
		if (dev != NULL) {
   1b2a0:	2d00      	cmp	r5, #0
   1b2a2:	d0f2      	beq.n	1b28a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1b2a4:	2800      	cmp	r0, #0
   1b2a6:	d0eb      	beq.n	1b280 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1b2a8:	2800      	cmp	r0, #0
   1b2aa:	dbe5      	blt.n	1b278 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1b2ac:	28ff      	cmp	r0, #255	; 0xff
   1b2ae:	dde5      	ble.n	1b27c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1b2b0:	20ff      	movs	r0, #255	; 0xff
   1b2b2:	e7e3      	b.n	1b27c <z_sys_init_run_level+0x10>
		}
	}
}
   1b2b4:	bd70      	pop	{r4, r5, r6, pc}
   1b2b6:	bf00      	nop
   1b2b8:	000277f4 	.word	0x000277f4

0001b2bc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1b2bc:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1b2be:	4605      	mov	r5, r0
   1b2c0:	b328      	cbz	r0, 1b30e <z_impl_device_get_binding+0x52>
   1b2c2:	7803      	ldrb	r3, [r0, #0]
   1b2c4:	b32b      	cbz	r3, 1b312 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1b2c6:	4c14      	ldr	r4, [pc, #80]	; (1b318 <z_impl_device_get_binding+0x5c>)
   1b2c8:	e000      	b.n	1b2cc <z_impl_device_get_binding+0x10>
   1b2ca:	3418      	adds	r4, #24
   1b2cc:	4b13      	ldr	r3, [pc, #76]	; (1b31c <z_impl_device_get_binding+0x60>)
   1b2ce:	429c      	cmp	r4, r3
   1b2d0:	d008      	beq.n	1b2e4 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1b2d2:	4620      	mov	r0, r4
   1b2d4:	f009 f8ad 	bl	24432 <z_device_ready>
   1b2d8:	2800      	cmp	r0, #0
   1b2da:	d0f6      	beq.n	1b2ca <z_impl_device_get_binding+0xe>
   1b2dc:	6823      	ldr	r3, [r4, #0]
   1b2de:	42ab      	cmp	r3, r5
   1b2e0:	d1f3      	bne.n	1b2ca <z_impl_device_get_binding+0xe>
   1b2e2:	e012      	b.n	1b30a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1b2e4:	4c0c      	ldr	r4, [pc, #48]	; (1b318 <z_impl_device_get_binding+0x5c>)
   1b2e6:	e000      	b.n	1b2ea <z_impl_device_get_binding+0x2e>
   1b2e8:	3418      	adds	r4, #24
   1b2ea:	4b0c      	ldr	r3, [pc, #48]	; (1b31c <z_impl_device_get_binding+0x60>)
   1b2ec:	429c      	cmp	r4, r3
   1b2ee:	d00b      	beq.n	1b308 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b2f0:	4620      	mov	r0, r4
   1b2f2:	f009 f89e 	bl	24432 <z_device_ready>
   1b2f6:	2800      	cmp	r0, #0
   1b2f8:	d0f6      	beq.n	1b2e8 <z_impl_device_get_binding+0x2c>
   1b2fa:	6821      	ldr	r1, [r4, #0]
   1b2fc:	4628      	mov	r0, r5
   1b2fe:	f006 f8db 	bl	214b8 <strcmp>
   1b302:	2800      	cmp	r0, #0
   1b304:	d1f0      	bne.n	1b2e8 <z_impl_device_get_binding+0x2c>
   1b306:	e000      	b.n	1b30a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1b308:	2400      	movs	r4, #0
}
   1b30a:	4620      	mov	r0, r4
   1b30c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1b30e:	4604      	mov	r4, r0
   1b310:	e7fb      	b.n	1b30a <z_impl_device_get_binding+0x4e>
   1b312:	2400      	movs	r4, #0
   1b314:	e7f9      	b.n	1b30a <z_impl_device_get_binding+0x4e>
   1b316:	bf00      	nop
   1b318:	00025210 	.word	0x00025210
   1b31c:	000252a0 	.word	0x000252a0

0001b320 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1b320:	2804      	cmp	r0, #4
   1b322:	d80c      	bhi.n	1b33e <reason_to_str+0x1e>
   1b324:	e8df f000 	tbb	[pc, r0]
   1b328:	07050d03 	.word	0x07050d03
   1b32c:	09          	.byte	0x09
   1b32d:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1b32e:	4806      	ldr	r0, [pc, #24]	; (1b348 <reason_to_str+0x28>)
   1b330:	4770      	bx	lr
		return "Stack overflow";
   1b332:	4806      	ldr	r0, [pc, #24]	; (1b34c <reason_to_str+0x2c>)
   1b334:	4770      	bx	lr
		return "Kernel oops";
   1b336:	4806      	ldr	r0, [pc, #24]	; (1b350 <reason_to_str+0x30>)
   1b338:	4770      	bx	lr
		return "Kernel panic";
   1b33a:	4806      	ldr	r0, [pc, #24]	; (1b354 <reason_to_str+0x34>)
   1b33c:	4770      	bx	lr
	default:
		return "Unknown error";
   1b33e:	4806      	ldr	r0, [pc, #24]	; (1b358 <reason_to_str+0x38>)
   1b340:	4770      	bx	lr
		return "Unhandled interrupt";
   1b342:	4806      	ldr	r0, [pc, #24]	; (1b35c <reason_to_str+0x3c>)
	}
}
   1b344:	4770      	bx	lr
   1b346:	bf00      	nop
   1b348:	0002785c 	.word	0x0002785c
   1b34c:	00027830 	.word	0x00027830
   1b350:	00027840 	.word	0x00027840
   1b354:	0002784c 	.word	0x0002784c
   1b358:	0002780c 	.word	0x0002780c
   1b35c:	0002781c 	.word	0x0002781c

0001b360 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1b360:	b130      	cbz	r0, 1b370 <thread_name_get+0x10>
{
   1b362:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1b364:	f009 f94b 	bl	245fe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1b368:	b120      	cbz	r0, 1b374 <thread_name_get+0x14>
   1b36a:	7803      	ldrb	r3, [r0, #0]
   1b36c:	b123      	cbz	r3, 1b378 <thread_name_get+0x18>
}
   1b36e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1b370:	4802      	ldr	r0, [pc, #8]	; (1b37c <thread_name_get+0x1c>)
}
   1b372:	4770      	bx	lr
		thread_name = "unknown";
   1b374:	4801      	ldr	r0, [pc, #4]	; (1b37c <thread_name_get+0x1c>)
   1b376:	e7fa      	b.n	1b36e <thread_name_get+0xe>
   1b378:	4800      	ldr	r0, [pc, #0]	; (1b37c <thread_name_get+0x1c>)
	return thread_name;
   1b37a:	e7f8      	b.n	1b36e <thread_name_get+0xe>
   1b37c:	00026450 	.word	0x00026450

0001b380 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b384:	b082      	sub	sp, #8
   1b386:	4605      	mov	r5, r0
   1b388:	460e      	mov	r6, r1
   1b38a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b38e:	f3ef 8711 	mrs	r7, BASEPRI
   1b392:	f383 8811 	msr	BASEPRI, r3
   1b396:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1b39a:	f001 f99f 	bl	1c6dc <z_impl_k_current_get>
   1b39e:	4604      	mov	r4, r0
   1b3a0:	4b29      	ldr	r3, [pc, #164]	; (1b448 <z_fatal_error+0xc8>)
   1b3a2:	4a2a      	ldr	r2, [pc, #168]	; (1b44c <z_fatal_error+0xcc>)
   1b3a4:	1a9b      	subs	r3, r3, r2
   1b3a6:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1b3a8:	f04f 0800 	mov.w	r8, #0
   1b3ac:	2201      	movs	r2, #1
   1b3ae:	f362 0802 	bfi	r8, r2, #0, #3
   1b3b2:	f36f 08c5 	bfc	r8, #3, #3
   1b3b6:	f363 188f 	bfi	r8, r3, #6, #10
   1b3ba:	4628      	mov	r0, r5
   1b3bc:	f7ff ffb0 	bl	1b320 <reason_to_str>
   1b3c0:	4602      	mov	r2, r0
   1b3c2:	f8ad 8000 	strh.w	r8, [sp]
   1b3c6:	2300      	movs	r3, #0
   1b3c8:	4629      	mov	r1, r5
   1b3ca:	4821      	ldr	r0, [pc, #132]	; (1b450 <z_fatal_error+0xd0>)
   1b3cc:	f7f5 fd0a 	bl	10de4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1b3d0:	b11e      	cbz	r6, 1b3da <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1b3d2:	69f3      	ldr	r3, [r6, #28]
   1b3d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b3d8:	bb2b      	cbnz	r3, 1b426 <z_fatal_error+0xa6>
   1b3da:	4b1b      	ldr	r3, [pc, #108]	; (1b448 <z_fatal_error+0xc8>)
   1b3dc:	4a1b      	ldr	r2, [pc, #108]	; (1b44c <z_fatal_error+0xcc>)
   1b3de:	1a9b      	subs	r3, r3, r2
   1b3e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b3e2:	f04f 0800 	mov.w	r8, #0
   1b3e6:	2201      	movs	r2, #1
   1b3e8:	f362 0802 	bfi	r8, r2, #0, #3
   1b3ec:	f36f 08c5 	bfc	r8, #3, #3
   1b3f0:	f363 188f 	bfi	r8, r3, #6, #10
   1b3f4:	4620      	mov	r0, r4
   1b3f6:	f7ff ffb3 	bl	1b360 <thread_name_get>
   1b3fa:	f7f5 fbb7 	bl	10b6c <z_log_strdup>
   1b3fe:	4602      	mov	r2, r0
   1b400:	4643      	mov	r3, r8
   1b402:	4621      	mov	r1, r4
   1b404:	4813      	ldr	r0, [pc, #76]	; (1b454 <z_fatal_error+0xd4>)
   1b406:	f7f5 fd61 	bl	10ecc <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1b40a:	4631      	mov	r1, r6
   1b40c:	4628      	mov	r0, r5
   1b40e:	f7fe f8c5 	bl	1959c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1b412:	f387 8811 	msr	BASEPRI, r7
   1b416:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1b41a:	4620      	mov	r0, r4
   1b41c:	f7f7 ffa8 	bl	13370 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1b420:	b002      	add	sp, #8
   1b422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b426:	4b08      	ldr	r3, [pc, #32]	; (1b448 <z_fatal_error+0xc8>)
   1b428:	4a08      	ldr	r2, [pc, #32]	; (1b44c <z_fatal_error+0xcc>)
   1b42a:	1a9b      	subs	r3, r3, r2
   1b42c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1b42e:	f04f 0100 	mov.w	r1, #0
   1b432:	2201      	movs	r2, #1
   1b434:	f362 0102 	bfi	r1, r2, #0, #3
   1b438:	f36f 01c5 	bfc	r1, #3, #3
   1b43c:	f363 118f 	bfi	r1, r3, #6, #10
   1b440:	4805      	ldr	r0, [pc, #20]	; (1b458 <z_fatal_error+0xd8>)
   1b442:	f7f5 fdc3 	bl	10fcc <log_0>
   1b446:	e7c8      	b.n	1b3da <z_fatal_error+0x5a>
   1b448:	000254dc 	.word	0x000254dc
   1b44c:	0002545c 	.word	0x0002545c
   1b450:	0002786c 	.word	0x0002786c
   1b454:	000278b8 	.word	0x000278b8
   1b458:	00027894 	.word	0x00027894

0001b45c <init_idle_thread>:
/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b45e:	b089      	sub	sp, #36	; 0x24
   1b460:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1b462:	4b15      	ldr	r3, [pc, #84]	; (1b4b8 <init_idle_thread+0x5c>)
   1b464:	25b8      	movs	r5, #184	; 0xb8
   1b466:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1b46a:	4b14      	ldr	r3, [pc, #80]	; (1b4bc <init_idle_thread+0x60>)
   1b46c:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1b470:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1b474:	af06      	add	r7, sp, #24
   1b476:	4603      	mov	r3, r0
   1b478:	4a11      	ldr	r2, [pc, #68]	; (1b4c0 <init_idle_thread+0x64>)
   1b47a:	2108      	movs	r1, #8
   1b47c:	4638      	mov	r0, r7
   1b47e:	f004 fbe3 	bl	1fc48 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1b482:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b486:	480f      	ldr	r0, [pc, #60]	; (1b4c4 <init_idle_thread+0x68>)
   1b488:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1b48c:	9705      	str	r7, [sp, #20]
   1b48e:	2301      	movs	r3, #1
   1b490:	9304      	str	r3, [sp, #16]
   1b492:	230f      	movs	r3, #15
   1b494:	9303      	str	r3, [sp, #12]
   1b496:	2300      	movs	r3, #0
   1b498:	9302      	str	r3, [sp, #8]
   1b49a:	9301      	str	r3, [sp, #4]
   1b49c:	9400      	str	r4, [sp, #0]
   1b49e:	4b0a      	ldr	r3, [pc, #40]	; (1b4c8 <init_idle_thread+0x6c>)
   1b4a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b4a4:	4631      	mov	r1, r6
   1b4a6:	4628      	mov	r0, r5
   1b4a8:	f000 f970 	bl	1b78c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b4ac:	7b6b      	ldrb	r3, [r5, #13]
   1b4ae:	f023 0304 	bic.w	r3, r3, #4
   1b4b2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1b4b4:	b009      	add	sp, #36	; 0x24
   1b4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b4b8:	20034fa0 	.word	0x20034fa0
   1b4bc:	2003a0a0 	.word	0x2003a0a0
   1b4c0:	000278d0 	.word	0x000278d0
   1b4c4:	200377cc 	.word	0x200377cc
   1b4c8:	00024671 	.word	0x00024671

0001b4cc <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1b4cc:	b570      	push	{r4, r5, r6, lr}
   1b4ce:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1b4d0:	f001 f836 	bl	1c540 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1b4d4:	4d1e      	ldr	r5, [pc, #120]	; (1b550 <prepare_multithreading+0x84>)
   1b4d6:	4b1f      	ldr	r3, [pc, #124]	; (1b554 <prepare_multithreading+0x88>)
   1b4d8:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b4da:	4b1f      	ldr	r3, [pc, #124]	; (1b558 <prepare_multithreading+0x8c>)
   1b4dc:	9305      	str	r3, [sp, #20]
   1b4de:	2301      	movs	r3, #1
   1b4e0:	9304      	str	r3, [sp, #16]
   1b4e2:	2400      	movs	r4, #0
   1b4e4:	9403      	str	r4, [sp, #12]
   1b4e6:	9402      	str	r4, [sp, #8]
   1b4e8:	9401      	str	r4, [sp, #4]
   1b4ea:	9400      	str	r4, [sp, #0]
   1b4ec:	4b1b      	ldr	r3, [pc, #108]	; (1b55c <prepare_multithreading+0x90>)
   1b4ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b4f2:	491b      	ldr	r1, [pc, #108]	; (1b560 <prepare_multithreading+0x94>)
   1b4f4:	4628      	mov	r0, r5
   1b4f6:	f000 f949 	bl	1b78c <z_setup_new_thread>
   1b4fa:	4606      	mov	r6, r0
   1b4fc:	7b6b      	ldrb	r3, [r5, #13]
   1b4fe:	f023 0304 	bic.w	r3, r3, #4
   1b502:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1b504:	4628      	mov	r0, r5
   1b506:	f009 fbb6 	bl	24c76 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1b50a:	2c00      	cmp	r4, #0
   1b50c:	dd07      	ble.n	1b51e <prepare_multithreading+0x52>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b50e:	4b11      	ldr	r3, [pc, #68]	; (1b554 <prepare_multithreading+0x88>)
   1b510:	f103 0218 	add.w	r2, r3, #24
   1b514:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
   1b516:	61da      	str	r2, [r3, #28]
	}

	initialize_timeouts();

	return stack_ptr;
}
   1b518:	4630      	mov	r0, r6
   1b51a:	b006      	add	sp, #24
   1b51c:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1b51e:	4620      	mov	r0, r4
   1b520:	f7ff ff9c 	bl	1b45c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1b524:	4b0f      	ldr	r3, [pc, #60]	; (1b564 <prepare_multithreading+0x98>)
   1b526:	22b8      	movs	r2, #184	; 0xb8
   1b528:	fb02 3204 	mla	r2, r2, r4, r3
   1b52c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1b530:	4b08      	ldr	r3, [pc, #32]	; (1b554 <prepare_multithreading+0x88>)
   1b532:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1b536:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1b538:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1b53a:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1b53e:	4a0a      	ldr	r2, [pc, #40]	; (1b568 <prepare_multithreading+0x9c>)
   1b540:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1b544:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1b548:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1b54a:	3401      	adds	r4, #1
   1b54c:	e7dd      	b.n	1b50a <prepare_multithreading+0x3e>
   1b54e:	bf00      	nop
   1b550:	20035058 	.word	0x20035058
   1b554:	200377cc 	.word	0x200377cc
   1b558:	000278dc 	.word	0x000278dc
   1b55c:	0001b599 	.word	0x0001b599
   1b560:	20039880 	.word	0x20039880
   1b564:	20034fa0 	.word	0x20034fa0
   1b568:	2003a200 	.word	0x2003a200

0001b56c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1b56c:	b508      	push	{r3, lr}
   1b56e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b570:	4a01      	ldr	r2, [pc, #4]	; (1b578 <switch_to_main_thread+0xc>)
   1b572:	4802      	ldr	r0, [pc, #8]	; (1b57c <switch_to_main_thread+0x10>)
   1b574:	f7f7 fa20 	bl	129b8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b578:	0001b599 	.word	0x0001b599
   1b57c:	20035058 	.word	0x20035058

0001b580 <z_bss_zero>:
{
   1b580:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b582:	4803      	ldr	r0, [pc, #12]	; (1b590 <z_bss_zero+0x10>)
   1b584:	4a03      	ldr	r2, [pc, #12]	; (1b594 <z_bss_zero+0x14>)
   1b586:	1a12      	subs	r2, r2, r0
   1b588:	2100      	movs	r1, #0
   1b58a:	f005 fff0 	bl	2156e <memset>
}
   1b58e:	bd08      	pop	{r3, pc}
   1b590:	20033d40 	.word	0x20033d40
   1b594:	200382e0 	.word	0x200382e0

0001b598 <bg_thread_main>:
{
   1b598:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1b59a:	4b0a      	ldr	r3, [pc, #40]	; (1b5c4 <bg_thread_main+0x2c>)
   1b59c:	2201      	movs	r2, #1
   1b59e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b5a0:	2002      	movs	r0, #2
   1b5a2:	f7ff fe63 	bl	1b26c <z_sys_init_run_level>
	boot_banner();
   1b5a6:	f001 fdf3 	bl	1d190 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b5aa:	2003      	movs	r0, #3
   1b5ac:	f7ff fe5e 	bl	1b26c <z_sys_init_run_level>
	z_init_static_threads();
   1b5b0:	f000 f950 	bl	1b854 <z_init_static_threads>
	main();
   1b5b4:	f004 fa3c 	bl	1fa30 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b5b8:	4a03      	ldr	r2, [pc, #12]	; (1b5c8 <bg_thread_main+0x30>)
   1b5ba:	7b13      	ldrb	r3, [r2, #12]
   1b5bc:	f023 0301 	bic.w	r3, r3, #1
   1b5c0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b5c2:	bd08      	pop	{r3, pc}
   1b5c4:	20038121 	.word	0x20038121
   1b5c8:	20035058 	.word	0x20035058

0001b5cc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1b5cc:	b500      	push	{lr}
   1b5ce:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b5d0:	f7f5 f9e2 	bl	10998 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b5d4:	4b1b      	ldr	r3, [pc, #108]	; (1b644 <z_cstart+0x78>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b5d6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b5da:	4c1b      	ldr	r4, [pc, #108]	; (1b648 <z_cstart+0x7c>)
   1b5dc:	6963      	ldr	r3, [r4, #20]
   1b5de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1b5e2:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b5e4:	23e0      	movs	r3, #224	; 0xe0
   1b5e6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1b5ea:	2320      	movs	r3, #32
   1b5ec:	77e3      	strb	r3, [r4, #31]
   1b5ee:	2500      	movs	r5, #0
   1b5f0:	7625      	strb	r5, [r4, #24]
   1b5f2:	7665      	strb	r5, [r4, #25]
   1b5f4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b5f8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b5fc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b5fe:	f7f7 fe4d 	bl	1329c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b602:	f7f7 f9ef 	bl	129e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b606:	f04f 33ff 	mov.w	r3, #4294967295
   1b60a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b60c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1b60e:	f7f7 ff8b 	bl	13528 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1b612:	f7f7 fec3 	bl	1339c <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1b616:	2401      	movs	r4, #1
   1b618:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b61c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1b620:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1b622:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1b624:	4b09      	ldr	r3, [pc, #36]	; (1b64c <z_cstart+0x80>)
   1b626:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1b62a:	f7ff fe13 	bl	1b254 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b62e:	4628      	mov	r0, r5
   1b630:	f7ff fe1c 	bl	1b26c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b634:	4620      	mov	r0, r4
   1b636:	f7ff fe19 	bl	1b26c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1b63a:	f7ff ff47 	bl	1b4cc <prepare_multithreading>
   1b63e:	f7ff ff95 	bl	1b56c <switch_to_main_thread>
   1b642:	bf00      	nop
   1b644:	2003aa20 	.word	0x2003aa20
   1b648:	e000ed00 	.word	0xe000ed00
   1b64c:	200377cc 	.word	0x200377cc

0001b650 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1b650:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b652:	4c06      	ldr	r4, [pc, #24]	; (1b66c <statics_init+0x1c>)
   1b654:	4b06      	ldr	r3, [pc, #24]	; (1b670 <statics_init+0x20>)
   1b656:	429c      	cmp	r4, r3
   1b658:	d206      	bcs.n	1b668 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b65a:	68a2      	ldr	r2, [r4, #8]
   1b65c:	6861      	ldr	r1, [r4, #4]
   1b65e:	4620      	mov	r0, r4
   1b660:	f008 fef4 	bl	2444c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b664:	3414      	adds	r4, #20
   1b666:	e7f5      	b.n	1b654 <statics_init+0x4>
	}
	return 0;
}
   1b668:	2000      	movs	r0, #0
   1b66a:	bd10      	pop	{r4, pc}
   1b66c:	20033b4c 	.word	0x20033b4c
   1b670:	20033b60 	.word	0x20033b60

0001b674 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1b674:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b676:	4c06      	ldr	r4, [pc, #24]	; (1b690 <init_mem_slab_module+0x1c>)
	int rc = 0;
   1b678:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b67a:	4b06      	ldr	r3, [pc, #24]	; (1b694 <init_mem_slab_module+0x20>)
   1b67c:	429c      	cmp	r4, r3
   1b67e:	d206      	bcs.n	1b68e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1b680:	4620      	mov	r0, r4
   1b682:	f008 ff53 	bl	2452c <create_free_list>
		if (rc < 0) {
   1b686:	2800      	cmp	r0, #0
   1b688:	db01      	blt.n	1b68e <init_mem_slab_module+0x1a>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b68a:	341c      	adds	r4, #28
   1b68c:	e7f5      	b.n	1b67a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1b68e:	bd10      	pop	{r4, pc}
   1b690:	20033af8 	.word	0x20033af8
   1b694:	20033b4c 	.word	0x20033b4c

0001b698 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b698:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b69a:	b083      	sub	sp, #12
   1b69c:	460c      	mov	r4, r1
   1b69e:	461f      	mov	r7, r3
	__asm__ volatile(
   1b6a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6a4:	f3ef 8111 	mrs	r1, BASEPRI
   1b6a8:	f383 8811 	msr	BASEPRI, r3
   1b6ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1b6b0:	6943      	ldr	r3, [r0, #20]
   1b6b2:	b16b      	cbz	r3, 1b6d0 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1b6b4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b6b6:	6943      	ldr	r3, [r0, #20]
   1b6b8:	681b      	ldr	r3, [r3, #0]
   1b6ba:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b6bc:	6983      	ldr	r3, [r0, #24]
   1b6be:	3301      	adds	r3, #1
   1b6c0:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1b6c2:	2000      	movs	r0, #0
	__asm__ volatile(
   1b6c4:	f381 8811 	msr	BASEPRI, r1
   1b6c8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1b6cc:	b003      	add	sp, #12
   1b6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6d0:	4616      	mov	r6, r2
   1b6d2:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1b6d6:	ea56 0307 	orrs.w	r3, r6, r7
   1b6da:	d104      	bne.n	1b6e6 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1b6dc:	2300      	movs	r3, #0
   1b6de:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b6e0:	f06f 000b 	mvn.w	r0, #11
   1b6e4:	e7ee      	b.n	1b6c4 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1b6e6:	e9cd 6700 	strd	r6, r7, [sp]
   1b6ea:	4602      	mov	r2, r0
   1b6ec:	4628      	mov	r0, r5
   1b6ee:	f000 fd0f 	bl	1c110 <z_pend_curr>
		if (result == 0) {
   1b6f2:	2800      	cmp	r0, #0
   1b6f4:	d1ea      	bne.n	1b6cc <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1b6f6:	4b02      	ldr	r3, [pc, #8]	; (1b700 <k_mem_slab_alloc+0x68>)
   1b6f8:	689b      	ldr	r3, [r3, #8]
   1b6fa:	695b      	ldr	r3, [r3, #20]
   1b6fc:	6023      	str	r3, [r4, #0]
		return result;
   1b6fe:	e7e5      	b.n	1b6cc <k_mem_slab_alloc+0x34>
   1b700:	200377cc 	.word	0x200377cc

0001b704 <z_thread_monitor_exit>:
	__asm__ volatile(
   1b704:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b708:	f3ef 8111 	mrs	r1, BASEPRI
   1b70c:	f383 8811 	msr	BASEPRI, r3
   1b710:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1b714:	4b0a      	ldr	r3, [pc, #40]	; (1b740 <z_thread_monitor_exit+0x3c>)
   1b716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b718:	4283      	cmp	r3, r0
   1b71a:	d104      	bne.n	1b726 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1b71c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b71e:	4b08      	ldr	r3, [pc, #32]	; (1b740 <z_thread_monitor_exit+0x3c>)
   1b720:	631a      	str	r2, [r3, #48]	; 0x30
   1b722:	e007      	b.n	1b734 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1b724:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1b726:	b113      	cbz	r3, 1b72e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1b728:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1b72a:	4282      	cmp	r2, r0
   1b72c:	d1fa      	bne.n	1b724 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1b72e:	b10b      	cbz	r3, 1b734 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1b730:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1b732:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1b734:	f381 8811 	msr	BASEPRI, r1
   1b738:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1b73c:	4770      	bx	lr
   1b73e:	bf00      	nop
   1b740:	200377cc 	.word	0x200377cc

0001b744 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1b744:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1b746:	4604      	mov	r4, r0
   1b748:	b140      	cbz	r0, 1b75c <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1b74a:	2220      	movs	r2, #32
   1b74c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b750:	f005 fe86 	bl	21460 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1b754:	2000      	movs	r0, #0
   1b756:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1b75a:	bd10      	pop	{r4, pc}
		thread = _current;
   1b75c:	4b01      	ldr	r3, [pc, #4]	; (1b764 <z_impl_k_thread_name_set+0x20>)
   1b75e:	689c      	ldr	r4, [r3, #8]
   1b760:	e7f3      	b.n	1b74a <z_impl_k_thread_name_set+0x6>
   1b762:	bf00      	nop
   1b764:	200377cc 	.word	0x200377cc

0001b768 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1b768:	b538      	push	{r3, r4, r5, lr}
   1b76a:	4614      	mov	r4, r2
   1b76c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b76e:	ea54 0305 	orrs.w	r3, r4, r5
   1b772:	d102      	bne.n	1b77a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1b774:	f008 ff45 	bl	24602 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1b778:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b77a:	462b      	mov	r3, r5
   1b77c:	4902      	ldr	r1, [pc, #8]	; (1b788 <schedule_new_thread+0x20>)
   1b77e:	3018      	adds	r0, #24
   1b780:	f001 f85e 	bl	1c840 <z_add_timeout>
   1b784:	e7f8      	b.n	1b778 <schedule_new_thread+0x10>
   1b786:	bf00      	nop
   1b788:	00024caf 	.word	0x00024caf

0001b78c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b790:	b085      	sub	sp, #20
   1b792:	4604      	mov	r4, r0
   1b794:	460f      	mov	r7, r1
   1b796:	4615      	mov	r5, r2
   1b798:	461e      	mov	r6, r3
   1b79a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1b79e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1b7a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1b7a6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b7aa:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   1b7ae:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1b7b0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1b7b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b7b4:	2204      	movs	r2, #4
   1b7b6:	9911      	ldr	r1, [sp, #68]	; 0x44
   1b7b8:	f008 ff27 	bl	2460a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1b7bc:	462a      	mov	r2, r5
   1b7be:	4639      	mov	r1, r7
   1b7c0:	4620      	mov	r0, r4
   1b7c2:	f008 ff04 	bl	245ce <setup_thread_stack>
   1b7c6:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b7c8:	f8cd 8008 	str.w	r8, [sp, #8]
   1b7cc:	f8cd 9004 	str.w	r9, [sp, #4]
   1b7d0:	f8cd a000 	str.w	sl, [sp]
   1b7d4:	4633      	mov	r3, r6
   1b7d6:	4602      	mov	r2, r0
   1b7d8:	4639      	mov	r1, r7
   1b7da:	4620      	mov	r0, r4
   1b7dc:	f7f7 f89c 	bl	12918 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1b7e0:	2300      	movs	r3, #0
   1b7e2:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1b7e4:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1b7e6:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1b7ea:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1b7ee:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1b7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7f6:	f3ef 8211 	mrs	r2, BASEPRI
   1b7fa:	f383 8811 	msr	BASEPRI, r3
   1b7fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1b802:	4b13      	ldr	r3, [pc, #76]	; (1b850 <z_setup_new_thread+0xc4>)
   1b804:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1b806:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1b808:	631c      	str	r4, [r3, #48]	; 0x30
	__asm__ volatile(
   1b80a:	f382 8811 	msr	BASEPRI, r2
   1b80e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1b812:	f1bb 0f00 	cmp.w	fp, #0
   1b816:	d013      	beq.n	1b840 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   1b818:	221f      	movs	r2, #31
   1b81a:	4659      	mov	r1, fp
   1b81c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b820:	f005 fe1e 	bl	21460 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1b824:	2300      	movs	r3, #0
   1b826:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b82a:	4b09      	ldr	r3, [pc, #36]	; (1b850 <z_setup_new_thread+0xc4>)
   1b82c:	689b      	ldr	r3, [r3, #8]
   1b82e:	b15b      	cbz	r3, 1b848 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b830:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1b834:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   1b838:	4628      	mov	r0, r5
   1b83a:	b005      	add	sp, #20
   1b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1b840:	2300      	movs	r3, #0
   1b842:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1b846:	e7f0      	b.n	1b82a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1b848:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1b84c:	e7f4      	b.n	1b838 <z_setup_new_thread+0xac>
   1b84e:	bf00      	nop
   1b850:	200377cc 	.word	0x200377cc

0001b854 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1b854:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1b858:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1b85a:	4c23      	ldr	r4, [pc, #140]	; (1b8e8 <z_init_static_threads+0x94>)
   1b85c:	4b23      	ldr	r3, [pc, #140]	; (1b8ec <z_init_static_threads+0x98>)
   1b85e:	429c      	cmp	r4, r3
   1b860:	d215      	bcs.n	1b88e <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1b862:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b864:	9305      	str	r3, [sp, #20]
   1b866:	6a23      	ldr	r3, [r4, #32]
   1b868:	9304      	str	r3, [sp, #16]
   1b86a:	69e3      	ldr	r3, [r4, #28]
   1b86c:	9303      	str	r3, [sp, #12]
   1b86e:	69a3      	ldr	r3, [r4, #24]
   1b870:	9302      	str	r3, [sp, #8]
   1b872:	6963      	ldr	r3, [r4, #20]
   1b874:	9301      	str	r3, [sp, #4]
   1b876:	6923      	ldr	r3, [r4, #16]
   1b878:	9300      	str	r3, [sp, #0]
   1b87a:	68e3      	ldr	r3, [r4, #12]
   1b87c:	68a2      	ldr	r2, [r4, #8]
   1b87e:	6861      	ldr	r1, [r4, #4]
   1b880:	6820      	ldr	r0, [r4, #0]
   1b882:	f7ff ff83 	bl	1b78c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1b886:	6823      	ldr	r3, [r4, #0]
   1b888:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1b88a:	3430      	adds	r4, #48	; 0x30
   1b88c:	e7e6      	b.n	1b85c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1b88e:	f000 fbe5 	bl	1c05c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b892:	4c15      	ldr	r4, [pc, #84]	; (1b8e8 <z_init_static_threads+0x94>)
   1b894:	e01b      	b.n	1b8ce <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1b896:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1b898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b89c:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   1b8a0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1b8a4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1b8a8:	03d8      	lsls	r0, r3, #15
   1b8aa:	f240 35e7 	movw	r5, #999	; 0x3e7
   1b8ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	1940      	adds	r0, r0, r5
   1b8b6:	f04f 0500 	mov.w	r5, #0
   1b8ba:	eb45 0101 	adc.w	r1, r5, r1
   1b8be:	f7e4 fc1f 	bl	100 <__aeabi_uldivmod>
   1b8c2:	4602      	mov	r2, r0
   1b8c4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1b8c6:	4630      	mov	r0, r6
   1b8c8:	f7ff ff4e 	bl	1b768 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b8cc:	3430      	adds	r4, #48	; 0x30
   1b8ce:	4b07      	ldr	r3, [pc, #28]	; (1b8ec <z_init_static_threads+0x98>)
   1b8d0:	429c      	cmp	r4, r3
   1b8d2:	d204      	bcs.n	1b8de <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b8d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b8da:	d0f7      	beq.n	1b8cc <z_init_static_threads+0x78>
   1b8dc:	e7db      	b.n	1b896 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1b8de:	f000 fc6d 	bl	1c1bc <k_sched_unlock>
}
   1b8e2:	b006      	add	sp, #24
   1b8e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1b8e8:	20033af8 	.word	0x20033af8
   1b8ec:	20033af8 	.word	0x20033af8

0001b8f0 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   1b8f0:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1b8f2:	f009 fadf 	bl	24eb4 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1b8f6:	4b04      	ldr	r3, [pc, #16]	; (1b908 <pm_save_idle+0x18>)
   1b8f8:	6218      	str	r0, [r3, #32]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1b8fa:	f7f5 ff57 	bl	117ac <pm_system_suspend>
   1b8fe:	b100      	cbz	r0, 1b902 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   1b900:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1b902:	f7f7 f875 	bl	129f0 <arch_cpu_idle>
   1b906:	e7fb      	b.n	1b900 <pm_save_idle+0x10>
   1b908:	200377cc 	.word	0x200377cc

0001b90c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b90c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b910:	b083      	sub	sp, #12
   1b912:	4604      	mov	r4, r0
   1b914:	461d      	mov	r5, r3
	__asm__ volatile(
   1b916:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b91a:	f3ef 8711 	mrs	r7, BASEPRI
   1b91e:	f383 8811 	msr	BASEPRI, r3
   1b922:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b926:	68c1      	ldr	r1, [r0, #12]
   1b928:	b999      	cbnz	r1, 1b952 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1b92a:	2900      	cmp	r1, #0
   1b92c:	d14f      	bne.n	1b9ce <z_impl_k_mutex_lock+0xc2>
   1b92e:	4b3a      	ldr	r3, [pc, #232]	; (1ba18 <z_impl_k_mutex_lock+0x10c>)
   1b930:	689b      	ldr	r3, [r3, #8]
   1b932:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b936:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1b938:	3101      	adds	r1, #1
   1b93a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1b93c:	4b36      	ldr	r3, [pc, #216]	; (1ba18 <z_impl_k_mutex_lock+0x10c>)
   1b93e:	689b      	ldr	r3, [r3, #8]
   1b940:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1b942:	f387 8811 	msr	BASEPRI, r7
   1b946:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1b94a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1b94c:	b003      	add	sp, #12
   1b94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b952:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b954:	6882      	ldr	r2, [r0, #8]
   1b956:	4b30      	ldr	r3, [pc, #192]	; (1ba18 <z_impl_k_mutex_lock+0x10c>)
   1b958:	689b      	ldr	r3, [r3, #8]
   1b95a:	429a      	cmp	r2, r3
   1b95c:	d0e5      	beq.n	1b92a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b95e:	ea55 0106 	orrs.w	r1, r5, r6
   1b962:	bf0c      	ite	eq
   1b964:	f04f 0801 	moveq.w	r8, #1
   1b968:	f04f 0800 	movne.w	r8, #0
   1b96c:	d031      	beq.n	1b9d2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1b96e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b972:	4649      	mov	r1, r9
   1b974:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b978:	f008 fe86 	bl	24688 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b97c:	4581      	cmp	r9, r0
   1b97e:	dc2f      	bgt.n	1b9e0 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1b980:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b984:	9600      	str	r6, [sp, #0]
   1b986:	9501      	str	r5, [sp, #4]
   1b988:	4622      	mov	r2, r4
   1b98a:	4639      	mov	r1, r7
   1b98c:	4823      	ldr	r0, [pc, #140]	; (1ba1c <z_impl_k_mutex_lock+0x110>)
   1b98e:	f000 fbbf 	bl	1c110 <z_pend_curr>
	if (got_mutex == 0) {
   1b992:	2800      	cmp	r0, #0
   1b994:	d0da      	beq.n	1b94c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1b996:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b99a:	f3ef 8511 	mrs	r5, BASEPRI
   1b99e:	f383 8811 	msr	BASEPRI, r3
   1b9a2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b9a6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b9a8:	429c      	cmp	r4, r3
   1b9aa:	d01f      	beq.n	1b9ec <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b9ac:	b1f3      	cbz	r3, 1b9ec <z_impl_k_mutex_lock+0xe0>
   1b9ae:	6921      	ldr	r1, [r4, #16]
   1b9b0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b9b4:	f008 fe68 	bl	24688 <new_prio_for_inheritance>
   1b9b8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b9ba:	4620      	mov	r0, r4
   1b9bc:	f008 fe6f 	bl	2469e <adjust_owner_prio>
   1b9c0:	b9b0      	cbnz	r0, 1b9f0 <z_impl_k_mutex_lock+0xe4>
   1b9c2:	f1b9 0f00 	cmp.w	r9, #0
   1b9c6:	d015      	beq.n	1b9f4 <z_impl_k_mutex_lock+0xe8>
   1b9c8:	f04f 0801 	mov.w	r8, #1
   1b9cc:	e012      	b.n	1b9f4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1b9ce:	6923      	ldr	r3, [r4, #16]
   1b9d0:	e7b1      	b.n	1b936 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1b9d2:	f387 8811 	msr	BASEPRI, r7
   1b9d6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1b9da:	f06f 000f 	mvn.w	r0, #15
   1b9de:	e7b5      	b.n	1b94c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1b9e0:	4601      	mov	r1, r0
   1b9e2:	4620      	mov	r0, r4
   1b9e4:	f008 fe5b 	bl	2469e <adjust_owner_prio>
   1b9e8:	4681      	mov	r9, r0
   1b9ea:	e7cb      	b.n	1b984 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b9ec:	6921      	ldr	r1, [r4, #16]
   1b9ee:	e7e4      	b.n	1b9ba <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b9f0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1b9f4:	f1b8 0f00 	cmp.w	r8, #0
   1b9f8:	d106      	bne.n	1ba08 <z_impl_k_mutex_lock+0xfc>
   1b9fa:	f385 8811 	msr	BASEPRI, r5
   1b9fe:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1ba02:	f06f 000a 	mvn.w	r0, #10
   1ba06:	e7a1      	b.n	1b94c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1ba08:	4629      	mov	r1, r5
   1ba0a:	4804      	ldr	r0, [pc, #16]	; (1ba1c <z_impl_k_mutex_lock+0x110>)
   1ba0c:	f000 fb0a 	bl	1c024 <z_reschedule>
	return -EAGAIN;
   1ba10:	f06f 000a 	mvn.w	r0, #10
   1ba14:	e79a      	b.n	1b94c <z_impl_k_mutex_lock+0x40>
   1ba16:	bf00      	nop
   1ba18:	200377cc 	.word	0x200377cc
   1ba1c:	20037800 	.word	0x20037800

0001ba20 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1ba20:	6882      	ldr	r2, [r0, #8]
   1ba22:	2a00      	cmp	r2, #0
   1ba24:	d035      	beq.n	1ba92 <z_impl_k_mutex_unlock+0x72>
{
   1ba26:	b538      	push	{r3, r4, r5, lr}
   1ba28:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1ba2a:	4b1d      	ldr	r3, [pc, #116]	; (1baa0 <z_impl_k_mutex_unlock+0x80>)
   1ba2c:	689b      	ldr	r3, [r3, #8]
   1ba2e:	429a      	cmp	r2, r3
   1ba30:	d132      	bne.n	1ba98 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1ba32:	7bda      	ldrb	r2, [r3, #15]
   1ba34:	3a01      	subs	r2, #1
   1ba36:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1ba38:	68c3      	ldr	r3, [r0, #12]
   1ba3a:	2b01      	cmp	r3, #1
   1ba3c:	d905      	bls.n	1ba4a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1ba3e:	3b01      	subs	r3, #1
   1ba40:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1ba42:	f000 fbbb 	bl	1c1bc <k_sched_unlock>

	return 0;
   1ba46:	2000      	movs	r0, #0
}
   1ba48:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1ba4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba4e:	f3ef 8511 	mrs	r5, BASEPRI
   1ba52:	f383 8811 	msr	BASEPRI, r3
   1ba56:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1ba5a:	6901      	ldr	r1, [r0, #16]
   1ba5c:	f008 fe1f 	bl	2469e <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1ba60:	4620      	mov	r0, r4
   1ba62:	f009 f97f 	bl	24d64 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1ba66:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1ba68:	b160      	cbz	r0, 1ba84 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1ba6a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1ba6e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1ba70:	2300      	movs	r3, #0
   1ba72:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1ba76:	f009 f8fe 	bl	24c76 <z_ready_thread>
		z_reschedule(&lock, key);
   1ba7a:	4629      	mov	r1, r5
   1ba7c:	4809      	ldr	r0, [pc, #36]	; (1baa4 <z_impl_k_mutex_unlock+0x84>)
   1ba7e:	f000 fad1 	bl	1c024 <z_reschedule>
   1ba82:	e7de      	b.n	1ba42 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1ba84:	2300      	movs	r3, #0
   1ba86:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1ba88:	f385 8811 	msr	BASEPRI, r5
   1ba8c:	f3bf 8f6f 	isb	sy
   1ba90:	e7d7      	b.n	1ba42 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1ba92:	f06f 0015 	mvn.w	r0, #21
}
   1ba96:	4770      	bx	lr
		return -EPERM;
   1ba98:	f04f 30ff 	mov.w	r0, #4294967295
   1ba9c:	e7d4      	b.n	1ba48 <z_impl_k_mutex_unlock+0x28>
   1ba9e:	bf00      	nop
   1baa0:	200377cc 	.word	0x200377cc
   1baa4:	20037800 	.word	0x20037800

0001baa8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1baa8:	b5d0      	push	{r4, r6, r7, lr}
   1baaa:	b082      	sub	sp, #8
   1baac:	4601      	mov	r1, r0
   1baae:	4616      	mov	r6, r2
   1bab0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1bab2:	4602      	mov	r2, r0
	__asm__ volatile(
   1bab4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bab8:	f3ef 8411 	mrs	r4, BASEPRI
   1babc:	f383 8811 	msr	BASEPRI, r3
   1bac0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1bac4:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1bac8:	b188      	cbz	r0, 1baee <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1baca:	6803      	ldr	r3, [r0, #0]
   1bacc:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1bad0:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1bad2:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1bad4:	4290      	cmp	r0, r2
   1bad6:	d008      	beq.n	1baea <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1bad8:	2101      	movs	r1, #1
   1bada:	f008 fe65 	bl	247a8 <z_queue_node_peek>
	__asm__ volatile(
   1bade:	f384 8811 	msr	BASEPRI, r4
   1bae2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1bae6:	b002      	add	sp, #8
   1bae8:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1baea:	604b      	str	r3, [r1, #4]
}
   1baec:	e7f4      	b.n	1bad8 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1baee:	ea56 0307 	orrs.w	r3, r6, r7
   1baf2:	d00a      	beq.n	1bb0a <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1baf4:	e9cd 6700 	strd	r6, r7, [sp]
   1baf8:	4621      	mov	r1, r4
   1bafa:	4610      	mov	r0, r2
   1bafc:	f000 fb08 	bl	1c110 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1bb00:	b948      	cbnz	r0, 1bb16 <z_impl_k_queue_get+0x6e>
   1bb02:	4b06      	ldr	r3, [pc, #24]	; (1bb1c <z_impl_k_queue_get+0x74>)
   1bb04:	689b      	ldr	r3, [r3, #8]
   1bb06:	6958      	ldr	r0, [r3, #20]
   1bb08:	e7ed      	b.n	1bae6 <z_impl_k_queue_get+0x3e>
   1bb0a:	f384 8811 	msr	BASEPRI, r4
   1bb0e:	f3bf 8f6f 	isb	sy
		return NULL;
   1bb12:	2000      	movs	r0, #0
   1bb14:	e7e7      	b.n	1bae6 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1bb16:	2000      	movs	r0, #0
   1bb18:	e7e5      	b.n	1bae6 <z_impl_k_queue_get+0x3e>
   1bb1a:	bf00      	nop
   1bb1c:	200377cc 	.word	0x200377cc

0001bb20 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1bb20:	b538      	push	{r3, r4, r5, lr}
   1bb22:	4604      	mov	r4, r0
	__asm__ volatile(
   1bb24:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb28:	f3ef 8511 	mrs	r5, BASEPRI
   1bb2c:	f383 8811 	msr	BASEPRI, r3
   1bb30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1bb34:	f009 f916 	bl	24d64 <z_unpend_first_thread>

	if (thread != NULL) {
   1bb38:	b148      	cbz	r0, 1bb4e <z_impl_k_sem_give+0x2e>
   1bb3a:	2200      	movs	r2, #0
   1bb3c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1bb40:	f009 f899 	bl	24c76 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1bb44:	4629      	mov	r1, r5
   1bb46:	4809      	ldr	r0, [pc, #36]	; (1bb6c <z_impl_k_sem_give+0x4c>)
   1bb48:	f000 fa6c 	bl	1c024 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1bb4c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bb4e:	68a3      	ldr	r3, [r4, #8]
   1bb50:	68e2      	ldr	r2, [r4, #12]
   1bb52:	4293      	cmp	r3, r2
   1bb54:	d008      	beq.n	1bb68 <z_impl_k_sem_give+0x48>
   1bb56:	2201      	movs	r2, #1
   1bb58:	4413      	add	r3, r2
   1bb5a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bb5c:	2102      	movs	r1, #2
   1bb5e:	f104 0010 	add.w	r0, r4, #16
   1bb62:	f009 fad2 	bl	2510a <z_handle_obj_poll_events>
}
   1bb66:	e7ed      	b.n	1bb44 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bb68:	2200      	movs	r2, #0
   1bb6a:	e7f5      	b.n	1bb58 <z_impl_k_sem_give+0x38>
   1bb6c:	20037800 	.word	0x20037800

0001bb70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1bb70:	b530      	push	{r4, r5, lr}
   1bb72:	b083      	sub	sp, #12
   1bb74:	461d      	mov	r5, r3
   1bb76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb7a:	f3ef 8111 	mrs	r1, BASEPRI
   1bb7e:	f383 8811 	msr	BASEPRI, r3
   1bb82:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1bb86:	6883      	ldr	r3, [r0, #8]
   1bb88:	b143      	cbz	r3, 1bb9c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1bb8a:	3b01      	subs	r3, #1
   1bb8c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1bb8e:	f381 8811 	msr	BASEPRI, r1
   1bb92:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1bb96:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1bb98:	b003      	add	sp, #12
   1bb9a:	bd30      	pop	{r4, r5, pc}
   1bb9c:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bb9e:	ea54 0305 	orrs.w	r3, r4, r5
   1bba2:	d006      	beq.n	1bbb2 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bba4:	e9cd 4500 	strd	r4, r5, [sp]
   1bba8:	4602      	mov	r2, r0
   1bbaa:	4805      	ldr	r0, [pc, #20]	; (1bbc0 <z_impl_k_sem_take+0x50>)
   1bbac:	f000 fab0 	bl	1c110 <z_pend_curr>
	return ret;
   1bbb0:	e7f2      	b.n	1bb98 <z_impl_k_sem_take+0x28>
   1bbb2:	f381 8811 	msr	BASEPRI, r1
   1bbb6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1bbba:	f06f 000f 	mvn.w	r0, #15
   1bbbe:	e7eb      	b.n	1bb98 <z_impl_k_sem_take+0x28>
   1bbc0:	20037800 	.word	0x20037800

0001bbc4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1bbc4:	b510      	push	{r4, lr}
   1bbc6:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1bbc8:	4b08      	ldr	r3, [pc, #32]	; (1bbec <k_sys_work_q_init+0x28>)
   1bbca:	9302      	str	r3, [sp, #8]
   1bbcc:	2400      	movs	r4, #0
   1bbce:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1bbd2:	ab02      	add	r3, sp, #8
   1bbd4:	9300      	str	r3, [sp, #0]
   1bbd6:	f04f 33ff 	mov.w	r3, #4294967295
   1bbda:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1bbde:	4904      	ldr	r1, [pc, #16]	; (1bbf0 <k_sys_work_q_init+0x2c>)
   1bbe0:	4804      	ldr	r0, [pc, #16]	; (1bbf4 <k_sys_work_q_init+0x30>)
   1bbe2:	f000 f96f 	bl	1bec4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1bbe6:	4620      	mov	r0, r4
   1bbe8:	b004      	add	sp, #16
   1bbea:	bd10      	pop	{r4, pc}
   1bbec:	000278e8 	.word	0x000278e8
   1bbf0:	2003aa20 	.word	0x2003aa20
   1bbf4:	20035110 	.word	0x20035110

0001bbf8 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbfa:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1bbfc:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1bbfe:	f013 0f02 	tst.w	r3, #2
   1bc02:	d15b      	bne.n	1bcbc <submit_to_queue_locked+0xc4>
   1bc04:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1bc06:	f013 0f04 	tst.w	r3, #4
   1bc0a:	d15c      	bne.n	1bcc6 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1bc0c:	680b      	ldr	r3, [r1, #0]
   1bc0e:	2b00      	cmp	r3, #0
   1bc10:	d037      	beq.n	1bc82 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1bc12:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1bc14:	f013 0f01 	tst.w	r3, #1
   1bc18:	d036      	beq.n	1bc88 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1bc1a:	68a3      	ldr	r3, [r4, #8]
   1bc1c:	602b      	str	r3, [r5, #0]
			ret = 2;
   1bc1e:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1bc20:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1bc22:	2e00      	cmp	r6, #0
   1bc24:	d03e      	beq.n	1bca4 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1bc26:	4b29      	ldr	r3, [pc, #164]	; (1bccc <submit_to_queue_locked+0xd4>)
   1bc28:	689b      	ldr	r3, [r3, #8]
   1bc2a:	42b3      	cmp	r3, r6
   1bc2c:	d02e      	beq.n	1bc8c <submit_to_queue_locked+0x94>
   1bc2e:	2300      	movs	r3, #0
   1bc30:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1bc32:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1bc36:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1bc3a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1bc3e:	f013 0f01 	tst.w	r3, #1
   1bc42:	d032      	beq.n	1bcaa <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1bc44:	b101      	cbz	r1, 1bc48 <submit_to_queue_locked+0x50>
   1bc46:	b39a      	cbz	r2, 1bcb0 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1bc48:	b100      	cbz	r0, 1bc4c <submit_to_queue_locked+0x54>
   1bc4a:	b3a1      	cbz	r1, 1bcb6 <submit_to_queue_locked+0xbe>
	parent->next = child;
   1bc4c:	2300      	movs	r3, #0
   1bc4e:	6023      	str	r3, [r4, #0]
	return list->tail;
   1bc50:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1bc54:	b30b      	cbz	r3, 1bc9a <submit_to_queue_locked+0xa2>
	parent->next = child;
   1bc56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bc58:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1bc5c:	2200      	movs	r2, #0
   1bc5e:	4611      	mov	r1, r2
   1bc60:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1bc64:	f009 f8ba 	bl	24ddc <z_sched_wake>
		ret = 1;
   1bc68:	2001      	movs	r0, #1

		if (rc < 0) {
   1bc6a:	2800      	cmp	r0, #0
   1bc6c:	db06      	blt.n	1bc7c <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1bc6e:	68e3      	ldr	r3, [r4, #12]
   1bc70:	f043 0304 	orr.w	r3, r3, #4
   1bc74:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1bc76:	682b      	ldr	r3, [r5, #0]
   1bc78:	60a3      	str	r3, [r4, #8]
   1bc7a:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1bc7c:	2800      	cmp	r0, #0
   1bc7e:	dc21      	bgt.n	1bcc4 <submit_to_queue_locked+0xcc>
   1bc80:	e01e      	b.n	1bcc0 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1bc82:	6883      	ldr	r3, [r0, #8]
   1bc84:	600b      	str	r3, [r1, #0]
   1bc86:	e7c4      	b.n	1bc12 <submit_to_queue_locked+0x1a>
		ret = 1;
   1bc88:	2701      	movs	r7, #1
   1bc8a:	e7c9      	b.n	1bc20 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1bc8c:	f008 fcb1 	bl	245f2 <k_is_in_isr>
   1bc90:	b908      	cbnz	r0, 1bc96 <submit_to_queue_locked+0x9e>
   1bc92:	2301      	movs	r3, #1
   1bc94:	e7cc      	b.n	1bc30 <submit_to_queue_locked+0x38>
   1bc96:	2300      	movs	r3, #0
   1bc98:	e7ca      	b.n	1bc30 <submit_to_queue_locked+0x38>
   1bc9a:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1bc9e:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1bca2:	e7db      	b.n	1bc5c <submit_to_queue_locked+0x64>
		return -EINVAL;
   1bca4:	f06f 0015 	mvn.w	r0, #21
   1bca8:	e7df      	b.n	1bc6a <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1bcaa:	f06f 0012 	mvn.w	r0, #18
   1bcae:	e7dc      	b.n	1bc6a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1bcb0:	f06f 000f 	mvn.w	r0, #15
   1bcb4:	e7d9      	b.n	1bc6a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1bcb6:	f06f 000f 	mvn.w	r0, #15
   1bcba:	e7d6      	b.n	1bc6a <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1bcbc:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1bcc0:	2300      	movs	r3, #0
   1bcc2:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1bcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1bcc6:	2000      	movs	r0, #0
   1bcc8:	e7fa      	b.n	1bcc0 <submit_to_queue_locked+0xc8>
   1bcca:	bf00      	nop
   1bccc:	200377cc 	.word	0x200377cc

0001bcd0 <finalize_cancel_locked>:
{
   1bcd0:	b570      	push	{r4, r5, r6, lr}
   1bcd2:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1bcd4:	68c3      	ldr	r3, [r0, #12]
   1bcd6:	f023 0302 	bic.w	r3, r3, #2
   1bcda:	60c3      	str	r3, [r0, #12]
	return list->head;
   1bcdc:	4b19      	ldr	r3, [pc, #100]	; (1bd44 <finalize_cancel_locked+0x74>)
   1bcde:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bce0:	b1e8      	cbz	r0, 1bd1e <finalize_cancel_locked+0x4e>
   1bce2:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bce4:	b100      	cbz	r0, 1bce8 <finalize_cancel_locked+0x18>
	return node->next;
   1bce6:	6804      	ldr	r4, [r0, #0]
   1bce8:	2600      	movs	r6, #0
   1bcea:	e01d      	b.n	1bd28 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1bcec:	b15e      	cbz	r6, 1bd06 <finalize_cancel_locked+0x36>
	return node->next;
   1bcee:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1bcf0:	6033      	str	r3, [r6, #0]
	return list->tail;
   1bcf2:	4b14      	ldr	r3, [pc, #80]	; (1bd44 <finalize_cancel_locked+0x74>)
   1bcf4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bcf6:	4298      	cmp	r0, r3
   1bcf8:	d00e      	beq.n	1bd18 <finalize_cancel_locked+0x48>
	parent->next = child;
   1bcfa:	2300      	movs	r3, #0
   1bcfc:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1bd00:	f7ff ff0e 	bl	1bb20 <z_impl_k_sem_give>
}
   1bd04:	e015      	b.n	1bd32 <finalize_cancel_locked+0x62>
	return node->next;
   1bd06:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1bd08:	4b0e      	ldr	r3, [pc, #56]	; (1bd44 <finalize_cancel_locked+0x74>)
   1bd0a:	601a      	str	r2, [r3, #0]
	return list->tail;
   1bd0c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1bd0e:	4298      	cmp	r0, r3
   1bd10:	d1f3      	bne.n	1bcfa <finalize_cancel_locked+0x2a>
	list->tail = node;
   1bd12:	4b0c      	ldr	r3, [pc, #48]	; (1bd44 <finalize_cancel_locked+0x74>)
   1bd14:	605a      	str	r2, [r3, #4]
}
   1bd16:	e7f0      	b.n	1bcfa <finalize_cancel_locked+0x2a>
	list->tail = node;
   1bd18:	4b0a      	ldr	r3, [pc, #40]	; (1bd44 <finalize_cancel_locked+0x74>)
   1bd1a:	605e      	str	r6, [r3, #4]
}
   1bd1c:	e7ed      	b.n	1bcfa <finalize_cancel_locked+0x2a>
   1bd1e:	4604      	mov	r4, r0
   1bd20:	e7e2      	b.n	1bce8 <finalize_cancel_locked+0x18>
   1bd22:	4623      	mov	r3, r4
   1bd24:	4620      	mov	r0, r4
   1bd26:	461c      	mov	r4, r3
   1bd28:	b150      	cbz	r0, 1bd40 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1bd2a:	6843      	ldr	r3, [r0, #4]
   1bd2c:	42ab      	cmp	r3, r5
   1bd2e:	d0dd      	beq.n	1bcec <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1bd30:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1bd32:	2c00      	cmp	r4, #0
   1bd34:	d0f5      	beq.n	1bd22 <finalize_cancel_locked+0x52>
   1bd36:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bd38:	2c00      	cmp	r4, #0
   1bd3a:	d0f3      	beq.n	1bd24 <finalize_cancel_locked+0x54>
	return node->next;
   1bd3c:	6823      	ldr	r3, [r4, #0]
   1bd3e:	e7f1      	b.n	1bd24 <finalize_cancel_locked+0x54>
}
   1bd40:	bd70      	pop	{r4, r5, r6, pc}
   1bd42:	bf00      	nop
   1bd44:	20037800 	.word	0x20037800

0001bd48 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1bd48:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1bd4a:	68c5      	ldr	r5, [r0, #12]
   1bd4c:	f015 0f02 	tst.w	r5, #2
   1bd50:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1bd54:	d101      	bne.n	1bd5a <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1bd56:	4628      	mov	r0, r5
   1bd58:	bd70      	pop	{r4, r5, r6, pc}
   1bd5a:	4604      	mov	r4, r0
   1bd5c:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1bd5e:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bd62:	2201      	movs	r2, #1
   1bd64:	2100      	movs	r1, #0
   1bd66:	f008 fd8d 	bl	24884 <z_impl_k_sem_init>
	canceler->work = work;
   1bd6a:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1bd6c:	2300      	movs	r3, #0
   1bd6e:	6033      	str	r3, [r6, #0]
	return list->tail;
   1bd70:	4b05      	ldr	r3, [pc, #20]	; (1bd88 <cancel_sync_locked+0x40>)
   1bd72:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1bd74:	b11b      	cbz	r3, 1bd7e <cancel_sync_locked+0x36>
	parent->next = child;
   1bd76:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1bd78:	4b03      	ldr	r3, [pc, #12]	; (1bd88 <cancel_sync_locked+0x40>)
   1bd7a:	605e      	str	r6, [r3, #4]
}
   1bd7c:	e7eb      	b.n	1bd56 <cancel_sync_locked+0xe>
   1bd7e:	4b02      	ldr	r3, [pc, #8]	; (1bd88 <cancel_sync_locked+0x40>)
   1bd80:	605e      	str	r6, [r3, #4]
	list->head = node;
   1bd82:	601e      	str	r6, [r3, #0]
}
   1bd84:	e7e7      	b.n	1bd56 <cancel_sync_locked+0xe>
   1bd86:	bf00      	nop
   1bd88:	20037800 	.word	0x20037800

0001bd8c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd8e:	b085      	sub	sp, #20
   1bd90:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1bd92:	e016      	b.n	1bdc2 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1bd94:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1bd98:	f023 0204 	bic.w	r2, r3, #4
   1bd9c:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1bda0:	f013 0f04 	tst.w	r3, #4
   1bda4:	d158      	bne.n	1be58 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1bda6:	2300      	movs	r3, #0
   1bda8:	9302      	str	r3, [sp, #8]
   1bdaa:	f04f 32ff 	mov.w	r2, #4294967295
   1bdae:	f04f 33ff 	mov.w	r3, #4294967295
   1bdb2:	e9cd 2300 	strd	r2, r3, [sp]
   1bdb6:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1bdba:	4631      	mov	r1, r6
   1bdbc:	482e      	ldr	r0, [pc, #184]	; (1be78 <work_queue_main+0xec>)
   1bdbe:	f000 fccb 	bl	1c758 <z_sched_wait>
	__asm__ volatile(
   1bdc2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdc6:	f3ef 8611 	mrs	r6, BASEPRI
   1bdca:	f383 8811 	msr	BASEPRI, r3
   1bdce:	f3bf 8f6f 	isb	sy
	return list->head;
   1bdd2:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1bdd6:	2c00      	cmp	r4, #0
   1bdd8:	d0dc      	beq.n	1bd94 <work_queue_main+0x8>
	return node->next;
   1bdda:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1bddc:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1bde0:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bde4:	4294      	cmp	r4, r2
   1bde6:	d034      	beq.n	1be52 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1bde8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1bdec:	f043 0302 	orr.w	r3, r3, #2
   1bdf0:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1bdf4:	68e3      	ldr	r3, [r4, #12]
   1bdf6:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1bdfa:	f023 0304 	bic.w	r3, r3, #4
   1bdfe:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1be00:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1be02:	2c00      	cmp	r4, #0
   1be04:	d0cf      	beq.n	1bda6 <work_queue_main+0x1a>
	__asm__ volatile(
   1be06:	f386 8811 	msr	BASEPRI, r6
   1be0a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1be0e:	4620      	mov	r0, r4
   1be10:	4798      	blx	r3
	__asm__ volatile(
   1be12:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be16:	f3ef 8611 	mrs	r6, BASEPRI
   1be1a:	f383 8811 	msr	BASEPRI, r3
   1be1e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1be22:	68e3      	ldr	r3, [r4, #12]
   1be24:	f023 0301 	bic.w	r3, r3, #1
   1be28:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1be2a:	f013 0f02 	tst.w	r3, #2
   1be2e:	d11e      	bne.n	1be6e <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1be30:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1be34:	f023 0302 	bic.w	r3, r3, #2
   1be38:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1be3c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1be40:	f386 8811 	msr	BASEPRI, r6
   1be44:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1be48:	2b00      	cmp	r3, #0
   1be4a:	d1ba      	bne.n	1bdc2 <work_queue_main+0x36>
	z_impl_k_yield();
   1be4c:	f000 fb86 	bl	1c55c <z_impl_k_yield>
}
   1be50:	e7b7      	b.n	1bdc2 <work_queue_main+0x36>
	list->tail = node;
   1be52:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1be56:	e7c7      	b.n	1bde8 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1be58:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1be5c:	2200      	movs	r2, #0
   1be5e:	2101      	movs	r1, #1
   1be60:	4638      	mov	r0, r7
   1be62:	f008 ffbb 	bl	24ddc <z_sched_wake>
   1be66:	2800      	cmp	r0, #0
   1be68:	d1f8      	bne.n	1be5c <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1be6a:	2300      	movs	r3, #0
   1be6c:	e7c9      	b.n	1be02 <work_queue_main+0x76>
				finalize_cancel_locked(work);
   1be6e:	4620      	mov	r0, r4
   1be70:	f7ff ff2e 	bl	1bcd0 <finalize_cancel_locked>
   1be74:	e7dc      	b.n	1be30 <work_queue_main+0xa4>
   1be76:	bf00      	nop
   1be78:	20037800 	.word	0x20037800

0001be7c <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1be7c:	b570      	push	{r4, r5, r6, lr}
   1be7e:	4606      	mov	r6, r0
   1be80:	4608      	mov	r0, r1
   1be82:	4614      	mov	r4, r2
   1be84:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1be86:	ea54 0305 	orrs.w	r3, r4, r5
   1be8a:	d00c      	beq.n	1bea6 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1be8c:	68cb      	ldr	r3, [r1, #12]
   1be8e:	f043 0308 	orr.w	r3, r3, #8
   1be92:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1be94:	6833      	ldr	r3, [r6, #0]
   1be96:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1be98:	462b      	mov	r3, r5
   1be9a:	4905      	ldr	r1, [pc, #20]	; (1beb0 <schedule_for_queue_locked+0x34>)
   1be9c:	3010      	adds	r0, #16
   1be9e:	f000 fccf 	bl	1c840 <z_add_timeout>

	return ret;
   1bea2:	2001      	movs	r0, #1
}
   1bea4:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1bea6:	4631      	mov	r1, r6
   1bea8:	f7ff fea6 	bl	1bbf8 <submit_to_queue_locked>
   1beac:	e7fa      	b.n	1bea4 <schedule_for_queue_locked+0x28>
   1beae:	bf00      	nop
   1beb0:	0002492f 	.word	0x0002492f

0001beb4 <k_work_submit>:
{
   1beb4:	b508      	push	{r3, lr}
   1beb6:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1beb8:	4801      	ldr	r0, [pc, #4]	; (1bec0 <k_work_submit+0xc>)
   1beba:	f008 fd72 	bl	249a2 <k_work_submit_to_queue>
}
   1bebe:	bd08      	pop	{r3, pc}
   1bec0:	20035110 	.word	0x20035110

0001bec4 <k_work_queue_start>:
{
   1bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bec6:	b089      	sub	sp, #36	; 0x24
   1bec8:	4604      	mov	r4, r0
   1beca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1becc:	2000      	movs	r0, #0
   1bece:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1bed2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1bed6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1beda:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1bede:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1bee2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1bee6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1beea:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1beee:	b1fd      	cbz	r5, 1bf30 <k_work_queue_start+0x6c>
   1bef0:	7928      	ldrb	r0, [r5, #4]
   1bef2:	b9f8      	cbnz	r0, 1bf34 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1bef4:	2001      	movs	r0, #1
	*flagp = flags;
   1bef6:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1befa:	f04f 36ff 	mov.w	r6, #4294967295
   1befe:	f04f 37ff 	mov.w	r7, #4294967295
   1bf02:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1bf06:	2000      	movs	r0, #0
   1bf08:	9004      	str	r0, [sp, #16]
   1bf0a:	9303      	str	r3, [sp, #12]
   1bf0c:	9002      	str	r0, [sp, #8]
   1bf0e:	9001      	str	r0, [sp, #4]
   1bf10:	9400      	str	r4, [sp, #0]
   1bf12:	4b0a      	ldr	r3, [pc, #40]	; (1bf3c <k_work_queue_start+0x78>)
   1bf14:	4620      	mov	r0, r4
   1bf16:	f008 fb83 	bl	24620 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1bf1a:	b125      	cbz	r5, 1bf26 <k_work_queue_start+0x62>
   1bf1c:	6829      	ldr	r1, [r5, #0]
   1bf1e:	b111      	cbz	r1, 1bf26 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1bf20:	4620      	mov	r0, r4
   1bf22:	f7ff fc0f 	bl	1b744 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1bf26:	4620      	mov	r0, r4
   1bf28:	f008 fb6b 	bl	24602 <z_impl_k_thread_start>
}
   1bf2c:	b009      	add	sp, #36	; 0x24
   1bf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1bf30:	2001      	movs	r0, #1
   1bf32:	e7e0      	b.n	1bef6 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1bf34:	f240 1001 	movw	r0, #257	; 0x101
   1bf38:	e7dd      	b.n	1bef6 <k_work_queue_start+0x32>
   1bf3a:	bf00      	nop
   1bf3c:	0001bd8d 	.word	0x0001bd8d

0001bf40 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1bf40:	b508      	push	{r3, lr}
   1bf42:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1bf44:	4801      	ldr	r0, [pc, #4]	; (1bf4c <k_work_schedule+0xc>)
   1bf46:	f008 fd58 	bl	249fa <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1bf4a:	bd08      	pop	{r3, pc}
   1bf4c:	20035110 	.word	0x20035110

0001bf50 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1bf50:	b508      	push	{r3, lr}
   1bf52:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1bf54:	4801      	ldr	r0, [pc, #4]	; (1bf5c <k_work_reschedule+0xc>)
   1bf56:	f008 fd6a 	bl	24a2e <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1bf5a:	bd08      	pop	{r3, pc}
   1bf5c:	20035110 	.word	0x20035110

0001bf60 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1bf60:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bf62:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bf66:	bf08      	it	eq
   1bf68:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bf6c:	d100      	bne.n	1bf70 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1bf6e:	bd38      	pop	{r3, r4, r5, pc}
   1bf70:	4902      	ldr	r1, [pc, #8]	; (1bf7c <add_thread_timeout+0x1c>)
   1bf72:	3018      	adds	r0, #24
   1bf74:	f000 fc64 	bl	1c840 <z_add_timeout>
   1bf78:	e7f9      	b.n	1bf6e <add_thread_timeout+0xe>
   1bf7a:	bf00      	nop
   1bf7c:	00024caf 	.word	0x00024caf

0001bf80 <z_reset_time_slice>:
{
   1bf80:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1bf82:	4b08      	ldr	r3, [pc, #32]	; (1bfa4 <z_reset_time_slice+0x24>)
   1bf84:	681b      	ldr	r3, [r3, #0]
   1bf86:	b903      	cbnz	r3, 1bf8a <z_reset_time_slice+0xa>
}
   1bf88:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1bf8a:	f7f5 ff19 	bl	11dc0 <sys_clock_elapsed>
   1bf8e:	4603      	mov	r3, r0
   1bf90:	4a04      	ldr	r2, [pc, #16]	; (1bfa4 <z_reset_time_slice+0x24>)
   1bf92:	6810      	ldr	r0, [r2, #0]
   1bf94:	4403      	add	r3, r0
   1bf96:	4a04      	ldr	r2, [pc, #16]	; (1bfa8 <z_reset_time_slice+0x28>)
   1bf98:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1bf9a:	2100      	movs	r1, #0
   1bf9c:	f008 ffa0 	bl	24ee0 <z_set_timeout_expiry>
}
   1bfa0:	e7f2      	b.n	1bf88 <z_reset_time_slice+0x8>
   1bfa2:	bf00      	nop
   1bfa4:	20037810 	.word	0x20037810
   1bfa8:	200377cc 	.word	0x200377cc

0001bfac <k_sched_time_slice_set>:
{
   1bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfb0:	4606      	mov	r6, r0
   1bfb2:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1bfb4:	2300      	movs	r3, #0
	__asm__ volatile(
   1bfb6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bfba:	f3ef 8711 	mrs	r7, BASEPRI
   1bfbe:	f382 8811 	msr	BASEPRI, r2
   1bfc2:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1bfc6:	e009      	b.n	1bfdc <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1bfc8:	4b13      	ldr	r3, [pc, #76]	; (1c018 <k_sched_time_slice_set+0x6c>)
   1bfca:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1bfce:	f7ff ffd7 	bl	1bf80 <z_reset_time_slice>
	__asm__ volatile(
   1bfd2:	f387 8811 	msr	BASEPRI, r7
   1bfd6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1bfda:	2301      	movs	r3, #1
   1bfdc:	b9cb      	cbnz	r3, 1c012 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1bfde:	2300      	movs	r3, #0
   1bfe0:	4a0e      	ldr	r2, [pc, #56]	; (1c01c <k_sched_time_slice_set+0x70>)
   1bfe2:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1bfe4:	0c75      	lsrs	r5, r6, #17
   1bfe6:	03f4      	lsls	r4, r6, #15
   1bfe8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bfec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bff0:	2300      	movs	r3, #0
   1bff2:	1820      	adds	r0, r4, r0
   1bff4:	f04f 0100 	mov.w	r1, #0
   1bff8:	eb45 0101 	adc.w	r1, r5, r1
   1bffc:	f7e4 f880 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1c000:	4b07      	ldr	r3, [pc, #28]	; (1c020 <k_sched_time_slice_set+0x74>)
   1c002:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1c004:	2e00      	cmp	r6, #0
   1c006:	dddf      	ble.n	1bfc8 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1c008:	2802      	cmp	r0, #2
   1c00a:	bfb8      	it	lt
   1c00c:	2002      	movlt	r0, #2
   1c00e:	6018      	str	r0, [r3, #0]
   1c010:	e7da      	b.n	1bfc8 <k_sched_time_slice_set+0x1c>
}
   1c012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c016:	bf00      	nop
   1c018:	2003780c 	.word	0x2003780c
   1c01c:	200377cc 	.word	0x200377cc
   1c020:	20037810 	.word	0x20037810

0001c024 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1c024:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1c026:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c028:	b921      	cbnz	r1, 1c034 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c02a:	f3ef 8305 	mrs	r3, IPSR
   1c02e:	b913      	cbnz	r3, 1c036 <z_reschedule+0x12>
   1c030:	2101      	movs	r1, #1
   1c032:	e000      	b.n	1c036 <z_reschedule+0x12>
   1c034:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1c036:	f011 0f01 	tst.w	r1, #1
   1c03a:	d007      	beq.n	1c04c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1c03c:	4b06      	ldr	r3, [pc, #24]	; (1c058 <z_reschedule+0x34>)
   1c03e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	return new_thread != _current;
   1c040:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1c042:	429a      	cmp	r2, r3
   1c044:	d002      	beq.n	1c04c <z_reschedule+0x28>
	ret = arch_swap(key);
   1c046:	f7f6 fbb3 	bl	127b0 <arch_swap>
		z_swap(lock, key);
   1c04a:	e003      	b.n	1c054 <z_reschedule+0x30>
   1c04c:	f380 8811 	msr	BASEPRI, r0
   1c050:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1c054:	bd08      	pop	{r3, pc}
   1c056:	bf00      	nop
   1c058:	200377cc 	.word	0x200377cc

0001c05c <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1c05c:	2300      	movs	r3, #0
	__asm__ volatile(
   1c05e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c062:	f3ef 8111 	mrs	r1, BASEPRI
   1c066:	f382 8811 	msr	BASEPRI, r2
   1c06a:	f3bf 8f6f 	isb	sy
   1c06e:	b953      	cbnz	r3, 1c086 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1c070:	4b05      	ldr	r3, [pc, #20]	; (1c088 <k_sched_lock+0x2c>)
   1c072:	689a      	ldr	r2, [r3, #8]
   1c074:	7bd3      	ldrb	r3, [r2, #15]
   1c076:	3b01      	subs	r3, #1
   1c078:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1c07a:	f381 8811 	msr	BASEPRI, r1
   1c07e:	f3bf 8f6f 	isb	sy
   1c082:	2301      	movs	r3, #1
   1c084:	e7f3      	b.n	1c06e <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1c086:	4770      	bx	lr
   1c088:	200377cc 	.word	0x200377cc

0001c08c <update_cache>:
{
   1c08c:	b538      	push	{r3, r4, r5, lr}
   1c08e:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1c090:	480f      	ldr	r0, [pc, #60]	; (1c0d0 <update_cache+0x44>)
   1c092:	f008 fd9e 	bl	24bd2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1c096:	4605      	mov	r5, r0
   1c098:	b170      	cbz	r0, 1c0b8 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1c09a:	b984      	cbnz	r4, 1c0be <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1c09c:	4b0d      	ldr	r3, [pc, #52]	; (1c0d4 <update_cache+0x48>)
   1c09e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1c0a0:	7b5a      	ldrb	r2, [r3, #13]
   1c0a2:	f012 0f1f 	tst.w	r2, #31
   1c0a6:	d10a      	bne.n	1c0be <update_cache+0x32>
	return node->next != NULL;
   1c0a8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c0aa:	b942      	cbnz	r2, 1c0be <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c0ac:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1c0ae:	2a7f      	cmp	r2, #127	; 0x7f
   1c0b0:	d905      	bls.n	1c0be <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1c0b2:	4a08      	ldr	r2, [pc, #32]	; (1c0d4 <update_cache+0x48>)
   1c0b4:	6253      	str	r3, [r2, #36]	; 0x24
   1c0b6:	e00a      	b.n	1c0ce <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1c0b8:	4b06      	ldr	r3, [pc, #24]	; (1c0d4 <update_cache+0x48>)
   1c0ba:	68dd      	ldr	r5, [r3, #12]
   1c0bc:	e7ed      	b.n	1c09a <update_cache+0xe>
		if (thread != _current) {
   1c0be:	4b05      	ldr	r3, [pc, #20]	; (1c0d4 <update_cache+0x48>)
   1c0c0:	689b      	ldr	r3, [r3, #8]
   1c0c2:	42ab      	cmp	r3, r5
   1c0c4:	d001      	beq.n	1c0ca <update_cache+0x3e>
			z_reset_time_slice();
   1c0c6:	f7ff ff5b 	bl	1bf80 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c0ca:	4b02      	ldr	r3, [pc, #8]	; (1c0d4 <update_cache+0x48>)
   1c0cc:	625d      	str	r5, [r3, #36]	; 0x24
}
   1c0ce:	bd38      	pop	{r3, r4, r5, pc}
   1c0d0:	200377f4 	.word	0x200377f4
   1c0d4:	200377cc 	.word	0x200377cc

0001c0d8 <unready_thread>:
{
   1c0d8:	b510      	push	{r4, lr}
   1c0da:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1c0dc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1c0de:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c0e2:	2b00      	cmp	r3, #0
   1c0e4:	db08      	blt.n	1c0f8 <unready_thread+0x20>
	update_cache(thread == _current);
   1c0e6:	4b08      	ldr	r3, [pc, #32]	; (1c108 <unready_thread+0x30>)
   1c0e8:	6898      	ldr	r0, [r3, #8]
   1c0ea:	42a0      	cmp	r0, r4
   1c0ec:	bf14      	ite	ne
   1c0ee:	2000      	movne	r0, #0
   1c0f0:	2001      	moveq	r0, #1
   1c0f2:	f7ff ffcb 	bl	1c08c <update_cache>
}
   1c0f6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c0f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c0fc:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1c0fe:	4601      	mov	r1, r0
   1c100:	4802      	ldr	r0, [pc, #8]	; (1c10c <unready_thread+0x34>)
   1c102:	f008 fd3b 	bl	24b7c <z_priq_dumb_remove>
}
   1c106:	e7ee      	b.n	1c0e6 <unready_thread+0xe>
   1c108:	200377cc 	.word	0x200377cc
   1c10c:	200377f4 	.word	0x200377f4

0001c110 <z_pend_curr>:
{
   1c110:	b510      	push	{r4, lr}
   1c112:	460c      	mov	r4, r1
   1c114:	4611      	mov	r1, r2
	pending_current = _current;
   1c116:	4b06      	ldr	r3, [pc, #24]	; (1c130 <z_pend_curr+0x20>)
   1c118:	6898      	ldr	r0, [r3, #8]
   1c11a:	4b06      	ldr	r3, [pc, #24]	; (1c134 <z_pend_curr+0x24>)
   1c11c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1c11e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c122:	f008 fd87 	bl	24c34 <pend>
   1c126:	4620      	mov	r0, r4
   1c128:	f7f6 fb42 	bl	127b0 <arch_swap>
}
   1c12c:	bd10      	pop	{r4, pc}
   1c12e:	bf00      	nop
   1c130:	200377cc 	.word	0x200377cc
   1c134:	20037808 	.word	0x20037808

0001c138 <z_impl_k_thread_suspend>:
{
   1c138:	b538      	push	{r3, r4, r5, lr}
   1c13a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1c13c:	3018      	adds	r0, #24
   1c13e:	f008 fe9b 	bl	24e78 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1c142:	2300      	movs	r3, #0
	__asm__ volatile(
   1c144:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c148:	f3ef 8511 	mrs	r5, BASEPRI
   1c14c:	f382 8811 	msr	BASEPRI, r2
   1c150:	f3bf 8f6f 	isb	sy
   1c154:	e010      	b.n	1c178 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c156:	7b63      	ldrb	r3, [r4, #13]
   1c158:	f043 0310 	orr.w	r3, r3, #16
   1c15c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1c15e:	4b15      	ldr	r3, [pc, #84]	; (1c1b4 <z_impl_k_thread_suspend+0x7c>)
   1c160:	6898      	ldr	r0, [r3, #8]
   1c162:	42a0      	cmp	r0, r4
   1c164:	bf14      	ite	ne
   1c166:	2000      	movne	r0, #0
   1c168:	2001      	moveq	r0, #1
   1c16a:	f7ff ff8f 	bl	1c08c <update_cache>
	__asm__ volatile(
   1c16e:	f385 8811 	msr	BASEPRI, r5
   1c172:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c176:	2301      	movs	r3, #1
   1c178:	b963      	cbnz	r3, 1c194 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1c17a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1c17c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1c180:	2b00      	cmp	r3, #0
   1c182:	dae8      	bge.n	1c156 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c184:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c188:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   1c18a:	4621      	mov	r1, r4
   1c18c:	480a      	ldr	r0, [pc, #40]	; (1c1b8 <z_impl_k_thread_suspend+0x80>)
   1c18e:	f008 fcf5 	bl	24b7c <z_priq_dumb_remove>
}
   1c192:	e7e0      	b.n	1c156 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1c194:	4b07      	ldr	r3, [pc, #28]	; (1c1b4 <z_impl_k_thread_suspend+0x7c>)
   1c196:	689b      	ldr	r3, [r3, #8]
   1c198:	42a3      	cmp	r3, r4
   1c19a:	d000      	beq.n	1c19e <z_impl_k_thread_suspend+0x66>
}
   1c19c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c19e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1a2:	f3ef 8011 	mrs	r0, BASEPRI
   1c1a6:	f383 8811 	msr	BASEPRI, r3
   1c1aa:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1c1ae:	f008 fcd0 	bl	24b52 <z_reschedule_irqlock>
   1c1b2:	e7f3      	b.n	1c19c <z_impl_k_thread_suspend+0x64>
   1c1b4:	200377cc 	.word	0x200377cc
   1c1b8:	200377f4 	.word	0x200377f4

0001c1bc <k_sched_unlock>:

void k_sched_unlock(void)
{
   1c1bc:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1c1be:	2300      	movs	r3, #0
   1c1c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c1c4:	f3ef 8411 	mrs	r4, BASEPRI
   1c1c8:	f382 8811 	msr	BASEPRI, r2
   1c1cc:	f3bf 8f6f 	isb	sy
   1c1d0:	b96b      	cbnz	r3, 1c1ee <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1c1d2:	4b0c      	ldr	r3, [pc, #48]	; (1c204 <k_sched_unlock+0x48>)
   1c1d4:	689a      	ldr	r2, [r3, #8]
   1c1d6:	7bd3      	ldrb	r3, [r2, #15]
   1c1d8:	3301      	adds	r3, #1
   1c1da:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1c1dc:	2000      	movs	r0, #0
   1c1de:	f7ff ff55 	bl	1c08c <update_cache>
	__asm__ volatile(
   1c1e2:	f384 8811 	msr	BASEPRI, r4
   1c1e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c1ea:	2301      	movs	r3, #1
   1c1ec:	e7f0      	b.n	1c1d0 <k_sched_unlock+0x14>
	__asm__ volatile(
   1c1ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1f2:	f3ef 8011 	mrs	r0, BASEPRI
   1c1f6:	f383 8811 	msr	BASEPRI, r3
   1c1fa:	f3bf 8f6f 	isb	sy
   1c1fe:	f008 fca8 	bl	24b52 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1c202:	bd10      	pop	{r4, pc}
   1c204:	200377cc 	.word	0x200377cc

0001c208 <move_thread_to_end_of_prio_q>:
{
   1c208:	b538      	push	{r3, r4, r5, lr}
   1c20a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1c20c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1c20e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c212:	2b00      	cmp	r3, #0
   1c214:	db28      	blt.n	1c268 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c216:	7b6b      	ldrb	r3, [r5, #13]
   1c218:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c21c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1c21e:	4b1a      	ldr	r3, [pc, #104]	; (1c288 <move_thread_to_end_of_prio_q+0x80>)
   1c220:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c224:	429c      	cmp	r4, r3
   1c226:	d02d      	beq.n	1c284 <move_thread_to_end_of_prio_q+0x7c>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c228:	b16c      	cbz	r4, 1c246 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c22a:	4621      	mov	r1, r4
   1c22c:	4628      	mov	r0, r5
   1c22e:	f008 fc67 	bl	24b00 <z_sched_prio_cmp>
   1c232:	2800      	cmp	r0, #0
   1c234:	dc20      	bgt.n	1c278 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c236:	b134      	cbz	r4, 1c246 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1c238:	4b13      	ldr	r3, [pc, #76]	; (1c288 <move_thread_to_end_of_prio_q+0x80>)
   1c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c23c:	429c      	cmp	r4, r3
   1c23e:	d002      	beq.n	1c246 <move_thread_to_end_of_prio_q+0x3e>
   1c240:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c242:	2c00      	cmp	r4, #0
   1c244:	d1f0      	bne.n	1c228 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1c246:	4b10      	ldr	r3, [pc, #64]	; (1c288 <move_thread_to_end_of_prio_q+0x80>)
   1c248:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	node->next = list;
   1c24a:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1c24e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1c250:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1c252:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1c254:	62dd      	str	r5, [r3, #44]	; 0x2c
	update_cache(thread == _current);
   1c256:	4b0c      	ldr	r3, [pc, #48]	; (1c288 <move_thread_to_end_of_prio_q+0x80>)
   1c258:	6898      	ldr	r0, [r3, #8]
   1c25a:	42a8      	cmp	r0, r5
   1c25c:	bf14      	ite	ne
   1c25e:	2000      	movne	r0, #0
   1c260:	2001      	moveq	r0, #1
   1c262:	f7ff ff13 	bl	1c08c <update_cache>
}
   1c266:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c268:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1c26c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1c26e:	4601      	mov	r1, r0
   1c270:	4806      	ldr	r0, [pc, #24]	; (1c28c <move_thread_to_end_of_prio_q+0x84>)
   1c272:	f008 fc83 	bl	24b7c <z_priq_dumb_remove>
}
   1c276:	e7ce      	b.n	1c216 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1c278:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1c27a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1c27c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1c27e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c280:	6065      	str	r5, [r4, #4]
}
   1c282:	e7e8      	b.n	1c256 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c284:	2400      	movs	r4, #0
   1c286:	e7cf      	b.n	1c228 <move_thread_to_end_of_prio_q+0x20>
   1c288:	200377cc 	.word	0x200377cc
   1c28c:	200377f4 	.word	0x200377f4

0001c290 <z_time_slice>:
{
   1c290:	b510      	push	{r4, lr}
   1c292:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c296:	f3ef 8411 	mrs	r4, BASEPRI
   1c29a:	f383 8811 	msr	BASEPRI, r3
   1c29e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1c2a2:	4b1c      	ldr	r3, [pc, #112]	; (1c314 <z_time_slice+0x84>)
   1c2a4:	689b      	ldr	r3, [r3, #8]
   1c2a6:	4a1c      	ldr	r2, [pc, #112]	; (1c318 <z_time_slice+0x88>)
   1c2a8:	6812      	ldr	r2, [r2, #0]
   1c2aa:	4293      	cmp	r3, r2
   1c2ac:	d01d      	beq.n	1c2ea <z_time_slice+0x5a>
	pending_current = NULL;
   1c2ae:	4a1a      	ldr	r2, [pc, #104]	; (1c318 <z_time_slice+0x88>)
   1c2b0:	2100      	movs	r1, #0
   1c2b2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1c2b4:	4a19      	ldr	r2, [pc, #100]	; (1c31c <z_time_slice+0x8c>)
   1c2b6:	6812      	ldr	r2, [r2, #0]
   1c2b8:	b322      	cbz	r2, 1c304 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c2ba:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1c2bc:	2a7f      	cmp	r2, #127	; 0x7f
   1c2be:	d821      	bhi.n	1c304 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1c2c0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1c2c2:	f012 0f1f 	tst.w	r2, #31
   1c2c6:	d11d      	bne.n	1c304 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c2c8:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1c2cc:	4a14      	ldr	r2, [pc, #80]	; (1c320 <z_time_slice+0x90>)
   1c2ce:	6812      	ldr	r2, [r2, #0]
   1c2d0:	4291      	cmp	r1, r2
   1c2d2:	db17      	blt.n	1c304 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1c2d4:	4a13      	ldr	r2, [pc, #76]	; (1c324 <z_time_slice+0x94>)
   1c2d6:	4293      	cmp	r3, r2
   1c2d8:	d014      	beq.n	1c304 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1c2da:	4a0e      	ldr	r2, [pc, #56]	; (1c314 <z_time_slice+0x84>)
   1c2dc:	6912      	ldr	r2, [r2, #16]
   1c2de:	4282      	cmp	r2, r0
   1c2e0:	dd0a      	ble.n	1c2f8 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1c2e2:	1a10      	subs	r0, r2, r0
   1c2e4:	4b0b      	ldr	r3, [pc, #44]	; (1c314 <z_time_slice+0x84>)
   1c2e6:	6118      	str	r0, [r3, #16]
   1c2e8:	e00f      	b.n	1c30a <z_time_slice+0x7a>
		z_reset_time_slice();
   1c2ea:	f7ff fe49 	bl	1bf80 <z_reset_time_slice>
	__asm__ volatile(
   1c2ee:	f384 8811 	msr	BASEPRI, r4
   1c2f2:	f3bf 8f6f 	isb	sy
		return;
   1c2f6:	e00c      	b.n	1c312 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1c2f8:	4618      	mov	r0, r3
   1c2fa:	f7ff ff85 	bl	1c208 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1c2fe:	f7ff fe3f 	bl	1bf80 <z_reset_time_slice>
   1c302:	e002      	b.n	1c30a <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1c304:	4b03      	ldr	r3, [pc, #12]	; (1c314 <z_time_slice+0x84>)
   1c306:	2200      	movs	r2, #0
   1c308:	611a      	str	r2, [r3, #16]
   1c30a:	f384 8811 	msr	BASEPRI, r4
   1c30e:	f3bf 8f6f 	isb	sy
}
   1c312:	bd10      	pop	{r4, pc}
   1c314:	200377cc 	.word	0x200377cc
   1c318:	20037808 	.word	0x20037808
   1c31c:	20037810 	.word	0x20037810
   1c320:	2003780c 	.word	0x2003780c
   1c324:	20034fa0 	.word	0x20034fa0

0001c328 <ready_thread>:
{
   1c328:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1c32a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1c32c:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1c330:	2a00      	cmp	r2, #0
   1c332:	db2d      	blt.n	1c390 <ready_thread+0x68>
   1c334:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c336:	f013 0f1f 	tst.w	r3, #31
   1c33a:	d105      	bne.n	1c348 <ready_thread+0x20>
	return node->next != NULL;
   1c33c:	6982      	ldr	r2, [r0, #24]
   1c33e:	b10a      	cbz	r2, 1c344 <ready_thread+0x1c>
   1c340:	2200      	movs	r2, #0
   1c342:	e002      	b.n	1c34a <ready_thread+0x22>
   1c344:	2201      	movs	r2, #1
   1c346:	e000      	b.n	1c34a <ready_thread+0x22>
   1c348:	2200      	movs	r2, #0
   1c34a:	b30a      	cbz	r2, 1c390 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c34c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c350:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1c352:	4b14      	ldr	r3, [pc, #80]	; (1c3a4 <ready_thread+0x7c>)
   1c354:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c358:	429d      	cmp	r5, r3
   1c35a:	d020      	beq.n	1c39e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c35c:	b16d      	cbz	r5, 1c37a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c35e:	4629      	mov	r1, r5
   1c360:	4620      	mov	r0, r4
   1c362:	f008 fbcd 	bl	24b00 <z_sched_prio_cmp>
   1c366:	2800      	cmp	r0, #0
   1c368:	dc13      	bgt.n	1c392 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c36a:	b135      	cbz	r5, 1c37a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1c36c:	4b0d      	ldr	r3, [pc, #52]	; (1c3a4 <ready_thread+0x7c>)
   1c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c370:	429d      	cmp	r5, r3
   1c372:	d002      	beq.n	1c37a <ready_thread+0x52>
   1c374:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c376:	2d00      	cmp	r5, #0
   1c378:	d1f0      	bne.n	1c35c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1c37a:	4b0a      	ldr	r3, [pc, #40]	; (1c3a4 <ready_thread+0x7c>)
   1c37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   1c37e:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1c382:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1c384:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1c386:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c388:	62dc      	str	r4, [r3, #44]	; 0x2c
		update_cache(0);
   1c38a:	2000      	movs	r0, #0
   1c38c:	f7ff fe7e 	bl	1c08c <update_cache>
}
   1c390:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1c392:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1c394:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c396:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1c398:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c39a:	606c      	str	r4, [r5, #4]
}
   1c39c:	e7f5      	b.n	1c38a <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c39e:	2500      	movs	r5, #0
   1c3a0:	e7dc      	b.n	1c35c <ready_thread+0x34>
   1c3a2:	bf00      	nop
   1c3a4:	200377cc 	.word	0x200377cc

0001c3a8 <z_sched_start>:
{
   1c3a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c3aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3ae:	f3ef 8411 	mrs	r4, BASEPRI
   1c3b2:	f383 8811 	msr	BASEPRI, r3
   1c3b6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1c3ba:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1c3bc:	f013 0f04 	tst.w	r3, #4
   1c3c0:	d104      	bne.n	1c3cc <z_sched_start+0x24>
	__asm__ volatile(
   1c3c2:	f384 8811 	msr	BASEPRI, r4
   1c3c6:	f3bf 8f6f 	isb	sy
}
   1c3ca:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c3cc:	f023 0304 	bic.w	r3, r3, #4
   1c3d0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1c3d2:	f7ff ffa9 	bl	1c328 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1c3d6:	4621      	mov	r1, r4
   1c3d8:	4801      	ldr	r0, [pc, #4]	; (1c3e0 <z_sched_start+0x38>)
   1c3da:	f7ff fe23 	bl	1c024 <z_reschedule>
   1c3de:	e7f4      	b.n	1c3ca <z_sched_start+0x22>
   1c3e0:	2003780c 	.word	0x2003780c

0001c3e4 <z_set_prio>:
{
   1c3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c3e8:	4604      	mov	r4, r0
   1c3ea:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1c3ec:	2300      	movs	r3, #0
	__asm__ volatile(
   1c3ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c3f2:	f3ef 8611 	mrs	r6, BASEPRI
   1c3f6:	f382 8811 	msr	BASEPRI, r2
   1c3fa:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1c3fe:	4698      	mov	r8, r3
   1c400:	e008      	b.n	1c414 <z_set_prio+0x30>
		if (need_sched) {
   1c402:	f012 0801 	ands.w	r8, r2, #1
   1c406:	d111      	bne.n	1c42c <z_set_prio+0x48>
			thread->base.prio = prio;
   1c408:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1c40a:	f386 8811 	msr	BASEPRI, r6
   1c40e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1c412:	2301      	movs	r3, #1
   1c414:	461a      	mov	r2, r3
   1c416:	2b00      	cmp	r3, #0
   1c418:	d13d      	bne.n	1c496 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1c41a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c41c:	f013 0f1f 	tst.w	r3, #31
   1c420:	d1ef      	bne.n	1c402 <z_set_prio+0x1e>
	return node->next != NULL;
   1c422:	69a1      	ldr	r1, [r4, #24]
   1c424:	2900      	cmp	r1, #0
   1c426:	d1ec      	bne.n	1c402 <z_set_prio+0x1e>
   1c428:	2201      	movs	r2, #1
   1c42a:	e7ea      	b.n	1c402 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c430:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1c432:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1c4a0 <z_set_prio+0xbc>
   1c436:	4621      	mov	r1, r4
   1c438:	4648      	mov	r0, r9
   1c43a:	f008 fb9f 	bl	24b7c <z_priq_dumb_remove>
				thread->base.prio = prio;
   1c43e:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c440:	7b63      	ldrb	r3, [r4, #13]
   1c442:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c446:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1c448:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c44c:	454d      	cmp	r5, r9
   1c44e:	d020      	beq.n	1c492 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c450:	b16d      	cbz	r5, 1c46e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c452:	4629      	mov	r1, r5
   1c454:	4620      	mov	r0, r4
   1c456:	f008 fb53 	bl	24b00 <z_sched_prio_cmp>
   1c45a:	2800      	cmp	r0, #0
   1c45c:	dc13      	bgt.n	1c486 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c45e:	b135      	cbz	r5, 1c46e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1c460:	4b0e      	ldr	r3, [pc, #56]	; (1c49c <z_set_prio+0xb8>)
   1c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c464:	429d      	cmp	r5, r3
   1c466:	d002      	beq.n	1c46e <z_set_prio+0x8a>
   1c468:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c46a:	2d00      	cmp	r5, #0
   1c46c:	d1f0      	bne.n	1c450 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1c46e:	4b0b      	ldr	r3, [pc, #44]	; (1c49c <z_set_prio+0xb8>)
   1c470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   1c472:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1c476:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1c478:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1c47a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c47c:	62dc      	str	r4, [r3, #44]	; 0x2c
			update_cache(1);
   1c47e:	2001      	movs	r0, #1
   1c480:	f7ff fe04 	bl	1c08c <update_cache>
   1c484:	e7c1      	b.n	1c40a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1c486:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1c488:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c48a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1c48c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c48e:	606c      	str	r4, [r5, #4]
}
   1c490:	e7f5      	b.n	1c47e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c492:	2500      	movs	r5, #0
   1c494:	e7dc      	b.n	1c450 <z_set_prio+0x6c>
}
   1c496:	4640      	mov	r0, r8
   1c498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c49c:	200377cc 	.word	0x200377cc
   1c4a0:	200377f4 	.word	0x200377f4

0001c4a4 <end_thread>:
		ready_thread(thread);
	}
}

static void end_thread(struct k_thread *thread)
{
   1c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1c4a6:	7b43      	ldrb	r3, [r0, #13]
   1c4a8:	f013 0f08 	tst.w	r3, #8
   1c4ac:	d145      	bne.n	1c53a <end_thread+0x96>
   1c4ae:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1c4b0:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1c4b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c4b8:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1c4ba:	f013 0f80 	tst.w	r3, #128	; 0x80
   1c4be:	d114      	bne.n	1c4ea <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   1c4c0:	68ab      	ldr	r3, [r5, #8]
   1c4c2:	b15b      	cbz	r3, 1c4dc <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c4c4:	4628      	mov	r0, r5
   1c4c6:	f008 fb19 	bl	24afc <pended_on_thread>
   1c4ca:	4629      	mov	r1, r5
   1c4cc:	f008 fb56 	bl	24b7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1c4d0:	7b6b      	ldrb	r3, [r5, #13]
   1c4d2:	f023 0302 	bic.w	r3, r3, #2
   1c4d6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1c4d8:	2300      	movs	r3, #0
   1c4da:	60ab      	str	r3, [r5, #8]
   1c4dc:	f105 0018 	add.w	r0, r5, #24
   1c4e0:	f008 fcca 	bl	24e78 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1c4e4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c4e8:	e01c      	b.n	1c524 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c4ee:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1c4f0:	4601      	mov	r1, r0
   1c4f2:	4812      	ldr	r0, [pc, #72]	; (1c53c <end_thread+0x98>)
   1c4f4:	f008 fb42 	bl	24b7c <z_priq_dumb_remove>
}
   1c4f8:	e7e2      	b.n	1c4c0 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1c4fa:	4620      	mov	r0, r4
   1c4fc:	f008 fafe 	bl	24afc <pended_on_thread>
   1c500:	4621      	mov	r1, r4
   1c502:	f008 fb3b 	bl	24b7c <z_priq_dumb_remove>
   1c506:	7b63      	ldrb	r3, [r4, #13]
   1c508:	f023 0302 	bic.w	r3, r3, #2
   1c50c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1c50e:	2600      	movs	r6, #0
   1c510:	60a6      	str	r6, [r4, #8]
   1c512:	f104 0018 	add.w	r0, r4, #24
   1c516:	f008 fcaf 	bl	24e78 <z_abort_timeout>
   1c51a:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1c51e:	4620      	mov	r0, r4
   1c520:	f7ff ff02 	bl	1c328 <ready_thread>
	return list->head == list;
   1c524:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c526:	42bc      	cmp	r4, r7
   1c528:	d001      	beq.n	1c52e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1c52a:	2c00      	cmp	r4, #0
   1c52c:	d1e5      	bne.n	1c4fa <end_thread+0x56>
		update_cache(1);
   1c52e:	2001      	movs	r0, #1
   1c530:	f7ff fdac 	bl	1c08c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1c534:	4628      	mov	r0, r5
   1c536:	f7ff f8e5 	bl	1b704 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1c53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c53c:	200377f4 	.word	0x200377f4

0001c540 <z_sched_init>:
{
   1c540:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   1c542:	4b05      	ldr	r3, [pc, #20]	; (1c558 <z_sched_init+0x18>)
   1c544:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1c548:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
   1c54a:	62da      	str	r2, [r3, #44]	; 0x2c
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1c54c:	2100      	movs	r1, #0
   1c54e:	4608      	mov	r0, r1
   1c550:	f7ff fd2c 	bl	1bfac <k_sched_time_slice_set>
}
   1c554:	bd08      	pop	{r3, pc}
   1c556:	bf00      	nop
   1c558:	200377cc 	.word	0x200377cc

0001c55c <z_impl_k_yield>:
{
   1c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1c55e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c562:	f3ef 8611 	mrs	r6, BASEPRI
   1c566:	f383 8811 	msr	BASEPRI, r3
   1c56a:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   1c56e:	4c1c      	ldr	r4, [pc, #112]	; (1c5e0 <z_impl_k_yield+0x84>)
   1c570:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c572:	7b4b      	ldrb	r3, [r1, #13]
   1c574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c578:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1c57a:	f104 0728 	add.w	r7, r4, #40	; 0x28
   1c57e:	4638      	mov	r0, r7
   1c580:	f008 fafc 	bl	24b7c <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   1c584:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1c586:	7b6b      	ldrb	r3, [r5, #13]
   1c588:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c58c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1c58e:	6aa4      	ldr	r4, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c590:	42bc      	cmp	r4, r7
   1c592:	d023      	beq.n	1c5dc <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c594:	b16c      	cbz	r4, 1c5b2 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c596:	4621      	mov	r1, r4
   1c598:	4628      	mov	r0, r5
   1c59a:	f008 fab1 	bl	24b00 <z_sched_prio_cmp>
   1c59e:	2800      	cmp	r0, #0
   1c5a0:	dc16      	bgt.n	1c5d0 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c5a2:	b134      	cbz	r4, 1c5b2 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1c5a4:	4b0e      	ldr	r3, [pc, #56]	; (1c5e0 <z_impl_k_yield+0x84>)
   1c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c5a8:	429c      	cmp	r4, r3
   1c5aa:	d002      	beq.n	1c5b2 <z_impl_k_yield+0x56>
   1c5ac:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c5ae:	2c00      	cmp	r4, #0
   1c5b0:	d1f0      	bne.n	1c594 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1c5b2:	4b0b      	ldr	r3, [pc, #44]	; (1c5e0 <z_impl_k_yield+0x84>)
   1c5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   1c5b6:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1c5ba:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1c5bc:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1c5be:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1c5c0:	62dd      	str	r5, [r3, #44]	; 0x2c
	update_cache(1);
   1c5c2:	2001      	movs	r0, #1
   1c5c4:	f7ff fd62 	bl	1c08c <update_cache>
   1c5c8:	4630      	mov	r0, r6
   1c5ca:	f7f6 f8f1 	bl	127b0 <arch_swap>
}
   1c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1c5d0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1c5d2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1c5d4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1c5d6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1c5d8:	6065      	str	r5, [r4, #4]
}
   1c5da:	e7f2      	b.n	1c5c2 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c5dc:	2400      	movs	r4, #0
   1c5de:	e7d9      	b.n	1c594 <z_impl_k_yield+0x38>
   1c5e0:	200377cc 	.word	0x200377cc

0001c5e4 <z_tick_sleep>:
{
   1c5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5e8:	4604      	mov	r4, r0
   1c5ea:	460d      	mov	r5, r1
	if (ticks == 0) {
   1c5ec:	ea54 0105 	orrs.w	r1, r4, r5
   1c5f0:	d037      	beq.n	1c662 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1c5f2:	f06f 0101 	mvn.w	r1, #1
   1c5f6:	1a0a      	subs	r2, r1, r0
   1c5f8:	f04f 31ff 	mov.w	r1, #4294967295
   1c5fc:	eb61 0305 	sbc.w	r3, r1, r5
   1c600:	2a01      	cmp	r2, #1
   1c602:	f173 0300 	sbcs.w	r3, r3, #0
   1c606:	db30      	blt.n	1c66a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1c608:	f06f 0601 	mvn.w	r6, #1
   1c60c:	1a36      	subs	r6, r6, r0
   1c60e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c612:	f3ef 8811 	mrs	r8, BASEPRI
   1c616:	f383 8811 	msr	BASEPRI, r3
   1c61a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1c61e:	4f16      	ldr	r7, [pc, #88]	; (1c678 <z_tick_sleep+0x94>)
   1c620:	68b8      	ldr	r0, [r7, #8]
   1c622:	4b16      	ldr	r3, [pc, #88]	; (1c67c <z_tick_sleep+0x98>)
   1c624:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1c626:	f7ff fd57 	bl	1c0d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1c62a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c62c:	4622      	mov	r2, r4
   1c62e:	462b      	mov	r3, r5
   1c630:	4913      	ldr	r1, [pc, #76]	; (1c680 <z_tick_sleep+0x9c>)
   1c632:	3018      	adds	r0, #24
   1c634:	f000 f904 	bl	1c840 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1c638:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1c63a:	7b53      	ldrb	r3, [r2, #13]
   1c63c:	f043 0310 	orr.w	r3, r3, #16
   1c640:	7353      	strb	r3, [r2, #13]
   1c642:	4640      	mov	r0, r8
   1c644:	f7f6 f8b4 	bl	127b0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1c648:	2500      	movs	r5, #0
   1c64a:	f008 fc74 	bl	24f36 <sys_clock_tick_get_32>
   1c64e:	1a34      	subs	r4, r6, r0
   1c650:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1c654:	2c01      	cmp	r4, #1
   1c656:	f175 0300 	sbcs.w	r3, r5, #0
   1c65a:	da0a      	bge.n	1c672 <z_tick_sleep+0x8e>
	return 0;
   1c65c:	2000      	movs	r0, #0
}
   1c65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1c662:	f7ff ff7b 	bl	1c55c <z_impl_k_yield>
		return 0;
   1c666:	2000      	movs	r0, #0
   1c668:	e7f9      	b.n	1c65e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1c66a:	f008 fc64 	bl	24f36 <sys_clock_tick_get_32>
   1c66e:	1906      	adds	r6, r0, r4
   1c670:	e7cd      	b.n	1c60e <z_tick_sleep+0x2a>
		return ticks;
   1c672:	4620      	mov	r0, r4
   1c674:	e7f3      	b.n	1c65e <z_tick_sleep+0x7a>
   1c676:	bf00      	nop
   1c678:	200377cc 	.word	0x200377cc
   1c67c:	20037808 	.word	0x20037808
   1c680:	00024caf 	.word	0x00024caf

0001c684 <z_impl_k_sleep>:
{
   1c684:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c686:	f1b1 3fff 	cmp.w	r1, #4294967295
   1c68a:	bf08      	it	eq
   1c68c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1c690:	d01a      	beq.n	1c6c8 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1c692:	f7ff ffa7 	bl	1c5e4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1c696:	4604      	mov	r4, r0
   1c698:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1c69a:	0169      	lsls	r1, r5, #5
   1c69c:	0143      	lsls	r3, r0, #5
   1c69e:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1c6a2:	1a18      	subs	r0, r3, r0
   1c6a4:	eb62 0305 	sbc.w	r3, r2, r5
   1c6a8:	009a      	lsls	r2, r3, #2
   1c6aa:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1c6ae:	0081      	lsls	r1, r0, #2
   1c6b0:	4613      	mov	r3, r2
   1c6b2:	1908      	adds	r0, r1, r4
   1c6b4:	eb45 0303 	adc.w	r3, r5, r3
   1c6b8:	00da      	lsls	r2, r3, #3
   1c6ba:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1c6be:	00c1      	lsls	r1, r0, #3
   1c6c0:	0bc8      	lsrs	r0, r1, #15
   1c6c2:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1c6c6:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1c6c8:	4b03      	ldr	r3, [pc, #12]	; (1c6d8 <z_impl_k_sleep+0x54>)
   1c6ca:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1c6cc:	f7ff fd34 	bl	1c138 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1c6d0:	f04f 30ff 	mov.w	r0, #4294967295
   1c6d4:	e7f7      	b.n	1c6c6 <z_impl_k_sleep+0x42>
   1c6d6:	bf00      	nop
   1c6d8:	200377cc 	.word	0x200377cc

0001c6dc <z_impl_k_current_get>:
}
   1c6dc:	4b01      	ldr	r3, [pc, #4]	; (1c6e4 <z_impl_k_current_get+0x8>)
   1c6de:	6898      	ldr	r0, [r3, #8]
   1c6e0:	4770      	bx	lr
   1c6e2:	bf00      	nop
   1c6e4:	200377cc 	.word	0x200377cc

0001c6e8 <z_impl_k_is_preempt_thread>:
   1c6e8:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1c6ec:	b933      	cbnz	r3, 1c6fc <z_impl_k_is_preempt_thread+0x14>
   1c6ee:	4b05      	ldr	r3, [pc, #20]	; (1c704 <z_impl_k_is_preempt_thread+0x1c>)
   1c6f0:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1c6f2:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1c6f4:	2b7f      	cmp	r3, #127	; 0x7f
   1c6f6:	d803      	bhi.n	1c700 <z_impl_k_is_preempt_thread+0x18>
   1c6f8:	2001      	movs	r0, #1
   1c6fa:	4770      	bx	lr
   1c6fc:	2000      	movs	r0, #0
   1c6fe:	4770      	bx	lr
   1c700:	2000      	movs	r0, #0
}
   1c702:	4770      	bx	lr
   1c704:	200377cc 	.word	0x200377cc

0001c708 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1c708:	b538      	push	{r3, r4, r5, lr}
   1c70a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c70e:	f3ef 8511 	mrs	r5, BASEPRI
   1c712:	f383 8811 	msr	BASEPRI, r3
   1c716:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1c71a:	7b43      	ldrb	r3, [r0, #13]
   1c71c:	f013 0f08 	tst.w	r3, #8
   1c720:	d004      	beq.n	1c72c <z_thread_abort+0x24>
	__asm__ volatile(
   1c722:	f385 8811 	msr	BASEPRI, r5
   1c726:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1c72a:	bd38      	pop	{r3, r4, r5, pc}
   1c72c:	4604      	mov	r4, r0
	end_thread(thread);
   1c72e:	f7ff feb9 	bl	1c4a4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1c732:	4b08      	ldr	r3, [pc, #32]	; (1c754 <z_thread_abort+0x4c>)
   1c734:	689b      	ldr	r3, [r3, #8]
   1c736:	42a3      	cmp	r3, r4
   1c738:	d004      	beq.n	1c744 <z_thread_abort+0x3c>
   1c73a:	f385 8811 	msr	BASEPRI, r5
   1c73e:	f3bf 8f6f 	isb	sy
   1c742:	e7f2      	b.n	1c72a <z_thread_abort+0x22>
   1c744:	f3ef 8305 	mrs	r3, IPSR
   1c748:	2b00      	cmp	r3, #0
   1c74a:	d1f6      	bne.n	1c73a <z_thread_abort+0x32>
   1c74c:	4628      	mov	r0, r5
   1c74e:	f7f6 f82f 	bl	127b0 <arch_swap>
	return ret;
   1c752:	e7f2      	b.n	1c73a <z_thread_abort+0x32>
   1c754:	200377cc 	.word	0x200377cc

0001c758 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1c758:	b5d0      	push	{r4, r6, r7, lr}
   1c75a:	b082      	sub	sp, #8
   1c75c:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1c75e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1c762:	e9cd 6700 	strd	r6, r7, [sp]
   1c766:	f7ff fcd3 	bl	1c110 <z_pend_curr>

	if (data != NULL) {
   1c76a:	b11c      	cbz	r4, 1c774 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1c76c:	4b02      	ldr	r3, [pc, #8]	; (1c778 <z_sched_wait+0x20>)
   1c76e:	689b      	ldr	r3, [r3, #8]
   1c770:	695b      	ldr	r3, [r3, #20]
   1c772:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1c774:	b002      	add	sp, #8
   1c776:	bdd0      	pop	{r4, r6, r7, pc}
   1c778:	200377cc 	.word	0x200377cc

0001c77c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1c77c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1c77e:	4806      	ldr	r0, [pc, #24]	; (1c798 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1c780:	4a06      	ldr	r2, [pc, #24]	; (1c79c <z_data_copy+0x20>)
   1c782:	1a12      	subs	r2, r2, r0
   1c784:	4906      	ldr	r1, [pc, #24]	; (1c7a0 <z_data_copy+0x24>)
   1c786:	f004 fece 	bl	21526 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1c78a:	4a06      	ldr	r2, [pc, #24]	; (1c7a4 <z_data_copy+0x28>)
   1c78c:	4906      	ldr	r1, [pc, #24]	; (1c7a8 <z_data_copy+0x2c>)
   1c78e:	4807      	ldr	r0, [pc, #28]	; (1c7ac <z_data_copy+0x30>)
   1c790:	f004 fec9 	bl	21526 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1c794:	bd08      	pop	{r3, pc}
   1c796:	bf00      	nop
   1c798:	20000000 	.word	0x20000000
   1c79c:	20033d40 	.word	0x20033d40
   1c7a0:	00027ab4 	.word	0x00027ab4
   1c7a4:	00000000 	.word	0x00000000
   1c7a8:	00027ab4 	.word	0x00027ab4
   1c7ac:	20000000 	.word	0x20000000

0001c7b0 <first>:
	return list->head == list;
   1c7b0:	4b03      	ldr	r3, [pc, #12]	; (1c7c0 <first+0x10>)
   1c7b2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c7b4:	4298      	cmp	r0, r3
   1c7b6:	d000      	beq.n	1c7ba <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1c7b8:	4770      	bx	lr
   1c7ba:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1c7bc:	e7fc      	b.n	1c7b8 <first+0x8>
   1c7be:	bf00      	nop
   1c7c0:	20033a78 	.word	0x20033a78

0001c7c4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c7c4:	b130      	cbz	r0, 1c7d4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1c7c6:	4a04      	ldr	r2, [pc, #16]	; (1c7d8 <next+0x14>)
   1c7c8:	6852      	ldr	r2, [r2, #4]
   1c7ca:	4290      	cmp	r0, r2
   1c7cc:	d001      	beq.n	1c7d2 <next+0xe>
   1c7ce:	6800      	ldr	r0, [r0, #0]
   1c7d0:	4770      	bx	lr
   1c7d2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1c7d4:	4770      	bx	lr
   1c7d6:	bf00      	nop
   1c7d8:	20033a78 	.word	0x20033a78

0001c7dc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1c7dc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c7de:	4b04      	ldr	r3, [pc, #16]	; (1c7f0 <elapsed+0x14>)
   1c7e0:	681b      	ldr	r3, [r3, #0]
   1c7e2:	b10b      	cbz	r3, 1c7e8 <elapsed+0xc>
   1c7e4:	2000      	movs	r0, #0
}
   1c7e6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1c7e8:	f7f5 faea 	bl	11dc0 <sys_clock_elapsed>
   1c7ec:	e7fb      	b.n	1c7e6 <elapsed+0xa>
   1c7ee:	bf00      	nop
   1c7f0:	20037814 	.word	0x20037814

0001c7f4 <next_timeout>:

static int32_t next_timeout(void)
{
   1c7f4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1c7f6:	f7ff ffdb 	bl	1c7b0 <first>
   1c7fa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1c7fc:	f7ff ffee 	bl	1c7dc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1c800:	b18c      	cbz	r4, 1c826 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c802:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c806:	1a12      	subs	r2, r2, r0
   1c808:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1c80c:	2a01      	cmp	r2, #1
   1c80e:	f173 0100 	sbcs.w	r1, r3, #0
   1c812:	db11      	blt.n	1c838 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1c814:	4610      	mov	r0, r2
   1c816:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1c81a:	f173 0300 	sbcs.w	r3, r3, #0
   1c81e:	db04      	blt.n	1c82a <next_timeout+0x36>
   1c820:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c824:	e001      	b.n	1c82a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1c826:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c82a:	4b04      	ldr	r3, [pc, #16]	; (1c83c <next_timeout+0x48>)
   1c82c:	691b      	ldr	r3, [r3, #16]
   1c82e:	b113      	cbz	r3, 1c836 <next_timeout+0x42>
   1c830:	4283      	cmp	r3, r0
   1c832:	da00      	bge.n	1c836 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1c834:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1c836:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1c838:	2000      	movs	r0, #0
   1c83a:	e7f6      	b.n	1c82a <next_timeout+0x36>
   1c83c:	200377cc 	.word	0x200377cc

0001c840 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c844:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c846:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c84a:	bf08      	it	eq
   1c84c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c850:	f000 8096 	beq.w	1c980 <z_add_timeout+0x140>
   1c854:	4682      	mov	sl, r0
   1c856:	4614      	mov	r4, r2
   1c858:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c85a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1c85c:	2300      	movs	r3, #0
	__asm__ volatile(
   1c85e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c862:	f3ef 8b11 	mrs	fp, BASEPRI
   1c866:	f382 8811 	msr	BASEPRI, r2
   1c86a:	f3bf 8f6f 	isb	sy
   1c86e:	e02e      	b.n	1c8ce <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1c870:	2201      	movs	r2, #1
   1c872:	2300      	movs	r3, #0
   1c874:	e04b      	b.n	1c90e <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1c876:	f7ff ffb1 	bl	1c7dc <elapsed>
   1c87a:	1822      	adds	r2, r4, r0
   1c87c:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1c880:	3201      	adds	r2, #1
   1c882:	f143 0300 	adc.w	r3, r3, #0
   1c886:	f8ca 2010 	str.w	r2, [sl, #16]
   1c88a:	f8ca 3014 	str.w	r3, [sl, #20]
   1c88e:	e042      	b.n	1c916 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1c890:	9b00      	ldr	r3, [sp, #0]
   1c892:	1ac2      	subs	r2, r0, r3
   1c894:	9b01      	ldr	r3, [sp, #4]
   1c896:	eb61 0303 	sbc.w	r3, r1, r3
   1c89a:	f8cc 2010 	str.w	r2, [ip, #16]
   1c89e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1c8a2:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1c8a6:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1c8aa:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1c8ae:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1c8b2:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1c8b6:	f1bc 0f00 	cmp.w	ip, #0
   1c8ba:	d049      	beq.n	1c950 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c8bc:	f7ff ff78 	bl	1c7b0 <first>
   1c8c0:	4582      	cmp	sl, r0
   1c8c2:	d050      	beq.n	1c966 <z_add_timeout+0x126>
	__asm__ volatile(
   1c8c4:	f38b 8811 	msr	BASEPRI, fp
   1c8c8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c8cc:	2301      	movs	r3, #1
   1c8ce:	2b00      	cmp	r3, #0
   1c8d0:	d156      	bne.n	1c980 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1c8d2:	f06f 0301 	mvn.w	r3, #1
   1c8d6:	ebb3 0804 	subs.w	r8, r3, r4
   1c8da:	f04f 30ff 	mov.w	r0, #4294967295
   1c8de:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c8e2:	f1b8 0f00 	cmp.w	r8, #0
   1c8e6:	f179 0300 	sbcs.w	r3, r9, #0
   1c8ea:	dbc4      	blt.n	1c876 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c8ec:	4a26      	ldr	r2, [pc, #152]	; (1c988 <z_add_timeout+0x148>)
   1c8ee:	6813      	ldr	r3, [r2, #0]
   1c8f0:	6852      	ldr	r2, [r2, #4]
   1c8f2:	18e3      	adds	r3, r4, r3
   1c8f4:	eb45 0202 	adc.w	r2, r5, r2
   1c8f8:	f06f 0101 	mvn.w	r1, #1
   1c8fc:	1ace      	subs	r6, r1, r3
   1c8fe:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1c902:	4632      	mov	r2, r6
   1c904:	463b      	mov	r3, r7
   1c906:	2e01      	cmp	r6, #1
   1c908:	f177 0100 	sbcs.w	r1, r7, #0
   1c90c:	dbb0      	blt.n	1c870 <z_add_timeout+0x30>
   1c90e:	f8ca 2010 	str.w	r2, [sl, #16]
   1c912:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1c916:	f7ff ff4b 	bl	1c7b0 <first>
   1c91a:	4684      	mov	ip, r0
   1c91c:	f1bc 0f00 	cmp.w	ip, #0
   1c920:	d0c9      	beq.n	1c8b6 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1c922:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1c926:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1c92a:	e9cd 2300 	strd	r2, r3, [sp]
   1c92e:	4282      	cmp	r2, r0
   1c930:	418b      	sbcs	r3, r1
   1c932:	dbad      	blt.n	1c890 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1c934:	9b00      	ldr	r3, [sp, #0]
   1c936:	1a1a      	subs	r2, r3, r0
   1c938:	9b01      	ldr	r3, [sp, #4]
   1c93a:	eb63 0301 	sbc.w	r3, r3, r1
   1c93e:	f8ca 2010 	str.w	r2, [sl, #16]
   1c942:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1c946:	4660      	mov	r0, ip
   1c948:	f7ff ff3c 	bl	1c7c4 <next>
   1c94c:	4684      	mov	ip, r0
   1c94e:	e7e5      	b.n	1c91c <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1c950:	4b0e      	ldr	r3, [pc, #56]	; (1c98c <z_add_timeout+0x14c>)
   1c952:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c954:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1c958:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1c95c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1c960:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1c964:	e7aa      	b.n	1c8bc <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c966:	f7ff ff45 	bl	1c7f4 <next_timeout>

			if (next_time == 0 ||
   1c96a:	4603      	mov	r3, r0
   1c96c:	b118      	cbz	r0, 1c976 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1c96e:	4a08      	ldr	r2, [pc, #32]	; (1c990 <z_add_timeout+0x150>)
   1c970:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1c972:	4282      	cmp	r2, r0
   1c974:	d0a6      	beq.n	1c8c4 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1c976:	2100      	movs	r1, #0
   1c978:	4618      	mov	r0, r3
   1c97a:	f7f5 f9f1 	bl	11d60 <sys_clock_set_timeout>
   1c97e:	e7a1      	b.n	1c8c4 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c980:	b003      	add	sp, #12
   1c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c986:	bf00      	nop
   1c988:	200351e8 	.word	0x200351e8
   1c98c:	20033a78 	.word	0x20033a78
   1c990:	200377cc 	.word	0x200377cc

0001c994 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c996:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c998:	f7ff fc7a 	bl	1c290 <z_time_slice>
	__asm__ volatile(
   1c99c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9a0:	f3ef 8511 	mrs	r5, BASEPRI
   1c9a4:	f383 8811 	msr	BASEPRI, r3
   1c9a8:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c9ac:	4b28      	ldr	r3, [pc, #160]	; (1ca50 <sys_clock_announce+0xbc>)
   1c9ae:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c9b0:	f7ff fefe 	bl	1c7b0 <first>
   1c9b4:	4604      	mov	r4, r0
   1c9b6:	b350      	cbz	r0, 1ca0e <sys_clock_announce+0x7a>
   1c9b8:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1c9bc:	4b24      	ldr	r3, [pc, #144]	; (1ca50 <sys_clock_announce+0xbc>)
   1c9be:	681b      	ldr	r3, [r3, #0]
   1c9c0:	17d9      	asrs	r1, r3, #31
   1c9c2:	42b3      	cmp	r3, r6
   1c9c4:	eb71 0207 	sbcs.w	r2, r1, r7
   1c9c8:	db21      	blt.n	1ca0e <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1c9ca:	4a22      	ldr	r2, [pc, #136]	; (1ca54 <sys_clock_announce+0xc0>)
   1c9cc:	e9d2 0100 	ldrd	r0, r1, [r2]
   1c9d0:	1980      	adds	r0, r0, r6
   1c9d2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1c9d6:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1c9da:	1b9b      	subs	r3, r3, r6
   1c9dc:	4a1c      	ldr	r2, [pc, #112]	; (1ca50 <sys_clock_announce+0xbc>)
   1c9de:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1c9e0:	2200      	movs	r2, #0
   1c9e2:	2300      	movs	r3, #0
   1c9e4:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1c9e8:	4620      	mov	r0, r4
   1c9ea:	f008 fa2e 	bl	24e4a <remove_timeout>
	__asm__ volatile(
   1c9ee:	f385 8811 	msr	BASEPRI, r5
   1c9f2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1c9f6:	68a3      	ldr	r3, [r4, #8]
   1c9f8:	4620      	mov	r0, r4
   1c9fa:	4798      	blx	r3
	__asm__ volatile(
   1c9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca00:	f3ef 8511 	mrs	r5, BASEPRI
   1ca04:	f383 8811 	msr	BASEPRI, r3
   1ca08:	f3bf 8f6f 	isb	sy
   1ca0c:	e7d0      	b.n	1c9b0 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1ca0e:	b144      	cbz	r4, 1ca22 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1ca10:	4b0f      	ldr	r3, [pc, #60]	; (1ca50 <sys_clock_announce+0xbc>)
   1ca12:	6819      	ldr	r1, [r3, #0]
   1ca14:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1ca18:	1a52      	subs	r2, r2, r1
   1ca1a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1ca1e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1ca22:	480c      	ldr	r0, [pc, #48]	; (1ca54 <sys_clock_announce+0xc0>)
   1ca24:	490a      	ldr	r1, [pc, #40]	; (1ca50 <sys_clock_announce+0xbc>)
   1ca26:	680c      	ldr	r4, [r1, #0]
   1ca28:	e9d0 2300 	ldrd	r2, r3, [r0]
   1ca2c:	1912      	adds	r2, r2, r4
   1ca2e:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1ca32:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1ca36:	2400      	movs	r4, #0
   1ca38:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1ca3a:	f7ff fedb 	bl	1c7f4 <next_timeout>
   1ca3e:	4621      	mov	r1, r4
   1ca40:	f7f5 f98e 	bl	11d60 <sys_clock_set_timeout>
	__asm__ volatile(
   1ca44:	f385 8811 	msr	BASEPRI, r5
   1ca48:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca4e:	bf00      	nop
   1ca50:	20037814 	.word	0x20037814
   1ca54:	200351e8 	.word	0x200351e8

0001ca58 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1ca58:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1ca5a:	2100      	movs	r1, #0
	__asm__ volatile(
   1ca5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca60:	f3ef 8411 	mrs	r4, BASEPRI
   1ca64:	f383 8811 	msr	BASEPRI, r3
   1ca68:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1ca6c:	2200      	movs	r2, #0
   1ca6e:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1ca70:	b969      	cbnz	r1, 1ca8e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1ca72:	f7f5 f9a5 	bl	11dc0 <sys_clock_elapsed>
   1ca76:	4b07      	ldr	r3, [pc, #28]	; (1ca94 <sys_clock_tick_get+0x3c>)
   1ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ca7c:	1812      	adds	r2, r2, r0
   1ca7e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1ca82:	f384 8811 	msr	BASEPRI, r4
   1ca86:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1ca8a:	2101      	movs	r1, #1
   1ca8c:	e7f0      	b.n	1ca70 <sys_clock_tick_get+0x18>
	}
	return t;
}
   1ca8e:	4610      	mov	r0, r2
   1ca90:	4619      	mov	r1, r3
   1ca92:	bd10      	pop	{r4, pc}
   1ca94:	200351e8 	.word	0x200351e8

0001ca98 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1ca98:	b510      	push	{r4, lr}
   1ca9a:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1ca9c:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1caa0:	ea52 0103 	orrs.w	r1, r2, r3
   1caa4:	d005      	beq.n	1cab2 <z_timer_expiration_handler+0x1a>
   1caa6:	f1b3 3fff 	cmp.w	r3, #4294967295
   1caaa:	bf08      	it	eq
   1caac:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1cab0:	d116      	bne.n	1cae0 <z_timer_expiration_handler+0x48>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1cab2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cab4:	3301      	adds	r3, #1
   1cab6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1cab8:	6a23      	ldr	r3, [r4, #32]
   1caba:	b10b      	cbz	r3, 1cac0 <z_timer_expiration_handler+0x28>
		timer->expiry_fn(timer);
   1cabc:	4620      	mov	r0, r4
   1cabe:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1cac0:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1cac4:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cac6:	42a3      	cmp	r3, r4
   1cac8:	d009      	beq.n	1cade <z_timer_expiration_handler+0x46>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1caca:	b144      	cbz	r4, 1cade <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1cacc:	4620      	mov	r0, r4
   1cace:	f008 f821 	bl	24b14 <z_unpend_thread_no_timeout>
   1cad2:	2300      	movs	r3, #0
   1cad4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1cad8:	4620      	mov	r0, r4
   1cada:	f008 f8cc 	bl	24c76 <z_ready_thread>
}
   1cade:	bd10      	pop	{r4, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cae0:	4901      	ldr	r1, [pc, #4]	; (1cae8 <z_timer_expiration_handler+0x50>)
   1cae2:	f7ff fead 	bl	1c840 <z_add_timeout>
   1cae6:	e7e4      	b.n	1cab2 <z_timer_expiration_handler+0x1a>
   1cae8:	0001ca99 	.word	0x0001ca99

0001caec <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caf0:	b087      	sub	sp, #28
   1caf2:	4614      	mov	r4, r2
   1caf4:	461d      	mov	r5, r3
   1caf6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1cafa:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cafe:	bf08      	it	eq
   1cb00:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1cb04:	d035      	beq.n	1cb72 <z_impl_k_timer_start+0x86>
   1cb06:	4606      	mov	r6, r0
   1cb08:	4613      	mov	r3, r2
   1cb0a:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1cb0c:	f1b9 3fff 	cmp.w	r9, #4294967295
   1cb10:	bf08      	it	eq
   1cb12:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   1cb16:	d012      	beq.n	1cb3e <z_impl_k_timer_start+0x52>
   1cb18:	ea58 0109 	orrs.w	r1, r8, r9
   1cb1c:	d00f      	beq.n	1cb3e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   1cb1e:	f06f 0701 	mvn.w	r7, #1
   1cb22:	ebb7 0708 	subs.w	r7, r7, r8
   1cb26:	9702      	str	r7, [sp, #8]
   1cb28:	f04f 31ff 	mov.w	r1, #4294967295
   1cb2c:	eb61 0709 	sbc.w	r7, r1, r9
   1cb30:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1cb32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1cb36:	2800      	cmp	r0, #0
   1cb38:	f171 0100 	sbcs.w	r1, r1, #0
   1cb3c:	db1c      	blt.n	1cb78 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1cb3e:	f06f 0101 	mvn.w	r1, #1
   1cb42:	ebb1 0a03 	subs.w	sl, r1, r3
   1cb46:	f04f 31ff 	mov.w	r1, #4294967295
   1cb4a:	eb61 0b02 	sbc.w	fp, r1, r2
   1cb4e:	f1ba 0f00 	cmp.w	sl, #0
   1cb52:	f17b 0100 	sbcs.w	r1, fp, #0
   1cb56:	db23      	blt.n	1cba0 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1cb58:	4630      	mov	r0, r6
   1cb5a:	f008 f98d 	bl	24e78 <z_abort_timeout>
	timer->period = period;
   1cb5e:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1cb62:	2300      	movs	r3, #0
   1cb64:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1cb66:	4622      	mov	r2, r4
   1cb68:	462b      	mov	r3, r5
   1cb6a:	4917      	ldr	r1, [pc, #92]	; (1cbc8 <z_impl_k_timer_start+0xdc>)
   1cb6c:	4630      	mov	r0, r6
   1cb6e:	f7ff fe67 	bl	1c840 <z_add_timeout>
		     duration);
}
   1cb72:	b007      	add	sp, #28
   1cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1cb78:	f118 31ff 	adds.w	r1, r8, #4294967295
   1cb7c:	9104      	str	r1, [sp, #16]
   1cb7e:	f149 31ff 	adc.w	r1, r9, #4294967295
   1cb82:	9105      	str	r1, [sp, #20]
   1cb84:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   1cb88:	4638      	mov	r0, r7
   1cb8a:	4641      	mov	r1, r8
   1cb8c:	2f01      	cmp	r7, #1
   1cb8e:	f178 0700 	sbcs.w	r7, r8, #0
   1cb92:	db02      	blt.n	1cb9a <z_impl_k_timer_start+0xae>
   1cb94:	4680      	mov	r8, r0
   1cb96:	4689      	mov	r9, r1
   1cb98:	e7d1      	b.n	1cb3e <z_impl_k_timer_start+0x52>
   1cb9a:	2001      	movs	r0, #1
   1cb9c:	2100      	movs	r1, #0
   1cb9e:	e7f9      	b.n	1cb94 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1cba0:	f113 33ff 	adds.w	r3, r3, #4294967295
   1cba4:	9300      	str	r3, [sp, #0]
   1cba6:	f142 33ff 	adc.w	r3, r2, #4294967295
   1cbaa:	9301      	str	r3, [sp, #4]
   1cbac:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cbb0:	4602      	mov	r2, r0
   1cbb2:	460b      	mov	r3, r1
   1cbb4:	2800      	cmp	r0, #0
   1cbb6:	f171 0100 	sbcs.w	r1, r1, #0
   1cbba:	db02      	blt.n	1cbc2 <z_impl_k_timer_start+0xd6>
   1cbbc:	4614      	mov	r4, r2
   1cbbe:	461d      	mov	r5, r3
   1cbc0:	e7ca      	b.n	1cb58 <z_impl_k_timer_start+0x6c>
   1cbc2:	2200      	movs	r2, #0
   1cbc4:	4613      	mov	r3, r2
   1cbc6:	e7f9      	b.n	1cbbc <z_impl_k_timer_start+0xd0>
   1cbc8:	0001ca99 	.word	0x0001ca99

0001cbcc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbd0:	b08d      	sub	sp, #52	; 0x34
   1cbd2:	4605      	mov	r5, r0
   1cbd4:	9107      	str	r1, [sp, #28]
   1cbd6:	9202      	str	r2, [sp, #8]
   1cbd8:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1cbda:	4ba4      	ldr	r3, [pc, #656]	; (1ce6c <z_impl_k_poll+0x2a0>)
   1cbdc:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1cbe0:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1cbe4:	2301      	movs	r3, #1
   1cbe6:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1cbea:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1cbee:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1cbf2:	4613      	mov	r3, r2
   1cbf4:	430b      	orrs	r3, r1
   1cbf6:	bf0c      	ite	eq
   1cbf8:	2301      	moveq	r3, #1
   1cbfa:	2300      	movne	r3, #0
   1cbfc:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1cbfe:	2600      	movs	r6, #0
	int events_registered = 0;
   1cc00:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1cc02:	e02e      	b.n	1cc62 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1cc04:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1cc06:	689b      	ldr	r3, [r3, #8]
   1cc08:	b1c3      	cbz	r3, 1cc3c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1cc0a:	2302      	movs	r3, #2
   1cc0c:	9305      	str	r3, [sp, #20]
			return true;
   1cc0e:	2301      	movs	r3, #1
   1cc10:	e014      	b.n	1cc3c <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1cc12:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1cc14:	681b      	ldr	r3, [r3, #0]
   1cc16:	b18b      	cbz	r3, 1cc3c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1cc18:	2304      	movs	r3, #4
   1cc1a:	9305      	str	r3, [sp, #20]
			return true;
   1cc1c:	2301      	movs	r3, #1
   1cc1e:	e00d      	b.n	1cc3c <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1cc20:	6923      	ldr	r3, [r4, #16]
   1cc22:	689b      	ldr	r3, [r3, #8]
   1cc24:	b153      	cbz	r3, 1cc3c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1cc26:	2301      	movs	r3, #1
   1cc28:	9305      	str	r3, [sp, #20]
   1cc2a:	e007      	b.n	1cc3c <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1cc2c:	6923      	ldr	r3, [r4, #16]
   1cc2e:	6a1b      	ldr	r3, [r3, #32]
   1cc30:	b123      	cbz	r3, 1cc3c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1cc32:	2310      	movs	r3, #16
   1cc34:	9305      	str	r3, [sp, #20]
			return true;
   1cc36:	2301      	movs	r3, #1
   1cc38:	e000      	b.n	1cc3c <z_impl_k_poll+0x70>
	switch (event->type) {
   1cc3a:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1cc3c:	2b00      	cmp	r3, #0
   1cc3e:	d03d      	beq.n	1ccbc <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1cc40:	2100      	movs	r1, #0
   1cc42:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1cc44:	68e3      	ldr	r3, [r4, #12]
   1cc46:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1cc4a:	9805      	ldr	r0, [sp, #20]
   1cc4c:	4302      	orrs	r2, r0
   1cc4e:	f362 3352 	bfi	r3, r2, #13, #6
   1cc52:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1cc54:	7039      	strb	r1, [r7, #0]
   1cc56:	9b08      	ldr	r3, [sp, #32]
   1cc58:	f383 8811 	msr	BASEPRI, r3
   1cc5c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1cc60:	3601      	adds	r6, #1
   1cc62:	9b07      	ldr	r3, [sp, #28]
   1cc64:	42b3      	cmp	r3, r6
   1cc66:	f340 81bf 	ble.w	1cfe8 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1cc6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc6e:	f3ef 8211 	mrs	r2, BASEPRI
   1cc72:	f383 8811 	msr	BASEPRI, r3
   1cc76:	f3bf 8f6f 	isb	sy
   1cc7a:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1cc7c:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1cc80:	00a3      	lsls	r3, r4, #2
   1cc82:	9309      	str	r3, [sp, #36]	; 0x24
   1cc84:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1cc88:	7b63      	ldrb	r3, [r4, #13]
   1cc8a:	f003 031f 	and.w	r3, r3, #31
   1cc8e:	3b01      	subs	r3, #1
   1cc90:	2b07      	cmp	r3, #7
   1cc92:	d8d2      	bhi.n	1cc3a <z_impl_k_poll+0x6e>
   1cc94:	a201      	add	r2, pc, #4	; (adr r2, 1cc9c <z_impl_k_poll+0xd0>)
   1cc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1cc9a:	bf00      	nop
   1cc9c:	0001cc21 	.word	0x0001cc21
   1cca0:	0001cc05 	.word	0x0001cc05
   1cca4:	0001cc3b 	.word	0x0001cc3b
   1cca8:	0001cc13 	.word	0x0001cc13
   1ccac:	0001cc3b 	.word	0x0001cc3b
   1ccb0:	0001cc3b 	.word	0x0001cc3b
   1ccb4:	0001cc3b 	.word	0x0001cc3b
   1ccb8:	0001cc2d 	.word	0x0001cc2d
		} else if (!just_check && poller->is_polling) {
   1ccbc:	9b06      	ldr	r3, [sp, #24]
   1ccbe:	2b00      	cmp	r3, #0
   1ccc0:	d1c9      	bne.n	1cc56 <z_impl_k_poll+0x8a>
   1ccc2:	783b      	ldrb	r3, [r7, #0]
   1ccc4:	2b00      	cmp	r3, #0
   1ccc6:	d0c6      	beq.n	1cc56 <z_impl_k_poll+0x8a>
	switch (event->type) {
   1ccc8:	7b63      	ldrb	r3, [r4, #13]
   1ccca:	f003 031f 	and.w	r3, r3, #31
   1ccce:	3b01      	subs	r3, #1
   1ccd0:	2b07      	cmp	r3, #7
   1ccd2:	d846      	bhi.n	1cd62 <z_impl_k_poll+0x196>
   1ccd4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ccd8:	000800cc 	.word	0x000800cc
   1ccdc:	006a0045 	.word	0x006a0045
   1cce0:	00450045 	.word	0x00450045
   1cce4:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1cce8:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1ccec:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1ccf0:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ccf4:	4598      	cmp	r8, r3
   1ccf6:	d02b      	beq.n	1cd50 <z_impl_k_poll+0x184>
   1ccf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1ccfc:	b343      	cbz	r3, 1cd50 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ccfe:	6898      	ldr	r0, [r3, #8]
   1cd00:	f008 f97a 	bl	24ff8 <poller_thread>
   1cd04:	900b      	str	r0, [sp, #44]	; 0x2c
   1cd06:	4638      	mov	r0, r7
   1cd08:	f008 f976 	bl	24ff8 <poller_thread>
   1cd0c:	4601      	mov	r1, r0
   1cd0e:	900a      	str	r0, [sp, #40]	; 0x28
   1cd10:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cd12:	f007 fef5 	bl	24b00 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1cd16:	2800      	cmp	r0, #0
   1cd18:	dc1a      	bgt.n	1cd50 <z_impl_k_poll+0x184>
	return list->head == list;
   1cd1a:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cd1e:	45d0      	cmp	r8, sl
   1cd20:	d02f      	beq.n	1cd82 <z_impl_k_poll+0x1b6>
   1cd22:	4653      	mov	r3, sl
   1cd24:	46a2      	mov	sl, r4
   1cd26:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cd28:	b38c      	cbz	r4, 1cd8e <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1cd2a:	68a0      	ldr	r0, [r4, #8]
   1cd2c:	f008 f964 	bl	24ff8 <poller_thread>
   1cd30:	4601      	mov	r1, r0
   1cd32:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cd34:	f007 fee4 	bl	24b00 <z_sched_prio_cmp>
   1cd38:	2800      	cmp	r0, #0
   1cd3a:	dc16      	bgt.n	1cd6a <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cd3c:	b34c      	cbz	r4, 1cd92 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1cd3e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1cd42:	429c      	cmp	r4, r3
   1cd44:	d030      	beq.n	1cda8 <z_impl_k_poll+0x1dc>
   1cd46:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cd48:	2c00      	cmp	r4, #0
   1cd4a:	d1ed      	bne.n	1cd28 <z_impl_k_poll+0x15c>
   1cd4c:	4654      	mov	r4, sl
   1cd4e:	e021      	b.n	1cd94 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1cd50:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cd54:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cd56:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cd5a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cd5c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cd5e:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1cd62:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1cd64:	f10b 0b01 	add.w	fp, fp, #1
   1cd68:	e775      	b.n	1cc56 <z_impl_k_poll+0x8a>
   1cd6a:	4623      	mov	r3, r4
   1cd6c:	4654      	mov	r4, sl
   1cd6e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1cd70:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1cd72:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1cd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cd76:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1cd7a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1cd7c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1cd80:	e7ef      	b.n	1cd62 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cd82:	f04f 0a00 	mov.w	sl, #0
   1cd86:	4653      	mov	r3, sl
   1cd88:	46a2      	mov	sl, r4
   1cd8a:	461c      	mov	r4, r3
   1cd8c:	e7cc      	b.n	1cd28 <z_impl_k_poll+0x15c>
   1cd8e:	4654      	mov	r4, sl
   1cd90:	e000      	b.n	1cd94 <z_impl_k_poll+0x1c8>
   1cd92:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1cd94:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cd98:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cd9a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cd9e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cda0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cda2:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1cda6:	e7dc      	b.n	1cd62 <z_impl_k_poll+0x196>
   1cda8:	4654      	mov	r4, sl
   1cdaa:	e7f3      	b.n	1cd94 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1cdac:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1cdb0:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1cdb4:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1cdb8:	4598      	cmp	r8, r3
   1cdba:	d02b      	beq.n	1ce14 <z_impl_k_poll+0x248>
   1cdbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1cdc0:	b343      	cbz	r3, 1ce14 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1cdc2:	6898      	ldr	r0, [r3, #8]
   1cdc4:	f008 f918 	bl	24ff8 <poller_thread>
   1cdc8:	900b      	str	r0, [sp, #44]	; 0x2c
   1cdca:	4638      	mov	r0, r7
   1cdcc:	f008 f914 	bl	24ff8 <poller_thread>
   1cdd0:	4601      	mov	r1, r0
   1cdd2:	900a      	str	r0, [sp, #40]	; 0x28
   1cdd4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cdd6:	f007 fe93 	bl	24b00 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1cdda:	2800      	cmp	r0, #0
   1cddc:	dc1a      	bgt.n	1ce14 <z_impl_k_poll+0x248>
	return list->head == list;
   1cdde:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cde2:	45d0      	cmp	r8, sl
   1cde4:	d02c      	beq.n	1ce40 <z_impl_k_poll+0x274>
   1cde6:	4653      	mov	r3, sl
   1cde8:	46a2      	mov	sl, r4
   1cdea:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cdec:	b374      	cbz	r4, 1ce4c <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1cdee:	68a0      	ldr	r0, [r4, #8]
   1cdf0:	f008 f902 	bl	24ff8 <poller_thread>
   1cdf4:	4601      	mov	r1, r0
   1cdf6:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cdf8:	f007 fe82 	bl	24b00 <z_sched_prio_cmp>
   1cdfc:	2800      	cmp	r0, #0
   1cdfe:	dc13      	bgt.n	1ce28 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ce00:	b334      	cbz	r4, 1ce50 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1ce02:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ce06:	429c      	cmp	r4, r3
   1ce08:	d02d      	beq.n	1ce66 <z_impl_k_poll+0x29a>
   1ce0a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ce0c:	2c00      	cmp	r4, #0
   1ce0e:	d1ed      	bne.n	1cdec <z_impl_k_poll+0x220>
   1ce10:	4654      	mov	r4, sl
   1ce12:	e01e      	b.n	1ce52 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1ce14:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1ce18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce1a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1ce1e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1ce20:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ce22:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1ce26:	e79c      	b.n	1cd62 <z_impl_k_poll+0x196>
   1ce28:	4623      	mov	r3, r4
   1ce2a:	4654      	mov	r4, sl
   1ce2c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1ce2e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1ce30:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1ce32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce34:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1ce38:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1ce3a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1ce3e:	e790      	b.n	1cd62 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ce40:	f04f 0a00 	mov.w	sl, #0
   1ce44:	4653      	mov	r3, sl
   1ce46:	46a2      	mov	sl, r4
   1ce48:	461c      	mov	r4, r3
   1ce4a:	e7cf      	b.n	1cdec <z_impl_k_poll+0x220>
   1ce4c:	4654      	mov	r4, sl
   1ce4e:	e000      	b.n	1ce52 <z_impl_k_poll+0x286>
   1ce50:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1ce52:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1ce56:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce58:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1ce5c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1ce5e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ce60:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1ce64:	e77d      	b.n	1cd62 <z_impl_k_poll+0x196>
   1ce66:	4654      	mov	r4, sl
   1ce68:	e7f3      	b.n	1ce52 <z_impl_k_poll+0x286>
   1ce6a:	bf00      	nop
   1ce6c:	200377cc 	.word	0x200377cc
		add_event(&event->signal->poll_events, event, poller);
   1ce70:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1ce74:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1ce78:	4598      	cmp	r8, r3
   1ce7a:	d02b      	beq.n	1ced4 <z_impl_k_poll+0x308>
   1ce7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1ce80:	b343      	cbz	r3, 1ced4 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1ce82:	6898      	ldr	r0, [r3, #8]
   1ce84:	f008 f8b8 	bl	24ff8 <poller_thread>
   1ce88:	4682      	mov	sl, r0
   1ce8a:	4638      	mov	r0, r7
   1ce8c:	f008 f8b4 	bl	24ff8 <poller_thread>
   1ce90:	4601      	mov	r1, r0
   1ce92:	900a      	str	r0, [sp, #40]	; 0x28
   1ce94:	4650      	mov	r0, sl
   1ce96:	f007 fe33 	bl	24b00 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1ce9a:	2800      	cmp	r0, #0
   1ce9c:	dc1a      	bgt.n	1ced4 <z_impl_k_poll+0x308>
	return list->head == list;
   1ce9e:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cea2:	45d0      	cmp	r8, sl
   1cea4:	d02c      	beq.n	1cf00 <z_impl_k_poll+0x334>
   1cea6:	4653      	mov	r3, sl
   1cea8:	46a2      	mov	sl, r4
   1ceaa:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1ceac:	b374      	cbz	r4, 1cf0c <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1ceae:	68a0      	ldr	r0, [r4, #8]
   1ceb0:	f008 f8a2 	bl	24ff8 <poller_thread>
   1ceb4:	4601      	mov	r1, r0
   1ceb6:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ceb8:	f007 fe22 	bl	24b00 <z_sched_prio_cmp>
   1cebc:	2800      	cmp	r0, #0
   1cebe:	dc13      	bgt.n	1cee8 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cec0:	b334      	cbz	r4, 1cf10 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1cec2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1cec6:	429c      	cmp	r4, r3
   1cec8:	d02d      	beq.n	1cf26 <z_impl_k_poll+0x35a>
   1ceca:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cecc:	2c00      	cmp	r4, #0
   1cece:	d1ed      	bne.n	1ceac <z_impl_k_poll+0x2e0>
   1ced0:	4654      	mov	r4, sl
   1ced2:	e01e      	b.n	1cf12 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1ced4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1ced8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ceda:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cede:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cee0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cee2:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1cee6:	e73c      	b.n	1cd62 <z_impl_k_poll+0x196>
   1cee8:	4623      	mov	r3, r4
   1ceea:	4654      	mov	r4, sl
   1ceec:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1ceee:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1cef0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1cef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cef4:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1cef8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1cefa:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1cefe:	e730      	b.n	1cd62 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cf00:	f04f 0a00 	mov.w	sl, #0
   1cf04:	4653      	mov	r3, sl
   1cf06:	46a2      	mov	sl, r4
   1cf08:	461c      	mov	r4, r3
   1cf0a:	e7cf      	b.n	1ceac <z_impl_k_poll+0x2e0>
   1cf0c:	4654      	mov	r4, sl
   1cf0e:	e000      	b.n	1cf12 <z_impl_k_poll+0x346>
   1cf10:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1cf12:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cf16:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cf18:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cf1c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cf1e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cf20:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1cf24:	e71d      	b.n	1cd62 <z_impl_k_poll+0x196>
   1cf26:	4654      	mov	r4, sl
   1cf28:	e7f3      	b.n	1cf12 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1cf2a:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1cf2e:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1cf32:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1cf36:	4598      	cmp	r8, r3
   1cf38:	d02b      	beq.n	1cf92 <z_impl_k_poll+0x3c6>
   1cf3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1cf3e:	b343      	cbz	r3, 1cf92 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1cf40:	6898      	ldr	r0, [r3, #8]
   1cf42:	f008 f859 	bl	24ff8 <poller_thread>
   1cf46:	900b      	str	r0, [sp, #44]	; 0x2c
   1cf48:	4638      	mov	r0, r7
   1cf4a:	f008 f855 	bl	24ff8 <poller_thread>
   1cf4e:	4601      	mov	r1, r0
   1cf50:	900a      	str	r0, [sp, #40]	; 0x28
   1cf52:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cf54:	f007 fdd4 	bl	24b00 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1cf58:	2800      	cmp	r0, #0
   1cf5a:	dc1a      	bgt.n	1cf92 <z_impl_k_poll+0x3c6>
	return list->head == list;
   1cf5c:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf60:	45d0      	cmp	r8, sl
   1cf62:	d02c      	beq.n	1cfbe <z_impl_k_poll+0x3f2>
   1cf64:	4653      	mov	r3, sl
   1cf66:	46a2      	mov	sl, r4
   1cf68:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cf6a:	b374      	cbz	r4, 1cfca <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1cf6c:	68a0      	ldr	r0, [r4, #8]
   1cf6e:	f008 f843 	bl	24ff8 <poller_thread>
   1cf72:	4601      	mov	r1, r0
   1cf74:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cf76:	f007 fdc3 	bl	24b00 <z_sched_prio_cmp>
   1cf7a:	2800      	cmp	r0, #0
   1cf7c:	dc13      	bgt.n	1cfa6 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cf7e:	b334      	cbz	r4, 1cfce <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1cf80:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1cf84:	429c      	cmp	r4, r3
   1cf86:	d02d      	beq.n	1cfe4 <z_impl_k_poll+0x418>
   1cf88:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cf8a:	2c00      	cmp	r4, #0
   1cf8c:	d1ed      	bne.n	1cf6a <z_impl_k_poll+0x39e>
   1cf8e:	4654      	mov	r4, sl
   1cf90:	e01e      	b.n	1cfd0 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1cf92:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cf96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cf98:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cf9c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cf9e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cfa0:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1cfa4:	e6dd      	b.n	1cd62 <z_impl_k_poll+0x196>
   1cfa6:	4623      	mov	r3, r4
   1cfa8:	4654      	mov	r4, sl
   1cfaa:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1cfac:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1cfae:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1cfb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cfb2:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1cfb6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1cfb8:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1cfbc:	e6d1      	b.n	1cd62 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1cfbe:	f04f 0a00 	mov.w	sl, #0
   1cfc2:	4653      	mov	r3, sl
   1cfc4:	46a2      	mov	sl, r4
   1cfc6:	461c      	mov	r4, r3
   1cfc8:	e7cf      	b.n	1cf6a <z_impl_k_poll+0x39e>
   1cfca:	4654      	mov	r4, sl
   1cfcc:	e000      	b.n	1cfd0 <z_impl_k_poll+0x404>
   1cfce:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1cfd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1cfd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cfd6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1cfda:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1cfdc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cfde:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1cfe2:	e6be      	b.n	1cd62 <z_impl_k_poll+0x196>
   1cfe4:	4654      	mov	r4, sl
   1cfe6:	e7f3      	b.n	1cfd0 <z_impl_k_poll+0x404>
   1cfe8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfec:	f3ef 8111 	mrs	r1, BASEPRI
   1cff0:	f383 8811 	msr	BASEPRI, r3
   1cff4:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1cff8:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1cffc:	b1cb      	cbz	r3, 1d032 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1cffe:	2300      	movs	r3, #0
   1d000:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d004:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d008:	4323      	orrs	r3, r4
   1d00a:	d045      	beq.n	1d098 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d00c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1d010:	e9cd 3400 	strd	r3, r4, [sp]
   1d014:	4a3c      	ldr	r2, [pc, #240]	; (1d108 <z_impl_k_poll+0x53c>)
   1d016:	483d      	ldr	r0, [pc, #244]	; (1d10c <z_impl_k_poll+0x540>)
   1d018:	f7ff f87a 	bl	1c110 <z_pend_curr>
   1d01c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d020:	f3ef 8c11 	mrs	ip, BASEPRI
   1d024:	f383 8811 	msr	BASEPRI, r3
   1d028:	f3bf 8f6f 	isb	sy
   1d02c:	4661      	mov	r1, ip
	while (num_events--) {
   1d02e:	465b      	mov	r3, fp
   1d030:	e04e      	b.n	1d0d0 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1d032:	4608      	mov	r0, r1
	while (num_events--) {
   1d034:	465b      	mov	r3, fp
   1d036:	e014      	b.n	1d062 <z_impl_k_poll+0x496>
	return node->next != NULL;
   1d038:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d03a:	b12a      	cbz	r2, 1d048 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1d03c:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1d03e:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1d040:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1d042:	2200      	movs	r2, #0
   1d044:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1d046:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1d048:	f380 8811 	msr	BASEPRI, r0
   1d04c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d050:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d054:	f3ef 8011 	mrs	r0, BASEPRI
   1d058:	f383 8811 	msr	BASEPRI, r3
   1d05c:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1d060:	463b      	mov	r3, r7
   1d062:	1e5f      	subs	r7, r3, #1
   1d064:	b193      	cbz	r3, 1d08c <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1d066:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1d06a:	009e      	lsls	r6, r3, #2
   1d06c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1d070:	2200      	movs	r2, #0
   1d072:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1d074:	7b5a      	ldrb	r2, [r3, #13]
   1d076:	f002 021f 	and.w	r2, r2, #31
   1d07a:	2a08      	cmp	r2, #8
   1d07c:	d8e4      	bhi.n	1d048 <z_impl_k_poll+0x47c>
   1d07e:	2401      	movs	r4, #1
   1d080:	fa04 f202 	lsl.w	r2, r4, r2
   1d084:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1d088:	d0de      	beq.n	1d048 <z_impl_k_poll+0x47c>
   1d08a:	e7d5      	b.n	1d038 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1d08c:	f381 8811 	msr	BASEPRI, r1
   1d090:	f3bf 8f6f 	isb	sy
		return 0;
   1d094:	4618      	mov	r0, r3
   1d096:	e034      	b.n	1d102 <z_impl_k_poll+0x536>
   1d098:	f381 8811 	msr	BASEPRI, r1
   1d09c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d0a0:	f06f 000a 	mvn.w	r0, #10
   1d0a4:	e02d      	b.n	1d102 <z_impl_k_poll+0x536>
	return node->next != NULL;
   1d0a6:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1d0a8:	b12a      	cbz	r2, 1d0b6 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1d0aa:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1d0ac:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1d0ae:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1d0b0:	2200      	movs	r2, #0
   1d0b2:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1d0b4:	605a      	str	r2, [r3, #4]
   1d0b6:	f381 8811 	msr	BASEPRI, r1
   1d0ba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d0be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0c2:	f3ef 8111 	mrs	r1, BASEPRI
   1d0c6:	f383 8811 	msr	BASEPRI, r3
   1d0ca:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1d0ce:	4623      	mov	r3, r4
   1d0d0:	1e5c      	subs	r4, r3, #1
   1d0d2:	b193      	cbz	r3, 1d0fa <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1d0d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d0d8:	009f      	lsls	r7, r3, #2
   1d0da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1d0de:	2200      	movs	r2, #0
   1d0e0:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1d0e2:	7b5a      	ldrb	r2, [r3, #13]
   1d0e4:	f002 021f 	and.w	r2, r2, #31
   1d0e8:	2a08      	cmp	r2, #8
   1d0ea:	d8e4      	bhi.n	1d0b6 <z_impl_k_poll+0x4ea>
   1d0ec:	2601      	movs	r6, #1
   1d0ee:	fa06 f202 	lsl.w	r2, r6, r2
   1d0f2:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1d0f6:	d0de      	beq.n	1d0b6 <z_impl_k_poll+0x4ea>
   1d0f8:	e7d5      	b.n	1d0a6 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1d0fa:	f38c 8811 	msr	BASEPRI, ip
   1d0fe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1d102:	b00d      	add	sp, #52	; 0x34
   1d104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d108:	20033a80 	.word	0x20033a80
   1d10c:	20037818 	.word	0x20037818

0001d110 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1d110:	b538      	push	{r3, r4, r5, lr}
   1d112:	4603      	mov	r3, r0
	__asm__ volatile(
   1d114:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d118:	f3ef 8511 	mrs	r5, BASEPRI
   1d11c:	f382 8811 	msr	BASEPRI, r2
   1d120:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1d124:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1d126:	2201      	movs	r2, #1
   1d128:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1d12a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d12c:	4283      	cmp	r3, r0
   1d12e:	d011      	beq.n	1d154 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1d130:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1d132:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1d134:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d136:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d138:	2300      	movs	r3, #0
   1d13a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1d13c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1d13e:	b148      	cbz	r0, 1d154 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d140:	2101      	movs	r1, #1
   1d142:	f007 ffa9 	bl	25098 <signal_poll_event>
   1d146:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1d148:	4629      	mov	r1, r5
   1d14a:	4805      	ldr	r0, [pc, #20]	; (1d160 <z_impl_k_poll_signal_raise+0x50>)
   1d14c:	f7fe ff6a 	bl	1c024 <z_reschedule>
	return rc;
}
   1d150:	4620      	mov	r0, r4
   1d152:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d154:	f385 8811 	msr	BASEPRI, r5
   1d158:	f3bf 8f6f 	isb	sy
		return 0;
   1d15c:	2400      	movs	r4, #0
   1d15e:	e7f7      	b.n	1d150 <z_impl_k_poll_signal_raise+0x40>
   1d160:	20037818 	.word	0x20037818

0001d164 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d164:	b538      	push	{r3, r4, r5, lr}
   1d166:	4604      	mov	r4, r0
   1d168:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d16a:	f007 fa42 	bl	245f2 <k_is_in_isr>
   1d16e:	b948      	cbnz	r0, 1d184 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d170:	4b05      	ldr	r3, [pc, #20]	; (1d188 <z_thread_aligned_alloc+0x24>)
   1d172:	689b      	ldr	r3, [r3, #8]
   1d174:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1d178:	b118      	cbz	r0, 1d182 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1d17a:	462a      	mov	r2, r5
   1d17c:	4621      	mov	r1, r4
   1d17e:	f007 ffd4 	bl	2512a <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1d182:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1d184:	4801      	ldr	r0, [pc, #4]	; (1d18c <z_thread_aligned_alloc+0x28>)
   1d186:	e7f7      	b.n	1d178 <z_thread_aligned_alloc+0x14>
   1d188:	200377cc 	.word	0x200377cc
   1d18c:	20033b4c 	.word	0x20033b4c

0001d190 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1d190:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1d192:	4a03      	ldr	r2, [pc, #12]	; (1d1a0 <boot_banner+0x10>)
   1d194:	4903      	ldr	r1, [pc, #12]	; (1d1a4 <boot_banner+0x14>)
   1d196:	4804      	ldr	r0, [pc, #16]	; (1d1a8 <boot_banner+0x18>)
   1d198:	f002 fd48 	bl	1fc2c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1d19c:	bd08      	pop	{r3, pc}
   1d19e:	bf00      	nop
   1d1a0:	00025988 	.word	0x00025988
   1d1a4:	000278f4 	.word	0x000278f4
   1d1a8:	00027904 	.word	0x00027904

0001d1ac <nrf_cc3xx_platform_init>:
   1d1ac:	b510      	push	{r4, lr}
   1d1ae:	4c0c      	ldr	r4, [pc, #48]	; (1d1e0 <nrf_cc3xx_platform_init+0x34>)
   1d1b0:	6823      	ldr	r3, [r4, #0]
   1d1b2:	b113      	cbz	r3, 1d1ba <nrf_cc3xx_platform_init+0xe>
   1d1b4:	4b0b      	ldr	r3, [pc, #44]	; (1d1e4 <nrf_cc3xx_platform_init+0x38>)
   1d1b6:	681b      	ldr	r3, [r3, #0]
   1d1b8:	b92b      	cbnz	r3, 1d1c6 <nrf_cc3xx_platform_init+0x1a>
   1d1ba:	f000 fabd 	bl	1d738 <CC_LibInit>
   1d1be:	b930      	cbnz	r0, 1d1ce <nrf_cc3xx_platform_init+0x22>
   1d1c0:	4b08      	ldr	r3, [pc, #32]	; (1d1e4 <nrf_cc3xx_platform_init+0x38>)
   1d1c2:	2201      	movs	r2, #1
   1d1c4:	601a      	str	r2, [r3, #0]
   1d1c6:	2301      	movs	r3, #1
   1d1c8:	6023      	str	r3, [r4, #0]
   1d1ca:	2000      	movs	r0, #0
   1d1cc:	bd10      	pop	{r4, pc}
   1d1ce:	3801      	subs	r0, #1
   1d1d0:	2806      	cmp	r0, #6
   1d1d2:	d901      	bls.n	1d1d8 <nrf_cc3xx_platform_init+0x2c>
   1d1d4:	4804      	ldr	r0, [pc, #16]	; (1d1e8 <nrf_cc3xx_platform_init+0x3c>)
   1d1d6:	bd10      	pop	{r4, pc}
   1d1d8:	4b04      	ldr	r3, [pc, #16]	; (1d1ec <nrf_cc3xx_platform_init+0x40>)
   1d1da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d1de:	bd10      	pop	{r4, pc}
   1d1e0:	20037818 	.word	0x20037818
   1d1e4:	2003781c 	.word	0x2003781c
   1d1e8:	ffff8ffe 	.word	0xffff8ffe
   1d1ec:	0002792c 	.word	0x0002792c

0001d1f0 <nrf_cc3xx_platform_abort>:
   1d1f0:	f3bf 8f4f 	dsb	sy
   1d1f4:	4905      	ldr	r1, [pc, #20]	; (1d20c <nrf_cc3xx_platform_abort+0x1c>)
   1d1f6:	4b06      	ldr	r3, [pc, #24]	; (1d210 <nrf_cc3xx_platform_abort+0x20>)
   1d1f8:	68ca      	ldr	r2, [r1, #12]
   1d1fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d1fe:	4313      	orrs	r3, r2
   1d200:	60cb      	str	r3, [r1, #12]
   1d202:	f3bf 8f4f 	dsb	sy
   1d206:	bf00      	nop
   1d208:	e7fd      	b.n	1d206 <nrf_cc3xx_platform_abort+0x16>
   1d20a:	bf00      	nop
   1d20c:	e000ed00 	.word	0xe000ed00
   1d210:	05fa0004 	.word	0x05fa0004

0001d214 <CC_PalAbort>:
   1d214:	b4f0      	push	{r4, r5, r6, r7}
   1d216:	4f09      	ldr	r7, [pc, #36]	; (1d23c <CC_PalAbort+0x28>)
   1d218:	4e09      	ldr	r6, [pc, #36]	; (1d240 <CC_PalAbort+0x2c>)
   1d21a:	4c0a      	ldr	r4, [pc, #40]	; (1d244 <CC_PalAbort+0x30>)
   1d21c:	4a0a      	ldr	r2, [pc, #40]	; (1d248 <CC_PalAbort+0x34>)
   1d21e:	4d0b      	ldr	r5, [pc, #44]	; (1d24c <CC_PalAbort+0x38>)
   1d220:	490b      	ldr	r1, [pc, #44]	; (1d250 <CC_PalAbort+0x3c>)
   1d222:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1d226:	603b      	str	r3, [r7, #0]
   1d228:	6852      	ldr	r2, [r2, #4]
   1d22a:	6033      	str	r3, [r6, #0]
   1d22c:	6023      	str	r3, [r4, #0]
   1d22e:	2400      	movs	r4, #0
   1d230:	602b      	str	r3, [r5, #0]
   1d232:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1d236:	bcf0      	pop	{r4, r5, r6, r7}
   1d238:	4710      	bx	r2
   1d23a:	bf00      	nop
   1d23c:	5002b400 	.word	0x5002b400
   1d240:	5002b404 	.word	0x5002b404
   1d244:	5002b408 	.word	0x5002b408
   1d248:	20033a88 	.word	0x20033a88
   1d24c:	5002b40c 	.word	0x5002b40c
   1d250:	5002a000 	.word	0x5002a000

0001d254 <nrf_cc3xx_platform_set_abort>:
   1d254:	e9d0 1200 	ldrd	r1, r2, [r0]
   1d258:	4b01      	ldr	r3, [pc, #4]	; (1d260 <nrf_cc3xx_platform_set_abort+0xc>)
   1d25a:	e9c3 1200 	strd	r1, r2, [r3]
   1d25e:	4770      	bx	lr
   1d260:	20033a88 	.word	0x20033a88

0001d264 <nrf_cc3xx_platform_ctr_drbg_init>:
   1d264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d268:	4c15      	ldr	r4, [pc, #84]	; (1d2c0 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1d26a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1d2c8 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1d26e:	2800      	cmp	r0, #0
   1d270:	bf18      	it	ne
   1d272:	4604      	movne	r4, r0
   1d274:	b083      	sub	sp, #12
   1d276:	6820      	ldr	r0, [r4, #0]
   1d278:	4540      	cmp	r0, r8
   1d27a:	d01d      	beq.n	1d2b8 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1d27c:	460d      	mov	r5, r1
   1d27e:	4620      	mov	r0, r4
   1d280:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1d284:	f104 0904 	add.w	r9, r4, #4
   1d288:	4616      	mov	r6, r2
   1d28a:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1d28e:	f000 fe9f 	bl	1dfd0 <mbedtls_platform_zeroize>
   1d292:	4648      	mov	r0, r9
   1d294:	f000 f940 	bl	1d518 <cc_mbedtls_entropy_init>
   1d298:	4638      	mov	r0, r7
   1d29a:	f001 fa75 	bl	1e788 <cc_mbedtls_ctr_drbg_init>
   1d29e:	4909      	ldr	r1, [pc, #36]	; (1d2c4 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1d2a0:	9600      	str	r6, [sp, #0]
   1d2a2:	464a      	mov	r2, r9
   1d2a4:	4638      	mov	r0, r7
   1d2a6:	462b      	mov	r3, r5
   1d2a8:	f001 fa80 	bl	1e7ac <cc_mbedtls_ctr_drbg_seed>
   1d2ac:	b908      	cbnz	r0, 1d2b2 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1d2ae:	f8c4 8000 	str.w	r8, [r4]
   1d2b2:	b003      	add	sp, #12
   1d2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d2b8:	2000      	movs	r0, #0
   1d2ba:	b003      	add	sp, #12
   1d2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d2c0:	20038124 	.word	0x20038124
   1d2c4:	0001d595 	.word	0x0001d595
   1d2c8:	5ac9bca5 	.word	0x5ac9bca5

0001d2cc <nrf_cc3xx_platform_ctr_drbg_get>:
   1d2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d2ce:	4c0d      	ldr	r4, [pc, #52]	; (1d304 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1d2d0:	4e0d      	ldr	r6, [pc, #52]	; (1d308 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1d2d2:	2800      	cmp	r0, #0
   1d2d4:	bf08      	it	eq
   1d2d6:	4620      	moveq	r0, r4
   1d2d8:	b083      	sub	sp, #12
   1d2da:	6807      	ldr	r7, [r0, #0]
   1d2dc:	42b7      	cmp	r7, r6
   1d2de:	d10e      	bne.n	1d2fe <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1d2e0:	2600      	movs	r6, #0
   1d2e2:	461d      	mov	r5, r3
   1d2e4:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1d2e8:	9600      	str	r6, [sp, #0]
   1d2ea:	4633      	mov	r3, r6
   1d2ec:	4614      	mov	r4, r2
   1d2ee:	f001 faad 	bl	1e84c <cc_mbedtls_ctr_drbg_random_with_add>
   1d2f2:	2800      	cmp	r0, #0
   1d2f4:	bf18      	it	ne
   1d2f6:	4634      	movne	r4, r6
   1d2f8:	602c      	str	r4, [r5, #0]
   1d2fa:	b003      	add	sp, #12
   1d2fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d2fe:	4803      	ldr	r0, [pc, #12]	; (1d30c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1d300:	e7fb      	b.n	1d2fa <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1d302:	bf00      	nop
   1d304:	20038124 	.word	0x20038124
   1d308:	5ac9bca5 	.word	0x5ac9bca5
   1d30c:	ffff8fe8 	.word	0xffff8fe8

0001d310 <mutex_free>:
   1d310:	b510      	push	{r4, lr}
   1d312:	4604      	mov	r4, r0
   1d314:	b130      	cbz	r0, 1d324 <mutex_free+0x14>
   1d316:	6863      	ldr	r3, [r4, #4]
   1d318:	06db      	lsls	r3, r3, #27
   1d31a:	d502      	bpl.n	1d322 <mutex_free+0x12>
   1d31c:	2300      	movs	r3, #0
   1d31e:	6023      	str	r3, [r4, #0]
   1d320:	6063      	str	r3, [r4, #4]
   1d322:	bd10      	pop	{r4, pc}
   1d324:	4b02      	ldr	r3, [pc, #8]	; (1d330 <mutex_free+0x20>)
   1d326:	4803      	ldr	r0, [pc, #12]	; (1d334 <mutex_free+0x24>)
   1d328:	685b      	ldr	r3, [r3, #4]
   1d32a:	4798      	blx	r3
   1d32c:	e7f3      	b.n	1d316 <mutex_free+0x6>
   1d32e:	bf00      	nop
   1d330:	20033a88 	.word	0x20033a88
   1d334:	00027948 	.word	0x00027948

0001d338 <mutex_unlock>:
   1d338:	b168      	cbz	r0, 1d356 <mutex_unlock+0x1e>
   1d33a:	6843      	ldr	r3, [r0, #4]
   1d33c:	b13b      	cbz	r3, 1d34e <mutex_unlock+0x16>
   1d33e:	06db      	lsls	r3, r3, #27
   1d340:	d507      	bpl.n	1d352 <mutex_unlock+0x1a>
   1d342:	f3bf 8f5f 	dmb	sy
   1d346:	2300      	movs	r3, #0
   1d348:	6003      	str	r3, [r0, #0]
   1d34a:	4618      	mov	r0, r3
   1d34c:	4770      	bx	lr
   1d34e:	4803      	ldr	r0, [pc, #12]	; (1d35c <mutex_unlock+0x24>)
   1d350:	4770      	bx	lr
   1d352:	4803      	ldr	r0, [pc, #12]	; (1d360 <mutex_unlock+0x28>)
   1d354:	4770      	bx	lr
   1d356:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1d35a:	4770      	bx	lr
   1d35c:	ffff8fea 	.word	0xffff8fea
   1d360:	ffff8fe9 	.word	0xffff8fe9

0001d364 <mutex_init>:
   1d364:	b510      	push	{r4, lr}
   1d366:	4604      	mov	r4, r0
   1d368:	b120      	cbz	r0, 1d374 <mutex_init+0x10>
   1d36a:	2200      	movs	r2, #0
   1d36c:	2311      	movs	r3, #17
   1d36e:	6022      	str	r2, [r4, #0]
   1d370:	6063      	str	r3, [r4, #4]
   1d372:	bd10      	pop	{r4, pc}
   1d374:	4801      	ldr	r0, [pc, #4]	; (1d37c <mutex_init+0x18>)
   1d376:	f7ff ff4d 	bl	1d214 <CC_PalAbort>
   1d37a:	e7f6      	b.n	1d36a <mutex_init+0x6>
   1d37c:	00027970 	.word	0x00027970

0001d380 <mutex_lock>:
   1d380:	b1c0      	cbz	r0, 1d3b4 <mutex_lock+0x34>
   1d382:	6843      	ldr	r3, [r0, #4]
   1d384:	b1a3      	cbz	r3, 1d3b0 <mutex_lock+0x30>
   1d386:	06db      	lsls	r3, r3, #27
   1d388:	d510      	bpl.n	1d3ac <mutex_lock+0x2c>
   1d38a:	2201      	movs	r2, #1
   1d38c:	f3bf 8f5b 	dmb	ish
   1d390:	e850 3f00 	ldrex	r3, [r0]
   1d394:	e840 2100 	strex	r1, r2, [r0]
   1d398:	2900      	cmp	r1, #0
   1d39a:	d1f9      	bne.n	1d390 <mutex_lock+0x10>
   1d39c:	f3bf 8f5b 	dmb	ish
   1d3a0:	2b01      	cmp	r3, #1
   1d3a2:	d0f3      	beq.n	1d38c <mutex_lock+0xc>
   1d3a4:	f3bf 8f5f 	dmb	sy
   1d3a8:	2000      	movs	r0, #0
   1d3aa:	4770      	bx	lr
   1d3ac:	4803      	ldr	r0, [pc, #12]	; (1d3bc <mutex_lock+0x3c>)
   1d3ae:	4770      	bx	lr
   1d3b0:	4803      	ldr	r0, [pc, #12]	; (1d3c0 <mutex_lock+0x40>)
   1d3b2:	4770      	bx	lr
   1d3b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1d3b8:	4770      	bx	lr
   1d3ba:	bf00      	nop
   1d3bc:	ffff8fe9 	.word	0xffff8fe9
   1d3c0:	ffff8fea 	.word	0xffff8fea

0001d3c4 <nrf_cc3xx_platform_set_mutexes>:
   1d3c4:	b570      	push	{r4, r5, r6, lr}
   1d3c6:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d3ca:	4c13      	ldr	r4, [pc, #76]	; (1d418 <nrf_cc3xx_platform_set_mutexes+0x54>)
   1d3cc:	4d13      	ldr	r5, [pc, #76]	; (1d41c <nrf_cc3xx_platform_set_mutexes+0x58>)
   1d3ce:	e9c4 2300 	strd	r2, r3, [r4]
   1d3d2:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1d3d6:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1d3da:	4b11      	ldr	r3, [pc, #68]	; (1d420 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1d3dc:	6808      	ldr	r0, [r1, #0]
   1d3de:	6018      	str	r0, [r3, #0]
   1d3e0:	6848      	ldr	r0, [r1, #4]
   1d3e2:	6058      	str	r0, [r3, #4]
   1d3e4:	6888      	ldr	r0, [r1, #8]
   1d3e6:	6098      	str	r0, [r3, #8]
   1d3e8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1d3ec:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1d3f0:	60de      	str	r6, [r3, #12]
   1d3f2:	6118      	str	r0, [r3, #16]
   1d3f4:	06cb      	lsls	r3, r1, #27
   1d3f6:	d50d      	bpl.n	1d414 <nrf_cc3xx_platform_set_mutexes+0x50>
   1d3f8:	2300      	movs	r3, #0
   1d3fa:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1d3fe:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1d402:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1d406:	4790      	blx	r2
   1d408:	6823      	ldr	r3, [r4, #0]
   1d40a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1d40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d412:	4718      	bx	r3
   1d414:	bd70      	pop	{r4, r5, r6, pc}
   1d416:	bf00      	nop
   1d418:	20033a98 	.word	0x20033a98
   1d41c:	20038124 	.word	0x20038124
   1d420:	20033aa8 	.word	0x20033aa8

0001d424 <entropy_update>:
   1d424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d428:	2b20      	cmp	r3, #32
   1d42a:	b08b      	sub	sp, #44	; 0x2c
   1d42c:	461d      	mov	r5, r3
   1d42e:	4606      	mov	r6, r0
   1d430:	4689      	mov	r9, r1
   1d432:	4690      	mov	r8, r2
   1d434:	d826      	bhi.n	1d484 <entropy_update+0x60>
   1d436:	b2db      	uxtb	r3, r3
   1d438:	af02      	add	r7, sp, #8
   1d43a:	6831      	ldr	r1, [r6, #0]
   1d43c:	f88d 9004 	strb.w	r9, [sp, #4]
   1d440:	f88d 3005 	strb.w	r3, [sp, #5]
   1d444:	f106 0904 	add.w	r9, r6, #4
   1d448:	b921      	cbnz	r1, 1d454 <entropy_update+0x30>
   1d44a:	4648      	mov	r0, r9
   1d44c:	f000 fe62 	bl	1e114 <cc_mbedtls_sha256_starts_ret>
   1d450:	4604      	mov	r4, r0
   1d452:	b940      	cbnz	r0, 1d466 <entropy_update+0x42>
   1d454:	2301      	movs	r3, #1
   1d456:	6033      	str	r3, [r6, #0]
   1d458:	2202      	movs	r2, #2
   1d45a:	a901      	add	r1, sp, #4
   1d45c:	4648      	mov	r0, r9
   1d45e:	f000 fe6d 	bl	1e13c <cc_mbedtls_sha256_update_ret>
   1d462:	4604      	mov	r4, r0
   1d464:	b138      	cbz	r0, 1d476 <entropy_update+0x52>
   1d466:	4638      	mov	r0, r7
   1d468:	2120      	movs	r1, #32
   1d46a:	f000 fdb1 	bl	1dfd0 <mbedtls_platform_zeroize>
   1d46e:	4620      	mov	r0, r4
   1d470:	b00b      	add	sp, #44	; 0x2c
   1d472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d476:	462a      	mov	r2, r5
   1d478:	4641      	mov	r1, r8
   1d47a:	4648      	mov	r0, r9
   1d47c:	f000 fe5e 	bl	1e13c <cc_mbedtls_sha256_update_ret>
   1d480:	4604      	mov	r4, r0
   1d482:	e7f0      	b.n	1d466 <entropy_update+0x42>
   1d484:	af02      	add	r7, sp, #8
   1d486:	4619      	mov	r1, r3
   1d488:	4610      	mov	r0, r2
   1d48a:	2300      	movs	r3, #0
   1d48c:	463a      	mov	r2, r7
   1d48e:	f001 fad1 	bl	1ea34 <cc_mbedtls_sha256_ret>
   1d492:	4604      	mov	r4, r0
   1d494:	2800      	cmp	r0, #0
   1d496:	d1e6      	bne.n	1d466 <entropy_update+0x42>
   1d498:	2320      	movs	r3, #32
   1d49a:	461d      	mov	r5, r3
   1d49c:	46b8      	mov	r8, r7
   1d49e:	e7cc      	b.n	1d43a <entropy_update+0x16>

0001d4a0 <entropy_gather_internal.part.0>:
   1d4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4a2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1d4a6:	b0a7      	sub	sp, #156	; 0x9c
   1d4a8:	2b00      	cmp	r3, #0
   1d4aa:	bfd8      	it	le
   1d4ac:	ae02      	addle	r6, sp, #8
   1d4ae:	dd2c      	ble.n	1d50a <entropy_gather_internal.part.0+0x6a>
   1d4b0:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1d4b4:	4605      	mov	r5, r0
   1d4b6:	2300      	movs	r3, #0
   1d4b8:	ae02      	add	r6, sp, #8
   1d4ba:	9301      	str	r3, [sp, #4]
   1d4bc:	f1a4 0701 	sub.w	r7, r4, #1
   1d4c0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1d4c4:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1d4c8:	4631      	mov	r1, r6
   1d4ca:	ab01      	add	r3, sp, #4
   1d4cc:	2290      	movs	r2, #144	; 0x90
   1d4ce:	47a0      	blx	r4
   1d4d0:	fab7 f787 	clz	r7, r7
   1d4d4:	097f      	lsrs	r7, r7, #5
   1d4d6:	4604      	mov	r4, r0
   1d4d8:	b910      	cbnz	r0, 1d4e0 <entropy_gather_internal.part.0+0x40>
   1d4da:	9b01      	ldr	r3, [sp, #4]
   1d4dc:	b93b      	cbnz	r3, 1d4ee <entropy_gather_internal.part.0+0x4e>
   1d4de:	b1a7      	cbz	r7, 1d50a <entropy_gather_internal.part.0+0x6a>
   1d4e0:	4630      	mov	r0, r6
   1d4e2:	2190      	movs	r1, #144	; 0x90
   1d4e4:	f000 fd74 	bl	1dfd0 <mbedtls_platform_zeroize>
   1d4e8:	4620      	mov	r0, r4
   1d4ea:	b027      	add	sp, #156	; 0x9c
   1d4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d4ee:	4601      	mov	r1, r0
   1d4f0:	4632      	mov	r2, r6
   1d4f2:	4628      	mov	r0, r5
   1d4f4:	f7ff ff96 	bl	1d424 <entropy_update>
   1d4f8:	b950      	cbnz	r0, 1d510 <entropy_gather_internal.part.0+0x70>
   1d4fa:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1d4fe:	9a01      	ldr	r2, [sp, #4]
   1d500:	4413      	add	r3, r2
   1d502:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1d506:	2f00      	cmp	r7, #0
   1d508:	d1ea      	bne.n	1d4e0 <entropy_gather_internal.part.0+0x40>
   1d50a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1d50e:	e7e7      	b.n	1d4e0 <entropy_gather_internal.part.0+0x40>
   1d510:	4604      	mov	r4, r0
   1d512:	4620      	mov	r0, r4
   1d514:	b027      	add	sp, #156	; 0x9c
   1d516:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d518 <cc_mbedtls_entropy_init>:
   1d518:	b570      	push	{r4, r5, r6, lr}
   1d51a:	2500      	movs	r5, #0
   1d51c:	4604      	mov	r4, r0
   1d51e:	4629      	mov	r1, r5
   1d520:	2214      	movs	r2, #20
   1d522:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1d526:	30f8      	adds	r0, #248	; 0xf8
   1d528:	f004 f821 	bl	2156e <memset>
   1d52c:	4b15      	ldr	r3, [pc, #84]	; (1d584 <cc_mbedtls_entropy_init+0x6c>)
   1d52e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1d532:	681b      	ldr	r3, [r3, #0]
   1d534:	4630      	mov	r0, r6
   1d536:	4798      	blx	r3
   1d538:	4620      	mov	r0, r4
   1d53a:	f840 5b04 	str.w	r5, [r0], #4
   1d53e:	f000 fdcf 	bl	1e0e0 <cc_mbedtls_sha256_init>
   1d542:	4b11      	ldr	r3, [pc, #68]	; (1d588 <cc_mbedtls_entropy_init+0x70>)
   1d544:	4630      	mov	r0, r6
   1d546:	681b      	ldr	r3, [r3, #0]
   1d548:	4798      	blx	r3
   1d54a:	b9c8      	cbnz	r0, 1d580 <cc_mbedtls_entropy_init+0x68>
   1d54c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d550:	42ab      	cmp	r3, r5
   1d552:	dc0f      	bgt.n	1d574 <cc_mbedtls_entropy_init+0x5c>
   1d554:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1d558:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1d55c:	490b      	ldr	r1, [pc, #44]	; (1d58c <cc_mbedtls_entropy_init+0x74>)
   1d55e:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1d562:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1d566:	3301      	adds	r3, #1
   1d568:	2020      	movs	r0, #32
   1d56a:	2101      	movs	r1, #1
   1d56c:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1d570:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1d574:	4b06      	ldr	r3, [pc, #24]	; (1d590 <cc_mbedtls_entropy_init+0x78>)
   1d576:	4630      	mov	r0, r6
   1d578:	681b      	ldr	r3, [r3, #0]
   1d57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d57e:	4718      	bx	r3
   1d580:	bd70      	pop	{r4, r5, r6, pc}
   1d582:	bf00      	nop
   1d584:	20033aec 	.word	0x20033aec
   1d588:	20033af0 	.word	0x20033af0
   1d58c:	0001dfe5 	.word	0x0001dfe5
   1d590:	20033af4 	.word	0x20033af4

0001d594 <cc_mbedtls_entropy_func>:
   1d594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d598:	2a20      	cmp	r2, #32
   1d59a:	b088      	sub	sp, #32
   1d59c:	d876      	bhi.n	1d68c <cc_mbedtls_entropy_func+0xf8>
   1d59e:	4b3d      	ldr	r3, [pc, #244]	; (1d694 <cc_mbedtls_entropy_func+0x100>)
   1d5a0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1d5a4:	681b      	ldr	r3, [r3, #0]
   1d5a6:	4604      	mov	r4, r0
   1d5a8:	4648      	mov	r0, r9
   1d5aa:	4617      	mov	r7, r2
   1d5ac:	4688      	mov	r8, r1
   1d5ae:	4798      	blx	r3
   1d5b0:	4605      	mov	r5, r0
   1d5b2:	bba0      	cbnz	r0, 1d61e <cc_mbedtls_entropy_func+0x8a>
   1d5b4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d5b8:	f240 1601 	movw	r6, #257	; 0x101
   1d5bc:	e001      	b.n	1d5c2 <cc_mbedtls_entropy_func+0x2e>
   1d5be:	3e01      	subs	r6, #1
   1d5c0:	d060      	beq.n	1d684 <cc_mbedtls_entropy_func+0xf0>
   1d5c2:	4620      	mov	r0, r4
   1d5c4:	b37b      	cbz	r3, 1d626 <cc_mbedtls_entropy_func+0x92>
   1d5c6:	f7ff ff6b 	bl	1d4a0 <entropy_gather_internal.part.0>
   1d5ca:	4605      	mov	r5, r0
   1d5cc:	bb68      	cbnz	r0, 1d62a <cc_mbedtls_entropy_func+0x96>
   1d5ce:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d5d2:	2b00      	cmp	r3, #0
   1d5d4:	ddf3      	ble.n	1d5be <cc_mbedtls_entropy_func+0x2a>
   1d5d6:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1d5da:	4290      	cmp	r0, r2
   1d5dc:	d3ef      	bcc.n	1d5be <cc_mbedtls_entropy_func+0x2a>
   1d5de:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1d5e2:	2a01      	cmp	r2, #1
   1d5e4:	d1eb      	bne.n	1d5be <cc_mbedtls_entropy_func+0x2a>
   1d5e6:	281f      	cmp	r0, #31
   1d5e8:	d9e9      	bls.n	1d5be <cc_mbedtls_entropy_func+0x2a>
   1d5ea:	466e      	mov	r6, sp
   1d5ec:	4629      	mov	r1, r5
   1d5ee:	2220      	movs	r2, #32
   1d5f0:	4630      	mov	r0, r6
   1d5f2:	f104 0a04 	add.w	sl, r4, #4
   1d5f6:	f003 ffba 	bl	2156e <memset>
   1d5fa:	4631      	mov	r1, r6
   1d5fc:	4650      	mov	r0, sl
   1d5fe:	f000 fda5 	bl	1e14c <cc_mbedtls_sha256_finish_ret>
   1d602:	4605      	mov	r5, r0
   1d604:	b198      	cbz	r0, 1d62e <cc_mbedtls_entropy_func+0x9a>
   1d606:	4630      	mov	r0, r6
   1d608:	2120      	movs	r1, #32
   1d60a:	f000 fce1 	bl	1dfd0 <mbedtls_platform_zeroize>
   1d60e:	4b22      	ldr	r3, [pc, #136]	; (1d698 <cc_mbedtls_entropy_func+0x104>)
   1d610:	4648      	mov	r0, r9
   1d612:	681b      	ldr	r3, [r3, #0]
   1d614:	4798      	blx	r3
   1d616:	2800      	cmp	r0, #0
   1d618:	bf18      	it	ne
   1d61a:	f06f 051d 	mvnne.w	r5, #29
   1d61e:	4628      	mov	r0, r5
   1d620:	b008      	add	sp, #32
   1d622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d626:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1d62a:	466e      	mov	r6, sp
   1d62c:	e7eb      	b.n	1d606 <cc_mbedtls_entropy_func+0x72>
   1d62e:	4650      	mov	r0, sl
   1d630:	f000 fd6a 	bl	1e108 <cc_mbedtls_sha256_free>
   1d634:	4650      	mov	r0, sl
   1d636:	f000 fd53 	bl	1e0e0 <cc_mbedtls_sha256_init>
   1d63a:	4629      	mov	r1, r5
   1d63c:	4650      	mov	r0, sl
   1d63e:	f000 fd69 	bl	1e114 <cc_mbedtls_sha256_starts_ret>
   1d642:	4605      	mov	r5, r0
   1d644:	2800      	cmp	r0, #0
   1d646:	d1de      	bne.n	1d606 <cc_mbedtls_entropy_func+0x72>
   1d648:	4650      	mov	r0, sl
   1d64a:	2220      	movs	r2, #32
   1d64c:	4631      	mov	r1, r6
   1d64e:	f000 fd75 	bl	1e13c <cc_mbedtls_sha256_update_ret>
   1d652:	4605      	mov	r5, r0
   1d654:	2800      	cmp	r0, #0
   1d656:	d1d6      	bne.n	1d606 <cc_mbedtls_entropy_func+0x72>
   1d658:	4603      	mov	r3, r0
   1d65a:	4632      	mov	r2, r6
   1d65c:	2120      	movs	r1, #32
   1d65e:	4630      	mov	r0, r6
   1d660:	f001 f9e8 	bl	1ea34 <cc_mbedtls_sha256_ret>
   1d664:	4605      	mov	r5, r0
   1d666:	2800      	cmp	r0, #0
   1d668:	d1cd      	bne.n	1d606 <cc_mbedtls_entropy_func+0x72>
   1d66a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1d66e:	2b00      	cmp	r3, #0
   1d670:	bfc4      	itt	gt
   1d672:	2300      	movgt	r3, #0
   1d674:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1d678:	463a      	mov	r2, r7
   1d67a:	4640      	mov	r0, r8
   1d67c:	4631      	mov	r1, r6
   1d67e:	f003 ff52 	bl	21526 <memcpy>
   1d682:	e7c0      	b.n	1d606 <cc_mbedtls_entropy_func+0x72>
   1d684:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d688:	466e      	mov	r6, sp
   1d68a:	e7bc      	b.n	1d606 <cc_mbedtls_entropy_func+0x72>
   1d68c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1d690:	e7c5      	b.n	1d61e <cc_mbedtls_entropy_func+0x8a>
   1d692:	bf00      	nop
   1d694:	20033af0 	.word	0x20033af0
   1d698:	20033af4 	.word	0x20033af4

0001d69c <RndStartupTest.constprop.0>:
   1d69c:	b530      	push	{r4, r5, lr}
   1d69e:	b08d      	sub	sp, #52	; 0x34
   1d6a0:	2100      	movs	r1, #0
   1d6a2:	2228      	movs	r2, #40	; 0x28
   1d6a4:	a802      	add	r0, sp, #8
   1d6a6:	9101      	str	r1, [sp, #4]
   1d6a8:	f003 ff61 	bl	2156e <memset>
   1d6ac:	a802      	add	r0, sp, #8
   1d6ae:	f001 f9e9 	bl	1ea84 <RNG_PLAT_SetUserRngParameters>
   1d6b2:	4604      	mov	r4, r0
   1d6b4:	b110      	cbz	r0, 1d6bc <RndStartupTest.constprop.0+0x20>
   1d6b6:	4620      	mov	r0, r4
   1d6b8:	b00d      	add	sp, #52	; 0x34
   1d6ba:	bd30      	pop	{r4, r5, pc}
   1d6bc:	4d18      	ldr	r5, [pc, #96]	; (1d720 <RndStartupTest.constprop.0+0x84>)
   1d6be:	f04f 31ff 	mov.w	r1, #4294967295
   1d6c2:	6828      	ldr	r0, [r5, #0]
   1d6c4:	f000 f93c 	bl	1d940 <CC_PalMutexLock>
   1d6c8:	4604      	mov	r4, r0
   1d6ca:	b9c0      	cbnz	r0, 1d6fe <RndStartupTest.constprop.0+0x62>
   1d6cc:	2000      	movs	r0, #0
   1d6ce:	f000 f967 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1d6d2:	bb00      	cbnz	r0, 1d716 <RndStartupTest.constprop.0+0x7a>
   1d6d4:	4a13      	ldr	r2, [pc, #76]	; (1d724 <RndStartupTest.constprop.0+0x88>)
   1d6d6:	a902      	add	r1, sp, #8
   1d6d8:	a801      	add	r0, sp, #4
   1d6da:	f000 fc6b 	bl	1dfb4 <LLF_RND_RunTrngStartupTest>
   1d6de:	4604      	mov	r4, r0
   1d6e0:	2001      	movs	r0, #1
   1d6e2:	f000 f95d 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1d6e6:	b990      	cbnz	r0, 1d70e <RndStartupTest.constprop.0+0x72>
   1d6e8:	6828      	ldr	r0, [r5, #0]
   1d6ea:	f000 f931 	bl	1d950 <CC_PalMutexUnlock>
   1d6ee:	2800      	cmp	r0, #0
   1d6f0:	d0e1      	beq.n	1d6b6 <RndStartupTest.constprop.0+0x1a>
   1d6f2:	480d      	ldr	r0, [pc, #52]	; (1d728 <RndStartupTest.constprop.0+0x8c>)
   1d6f4:	f7ff fd8e 	bl	1d214 <CC_PalAbort>
   1d6f8:	4620      	mov	r0, r4
   1d6fa:	b00d      	add	sp, #52	; 0x34
   1d6fc:	bd30      	pop	{r4, r5, pc}
   1d6fe:	480b      	ldr	r0, [pc, #44]	; (1d72c <RndStartupTest.constprop.0+0x90>)
   1d700:	f7ff fd88 	bl	1d214 <CC_PalAbort>
   1d704:	2c01      	cmp	r4, #1
   1d706:	bf08      	it	eq
   1d708:	2405      	moveq	r4, #5
   1d70a:	d0ed      	beq.n	1d6e8 <RndStartupTest.constprop.0+0x4c>
   1d70c:	e7de      	b.n	1d6cc <RndStartupTest.constprop.0+0x30>
   1d70e:	4808      	ldr	r0, [pc, #32]	; (1d730 <RndStartupTest.constprop.0+0x94>)
   1d710:	f7ff fd80 	bl	1d214 <CC_PalAbort>
   1d714:	e7e8      	b.n	1d6e8 <RndStartupTest.constprop.0+0x4c>
   1d716:	4807      	ldr	r0, [pc, #28]	; (1d734 <RndStartupTest.constprop.0+0x98>)
   1d718:	f7ff fd7c 	bl	1d214 <CC_PalAbort>
   1d71c:	e7da      	b.n	1d6d4 <RndStartupTest.constprop.0+0x38>
   1d71e:	bf00      	nop
   1d720:	20033ae8 	.word	0x20033ae8
   1d724:	20037898 	.word	0x20037898
   1d728:	000279ec 	.word	0x000279ec
   1d72c:	00027994 	.word	0x00027994
   1d730:	000279cc 	.word	0x000279cc
   1d734:	000279ac 	.word	0x000279ac

0001d738 <CC_LibInit>:
   1d738:	b510      	push	{r4, lr}
   1d73a:	b082      	sub	sp, #8
   1d73c:	f000 f854 	bl	1d7e8 <CC_HalInit>
   1d740:	b128      	cbz	r0, 1d74e <CC_LibInit+0x16>
   1d742:	f000 f8a3 	bl	1d88c <CC_PalTerminate>
   1d746:	2403      	movs	r4, #3
   1d748:	4620      	mov	r0, r4
   1d74a:	b002      	add	sp, #8
   1d74c:	bd10      	pop	{r4, pc}
   1d74e:	f000 f86f 	bl	1d830 <CC_PalInit>
   1d752:	b9d0      	cbnz	r0, 1d78a <CC_LibInit+0x52>
   1d754:	f000 f924 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1d758:	b9d8      	cbnz	r0, 1d792 <CC_LibInit+0x5a>
   1d75a:	4b1e      	ldr	r3, [pc, #120]	; (1d7d4 <CC_LibInit+0x9c>)
   1d75c:	681b      	ldr	r3, [r3, #0]
   1d75e:	0e1b      	lsrs	r3, r3, #24
   1d760:	2bf0      	cmp	r3, #240	; 0xf0
   1d762:	d10a      	bne.n	1d77a <CC_LibInit+0x42>
   1d764:	4a1c      	ldr	r2, [pc, #112]	; (1d7d8 <CC_LibInit+0xa0>)
   1d766:	4b1d      	ldr	r3, [pc, #116]	; (1d7dc <CC_LibInit+0xa4>)
   1d768:	6812      	ldr	r2, [r2, #0]
   1d76a:	429a      	cmp	r2, r3
   1d76c:	d029      	beq.n	1d7c2 <CC_LibInit+0x8a>
   1d76e:	f000 f83d 	bl	1d7ec <CC_HalTerminate>
   1d772:	2407      	movs	r4, #7
   1d774:	f000 f88a 	bl	1d88c <CC_PalTerminate>
   1d778:	e7e6      	b.n	1d748 <CC_LibInit+0x10>
   1d77a:	f000 f837 	bl	1d7ec <CC_HalTerminate>
   1d77e:	f000 f885 	bl	1d88c <CC_PalTerminate>
   1d782:	2406      	movs	r4, #6
   1d784:	4620      	mov	r0, r4
   1d786:	b002      	add	sp, #8
   1d788:	bd10      	pop	{r4, pc}
   1d78a:	2404      	movs	r4, #4
   1d78c:	4620      	mov	r0, r4
   1d78e:	b002      	add	sp, #8
   1d790:	bd10      	pop	{r4, pc}
   1d792:	f000 f82b 	bl	1d7ec <CC_HalTerminate>
   1d796:	f000 f879 	bl	1d88c <CC_PalTerminate>
   1d79a:	f7ff ff7f 	bl	1d69c <RndStartupTest.constprop.0>
   1d79e:	4604      	mov	r4, r0
   1d7a0:	b958      	cbnz	r0, 1d7ba <CC_LibInit+0x82>
   1d7a2:	4602      	mov	r2, r0
   1d7a4:	4601      	mov	r1, r0
   1d7a6:	f7ff fd5d 	bl	1d264 <nrf_cc3xx_platform_ctr_drbg_init>
   1d7aa:	b930      	cbnz	r0, 1d7ba <CC_LibInit+0x82>
   1d7ac:	490c      	ldr	r1, [pc, #48]	; (1d7e0 <CC_LibInit+0xa8>)
   1d7ae:	ab01      	add	r3, sp, #4
   1d7b0:	2268      	movs	r2, #104	; 0x68
   1d7b2:	f7ff fd8b 	bl	1d2cc <nrf_cc3xx_platform_ctr_drbg_get>
   1d7b6:	2800      	cmp	r0, #0
   1d7b8:	d0c6      	beq.n	1d748 <CC_LibInit+0x10>
   1d7ba:	2405      	movs	r4, #5
   1d7bc:	4620      	mov	r0, r4
   1d7be:	b002      	add	sp, #8
   1d7c0:	bd10      	pop	{r4, pc}
   1d7c2:	2001      	movs	r0, #1
   1d7c4:	f000 f8ec 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1d7c8:	2800      	cmp	r0, #0
   1d7ca:	d1e2      	bne.n	1d792 <CC_LibInit+0x5a>
   1d7cc:	4b05      	ldr	r3, [pc, #20]	; (1d7e4 <CC_LibInit+0xac>)
   1d7ce:	6018      	str	r0, [r3, #0]
   1d7d0:	e7e3      	b.n	1d79a <CC_LibInit+0x62>
   1d7d2:	bf00      	nop
   1d7d4:	5002b928 	.word	0x5002b928
   1d7d8:	5002ba24 	.word	0x5002ba24
   1d7dc:	20e00000 	.word	0x20e00000
   1d7e0:	20037830 	.word	0x20037830
   1d7e4:	5002ba0c 	.word	0x5002ba0c

0001d7e8 <CC_HalInit>:
   1d7e8:	2000      	movs	r0, #0
   1d7ea:	4770      	bx	lr

0001d7ec <CC_HalTerminate>:
   1d7ec:	2000      	movs	r0, #0
   1d7ee:	4770      	bx	lr

0001d7f0 <CC_HalClearInterruptBit>:
   1d7f0:	0543      	lsls	r3, r0, #21
   1d7f2:	d503      	bpl.n	1d7fc <CC_HalClearInterruptBit+0xc>
   1d7f4:	4b03      	ldr	r3, [pc, #12]	; (1d804 <CC_HalClearInterruptBit+0x14>)
   1d7f6:	f04f 32ff 	mov.w	r2, #4294967295
   1d7fa:	601a      	str	r2, [r3, #0]
   1d7fc:	4b02      	ldr	r3, [pc, #8]	; (1d808 <CC_HalClearInterruptBit+0x18>)
   1d7fe:	6018      	str	r0, [r3, #0]
   1d800:	4770      	bx	lr
   1d802:	bf00      	nop
   1d804:	5002b108 	.word	0x5002b108
   1d808:	5002ba08 	.word	0x5002ba08

0001d80c <CC_HalMaskInterrupt>:
   1d80c:	4b01      	ldr	r3, [pc, #4]	; (1d814 <CC_HalMaskInterrupt+0x8>)
   1d80e:	6018      	str	r0, [r3, #0]
   1d810:	4770      	bx	lr
   1d812:	bf00      	nop
   1d814:	5002ba04 	.word	0x5002ba04

0001d818 <CC_HalWaitInterrupt>:
   1d818:	b108      	cbz	r0, 1d81e <CC_HalWaitInterrupt+0x6>
   1d81a:	f000 b86f 	b.w	1d8fc <CC_PalWaitInterrupt>
   1d81e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d822:	4770      	bx	lr

0001d824 <CC_HalWaitInterruptRND>:
   1d824:	b108      	cbz	r0, 1d82a <CC_HalWaitInterruptRND+0x6>
   1d826:	f000 b84f 	b.w	1d8c8 <CC_PalWaitInterruptRND>
   1d82a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1d82e:	4770      	bx	lr

0001d830 <CC_PalInit>:
   1d830:	b510      	push	{r4, lr}
   1d832:	4811      	ldr	r0, [pc, #68]	; (1d878 <CC_PalInit+0x48>)
   1d834:	f000 f870 	bl	1d918 <CC_PalMutexCreate>
   1d838:	b100      	cbz	r0, 1d83c <CC_PalInit+0xc>
   1d83a:	bd10      	pop	{r4, pc}
   1d83c:	480f      	ldr	r0, [pc, #60]	; (1d87c <CC_PalInit+0x4c>)
   1d83e:	f000 f86b 	bl	1d918 <CC_PalMutexCreate>
   1d842:	2800      	cmp	r0, #0
   1d844:	d1f9      	bne.n	1d83a <CC_PalInit+0xa>
   1d846:	4c0e      	ldr	r4, [pc, #56]	; (1d880 <CC_PalInit+0x50>)
   1d848:	4620      	mov	r0, r4
   1d84a:	f000 f865 	bl	1d918 <CC_PalMutexCreate>
   1d84e:	2800      	cmp	r0, #0
   1d850:	d1f3      	bne.n	1d83a <CC_PalInit+0xa>
   1d852:	4b0c      	ldr	r3, [pc, #48]	; (1d884 <CC_PalInit+0x54>)
   1d854:	480c      	ldr	r0, [pc, #48]	; (1d888 <CC_PalInit+0x58>)
   1d856:	601c      	str	r4, [r3, #0]
   1d858:	f000 f85e 	bl	1d918 <CC_PalMutexCreate>
   1d85c:	4601      	mov	r1, r0
   1d85e:	2800      	cmp	r0, #0
   1d860:	d1eb      	bne.n	1d83a <CC_PalInit+0xa>
   1d862:	f000 f82d 	bl	1d8c0 <CC_PalDmaInit>
   1d866:	4604      	mov	r4, r0
   1d868:	b108      	cbz	r0, 1d86e <CC_PalInit+0x3e>
   1d86a:	4620      	mov	r0, r4
   1d86c:	bd10      	pop	{r4, pc}
   1d86e:	f000 f879 	bl	1d964 <CC_PalPowerSaveModeInit>
   1d872:	4620      	mov	r0, r4
   1d874:	e7fa      	b.n	1d86c <CC_PalInit+0x3c>
   1d876:	bf00      	nop
   1d878:	20033ae4 	.word	0x20033ae4
   1d87c:	20033ad8 	.word	0x20033ad8
   1d880:	20033ae0 	.word	0x20033ae0
   1d884:	20033ae8 	.word	0x20033ae8
   1d888:	20033adc 	.word	0x20033adc

0001d88c <CC_PalTerminate>:
   1d88c:	b508      	push	{r3, lr}
   1d88e:	4808      	ldr	r0, [pc, #32]	; (1d8b0 <CC_PalTerminate+0x24>)
   1d890:	f000 f84c 	bl	1d92c <CC_PalMutexDestroy>
   1d894:	4807      	ldr	r0, [pc, #28]	; (1d8b4 <CC_PalTerminate+0x28>)
   1d896:	f000 f849 	bl	1d92c <CC_PalMutexDestroy>
   1d89a:	4807      	ldr	r0, [pc, #28]	; (1d8b8 <CC_PalTerminate+0x2c>)
   1d89c:	f000 f846 	bl	1d92c <CC_PalMutexDestroy>
   1d8a0:	4806      	ldr	r0, [pc, #24]	; (1d8bc <CC_PalTerminate+0x30>)
   1d8a2:	f000 f843 	bl	1d92c <CC_PalMutexDestroy>
   1d8a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1d8aa:	f000 b80b 	b.w	1d8c4 <CC_PalDmaTerminate>
   1d8ae:	bf00      	nop
   1d8b0:	20033ae4 	.word	0x20033ae4
   1d8b4:	20033ad8 	.word	0x20033ad8
   1d8b8:	20033ae0 	.word	0x20033ae0
   1d8bc:	20033adc 	.word	0x20033adc

0001d8c0 <CC_PalDmaInit>:
   1d8c0:	2000      	movs	r0, #0
   1d8c2:	4770      	bx	lr

0001d8c4 <CC_PalDmaTerminate>:
   1d8c4:	4770      	bx	lr
   1d8c6:	bf00      	nop

0001d8c8 <CC_PalWaitInterruptRND>:
   1d8c8:	b410      	push	{r4}
   1d8ca:	4c08      	ldr	r4, [pc, #32]	; (1d8ec <CC_PalWaitInterruptRND+0x24>)
   1d8cc:	4602      	mov	r2, r0
   1d8ce:	6823      	ldr	r3, [r4, #0]
   1d8d0:	4213      	tst	r3, r2
   1d8d2:	d0fc      	beq.n	1d8ce <CC_PalWaitInterruptRND+0x6>
   1d8d4:	b121      	cbz	r1, 1d8e0 <CC_PalWaitInterruptRND+0x18>
   1d8d6:	4b06      	ldr	r3, [pc, #24]	; (1d8f0 <CC_PalWaitInterruptRND+0x28>)
   1d8d8:	4806      	ldr	r0, [pc, #24]	; (1d8f4 <CC_PalWaitInterruptRND+0x2c>)
   1d8da:	681b      	ldr	r3, [r3, #0]
   1d8dc:	600b      	str	r3, [r1, #0]
   1d8de:	6003      	str	r3, [r0, #0]
   1d8e0:	4b05      	ldr	r3, [pc, #20]	; (1d8f8 <CC_PalWaitInterruptRND+0x30>)
   1d8e2:	601a      	str	r2, [r3, #0]
   1d8e4:	2000      	movs	r0, #0
   1d8e6:	bc10      	pop	{r4}
   1d8e8:	4770      	bx	lr
   1d8ea:	bf00      	nop
   1d8ec:	5002ba00 	.word	0x5002ba00
   1d8f0:	5002b104 	.word	0x5002b104
   1d8f4:	5002b108 	.word	0x5002b108
   1d8f8:	5002ba08 	.word	0x5002ba08

0001d8fc <CC_PalWaitInterrupt>:
   1d8fc:	4904      	ldr	r1, [pc, #16]	; (1d910 <CC_PalWaitInterrupt+0x14>)
   1d8fe:	4602      	mov	r2, r0
   1d900:	680b      	ldr	r3, [r1, #0]
   1d902:	421a      	tst	r2, r3
   1d904:	d0fc      	beq.n	1d900 <CC_PalWaitInterrupt+0x4>
   1d906:	4b03      	ldr	r3, [pc, #12]	; (1d914 <CC_PalWaitInterrupt+0x18>)
   1d908:	2000      	movs	r0, #0
   1d90a:	601a      	str	r2, [r3, #0]
   1d90c:	4770      	bx	lr
   1d90e:	bf00      	nop
   1d910:	5002ba00 	.word	0x5002ba00
   1d914:	5002ba08 	.word	0x5002ba08

0001d918 <CC_PalMutexCreate>:
   1d918:	b508      	push	{r3, lr}
   1d91a:	4b03      	ldr	r3, [pc, #12]	; (1d928 <CC_PalMutexCreate+0x10>)
   1d91c:	6802      	ldr	r2, [r0, #0]
   1d91e:	681b      	ldr	r3, [r3, #0]
   1d920:	6810      	ldr	r0, [r2, #0]
   1d922:	4798      	blx	r3
   1d924:	2000      	movs	r0, #0
   1d926:	bd08      	pop	{r3, pc}
   1d928:	20033a98 	.word	0x20033a98

0001d92c <CC_PalMutexDestroy>:
   1d92c:	b508      	push	{r3, lr}
   1d92e:	4b03      	ldr	r3, [pc, #12]	; (1d93c <CC_PalMutexDestroy+0x10>)
   1d930:	6802      	ldr	r2, [r0, #0]
   1d932:	685b      	ldr	r3, [r3, #4]
   1d934:	6810      	ldr	r0, [r2, #0]
   1d936:	4798      	blx	r3
   1d938:	2000      	movs	r0, #0
   1d93a:	bd08      	pop	{r3, pc}
   1d93c:	20033a98 	.word	0x20033a98

0001d940 <CC_PalMutexLock>:
   1d940:	4b02      	ldr	r3, [pc, #8]	; (1d94c <CC_PalMutexLock+0xc>)
   1d942:	6802      	ldr	r2, [r0, #0]
   1d944:	689b      	ldr	r3, [r3, #8]
   1d946:	6810      	ldr	r0, [r2, #0]
   1d948:	4718      	bx	r3
   1d94a:	bf00      	nop
   1d94c:	20033a98 	.word	0x20033a98

0001d950 <CC_PalMutexUnlock>:
   1d950:	b508      	push	{r3, lr}
   1d952:	4b03      	ldr	r3, [pc, #12]	; (1d960 <CC_PalMutexUnlock+0x10>)
   1d954:	6802      	ldr	r2, [r0, #0]
   1d956:	68db      	ldr	r3, [r3, #12]
   1d958:	6810      	ldr	r0, [r2, #0]
   1d95a:	4798      	blx	r3
   1d95c:	2000      	movs	r0, #0
   1d95e:	bd08      	pop	{r3, pc}
   1d960:	20033a98 	.word	0x20033a98

0001d964 <CC_PalPowerSaveModeInit>:
   1d964:	b570      	push	{r4, r5, r6, lr}
   1d966:	4c09      	ldr	r4, [pc, #36]	; (1d98c <CC_PalPowerSaveModeInit+0x28>)
   1d968:	4d09      	ldr	r5, [pc, #36]	; (1d990 <CC_PalPowerSaveModeInit+0x2c>)
   1d96a:	6920      	ldr	r0, [r4, #16]
   1d96c:	68ab      	ldr	r3, [r5, #8]
   1d96e:	4798      	blx	r3
   1d970:	b118      	cbz	r0, 1d97a <CC_PalPowerSaveModeInit+0x16>
   1d972:	4b08      	ldr	r3, [pc, #32]	; (1d994 <CC_PalPowerSaveModeInit+0x30>)
   1d974:	4808      	ldr	r0, [pc, #32]	; (1d998 <CC_PalPowerSaveModeInit+0x34>)
   1d976:	685b      	ldr	r3, [r3, #4]
   1d978:	4798      	blx	r3
   1d97a:	4a08      	ldr	r2, [pc, #32]	; (1d99c <CC_PalPowerSaveModeInit+0x38>)
   1d97c:	68eb      	ldr	r3, [r5, #12]
   1d97e:	6920      	ldr	r0, [r4, #16]
   1d980:	2100      	movs	r1, #0
   1d982:	6011      	str	r1, [r2, #0]
   1d984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d988:	4718      	bx	r3
   1d98a:	bf00      	nop
   1d98c:	20033aa8 	.word	0x20033aa8
   1d990:	20033a98 	.word	0x20033a98
   1d994:	20033a88 	.word	0x20033a88
   1d998:	00027a04 	.word	0x00027a04
   1d99c:	20037ab8 	.word	0x20037ab8

0001d9a0 <CC_PalPowerSaveModeSelect>:
   1d9a0:	b570      	push	{r4, r5, r6, lr}
   1d9a2:	4d1a      	ldr	r5, [pc, #104]	; (1da0c <CC_PalPowerSaveModeSelect+0x6c>)
   1d9a4:	4e1a      	ldr	r6, [pc, #104]	; (1da10 <CC_PalPowerSaveModeSelect+0x70>)
   1d9a6:	4604      	mov	r4, r0
   1d9a8:	68b2      	ldr	r2, [r6, #8]
   1d9aa:	6928      	ldr	r0, [r5, #16]
   1d9ac:	4790      	blx	r2
   1d9ae:	b9f0      	cbnz	r0, 1d9ee <CC_PalPowerSaveModeSelect+0x4e>
   1d9b0:	b15c      	cbz	r4, 1d9ca <CC_PalPowerSaveModeSelect+0x2a>
   1d9b2:	4c18      	ldr	r4, [pc, #96]	; (1da14 <CC_PalPowerSaveModeSelect+0x74>)
   1d9b4:	6823      	ldr	r3, [r4, #0]
   1d9b6:	b1ab      	cbz	r3, 1d9e4 <CC_PalPowerSaveModeSelect+0x44>
   1d9b8:	2b01      	cmp	r3, #1
   1d9ba:	d01a      	beq.n	1d9f2 <CC_PalPowerSaveModeSelect+0x52>
   1d9bc:	3b01      	subs	r3, #1
   1d9be:	6023      	str	r3, [r4, #0]
   1d9c0:	6928      	ldr	r0, [r5, #16]
   1d9c2:	68f3      	ldr	r3, [r6, #12]
   1d9c4:	4798      	blx	r3
   1d9c6:	2000      	movs	r0, #0
   1d9c8:	bd70      	pop	{r4, r5, r6, pc}
   1d9ca:	4c12      	ldr	r4, [pc, #72]	; (1da14 <CC_PalPowerSaveModeSelect+0x74>)
   1d9cc:	6821      	ldr	r1, [r4, #0]
   1d9ce:	b939      	cbnz	r1, 1d9e0 <CC_PalPowerSaveModeSelect+0x40>
   1d9d0:	4b11      	ldr	r3, [pc, #68]	; (1da18 <CC_PalPowerSaveModeSelect+0x78>)
   1d9d2:	4a12      	ldr	r2, [pc, #72]	; (1da1c <CC_PalPowerSaveModeSelect+0x7c>)
   1d9d4:	2001      	movs	r0, #1
   1d9d6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1d9da:	6813      	ldr	r3, [r2, #0]
   1d9dc:	2b00      	cmp	r3, #0
   1d9de:	d1fc      	bne.n	1d9da <CC_PalPowerSaveModeSelect+0x3a>
   1d9e0:	3101      	adds	r1, #1
   1d9e2:	6021      	str	r1, [r4, #0]
   1d9e4:	68f3      	ldr	r3, [r6, #12]
   1d9e6:	6928      	ldr	r0, [r5, #16]
   1d9e8:	4798      	blx	r3
   1d9ea:	2000      	movs	r0, #0
   1d9ec:	bd70      	pop	{r4, r5, r6, pc}
   1d9ee:	480c      	ldr	r0, [pc, #48]	; (1da20 <CC_PalPowerSaveModeSelect+0x80>)
   1d9f0:	bd70      	pop	{r4, r5, r6, pc}
   1d9f2:	4a0a      	ldr	r2, [pc, #40]	; (1da1c <CC_PalPowerSaveModeSelect+0x7c>)
   1d9f4:	6813      	ldr	r3, [r2, #0]
   1d9f6:	2b00      	cmp	r3, #0
   1d9f8:	d1fc      	bne.n	1d9f4 <CC_PalPowerSaveModeSelect+0x54>
   1d9fa:	4a07      	ldr	r2, [pc, #28]	; (1da18 <CC_PalPowerSaveModeSelect+0x78>)
   1d9fc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1da00:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1da04:	f7ff ff02 	bl	1d80c <CC_HalMaskInterrupt>
   1da08:	6823      	ldr	r3, [r4, #0]
   1da0a:	e7d7      	b.n	1d9bc <CC_PalPowerSaveModeSelect+0x1c>
   1da0c:	20033aa8 	.word	0x20033aa8
   1da10:	20033a98 	.word	0x20033a98
   1da14:	20037ab8 	.word	0x20037ab8
   1da18:	5002a000 	.word	0x5002a000
   1da1c:	5002b910 	.word	0x5002b910
   1da20:	ffff8fe9 	.word	0xffff8fe9

0001da24 <mutex_init>:
   1da24:	4b01      	ldr	r3, [pc, #4]	; (1da2c <mutex_init+0x8>)
   1da26:	681b      	ldr	r3, [r3, #0]
   1da28:	4718      	bx	r3
   1da2a:	bf00      	nop
   1da2c:	20033a98 	.word	0x20033a98

0001da30 <mutex_lock>:
   1da30:	4b01      	ldr	r3, [pc, #4]	; (1da38 <mutex_lock+0x8>)
   1da32:	689b      	ldr	r3, [r3, #8]
   1da34:	4718      	bx	r3
   1da36:	bf00      	nop
   1da38:	20033a98 	.word	0x20033a98

0001da3c <mutex_unlock>:
   1da3c:	4b01      	ldr	r3, [pc, #4]	; (1da44 <mutex_unlock+0x8>)
   1da3e:	68db      	ldr	r3, [r3, #12]
   1da40:	4718      	bx	r3
   1da42:	bf00      	nop
   1da44:	20033a98 	.word	0x20033a98

0001da48 <startTrngHW>:
   1da48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1da4c:	2800      	cmp	r0, #0
   1da4e:	d077      	beq.n	1db40 <startTrngHW+0xf8>
   1da50:	460c      	mov	r4, r1
   1da52:	2900      	cmp	r1, #0
   1da54:	d074      	beq.n	1db40 <startTrngHW+0xf8>
   1da56:	461d      	mov	r5, r3
   1da58:	2b00      	cmp	r3, #0
   1da5a:	d071      	beq.n	1db40 <startTrngHW+0xf8>
   1da5c:	4606      	mov	r6, r0
   1da5e:	b11a      	cbz	r2, 1da68 <startTrngHW+0x20>
   1da60:	2201      	movs	r2, #1
   1da62:	2300      	movs	r3, #0
   1da64:	602a      	str	r2, [r5, #0]
   1da66:	6003      	str	r3, [r0, #0]
   1da68:	682b      	ldr	r3, [r5, #0]
   1da6a:	2b00      	cmp	r3, #0
   1da6c:	d064      	beq.n	1db38 <startTrngHW+0xf0>
   1da6e:	4629      	mov	r1, r5
   1da70:	4620      	mov	r0, r4
   1da72:	f001 f8cd 	bl	1ec10 <LLF_RND_GetFastestRosc>
   1da76:	4607      	mov	r7, r0
   1da78:	2800      	cmp	r0, #0
   1da7a:	d15e      	bne.n	1db3a <startTrngHW+0xf2>
   1da7c:	6828      	ldr	r0, [r5, #0]
   1da7e:	4621      	mov	r1, r4
   1da80:	f001 f8a8 	bl	1ebd4 <LLF_RND_GetRoscSampleCnt>
   1da84:	4607      	mov	r7, r0
   1da86:	2800      	cmp	r0, #0
   1da88:	d157      	bne.n	1db3a <startTrngHW+0xf2>
   1da8a:	682b      	ldr	r3, [r5, #0]
   1da8c:	2b08      	cmp	r3, #8
   1da8e:	d066      	beq.n	1db5e <startTrngHW+0x116>
   1da90:	2b04      	cmp	r3, #4
   1da92:	d067      	beq.n	1db64 <startTrngHW+0x11c>
   1da94:	f1a3 0802 	sub.w	r8, r3, #2
   1da98:	fab8 f888 	clz	r8, r8
   1da9c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1daa0:	4b32      	ldr	r3, [pc, #200]	; (1db6c <startTrngHW+0x124>)
   1daa2:	4933      	ldr	r1, [pc, #204]	; (1db70 <startTrngHW+0x128>)
   1daa4:	4a33      	ldr	r2, [pc, #204]	; (1db74 <startTrngHW+0x12c>)
   1daa6:	2001      	movs	r0, #1
   1daa8:	6018      	str	r0, [r3, #0]
   1daaa:	469c      	mov	ip, r3
   1daac:	6008      	str	r0, [r1, #0]
   1daae:	f8cc 0000 	str.w	r0, [ip]
   1dab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dab4:	6013      	str	r3, [r2, #0]
   1dab6:	6811      	ldr	r1, [r2, #0]
   1dab8:	428b      	cmp	r3, r1
   1daba:	d1f8      	bne.n	1daae <startTrngHW+0x66>
   1dabc:	4b2e      	ldr	r3, [pc, #184]	; (1db78 <startTrngHW+0x130>)
   1dabe:	f04f 0900 	mov.w	r9, #0
   1dac2:	f8c3 9000 	str.w	r9, [r3]
   1dac6:	f04f 30ff 	mov.w	r0, #4294967295
   1daca:	f7ff fe91 	bl	1d7f0 <CC_HalClearInterruptBit>
   1dace:	4b2b      	ldr	r3, [pc, #172]	; (1db7c <startTrngHW+0x134>)
   1dad0:	f06f 021b 	mvn.w	r2, #27
   1dad4:	601a      	str	r2, [r3, #0]
   1dad6:	4648      	mov	r0, r9
   1dad8:	f7ff fe98 	bl	1d80c <CC_HalMaskInterrupt>
   1dadc:	4a28      	ldr	r2, [pc, #160]	; (1db80 <startTrngHW+0x138>)
   1dade:	4b29      	ldr	r3, [pc, #164]	; (1db84 <startTrngHW+0x13c>)
   1dae0:	f8c2 8000 	str.w	r8, [r2]
   1dae4:	6818      	ldr	r0, [r3, #0]
   1dae6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1daea:	f7ff fe8f 	bl	1d80c <CC_HalMaskInterrupt>
   1daee:	4b26      	ldr	r3, [pc, #152]	; (1db88 <startTrngHW+0x140>)
   1daf0:	220a      	movs	r2, #10
   1daf2:	601a      	str	r2, [r3, #0]
   1daf4:	9908      	ldr	r1, [sp, #32]
   1daf6:	6923      	ldr	r3, [r4, #16]
   1daf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1dafa:	2901      	cmp	r1, #1
   1dafc:	d024      	beq.n	1db48 <startTrngHW+0x100>
   1dafe:	4923      	ldr	r1, [pc, #140]	; (1db8c <startTrngHW+0x144>)
   1db00:	fba1 1303 	umull	r1, r3, r1, r3
   1db04:	091b      	lsrs	r3, r3, #4
   1db06:	fb03 f302 	mul.w	r3, r3, r2
   1db0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1db0e:	4920      	ldr	r1, [pc, #128]	; (1db90 <startTrngHW+0x148>)
   1db10:	4a19      	ldr	r2, [pc, #100]	; (1db78 <startTrngHW+0x130>)
   1db12:	03db      	lsls	r3, r3, #15
   1db14:	099b      	lsrs	r3, r3, #6
   1db16:	600b      	str	r3, [r1, #0]
   1db18:	2301      	movs	r3, #1
   1db1a:	6013      	str	r3, [r2, #0]
   1db1c:	6833      	ldr	r3, [r6, #0]
   1db1e:	682a      	ldr	r2, [r5, #0]
   1db20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1db24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1db28:	6033      	str	r3, [r6, #0]
   1db2a:	682a      	ldr	r2, [r5, #0]
   1db2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1db30:	6033      	str	r3, [r6, #0]
   1db32:	4638      	mov	r0, r7
   1db34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1db38:	4f16      	ldr	r7, [pc, #88]	; (1db94 <startTrngHW+0x14c>)
   1db3a:	4638      	mov	r0, r7
   1db3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1db40:	4f15      	ldr	r7, [pc, #84]	; (1db98 <startTrngHW+0x150>)
   1db42:	4638      	mov	r0, r7
   1db44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1db48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1db4c:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1db50:	3101      	adds	r1, #1
   1db52:	d002      	beq.n	1db5a <startTrngHW+0x112>
   1db54:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1db58:	e7d1      	b.n	1dafe <startTrngHW+0xb6>
   1db5a:	2316      	movs	r3, #22
   1db5c:	e7d3      	b.n	1db06 <startTrngHW+0xbe>
   1db5e:	f04f 0803 	mov.w	r8, #3
   1db62:	e79d      	b.n	1daa0 <startTrngHW+0x58>
   1db64:	f04f 0802 	mov.w	r8, #2
   1db68:	e79a      	b.n	1daa0 <startTrngHW+0x58>
   1db6a:	bf00      	nop
   1db6c:	5002b1c4 	.word	0x5002b1c4
   1db70:	5002b140 	.word	0x5002b140
   1db74:	5002b130 	.word	0x5002b130
   1db78:	5002b12c 	.word	0x5002b12c
   1db7c:	5002b100 	.word	0x5002b100
   1db80:	5002b10c 	.word	0x5002b10c
   1db84:	5002ba04 	.word	0x5002ba04
   1db88:	5002b138 	.word	0x5002b138
   1db8c:	aaaaaaab 	.word	0xaaaaaaab
   1db90:	5002b1d8 	.word	0x5002b1d8
   1db94:	00f10c31 	.word	0x00f10c31
   1db98:	00f10c35 	.word	0x00f10c35

0001db9c <LLF_RND_RepetitionCounterTest.part.0>:
   1db9c:	b4f0      	push	{r4, r5, r6, r7}
   1db9e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1dba2:	2400      	movs	r4, #0
   1dba4:	f10c 3cff 	add.w	ip, ip, #4294967295
   1dba8:	4626      	mov	r6, r4
   1dbaa:	4627      	mov	r7, r4
   1dbac:	e006      	b.n	1dbbc <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1dbae:	429f      	cmp	r7, r3
   1dbb0:	d016      	beq.n	1dbe0 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1dbb2:	2601      	movs	r6, #1
   1dbb4:	4565      	cmp	r5, ip
   1dbb6:	d819      	bhi.n	1dbec <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1dbb8:	462c      	mov	r4, r5
   1dbba:	461f      	mov	r7, r3
   1dbbc:	0963      	lsrs	r3, r4, #5
   1dbbe:	f004 011f 	and.w	r1, r4, #31
   1dbc2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1dbc6:	291f      	cmp	r1, #31
   1dbc8:	fa23 f301 	lsr.w	r3, r3, r1
   1dbcc:	f104 0501 	add.w	r5, r4, #1
   1dbd0:	bf18      	it	ne
   1dbd2:	f003 0301 	andne.w	r3, r3, #1
   1dbd6:	2c00      	cmp	r4, #0
   1dbd8:	d1e9      	bne.n	1dbae <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1dbda:	2601      	movs	r6, #1
   1dbdc:	4635      	mov	r5, r6
   1dbde:	e7eb      	b.n	1dbb8 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1dbe0:	3601      	adds	r6, #1
   1dbe2:	4296      	cmp	r6, r2
   1dbe4:	d1e6      	bne.n	1dbb4 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1dbe6:	4803      	ldr	r0, [pc, #12]	; (1dbf4 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1dbe8:	bcf0      	pop	{r4, r5, r6, r7}
   1dbea:	4770      	bx	lr
   1dbec:	2000      	movs	r0, #0
   1dbee:	bcf0      	pop	{r4, r5, r6, r7}
   1dbf0:	4770      	bx	lr
   1dbf2:	bf00      	nop
   1dbf4:	00f10c36 	.word	0x00f10c36

0001dbf8 <LLF_RND_AdaptiveProportionTest>:
   1dbf8:	2800      	cmp	r0, #0
   1dbfa:	d061      	beq.n	1dcc0 <LLF_RND_AdaptiveProportionTest+0xc8>
   1dbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc00:	1e4c      	subs	r4, r1, #1
   1dc02:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1dc06:	d227      	bcs.n	1dc58 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc08:	b333      	cbz	r3, 1dc58 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc0a:	b32a      	cbz	r2, 1dc58 <LLF_RND_AdaptiveProportionTest+0x60>
   1dc0c:	00cd      	lsls	r5, r1, #3
   1dc0e:	2b01      	cmp	r3, #1
   1dc10:	f105 3eff 	add.w	lr, r5, #4294967295
   1dc14:	d030      	beq.n	1dc78 <LLF_RND_AdaptiveProportionTest+0x80>
   1dc16:	2100      	movs	r1, #0
   1dc18:	468c      	mov	ip, r1
   1dc1a:	460f      	mov	r7, r1
   1dc1c:	460e      	mov	r6, r1
   1dc1e:	f103 38ff 	add.w	r8, r3, #4294967295
   1dc22:	094c      	lsrs	r4, r1, #5
   1dc24:	f001 051f 	and.w	r5, r1, #31
   1dc28:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1dc2c:	2d1f      	cmp	r5, #31
   1dc2e:	fa24 f405 	lsr.w	r4, r4, r5
   1dc32:	bf18      	it	ne
   1dc34:	f004 0401 	andne.w	r4, r4, #1
   1dc38:	b921      	cbnz	r1, 1dc44 <LLF_RND_AdaptiveProportionTest+0x4c>
   1dc3a:	2601      	movs	r6, #1
   1dc3c:	46b4      	mov	ip, r6
   1dc3e:	4631      	mov	r1, r6
   1dc40:	4627      	mov	r7, r4
   1dc42:	e7ee      	b.n	1dc22 <LLF_RND_AdaptiveProportionTest+0x2a>
   1dc44:	42b3      	cmp	r3, r6
   1dc46:	d013      	beq.n	1dc70 <LLF_RND_AdaptiveProportionTest+0x78>
   1dc48:	42a7      	cmp	r7, r4
   1dc4a:	d101      	bne.n	1dc50 <LLF_RND_AdaptiveProportionTest+0x58>
   1dc4c:	f10c 0c01 	add.w	ip, ip, #1
   1dc50:	4546      	cmp	r6, r8
   1dc52:	d104      	bne.n	1dc5e <LLF_RND_AdaptiveProportionTest+0x66>
   1dc54:	4562      	cmp	r2, ip
   1dc56:	d202      	bcs.n	1dc5e <LLF_RND_AdaptiveProportionTest+0x66>
   1dc58:	481a      	ldr	r0, [pc, #104]	; (1dcc4 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1dc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc5e:	463c      	mov	r4, r7
   1dc60:	3101      	adds	r1, #1
   1dc62:	458e      	cmp	lr, r1
   1dc64:	f106 0601 	add.w	r6, r6, #1
   1dc68:	d2ea      	bcs.n	1dc40 <LLF_RND_AdaptiveProportionTest+0x48>
   1dc6a:	2000      	movs	r0, #0
   1dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc70:	2600      	movs	r6, #0
   1dc72:	f04f 0c01 	mov.w	ip, #1
   1dc76:	e7f3      	b.n	1dc60 <LLF_RND_AdaptiveProportionTest+0x68>
   1dc78:	2600      	movs	r6, #0
   1dc7a:	46b4      	mov	ip, r6
   1dc7c:	4637      	mov	r7, r6
   1dc7e:	4634      	mov	r4, r6
   1dc80:	0961      	lsrs	r1, r4, #5
   1dc82:	f004 031f 	and.w	r3, r4, #31
   1dc86:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1dc8a:	2b1f      	cmp	r3, #31
   1dc8c:	fa21 f103 	lsr.w	r1, r1, r3
   1dc90:	bf18      	it	ne
   1dc92:	f001 0101 	andne.w	r1, r1, #1
   1dc96:	b13c      	cbz	r4, 1dca8 <LLF_RND_AdaptiveProportionTest+0xb0>
   1dc98:	b95f      	cbnz	r7, 1dcb2 <LLF_RND_AdaptiveProportionTest+0xba>
   1dc9a:	458c      	cmp	ip, r1
   1dc9c:	d001      	beq.n	1dca2 <LLF_RND_AdaptiveProportionTest+0xaa>
   1dc9e:	4661      	mov	r1, ip
   1dca0:	e008      	b.n	1dcb4 <LLF_RND_AdaptiveProportionTest+0xbc>
   1dca2:	3601      	adds	r6, #1
   1dca4:	4661      	mov	r1, ip
   1dca6:	e005      	b.n	1dcb4 <LLF_RND_AdaptiveProportionTest+0xbc>
   1dca8:	2601      	movs	r6, #1
   1dcaa:	4634      	mov	r4, r6
   1dcac:	468c      	mov	ip, r1
   1dcae:	2701      	movs	r7, #1
   1dcb0:	e7e6      	b.n	1dc80 <LLF_RND_AdaptiveProportionTest+0x88>
   1dcb2:	463e      	mov	r6, r7
   1dcb4:	42b2      	cmp	r2, r6
   1dcb6:	d3cf      	bcc.n	1dc58 <LLF_RND_AdaptiveProportionTest+0x60>
   1dcb8:	3401      	adds	r4, #1
   1dcba:	42ac      	cmp	r4, r5
   1dcbc:	d1f6      	bne.n	1dcac <LLF_RND_AdaptiveProportionTest+0xb4>
   1dcbe:	e7d4      	b.n	1dc6a <LLF_RND_AdaptiveProportionTest+0x72>
   1dcc0:	4800      	ldr	r0, [pc, #0]	; (1dcc4 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1dcc2:	4770      	bx	lr
   1dcc4:	00f10c37 	.word	0x00f10c37

0001dcc8 <getTrngSource>:
   1dcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dccc:	b08d      	sub	sp, #52	; 0x34
   1dcce:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1dcd2:	4607      	mov	r7, r0
   1dcd4:	460c      	mov	r4, r1
   1dcd6:	2d00      	cmp	r5, #0
   1dcd8:	d14c      	bne.n	1dd74 <getTrngSource+0xac>
   1dcda:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1dcde:	601e      	str	r6, [r3, #0]
   1dce0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1dce2:	2100      	movs	r1, #0
   1dce4:	6019      	str	r1, [r3, #0]
   1dce6:	2a00      	cmp	r2, #0
   1dce8:	f000 811f 	beq.w	1df2a <getTrngSource+0x262>
   1dcec:	4a9b      	ldr	r2, [pc, #620]	; (1df5c <getTrngSource+0x294>)
   1dcee:	4b9c      	ldr	r3, [pc, #624]	; (1df60 <getTrngSource+0x298>)
   1dcf0:	6811      	ldr	r1, [r2, #0]
   1dcf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1dcf4:	681b      	ldr	r3, [r3, #0]
   1dcf6:	429a      	cmp	r2, r3
   1dcf8:	d147      	bne.n	1dd8a <getTrngSource+0xc2>
   1dcfa:	290a      	cmp	r1, #10
   1dcfc:	d145      	bne.n	1dd8a <getTrngSource+0xc2>
   1dcfe:	78fb      	ldrb	r3, [r7, #3]
   1dd00:	9304      	str	r3, [sp, #16]
   1dd02:	4b98      	ldr	r3, [pc, #608]	; (1df64 <getTrngSource+0x29c>)
   1dd04:	fba3 230a 	umull	r2, r3, r3, sl
   1dd08:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1dd0c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1dd10:	f106 0208 	add.w	r2, r6, #8
   1dd14:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1dd18:	2304      	movs	r3, #4
   1dd1a:	9203      	str	r2, [sp, #12]
   1dd1c:	9302      	str	r3, [sp, #8]
   1dd1e:	46b8      	mov	r8, r7
   1dd20:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1dd22:	f8c3 a000 	str.w	sl, [r3]
   1dd26:	f1ba 0f00 	cmp.w	sl, #0
   1dd2a:	f000 80c4 	beq.w	1deb6 <getTrngSource+0x1ee>
   1dd2e:	9e03      	ldr	r6, [sp, #12]
   1dd30:	4655      	mov	r5, sl
   1dd32:	f04f 0900 	mov.w	r9, #0
   1dd36:	f000 ff7b 	bl	1ec30 <LLF_RND_TurnOffTrng>
   1dd3a:	2300      	movs	r3, #0
   1dd3c:	9305      	str	r3, [sp, #20]
   1dd3e:	f1b8 0f00 	cmp.w	r8, #0
   1dd42:	f000 80e6 	beq.w	1df12 <getTrngSource+0x24a>
   1dd46:	2c00      	cmp	r4, #0
   1dd48:	f000 80e3 	beq.w	1df12 <getTrngSource+0x24a>
   1dd4c:	9b04      	ldr	r3, [sp, #16]
   1dd4e:	2b00      	cmp	r3, #0
   1dd50:	f000 80dd 	beq.w	1df0e <getTrngSource+0x246>
   1dd54:	a904      	add	r1, sp, #16
   1dd56:	4620      	mov	r0, r4
   1dd58:	f000 ff5a 	bl	1ec10 <LLF_RND_GetFastestRosc>
   1dd5c:	b1b8      	cbz	r0, 1dd8e <getTrngSource+0xc6>
   1dd5e:	4b82      	ldr	r3, [pc, #520]	; (1df68 <getTrngSource+0x2a0>)
   1dd60:	4298      	cmp	r0, r3
   1dd62:	f040 80a8 	bne.w	1deb6 <getTrngSource+0x1ee>
   1dd66:	9002      	str	r0, [sp, #8]
   1dd68:	f000 ff62 	bl	1ec30 <LLF_RND_TurnOffTrng>
   1dd6c:	9802      	ldr	r0, [sp, #8]
   1dd6e:	b00d      	add	sp, #52	; 0x34
   1dd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1dd78:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1dd7c:	3001      	adds	r0, #1
   1dd7e:	bf14      	ite	ne
   1dd80:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1dd84:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1dd88:	e7a9      	b.n	1dcde <getTrngSource+0x16>
   1dd8a:	4878      	ldr	r0, [pc, #480]	; (1df6c <getTrngSource+0x2a4>)
   1dd8c:	e7eb      	b.n	1dd66 <getTrngSource+0x9e>
   1dd8e:	9804      	ldr	r0, [sp, #16]
   1dd90:	4621      	mov	r1, r4
   1dd92:	f000 ff1f 	bl	1ebd4 <LLF_RND_GetRoscSampleCnt>
   1dd96:	2800      	cmp	r0, #0
   1dd98:	d1e1      	bne.n	1dd5e <getTrngSource+0x96>
   1dd9a:	9f04      	ldr	r7, [sp, #16]
   1dd9c:	2f08      	cmp	r7, #8
   1dd9e:	f000 80ba 	beq.w	1df16 <getTrngSource+0x24e>
   1dda2:	2f04      	cmp	r7, #4
   1dda4:	f000 80b9 	beq.w	1df1a <getTrngSource+0x252>
   1dda8:	f1a7 0702 	sub.w	r7, r7, #2
   1ddac:	fab7 f787 	clz	r7, r7
   1ddb0:	097f      	lsrs	r7, r7, #5
   1ddb2:	496f      	ldr	r1, [pc, #444]	; (1df70 <getTrngSource+0x2a8>)
   1ddb4:	2301      	movs	r3, #1
   1ddb6:	600b      	str	r3, [r1, #0]
   1ddb8:	f841 3c84 	str.w	r3, [r1, #-132]
   1ddbc:	4619      	mov	r1, r3
   1ddbe:	4b6c      	ldr	r3, [pc, #432]	; (1df70 <getTrngSource+0x2a8>)
   1ddc0:	4867      	ldr	r0, [pc, #412]	; (1df60 <getTrngSource+0x298>)
   1ddc2:	6019      	str	r1, [r3, #0]
   1ddc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ddc6:	6003      	str	r3, [r0, #0]
   1ddc8:	6800      	ldr	r0, [r0, #0]
   1ddca:	4283      	cmp	r3, r0
   1ddcc:	d1f7      	bne.n	1ddbe <getTrngSource+0xf6>
   1ddce:	4a69      	ldr	r2, [pc, #420]	; (1df74 <getTrngSource+0x2ac>)
   1ddd0:	2300      	movs	r3, #0
   1ddd2:	6013      	str	r3, [r2, #0]
   1ddd4:	f04f 30ff 	mov.w	r0, #4294967295
   1ddd8:	f7ff fd0a 	bl	1d7f0 <CC_HalClearInterruptBit>
   1dddc:	2300      	movs	r3, #0
   1ddde:	4618      	mov	r0, r3
   1dde0:	4b65      	ldr	r3, [pc, #404]	; (1df78 <getTrngSource+0x2b0>)
   1dde2:	f06f 011b 	mvn.w	r1, #27
   1dde6:	6019      	str	r1, [r3, #0]
   1dde8:	f7ff fd10 	bl	1d80c <CC_HalMaskInterrupt>
   1ddec:	4963      	ldr	r1, [pc, #396]	; (1df7c <getTrngSource+0x2b4>)
   1ddee:	4b64      	ldr	r3, [pc, #400]	; (1df80 <getTrngSource+0x2b8>)
   1ddf0:	600f      	str	r7, [r1, #0]
   1ddf2:	6818      	ldr	r0, [r3, #0]
   1ddf4:	4f5b      	ldr	r7, [pc, #364]	; (1df64 <getTrngSource+0x29c>)
   1ddf6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1ddfa:	f7ff fd07 	bl	1d80c <CC_HalMaskInterrupt>
   1ddfe:	4b57      	ldr	r3, [pc, #348]	; (1df5c <getTrngSource+0x294>)
   1de00:	4860      	ldr	r0, [pc, #384]	; (1df84 <getTrngSource+0x2bc>)
   1de02:	210a      	movs	r1, #10
   1de04:	6019      	str	r1, [r3, #0]
   1de06:	6921      	ldr	r1, [r4, #16]
   1de08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1de0a:	fba7 c101 	umull	ip, r1, r7, r1
   1de0e:	0909      	lsrs	r1, r1, #4
   1de10:	fb03 f301 	mul.w	r3, r3, r1
   1de14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1de18:	03db      	lsls	r3, r3, #15
   1de1a:	099b      	lsrs	r3, r3, #6
   1de1c:	6003      	str	r3, [r0, #0]
   1de1e:	4b55      	ldr	r3, [pc, #340]	; (1df74 <getTrngSource+0x2ac>)
   1de20:	2201      	movs	r2, #1
   1de22:	601a      	str	r2, [r3, #0]
   1de24:	9904      	ldr	r1, [sp, #16]
   1de26:	f8d8 2000 	ldr.w	r2, [r8]
   1de2a:	020b      	lsls	r3, r1, #8
   1de2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1de30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1de34:	4313      	orrs	r3, r2
   1de36:	f8c8 3000 	str.w	r3, [r8]
   1de3a:	a805      	add	r0, sp, #20
   1de3c:	f000 feba 	bl	1ebb4 <LLF_RND_WaitRngInterrupt>
   1de40:	9b05      	ldr	r3, [sp, #20]
   1de42:	f003 031a 	and.w	r3, r3, #26
   1de46:	4303      	orrs	r3, r0
   1de48:	d135      	bne.n	1deb6 <getTrngSource+0x1ee>
   1de4a:	4a4f      	ldr	r2, [pc, #316]	; (1df88 <getTrngSource+0x2c0>)
   1de4c:	4b4f      	ldr	r3, [pc, #316]	; (1df8c <getTrngSource+0x2c4>)
   1de4e:	6812      	ldr	r2, [r2, #0]
   1de50:	9206      	str	r2, [sp, #24]
   1de52:	681a      	ldr	r2, [r3, #0]
   1de54:	9207      	str	r2, [sp, #28]
   1de56:	685a      	ldr	r2, [r3, #4]
   1de58:	9208      	str	r2, [sp, #32]
   1de5a:	689a      	ldr	r2, [r3, #8]
   1de5c:	9209      	str	r2, [sp, #36]	; 0x24
   1de5e:	68da      	ldr	r2, [r3, #12]
   1de60:	920a      	str	r2, [sp, #40]	; 0x28
   1de62:	3310      	adds	r3, #16
   1de64:	fba7 2705 	umull	r2, r7, r7, r5
   1de68:	681b      	ldr	r3, [r3, #0]
   1de6a:	930b      	str	r3, [sp, #44]	; 0x2c
   1de6c:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1de70:	d102      	bne.n	1de78 <getTrngSource+0x1b0>
   1de72:	f1bb 0f00 	cmp.w	fp, #0
   1de76:	d141      	bne.n	1defc <getTrngSource+0x234>
   1de78:	2218      	movs	r2, #24
   1de7a:	4630      	mov	r0, r6
   1de7c:	eb0d 0102 	add.w	r1, sp, r2
   1de80:	f000 fe3c 	bl	1eafc <CC_PalMemCopyPlat>
   1de84:	3d18      	subs	r5, #24
   1de86:	3618      	adds	r6, #24
   1de88:	f109 0901 	add.w	r9, r9, #1
   1de8c:	2d00      	cmp	r5, #0
   1de8e:	f47f af52 	bne.w	1dd36 <getTrngSource+0x6e>
   1de92:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1de96:	d85d      	bhi.n	1df54 <getTrngSource+0x28c>
   1de98:	9d03      	ldr	r5, [sp, #12]
   1de9a:	6962      	ldr	r2, [r4, #20]
   1de9c:	4651      	mov	r1, sl
   1de9e:	4628      	mov	r0, r5
   1dea0:	f7ff fe7c 	bl	1db9c <LLF_RND_RepetitionCounterTest.part.0>
   1dea4:	2800      	cmp	r0, #0
   1dea6:	d04b      	beq.n	1df40 <getTrngSource+0x278>
   1dea8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1deaa:	2300      	movs	r3, #0
   1deac:	6013      	str	r3, [r2, #0]
   1deae:	4b2e      	ldr	r3, [pc, #184]	; (1df68 <getTrngSource+0x2a0>)
   1deb0:	4298      	cmp	r0, r3
   1deb2:	f43f af58 	beq.w	1dd66 <getTrngSource+0x9e>
   1deb6:	9d04      	ldr	r5, [sp, #16]
   1deb8:	2d08      	cmp	r5, #8
   1deba:	d034      	beq.n	1df26 <getTrngSource+0x25e>
   1debc:	2200      	movs	r2, #0
   1debe:	ab04      	add	r3, sp, #16
   1dec0:	006d      	lsls	r5, r5, #1
   1dec2:	9200      	str	r2, [sp, #0]
   1dec4:	4621      	mov	r1, r4
   1dec6:	4640      	mov	r0, r8
   1dec8:	9504      	str	r5, [sp, #16]
   1deca:	f7ff fdbd 	bl	1da48 <startTrngHW>
   1dece:	4b30      	ldr	r3, [pc, #192]	; (1df90 <getTrngSource+0x2c8>)
   1ded0:	4298      	cmp	r0, r3
   1ded2:	d024      	beq.n	1df1e <getTrngSource+0x256>
   1ded4:	2800      	cmp	r0, #0
   1ded6:	f47f af46 	bne.w	1dd66 <getTrngSource+0x9e>
   1deda:	f8d8 2000 	ldr.w	r2, [r8]
   1dede:	0a13      	lsrs	r3, r2, #8
   1dee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1dee4:	4313      	orrs	r3, r2
   1dee6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1deea:	f8c8 3000 	str.w	r3, [r8]
   1deee:	9b02      	ldr	r3, [sp, #8]
   1def0:	3b01      	subs	r3, #1
   1def2:	9302      	str	r3, [sp, #8]
   1def4:	f47f af14 	bne.w	1dd20 <getTrngSource+0x58>
   1def8:	2000      	movs	r0, #0
   1defa:	e734      	b.n	1dd66 <getTrngSource+0x9e>
   1defc:	4630      	mov	r0, r6
   1defe:	465a      	mov	r2, fp
   1df00:	a906      	add	r1, sp, #24
   1df02:	f000 fdfb 	bl	1eafc <CC_PalMemCopyPlat>
   1df06:	eba5 050b 	sub.w	r5, r5, fp
   1df0a:	445e      	add	r6, fp
   1df0c:	e7bc      	b.n	1de88 <getTrngSource+0x1c0>
   1df0e:	4820      	ldr	r0, [pc, #128]	; (1df90 <getTrngSource+0x2c8>)
   1df10:	e725      	b.n	1dd5e <getTrngSource+0x96>
   1df12:	4820      	ldr	r0, [pc, #128]	; (1df94 <getTrngSource+0x2cc>)
   1df14:	e723      	b.n	1dd5e <getTrngSource+0x96>
   1df16:	2703      	movs	r7, #3
   1df18:	e74b      	b.n	1ddb2 <getTrngSource+0xea>
   1df1a:	2702      	movs	r7, #2
   1df1c:	e749      	b.n	1ddb2 <getTrngSource+0xea>
   1df1e:	6a23      	ldr	r3, [r4, #32]
   1df20:	2b00      	cmp	r3, #0
   1df22:	f43f af20 	beq.w	1dd66 <getTrngSource+0x9e>
   1df26:	481c      	ldr	r0, [pc, #112]	; (1df98 <getTrngSource+0x2d0>)
   1df28:	e71d      	b.n	1dd66 <getTrngSource+0x9e>
   1df2a:	9500      	str	r5, [sp, #0]
   1df2c:	ab04      	add	r3, sp, #16
   1df2e:	2201      	movs	r2, #1
   1df30:	4621      	mov	r1, r4
   1df32:	4638      	mov	r0, r7
   1df34:	f7ff fd88 	bl	1da48 <startTrngHW>
   1df38:	2800      	cmp	r0, #0
   1df3a:	f43f aee2 	beq.w	1dd02 <getTrngSource+0x3a>
   1df3e:	e712      	b.n	1dd66 <getTrngSource+0x9e>
   1df40:	69a2      	ldr	r2, [r4, #24]
   1df42:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1df46:	4651      	mov	r1, sl
   1df48:	4628      	mov	r0, r5
   1df4a:	f7ff fe55 	bl	1dbf8 <LLF_RND_AdaptiveProportionTest>
   1df4e:	2800      	cmp	r0, #0
   1df50:	d1aa      	bne.n	1dea8 <getTrngSource+0x1e0>
   1df52:	e7d1      	b.n	1def8 <getTrngSource+0x230>
   1df54:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1df56:	601d      	str	r5, [r3, #0]
   1df58:	e7ad      	b.n	1deb6 <getTrngSource+0x1ee>
   1df5a:	bf00      	nop
   1df5c:	5002b138 	.word	0x5002b138
   1df60:	5002b130 	.word	0x5002b130
   1df64:	aaaaaaab 	.word	0xaaaaaaab
   1df68:	00f10c02 	.word	0x00f10c02
   1df6c:	00f10c30 	.word	0x00f10c30
   1df70:	5002b1c4 	.word	0x5002b1c4
   1df74:	5002b12c 	.word	0x5002b12c
   1df78:	5002b100 	.word	0x5002b100
   1df7c:	5002b10c 	.word	0x5002b10c
   1df80:	5002ba04 	.word	0x5002ba04
   1df84:	5002b1d8 	.word	0x5002b1d8
   1df88:	5002b114 	.word	0x5002b114
   1df8c:	5002b118 	.word	0x5002b118
   1df90:	00f10c31 	.word	0x00f10c31
   1df94:	00f10c35 	.word	0x00f10c35
   1df98:	00f10c32 	.word	0x00f10c32

0001df9c <LLF_RND_GetTrngSource>:
   1df9c:	b430      	push	{r4, r5}
   1df9e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1dfa2:	9d04      	ldr	r5, [sp, #16]
   1dfa4:	9402      	str	r4, [sp, #8]
   1dfa6:	2400      	movs	r4, #0
   1dfa8:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1dfac:	bc30      	pop	{r4, r5}
   1dfae:	f7ff be8b 	b.w	1dcc8 <getTrngSource>
   1dfb2:	bf00      	nop

0001dfb4 <LLF_RND_RunTrngStartupTest>:
   1dfb4:	b510      	push	{r4, lr}
   1dfb6:	b086      	sub	sp, #24
   1dfb8:	ab05      	add	r3, sp, #20
   1dfba:	2401      	movs	r4, #1
   1dfbc:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1dfc0:	9300      	str	r3, [sp, #0]
   1dfc2:	2200      	movs	r2, #0
   1dfc4:	ab04      	add	r3, sp, #16
   1dfc6:	f7ff fe7f 	bl	1dcc8 <getTrngSource>
   1dfca:	b006      	add	sp, #24
   1dfcc:	bd10      	pop	{r4, pc}
   1dfce:	bf00      	nop

0001dfd0 <mbedtls_platform_zeroize>:
   1dfd0:	b138      	cbz	r0, 1dfe2 <mbedtls_platform_zeroize+0x12>
   1dfd2:	b131      	cbz	r1, 1dfe2 <mbedtls_platform_zeroize+0x12>
   1dfd4:	4401      	add	r1, r0
   1dfd6:	2200      	movs	r2, #0
   1dfd8:	4603      	mov	r3, r0
   1dfda:	3001      	adds	r0, #1
   1dfdc:	4281      	cmp	r1, r0
   1dfde:	701a      	strb	r2, [r3, #0]
   1dfe0:	d1fa      	bne.n	1dfd8 <mbedtls_platform_zeroize+0x8>
   1dfe2:	4770      	bx	lr

0001dfe4 <mbedtls_hardware_poll>:
   1dfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfe6:	b089      	sub	sp, #36	; 0x24
   1dfe8:	9205      	str	r2, [sp, #20]
   1dfea:	2900      	cmp	r1, #0
   1dfec:	d064      	beq.n	1e0b8 <mbedtls_hardware_poll+0xd4>
   1dfee:	461c      	mov	r4, r3
   1dff0:	2b00      	cmp	r3, #0
   1dff2:	d061      	beq.n	1e0b8 <mbedtls_hardware_poll+0xd4>
   1dff4:	4615      	mov	r5, r2
   1dff6:	2a00      	cmp	r2, #0
   1dff8:	d05e      	beq.n	1e0b8 <mbedtls_hardware_poll+0xd4>
   1dffa:	4f31      	ldr	r7, [pc, #196]	; (1e0c0 <mbedtls_hardware_poll+0xdc>)
   1dffc:	460e      	mov	r6, r1
   1dffe:	6838      	ldr	r0, [r7, #0]
   1e000:	f04f 31ff 	mov.w	r1, #4294967295
   1e004:	f7ff fc9c 	bl	1d940 <CC_PalMutexLock>
   1e008:	2800      	cmp	r0, #0
   1e00a:	d14b      	bne.n	1e0a4 <mbedtls_hardware_poll+0xc0>
   1e00c:	2000      	movs	r0, #0
   1e00e:	f7ff fcc7 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1e012:	2800      	cmp	r0, #0
   1e014:	d142      	bne.n	1e09c <mbedtls_hardware_poll+0xb8>
   1e016:	482b      	ldr	r0, [pc, #172]	; (1e0c4 <mbedtls_hardware_poll+0xe0>)
   1e018:	f000 fd34 	bl	1ea84 <RNG_PLAT_SetUserRngParameters>
   1e01c:	b1d8      	cbz	r0, 1e056 <mbedtls_hardware_poll+0x72>
   1e01e:	2001      	movs	r0, #1
   1e020:	f04f 36ff 	mov.w	r6, #4294967295
   1e024:	f7ff fcbc 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1e028:	2800      	cmp	r0, #0
   1e02a:	d133      	bne.n	1e094 <mbedtls_hardware_poll+0xb0>
   1e02c:	4826      	ldr	r0, [pc, #152]	; (1e0c8 <mbedtls_hardware_poll+0xe4>)
   1e02e:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e032:	f7ff ffcd 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e036:	4825      	ldr	r0, [pc, #148]	; (1e0cc <mbedtls_hardware_poll+0xe8>)
   1e038:	2104      	movs	r1, #4
   1e03a:	f7ff ffc9 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e03e:	4821      	ldr	r0, [pc, #132]	; (1e0c4 <mbedtls_hardware_poll+0xe0>)
   1e040:	2128      	movs	r1, #40	; 0x28
   1e042:	f7ff ffc5 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e046:	6838      	ldr	r0, [r7, #0]
   1e048:	f7ff fc82 	bl	1d950 <CC_PalMutexUnlock>
   1e04c:	2800      	cmp	r0, #0
   1e04e:	d12d      	bne.n	1e0ac <mbedtls_hardware_poll+0xc8>
   1e050:	4630      	mov	r0, r6
   1e052:	b009      	add	sp, #36	; 0x24
   1e054:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e056:	491c      	ldr	r1, [pc, #112]	; (1e0c8 <mbedtls_hardware_poll+0xe4>)
   1e058:	9003      	str	r0, [sp, #12]
   1e05a:	ab07      	add	r3, sp, #28
   1e05c:	4602      	mov	r2, r0
   1e05e:	9102      	str	r1, [sp, #8]
   1e060:	9300      	str	r3, [sp, #0]
   1e062:	4918      	ldr	r1, [pc, #96]	; (1e0c4 <mbedtls_hardware_poll+0xe0>)
   1e064:	4819      	ldr	r0, [pc, #100]	; (1e0cc <mbedtls_hardware_poll+0xe8>)
   1e066:	9401      	str	r4, [sp, #4]
   1e068:	ab05      	add	r3, sp, #20
   1e06a:	f7ff ff97 	bl	1df9c <LLF_RND_GetTrngSource>
   1e06e:	4603      	mov	r3, r0
   1e070:	2800      	cmp	r0, #0
   1e072:	d1d4      	bne.n	1e01e <mbedtls_hardware_poll+0x3a>
   1e074:	6822      	ldr	r2, [r4, #0]
   1e076:	42aa      	cmp	r2, r5
   1e078:	d3d1      	bcc.n	1e01e <mbedtls_hardware_poll+0x3a>
   1e07a:	9907      	ldr	r1, [sp, #28]
   1e07c:	4630      	mov	r0, r6
   1e07e:	3108      	adds	r1, #8
   1e080:	462a      	mov	r2, r5
   1e082:	461e      	mov	r6, r3
   1e084:	f000 fd3a 	bl	1eafc <CC_PalMemCopyPlat>
   1e088:	6025      	str	r5, [r4, #0]
   1e08a:	2001      	movs	r0, #1
   1e08c:	f7ff fc88 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1e090:	2800      	cmp	r0, #0
   1e092:	d0cb      	beq.n	1e02c <mbedtls_hardware_poll+0x48>
   1e094:	480e      	ldr	r0, [pc, #56]	; (1e0d0 <mbedtls_hardware_poll+0xec>)
   1e096:	f7ff f8bd 	bl	1d214 <CC_PalAbort>
   1e09a:	e7c7      	b.n	1e02c <mbedtls_hardware_poll+0x48>
   1e09c:	480d      	ldr	r0, [pc, #52]	; (1e0d4 <mbedtls_hardware_poll+0xf0>)
   1e09e:	f7ff f8b9 	bl	1d214 <CC_PalAbort>
   1e0a2:	e7b8      	b.n	1e016 <mbedtls_hardware_poll+0x32>
   1e0a4:	480c      	ldr	r0, [pc, #48]	; (1e0d8 <mbedtls_hardware_poll+0xf4>)
   1e0a6:	f7ff f8b5 	bl	1d214 <CC_PalAbort>
   1e0aa:	e7af      	b.n	1e00c <mbedtls_hardware_poll+0x28>
   1e0ac:	480b      	ldr	r0, [pc, #44]	; (1e0dc <mbedtls_hardware_poll+0xf8>)
   1e0ae:	f7ff f8b1 	bl	1d214 <CC_PalAbort>
   1e0b2:	4630      	mov	r0, r6
   1e0b4:	b009      	add	sp, #36	; 0x24
   1e0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e0b8:	f04f 36ff 	mov.w	r6, #4294967295
   1e0bc:	e7c8      	b.n	1e050 <mbedtls_hardware_poll+0x6c>
   1e0be:	bf00      	nop
   1e0c0:	20033ae8 	.word	0x20033ae8
   1e0c4:	20037ce0 	.word	0x20037ce0
   1e0c8:	20037ac0 	.word	0x20037ac0
   1e0cc:	20037abc 	.word	0x20037abc
   1e0d0:	000279cc 	.word	0x000279cc
   1e0d4:	000279ac 	.word	0x000279ac
   1e0d8:	00027994 	.word	0x00027994
   1e0dc:	00027a24 	.word	0x00027a24

0001e0e0 <cc_mbedtls_sha256_init>:
   1e0e0:	b510      	push	{r4, lr}
   1e0e2:	4604      	mov	r4, r0
   1e0e4:	b128      	cbz	r0, 1e0f2 <cc_mbedtls_sha256_init+0x12>
   1e0e6:	4620      	mov	r0, r4
   1e0e8:	21f0      	movs	r1, #240	; 0xf0
   1e0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e0ee:	f000 bd09 	b.w	1eb04 <CC_PalMemSetZeroPlat>
   1e0f2:	4804      	ldr	r0, [pc, #16]	; (1e104 <cc_mbedtls_sha256_init+0x24>)
   1e0f4:	f7ff f88e 	bl	1d214 <CC_PalAbort>
   1e0f8:	4620      	mov	r0, r4
   1e0fa:	21f0      	movs	r1, #240	; 0xf0
   1e0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e100:	f000 bd00 	b.w	1eb04 <CC_PalMemSetZeroPlat>
   1e104:	00027a3c 	.word	0x00027a3c

0001e108 <cc_mbedtls_sha256_free>:
   1e108:	b110      	cbz	r0, 1e110 <cc_mbedtls_sha256_free+0x8>
   1e10a:	21f0      	movs	r1, #240	; 0xf0
   1e10c:	f7ff bf60 	b.w	1dfd0 <mbedtls_platform_zeroize>
   1e110:	4770      	bx	lr
   1e112:	bf00      	nop

0001e114 <cc_mbedtls_sha256_starts_ret>:
   1e114:	b508      	push	{r3, lr}
   1e116:	b161      	cbz	r1, 1e132 <cc_mbedtls_sha256_starts_ret+0x1e>
   1e118:	2901      	cmp	r1, #1
   1e11a:	d107      	bne.n	1e12c <cc_mbedtls_sha256_starts_ret+0x18>
   1e11c:	2102      	movs	r1, #2
   1e11e:	f000 f839 	bl	1e194 <mbedtls_sha_starts_internal>
   1e122:	2800      	cmp	r0, #0
   1e124:	bf18      	it	ne
   1e126:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e12a:	bd08      	pop	{r3, pc}
   1e12c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e130:	bd08      	pop	{r3, pc}
   1e132:	2101      	movs	r1, #1
   1e134:	f000 f82e 	bl	1e194 <mbedtls_sha_starts_internal>
   1e138:	e7f3      	b.n	1e122 <cc_mbedtls_sha256_starts_ret+0xe>
   1e13a:	bf00      	nop

0001e13c <cc_mbedtls_sha256_update_ret>:
   1e13c:	b508      	push	{r3, lr}
   1e13e:	f000 f86b 	bl	1e218 <mbedtls_sha_update_internal>
   1e142:	2800      	cmp	r0, #0
   1e144:	bf18      	it	ne
   1e146:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e14a:	bd08      	pop	{r3, pc}

0001e14c <cc_mbedtls_sha256_finish_ret>:
   1e14c:	b570      	push	{r4, r5, r6, lr}
   1e14e:	b1e8      	cbz	r0, 1e18c <cc_mbedtls_sha256_finish_ret+0x40>
   1e150:	460e      	mov	r6, r1
   1e152:	b1d9      	cbz	r1, 1e18c <cc_mbedtls_sha256_finish_ret+0x40>
   1e154:	4604      	mov	r4, r0
   1e156:	f000 f831 	bl	1e1bc <mbedtls_sha_finish_internal>
   1e15a:	4605      	mov	r5, r0
   1e15c:	b9b0      	cbnz	r0, 1e18c <cc_mbedtls_sha256_finish_ret+0x40>
   1e15e:	6823      	ldr	r3, [r4, #0]
   1e160:	2b01      	cmp	r3, #1
   1e162:	d00b      	beq.n	1e17c <cc_mbedtls_sha256_finish_ret+0x30>
   1e164:	2b02      	cmp	r3, #2
   1e166:	d001      	beq.n	1e16c <cc_mbedtls_sha256_finish_ret+0x20>
   1e168:	4628      	mov	r0, r5
   1e16a:	bd70      	pop	{r4, r5, r6, pc}
   1e16c:	f104 0108 	add.w	r1, r4, #8
   1e170:	4630      	mov	r0, r6
   1e172:	221c      	movs	r2, #28
   1e174:	f000 fcc2 	bl	1eafc <CC_PalMemCopyPlat>
   1e178:	4628      	mov	r0, r5
   1e17a:	bd70      	pop	{r4, r5, r6, pc}
   1e17c:	f104 0108 	add.w	r1, r4, #8
   1e180:	4630      	mov	r0, r6
   1e182:	2220      	movs	r2, #32
   1e184:	f000 fcba 	bl	1eafc <CC_PalMemCopyPlat>
   1e188:	4628      	mov	r0, r5
   1e18a:	bd70      	pop	{r4, r5, r6, pc}
   1e18c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1e190:	e7ea      	b.n	1e168 <cc_mbedtls_sha256_finish_ret+0x1c>
   1e192:	bf00      	nop

0001e194 <mbedtls_sha_starts_internal>:
   1e194:	b178      	cbz	r0, 1e1b6 <mbedtls_sha_starts_internal+0x22>
   1e196:	b538      	push	{r3, r4, r5, lr}
   1e198:	4604      	mov	r4, r0
   1e19a:	460d      	mov	r5, r1
   1e19c:	21f0      	movs	r1, #240	; 0xf0
   1e19e:	f000 fcb1 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1e1a2:	2340      	movs	r3, #64	; 0x40
   1e1a4:	6025      	str	r5, [r4, #0]
   1e1a6:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e1a8:	4620      	mov	r0, r4
   1e1aa:	f000 fd83 	bl	1ecb4 <InitHashDrv>
   1e1ae:	3800      	subs	r0, #0
   1e1b0:	bf18      	it	ne
   1e1b2:	2001      	movne	r0, #1
   1e1b4:	bd38      	pop	{r3, r4, r5, pc}
   1e1b6:	2001      	movs	r0, #1
   1e1b8:	4770      	bx	lr
   1e1ba:	bf00      	nop

0001e1bc <mbedtls_sha_finish_internal>:
   1e1bc:	b570      	push	{r4, r5, r6, lr}
   1e1be:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1e1c0:	b0a4      	sub	sp, #144	; 0x90
   1e1c2:	4604      	mov	r4, r0
   1e1c4:	ae04      	add	r6, sp, #16
   1e1c6:	b9e5      	cbnz	r5, 1e202 <mbedtls_sha_finish_internal+0x46>
   1e1c8:	2201      	movs	r2, #1
   1e1ca:	2300      	movs	r3, #0
   1e1cc:	6062      	str	r2, [r4, #4]
   1e1ce:	4630      	mov	r0, r6
   1e1d0:	e9cd 3300 	strd	r3, r3, [sp]
   1e1d4:	aa02      	add	r2, sp, #8
   1e1d6:	4629      	mov	r1, r5
   1e1d8:	f000 fd38 	bl	1ec4c <SetDataBuffersInfo>
   1e1dc:	b110      	cbz	r0, 1e1e4 <mbedtls_sha_finish_internal+0x28>
   1e1de:	2001      	movs	r0, #1
   1e1e0:	b024      	add	sp, #144	; 0x90
   1e1e2:	bd70      	pop	{r4, r5, r6, pc}
   1e1e4:	462a      	mov	r2, r5
   1e1e6:	a902      	add	r1, sp, #8
   1e1e8:	4620      	mov	r0, r4
   1e1ea:	f000 fd8d 	bl	1ed08 <ProcessHashDrv>
   1e1ee:	2800      	cmp	r0, #0
   1e1f0:	d1f5      	bne.n	1e1de <mbedtls_sha_finish_internal+0x22>
   1e1f2:	4620      	mov	r0, r4
   1e1f4:	f000 feb6 	bl	1ef64 <FinishHashDrv>
   1e1f8:	2800      	cmp	r0, #0
   1e1fa:	d1f0      	bne.n	1e1de <mbedtls_sha_finish_internal+0x22>
   1e1fc:	6620      	str	r0, [r4, #96]	; 0x60
   1e1fe:	b024      	add	sp, #144	; 0x90
   1e200:	bd70      	pop	{r4, r5, r6, pc}
   1e202:	2d80      	cmp	r5, #128	; 0x80
   1e204:	462a      	mov	r2, r5
   1e206:	4630      	mov	r0, r6
   1e208:	bf28      	it	cs
   1e20a:	2280      	movcs	r2, #128	; 0x80
   1e20c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1e210:	f000 fc74 	bl	1eafc <CC_PalMemCopyPlat>
   1e214:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e216:	e7d7      	b.n	1e1c8 <mbedtls_sha_finish_internal+0xc>

0001e218 <mbedtls_sha_update_internal>:
   1e218:	2800      	cmp	r0, #0
   1e21a:	d054      	beq.n	1e2c6 <mbedtls_sha_update_internal+0xae>
   1e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e21e:	4614      	mov	r4, r2
   1e220:	b0a5      	sub	sp, #148	; 0x94
   1e222:	b1b2      	cbz	r2, 1e252 <mbedtls_sha_update_internal+0x3a>
   1e224:	460e      	mov	r6, r1
   1e226:	b351      	cbz	r1, 1e27e <mbedtls_sha_update_internal+0x66>
   1e228:	4605      	mov	r5, r0
   1e22a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1e22e:	1a1a      	subs	r2, r3, r0
   1e230:	fbb2 f7f3 	udiv	r7, r2, r3
   1e234:	fb03 2717 	mls	r7, r3, r7, r2
   1e238:	42a7      	cmp	r7, r4
   1e23a:	bf28      	it	cs
   1e23c:	4627      	movcs	r7, r4
   1e23e:	2f00      	cmp	r7, #0
   1e240:	d143      	bne.n	1e2ca <mbedtls_sha_update_internal+0xb2>
   1e242:	4283      	cmp	r3, r0
   1e244:	d008      	beq.n	1e258 <mbedtls_sha_update_internal+0x40>
   1e246:	fbb4 f7f3 	udiv	r7, r4, r3
   1e24a:	fb03 f707 	mul.w	r7, r3, r7
   1e24e:	b9cf      	cbnz	r7, 1e284 <mbedtls_sha_update_internal+0x6c>
   1e250:	bb6c      	cbnz	r4, 1e2ae <mbedtls_sha_update_internal+0x96>
   1e252:	2000      	movs	r0, #0
   1e254:	b025      	add	sp, #148	; 0x94
   1e256:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e258:	2b80      	cmp	r3, #128	; 0x80
   1e25a:	bf28      	it	cs
   1e25c:	2380      	movcs	r3, #128	; 0x80
   1e25e:	461a      	mov	r2, r3
   1e260:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e264:	a804      	add	r0, sp, #16
   1e266:	f000 fc49 	bl	1eafc <CC_PalMemCopyPlat>
   1e26a:	2300      	movs	r3, #0
   1e26c:	e9cd 3300 	strd	r3, r3, [sp]
   1e270:	a804      	add	r0, sp, #16
   1e272:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e274:	aa02      	add	r2, sp, #8
   1e276:	f000 fce9 	bl	1ec4c <SetDataBuffersInfo>
   1e27a:	2800      	cmp	r0, #0
   1e27c:	d032      	beq.n	1e2e4 <mbedtls_sha_update_internal+0xcc>
   1e27e:	2001      	movs	r0, #1
   1e280:	b025      	add	sp, #148	; 0x94
   1e282:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e284:	2300      	movs	r3, #0
   1e286:	e9cd 3300 	strd	r3, r3, [sp]
   1e28a:	aa02      	add	r2, sp, #8
   1e28c:	4639      	mov	r1, r7
   1e28e:	4630      	mov	r0, r6
   1e290:	f000 fcdc 	bl	1ec4c <SetDataBuffersInfo>
   1e294:	2800      	cmp	r0, #0
   1e296:	d1f2      	bne.n	1e27e <mbedtls_sha_update_internal+0x66>
   1e298:	a902      	add	r1, sp, #8
   1e29a:	463a      	mov	r2, r7
   1e29c:	4628      	mov	r0, r5
   1e29e:	f000 fd33 	bl	1ed08 <ProcessHashDrv>
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	d1eb      	bne.n	1e27e <mbedtls_sha_update_internal+0x66>
   1e2a6:	1be4      	subs	r4, r4, r7
   1e2a8:	443e      	add	r6, r7
   1e2aa:	2c00      	cmp	r4, #0
   1e2ac:	d0d1      	beq.n	1e252 <mbedtls_sha_update_internal+0x3a>
   1e2ae:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e2b0:	3019      	adds	r0, #25
   1e2b2:	4622      	mov	r2, r4
   1e2b4:	4631      	mov	r1, r6
   1e2b6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e2ba:	f000 fc1f 	bl	1eafc <CC_PalMemCopyPlat>
   1e2be:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1e2c0:	4422      	add	r2, r4
   1e2c2:	662a      	str	r2, [r5, #96]	; 0x60
   1e2c4:	e7c5      	b.n	1e252 <mbedtls_sha_update_internal+0x3a>
   1e2c6:	2001      	movs	r0, #1
   1e2c8:	4770      	bx	lr
   1e2ca:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e2ce:	4418      	add	r0, r3
   1e2d0:	463a      	mov	r2, r7
   1e2d2:	f000 fc13 	bl	1eafc <CC_PalMemCopyPlat>
   1e2d6:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1e2da:	4438      	add	r0, r7
   1e2dc:	443e      	add	r6, r7
   1e2de:	1be4      	subs	r4, r4, r7
   1e2e0:	6628      	str	r0, [r5, #96]	; 0x60
   1e2e2:	e7ae      	b.n	1e242 <mbedtls_sha_update_internal+0x2a>
   1e2e4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e2e6:	a902      	add	r1, sp, #8
   1e2e8:	4628      	mov	r0, r5
   1e2ea:	f000 fd0d 	bl	1ed08 <ProcessHashDrv>
   1e2ee:	2800      	cmp	r0, #0
   1e2f0:	d1c5      	bne.n	1e27e <mbedtls_sha_update_internal+0x66>
   1e2f2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e2f4:	6628      	str	r0, [r5, #96]	; 0x60
   1e2f6:	e7a6      	b.n	1e246 <mbedtls_sha_update_internal+0x2e>

0001e2f8 <block_cipher_df>:
   1e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2fc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1e300:	b0b1      	sub	sp, #196	; 0xc4
   1e302:	f200 812e 	bhi.w	1e562 <block_cipher_df+0x26a>
   1e306:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1e574 <block_cipher_df+0x27c>
   1e30a:	4614      	mov	r4, r2
   1e30c:	460d      	mov	r5, r1
   1e30e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1e312:	2100      	movs	r1, #0
   1e314:	4682      	mov	sl, r0
   1e316:	4648      	mov	r0, r9
   1e318:	f003 f929 	bl	2156e <memset>
   1e31c:	a813      	add	r0, sp, #76	; 0x4c
   1e31e:	f000 fe63 	bl	1efe8 <cc_mbedtls_aes_init>
   1e322:	2600      	movs	r6, #0
   1e324:	4629      	mov	r1, r5
   1e326:	2320      	movs	r3, #32
   1e328:	ba65      	rev16	r5, r4
   1e32a:	4622      	mov	r2, r4
   1e32c:	f109 0018 	add.w	r0, r9, #24
   1e330:	f8a9 5012 	strh.w	r5, [r9, #18]
   1e334:	f889 3017 	strb.w	r3, [r9, #23]
   1e338:	f8a9 6010 	strh.w	r6, [r9, #16]
   1e33c:	f003 f8f3 	bl	21526 <memcpy>
   1e340:	eb09 0304 	add.w	r3, r9, r4
   1e344:	2280      	movs	r2, #128	; 0x80
   1e346:	4d88      	ldr	r5, [pc, #544]	; (1e568 <block_cipher_df+0x270>)
   1e348:	761a      	strb	r2, [r3, #24]
   1e34a:	4b88      	ldr	r3, [pc, #544]	; (1e56c <block_cipher_df+0x274>)
   1e34c:	9503      	str	r5, [sp, #12]
   1e34e:	9304      	str	r3, [sp, #16]
   1e350:	a813      	add	r0, sp, #76	; 0x4c
   1e352:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1e356:	a903      	add	r1, sp, #12
   1e358:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1e35c:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1e360:	f000 fe58 	bl	1f014 <cc_mbedtls_aes_setkey_enc>
   1e364:	4680      	mov	r8, r0
   1e366:	2800      	cmp	r0, #0
   1e368:	f040 80da 	bne.w	1e520 <block_cipher_df+0x228>
   1e36c:	f104 0319 	add.w	r3, r4, #25
   1e370:	9301      	str	r3, [sp, #4]
   1e372:	af07      	add	r7, sp, #28
   1e374:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1e378:	2210      	movs	r2, #16
   1e37a:	2100      	movs	r1, #0
   1e37c:	4638      	mov	r0, r7
   1e37e:	f003 f8f6 	bl	2156e <memset>
   1e382:	4c7b      	ldr	r4, [pc, #492]	; (1e570 <block_cipher_df+0x278>)
   1e384:	9d01      	ldr	r5, [sp, #4]
   1e386:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1e38a:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1e38e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1e392:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1e396:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1e39a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1e39e:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1e3a2:	404e      	eors	r6, r1
   1e3a4:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1e3a8:	f88d 601d 	strb.w	r6, [sp, #29]
   1e3ac:	ea8e 0303 	eor.w	r3, lr, r3
   1e3b0:	4050      	eors	r0, r2
   1e3b2:	ea8c 0101 	eor.w	r1, ip, r1
   1e3b6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e3ba:	f88d 301c 	strb.w	r3, [sp, #28]
   1e3be:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1e3c2:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1e3c6:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1e3ca:	f88d 001e 	strb.w	r0, [sp, #30]
   1e3ce:	f88d 101f 	strb.w	r1, [sp, #31]
   1e3d2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1e3d6:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1e3da:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1e3de:	405a      	eors	r2, r3
   1e3e0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1e3e4:	f88d 2020 	strb.w	r2, [sp, #32]
   1e3e8:	ea8c 0606 	eor.w	r6, ip, r6
   1e3ec:	4048      	eors	r0, r1
   1e3ee:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1e3f2:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e3f6:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1e3fa:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1e3fe:	ea8e 0303 	eor.w	r3, lr, r3
   1e402:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1e406:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1e40a:	ea8c 0101 	eor.w	r1, ip, r1
   1e40e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1e412:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1e416:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1e41a:	ea82 020c 	eor.w	r2, r2, ip
   1e41e:	4073      	eors	r3, r6
   1e420:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1e424:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1e428:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1e42c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1e430:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1e434:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1e438:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1e43c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1e440:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e444:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1e448:	ea8e 0202 	eor.w	r2, lr, r2
   1e44c:	4041      	eors	r1, r0
   1e44e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1e452:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1e456:	4073      	eors	r3, r6
   1e458:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1e45c:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1e460:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1e464:	ea8c 0000 	eor.w	r0, ip, r0
   1e468:	4056      	eors	r6, r2
   1e46a:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1e46e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1e472:	463b      	mov	r3, r7
   1e474:	463a      	mov	r2, r7
   1e476:	2101      	movs	r1, #1
   1e478:	a813      	add	r0, sp, #76	; 0x4c
   1e47a:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1e47e:	f000 fde3 	bl	1f048 <cc_mbedtls_aes_crypt_ecb>
   1e482:	2d10      	cmp	r5, #16
   1e484:	bf94      	ite	ls
   1e486:	1b6d      	subls	r5, r5, r5
   1e488:	3d10      	subhi	r5, #16
   1e48a:	2800      	cmp	r0, #0
   1e48c:	d167      	bne.n	1e55e <block_cipher_df+0x266>
   1e48e:	3410      	adds	r4, #16
   1e490:	2d00      	cmp	r5, #0
   1e492:	f47f af78 	bne.w	1e386 <block_cipher_df+0x8e>
   1e496:	eb0b 0008 	add.w	r0, fp, r8
   1e49a:	2210      	movs	r2, #16
   1e49c:	4639      	mov	r1, r7
   1e49e:	f003 f842 	bl	21526 <memcpy>
   1e4a2:	f899 3003 	ldrb.w	r3, [r9, #3]
   1e4a6:	f108 0810 	add.w	r8, r8, #16
   1e4aa:	3301      	adds	r3, #1
   1e4ac:	f1b8 0f20 	cmp.w	r8, #32
   1e4b0:	f889 3003 	strb.w	r3, [r9, #3]
   1e4b4:	f47f af60 	bne.w	1e378 <block_cipher_df+0x80>
   1e4b8:	2280      	movs	r2, #128	; 0x80
   1e4ba:	4659      	mov	r1, fp
   1e4bc:	a813      	add	r0, sp, #76	; 0x4c
   1e4be:	f000 fda9 	bl	1f014 <cc_mbedtls_aes_setkey_enc>
   1e4c2:	4680      	mov	r8, r0
   1e4c4:	bb78      	cbnz	r0, 1e526 <block_cipher_df+0x22e>
   1e4c6:	f10a 0520 	add.w	r5, sl, #32
   1e4ca:	4654      	mov	r4, sl
   1e4cc:	ab0f      	add	r3, sp, #60	; 0x3c
   1e4ce:	461a      	mov	r2, r3
   1e4d0:	2101      	movs	r1, #1
   1e4d2:	a813      	add	r0, sp, #76	; 0x4c
   1e4d4:	f000 fdb8 	bl	1f048 <cc_mbedtls_aes_crypt_ecb>
   1e4d8:	2210      	movs	r2, #16
   1e4da:	4680      	mov	r8, r0
   1e4dc:	a90f      	add	r1, sp, #60	; 0x3c
   1e4de:	4620      	mov	r0, r4
   1e4e0:	4414      	add	r4, r2
   1e4e2:	f1b8 0f00 	cmp.w	r8, #0
   1e4e6:	d11e      	bne.n	1e526 <block_cipher_df+0x22e>
   1e4e8:	f003 f81d 	bl	21526 <memcpy>
   1e4ec:	42ac      	cmp	r4, r5
   1e4ee:	d1ed      	bne.n	1e4cc <block_cipher_df+0x1d4>
   1e4f0:	a813      	add	r0, sp, #76	; 0x4c
   1e4f2:	f000 fd89 	bl	1f008 <cc_mbedtls_aes_free>
   1e4f6:	481f      	ldr	r0, [pc, #124]	; (1e574 <block_cipher_df+0x27c>)
   1e4f8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1e4fc:	f7ff fd68 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e500:	4658      	mov	r0, fp
   1e502:	2120      	movs	r1, #32
   1e504:	f7ff fd64 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e508:	a803      	add	r0, sp, #12
   1e50a:	2110      	movs	r1, #16
   1e50c:	f7ff fd60 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e510:	4638      	mov	r0, r7
   1e512:	2110      	movs	r1, #16
   1e514:	f7ff fd5c 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e518:	4640      	mov	r0, r8
   1e51a:	b031      	add	sp, #196	; 0xc4
   1e51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e520:	af07      	add	r7, sp, #28
   1e522:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1e526:	a813      	add	r0, sp, #76	; 0x4c
   1e528:	f000 fd6e 	bl	1f008 <cc_mbedtls_aes_free>
   1e52c:	4811      	ldr	r0, [pc, #68]	; (1e574 <block_cipher_df+0x27c>)
   1e52e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1e532:	f7ff fd4d 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e536:	4658      	mov	r0, fp
   1e538:	2120      	movs	r1, #32
   1e53a:	f7ff fd49 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e53e:	a803      	add	r0, sp, #12
   1e540:	2110      	movs	r1, #16
   1e542:	f7ff fd45 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e546:	4638      	mov	r0, r7
   1e548:	2110      	movs	r1, #16
   1e54a:	f7ff fd41 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e54e:	4650      	mov	r0, sl
   1e550:	2120      	movs	r1, #32
   1e552:	f7ff fd3d 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e556:	4640      	mov	r0, r8
   1e558:	b031      	add	sp, #196	; 0xc4
   1e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e55e:	4680      	mov	r8, r0
   1e560:	e7e1      	b.n	1e526 <block_cipher_df+0x22e>
   1e562:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1e566:	e7f6      	b.n	1e556 <block_cipher_df+0x25e>
   1e568:	03020100 	.word	0x03020100
   1e56c:	07060504 	.word	0x07060504
   1e570:	20037d18 	.word	0x20037d18
   1e574:	20037d08 	.word	0x20037d08

0001e578 <ctr_drbg_update_internal>:
   1e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e57c:	b088      	sub	sp, #32
   1e57e:	4604      	mov	r4, r0
   1e580:	2220      	movs	r2, #32
   1e582:	460d      	mov	r5, r1
   1e584:	4668      	mov	r0, sp
   1e586:	2100      	movs	r1, #0
   1e588:	eb04 0802 	add.w	r8, r4, r2
   1e58c:	f002 ffef 	bl	2156e <memset>
   1e590:	466e      	mov	r6, sp
   1e592:	7be2      	ldrb	r2, [r4, #15]
   1e594:	3201      	adds	r2, #1
   1e596:	b2d2      	uxtb	r2, r2
   1e598:	73e2      	strb	r2, [r4, #15]
   1e59a:	2a00      	cmp	r2, #0
   1e59c:	d14d      	bne.n	1e63a <ctr_drbg_update_internal+0xc2>
   1e59e:	7ba2      	ldrb	r2, [r4, #14]
   1e5a0:	3201      	adds	r2, #1
   1e5a2:	b2d2      	uxtb	r2, r2
   1e5a4:	73a2      	strb	r2, [r4, #14]
   1e5a6:	2a00      	cmp	r2, #0
   1e5a8:	d147      	bne.n	1e63a <ctr_drbg_update_internal+0xc2>
   1e5aa:	7b63      	ldrb	r3, [r4, #13]
   1e5ac:	3301      	adds	r3, #1
   1e5ae:	b2db      	uxtb	r3, r3
   1e5b0:	7363      	strb	r3, [r4, #13]
   1e5b2:	2b00      	cmp	r3, #0
   1e5b4:	d141      	bne.n	1e63a <ctr_drbg_update_internal+0xc2>
   1e5b6:	7b23      	ldrb	r3, [r4, #12]
   1e5b8:	3301      	adds	r3, #1
   1e5ba:	b2db      	uxtb	r3, r3
   1e5bc:	7323      	strb	r3, [r4, #12]
   1e5be:	2b00      	cmp	r3, #0
   1e5c0:	d13b      	bne.n	1e63a <ctr_drbg_update_internal+0xc2>
   1e5c2:	7ae3      	ldrb	r3, [r4, #11]
   1e5c4:	3301      	adds	r3, #1
   1e5c6:	b2db      	uxtb	r3, r3
   1e5c8:	72e3      	strb	r3, [r4, #11]
   1e5ca:	2b00      	cmp	r3, #0
   1e5cc:	d135      	bne.n	1e63a <ctr_drbg_update_internal+0xc2>
   1e5ce:	7aa3      	ldrb	r3, [r4, #10]
   1e5d0:	3301      	adds	r3, #1
   1e5d2:	b2db      	uxtb	r3, r3
   1e5d4:	72a3      	strb	r3, [r4, #10]
   1e5d6:	2b00      	cmp	r3, #0
   1e5d8:	d12f      	bne.n	1e63a <ctr_drbg_update_internal+0xc2>
   1e5da:	7a63      	ldrb	r3, [r4, #9]
   1e5dc:	3301      	adds	r3, #1
   1e5de:	b2db      	uxtb	r3, r3
   1e5e0:	7263      	strb	r3, [r4, #9]
   1e5e2:	bb53      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e5e4:	7a23      	ldrb	r3, [r4, #8]
   1e5e6:	3301      	adds	r3, #1
   1e5e8:	b2db      	uxtb	r3, r3
   1e5ea:	7223      	strb	r3, [r4, #8]
   1e5ec:	bb2b      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e5ee:	79e3      	ldrb	r3, [r4, #7]
   1e5f0:	3301      	adds	r3, #1
   1e5f2:	b2db      	uxtb	r3, r3
   1e5f4:	71e3      	strb	r3, [r4, #7]
   1e5f6:	bb03      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e5f8:	79a3      	ldrb	r3, [r4, #6]
   1e5fa:	3301      	adds	r3, #1
   1e5fc:	b2db      	uxtb	r3, r3
   1e5fe:	71a3      	strb	r3, [r4, #6]
   1e600:	b9db      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e602:	7963      	ldrb	r3, [r4, #5]
   1e604:	3301      	adds	r3, #1
   1e606:	b2db      	uxtb	r3, r3
   1e608:	7163      	strb	r3, [r4, #5]
   1e60a:	b9b3      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e60c:	7923      	ldrb	r3, [r4, #4]
   1e60e:	3301      	adds	r3, #1
   1e610:	b2db      	uxtb	r3, r3
   1e612:	7123      	strb	r3, [r4, #4]
   1e614:	b98b      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e616:	78e3      	ldrb	r3, [r4, #3]
   1e618:	3301      	adds	r3, #1
   1e61a:	b2db      	uxtb	r3, r3
   1e61c:	70e3      	strb	r3, [r4, #3]
   1e61e:	b963      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e620:	78a3      	ldrb	r3, [r4, #2]
   1e622:	3301      	adds	r3, #1
   1e624:	b2db      	uxtb	r3, r3
   1e626:	70a3      	strb	r3, [r4, #2]
   1e628:	b93b      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e62a:	7863      	ldrb	r3, [r4, #1]
   1e62c:	3301      	adds	r3, #1
   1e62e:	b2db      	uxtb	r3, r3
   1e630:	7063      	strb	r3, [r4, #1]
   1e632:	b913      	cbnz	r3, 1e63a <ctr_drbg_update_internal+0xc2>
   1e634:	7823      	ldrb	r3, [r4, #0]
   1e636:	3301      	adds	r3, #1
   1e638:	7023      	strb	r3, [r4, #0]
   1e63a:	4633      	mov	r3, r6
   1e63c:	4622      	mov	r2, r4
   1e63e:	2101      	movs	r1, #1
   1e640:	4640      	mov	r0, r8
   1e642:	f000 fd01 	bl	1f048 <cc_mbedtls_aes_crypt_ecb>
   1e646:	4607      	mov	r7, r0
   1e648:	2800      	cmp	r0, #0
   1e64a:	d12b      	bne.n	1e6a4 <ctr_drbg_update_internal+0x12c>
   1e64c:	3610      	adds	r6, #16
   1e64e:	ab08      	add	r3, sp, #32
   1e650:	429e      	cmp	r6, r3
   1e652:	d19e      	bne.n	1e592 <ctr_drbg_update_internal+0x1a>
   1e654:	9e01      	ldr	r6, [sp, #4]
   1e656:	686a      	ldr	r2, [r5, #4]
   1e658:	9f00      	ldr	r7, [sp, #0]
   1e65a:	6829      	ldr	r1, [r5, #0]
   1e65c:	68ab      	ldr	r3, [r5, #8]
   1e65e:	4072      	eors	r2, r6
   1e660:	9e02      	ldr	r6, [sp, #8]
   1e662:	9201      	str	r2, [sp, #4]
   1e664:	4079      	eors	r1, r7
   1e666:	4073      	eors	r3, r6
   1e668:	9100      	str	r1, [sp, #0]
   1e66a:	9e03      	ldr	r6, [sp, #12]
   1e66c:	68e9      	ldr	r1, [r5, #12]
   1e66e:	692a      	ldr	r2, [r5, #16]
   1e670:	9302      	str	r3, [sp, #8]
   1e672:	4071      	eors	r1, r6
   1e674:	9e04      	ldr	r6, [sp, #16]
   1e676:	696b      	ldr	r3, [r5, #20]
   1e678:	9103      	str	r1, [sp, #12]
   1e67a:	4056      	eors	r6, r2
   1e67c:	9a05      	ldr	r2, [sp, #20]
   1e67e:	9604      	str	r6, [sp, #16]
   1e680:	ea83 0102 	eor.w	r1, r3, r2
   1e684:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1e688:	9d06      	ldr	r5, [sp, #24]
   1e68a:	9105      	str	r1, [sp, #20]
   1e68c:	4055      	eors	r5, r2
   1e68e:	9a07      	ldr	r2, [sp, #28]
   1e690:	4640      	mov	r0, r8
   1e692:	4053      	eors	r3, r2
   1e694:	4669      	mov	r1, sp
   1e696:	2280      	movs	r2, #128	; 0x80
   1e698:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1e69c:	f000 fcba 	bl	1f014 <cc_mbedtls_aes_setkey_enc>
   1e6a0:	4607      	mov	r7, r0
   1e6a2:	b138      	cbz	r0, 1e6b4 <ctr_drbg_update_internal+0x13c>
   1e6a4:	4668      	mov	r0, sp
   1e6a6:	2120      	movs	r1, #32
   1e6a8:	f7ff fc92 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e6ac:	4638      	mov	r0, r7
   1e6ae:	b008      	add	sp, #32
   1e6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6b4:	2210      	movs	r2, #16
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	eb0d 0102 	add.w	r1, sp, r2
   1e6bc:	f002 ff33 	bl	21526 <memcpy>
   1e6c0:	e7f0      	b.n	1e6a4 <ctr_drbg_update_internal+0x12c>
   1e6c2:	bf00      	nop

0001e6c4 <mbedtls_ctr_drbg_reseed_internal>:
   1e6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e6c8:	4604      	mov	r4, r0
   1e6ca:	6980      	ldr	r0, [r0, #24]
   1e6cc:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1e6d0:	d851      	bhi.n	1e776 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1e6d2:	461d      	mov	r5, r3
   1e6d4:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1e6d8:	42ab      	cmp	r3, r5
   1e6da:	d34c      	bcc.n	1e776 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1e6dc:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1e6e0:	1a18      	subs	r0, r3, r0
   1e6e2:	4290      	cmp	r0, r2
   1e6e4:	4616      	mov	r6, r2
   1e6e6:	d346      	bcc.n	1e776 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1e6e8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1e784 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1e6ec:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1e6f0:	460f      	mov	r7, r1
   1e6f2:	4640      	mov	r0, r8
   1e6f4:	2100      	movs	r1, #0
   1e6f6:	f002 ff3a 	bl	2156e <memset>
   1e6fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1e6fe:	69a2      	ldr	r2, [r4, #24]
   1e700:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1e704:	4641      	mov	r1, r8
   1e706:	4798      	blx	r3
   1e708:	2800      	cmp	r0, #0
   1e70a:	d137      	bne.n	1e77c <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1e70c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1e710:	b135      	cbz	r5, 1e720 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   1e712:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1e716:	462a      	mov	r2, r5
   1e718:	4641      	mov	r1, r8
   1e71a:	4798      	blx	r3
   1e71c:	bb70      	cbnz	r0, 1e77c <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1e71e:	44a9      	add	r9, r5
   1e720:	b107      	cbz	r7, 1e724 <mbedtls_ctr_drbg_reseed_internal+0x60>
   1e722:	b9c6      	cbnz	r6, 1e756 <mbedtls_ctr_drbg_reseed_internal+0x92>
   1e724:	4917      	ldr	r1, [pc, #92]	; (1e784 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1e726:	464a      	mov	r2, r9
   1e728:	4608      	mov	r0, r1
   1e72a:	f7ff fde5 	bl	1e2f8 <block_cipher_df>
   1e72e:	4605      	mov	r5, r0
   1e730:	b138      	cbz	r0, 1e742 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1e732:	4814      	ldr	r0, [pc, #80]	; (1e784 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1e734:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1e738:	f7ff fc4a 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e73c:	4628      	mov	r0, r5
   1e73e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e742:	4910      	ldr	r1, [pc, #64]	; (1e784 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1e744:	4620      	mov	r0, r4
   1e746:	f7ff ff17 	bl	1e578 <ctr_drbg_update_internal>
   1e74a:	4605      	mov	r5, r0
   1e74c:	2800      	cmp	r0, #0
   1e74e:	d1f0      	bne.n	1e732 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1e750:	2301      	movs	r3, #1
   1e752:	6123      	str	r3, [r4, #16]
   1e754:	e7ed      	b.n	1e732 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1e756:	4639      	mov	r1, r7
   1e758:	eb08 0009 	add.w	r0, r8, r9
   1e75c:	4632      	mov	r2, r6
   1e75e:	f002 fee2 	bl	21526 <memcpy>
   1e762:	4908      	ldr	r1, [pc, #32]	; (1e784 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1e764:	44b1      	add	r9, r6
   1e766:	464a      	mov	r2, r9
   1e768:	4608      	mov	r0, r1
   1e76a:	f7ff fdc5 	bl	1e2f8 <block_cipher_df>
   1e76e:	4605      	mov	r5, r0
   1e770:	2800      	cmp	r0, #0
   1e772:	d1de      	bne.n	1e732 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1e774:	e7e5      	b.n	1e742 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1e776:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1e77a:	e7df      	b.n	1e73c <mbedtls_ctr_drbg_reseed_internal+0x78>
   1e77c:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1e780:	e7dc      	b.n	1e73c <mbedtls_ctr_drbg_reseed_internal+0x78>
   1e782:	bf00      	nop
   1e784:	20037ea8 	.word	0x20037ea8

0001e788 <cc_mbedtls_ctr_drbg_init>:
   1e788:	b510      	push	{r4, lr}
   1e78a:	22a4      	movs	r2, #164	; 0xa4
   1e78c:	4604      	mov	r4, r0
   1e78e:	2100      	movs	r1, #0
   1e790:	f002 feed 	bl	2156e <memset>
   1e794:	4b04      	ldr	r3, [pc, #16]	; (1e7a8 <cc_mbedtls_ctr_drbg_init+0x20>)
   1e796:	f04f 32ff 	mov.w	r2, #4294967295
   1e79a:	6122      	str	r2, [r4, #16]
   1e79c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1e7a0:	681b      	ldr	r3, [r3, #0]
   1e7a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e7a6:	4718      	bx	r3
   1e7a8:	20033aec 	.word	0x20033aec

0001e7ac <cc_mbedtls_ctr_drbg_seed>:
   1e7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e7b0:	b085      	sub	sp, #20
   1e7b2:	4605      	mov	r5, r0
   1e7b4:	460f      	mov	r7, r1
   1e7b6:	4616      	mov	r6, r2
   1e7b8:	4668      	mov	r0, sp
   1e7ba:	2210      	movs	r2, #16
   1e7bc:	2100      	movs	r1, #0
   1e7be:	4699      	mov	r9, r3
   1e7c0:	f002 fed5 	bl	2156e <memset>
   1e7c4:	4b1f      	ldr	r3, [pc, #124]	; (1e844 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1e7c6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1e7ca:	681b      	ldr	r3, [r3, #0]
   1e7cc:	4640      	mov	r0, r8
   1e7ce:	4798      	blx	r3
   1e7d0:	b120      	cbz	r0, 1e7dc <cc_mbedtls_ctr_drbg_seed+0x30>
   1e7d2:	4604      	mov	r4, r0
   1e7d4:	4620      	mov	r0, r4
   1e7d6:	b005      	add	sp, #20
   1e7d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e7dc:	f105 0420 	add.w	r4, r5, #32
   1e7e0:	4620      	mov	r0, r4
   1e7e2:	f000 fc01 	bl	1efe8 <cc_mbedtls_aes_init>
   1e7e6:	69aa      	ldr	r2, [r5, #24]
   1e7e8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1e7ec:	692e      	ldr	r6, [r5, #16]
   1e7ee:	b9fa      	cbnz	r2, 1e830 <cc_mbedtls_ctr_drbg_seed+0x84>
   1e7f0:	2220      	movs	r2, #32
   1e7f2:	2e00      	cmp	r6, #0
   1e7f4:	61aa      	str	r2, [r5, #24]
   1e7f6:	db22      	blt.n	1e83e <cc_mbedtls_ctr_drbg_seed+0x92>
   1e7f8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1e7fc:	4620      	mov	r0, r4
   1e7fe:	4669      	mov	r1, sp
   1e800:	61eb      	str	r3, [r5, #28]
   1e802:	2280      	movs	r2, #128	; 0x80
   1e804:	f000 fc06 	bl	1f014 <cc_mbedtls_aes_setkey_enc>
   1e808:	4604      	mov	r4, r0
   1e80a:	b930      	cbnz	r0, 1e81a <cc_mbedtls_ctr_drbg_seed+0x6e>
   1e80c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1e80e:	4633      	mov	r3, r6
   1e810:	4649      	mov	r1, r9
   1e812:	4628      	mov	r0, r5
   1e814:	f7ff ff56 	bl	1e6c4 <mbedtls_ctr_drbg_reseed_internal>
   1e818:	4604      	mov	r4, r0
   1e81a:	4b0b      	ldr	r3, [pc, #44]	; (1e848 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1e81c:	4640      	mov	r0, r8
   1e81e:	681b      	ldr	r3, [r3, #0]
   1e820:	4798      	blx	r3
   1e822:	2800      	cmp	r0, #0
   1e824:	bf18      	it	ne
   1e826:	4604      	movne	r4, r0
   1e828:	4620      	mov	r0, r4
   1e82a:	b005      	add	sp, #20
   1e82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e830:	2e00      	cmp	r6, #0
   1e832:	dae1      	bge.n	1e7f8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1e834:	2a17      	cmp	r2, #23
   1e836:	d802      	bhi.n	1e83e <cc_mbedtls_ctr_drbg_seed+0x92>
   1e838:	1c53      	adds	r3, r2, #1
   1e83a:	085e      	lsrs	r6, r3, #1
   1e83c:	e7dc      	b.n	1e7f8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1e83e:	2600      	movs	r6, #0
   1e840:	e7da      	b.n	1e7f8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   1e842:	bf00      	nop
   1e844:	20033af0 	.word	0x20033af0
   1e848:	20033af4 	.word	0x20033af4

0001e84c <cc_mbedtls_ctr_drbg_random_with_add>:
   1e84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e850:	b08d      	sub	sp, #52	; 0x34
   1e852:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1e856:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1e85a:	f200 80e4 	bhi.w	1ea26 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1e85e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1e862:	f200 80dd 	bhi.w	1ea20 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1e866:	4604      	mov	r4, r0
   1e868:	4615      	mov	r5, r2
   1e86a:	460e      	mov	r6, r1
   1e86c:	2220      	movs	r2, #32
   1e86e:	2100      	movs	r1, #0
   1e870:	a804      	add	r0, sp, #16
   1e872:	461f      	mov	r7, r3
   1e874:	f002 fe7b 	bl	2156e <memset>
   1e878:	4b6c      	ldr	r3, [pc, #432]	; (1ea2c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1e87a:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1e87e:	681b      	ldr	r3, [r3, #0]
   1e880:	4648      	mov	r0, r9
   1e882:	4798      	blx	r3
   1e884:	4683      	mov	fp, r0
   1e886:	2800      	cmp	r0, #0
   1e888:	f040 8093 	bne.w	1e9b2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1e88c:	6922      	ldr	r2, [r4, #16]
   1e88e:	69e3      	ldr	r3, [r4, #28]
   1e890:	429a      	cmp	r2, r3
   1e892:	f300 8092 	bgt.w	1e9ba <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1e896:	6963      	ldr	r3, [r4, #20]
   1e898:	2b00      	cmp	r3, #0
   1e89a:	f040 808e 	bne.w	1e9ba <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1e89e:	f1b8 0f00 	cmp.w	r8, #0
   1e8a2:	f040 80a9 	bne.w	1e9f8 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1e8a6:	f8df a188 	ldr.w	sl, [pc, #392]	; 1ea30 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1e8aa:	466f      	mov	r7, sp
   1e8ac:	2d00      	cmp	r5, #0
   1e8ae:	f000 8098 	beq.w	1e9e2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1e8b2:	f104 0820 	add.w	r8, r4, #32
   1e8b6:	466f      	mov	r7, sp
   1e8b8:	e00e      	b.n	1e8d8 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1e8ba:	2d10      	cmp	r5, #16
   1e8bc:	46ab      	mov	fp, r5
   1e8be:	bf28      	it	cs
   1e8c0:	f04f 0b10 	movcs.w	fp, #16
   1e8c4:	4630      	mov	r0, r6
   1e8c6:	465a      	mov	r2, fp
   1e8c8:	4639      	mov	r1, r7
   1e8ca:	f002 fe2c 	bl	21526 <memcpy>
   1e8ce:	ebb5 050b 	subs.w	r5, r5, fp
   1e8d2:	445e      	add	r6, fp
   1e8d4:	f000 8085 	beq.w	1e9e2 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1e8d8:	7be3      	ldrb	r3, [r4, #15]
   1e8da:	3301      	adds	r3, #1
   1e8dc:	b2db      	uxtb	r3, r3
   1e8de:	73e3      	strb	r3, [r4, #15]
   1e8e0:	2b00      	cmp	r3, #0
   1e8e2:	d14d      	bne.n	1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e8e4:	7ba3      	ldrb	r3, [r4, #14]
   1e8e6:	3301      	adds	r3, #1
   1e8e8:	b2db      	uxtb	r3, r3
   1e8ea:	73a3      	strb	r3, [r4, #14]
   1e8ec:	2b00      	cmp	r3, #0
   1e8ee:	d147      	bne.n	1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e8f0:	7b63      	ldrb	r3, [r4, #13]
   1e8f2:	3301      	adds	r3, #1
   1e8f4:	b2db      	uxtb	r3, r3
   1e8f6:	7363      	strb	r3, [r4, #13]
   1e8f8:	2b00      	cmp	r3, #0
   1e8fa:	d141      	bne.n	1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e8fc:	7b23      	ldrb	r3, [r4, #12]
   1e8fe:	3301      	adds	r3, #1
   1e900:	b2db      	uxtb	r3, r3
   1e902:	7323      	strb	r3, [r4, #12]
   1e904:	2b00      	cmp	r3, #0
   1e906:	d13b      	bne.n	1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e908:	7ae3      	ldrb	r3, [r4, #11]
   1e90a:	3301      	adds	r3, #1
   1e90c:	b2db      	uxtb	r3, r3
   1e90e:	72e3      	strb	r3, [r4, #11]
   1e910:	2b00      	cmp	r3, #0
   1e912:	d135      	bne.n	1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e914:	7aa3      	ldrb	r3, [r4, #10]
   1e916:	3301      	adds	r3, #1
   1e918:	b2db      	uxtb	r3, r3
   1e91a:	72a3      	strb	r3, [r4, #10]
   1e91c:	2b00      	cmp	r3, #0
   1e91e:	d12f      	bne.n	1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e920:	7a63      	ldrb	r3, [r4, #9]
   1e922:	3301      	adds	r3, #1
   1e924:	b2db      	uxtb	r3, r3
   1e926:	7263      	strb	r3, [r4, #9]
   1e928:	bb53      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e92a:	7a23      	ldrb	r3, [r4, #8]
   1e92c:	3301      	adds	r3, #1
   1e92e:	b2db      	uxtb	r3, r3
   1e930:	7223      	strb	r3, [r4, #8]
   1e932:	bb2b      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e934:	79e3      	ldrb	r3, [r4, #7]
   1e936:	3301      	adds	r3, #1
   1e938:	b2db      	uxtb	r3, r3
   1e93a:	71e3      	strb	r3, [r4, #7]
   1e93c:	bb03      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e93e:	79a3      	ldrb	r3, [r4, #6]
   1e940:	3301      	adds	r3, #1
   1e942:	b2db      	uxtb	r3, r3
   1e944:	71a3      	strb	r3, [r4, #6]
   1e946:	b9db      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e948:	7963      	ldrb	r3, [r4, #5]
   1e94a:	3301      	adds	r3, #1
   1e94c:	b2db      	uxtb	r3, r3
   1e94e:	7163      	strb	r3, [r4, #5]
   1e950:	b9b3      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e952:	7923      	ldrb	r3, [r4, #4]
   1e954:	3301      	adds	r3, #1
   1e956:	b2db      	uxtb	r3, r3
   1e958:	7123      	strb	r3, [r4, #4]
   1e95a:	b98b      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e95c:	78e3      	ldrb	r3, [r4, #3]
   1e95e:	3301      	adds	r3, #1
   1e960:	b2db      	uxtb	r3, r3
   1e962:	70e3      	strb	r3, [r4, #3]
   1e964:	b963      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e966:	78a3      	ldrb	r3, [r4, #2]
   1e968:	3301      	adds	r3, #1
   1e96a:	b2db      	uxtb	r3, r3
   1e96c:	70a3      	strb	r3, [r4, #2]
   1e96e:	b93b      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e970:	7863      	ldrb	r3, [r4, #1]
   1e972:	3301      	adds	r3, #1
   1e974:	b2db      	uxtb	r3, r3
   1e976:	7063      	strb	r3, [r4, #1]
   1e978:	b913      	cbnz	r3, 1e980 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1e97a:	7823      	ldrb	r3, [r4, #0]
   1e97c:	3301      	adds	r3, #1
   1e97e:	7023      	strb	r3, [r4, #0]
   1e980:	463b      	mov	r3, r7
   1e982:	4622      	mov	r2, r4
   1e984:	2101      	movs	r1, #1
   1e986:	4640      	mov	r0, r8
   1e988:	f000 fb5e 	bl	1f048 <cc_mbedtls_aes_crypt_ecb>
   1e98c:	4683      	mov	fp, r0
   1e98e:	2800      	cmp	r0, #0
   1e990:	d093      	beq.n	1e8ba <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1e992:	f8da 3000 	ldr.w	r3, [sl]
   1e996:	4648      	mov	r0, r9
   1e998:	4798      	blx	r3
   1e99a:	2120      	movs	r1, #32
   1e99c:	4603      	mov	r3, r0
   1e99e:	a804      	add	r0, sp, #16
   1e9a0:	2b00      	cmp	r3, #0
   1e9a2:	bf18      	it	ne
   1e9a4:	469b      	movne	fp, r3
   1e9a6:	f7ff fb13 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e9aa:	4638      	mov	r0, r7
   1e9ac:	2110      	movs	r1, #16
   1e9ae:	f7ff fb0f 	bl	1dfd0 <mbedtls_platform_zeroize>
   1e9b2:	4658      	mov	r0, fp
   1e9b4:	b00d      	add	sp, #52	; 0x34
   1e9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9ba:	4642      	mov	r2, r8
   1e9bc:	4639      	mov	r1, r7
   1e9be:	2300      	movs	r3, #0
   1e9c0:	4620      	mov	r0, r4
   1e9c2:	f7ff fe7f 	bl	1e6c4 <mbedtls_ctr_drbg_reseed_internal>
   1e9c6:	f8df a068 	ldr.w	sl, [pc, #104]	; 1ea30 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1e9ca:	2800      	cmp	r0, #0
   1e9cc:	f43f af6d 	beq.w	1e8aa <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1e9d0:	f8da 3000 	ldr.w	r3, [sl]
   1e9d4:	4648      	mov	r0, r9
   1e9d6:	4798      	blx	r3
   1e9d8:	4683      	mov	fp, r0
   1e9da:	2800      	cmp	r0, #0
   1e9dc:	f43f af65 	beq.w	1e8aa <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1e9e0:	e7e7      	b.n	1e9b2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1e9e2:	a904      	add	r1, sp, #16
   1e9e4:	4620      	mov	r0, r4
   1e9e6:	f7ff fdc7 	bl	1e578 <ctr_drbg_update_internal>
   1e9ea:	4683      	mov	fp, r0
   1e9ec:	2800      	cmp	r0, #0
   1e9ee:	d1d0      	bne.n	1e992 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1e9f0:	6923      	ldr	r3, [r4, #16]
   1e9f2:	3301      	adds	r3, #1
   1e9f4:	6123      	str	r3, [r4, #16]
   1e9f6:	e7cc      	b.n	1e992 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1e9f8:	4642      	mov	r2, r8
   1e9fa:	4639      	mov	r1, r7
   1e9fc:	a804      	add	r0, sp, #16
   1e9fe:	f7ff fc7b 	bl	1e2f8 <block_cipher_df>
   1ea02:	4683      	mov	fp, r0
   1ea04:	b118      	cbz	r0, 1ea0e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1ea06:	f8df a028 	ldr.w	sl, [pc, #40]	; 1ea30 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1ea0a:	466f      	mov	r7, sp
   1ea0c:	e7c1      	b.n	1e992 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1ea0e:	a904      	add	r1, sp, #16
   1ea10:	4620      	mov	r0, r4
   1ea12:	f7ff fdb1 	bl	1e578 <ctr_drbg_update_internal>
   1ea16:	4683      	mov	fp, r0
   1ea18:	2800      	cmp	r0, #0
   1ea1a:	f43f af44 	beq.w	1e8a6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1ea1e:	e7f2      	b.n	1ea06 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1ea20:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1ea24:	e7c5      	b.n	1e9b2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ea26:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1ea2a:	e7c2      	b.n	1e9b2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1ea2c:	20033af0 	.word	0x20033af0
   1ea30:	20033af4 	.word	0x20033af4

0001ea34 <cc_mbedtls_sha256_ret>:
   1ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea36:	461c      	mov	r4, r3
   1ea38:	4605      	mov	r5, r0
   1ea3a:	4811      	ldr	r0, [pc, #68]	; (1ea80 <cc_mbedtls_sha256_ret+0x4c>)
   1ea3c:	460e      	mov	r6, r1
   1ea3e:	4617      	mov	r7, r2
   1ea40:	f7ff fb4e 	bl	1e0e0 <cc_mbedtls_sha256_init>
   1ea44:	4621      	mov	r1, r4
   1ea46:	480e      	ldr	r0, [pc, #56]	; (1ea80 <cc_mbedtls_sha256_ret+0x4c>)
   1ea48:	f7ff fb64 	bl	1e114 <cc_mbedtls_sha256_starts_ret>
   1ea4c:	4604      	mov	r4, r0
   1ea4e:	b120      	cbz	r0, 1ea5a <cc_mbedtls_sha256_ret+0x26>
   1ea50:	480b      	ldr	r0, [pc, #44]	; (1ea80 <cc_mbedtls_sha256_ret+0x4c>)
   1ea52:	f7ff fb59 	bl	1e108 <cc_mbedtls_sha256_free>
   1ea56:	4620      	mov	r0, r4
   1ea58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea5a:	4809      	ldr	r0, [pc, #36]	; (1ea80 <cc_mbedtls_sha256_ret+0x4c>)
   1ea5c:	4632      	mov	r2, r6
   1ea5e:	4629      	mov	r1, r5
   1ea60:	f7ff fb6c 	bl	1e13c <cc_mbedtls_sha256_update_ret>
   1ea64:	4604      	mov	r4, r0
   1ea66:	2800      	cmp	r0, #0
   1ea68:	d1f2      	bne.n	1ea50 <cc_mbedtls_sha256_ret+0x1c>
   1ea6a:	4639      	mov	r1, r7
   1ea6c:	4804      	ldr	r0, [pc, #16]	; (1ea80 <cc_mbedtls_sha256_ret+0x4c>)
   1ea6e:	f7ff fb6d 	bl	1e14c <cc_mbedtls_sha256_finish_ret>
   1ea72:	4604      	mov	r4, r0
   1ea74:	4802      	ldr	r0, [pc, #8]	; (1ea80 <cc_mbedtls_sha256_ret+0x4c>)
   1ea76:	f7ff fb47 	bl	1e108 <cc_mbedtls_sha256_free>
   1ea7a:	4620      	mov	r0, r4
   1ea7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea7e:	bf00      	nop
   1ea80:	20038028 	.word	0x20038028

0001ea84 <RNG_PLAT_SetUserRngParameters>:
   1ea84:	b530      	push	{r4, r5, lr}
   1ea86:	b083      	sub	sp, #12
   1ea88:	231c      	movs	r3, #28
   1ea8a:	a901      	add	r1, sp, #4
   1ea8c:	4604      	mov	r4, r0
   1ea8e:	9301      	str	r3, [sp, #4]
   1ea90:	f000 f83c 	bl	1eb0c <CC_PalTrngParamGet>
   1ea94:	4605      	mov	r5, r0
   1ea96:	b938      	cbnz	r0, 1eaa8 <RNG_PLAT_SetUserRngParameters+0x24>
   1ea98:	9b01      	ldr	r3, [sp, #4]
   1ea9a:	2b1c      	cmp	r3, #28
   1ea9c:	d007      	beq.n	1eaae <RNG_PLAT_SetUserRngParameters+0x2a>
   1ea9e:	4d15      	ldr	r5, [pc, #84]	; (1eaf4 <RNG_PLAT_SetUserRngParameters+0x70>)
   1eaa0:	4620      	mov	r0, r4
   1eaa2:	211c      	movs	r1, #28
   1eaa4:	f000 f82e 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1eaa8:	4628      	mov	r0, r5
   1eaaa:	b003      	add	sp, #12
   1eaac:	bd30      	pop	{r4, r5, pc}
   1eaae:	e9d4 3200 	ldrd	r3, r2, [r4]
   1eab2:	2101      	movs	r1, #1
   1eab4:	3b00      	subs	r3, #0
   1eab6:	bf18      	it	ne
   1eab8:	2301      	movne	r3, #1
   1eaba:	61e1      	str	r1, [r4, #28]
   1eabc:	b10a      	cbz	r2, 1eac2 <RNG_PLAT_SetUserRngParameters+0x3e>
   1eabe:	f043 0302 	orr.w	r3, r3, #2
   1eac2:	68a2      	ldr	r2, [r4, #8]
   1eac4:	b932      	cbnz	r2, 1ead4 <RNG_PLAT_SetUserRngParameters+0x50>
   1eac6:	68e2      	ldr	r2, [r4, #12]
   1eac8:	b942      	cbnz	r2, 1eadc <RNG_PLAT_SetUserRngParameters+0x58>
   1eaca:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1eace:	b97b      	cbnz	r3, 1eaf0 <RNG_PLAT_SetUserRngParameters+0x6c>
   1ead0:	4d09      	ldr	r5, [pc, #36]	; (1eaf8 <RNG_PLAT_SetUserRngParameters+0x74>)
   1ead2:	e7e5      	b.n	1eaa0 <RNG_PLAT_SetUserRngParameters+0x1c>
   1ead4:	68e2      	ldr	r2, [r4, #12]
   1ead6:	f043 0304 	orr.w	r3, r3, #4
   1eada:	b13a      	cbz	r2, 1eaec <RNG_PLAT_SetUserRngParameters+0x68>
   1eadc:	f043 0308 	orr.w	r3, r3, #8
   1eae0:	2200      	movs	r2, #0
   1eae2:	4628      	mov	r0, r5
   1eae4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1eae8:	b003      	add	sp, #12
   1eaea:	bd30      	pop	{r4, r5, pc}
   1eaec:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1eaf0:	4615      	mov	r5, r2
   1eaf2:	e7d9      	b.n	1eaa8 <RNG_PLAT_SetUserRngParameters+0x24>
   1eaf4:	00f00c37 	.word	0x00f00c37
   1eaf8:	00f00c0e 	.word	0x00f00c0e

0001eafc <CC_PalMemCopyPlat>:
   1eafc:	f002 bcfd 	b.w	214fa <memmove>

0001eb00 <CC_PalMemSetPlat>:
   1eb00:	f002 bd35 	b.w	2156e <memset>

0001eb04 <CC_PalMemSetZeroPlat>:
   1eb04:	460a      	mov	r2, r1
   1eb06:	2100      	movs	r1, #0
   1eb08:	f002 bd31 	b.w	2156e <memset>

0001eb0c <CC_PalTrngParamGet>:
   1eb0c:	b118      	cbz	r0, 1eb16 <CC_PalTrngParamGet+0xa>
   1eb0e:	b111      	cbz	r1, 1eb16 <CC_PalTrngParamGet+0xa>
   1eb10:	680b      	ldr	r3, [r1, #0]
   1eb12:	2b1c      	cmp	r3, #28
   1eb14:	d001      	beq.n	1eb1a <CC_PalTrngParamGet+0xe>
   1eb16:	2001      	movs	r0, #1
   1eb18:	4770      	bx	lr
   1eb1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb1e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1eb22:	3201      	adds	r2, #1
   1eb24:	bf14      	ite	ne
   1eb26:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1eb2a:	f241 225c 	movweq	r2, #4700	; 0x125c
   1eb2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb32:	6002      	str	r2, [r0, #0]
   1eb34:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1eb38:	3201      	adds	r2, #1
   1eb3a:	bf14      	ite	ne
   1eb3c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1eb40:	f641 1264 	movweq	r2, #6500	; 0x1964
   1eb44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb48:	6042      	str	r2, [r0, #4]
   1eb4a:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1eb4e:	3201      	adds	r2, #1
   1eb50:	bf14      	ite	ne
   1eb52:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1eb56:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1eb5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb5e:	6082      	str	r2, [r0, #8]
   1eb60:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1eb64:	3201      	adds	r2, #1
   1eb66:	bf14      	ite	ne
   1eb68:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1eb6c:	f241 3288 	movweq	r2, #5000	; 0x1388
   1eb70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb74:	60c2      	str	r2, [r0, #12]
   1eb76:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1eb7a:	3201      	adds	r2, #1
   1eb7c:	bf14      	ite	ne
   1eb7e:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1eb82:	2290      	moveq	r2, #144	; 0x90
   1eb84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb88:	6102      	str	r2, [r0, #16]
   1eb8a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1eb8e:	3201      	adds	r2, #1
   1eb90:	bf14      	ite	ne
   1eb92:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1eb96:	2251      	moveq	r2, #81	; 0x51
   1eb98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eb9c:	6142      	str	r2, [r0, #20]
   1eb9e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1eba2:	3201      	adds	r2, #1
   1eba4:	bf14      	ite	ne
   1eba6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1ebaa:	f240 3337 	movweq	r3, #823	; 0x337
   1ebae:	6183      	str	r3, [r0, #24]
   1ebb0:	2000      	movs	r0, #0
   1ebb2:	4770      	bx	lr

0001ebb4 <LLF_RND_WaitRngInterrupt>:
   1ebb4:	b508      	push	{r3, lr}
   1ebb6:	4601      	mov	r1, r0
   1ebb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1ebbc:	f7fe fe32 	bl	1d824 <CC_HalWaitInterruptRND>
   1ebc0:	4902      	ldr	r1, [pc, #8]	; (1ebcc <LLF_RND_WaitRngInterrupt+0x18>)
   1ebc2:	4a03      	ldr	r2, [pc, #12]	; (1ebd0 <LLF_RND_WaitRngInterrupt+0x1c>)
   1ebc4:	2300      	movs	r3, #0
   1ebc6:	600b      	str	r3, [r1, #0]
   1ebc8:	6013      	str	r3, [r2, #0]
   1ebca:	bd08      	pop	{r3, pc}
   1ebcc:	5002b1c8 	.word	0x5002b1c8
   1ebd0:	5002b12c 	.word	0x5002b12c

0001ebd4 <LLF_RND_GetRoscSampleCnt>:
   1ebd4:	3801      	subs	r0, #1
   1ebd6:	2807      	cmp	r0, #7
   1ebd8:	d805      	bhi.n	1ebe6 <LLF_RND_GetRoscSampleCnt+0x12>
   1ebda:	e8df f000 	tbb	[pc, r0]
   1ebde:	0e0a      	.short	0x0e0a
   1ebe0:	04041204 	.word	0x04041204
   1ebe4:	0604      	.short	0x0604
   1ebe6:	4809      	ldr	r0, [pc, #36]	; (1ec0c <LLF_RND_GetRoscSampleCnt+0x38>)
   1ebe8:	4770      	bx	lr
   1ebea:	68cb      	ldr	r3, [r1, #12]
   1ebec:	624b      	str	r3, [r1, #36]	; 0x24
   1ebee:	2000      	movs	r0, #0
   1ebf0:	4770      	bx	lr
   1ebf2:	680b      	ldr	r3, [r1, #0]
   1ebf4:	624b      	str	r3, [r1, #36]	; 0x24
   1ebf6:	2000      	movs	r0, #0
   1ebf8:	4770      	bx	lr
   1ebfa:	684b      	ldr	r3, [r1, #4]
   1ebfc:	624b      	str	r3, [r1, #36]	; 0x24
   1ebfe:	2000      	movs	r0, #0
   1ec00:	4770      	bx	lr
   1ec02:	688b      	ldr	r3, [r1, #8]
   1ec04:	624b      	str	r3, [r1, #36]	; 0x24
   1ec06:	2000      	movs	r0, #0
   1ec08:	4770      	bx	lr
   1ec0a:	bf00      	nop
   1ec0c:	00f10c31 	.word	0x00f10c31

0001ec10 <LLF_RND_GetFastestRosc>:
   1ec10:	680b      	ldr	r3, [r1, #0]
   1ec12:	e002      	b.n	1ec1a <LLF_RND_GetFastestRosc+0xa>
   1ec14:	2b08      	cmp	r3, #8
   1ec16:	600b      	str	r3, [r1, #0]
   1ec18:	d806      	bhi.n	1ec28 <LLF_RND_GetFastestRosc+0x18>
   1ec1a:	6a02      	ldr	r2, [r0, #32]
   1ec1c:	4213      	tst	r3, r2
   1ec1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ec22:	d0f7      	beq.n	1ec14 <LLF_RND_GetFastestRosc+0x4>
   1ec24:	2000      	movs	r0, #0
   1ec26:	4770      	bx	lr
   1ec28:	4800      	ldr	r0, [pc, #0]	; (1ec2c <LLF_RND_GetFastestRosc+0x1c>)
   1ec2a:	4770      	bx	lr
   1ec2c:	00f10c31 	.word	0x00f10c31

0001ec30 <LLF_RND_TurnOffTrng>:
   1ec30:	4904      	ldr	r1, [pc, #16]	; (1ec44 <LLF_RND_TurnOffTrng+0x14>)
   1ec32:	4a05      	ldr	r2, [pc, #20]	; (1ec48 <LLF_RND_TurnOffTrng+0x18>)
   1ec34:	2300      	movs	r3, #0
   1ec36:	600b      	str	r3, [r1, #0]
   1ec38:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1ec3c:	6013      	str	r3, [r2, #0]
   1ec3e:	f7fe bdd7 	b.w	1d7f0 <CC_HalClearInterruptBit>
   1ec42:	bf00      	nop
   1ec44:	5002b12c 	.word	0x5002b12c
   1ec48:	5002b1c4 	.word	0x5002b1c4

0001ec4c <SetDataBuffersInfo>:
   1ec4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec4e:	b083      	sub	sp, #12
   1ec50:	2400      	movs	r4, #0
   1ec52:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1ec56:	f88d 4007 	strb.w	r4, [sp, #7]
   1ec5a:	d325      	bcc.n	1eca8 <SetDataBuffersInfo+0x5c>
   1ec5c:	460c      	mov	r4, r1
   1ec5e:	4404      	add	r4, r0
   1ec60:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1ec64:	4605      	mov	r5, r0
   1ec66:	d81f      	bhi.n	1eca8 <SetDataBuffersInfo+0x5c>
   1ec68:	4617      	mov	r7, r2
   1ec6a:	461e      	mov	r6, r3
   1ec6c:	2201      	movs	r2, #1
   1ec6e:	f10d 0307 	add.w	r3, sp, #7
   1ec72:	f000 fa13 	bl	1f09c <CC_PalDataBufferAttrGet>
   1ec76:	4604      	mov	r4, r0
   1ec78:	b9b0      	cbnz	r0, 1eca8 <SetDataBuffersInfo+0x5c>
   1ec7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ec7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ec80:	603d      	str	r5, [r7, #0]
   1ec82:	713b      	strb	r3, [r7, #4]
   1ec84:	b192      	cbz	r2, 1ecac <SetDataBuffersInfo+0x60>
   1ec86:	b14e      	cbz	r6, 1ec9c <SetDataBuffersInfo+0x50>
   1ec88:	4602      	mov	r2, r0
   1ec8a:	9908      	ldr	r1, [sp, #32]
   1ec8c:	f10d 0307 	add.w	r3, sp, #7
   1ec90:	4630      	mov	r0, r6
   1ec92:	f000 fa03 	bl	1f09c <CC_PalDataBufferAttrGet>
   1ec96:	b938      	cbnz	r0, 1eca8 <SetDataBuffersInfo+0x5c>
   1ec98:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ec9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ec9e:	4620      	mov	r0, r4
   1eca0:	6016      	str	r6, [r2, #0]
   1eca2:	7113      	strb	r3, [r2, #4]
   1eca4:	b003      	add	sp, #12
   1eca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eca8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1ecac:	4620      	mov	r0, r4
   1ecae:	b003      	add	sp, #12
   1ecb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ecb2:	bf00      	nop

0001ecb4 <InitHashDrv>:
   1ecb4:	b1e8      	cbz	r0, 1ecf2 <InitHashDrv+0x3e>
   1ecb6:	b510      	push	{r4, lr}
   1ecb8:	6804      	ldr	r4, [r0, #0]
   1ecba:	2c01      	cmp	r4, #1
   1ecbc:	d004      	beq.n	1ecc8 <InitHashDrv+0x14>
   1ecbe:	2c02      	cmp	r4, #2
   1ecc0:	d010      	beq.n	1ece4 <InitHashDrv+0x30>
   1ecc2:	b144      	cbz	r4, 1ecd6 <InitHashDrv+0x22>
   1ecc4:	480c      	ldr	r0, [pc, #48]	; (1ecf8 <InitHashDrv+0x44>)
   1ecc6:	bd10      	pop	{r4, pc}
   1ecc8:	490c      	ldr	r1, [pc, #48]	; (1ecfc <InitHashDrv+0x48>)
   1ecca:	2220      	movs	r2, #32
   1eccc:	3008      	adds	r0, #8
   1ecce:	f7ff ff15 	bl	1eafc <CC_PalMemCopyPlat>
   1ecd2:	2000      	movs	r0, #0
   1ecd4:	bd10      	pop	{r4, pc}
   1ecd6:	490a      	ldr	r1, [pc, #40]	; (1ed00 <InitHashDrv+0x4c>)
   1ecd8:	2214      	movs	r2, #20
   1ecda:	3008      	adds	r0, #8
   1ecdc:	f7ff ff0e 	bl	1eafc <CC_PalMemCopyPlat>
   1ece0:	4620      	mov	r0, r4
   1ece2:	bd10      	pop	{r4, pc}
   1ece4:	4907      	ldr	r1, [pc, #28]	; (1ed04 <InitHashDrv+0x50>)
   1ece6:	2220      	movs	r2, #32
   1ece8:	3008      	adds	r0, #8
   1ecea:	f7ff ff07 	bl	1eafc <CC_PalMemCopyPlat>
   1ecee:	2000      	movs	r0, #0
   1ecf0:	bd10      	pop	{r4, pc}
   1ecf2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1ecf6:	4770      	bx	lr
   1ecf8:	00f30001 	.word	0x00f30001
   1ecfc:	00027a80 	.word	0x00027a80
   1ed00:	00027a4c 	.word	0x00027a4c
   1ed04:	00027a60 	.word	0x00027a60

0001ed08 <ProcessHashDrv>:
   1ed08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed0c:	2900      	cmp	r1, #0
   1ed0e:	f000 80ef 	beq.w	1eef0 <ProcessHashDrv+0x1e8>
   1ed12:	4604      	mov	r4, r0
   1ed14:	2800      	cmp	r0, #0
   1ed16:	f000 80ef 	beq.w	1eef8 <ProcessHashDrv+0x1f0>
   1ed1a:	6803      	ldr	r3, [r0, #0]
   1ed1c:	4617      	mov	r7, r2
   1ed1e:	460e      	mov	r6, r1
   1ed20:	2b00      	cmp	r3, #0
   1ed22:	f000 80b9 	beq.w	1ee98 <ProcessHashDrv+0x190>
   1ed26:	3b01      	subs	r3, #1
   1ed28:	2b01      	cmp	r3, #1
   1ed2a:	f200 80cd 	bhi.w	1eec8 <ProcessHashDrv+0x1c0>
   1ed2e:	4874      	ldr	r0, [pc, #464]	; (1ef00 <ProcessHashDrv+0x1f8>)
   1ed30:	f04f 31ff 	mov.w	r1, #4294967295
   1ed34:	f04f 0802 	mov.w	r8, #2
   1ed38:	f7fe fe02 	bl	1d940 <CC_PalMutexLock>
   1ed3c:	2800      	cmp	r0, #0
   1ed3e:	f040 80b5 	bne.w	1eeac <ProcessHashDrv+0x1a4>
   1ed42:	2000      	movs	r0, #0
   1ed44:	f7fe fe2c 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1ed48:	4605      	mov	r5, r0
   1ed4a:	2800      	cmp	r0, #0
   1ed4c:	f040 80b8 	bne.w	1eec0 <ProcessHashDrv+0x1b8>
   1ed50:	4a6c      	ldr	r2, [pc, #432]	; (1ef04 <ProcessHashDrv+0x1fc>)
   1ed52:	6813      	ldr	r3, [r2, #0]
   1ed54:	2b00      	cmp	r3, #0
   1ed56:	d1fc      	bne.n	1ed52 <ProcessHashDrv+0x4a>
   1ed58:	486b      	ldr	r0, [pc, #428]	; (1ef08 <ProcessHashDrv+0x200>)
   1ed5a:	6803      	ldr	r3, [r0, #0]
   1ed5c:	2b00      	cmp	r3, #0
   1ed5e:	d1fc      	bne.n	1ed5a <ProcessHashDrv+0x52>
   1ed60:	f04f 30ff 	mov.w	r0, #4294967295
   1ed64:	f7fe fd44 	bl	1d7f0 <CC_HalClearInterruptBit>
   1ed68:	4b68      	ldr	r3, [pc, #416]	; (1ef0c <ProcessHashDrv+0x204>)
   1ed6a:	6818      	ldr	r0, [r3, #0]
   1ed6c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1ed70:	f7fe fd4c 	bl	1d80c <CC_HalMaskInterrupt>
   1ed74:	4866      	ldr	r0, [pc, #408]	; (1ef10 <ProcessHashDrv+0x208>)
   1ed76:	4a67      	ldr	r2, [pc, #412]	; (1ef14 <ProcessHashDrv+0x20c>)
   1ed78:	4967      	ldr	r1, [pc, #412]	; (1ef18 <ProcessHashDrv+0x210>)
   1ed7a:	2301      	movs	r3, #1
   1ed7c:	6003      	str	r3, [r0, #0]
   1ed7e:	2007      	movs	r0, #7
   1ed80:	6010      	str	r0, [r2, #0]
   1ed82:	600b      	str	r3, [r1, #0]
   1ed84:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1ed88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1ed8a:	6013      	str	r3, [r2, #0]
   1ed8c:	4b63      	ldr	r3, [pc, #396]	; (1ef1c <ProcessHashDrv+0x214>)
   1ed8e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1ed90:	6051      	str	r1, [r2, #4]
   1ed92:	f8c3 8000 	str.w	r8, [r3]
   1ed96:	6823      	ldr	r3, [r4, #0]
   1ed98:	b15b      	cbz	r3, 1edb2 <ProcessHashDrv+0xaa>
   1ed9a:	3b01      	subs	r3, #1
   1ed9c:	2b01      	cmp	r3, #1
   1ed9e:	d817      	bhi.n	1edd0 <ProcessHashDrv+0xc8>
   1eda0:	4b5f      	ldr	r3, [pc, #380]	; (1ef20 <ProcessHashDrv+0x218>)
   1eda2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1eda4:	601a      	str	r2, [r3, #0]
   1eda6:	6a22      	ldr	r2, [r4, #32]
   1eda8:	f843 2c04 	str.w	r2, [r3, #-4]
   1edac:	69e2      	ldr	r2, [r4, #28]
   1edae:	f843 2c08 	str.w	r2, [r3, #-8]
   1edb2:	4b5c      	ldr	r3, [pc, #368]	; (1ef24 <ProcessHashDrv+0x21c>)
   1edb4:	69a2      	ldr	r2, [r4, #24]
   1edb6:	601a      	str	r2, [r3, #0]
   1edb8:	6962      	ldr	r2, [r4, #20]
   1edba:	f843 2c04 	str.w	r2, [r3, #-4]
   1edbe:	6922      	ldr	r2, [r4, #16]
   1edc0:	f843 2c08 	str.w	r2, [r3, #-8]
   1edc4:	68e2      	ldr	r2, [r4, #12]
   1edc6:	f843 2c0c 	str.w	r2, [r3, #-12]
   1edca:	68a2      	ldr	r2, [r4, #8]
   1edcc:	f843 2c10 	str.w	r2, [r3, #-16]
   1edd0:	4a55      	ldr	r2, [pc, #340]	; (1ef28 <ProcessHashDrv+0x220>)
   1edd2:	6813      	ldr	r3, [r2, #0]
   1edd4:	2b00      	cmp	r3, #0
   1edd6:	d1fc      	bne.n	1edd2 <ProcessHashDrv+0xca>
   1edd8:	2f00      	cmp	r7, #0
   1edda:	d059      	beq.n	1ee90 <ProcessHashDrv+0x188>
   1eddc:	6863      	ldr	r3, [r4, #4]
   1edde:	2b01      	cmp	r3, #1
   1ede0:	bf04      	itt	eq
   1ede2:	4a52      	ldreq	r2, [pc, #328]	; (1ef2c <ProcessHashDrv+0x224>)
   1ede4:	6013      	streq	r3, [r2, #0]
   1ede6:	4a52      	ldr	r2, [pc, #328]	; (1ef30 <ProcessHashDrv+0x228>)
   1ede8:	4b52      	ldr	r3, [pc, #328]	; (1ef34 <ProcessHashDrv+0x22c>)
   1edea:	6831      	ldr	r1, [r6, #0]
   1edec:	6011      	str	r1, [r2, #0]
   1edee:	2040      	movs	r0, #64	; 0x40
   1edf0:	601f      	str	r7, [r3, #0]
   1edf2:	f7fe fd11 	bl	1d818 <CC_HalWaitInterrupt>
   1edf6:	4605      	mov	r5, r0
   1edf8:	4a4b      	ldr	r2, [pc, #300]	; (1ef28 <ProcessHashDrv+0x220>)
   1edfa:	6813      	ldr	r3, [r2, #0]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	d1fc      	bne.n	1edfa <ProcessHashDrv+0xf2>
   1ee00:	4a41      	ldr	r2, [pc, #260]	; (1ef08 <ProcessHashDrv+0x200>)
   1ee02:	6813      	ldr	r3, [r2, #0]
   1ee04:	2b00      	cmp	r3, #0
   1ee06:	d1fc      	bne.n	1ee02 <ProcessHashDrv+0xfa>
   1ee08:	6823      	ldr	r3, [r4, #0]
   1ee0a:	b15b      	cbz	r3, 1ee24 <ProcessHashDrv+0x11c>
   1ee0c:	3b01      	subs	r3, #1
   1ee0e:	2b01      	cmp	r3, #1
   1ee10:	d817      	bhi.n	1ee42 <ProcessHashDrv+0x13a>
   1ee12:	4a43      	ldr	r2, [pc, #268]	; (1ef20 <ProcessHashDrv+0x218>)
   1ee14:	4b48      	ldr	r3, [pc, #288]	; (1ef38 <ProcessHashDrv+0x230>)
   1ee16:	6812      	ldr	r2, [r2, #0]
   1ee18:	6262      	str	r2, [r4, #36]	; 0x24
   1ee1a:	681a      	ldr	r2, [r3, #0]
   1ee1c:	6222      	str	r2, [r4, #32]
   1ee1e:	3b04      	subs	r3, #4
   1ee20:	681b      	ldr	r3, [r3, #0]
   1ee22:	61e3      	str	r3, [r4, #28]
   1ee24:	4a3f      	ldr	r2, [pc, #252]	; (1ef24 <ProcessHashDrv+0x21c>)
   1ee26:	4b45      	ldr	r3, [pc, #276]	; (1ef3c <ProcessHashDrv+0x234>)
   1ee28:	6812      	ldr	r2, [r2, #0]
   1ee2a:	61a2      	str	r2, [r4, #24]
   1ee2c:	681a      	ldr	r2, [r3, #0]
   1ee2e:	6162      	str	r2, [r4, #20]
   1ee30:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1ee34:	6122      	str	r2, [r4, #16]
   1ee36:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1ee3a:	60e2      	str	r2, [r4, #12]
   1ee3c:	3b0c      	subs	r3, #12
   1ee3e:	681b      	ldr	r3, [r3, #0]
   1ee40:	60a3      	str	r3, [r4, #8]
   1ee42:	4b3f      	ldr	r3, [pc, #252]	; (1ef40 <ProcessHashDrv+0x238>)
   1ee44:	4a3f      	ldr	r2, [pc, #252]	; (1ef44 <ProcessHashDrv+0x23c>)
   1ee46:	681b      	ldr	r3, [r3, #0]
   1ee48:	64a3      	str	r3, [r4, #72]	; 0x48
   1ee4a:	6812      	ldr	r2, [r2, #0]
   1ee4c:	4b32      	ldr	r3, [pc, #200]	; (1ef18 <ProcessHashDrv+0x210>)
   1ee4e:	64e2      	str	r2, [r4, #76]	; 0x4c
   1ee50:	4836      	ldr	r0, [pc, #216]	; (1ef2c <ProcessHashDrv+0x224>)
   1ee52:	493d      	ldr	r1, [pc, #244]	; (1ef48 <ProcessHashDrv+0x240>)
   1ee54:	2201      	movs	r2, #1
   1ee56:	601a      	str	r2, [r3, #0]
   1ee58:	2300      	movs	r3, #0
   1ee5a:	4a33      	ldr	r2, [pc, #204]	; (1ef28 <ProcessHashDrv+0x220>)
   1ee5c:	6003      	str	r3, [r0, #0]
   1ee5e:	600b      	str	r3, [r1, #0]
   1ee60:	6813      	ldr	r3, [r2, #0]
   1ee62:	2b00      	cmp	r3, #0
   1ee64:	d1fc      	bne.n	1ee60 <ProcessHashDrv+0x158>
   1ee66:	4a2a      	ldr	r2, [pc, #168]	; (1ef10 <ProcessHashDrv+0x208>)
   1ee68:	6013      	str	r3, [r2, #0]
   1ee6a:	2d00      	cmp	r5, #0
   1ee6c:	d13a      	bne.n	1eee4 <ProcessHashDrv+0x1dc>
   1ee6e:	4b27      	ldr	r3, [pc, #156]	; (1ef0c <ProcessHashDrv+0x204>)
   1ee70:	6818      	ldr	r0, [r3, #0]
   1ee72:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1ee76:	f7fe fcc9 	bl	1d80c <CC_HalMaskInterrupt>
   1ee7a:	2001      	movs	r0, #1
   1ee7c:	f7fe fd90 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1ee80:	bb60      	cbnz	r0, 1eedc <ProcessHashDrv+0x1d4>
   1ee82:	481f      	ldr	r0, [pc, #124]	; (1ef00 <ProcessHashDrv+0x1f8>)
   1ee84:	f7fe fd64 	bl	1d950 <CC_PalMutexUnlock>
   1ee88:	bb10      	cbnz	r0, 1eed0 <ProcessHashDrv+0x1c8>
   1ee8a:	4628      	mov	r0, r5
   1ee8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee90:	4b2d      	ldr	r3, [pc, #180]	; (1ef48 <ProcessHashDrv+0x240>)
   1ee92:	2204      	movs	r2, #4
   1ee94:	601a      	str	r2, [r3, #0]
   1ee96:	e7af      	b.n	1edf8 <ProcessHashDrv+0xf0>
   1ee98:	4819      	ldr	r0, [pc, #100]	; (1ef00 <ProcessHashDrv+0x1f8>)
   1ee9a:	f04f 31ff 	mov.w	r1, #4294967295
   1ee9e:	f04f 0801 	mov.w	r8, #1
   1eea2:	f7fe fd4d 	bl	1d940 <CC_PalMutexLock>
   1eea6:	2800      	cmp	r0, #0
   1eea8:	f43f af4b 	beq.w	1ed42 <ProcessHashDrv+0x3a>
   1eeac:	4827      	ldr	r0, [pc, #156]	; (1ef4c <ProcessHashDrv+0x244>)
   1eeae:	f7fe f9b1 	bl	1d214 <CC_PalAbort>
   1eeb2:	2000      	movs	r0, #0
   1eeb4:	f7fe fd74 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1eeb8:	4605      	mov	r5, r0
   1eeba:	2800      	cmp	r0, #0
   1eebc:	f43f af48 	beq.w	1ed50 <ProcessHashDrv+0x48>
   1eec0:	4823      	ldr	r0, [pc, #140]	; (1ef50 <ProcessHashDrv+0x248>)
   1eec2:	f7fe f9a7 	bl	1d214 <CC_PalAbort>
   1eec6:	e743      	b.n	1ed50 <ProcessHashDrv+0x48>
   1eec8:	4d22      	ldr	r5, [pc, #136]	; (1ef54 <ProcessHashDrv+0x24c>)
   1eeca:	4628      	mov	r0, r5
   1eecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eed0:	4821      	ldr	r0, [pc, #132]	; (1ef58 <ProcessHashDrv+0x250>)
   1eed2:	f7fe f99f 	bl	1d214 <CC_PalAbort>
   1eed6:	4628      	mov	r0, r5
   1eed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eedc:	481f      	ldr	r0, [pc, #124]	; (1ef5c <ProcessHashDrv+0x254>)
   1eede:	f7fe f999 	bl	1d214 <CC_PalAbort>
   1eee2:	e7ce      	b.n	1ee82 <ProcessHashDrv+0x17a>
   1eee4:	f104 0008 	add.w	r0, r4, #8
   1eee8:	2110      	movs	r1, #16
   1eeea:	f7ff fe0b 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1eeee:	e7be      	b.n	1ee6e <ProcessHashDrv+0x166>
   1eef0:	4d1b      	ldr	r5, [pc, #108]	; (1ef60 <ProcessHashDrv+0x258>)
   1eef2:	4628      	mov	r0, r5
   1eef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eef8:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1eefc:	e7c5      	b.n	1ee8a <ProcessHashDrv+0x182>
   1eefe:	bf00      	nop
   1ef00:	20033ae4 	.word	0x20033ae4
   1ef04:	5002b91c 	.word	0x5002b91c
   1ef08:	5002bc20 	.word	0x5002bc20
   1ef0c:	5002ba04 	.word	0x5002ba04
   1ef10:	5002b818 	.word	0x5002b818
   1ef14:	5002b900 	.word	0x5002b900
   1ef18:	5002b7c4 	.word	0x5002b7c4
   1ef1c:	5002b7c0 	.word	0x5002b7c0
   1ef20:	5002b65c 	.word	0x5002b65c
   1ef24:	5002b650 	.word	0x5002b650
   1ef28:	5002b910 	.word	0x5002b910
   1ef2c:	5002b684 	.word	0x5002b684
   1ef30:	5002bc28 	.word	0x5002bc28
   1ef34:	5002bc2c 	.word	0x5002bc2c
   1ef38:	5002b658 	.word	0x5002b658
   1ef3c:	5002b64c 	.word	0x5002b64c
   1ef40:	5002b7cc 	.word	0x5002b7cc
   1ef44:	5002b7d0 	.word	0x5002b7d0
   1ef48:	5002b7c8 	.word	0x5002b7c8
   1ef4c:	00027994 	.word	0x00027994
   1ef50:	000279ac 	.word	0x000279ac
   1ef54:	00f30001 	.word	0x00f30001
   1ef58:	000279ec 	.word	0x000279ec
   1ef5c:	000279cc 	.word	0x000279cc
   1ef60:	00f30003 	.word	0x00f30003

0001ef64 <FinishHashDrv>:
   1ef64:	2800      	cmp	r0, #0
   1ef66:	d03b      	beq.n	1efe0 <FinishHashDrv+0x7c>
   1ef68:	b4f0      	push	{r4, r5, r6, r7}
   1ef6a:	b082      	sub	sp, #8
   1ef6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ef6e:	9301      	str	r3, [sp, #4]
   1ef70:	6883      	ldr	r3, [r0, #8]
   1ef72:	fa93 fc83 	rev.w	ip, r3
   1ef76:	9b01      	ldr	r3, [sp, #4]
   1ef78:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1ef7c:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1ef80:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1ef84:	ba1b      	rev	r3, r3
   1ef86:	6243      	str	r3, [r0, #36]	; 0x24
   1ef88:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1ef8a:	9301      	str	r3, [sp, #4]
   1ef8c:	ba09      	rev	r1, r1
   1ef8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1ef90:	61c1      	str	r1, [r0, #28]
   1ef92:	ba12      	rev	r2, r2
   1ef94:	6202      	str	r2, [r0, #32]
   1ef96:	ba3f      	rev	r7, r7
   1ef98:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1ef9c:	ba36      	rev	r6, r6
   1ef9e:	ba2d      	rev	r5, r5
   1efa0:	ba24      	rev	r4, r4
   1efa2:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1efa6:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1efaa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1efac:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1efae:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1efb0:	6184      	str	r4, [r0, #24]
   1efb2:	fa93 fc83 	rev.w	ip, r3
   1efb6:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1efb8:	9b01      	ldr	r3, [sp, #4]
   1efba:	ba3f      	rev	r7, r7
   1efbc:	ba36      	rev	r6, r6
   1efbe:	ba2d      	rev	r5, r5
   1efc0:	ba24      	rev	r4, r4
   1efc2:	ba09      	rev	r1, r1
   1efc4:	ba12      	rev	r2, r2
   1efc6:	ba1b      	rev	r3, r3
   1efc8:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1efcc:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1efd0:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1efd4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1efd8:	2000      	movs	r0, #0
   1efda:	b002      	add	sp, #8
   1efdc:	bcf0      	pop	{r4, r5, r6, r7}
   1efde:	4770      	bx	lr
   1efe0:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1efe4:	4770      	bx	lr
   1efe6:	bf00      	nop

0001efe8 <cc_mbedtls_aes_init>:
   1efe8:	b510      	push	{r4, lr}
   1efea:	4604      	mov	r4, r0
   1efec:	b130      	cbz	r0, 1effc <cc_mbedtls_aes_init+0x14>
   1efee:	2200      	movs	r2, #0
   1eff0:	2301      	movs	r3, #1
   1eff2:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1eff6:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1effa:	bd10      	pop	{r4, pc}
   1effc:	4801      	ldr	r0, [pc, #4]	; (1f004 <cc_mbedtls_aes_init+0x1c>)
   1effe:	f7fe f909 	bl	1d214 <CC_PalAbort>
   1f002:	e7f4      	b.n	1efee <cc_mbedtls_aes_init+0x6>
   1f004:	00027aa0 	.word	0x00027aa0

0001f008 <cc_mbedtls_aes_free>:
   1f008:	b118      	cbz	r0, 1f012 <cc_mbedtls_aes_free+0xa>
   1f00a:	2274      	movs	r2, #116	; 0x74
   1f00c:	2100      	movs	r1, #0
   1f00e:	f7ff bd77 	b.w	1eb00 <CC_PalMemSetPlat>
   1f012:	4770      	bx	lr

0001f014 <cc_mbedtls_aes_setkey_enc>:
   1f014:	b190      	cbz	r0, 1f03c <cc_mbedtls_aes_setkey_enc+0x28>
   1f016:	b1a1      	cbz	r1, 1f042 <cc_mbedtls_aes_setkey_enc+0x2e>
   1f018:	b510      	push	{r4, lr}
   1f01a:	2a80      	cmp	r2, #128	; 0x80
   1f01c:	f04f 0400 	mov.w	r4, #0
   1f020:	6384      	str	r4, [r0, #56]	; 0x38
   1f022:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1f026:	d106      	bne.n	1f036 <cc_mbedtls_aes_setkey_enc+0x22>
   1f028:	6304      	str	r4, [r0, #48]	; 0x30
   1f02a:	2210      	movs	r2, #16
   1f02c:	3010      	adds	r0, #16
   1f02e:	f7ff fd65 	bl	1eafc <CC_PalMemCopyPlat>
   1f032:	4620      	mov	r0, r4
   1f034:	bd10      	pop	{r4, pc}
   1f036:	f06f 001f 	mvn.w	r0, #31
   1f03a:	bd10      	pop	{r4, pc}
   1f03c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f040:	4770      	bx	lr
   1f042:	f06f 001f 	mvn.w	r0, #31
   1f046:	4770      	bx	lr

0001f048 <cc_mbedtls_aes_crypt_ecb>:
   1f048:	b320      	cbz	r0, 1f094 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f04a:	b31a      	cbz	r2, 1f094 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f04c:	b313      	cbz	r3, 1f094 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f04e:	2901      	cmp	r1, #1
   1f050:	d820      	bhi.n	1f094 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f052:	b570      	push	{r4, r5, r6, lr}
   1f054:	4604      	mov	r4, r0
   1f056:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1f058:	b086      	sub	sp, #24
   1f05a:	d016      	beq.n	1f08a <cc_mbedtls_aes_crypt_ecb+0x42>
   1f05c:	2901      	cmp	r1, #1
   1f05e:	d116      	bne.n	1f08e <cc_mbedtls_aes_crypt_ecb+0x46>
   1f060:	2100      	movs	r1, #0
   1f062:	2510      	movs	r5, #16
   1f064:	ae04      	add	r6, sp, #16
   1f066:	6361      	str	r1, [r4, #52]	; 0x34
   1f068:	4610      	mov	r0, r2
   1f06a:	e9cd 5600 	strd	r5, r6, [sp]
   1f06e:	aa02      	add	r2, sp, #8
   1f070:	4629      	mov	r1, r5
   1f072:	f7ff fdeb 	bl	1ec4c <SetDataBuffersInfo>
   1f076:	b950      	cbnz	r0, 1f08e <cc_mbedtls_aes_crypt_ecb+0x46>
   1f078:	462b      	mov	r3, r5
   1f07a:	4632      	mov	r2, r6
   1f07c:	a902      	add	r1, sp, #8
   1f07e:	4620      	mov	r0, r4
   1f080:	f000 f8d6 	bl	1f230 <ProcessAesDrv>
   1f084:	b918      	cbnz	r0, 1f08e <cc_mbedtls_aes_crypt_ecb+0x46>
   1f086:	b006      	add	sp, #24
   1f088:	bd70      	pop	{r4, r5, r6, pc}
   1f08a:	2900      	cmp	r1, #0
   1f08c:	d0e8      	beq.n	1f060 <cc_mbedtls_aes_crypt_ecb+0x18>
   1f08e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f092:	e7f8      	b.n	1f086 <cc_mbedtls_aes_crypt_ecb+0x3e>
   1f094:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f098:	4770      	bx	lr
   1f09a:	bf00      	nop

0001f09c <CC_PalDataBufferAttrGet>:
   1f09c:	2000      	movs	r0, #0
   1f09e:	7018      	strb	r0, [r3, #0]
   1f0a0:	4770      	bx	lr
   1f0a2:	bf00      	nop

0001f0a4 <LoadAesKey>:
   1f0a4:	2800      	cmp	r0, #0
   1f0a6:	d03b      	beq.n	1f120 <LoadAesKey+0x7c>
   1f0a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1f0ac:	2b00      	cmp	r3, #0
   1f0ae:	d02c      	beq.n	1f10a <LoadAesKey+0x66>
   1f0b0:	2b03      	cmp	r3, #3
   1f0b2:	b510      	push	{r4, lr}
   1f0b4:	d00f      	beq.n	1f0d6 <LoadAesKey+0x32>
   1f0b6:	481c      	ldr	r0, [pc, #112]	; (1f128 <LoadAesKey+0x84>)
   1f0b8:	4c1c      	ldr	r4, [pc, #112]	; (1f12c <LoadAesKey+0x88>)
   1f0ba:	6822      	ldr	r2, [r4, #0]
   1f0bc:	4b1c      	ldr	r3, [pc, #112]	; (1f130 <LoadAesKey+0x8c>)
   1f0be:	6812      	ldr	r2, [r2, #0]
   1f0c0:	601a      	str	r2, [r3, #0]
   1f0c2:	6822      	ldr	r2, [r4, #0]
   1f0c4:	6852      	ldr	r2, [r2, #4]
   1f0c6:	605a      	str	r2, [r3, #4]
   1f0c8:	6822      	ldr	r2, [r4, #0]
   1f0ca:	6892      	ldr	r2, [r2, #8]
   1f0cc:	609a      	str	r2, [r3, #8]
   1f0ce:	6822      	ldr	r2, [r4, #0]
   1f0d0:	68d2      	ldr	r2, [r2, #12]
   1f0d2:	60da      	str	r2, [r3, #12]
   1f0d4:	bd10      	pop	{r4, pc}
   1f0d6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1f0d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1f0da:	4c14      	ldr	r4, [pc, #80]	; (1f12c <LoadAesKey+0x88>)
   1f0dc:	f000 fba4 	bl	1f828 <kmu_validate_kdr_slot_and_size>
   1f0e0:	2800      	cmp	r0, #0
   1f0e2:	d1ea      	bne.n	1f0ba <LoadAesKey+0x16>
   1f0e4:	6821      	ldr	r1, [r4, #0]
   1f0e6:	4a12      	ldr	r2, [pc, #72]	; (1f130 <LoadAesKey+0x8c>)
   1f0e8:	6809      	ldr	r1, [r1, #0]
   1f0ea:	6011      	str	r1, [r2, #0]
   1f0ec:	6821      	ldr	r1, [r4, #0]
   1f0ee:	4b11      	ldr	r3, [pc, #68]	; (1f134 <LoadAesKey+0x90>)
   1f0f0:	6849      	ldr	r1, [r1, #4]
   1f0f2:	6019      	str	r1, [r3, #0]
   1f0f4:	6821      	ldr	r1, [r4, #0]
   1f0f6:	6889      	ldr	r1, [r1, #8]
   1f0f8:	6091      	str	r1, [r2, #8]
   1f0fa:	6822      	ldr	r2, [r4, #0]
   1f0fc:	68d2      	ldr	r2, [r2, #12]
   1f0fe:	609a      	str	r2, [r3, #8]
   1f100:	f000 fb9e 	bl	1f840 <kmu_use_kdr_key>
   1f104:	2800      	cmp	r0, #0
   1f106:	d1d8      	bne.n	1f0ba <LoadAesKey+0x16>
   1f108:	bd10      	pop	{r4, pc}
   1f10a:	4a09      	ldr	r2, [pc, #36]	; (1f130 <LoadAesKey+0x8c>)
   1f10c:	6901      	ldr	r1, [r0, #16]
   1f10e:	6011      	str	r1, [r2, #0]
   1f110:	6941      	ldr	r1, [r0, #20]
   1f112:	6051      	str	r1, [r2, #4]
   1f114:	6981      	ldr	r1, [r0, #24]
   1f116:	6091      	str	r1, [r2, #8]
   1f118:	69c1      	ldr	r1, [r0, #28]
   1f11a:	60d1      	str	r1, [r2, #12]
   1f11c:	4618      	mov	r0, r3
   1f11e:	4770      	bx	lr
   1f120:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1f124:	4770      	bx	lr
   1f126:	bf00      	nop
   1f128:	00f10009 	.word	0x00f10009
   1f12c:	20033ad4 	.word	0x20033ad4
   1f130:	5002b400 	.word	0x5002b400
   1f134:	5002b404 	.word	0x5002b404

0001f138 <InitAes.part.0>:
   1f138:	4a32      	ldr	r2, [pc, #200]	; (1f204 <InitAes.part.0+0xcc>)
   1f13a:	b510      	push	{r4, lr}
   1f13c:	4604      	mov	r4, r0
   1f13e:	6813      	ldr	r3, [r2, #0]
   1f140:	2b00      	cmp	r3, #0
   1f142:	d1fc      	bne.n	1f13e <InitAes.part.0+0x6>
   1f144:	4a30      	ldr	r2, [pc, #192]	; (1f208 <InitAes.part.0+0xd0>)
   1f146:	6813      	ldr	r3, [r2, #0]
   1f148:	2b00      	cmp	r3, #0
   1f14a:	d1fc      	bne.n	1f146 <InitAes.part.0+0xe>
   1f14c:	4a2f      	ldr	r2, [pc, #188]	; (1f20c <InitAes.part.0+0xd4>)
   1f14e:	6813      	ldr	r3, [r2, #0]
   1f150:	2b00      	cmp	r3, #0
   1f152:	d1fc      	bne.n	1f14e <InitAes.part.0+0x16>
   1f154:	4a2e      	ldr	r2, [pc, #184]	; (1f210 <InitAes.part.0+0xd8>)
   1f156:	6813      	ldr	r3, [r2, #0]
   1f158:	2b00      	cmp	r3, #0
   1f15a:	d1fc      	bne.n	1f156 <InitAes.part.0+0x1e>
   1f15c:	4a2d      	ldr	r2, [pc, #180]	; (1f214 <InitAes.part.0+0xdc>)
   1f15e:	6813      	ldr	r3, [r2, #0]
   1f160:	2b00      	cmp	r3, #0
   1f162:	d1fc      	bne.n	1f15e <InitAes.part.0+0x26>
   1f164:	4a2c      	ldr	r2, [pc, #176]	; (1f218 <InitAes.part.0+0xe0>)
   1f166:	6813      	ldr	r3, [r2, #0]
   1f168:	2b00      	cmp	r3, #0
   1f16a:	d1fc      	bne.n	1f166 <InitAes.part.0+0x2e>
   1f16c:	f04f 30ff 	mov.w	r0, #4294967295
   1f170:	f7fe fb3e 	bl	1d7f0 <CC_HalClearInterruptBit>
   1f174:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f176:	f023 0304 	bic.w	r3, r3, #4
   1f17a:	2b03      	cmp	r3, #3
   1f17c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f17e:	d036      	beq.n	1f1ee <InitAes.part.0+0xb6>
   1f180:	2b01      	cmp	r3, #1
   1f182:	4b26      	ldr	r3, [pc, #152]	; (1f21c <InitAes.part.0+0xe4>)
   1f184:	6818      	ldr	r0, [r3, #0]
   1f186:	bf0c      	ite	eq
   1f188:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1f18c:	f020 0020 	bicne.w	r0, r0, #32
   1f190:	f7fe fb3c 	bl	1d80c <CC_HalMaskInterrupt>
   1f194:	4b22      	ldr	r3, [pc, #136]	; (1f220 <InitAes.part.0+0xe8>)
   1f196:	4a1b      	ldr	r2, [pc, #108]	; (1f204 <InitAes.part.0+0xcc>)
   1f198:	2101      	movs	r1, #1
   1f19a:	6019      	str	r1, [r3, #0]
   1f19c:	6813      	ldr	r3, [r2, #0]
   1f19e:	2b00      	cmp	r3, #0
   1f1a0:	d1fc      	bne.n	1f19c <InitAes.part.0+0x64>
   1f1a2:	4a19      	ldr	r2, [pc, #100]	; (1f208 <InitAes.part.0+0xd0>)
   1f1a4:	6813      	ldr	r3, [r2, #0]
   1f1a6:	2b00      	cmp	r3, #0
   1f1a8:	d1fc      	bne.n	1f1a4 <InitAes.part.0+0x6c>
   1f1aa:	491e      	ldr	r1, [pc, #120]	; (1f224 <InitAes.part.0+0xec>)
   1f1ac:	4a15      	ldr	r2, [pc, #84]	; (1f204 <InitAes.part.0+0xcc>)
   1f1ae:	600b      	str	r3, [r1, #0]
   1f1b0:	6813      	ldr	r3, [r2, #0]
   1f1b2:	2b00      	cmp	r3, #0
   1f1b4:	d1fc      	bne.n	1f1b0 <InitAes.part.0+0x78>
   1f1b6:	4a14      	ldr	r2, [pc, #80]	; (1f208 <InitAes.part.0+0xd0>)
   1f1b8:	6813      	ldr	r3, [r2, #0]
   1f1ba:	2b00      	cmp	r3, #0
   1f1bc:	d1fc      	bne.n	1f1b8 <InitAes.part.0+0x80>
   1f1be:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1f1c0:	f022 0104 	bic.w	r1, r2, #4
   1f1c4:	2903      	cmp	r1, #3
   1f1c6:	bf18      	it	ne
   1f1c8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1f1ca:	4917      	ldr	r1, [pc, #92]	; (1f228 <InitAes.part.0+0xf0>)
   1f1cc:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1f1d0:	bf18      	it	ne
   1f1d2:	f003 0301 	andne.w	r3, r3, #1
   1f1d6:	f002 021c 	and.w	r2, r2, #28
   1f1da:	4313      	orrs	r3, r2
   1f1dc:	600b      	str	r3, [r1, #0]
   1f1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f1e0:	2b07      	cmp	r3, #7
   1f1e2:	d102      	bne.n	1f1ea <InitAes.part.0+0xb2>
   1f1e4:	4b11      	ldr	r3, [pc, #68]	; (1f22c <InitAes.part.0+0xf4>)
   1f1e6:	2201      	movs	r2, #1
   1f1e8:	601a      	str	r2, [r3, #0]
   1f1ea:	2000      	movs	r0, #0
   1f1ec:	bd10      	pop	{r4, pc}
   1f1ee:	2b01      	cmp	r3, #1
   1f1f0:	4b0a      	ldr	r3, [pc, #40]	; (1f21c <InitAes.part.0+0xe4>)
   1f1f2:	6818      	ldr	r0, [r3, #0]
   1f1f4:	bf0c      	ite	eq
   1f1f6:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1f1fa:	f020 0010 	bicne.w	r0, r0, #16
   1f1fe:	f7fe fb05 	bl	1d80c <CC_HalMaskInterrupt>
   1f202:	e7c7      	b.n	1f194 <InitAes.part.0+0x5c>
   1f204:	5002b910 	.word	0x5002b910
   1f208:	5002b470 	.word	0x5002b470
   1f20c:	5002bd20 	.word	0x5002bd20
   1f210:	5002bc20 	.word	0x5002bc20
   1f214:	5002bd38 	.word	0x5002bd38
   1f218:	5002bc38 	.word	0x5002bc38
   1f21c:	5002ba04 	.word	0x5002ba04
   1f220:	5002b900 	.word	0x5002b900
   1f224:	5002b4bc 	.word	0x5002b4bc
   1f228:	5002b4c0 	.word	0x5002b4c0
   1f22c:	5002b47c 	.word	0x5002b47c

0001f230 <ProcessAesDrv>:
   1f230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f234:	b087      	sub	sp, #28
   1f236:	2900      	cmp	r1, #0
   1f238:	f000 80a5 	beq.w	1f386 <ProcessAesDrv+0x156>
   1f23c:	4616      	mov	r6, r2
   1f23e:	2a00      	cmp	r2, #0
   1f240:	f000 80a1 	beq.w	1f386 <ProcessAesDrv+0x156>
   1f244:	4604      	mov	r4, r0
   1f246:	2800      	cmp	r0, #0
   1f248:	f000 813f 	beq.w	1f4ca <ProcessAesDrv+0x29a>
   1f24c:	461f      	mov	r7, r3
   1f24e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f250:	460d      	mov	r5, r1
   1f252:	2b00      	cmp	r3, #0
   1f254:	d150      	bne.n	1f2f8 <ProcessAesDrv+0xc8>
   1f256:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1f25a:	d252      	bcs.n	1f302 <ProcessAesDrv+0xd2>
   1f25c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f260:	2b04      	cmp	r3, #4
   1f262:	f000 8109 	beq.w	1f478 <ProcessAesDrv+0x248>
   1f266:	f04f 0800 	mov.w	r8, #0
   1f26a:	48aa      	ldr	r0, [pc, #680]	; (1f514 <ProcessAesDrv+0x2e4>)
   1f26c:	f04f 31ff 	mov.w	r1, #4294967295
   1f270:	f7fe fb66 	bl	1d940 <CC_PalMutexLock>
   1f274:	2800      	cmp	r0, #0
   1f276:	f040 80de 	bne.w	1f436 <ProcessAesDrv+0x206>
   1f27a:	2000      	movs	r0, #0
   1f27c:	f7fe fb90 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1f280:	2800      	cmp	r0, #0
   1f282:	f040 80e1 	bne.w	1f448 <ProcessAesDrv+0x218>
   1f286:	4ba4      	ldr	r3, [pc, #656]	; (1f518 <ProcessAesDrv+0x2e8>)
   1f288:	4aa4      	ldr	r2, [pc, #656]	; (1f51c <ProcessAesDrv+0x2ec>)
   1f28a:	2101      	movs	r1, #1
   1f28c:	6019      	str	r1, [r3, #0]
   1f28e:	6813      	ldr	r3, [r2, #0]
   1f290:	2b00      	cmp	r3, #0
   1f292:	d1fc      	bne.n	1f28e <ProcessAesDrv+0x5e>
   1f294:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f296:	2b03      	cmp	r3, #3
   1f298:	dc39      	bgt.n	1f30e <ProcessAesDrv+0xde>
   1f29a:	2b00      	cmp	r3, #0
   1f29c:	da3a      	bge.n	1f314 <ProcessAesDrv+0xe4>
   1f29e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1f568 <ProcessAesDrv+0x338>
   1f2a2:	4a9e      	ldr	r2, [pc, #632]	; (1f51c <ProcessAesDrv+0x2ec>)
   1f2a4:	6813      	ldr	r3, [r2, #0]
   1f2a6:	2b00      	cmp	r3, #0
   1f2a8:	d1fc      	bne.n	1f2a4 <ProcessAesDrv+0x74>
   1f2aa:	f1b8 0f00 	cmp.w	r8, #0
   1f2ae:	f040 80da 	bne.w	1f466 <ProcessAesDrv+0x236>
   1f2b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f2b4:	f023 0304 	bic.w	r3, r3, #4
   1f2b8:	2b03      	cmp	r3, #3
   1f2ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f2bc:	d058      	beq.n	1f370 <ProcessAesDrv+0x140>
   1f2be:	2b01      	cmp	r3, #1
   1f2c0:	4b97      	ldr	r3, [pc, #604]	; (1f520 <ProcessAesDrv+0x2f0>)
   1f2c2:	6818      	ldr	r0, [r3, #0]
   1f2c4:	bf0c      	ite	eq
   1f2c6:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1f2ca:	f040 0020 	orrne.w	r0, r0, #32
   1f2ce:	f7fe fa9d 	bl	1d80c <CC_HalMaskInterrupt>
   1f2d2:	4b91      	ldr	r3, [pc, #580]	; (1f518 <ProcessAesDrv+0x2e8>)
   1f2d4:	2200      	movs	r2, #0
   1f2d6:	601a      	str	r2, [r3, #0]
   1f2d8:	2001      	movs	r0, #1
   1f2da:	f7fe fb61 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1f2de:	2800      	cmp	r0, #0
   1f2e0:	f040 80bd 	bne.w	1f45e <ProcessAesDrv+0x22e>
   1f2e4:	488b      	ldr	r0, [pc, #556]	; (1f514 <ProcessAesDrv+0x2e4>)
   1f2e6:	f7fe fb33 	bl	1d950 <CC_PalMutexUnlock>
   1f2ea:	2800      	cmp	r0, #0
   1f2ec:	f040 80b0 	bne.w	1f450 <ProcessAesDrv+0x220>
   1f2f0:	4648      	mov	r0, r9
   1f2f2:	b007      	add	sp, #28
   1f2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2f8:	2b01      	cmp	r3, #1
   1f2fa:	d1af      	bne.n	1f25c <ProcessAesDrv+0x2c>
   1f2fc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1f300:	d3ac      	bcc.n	1f25c <ProcessAesDrv+0x2c>
   1f302:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1f56c <ProcessAesDrv+0x33c>
   1f306:	4648      	mov	r0, r9
   1f308:	b007      	add	sp, #28
   1f30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f30e:	3b06      	subs	r3, #6
   1f310:	2b01      	cmp	r3, #1
   1f312:	d8c4      	bhi.n	1f29e <ProcessAesDrv+0x6e>
   1f314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f316:	2b01      	cmp	r3, #1
   1f318:	f200 80d4 	bhi.w	1f4c4 <ProcessAesDrv+0x294>
   1f31c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f31e:	2b01      	cmp	r3, #1
   1f320:	d837      	bhi.n	1f392 <ProcessAesDrv+0x162>
   1f322:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f324:	2b01      	cmp	r3, #1
   1f326:	f200 8131 	bhi.w	1f58c <ProcessAesDrv+0x35c>
   1f32a:	4620      	mov	r0, r4
   1f32c:	f7ff ff04 	bl	1f138 <InitAes.part.0>
   1f330:	4681      	mov	r9, r0
   1f332:	2800      	cmp	r0, #0
   1f334:	d1b5      	bne.n	1f2a2 <ProcessAesDrv+0x72>
   1f336:	4620      	mov	r0, r4
   1f338:	f7ff feb4 	bl	1f0a4 <LoadAesKey>
   1f33c:	4681      	mov	r9, r0
   1f33e:	2800      	cmp	r0, #0
   1f340:	d1af      	bne.n	1f2a2 <ProcessAesDrv+0x72>
   1f342:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f344:	2b07      	cmp	r3, #7
   1f346:	d8aa      	bhi.n	1f29e <ProcessAesDrv+0x6e>
   1f348:	a201      	add	r2, pc, #4	; (adr r2, 1f350 <ProcessAesDrv+0x120>)
   1f34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f34e:	bf00      	nop
   1f350:	0001f3ad 	.word	0x0001f3ad
   1f354:	0001f399 	.word	0x0001f399
   1f358:	0001f509 	.word	0x0001f509
   1f35c:	0001f399 	.word	0x0001f399
   1f360:	0001f29f 	.word	0x0001f29f
   1f364:	0001f29f 	.word	0x0001f29f
   1f368:	0001f509 	.word	0x0001f509
   1f36c:	0001f399 	.word	0x0001f399
   1f370:	2b01      	cmp	r3, #1
   1f372:	4b6b      	ldr	r3, [pc, #428]	; (1f520 <ProcessAesDrv+0x2f0>)
   1f374:	6818      	ldr	r0, [r3, #0]
   1f376:	bf0c      	ite	eq
   1f378:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1f37c:	f040 0010 	orrne.w	r0, r0, #16
   1f380:	f7fe fa44 	bl	1d80c <CC_HalMaskInterrupt>
   1f384:	e7a5      	b.n	1f2d2 <ProcessAesDrv+0xa2>
   1f386:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1f570 <ProcessAesDrv+0x340>
   1f38a:	4648      	mov	r0, r9
   1f38c:	b007      	add	sp, #28
   1f38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f392:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1f574 <ProcessAesDrv+0x344>
   1f396:	e784      	b.n	1f2a2 <ProcessAesDrv+0x72>
   1f398:	4b62      	ldr	r3, [pc, #392]	; (1f524 <ProcessAesDrv+0x2f4>)
   1f39a:	6822      	ldr	r2, [r4, #0]
   1f39c:	601a      	str	r2, [r3, #0]
   1f39e:	6862      	ldr	r2, [r4, #4]
   1f3a0:	605a      	str	r2, [r3, #4]
   1f3a2:	68a2      	ldr	r2, [r4, #8]
   1f3a4:	609a      	str	r2, [r3, #8]
   1f3a6:	68e2      	ldr	r2, [r4, #12]
   1f3a8:	60da      	str	r2, [r3, #12]
   1f3aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f3ac:	682a      	ldr	r2, [r5, #0]
   1f3ae:	f023 0304 	bic.w	r3, r3, #4
   1f3b2:	2b03      	cmp	r3, #3
   1f3b4:	d009      	beq.n	1f3ca <ProcessAesDrv+0x19a>
   1f3b6:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1f3b8:	6833      	ldr	r3, [r6, #0]
   1f3ba:	2901      	cmp	r1, #1
   1f3bc:	bf07      	ittee	eq
   1f3be:	485a      	ldreq	r0, [pc, #360]	; (1f528 <ProcessAesDrv+0x2f8>)
   1f3c0:	495a      	ldreq	r1, [pc, #360]	; (1f52c <ProcessAesDrv+0x2fc>)
   1f3c2:	485b      	ldrne	r0, [pc, #364]	; (1f530 <ProcessAesDrv+0x300>)
   1f3c4:	495b      	ldrne	r1, [pc, #364]	; (1f534 <ProcessAesDrv+0x304>)
   1f3c6:	6003      	str	r3, [r0, #0]
   1f3c8:	600f      	str	r7, [r1, #0]
   1f3ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f3cc:	2b01      	cmp	r3, #1
   1f3ce:	bf0b      	itete	eq
   1f3d0:	4b59      	ldreq	r3, [pc, #356]	; (1f538 <ProcessAesDrv+0x308>)
   1f3d2:	4b5a      	ldrne	r3, [pc, #360]	; (1f53c <ProcessAesDrv+0x30c>)
   1f3d4:	495a      	ldreq	r1, [pc, #360]	; (1f540 <ProcessAesDrv+0x310>)
   1f3d6:	495b      	ldrne	r1, [pc, #364]	; (1f544 <ProcessAesDrv+0x314>)
   1f3d8:	600a      	str	r2, [r1, #0]
   1f3da:	601f      	str	r7, [r3, #0]
   1f3dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f3de:	f023 0304 	bic.w	r3, r3, #4
   1f3e2:	2b03      	cmp	r3, #3
   1f3e4:	d074      	beq.n	1f4d0 <ProcessAesDrv+0x2a0>
   1f3e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f3e8:	2b01      	cmp	r3, #1
   1f3ea:	bf0c      	ite	eq
   1f3ec:	2080      	moveq	r0, #128	; 0x80
   1f3ee:	2020      	movne	r0, #32
   1f3f0:	f7fe fa12 	bl	1d818 <CC_HalWaitInterrupt>
   1f3f4:	4681      	mov	r9, r0
   1f3f6:	2800      	cmp	r0, #0
   1f3f8:	f47f af53 	bne.w	1f2a2 <ProcessAesDrv+0x72>
   1f3fc:	4b47      	ldr	r3, [pc, #284]	; (1f51c <ProcessAesDrv+0x2ec>)
   1f3fe:	681a      	ldr	r2, [r3, #0]
   1f400:	2a00      	cmp	r2, #0
   1f402:	d1fc      	bne.n	1f3fe <ProcessAesDrv+0x1ce>
   1f404:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f406:	3b01      	subs	r3, #1
   1f408:	4691      	mov	r9, r2
   1f40a:	2b06      	cmp	r3, #6
   1f40c:	d810      	bhi.n	1f430 <ProcessAesDrv+0x200>
   1f40e:	e8df f003 	tbb	[pc, r3]
   1f412:	7d04      	.short	0x7d04
   1f414:	7d0f0f04 	.word	0x7d0f0f04
   1f418:	04          	.byte	0x04
   1f419:	00          	.byte	0x00
   1f41a:	4a42      	ldr	r2, [pc, #264]	; (1f524 <ProcessAesDrv+0x2f4>)
   1f41c:	4b4a      	ldr	r3, [pc, #296]	; (1f548 <ProcessAesDrv+0x318>)
   1f41e:	6812      	ldr	r2, [r2, #0]
   1f420:	6022      	str	r2, [r4, #0]
   1f422:	681a      	ldr	r2, [r3, #0]
   1f424:	6062      	str	r2, [r4, #4]
   1f426:	685a      	ldr	r2, [r3, #4]
   1f428:	60a2      	str	r2, [r4, #8]
   1f42a:	3308      	adds	r3, #8
   1f42c:	681b      	ldr	r3, [r3, #0]
   1f42e:	60e3      	str	r3, [r4, #12]
   1f430:	2301      	movs	r3, #1
   1f432:	65a3      	str	r3, [r4, #88]	; 0x58
   1f434:	e735      	b.n	1f2a2 <ProcessAesDrv+0x72>
   1f436:	4845      	ldr	r0, [pc, #276]	; (1f54c <ProcessAesDrv+0x31c>)
   1f438:	f7fd feec 	bl	1d214 <CC_PalAbort>
   1f43c:	2000      	movs	r0, #0
   1f43e:	f7fe faaf 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1f442:	2800      	cmp	r0, #0
   1f444:	f43f af1f 	beq.w	1f286 <ProcessAesDrv+0x56>
   1f448:	4841      	ldr	r0, [pc, #260]	; (1f550 <ProcessAesDrv+0x320>)
   1f44a:	f7fd fee3 	bl	1d214 <CC_PalAbort>
   1f44e:	e71a      	b.n	1f286 <ProcessAesDrv+0x56>
   1f450:	4840      	ldr	r0, [pc, #256]	; (1f554 <ProcessAesDrv+0x324>)
   1f452:	f7fd fedf 	bl	1d214 <CC_PalAbort>
   1f456:	4648      	mov	r0, r9
   1f458:	b007      	add	sp, #28
   1f45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f45e:	483e      	ldr	r0, [pc, #248]	; (1f558 <ProcessAesDrv+0x328>)
   1f460:	f7fd fed8 	bl	1d214 <CC_PalAbort>
   1f464:	e73e      	b.n	1f2e4 <ProcessAesDrv+0xb4>
   1f466:	2304      	movs	r3, #4
   1f468:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f46c:	2120      	movs	r1, #32
   1f46e:	f104 0010 	add.w	r0, r4, #16
   1f472:	f7ff fb47 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1f476:	e71c      	b.n	1f2b2 <ProcessAesDrv+0x82>
   1f478:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1f47a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1f47c:	f000 f9c8 	bl	1f810 <kmu_validate_slot_and_size>
   1f480:	b9e8      	cbnz	r0, 1f4be <ProcessAesDrv+0x28e>
   1f482:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1f578 <ProcessAesDrv+0x348>
   1f486:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1f57c <ProcessAesDrv+0x34c>
   1f48a:	f8d8 3000 	ldr.w	r3, [r8]
   1f48e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1f580 <ProcessAesDrv+0x350>
   1f492:	681b      	ldr	r3, [r3, #0]
   1f494:	f8cb 3000 	str.w	r3, [fp]
   1f498:	f8d8 3000 	ldr.w	r3, [r8]
   1f49c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1f584 <ProcessAesDrv+0x354>
   1f4a0:	685b      	ldr	r3, [r3, #4]
   1f4a2:	f8ca 3000 	str.w	r3, [sl]
   1f4a6:	f8d8 3000 	ldr.w	r3, [r8]
   1f4aa:	4a2c      	ldr	r2, [pc, #176]	; (1f55c <ProcessAesDrv+0x32c>)
   1f4ac:	689b      	ldr	r3, [r3, #8]
   1f4ae:	f8c9 3000 	str.w	r3, [r9]
   1f4b2:	f8d8 3000 	ldr.w	r3, [r8]
   1f4b6:	68db      	ldr	r3, [r3, #12]
   1f4b8:	6013      	str	r3, [r2, #0]
   1f4ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1f4bc:	b171      	cbz	r1, 1f4dc <ProcessAesDrv+0x2ac>
   1f4be:	f04f 0801 	mov.w	r8, #1
   1f4c2:	e6d2      	b.n	1f26a <ProcessAesDrv+0x3a>
   1f4c4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1f588 <ProcessAesDrv+0x358>
   1f4c8:	e6eb      	b.n	1f2a2 <ProcessAesDrv+0x72>
   1f4ca:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1f4ce:	e70f      	b.n	1f2f0 <ProcessAesDrv+0xc0>
   1f4d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f4d2:	2b01      	cmp	r3, #1
   1f4d4:	bf0c      	ite	eq
   1f4d6:	2040      	moveq	r0, #64	; 0x40
   1f4d8:	2010      	movne	r0, #16
   1f4da:	e789      	b.n	1f3f0 <ProcessAesDrv+0x1c0>
   1f4dc:	f104 0310 	add.w	r3, r4, #16
   1f4e0:	4618      	mov	r0, r3
   1f4e2:	9305      	str	r3, [sp, #20]
   1f4e4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1f4e8:	e9cd 3200 	strd	r3, r2, [sp]
   1f4ec:	9002      	str	r0, [sp, #8]
   1f4ee:	2010      	movs	r0, #16
   1f4f0:	9003      	str	r0, [sp, #12]
   1f4f2:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1f4f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1f4f8:	f000 f9ae 	bl	1f858 <kmu_derive_cmac>
   1f4fc:	2800      	cmp	r0, #0
   1f4fe:	d148      	bne.n	1f592 <ProcessAesDrv+0x362>
   1f500:	2300      	movs	r3, #0
   1f502:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1f506:	e7da      	b.n	1f4be <ProcessAesDrv+0x28e>
   1f508:	4b15      	ldr	r3, [pc, #84]	; (1f560 <ProcessAesDrv+0x330>)
   1f50a:	e746      	b.n	1f39a <ProcessAesDrv+0x16a>
   1f50c:	4a14      	ldr	r2, [pc, #80]	; (1f560 <ProcessAesDrv+0x330>)
   1f50e:	4b15      	ldr	r3, [pc, #84]	; (1f564 <ProcessAesDrv+0x334>)
   1f510:	e785      	b.n	1f41e <ProcessAesDrv+0x1ee>
   1f512:	bf00      	nop
   1f514:	20033ae4 	.word	0x20033ae4
   1f518:	5002b810 	.word	0x5002b810
   1f51c:	5002b910 	.word	0x5002b910
   1f520:	5002ba04 	.word	0x5002ba04
   1f524:	5002b440 	.word	0x5002b440
   1f528:	5002bd28 	.word	0x5002bd28
   1f52c:	5002bd2c 	.word	0x5002bd2c
   1f530:	5002bd30 	.word	0x5002bd30
   1f534:	5002bd34 	.word	0x5002bd34
   1f538:	5002bc2c 	.word	0x5002bc2c
   1f53c:	5002bc34 	.word	0x5002bc34
   1f540:	5002bc28 	.word	0x5002bc28
   1f544:	5002bc30 	.word	0x5002bc30
   1f548:	5002b444 	.word	0x5002b444
   1f54c:	00027994 	.word	0x00027994
   1f550:	000279ac 	.word	0x000279ac
   1f554:	000279ec 	.word	0x000279ec
   1f558:	000279cc 	.word	0x000279cc
   1f55c:	5002b40c 	.word	0x5002b40c
   1f560:	5002b460 	.word	0x5002b460
   1f564:	5002b464 	.word	0x5002b464
   1f568:	00f10001 	.word	0x00f10001
   1f56c:	00f10005 	.word	0x00f10005
   1f570:	00f1000b 	.word	0x00f1000b
   1f574:	00f10003 	.word	0x00f10003
   1f578:	20033ad4 	.word	0x20033ad4
   1f57c:	5002b400 	.word	0x5002b400
   1f580:	5002b404 	.word	0x5002b404
   1f584:	5002b408 	.word	0x5002b408
   1f588:	00f10002 	.word	0x00f10002
   1f58c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1f5c8 <ProcessAesDrv+0x398>
   1f590:	e687      	b.n	1f2a2 <ProcessAesDrv+0x72>
   1f592:	f8d8 3000 	ldr.w	r3, [r8]
   1f596:	4a0b      	ldr	r2, [pc, #44]	; (1f5c4 <ProcessAesDrv+0x394>)
   1f598:	681b      	ldr	r3, [r3, #0]
   1f59a:	f8cb 3000 	str.w	r3, [fp]
   1f59e:	f8d8 3000 	ldr.w	r3, [r8]
   1f5a2:	685b      	ldr	r3, [r3, #4]
   1f5a4:	f8ca 3000 	str.w	r3, [sl]
   1f5a8:	f8d8 3000 	ldr.w	r3, [r8]
   1f5ac:	689b      	ldr	r3, [r3, #8]
   1f5ae:	f8c9 3000 	str.w	r3, [r9]
   1f5b2:	f8d8 3000 	ldr.w	r3, [r8]
   1f5b6:	68db      	ldr	r3, [r3, #12]
   1f5b8:	6013      	str	r3, [r2, #0]
   1f5ba:	9805      	ldr	r0, [sp, #20]
   1f5bc:	2110      	movs	r1, #16
   1f5be:	f7ff faa1 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1f5c2:	e79d      	b.n	1f500 <ProcessAesDrv+0x2d0>
   1f5c4:	5002b40c 	.word	0x5002b40c
   1f5c8:	00f10004 	.word	0x00f10004

0001f5cc <FinishAesDrv>:
   1f5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f5d0:	b301      	cbz	r1, 1f614 <FinishAesDrv+0x48>
   1f5d2:	b1fa      	cbz	r2, 1f614 <FinishAesDrv+0x48>
   1f5d4:	4604      	mov	r4, r0
   1f5d6:	2800      	cmp	r0, #0
   1f5d8:	d07a      	beq.n	1f6d0 <FinishAesDrv+0x104>
   1f5da:	461d      	mov	r5, r3
   1f5dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1f5de:	2b07      	cmp	r3, #7
   1f5e0:	460e      	mov	r6, r1
   1f5e2:	d01b      	beq.n	1f61c <FinishAesDrv+0x50>
   1f5e4:	b95d      	cbnz	r5, 1f5fe <FinishAesDrv+0x32>
   1f5e6:	2b03      	cmp	r3, #3
   1f5e8:	d110      	bne.n	1f60c <FinishAesDrv+0x40>
   1f5ea:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1f5ec:	b973      	cbnz	r3, 1f60c <FinishAesDrv+0x40>
   1f5ee:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1f5f2:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1f5f6:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1f5fa:	600b      	str	r3, [r1, #0]
   1f5fc:	2510      	movs	r5, #16
   1f5fe:	462b      	mov	r3, r5
   1f600:	4631      	mov	r1, r6
   1f602:	4620      	mov	r0, r4
   1f604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f608:	f7ff be12 	b.w	1f230 <ProcessAesDrv>
   1f60c:	462f      	mov	r7, r5
   1f60e:	4638      	mov	r0, r7
   1f610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f614:	4f66      	ldr	r7, [pc, #408]	; (1f7b0 <FinishAesDrv+0x1e4>)
   1f616:	4638      	mov	r0, r7
   1f618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f61c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f61e:	2b00      	cmp	r3, #0
   1f620:	d159      	bne.n	1f6d6 <FinishAesDrv+0x10a>
   1f622:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1f626:	d25b      	bcs.n	1f6e0 <FinishAesDrv+0x114>
   1f628:	b915      	cbnz	r5, 1f630 <FinishAesDrv+0x64>
   1f62a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1f62c:	2b00      	cmp	r3, #0
   1f62e:	d157      	bne.n	1f6e0 <FinishAesDrv+0x114>
   1f630:	4860      	ldr	r0, [pc, #384]	; (1f7b4 <FinishAesDrv+0x1e8>)
   1f632:	f04f 31ff 	mov.w	r1, #4294967295
   1f636:	f7fe f983 	bl	1d940 <CC_PalMutexLock>
   1f63a:	2800      	cmp	r0, #0
   1f63c:	f040 8097 	bne.w	1f76e <FinishAesDrv+0x1a2>
   1f640:	2000      	movs	r0, #0
   1f642:	f7fe f9ad 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1f646:	2800      	cmp	r0, #0
   1f648:	f040 808d 	bne.w	1f766 <FinishAesDrv+0x19a>
   1f64c:	4b5a      	ldr	r3, [pc, #360]	; (1f7b8 <FinishAesDrv+0x1ec>)
   1f64e:	4a5b      	ldr	r2, [pc, #364]	; (1f7bc <FinishAesDrv+0x1f0>)
   1f650:	2101      	movs	r1, #1
   1f652:	6019      	str	r1, [r3, #0]
   1f654:	6813      	ldr	r3, [r2, #0]
   1f656:	2b00      	cmp	r3, #0
   1f658:	d1fc      	bne.n	1f654 <FinishAesDrv+0x88>
   1f65a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f65c:	2b03      	cmp	r3, #3
   1f65e:	dd20      	ble.n	1f6a2 <FinishAesDrv+0xd6>
   1f660:	3b06      	subs	r3, #6
   1f662:	2b01      	cmp	r3, #1
   1f664:	d81f      	bhi.n	1f6a6 <FinishAesDrv+0xda>
   1f666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f668:	2b01      	cmp	r3, #1
   1f66a:	d83b      	bhi.n	1f6e4 <FinishAesDrv+0x118>
   1f66c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f66e:	2b01      	cmp	r3, #1
   1f670:	f200 8085 	bhi.w	1f77e <FinishAesDrv+0x1b2>
   1f674:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f676:	2b01      	cmp	r3, #1
   1f678:	f200 8083 	bhi.w	1f782 <FinishAesDrv+0x1b6>
   1f67c:	4620      	mov	r0, r4
   1f67e:	f7ff fd5b 	bl	1f138 <InitAes.part.0>
   1f682:	4607      	mov	r7, r0
   1f684:	b980      	cbnz	r0, 1f6a8 <FinishAesDrv+0xdc>
   1f686:	4620      	mov	r0, r4
   1f688:	f7ff fd0c 	bl	1f0a4 <LoadAesKey>
   1f68c:	4607      	mov	r7, r0
   1f68e:	b958      	cbnz	r0, 1f6a8 <FinishAesDrv+0xdc>
   1f690:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f692:	2b07      	cmp	r3, #7
   1f694:	d807      	bhi.n	1f6a6 <FinishAesDrv+0xda>
   1f696:	e8df f003 	tbb	[pc, r3]
   1f69a:	2730      	.short	0x2730
   1f69c:	06062755 	.word	0x06062755
   1f6a0:	2755      	.short	0x2755
   1f6a2:	2b00      	cmp	r3, #0
   1f6a4:	dadf      	bge.n	1f666 <FinishAesDrv+0x9a>
   1f6a6:	4f46      	ldr	r7, [pc, #280]	; (1f7c0 <FinishAesDrv+0x1f4>)
   1f6a8:	4a44      	ldr	r2, [pc, #272]	; (1f7bc <FinishAesDrv+0x1f0>)
   1f6aa:	6813      	ldr	r3, [r2, #0]
   1f6ac:	2b00      	cmp	r3, #0
   1f6ae:	d1fc      	bne.n	1f6aa <FinishAesDrv+0xde>
   1f6b0:	4a41      	ldr	r2, [pc, #260]	; (1f7b8 <FinishAesDrv+0x1ec>)
   1f6b2:	2001      	movs	r0, #1
   1f6b4:	6013      	str	r3, [r2, #0]
   1f6b6:	f7fe f973 	bl	1d9a0 <CC_PalPowerSaveModeSelect>
   1f6ba:	2800      	cmp	r0, #0
   1f6bc:	d15b      	bne.n	1f776 <FinishAesDrv+0x1aa>
   1f6be:	483d      	ldr	r0, [pc, #244]	; (1f7b4 <FinishAesDrv+0x1e8>)
   1f6c0:	f7fe f946 	bl	1d950 <CC_PalMutexUnlock>
   1f6c4:	2800      	cmp	r0, #0
   1f6c6:	d0a2      	beq.n	1f60e <FinishAesDrv+0x42>
   1f6c8:	483e      	ldr	r0, [pc, #248]	; (1f7c4 <FinishAesDrv+0x1f8>)
   1f6ca:	f7fd fda3 	bl	1d214 <CC_PalAbort>
   1f6ce:	e79e      	b.n	1f60e <FinishAesDrv+0x42>
   1f6d0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1f6d4:	e79b      	b.n	1f60e <FinishAesDrv+0x42>
   1f6d6:	2b01      	cmp	r3, #1
   1f6d8:	d1a6      	bne.n	1f628 <FinishAesDrv+0x5c>
   1f6da:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1f6de:	d3a3      	bcc.n	1f628 <FinishAesDrv+0x5c>
   1f6e0:	4f39      	ldr	r7, [pc, #228]	; (1f7c8 <FinishAesDrv+0x1fc>)
   1f6e2:	e794      	b.n	1f60e <FinishAesDrv+0x42>
   1f6e4:	4f39      	ldr	r7, [pc, #228]	; (1f7cc <FinishAesDrv+0x200>)
   1f6e6:	e7df      	b.n	1f6a8 <FinishAesDrv+0xdc>
   1f6e8:	4b39      	ldr	r3, [pc, #228]	; (1f7d0 <FinishAesDrv+0x204>)
   1f6ea:	6822      	ldr	r2, [r4, #0]
   1f6ec:	601a      	str	r2, [r3, #0]
   1f6ee:	6862      	ldr	r2, [r4, #4]
   1f6f0:	605a      	str	r2, [r3, #4]
   1f6f2:	68a2      	ldr	r2, [r4, #8]
   1f6f4:	609a      	str	r2, [r3, #8]
   1f6f6:	68e2      	ldr	r2, [r4, #12]
   1f6f8:	60da      	str	r2, [r3, #12]
   1f6fa:	4936      	ldr	r1, [pc, #216]	; (1f7d4 <FinishAesDrv+0x208>)
   1f6fc:	4a36      	ldr	r2, [pc, #216]	; (1f7d8 <FinishAesDrv+0x20c>)
   1f6fe:	2301      	movs	r3, #1
   1f700:	600b      	str	r3, [r1, #0]
   1f702:	6015      	str	r5, [r2, #0]
   1f704:	2d00      	cmp	r5, #0
   1f706:	d13e      	bne.n	1f786 <FinishAesDrv+0x1ba>
   1f708:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1f70a:	b90a      	cbnz	r2, 1f710 <FinishAesDrv+0x144>
   1f70c:	4a33      	ldr	r2, [pc, #204]	; (1f7dc <FinishAesDrv+0x210>)
   1f70e:	6013      	str	r3, [r2, #0]
   1f710:	4b2a      	ldr	r3, [pc, #168]	; (1f7bc <FinishAesDrv+0x1f0>)
   1f712:	681f      	ldr	r7, [r3, #0]
   1f714:	2f00      	cmp	r7, #0
   1f716:	d1fc      	bne.n	1f712 <FinishAesDrv+0x146>
   1f718:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f71a:	3b01      	subs	r3, #1
   1f71c:	2b06      	cmp	r3, #6
   1f71e:	d8c3      	bhi.n	1f6a8 <FinishAesDrv+0xdc>
   1f720:	a201      	add	r2, pc, #4	; (adr r2, 1f728 <FinishAesDrv+0x15c>)
   1f722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f726:	bf00      	nop
   1f728:	0001f749 	.word	0x0001f749
   1f72c:	0001f761 	.word	0x0001f761
   1f730:	0001f749 	.word	0x0001f749
   1f734:	0001f6a9 	.word	0x0001f6a9
   1f738:	0001f6a9 	.word	0x0001f6a9
   1f73c:	0001f761 	.word	0x0001f761
   1f740:	0001f749 	.word	0x0001f749
   1f744:	4b26      	ldr	r3, [pc, #152]	; (1f7e0 <FinishAesDrv+0x214>)
   1f746:	e7d0      	b.n	1f6ea <FinishAesDrv+0x11e>
   1f748:	4a21      	ldr	r2, [pc, #132]	; (1f7d0 <FinishAesDrv+0x204>)
   1f74a:	4b26      	ldr	r3, [pc, #152]	; (1f7e4 <FinishAesDrv+0x218>)
   1f74c:	6812      	ldr	r2, [r2, #0]
   1f74e:	6022      	str	r2, [r4, #0]
   1f750:	681a      	ldr	r2, [r3, #0]
   1f752:	6062      	str	r2, [r4, #4]
   1f754:	685a      	ldr	r2, [r3, #4]
   1f756:	60a2      	str	r2, [r4, #8]
   1f758:	3308      	adds	r3, #8
   1f75a:	681b      	ldr	r3, [r3, #0]
   1f75c:	60e3      	str	r3, [r4, #12]
   1f75e:	e7a3      	b.n	1f6a8 <FinishAesDrv+0xdc>
   1f760:	4a1f      	ldr	r2, [pc, #124]	; (1f7e0 <FinishAesDrv+0x214>)
   1f762:	4b21      	ldr	r3, [pc, #132]	; (1f7e8 <FinishAesDrv+0x21c>)
   1f764:	e7f2      	b.n	1f74c <FinishAesDrv+0x180>
   1f766:	4821      	ldr	r0, [pc, #132]	; (1f7ec <FinishAesDrv+0x220>)
   1f768:	f7fd fd54 	bl	1d214 <CC_PalAbort>
   1f76c:	e76e      	b.n	1f64c <FinishAesDrv+0x80>
   1f76e:	4820      	ldr	r0, [pc, #128]	; (1f7f0 <FinishAesDrv+0x224>)
   1f770:	f7fd fd50 	bl	1d214 <CC_PalAbort>
   1f774:	e764      	b.n	1f640 <FinishAesDrv+0x74>
   1f776:	481f      	ldr	r0, [pc, #124]	; (1f7f4 <FinishAesDrv+0x228>)
   1f778:	f7fd fd4c 	bl	1d214 <CC_PalAbort>
   1f77c:	e79f      	b.n	1f6be <FinishAesDrv+0xf2>
   1f77e:	4f1e      	ldr	r7, [pc, #120]	; (1f7f8 <FinishAesDrv+0x22c>)
   1f780:	e792      	b.n	1f6a8 <FinishAesDrv+0xdc>
   1f782:	4f1e      	ldr	r7, [pc, #120]	; (1f7fc <FinishAesDrv+0x230>)
   1f784:	e790      	b.n	1f6a8 <FinishAesDrv+0xdc>
   1f786:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1f788:	6833      	ldr	r3, [r6, #0]
   1f78a:	2a01      	cmp	r2, #1
   1f78c:	d00a      	beq.n	1f7a4 <FinishAesDrv+0x1d8>
   1f78e:	491c      	ldr	r1, [pc, #112]	; (1f800 <FinishAesDrv+0x234>)
   1f790:	4a1c      	ldr	r2, [pc, #112]	; (1f804 <FinishAesDrv+0x238>)
   1f792:	600b      	str	r3, [r1, #0]
   1f794:	2010      	movs	r0, #16
   1f796:	6015      	str	r5, [r2, #0]
   1f798:	f7fe f83e 	bl	1d818 <CC_HalWaitInterrupt>
   1f79c:	4607      	mov	r7, r0
   1f79e:	2800      	cmp	r0, #0
   1f7a0:	d0b6      	beq.n	1f710 <FinishAesDrv+0x144>
   1f7a2:	e781      	b.n	1f6a8 <FinishAesDrv+0xdc>
   1f7a4:	4918      	ldr	r1, [pc, #96]	; (1f808 <FinishAesDrv+0x23c>)
   1f7a6:	4a19      	ldr	r2, [pc, #100]	; (1f80c <FinishAesDrv+0x240>)
   1f7a8:	600b      	str	r3, [r1, #0]
   1f7aa:	2040      	movs	r0, #64	; 0x40
   1f7ac:	6015      	str	r5, [r2, #0]
   1f7ae:	e7f3      	b.n	1f798 <FinishAesDrv+0x1cc>
   1f7b0:	00f1000b 	.word	0x00f1000b
   1f7b4:	20033ae4 	.word	0x20033ae4
   1f7b8:	5002b810 	.word	0x5002b810
   1f7bc:	5002b910 	.word	0x5002b910
   1f7c0:	00f10001 	.word	0x00f10001
   1f7c4:	000279ec 	.word	0x000279ec
   1f7c8:	00f10005 	.word	0x00f10005
   1f7cc:	00f10002 	.word	0x00f10002
   1f7d0:	5002b440 	.word	0x5002b440
   1f7d4:	5002b47c 	.word	0x5002b47c
   1f7d8:	5002b4bc 	.word	0x5002b4bc
   1f7dc:	5002b524 	.word	0x5002b524
   1f7e0:	5002b460 	.word	0x5002b460
   1f7e4:	5002b444 	.word	0x5002b444
   1f7e8:	5002b464 	.word	0x5002b464
   1f7ec:	000279ac 	.word	0x000279ac
   1f7f0:	00027994 	.word	0x00027994
   1f7f4:	000279cc 	.word	0x000279cc
   1f7f8:	00f10003 	.word	0x00f10003
   1f7fc:	00f10004 	.word	0x00f10004
   1f800:	5002bc30 	.word	0x5002bc30
   1f804:	5002bc34 	.word	0x5002bc34
   1f808:	5002bc28 	.word	0x5002bc28
   1f80c:	5002bc2c 	.word	0x5002bc2c

0001f810 <kmu_validate_slot_and_size>:
   1f810:	b921      	cbnz	r1, 1f81c <kmu_validate_slot_and_size+0xc>
   1f812:	4b03      	ldr	r3, [pc, #12]	; (1f820 <kmu_validate_slot_and_size+0x10>)
   1f814:	2800      	cmp	r0, #0
   1f816:	bf18      	it	ne
   1f818:	4618      	movne	r0, r3
   1f81a:	4770      	bx	lr
   1f81c:	4801      	ldr	r0, [pc, #4]	; (1f824 <kmu_validate_slot_and_size+0x14>)
   1f81e:	4770      	bx	lr
   1f820:	00f70001 	.word	0x00f70001
   1f824:	00f70003 	.word	0x00f70003

0001f828 <kmu_validate_kdr_slot_and_size>:
   1f828:	b921      	cbnz	r1, 1f834 <kmu_validate_kdr_slot_and_size+0xc>
   1f82a:	4b03      	ldr	r3, [pc, #12]	; (1f838 <kmu_validate_kdr_slot_and_size+0x10>)
   1f82c:	2800      	cmp	r0, #0
   1f82e:	bf18      	it	ne
   1f830:	4618      	movne	r0, r3
   1f832:	4770      	bx	lr
   1f834:	4801      	ldr	r0, [pc, #4]	; (1f83c <kmu_validate_kdr_slot_and_size+0x14>)
   1f836:	4770      	bx	lr
   1f838:	00f70001 	.word	0x00f70001
   1f83c:	00f70003 	.word	0x00f70003

0001f840 <kmu_use_kdr_key>:
   1f840:	4903      	ldr	r1, [pc, #12]	; (1f850 <kmu_use_kdr_key+0x10>)
   1f842:	4b04      	ldr	r3, [pc, #16]	; (1f854 <kmu_use_kdr_key+0x14>)
   1f844:	2000      	movs	r0, #0
   1f846:	2201      	movs	r2, #1
   1f848:	6008      	str	r0, [r1, #0]
   1f84a:	601a      	str	r2, [r3, #0]
   1f84c:	4770      	bx	lr
   1f84e:	bf00      	nop
   1f850:	5002ba38 	.word	0x5002ba38
   1f854:	5002b478 	.word	0x5002b478

0001f858 <kmu_derive_cmac>:
   1f858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f85c:	b0cd      	sub	sp, #308	; 0x134
   1f85e:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1f862:	460f      	mov	r7, r1
   1f864:	2100      	movs	r1, #0
   1f866:	460c      	mov	r4, r1
   1f868:	4681      	mov	r9, r0
   1f86a:	4616      	mov	r6, r2
   1f86c:	a80e      	add	r0, sp, #56	; 0x38
   1f86e:	2274      	movs	r2, #116	; 0x74
   1f870:	469b      	mov	fp, r3
   1f872:	f001 fe7c 	bl	2156e <memset>
   1f876:	4621      	mov	r1, r4
   1f878:	2280      	movs	r2, #128	; 0x80
   1f87a:	a82c      	add	r0, sp, #176	; 0xb0
   1f87c:	942b      	str	r4, [sp, #172]	; 0xac
   1f87e:	f001 fe76 	bl	2156e <memset>
   1f882:	2384      	movs	r3, #132	; 0x84
   1f884:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f888:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1f88c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1f890:	9305      	str	r3, [sp, #20]
   1f892:	d860      	bhi.n	1f956 <kmu_derive_cmac+0xfe>
   1f894:	ab05      	add	r3, sp, #20
   1f896:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1f89a:	9301      	str	r3, [sp, #4]
   1f89c:	9502      	str	r5, [sp, #8]
   1f89e:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1f8a2:	4659      	mov	r1, fp
   1f8a4:	4630      	mov	r0, r6
   1f8a6:	f8cd a000 	str.w	sl, [sp]
   1f8aa:	f000 f865 	bl	1f978 <UtilCmacBuildDataForDerivation>
   1f8ae:	2800      	cmp	r0, #0
   1f8b0:	d14c      	bne.n	1f94c <kmu_derive_cmac+0xf4>
   1f8b2:	2303      	movs	r3, #3
   1f8b4:	f88d 3013 	strb.w	r3, [sp, #19]
   1f8b8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f8bc:	901c      	str	r0, [sp, #112]	; 0x70
   1f8be:	2200      	movs	r2, #0
   1f8c0:	2110      	movs	r1, #16
   1f8c2:	a80e      	add	r0, sp, #56	; 0x38
   1f8c4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1f8c8:	2607      	movs	r6, #7
   1f8ca:	2301      	movs	r3, #1
   1f8cc:	2401      	movs	r4, #1
   1f8ce:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1f8d2:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1f8d6:	971a      	str	r7, [sp, #104]	; 0x68
   1f8d8:	961b      	str	r6, [sp, #108]	; 0x6c
   1f8da:	9426      	str	r4, [sp, #152]	; 0x98
   1f8dc:	f10d 0920 	add.w	r9, sp, #32
   1f8e0:	f7ff f910 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1f8e4:	2110      	movs	r1, #16
   1f8e6:	e9cd 1900 	strd	r1, r9, [sp]
   1f8ea:	ab0a      	add	r3, sp, #40	; 0x28
   1f8ec:	9905      	ldr	r1, [sp, #20]
   1f8ee:	4650      	mov	r0, sl
   1f8f0:	aa06      	add	r2, sp, #24
   1f8f2:	f7ff f9ab 	bl	1ec4c <SetDataBuffersInfo>
   1f8f6:	4607      	mov	r7, r0
   1f8f8:	b150      	cbz	r0, 1f910 <kmu_derive_cmac+0xb8>
   1f8fa:	e01e      	b.n	1f93a <kmu_derive_cmac+0xe2>
   1f8fc:	f7ff f8fe 	bl	1eafc <CC_PalMemCopyPlat>
   1f900:	2110      	movs	r1, #16
   1f902:	a80e      	add	r0, sp, #56	; 0x38
   1f904:	f7ff f8fe 	bl	1eb04 <CC_PalMemSetZeroPlat>
   1f908:	3401      	adds	r4, #1
   1f90a:	1bad      	subs	r5, r5, r6
   1f90c:	b2e4      	uxtb	r4, r4
   1f90e:	d027      	beq.n	1f960 <kmu_derive_cmac+0x108>
   1f910:	9b05      	ldr	r3, [sp, #20]
   1f912:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   1f916:	2d10      	cmp	r5, #16
   1f918:	464a      	mov	r2, r9
   1f91a:	a906      	add	r1, sp, #24
   1f91c:	a80e      	add	r0, sp, #56	; 0x38
   1f91e:	462e      	mov	r6, r5
   1f920:	bf28      	it	cs
   1f922:	2610      	movcs	r6, #16
   1f924:	f7ff fe52 	bl	1f5cc <FinishAesDrv>
   1f928:	4603      	mov	r3, r0
   1f92a:	4632      	mov	r2, r6
   1f92c:	eb08 0007 	add.w	r0, r8, r7
   1f930:	a90e      	add	r1, sp, #56	; 0x38
   1f932:	4437      	add	r7, r6
   1f934:	2b00      	cmp	r3, #0
   1f936:	d0e1      	beq.n	1f8fc <kmu_derive_cmac+0xa4>
   1f938:	461f      	mov	r7, r3
   1f93a:	a80e      	add	r0, sp, #56	; 0x38
   1f93c:	2274      	movs	r2, #116	; 0x74
   1f93e:	2100      	movs	r1, #0
   1f940:	f7ff f8de 	bl	1eb00 <CC_PalMemSetPlat>
   1f944:	4638      	mov	r0, r7
   1f946:	b04d      	add	sp, #308	; 0x134
   1f948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f94c:	4f08      	ldr	r7, [pc, #32]	; (1f970 <kmu_derive_cmac+0x118>)
   1f94e:	4638      	mov	r0, r7
   1f950:	b04d      	add	sp, #308	; 0x134
   1f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f956:	4f07      	ldr	r7, [pc, #28]	; (1f974 <kmu_derive_cmac+0x11c>)
   1f958:	4638      	mov	r0, r7
   1f95a:	b04d      	add	sp, #308	; 0x134
   1f95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f960:	a80e      	add	r0, sp, #56	; 0x38
   1f962:	2274      	movs	r2, #116	; 0x74
   1f964:	2100      	movs	r1, #0
   1f966:	462f      	mov	r7, r5
   1f968:	f7ff f8ca 	bl	1eb00 <CC_PalMemSetPlat>
   1f96c:	e7ea      	b.n	1f944 <kmu_derive_cmac+0xec>
   1f96e:	bf00      	nop
   1f970:	00f1000e 	.word	0x00f1000e
   1f974:	00f1000f 	.word	0x00f1000f

0001f978 <UtilCmacBuildDataForDerivation>:
   1f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f97c:	b082      	sub	sp, #8
   1f97e:	2600      	movs	r6, #0
   1f980:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f982:	9601      	str	r6, [sp, #4]
   1f984:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1f988:	d83c      	bhi.n	1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f98a:	00ee      	lsls	r6, r5, #3
   1f98c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1f990:	f101 35ff 	add.w	r5, r1, #4294967295
   1f994:	461f      	mov	r7, r3
   1f996:	bf34      	ite	cc
   1f998:	2303      	movcc	r3, #3
   1f99a:	2304      	movcs	r3, #4
   1f99c:	2d3f      	cmp	r5, #63	; 0x3f
   1f99e:	460c      	mov	r4, r1
   1f9a0:	9300      	str	r3, [sp, #0]
   1f9a2:	d82f      	bhi.n	1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9a4:	b370      	cbz	r0, 1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9a6:	4690      	mov	r8, r2
   1f9a8:	b117      	cbz	r7, 1f9b0 <UtilCmacBuildDataForDerivation+0x38>
   1f9aa:	b35a      	cbz	r2, 1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9ac:	2f40      	cmp	r7, #64	; 0x40
   1f9ae:	d829      	bhi.n	1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9b0:	9a08      	ldr	r2, [sp, #32]
   1f9b2:	b33a      	cbz	r2, 1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f9b6:	6811      	ldr	r1, [r2, #0]
   1f9b8:	b321      	cbz	r1, 1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9ba:	19e2      	adds	r2, r4, r7
   1f9bc:	4413      	add	r3, r2
   1f9be:	4299      	cmp	r1, r3
   1f9c0:	d320      	bcc.n	1fa04 <UtilCmacBuildDataForDerivation+0x8c>
   1f9c2:	9b08      	ldr	r3, [sp, #32]
   1f9c4:	4622      	mov	r2, r4
   1f9c6:	4601      	mov	r1, r0
   1f9c8:	1c58      	adds	r0, r3, #1
   1f9ca:	f7ff f897 	bl	1eafc <CC_PalMemCopyPlat>
   1f9ce:	9b08      	ldr	r3, [sp, #32]
   1f9d0:	4423      	add	r3, r4
   1f9d2:	2200      	movs	r2, #0
   1f9d4:	3402      	adds	r4, #2
   1f9d6:	705a      	strb	r2, [r3, #1]
   1f9d8:	bb07      	cbnz	r7, 1fa1c <UtilCmacBuildDataForDerivation+0xa4>
   1f9da:	2eff      	cmp	r6, #255	; 0xff
   1f9dc:	9600      	str	r6, [sp, #0]
   1f9de:	d915      	bls.n	1fa0c <UtilCmacBuildDataForDerivation+0x94>
   1f9e0:	9b08      	ldr	r3, [sp, #32]
   1f9e2:	0235      	lsls	r5, r6, #8
   1f9e4:	b2ad      	uxth	r5, r5
   1f9e6:	1918      	adds	r0, r3, r4
   1f9e8:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   1f9ec:	2202      	movs	r2, #2
   1f9ee:	a901      	add	r1, sp, #4
   1f9f0:	9501      	str	r5, [sp, #4]
   1f9f2:	f7ff f883 	bl	1eafc <CC_PalMemCopyPlat>
   1f9f6:	3402      	adds	r4, #2
   1f9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9fa:	2000      	movs	r0, #0
   1f9fc:	601c      	str	r4, [r3, #0]
   1f9fe:	b002      	add	sp, #8
   1fa00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fa04:	4809      	ldr	r0, [pc, #36]	; (1fa2c <UtilCmacBuildDataForDerivation+0xb4>)
   1fa06:	b002      	add	sp, #8
   1fa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fa0c:	9b08      	ldr	r3, [sp, #32]
   1fa0e:	2201      	movs	r2, #1
   1fa10:	1918      	adds	r0, r3, r4
   1fa12:	4669      	mov	r1, sp
   1fa14:	f7ff f872 	bl	1eafc <CC_PalMemCopyPlat>
   1fa18:	3401      	adds	r4, #1
   1fa1a:	e7ed      	b.n	1f9f8 <UtilCmacBuildDataForDerivation+0x80>
   1fa1c:	9b08      	ldr	r3, [sp, #32]
   1fa1e:	4641      	mov	r1, r8
   1fa20:	1918      	adds	r0, r3, r4
   1fa22:	463a      	mov	r2, r7
   1fa24:	f7ff f86a 	bl	1eafc <CC_PalMemCopyPlat>
   1fa28:	443c      	add	r4, r7
   1fa2a:	e7d6      	b.n	1f9da <UtilCmacBuildDataForDerivation+0x62>
   1fa2c:	80000006 	.word	0x80000006

0001fa30 <main>:


#include "../getBrain_Apps/App_CollectStream.h"

void main(void)
{
   1fa30:	b508      	push	{r3, lr}
	App_CollectStream_BLE_MainRun();
   1fa32:	f7f0 f8bb 	bl	fbac <App_CollectStream_BLE_MainRun>
	
	while(1)
   1fa36:	e7fe      	b.n	1fa36 <main+0x6>

0001fa38 <getBrain_OnSent>:
{
   1fa38:	b508      	push	{r3, lr}
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1fa3a:	f002 fab3 	bl	21fa4 <bt_conn_get_dst>
}
   1fa3e:	bd08      	pop	{r3, pc}

0001fa40 <ADS1299_GetID>:
{
   1fa40:	b500      	push	{lr}
   1fa42:	b083      	sub	sp, #12
	uint8_t u8Id = 0;
   1fa44:	2100      	movs	r1, #0
   1fa46:	f88d 1007 	strb.w	r1, [sp, #7]
	ADS1299_ReadRegs(board, ADS1299_REG_ID, &u8Id, 1);
   1fa4a:	2301      	movs	r3, #1
   1fa4c:	f10d 0207 	add.w	r2, sp, #7
   1fa50:	f7ef fc72 	bl	f338 <ADS1299_ReadRegs>
}
   1fa54:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1fa58:	b003      	add	sp, #12
   1fa5a:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa5e <ADS1299_Platform_IoCs_Write>:
}
   1fa5e:	4770      	bx	lr

0001fa60 <ADS1299_Platform_IoStart_Write>:
	if(level == ADS1299_IO_LOW)
   1fa60:	2801      	cmp	r0, #1
   1fa62:	d005      	beq.n	1fa70 <ADS1299_Platform_IoStart_Write+0x10>
    p_reg->OUTSET = set_mask;
   1fa64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fa68:	2210      	movs	r2, #16
   1fa6a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1fa6e:	4770      	bx	lr
    p_reg->OUTCLR = clr_mask;
   1fa70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fa74:	2210      	movs	r2, #16
   1fa76:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1fa7a:	4770      	bx	lr

0001fa7c <ADS1299_Platform_IoReset_Write>:
	if(level == ADS1299_IO_LOW)
   1fa7c:	2801      	cmp	r0, #1
   1fa7e:	d005      	beq.n	1fa8c <ADS1299_Platform_IoReset_Write+0x10>
    p_reg->OUTSET = set_mask;
   1fa80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fa84:	2220      	movs	r2, #32
   1fa86:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1fa8a:	4770      	bx	lr
    p_reg->OUTCLR = clr_mask;
   1fa8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fa90:	2220      	movs	r2, #32
   1fa92:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
   1fa96:	4770      	bx	lr

0001fa98 <ADS1299_Platform_Delay>:
{
   1fa98:	b538      	push	{r3, r4, r5, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   1fa9a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1fa9e:	17dd      	asrs	r5, r3, #31
   1faa0:	03e9      	lsls	r1, r5, #15
   1faa2:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1faa6:	03d8      	lsls	r0, r3, #15
   1faa8:	f240 34e7 	movw	r4, #999	; 0x3e7
   1faac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fab0:	2300      	movs	r3, #0
   1fab2:	1900      	adds	r0, r0, r4
   1fab4:	f04f 0400 	mov.w	r4, #0
   1fab8:	eb44 0101 	adc.w	r1, r4, r1
   1fabc:	f7e0 fb20 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   1fac0:	f7fc fde0 	bl	1c684 <z_impl_k_sleep>
}
   1fac4:	bd38      	pop	{r3, r4, r5, pc}

0001fac6 <ADS1299_Platform_IoDrdy_Read>:
{
   1fac6:	b508      	push	{r3, lr}
	if(nrfx_gpiote_in_is_set(ADS1299I_DRDY) == true)
   1fac8:	2006      	movs	r0, #6
   1faca:	f7fa fdad 	bl	1a628 <nrfx_gpiote_in_is_set>
   1face:	b108      	cbz	r0, 1fad4 <ADS1299_Platform_IoDrdy_Read+0xe>
		return ADS1299_IO_HIGH;
   1fad0:	2000      	movs	r0, #0
}
   1fad2:	bd08      	pop	{r3, pc}
		return ADS1299_IO_LOW;
   1fad4:	2001      	movs	r0, #1
   1fad6:	e7fc      	b.n	1fad2 <ADS1299_Platform_IoDrdy_Read+0xc>

0001fad8 <CircularBuffer_Push>:
#include <string.h>
#include "CircularBuffer.h"

Std_ReturnType CircularBuffer_Push(CircularBuffer_t *cirbuf, uint8_t * data, uint16_t len)
{
   1fad8:	b4f0      	push	{r4, r5, r6, r7}
	if(cirbuf->buffer_length == cirbuf->max_slots)
   1fada:	68c6      	ldr	r6, [r0, #12]
   1fadc:	6907      	ldr	r7, [r0, #16]
   1fade:	42be      	cmp	r6, r7
   1fae0:	d001      	beq.n	1fae6 <CircularBuffer_Push+0xe>
		
		return E_NOT_OK;
	}
	
	//memcpy(cirbuf->buffer[cirbuf->write_index],data,sizeof((unsigned char *)data));
	for(uint16_t dtcnt = 0; dtcnt < len; dtcnt++)
   1fae2:	2400      	movs	r4, #0
   1fae4:	e00d      	b.n	1fb02 <CircularBuffer_Push+0x2a>
		cirbuf->buffer_status = CIRCULAR_BUFFER_STATE_FULL_BUFFER;
   1fae6:	2301      	movs	r3, #1
   1fae8:	7003      	strb	r3, [r0, #0]
		return E_NOT_OK;
   1faea:	4618      	mov	r0, r3
   1faec:	e015      	b.n	1fb1a <CircularBuffer_Push+0x42>
	{
		cirbuf->buffer[cirbuf->write_index][dtcnt] = data[dtcnt];
   1faee:	6843      	ldr	r3, [r0, #4]
   1faf0:	5d0d      	ldrb	r5, [r1, r4]
   1faf2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1faf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   1fafa:	4423      	add	r3, r4
   1fafc:	751d      	strb	r5, [r3, #20]
	for(uint16_t dtcnt = 0; dtcnt < len; dtcnt++)
   1fafe:	3401      	adds	r4, #1
   1fb00:	b2a4      	uxth	r4, r4
   1fb02:	4294      	cmp	r4, r2
   1fb04:	d3f3      	bcc.n	1faee <CircularBuffer_Push+0x16>
	}
	
	cirbuf->write_index++;
   1fb06:	6843      	ldr	r3, [r0, #4]
   1fb08:	3301      	adds	r3, #1
   1fb0a:	6043      	str	r3, [r0, #4]
	
	if(cirbuf->write_index == cirbuf->max_slots)
   1fb0c:	429f      	cmp	r7, r3
   1fb0e:	d006      	beq.n	1fb1e <CircularBuffer_Push+0x46>
	{
		cirbuf->write_index = 0;
	}
	
	cirbuf->buffer_length++;
   1fb10:	3601      	adds	r6, #1
   1fb12:	60c6      	str	r6, [r0, #12]
	
	cirbuf->buffer_status = CIRCULAR_BUFFER_STATE_IDLE;
   1fb14:	2300      	movs	r3, #0
   1fb16:	7003      	strb	r3, [r0, #0]
	
	return E_OK;
   1fb18:	4618      	mov	r0, r3
}
   1fb1a:	bcf0      	pop	{r4, r5, r6, r7}
   1fb1c:	4770      	bx	lr
		cirbuf->write_index = 0;
   1fb1e:	2300      	movs	r3, #0
   1fb20:	6043      	str	r3, [r0, #4]
   1fb22:	e7f5      	b.n	1fb10 <CircularBuffer_Push+0x38>

0001fb24 <CircularBuffer_Pop>:

Std_ReturnType CircularBuffer_Pop(CircularBuffer_t *cirbuf, uint8_t * data, uint16_t len)
{
   1fb24:	b538      	push	{r3, r4, r5, lr}
   1fb26:	4605      	mov	r5, r0
	if(cirbuf->buffer_length == 0)
   1fb28:	68c3      	ldr	r3, [r0, #12]
   1fb2a:	b16b      	cbz	r3, 1fb48 <CircularBuffer_Pop+0x24>
		cirbuf->buffer_status = CIRCULAR_BUFFER_STATE_EMPTY_BUFFER;
		return E_NOT_OK;
	}
	
	// memcpy(data,cirbuf->buffer[cirbuf->read_index],sizeof(cirbuf->buffer[cirbuf->read_index]));
	for(uint16_t dtcnt = 0; dtcnt < len; dtcnt++)
   1fb2c:	2400      	movs	r4, #0
   1fb2e:	4294      	cmp	r4, r2
   1fb30:	d20e      	bcs.n	1fb50 <CircularBuffer_Pop+0x2c>
	{
		data[dtcnt] = cirbuf->buffer[cirbuf->read_index][dtcnt];
   1fb32:	68ab      	ldr	r3, [r5, #8]
   1fb34:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1fb38:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1fb3c:	4423      	add	r3, r4
   1fb3e:	7d1b      	ldrb	r3, [r3, #20]
   1fb40:	550b      	strb	r3, [r1, r4]
	for(uint16_t dtcnt = 0; dtcnt < len; dtcnt++)
   1fb42:	3401      	adds	r4, #1
   1fb44:	b2a4      	uxth	r4, r4
   1fb46:	e7f2      	b.n	1fb2e <CircularBuffer_Pop+0xa>
		cirbuf->buffer_status = CIRCULAR_BUFFER_STATE_EMPTY_BUFFER;
   1fb48:	2302      	movs	r3, #2
   1fb4a:	7003      	strb	r3, [r0, #0]
		return E_NOT_OK;
   1fb4c:	2001      	movs	r0, #1
   1fb4e:	e015      	b.n	1fb7c <CircularBuffer_Pop+0x58>
	}
	
	memset(cirbuf->buffer[cirbuf->read_index],0,CIRCULAR_BUFFER_MAX_SLOT_DATA_LENGTH);
   1fb50:	68a8      	ldr	r0, [r5, #8]
   1fb52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
   1fb56:	0040      	lsls	r0, r0, #1
   1fb58:	3010      	adds	r0, #16
   1fb5a:	4428      	add	r0, r5
   1fb5c:	221e      	movs	r2, #30
   1fb5e:	2100      	movs	r1, #0
   1fb60:	3004      	adds	r0, #4
   1fb62:	f001 fd04 	bl	2156e <memset>
	
	cirbuf->read_index++;
   1fb66:	68ab      	ldr	r3, [r5, #8]
   1fb68:	3301      	adds	r3, #1
   1fb6a:	60ab      	str	r3, [r5, #8]
	
	if(cirbuf->read_index == cirbuf->max_slots)
   1fb6c:	692a      	ldr	r2, [r5, #16]
   1fb6e:	4293      	cmp	r3, r2
   1fb70:	d005      	beq.n	1fb7e <CircularBuffer_Pop+0x5a>
	{
		cirbuf->read_index = 0;
	}
	
	cirbuf->buffer_length--;
   1fb72:	68eb      	ldr	r3, [r5, #12]
   1fb74:	3b01      	subs	r3, #1
   1fb76:	60eb      	str	r3, [r5, #12]
	
	cirbuf->buffer_status = CIRCULAR_BUFFER_STATE_IDLE;
   1fb78:	2000      	movs	r0, #0
   1fb7a:	7028      	strb	r0, [r5, #0]
	
	return E_OK;
}
   1fb7c:	bd38      	pop	{r3, r4, r5, pc}
		cirbuf->read_index = 0;
   1fb7e:	2300      	movs	r3, #0
   1fb80:	60ab      	str	r3, [r5, #8]
   1fb82:	e7f6      	b.n	1fb72 <CircularBuffer_Pop+0x4e>

0001fb84 <App_CollectStream_BleParamReq>:
}
   1fb84:	2001      	movs	r0, #1
   1fb86:	4770      	bx	lr

0001fb88 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1fb88:	4602      	mov	r2, r0
   1fb8a:	b1b0      	cbz	r0, 1fbba <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1fb8c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1fb8e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1fb92:	2b02      	cmp	r3, #2
   1fb94:	d00b      	beq.n	1fbae <sys_notify_validate+0x26>
   1fb96:	2b03      	cmp	r3, #3
   1fb98:	d004      	beq.n	1fba4 <sys_notify_validate+0x1c>
   1fb9a:	2b01      	cmp	r3, #1
   1fb9c:	d004      	beq.n	1fba8 <sys_notify_validate+0x20>
   1fb9e:	f06f 0015 	mvn.w	r0, #21
   1fba2:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1fba4:	6803      	ldr	r3, [r0, #0]
   1fba6:	b15b      	cbz	r3, 1fbc0 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1fba8:	2000      	movs	r0, #0
   1fbaa:	6090      	str	r0, [r2, #8]
   1fbac:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1fbae:	6803      	ldr	r3, [r0, #0]
   1fbb0:	2b00      	cmp	r3, #0
   1fbb2:	d1f9      	bne.n	1fba8 <sys_notify_validate+0x20>
			rv = -EINVAL;
   1fbb4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1fbb8:	4770      	bx	lr
		return -EINVAL;
   1fbba:	f06f 0015 	mvn.w	r0, #21
   1fbbe:	4770      	bx	lr
			rv = -EINVAL;
   1fbc0:	f06f 0015 	mvn.w	r0, #21
   1fbc4:	4770      	bx	lr

0001fbc6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1fbc6:	b510      	push	{r4, lr}
   1fbc8:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1fbca:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1fbcc:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1fbd0:	6081      	str	r1, [r0, #8]
	switch (method) {
   1fbd2:	2a02      	cmp	r2, #2
   1fbd4:	d004      	beq.n	1fbe0 <sys_notify_finalize+0x1a>
   1fbd6:	2a03      	cmp	r2, #3
   1fbd8:	d105      	bne.n	1fbe6 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1fbda:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1fbdc:	2000      	movs	r0, #0
		break;
   1fbde:	e004      	b.n	1fbea <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1fbe0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1fbe2:	2400      	movs	r4, #0
		break;
   1fbe4:	e001      	b.n	1fbea <sys_notify_finalize+0x24>
	switch (method) {
   1fbe6:	2400      	movs	r4, #0
   1fbe8:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1fbea:	2200      	movs	r2, #0
   1fbec:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1fbee:	b108      	cbz	r0, 1fbf4 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   1fbf0:	f7fd fa8e 	bl	1d110 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	bd10      	pop	{r4, pc}

0001fbf8 <arch_printk_char_out>:
}
   1fbf8:	2000      	movs	r0, #0
   1fbfa:	4770      	bx	lr

0001fbfc <str_out>:
{
   1fbfc:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1fbfe:	680c      	ldr	r4, [r1, #0]
   1fc00:	b154      	cbz	r4, 1fc18 <str_out+0x1c>
   1fc02:	688a      	ldr	r2, [r1, #8]
   1fc04:	684b      	ldr	r3, [r1, #4]
   1fc06:	429a      	cmp	r2, r3
   1fc08:	da06      	bge.n	1fc18 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1fc0a:	3b01      	subs	r3, #1
   1fc0c:	429a      	cmp	r2, r3
   1fc0e:	d008      	beq.n	1fc22 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1fc10:	1c53      	adds	r3, r2, #1
   1fc12:	608b      	str	r3, [r1, #8]
   1fc14:	54a0      	strb	r0, [r4, r2]
   1fc16:	e002      	b.n	1fc1e <str_out+0x22>
		ctx->count++;
   1fc18:	688b      	ldr	r3, [r1, #8]
   1fc1a:	3301      	adds	r3, #1
   1fc1c:	608b      	str	r3, [r1, #8]
}
   1fc1e:	bc10      	pop	{r4}
   1fc20:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1fc22:	1c53      	adds	r3, r2, #1
   1fc24:	608b      	str	r3, [r1, #8]
   1fc26:	2300      	movs	r3, #0
   1fc28:	54a3      	strb	r3, [r4, r2]
   1fc2a:	e7f8      	b.n	1fc1e <str_out+0x22>

0001fc2c <printk>:
{
   1fc2c:	b40f      	push	{r0, r1, r2, r3}
   1fc2e:	b500      	push	{lr}
   1fc30:	b083      	sub	sp, #12
   1fc32:	a904      	add	r1, sp, #16
   1fc34:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1fc38:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1fc3a:	f7f0 f875 	bl	fd28 <vprintk>
}
   1fc3e:	b003      	add	sp, #12
   1fc40:	f85d eb04 	ldr.w	lr, [sp], #4
   1fc44:	b004      	add	sp, #16
   1fc46:	4770      	bx	lr

0001fc48 <snprintk>:
{
   1fc48:	b40c      	push	{r2, r3}
   1fc4a:	b500      	push	{lr}
   1fc4c:	b083      	sub	sp, #12
   1fc4e:	ab04      	add	r3, sp, #16
   1fc50:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1fc54:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1fc56:	f7f0 f877 	bl	fd48 <vsnprintk>
}
   1fc5a:	b003      	add	sp, #12
   1fc5c:	f85d eb04 	ldr.w	lr, [sp], #4
   1fc60:	b002      	add	sp, #8
   1fc62:	4770      	bx	lr

0001fc64 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1fc64:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1fc68:	8b01      	ldrh	r1, [r0, #24]
   1fc6a:	f021 0107 	bic.w	r1, r1, #7
   1fc6e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1fc70:	8301      	strh	r1, [r0, #24]
}
   1fc72:	4770      	bx	lr

0001fc74 <notify_monitors>:
{
   1fc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc78:	4606      	mov	r6, r0
   1fc7a:	460f      	mov	r7, r1
   1fc7c:	4690      	mov	r8, r2
	return list->head;
   1fc7e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fc80:	b119      	cbz	r1, 1fc8a <notify_monitors+0x16>
   1fc82:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fc84:	b131      	cbz	r1, 1fc94 <notify_monitors+0x20>
	return node->next;
   1fc86:	680c      	ldr	r4, [r1, #0]
   1fc88:	e004      	b.n	1fc94 <notify_monitors+0x20>
   1fc8a:	460c      	mov	r4, r1
   1fc8c:	e002      	b.n	1fc94 <notify_monitors+0x20>
   1fc8e:	4623      	mov	r3, r4
   1fc90:	4621      	mov	r1, r4
   1fc92:	461c      	mov	r4, r3
   1fc94:	b159      	cbz	r1, 1fcae <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1fc96:	684d      	ldr	r5, [r1, #4]
   1fc98:	4643      	mov	r3, r8
   1fc9a:	463a      	mov	r2, r7
   1fc9c:	4630      	mov	r0, r6
   1fc9e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1fca0:	2c00      	cmp	r4, #0
   1fca2:	d0f4      	beq.n	1fc8e <notify_monitors+0x1a>
   1fca4:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fca6:	2c00      	cmp	r4, #0
   1fca8:	d0f2      	beq.n	1fc90 <notify_monitors+0x1c>
	return node->next;
   1fcaa:	6823      	ldr	r3, [r4, #0]
   1fcac:	e7f0      	b.n	1fc90 <notify_monitors+0x1c>
}
   1fcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fcb2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fcb2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1fcb4:	f013 0307 	ands.w	r3, r3, #7
   1fcb8:	d103      	bne.n	1fcc2 <process_recheck+0x10>
	return list->head;
   1fcba:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1fcbc:	b10a      	cbz	r2, 1fcc2 <process_recheck+0x10>
		evt = EVT_START;
   1fcbe:	2003      	movs	r0, #3
   1fcc0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1fcc2:	2b02      	cmp	r3, #2
   1fcc4:	d003      	beq.n	1fcce <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1fcc6:	2b01      	cmp	r3, #1
   1fcc8:	d006      	beq.n	1fcd8 <process_recheck+0x26>
	int evt = EVT_NOP;
   1fcca:	2000      	movs	r0, #0
   1fccc:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1fcce:	8b42      	ldrh	r2, [r0, #26]
   1fcd0:	2a00      	cmp	r2, #0
   1fcd2:	d1f8      	bne.n	1fcc6 <process_recheck+0x14>
		evt = EVT_STOP;
   1fcd4:	2004      	movs	r0, #4
   1fcd6:	4770      	bx	lr
   1fcd8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1fcda:	b10b      	cbz	r3, 1fce0 <process_recheck+0x2e>
		evt = EVT_RESET;
   1fcdc:	2005      	movs	r0, #5
}
   1fcde:	4770      	bx	lr
	int evt = EVT_NOP;
   1fce0:	2000      	movs	r0, #0
   1fce2:	4770      	bx	lr

0001fce4 <process_complete>:
{
   1fce4:	b538      	push	{r3, r4, r5, lr}
   1fce6:	4604      	mov	r4, r0
   1fce8:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fcea:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1fcec:	2a00      	cmp	r2, #0
   1fcee:	db07      	blt.n	1fd00 <process_complete+0x1c>
   1fcf0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1fcf4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1fcf6:	2a01      	cmp	r2, #1
   1fcf8:	d90e      	bls.n	1fd18 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1fcfa:	2b04      	cmp	r3, #4
   1fcfc:	d032      	beq.n	1fd64 <process_complete+0x80>
}
   1fcfe:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   1fd00:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fd04:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1fd08:	2300      	movs	r3, #0
   1fd0a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1fd0c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1fd0e:	2101      	movs	r1, #1
   1fd10:	4620      	mov	r0, r4
   1fd12:	f7ff ffa7 	bl	1fc64 <set_state>
   1fd16:	e7f2      	b.n	1fcfe <process_complete+0x1a>
		*clients = mgr->clients;
   1fd18:	e9d0 0100 	ldrd	r0, r1, [r0]
   1fd1c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1fd20:	2200      	movs	r2, #0
   1fd22:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1fd24:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1fd26:	2b06      	cmp	r3, #6
   1fd28:	d117      	bne.n	1fd5a <process_complete+0x76>
	return list->head;
   1fd2a:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fd2c:	b13b      	cbz	r3, 1fd3e <process_complete+0x5a>
				mgr->refs += 1U;
   1fd2e:	8b62      	ldrh	r2, [r4, #26]
   1fd30:	3201      	adds	r2, #1
   1fd32:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fd34:	2b00      	cmp	r3, #0
   1fd36:	d0f9      	beq.n	1fd2c <process_complete+0x48>
	return node->next;
   1fd38:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1fd3a:	2b00      	cmp	r3, #0
   1fd3c:	d1f6      	bne.n	1fd2c <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1fd3e:	2102      	movs	r1, #2
   1fd40:	4620      	mov	r0, r4
   1fd42:	f7ff ff8f 	bl	1fc64 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fd46:	4620      	mov	r0, r4
   1fd48:	f7ff ffb3 	bl	1fcb2 <process_recheck>
   1fd4c:	2800      	cmp	r0, #0
   1fd4e:	d0d6      	beq.n	1fcfe <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fd50:	8b23      	ldrh	r3, [r4, #24]
   1fd52:	f043 0320 	orr.w	r3, r3, #32
   1fd56:	8323      	strh	r3, [r4, #24]
   1fd58:	e7d1      	b.n	1fcfe <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1fd5a:	2100      	movs	r1, #0
   1fd5c:	4620      	mov	r0, r4
   1fd5e:	f7ff ff81 	bl	1fc64 <set_state>
   1fd62:	e7f0      	b.n	1fd46 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1fd64:	2100      	movs	r1, #0
   1fd66:	f7ff ff7d 	bl	1fc64 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1fd6a:	4620      	mov	r0, r4
   1fd6c:	f7ff ffa1 	bl	1fcb2 <process_recheck>
   1fd70:	2800      	cmp	r0, #0
   1fd72:	d0c4      	beq.n	1fcfe <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1fd74:	8b23      	ldrh	r3, [r4, #24]
   1fd76:	f043 0320 	orr.w	r3, r3, #32
   1fd7a:	8323      	strh	r3, [r4, #24]
}
   1fd7c:	e7bf      	b.n	1fcfe <process_complete+0x1a>

0001fd7e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1fd7e:	b158      	cbz	r0, 1fd98 <validate_args+0x1a>
{
   1fd80:	b510      	push	{r4, lr}
   1fd82:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1fd84:	b159      	cbz	r1, 1fd9e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1fd86:	1d08      	adds	r0, r1, #4
   1fd88:	f7ff fefe 	bl	1fb88 <sys_notify_validate>
	if ((rv == 0)
   1fd8c:	b918      	cbnz	r0, 1fd96 <validate_args+0x18>
	    && ((cli->notify.flags
   1fd8e:	68a3      	ldr	r3, [r4, #8]
   1fd90:	f033 0303 	bics.w	r3, r3, #3
   1fd94:	d106      	bne.n	1fda4 <validate_args+0x26>
}
   1fd96:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fd98:	f06f 0015 	mvn.w	r0, #21
}
   1fd9c:	4770      	bx	lr
		return -EINVAL;
   1fd9e:	f06f 0015 	mvn.w	r0, #21
   1fda2:	e7f8      	b.n	1fd96 <validate_args+0x18>
		rv = -EINVAL;
   1fda4:	f06f 0015 	mvn.w	r0, #21
   1fda8:	e7f5      	b.n	1fd96 <validate_args+0x18>

0001fdaa <notify_one>:
{
   1fdaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdae:	4607      	mov	r7, r0
   1fdb0:	460c      	mov	r4, r1
   1fdb2:	4616      	mov	r6, r2
   1fdb4:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1fdb6:	4619      	mov	r1, r3
   1fdb8:	1d20      	adds	r0, r4, #4
   1fdba:	f7ff ff04 	bl	1fbc6 <sys_notify_finalize>
	if (cb) {
   1fdbe:	b128      	cbz	r0, 1fdcc <notify_one+0x22>
   1fdc0:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1fdc2:	462b      	mov	r3, r5
   1fdc4:	4632      	mov	r2, r6
   1fdc6:	4621      	mov	r1, r4
   1fdc8:	4638      	mov	r0, r7
   1fdca:	47c0      	blx	r8
}
   1fdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fdd0 <notify_all>:
{
   1fdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fdd4:	4681      	mov	r9, r0
   1fdd6:	460c      	mov	r4, r1
   1fdd8:	4690      	mov	r8, r2
   1fdda:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   1fddc:	e005      	b.n	1fdea <notify_all+0x1a>
	list->tail = node;
   1fdde:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   1fde0:	463b      	mov	r3, r7
   1fde2:	4642      	mov	r2, r8
   1fde4:	4648      	mov	r0, r9
   1fde6:	f7ff ffe0 	bl	1fdaa <notify_one>
	return list->head;
   1fdea:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1fdec:	b129      	cbz	r1, 1fdfa <notify_all+0x2a>
	return node->next;
   1fdee:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1fdf0:	6025      	str	r5, [r4, #0]
	return list->tail;
   1fdf2:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fdf4:	428e      	cmp	r6, r1
   1fdf6:	d1f3      	bne.n	1fde0 <notify_all+0x10>
   1fdf8:	e7f1      	b.n	1fdde <notify_all+0xe>
}
   1fdfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001fdfe <transition_complete>:
{
   1fdfe:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fe00:	f04f 0440 	mov.w	r4, #64	; 0x40
   1fe04:	f3ef 8211 	mrs	r2, BASEPRI
   1fe08:	f384 8811 	msr	BASEPRI, r4
   1fe0c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1fe10:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1fe12:	2101      	movs	r1, #1
   1fe14:	f7ef ffae 	bl	fd74 <process_event>
}
   1fe18:	bd10      	pop	{r4, pc}

0001fe1a <onoff_manager_init>:
	if ((mgr == NULL)
   1fe1a:	4603      	mov	r3, r0
   1fe1c:	b168      	cbz	r0, 1fe3a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1fe1e:	b179      	cbz	r1, 1fe40 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   1fe20:	680a      	ldr	r2, [r1, #0]
   1fe22:	b182      	cbz	r2, 1fe46 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1fe24:	684a      	ldr	r2, [r1, #4]
   1fe26:	b18a      	cbz	r2, 1fe4c <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1fe28:	2000      	movs	r0, #0
   1fe2a:	6018      	str	r0, [r3, #0]
   1fe2c:	6058      	str	r0, [r3, #4]
   1fe2e:	6098      	str	r0, [r3, #8]
   1fe30:	60d8      	str	r0, [r3, #12]
   1fe32:	6158      	str	r0, [r3, #20]
   1fe34:	6198      	str	r0, [r3, #24]
   1fe36:	6119      	str	r1, [r3, #16]
	return 0;
   1fe38:	4770      	bx	lr
		return -EINVAL;
   1fe3a:	f06f 0015 	mvn.w	r0, #21
   1fe3e:	4770      	bx	lr
   1fe40:	f06f 0015 	mvn.w	r0, #21
   1fe44:	4770      	bx	lr
   1fe46:	f06f 0015 	mvn.w	r0, #21
   1fe4a:	4770      	bx	lr
   1fe4c:	f06f 0015 	mvn.w	r0, #21
}
   1fe50:	4770      	bx	lr

0001fe52 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1fe52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe54:	4604      	mov	r4, r0
   1fe56:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1fe58:	f7ff ff91 	bl	1fd7e <validate_args>

	if (rv < 0) {
   1fe5c:	1e06      	subs	r6, r0, #0
   1fe5e:	db37      	blt.n	1fed0 <onoff_request+0x7e>
   1fe60:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe64:	f3ef 8211 	mrs	r2, BASEPRI
   1fe68:	f383 8811 	msr	BASEPRI, r3
   1fe6c:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1fe70:	8b25      	ldrh	r5, [r4, #24]
   1fe72:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1fe76:	8b63      	ldrh	r3, [r4, #26]
   1fe78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fe7c:	428b      	cmp	r3, r1
   1fe7e:	d02f      	beq.n	1fee0 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1fe80:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1fe82:	2d02      	cmp	r5, #2
   1fe84:	d00c      	beq.n	1fea0 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1fe86:	b18d      	cbz	r5, 1feac <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1fe88:	2d04      	cmp	r5, #4
   1fe8a:	d00f      	beq.n	1feac <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1fe8c:	2d06      	cmp	r5, #6
   1fe8e:	d00d      	beq.n	1feac <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1fe90:	2d05      	cmp	r5, #5
   1fe92:	d01f      	beq.n	1fed4 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1fe94:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1fe98:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1fe9a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fe9c:	4608      	mov	r0, r1
   1fe9e:	e00a      	b.n	1feb6 <onoff_request+0x64>
		mgr->refs += 1U;
   1fea0:	3301      	adds	r3, #1
   1fea2:	8363      	strh	r3, [r4, #26]
		notify = true;
   1fea4:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1fea6:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1fea8:	4618      	mov	r0, r3
   1feaa:	e004      	b.n	1feb6 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1feac:	fab5 f385 	clz	r3, r5
   1feb0:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1feb2:	2100      	movs	r1, #0
		add_client = true;
   1feb4:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1feb6:	b128      	cbz	r0, 1fec4 <onoff_request+0x72>
	parent->next = child;
   1feb8:	2000      	movs	r0, #0
   1feba:	6038      	str	r0, [r7, #0]
	return list->tail;
   1febc:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1febe:	b1a8      	cbz	r0, 1feec <onoff_request+0x9a>
	parent->next = child;
   1fec0:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1fec2:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1fec4:	b9ab      	cbnz	r3, 1fef2 <onoff_request+0xa0>
	__asm__ volatile(
   1fec6:	f382 8811 	msr	BASEPRI, r2
   1feca:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1fece:	b9a9      	cbnz	r1, 1fefc <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1fed0:	4630      	mov	r0, r6
   1fed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1fed4:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1fed8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1feda:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fedc:	4608      	mov	r0, r1
   1fede:	e7ea      	b.n	1feb6 <onoff_request+0x64>
		rv = -EAGAIN;
   1fee0:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1fee4:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1fee6:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1fee8:	4608      	mov	r0, r1
   1feea:	e7e4      	b.n	1feb6 <onoff_request+0x64>
   1feec:	6067      	str	r7, [r4, #4]
	list->head = node;
   1feee:	6027      	str	r7, [r4, #0]
}
   1fef0:	e7e8      	b.n	1fec4 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1fef2:	2102      	movs	r1, #2
   1fef4:	4620      	mov	r0, r4
   1fef6:	f7ef ff3d 	bl	fd74 <process_event>
   1fefa:	e7e9      	b.n	1fed0 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1fefc:	2300      	movs	r3, #0
   1fefe:	462a      	mov	r2, r5
   1ff00:	4639      	mov	r1, r7
   1ff02:	4620      	mov	r0, r4
   1ff04:	f7ff ff51 	bl	1fdaa <notify_one>
   1ff08:	e7e2      	b.n	1fed0 <onoff_request+0x7e>

0001ff0a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ff0a:	b508      	push	{r3, lr}
   1ff0c:	4604      	mov	r4, r0
   1ff0e:	4608      	mov	r0, r1
   1ff10:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1ff12:	461a      	mov	r2, r3
   1ff14:	47a0      	blx	r4
	return z_impl_k_current_get();
   1ff16:	f7fc fbe1 	bl	1c6dc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1ff1a:	f7f3 fa29 	bl	13370 <z_impl_k_thread_abort>

0001ff1e <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ff1e:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   1ff20:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1ff22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ff26:	d303      	bcc.n	1ff30 <chunk_mem+0x12>
   1ff28:	2308      	movs	r3, #8
   1ff2a:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1ff2c:	4408      	add	r0, r1
   1ff2e:	4770      	bx	lr
   1ff30:	2304      	movs	r3, #4
   1ff32:	e7fa      	b.n	1ff2a <chunk_mem+0xc>

0001ff34 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1ff34:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   1ff36:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1ff3a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1ff3c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1ff40:	d317      	bcc.n	1ff72 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   1ff42:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1ff44:	4299      	cmp	r1, r3
   1ff46:	d016      	beq.n	1ff76 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   1ff48:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1ff4c:	d320      	bcc.n	1ff90 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   1ff4e:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1ff50:	3204      	adds	r2, #4
   1ff52:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1ff56:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1ff5a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1ff5e:	d319      	bcc.n	1ff94 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   1ff60:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   1ff62:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   1ff66:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1ff68:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1ff6c:	d314      	bcc.n	1ff98 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   1ff6e:	6099      	str	r1, [r3, #8]
   1ff70:	e00c      	b.n	1ff8c <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   1ff72:	88eb      	ldrh	r3, [r5, #6]
   1ff74:	e7e6      	b.n	1ff44 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   1ff76:	2301      	movs	r3, #1
   1ff78:	fa03 f102 	lsl.w	r1, r3, r2
   1ff7c:	68c3      	ldr	r3, [r0, #12]
   1ff7e:	ea23 0301 	bic.w	r3, r3, r1
   1ff82:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1ff84:	3204      	adds	r2, #4
   1ff86:	2300      	movs	r3, #0
   1ff88:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1ff8c:	bc30      	pop	{r4, r5}
   1ff8e:	4770      	bx	lr
   1ff90:	88a9      	ldrh	r1, [r5, #4]
   1ff92:	e7dd      	b.n	1ff50 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   1ff94:	80d3      	strh	r3, [r2, #6]
   1ff96:	e7e4      	b.n	1ff62 <free_list_remove_bidx+0x2e>
   1ff98:	8099      	strh	r1, [r3, #4]
   1ff9a:	e7f7      	b.n	1ff8c <free_list_remove_bidx+0x58>

0001ff9c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1ff9c:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1ff9e:	1d13      	adds	r3, r2, #4
   1ffa0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1ffa4:	b9d3      	cbnz	r3, 1ffdc <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   1ffa6:	2301      	movs	r3, #1
   1ffa8:	fa03 f402 	lsl.w	r4, r3, r2
   1ffac:	68c3      	ldr	r3, [r0, #12]
   1ffae:	4323      	orrs	r3, r4
   1ffb0:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1ffb2:	3204      	adds	r2, #4
   1ffb4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1ffb8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1ffbc:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1ffbe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1ffc2:	d307      	bcc.n	1ffd4 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   1ffc4:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   1ffc6:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1ffc8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1ffcc:	d304      	bcc.n	1ffd8 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1ffce:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   1ffd0:	bc70      	pop	{r4, r5, r6}
   1ffd2:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   1ffd4:	8099      	strh	r1, [r3, #4]
   1ffd6:	e7f6      	b.n	1ffc6 <free_list_add_bidx+0x2a>
   1ffd8:	80d9      	strh	r1, [r3, #6]
   1ffda:	e7f9      	b.n	1ffd0 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1ffdc:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   1ffe0:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1ffe2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ffe6:	d318      	bcc.n	2001a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   1ffe8:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1ffea:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1ffee:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1fff2:	d314      	bcc.n	2001e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   1fff4:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   1fff6:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1fff8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1fffc:	d311      	bcc.n	20022 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1fffe:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   20000:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   20004:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   20006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2000a:	d30c      	bcc.n	20026 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   2000c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   2000e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   20010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20014:	d309      	bcc.n	2002a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   20016:	60a1      	str	r1, [r4, #8]
   20018:	e7da      	b.n	1ffd0 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   2001a:	88a2      	ldrh	r2, [r4, #4]
   2001c:	e7e5      	b.n	1ffea <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   2001e:	80aa      	strh	r2, [r5, #4]
   20020:	e7e9      	b.n	1fff6 <free_list_add_bidx+0x5a>
   20022:	80eb      	strh	r3, [r5, #6]
   20024:	e7ec      	b.n	20000 <free_list_add_bidx+0x64>
   20026:	80d1      	strh	r1, [r2, #6]
   20028:	e7f1      	b.n	2000e <free_list_add_bidx+0x72>
   2002a:	80a1      	strh	r1, [r4, #4]
   2002c:	e7d0      	b.n	1ffd0 <free_list_add_bidx+0x34>

0002002e <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2002e:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   20030:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   20034:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   20036:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2003a:	d325      	bcc.n	20088 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   2003c:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   2003e:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   20040:	1a89      	subs	r1, r1, r2
   20042:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20046:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   20048:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2004c:	d31e      	bcc.n	2008c <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   2004e:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20050:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   20052:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   20056:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   20058:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2005c:	d318      	bcc.n	20090 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   2005e:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   20060:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   20062:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   20066:	d315      	bcc.n	20094 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   20068:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   2006c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   2006e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20072:	d312      	bcc.n	2009a <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   20074:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   20076:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   2007a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2007e:	d30e      	bcc.n	2009e <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   20080:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   20084:	bc70      	pop	{r4, r5, r6}
   20086:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   20088:	8866      	ldrh	r6, [r4, #2]
   2008a:	e7d8      	b.n	2003e <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   2008c:	8066      	strh	r6, [r4, #2]
   2008e:	e7df      	b.n	20050 <split_chunks+0x22>
   20090:	8065      	strh	r5, [r4, #2]
   20092:	e7e5      	b.n	20060 <split_chunks+0x32>
   20094:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   20098:	e7e8      	b.n	2006c <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   2009a:	8864      	ldrh	r4, [r4, #2]
   2009c:	e7eb      	b.n	20076 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   2009e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   200a2:	e7ef      	b.n	20084 <split_chunks+0x56>

000200a4 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   200a4:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   200a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   200aa:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   200ac:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   200b0:	d31c      	bcc.n	200ec <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   200b2:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   200b4:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   200b6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   200ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   200be:	d317      	bcc.n	200f0 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   200c0:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   200c2:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   200c6:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   200c8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   200cc:	d312      	bcc.n	200f4 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   200ce:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   200d0:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   200d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   200d6:	d30f      	bcc.n	200f8 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   200d8:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   200da:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   200de:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   200e2:	d30b      	bcc.n	200fc <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   200e4:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   200e8:	bc70      	pop	{r4, r5, r6}
   200ea:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   200ec:	884b      	ldrh	r3, [r1, #2]
   200ee:	e7e1      	b.n	200b4 <merge_chunks+0x10>
   200f0:	886e      	ldrh	r6, [r5, #2]
   200f2:	e7e6      	b.n	200c2 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   200f4:	804e      	strh	r6, [r1, #2]
   200f6:	e7eb      	b.n	200d0 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   200f8:	886c      	ldrh	r4, [r5, #2]
   200fa:	e7ee      	b.n	200da <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   200fc:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   20100:	e7f2      	b.n	200e8 <merge_chunks+0x44>

00020102 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   20102:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   20104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20108:	d304      	bcc.n	20114 <mem_to_chunkid+0x12>
   2010a:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2010c:	1ac9      	subs	r1, r1, r3
   2010e:	1a08      	subs	r0, r1, r0
}
   20110:	08c0      	lsrs	r0, r0, #3
   20112:	4770      	bx	lr
   20114:	2304      	movs	r3, #4
   20116:	e7f9      	b.n	2010c <mem_to_chunkid+0xa>

00020118 <free_list_remove>:
{
   20118:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   2011a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   2011c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20120:	d307      	bcc.n	20132 <free_list_remove+0x1a>
	void *cmem = &buf[c];
   20122:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   20126:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20128:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   2012a:	2a01      	cmp	r2, #1
   2012c:	d002      	beq.n	20134 <free_list_remove+0x1c>
   2012e:	2200      	movs	r2, #0
   20130:	e000      	b.n	20134 <free_list_remove+0x1c>
   20132:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   20134:	b9a2      	cbnz	r2, 20160 <free_list_remove+0x48>
	void *cmem = &buf[c];
   20136:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   2013a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2013e:	d310      	bcc.n	20162 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   20140:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20142:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   20144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20148:	d30d      	bcc.n	20166 <free_list_remove+0x4e>
   2014a:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2014c:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   2014e:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   20152:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   20154:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   20158:	f1c2 021f 	rsb	r2, r2, #31
   2015c:	f7ff feea 	bl	1ff34 <free_list_remove_bidx>
}
   20160:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   20162:	8852      	ldrh	r2, [r2, #2]
   20164:	e7ed      	b.n	20142 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   20166:	2304      	movs	r3, #4
   20168:	e7f0      	b.n	2014c <free_list_remove+0x34>

0002016a <free_list_add>:
{
   2016a:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   2016c:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   2016e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20172:	d307      	bcc.n	20184 <free_list_add+0x1a>
	void *cmem = &buf[c];
   20174:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   20178:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2017a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   2017c:	2a01      	cmp	r2, #1
   2017e:	d002      	beq.n	20186 <free_list_add+0x1c>
   20180:	2200      	movs	r2, #0
   20182:	e000      	b.n	20186 <free_list_add+0x1c>
   20184:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   20186:	b9a2      	cbnz	r2, 201b2 <free_list_add+0x48>
	void *cmem = &buf[c];
   20188:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   2018c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20190:	d310      	bcc.n	201b4 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   20192:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   20194:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   20196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2019a:	d30d      	bcc.n	201b8 <free_list_add+0x4e>
   2019c:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2019e:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   201a0:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   201a4:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   201a6:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   201aa:	f1c2 021f 	rsb	r2, r2, #31
   201ae:	f7ff fef5 	bl	1ff9c <free_list_add_bidx>
}
   201b2:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   201b4:	8852      	ldrh	r2, [r2, #2]
   201b6:	e7ed      	b.n	20194 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   201b8:	2304      	movs	r3, #4
   201ba:	e7f0      	b.n	2019e <free_list_add+0x34>

000201bc <free_chunk>:
{
   201bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201be:	4604      	mov	r4, r0
   201c0:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   201c2:	00ce      	lsls	r6, r1, #3
   201c4:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   201c8:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   201ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   201ce:	d31f      	bcc.n	20210 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   201d0:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   201d2:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   201d6:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   201da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   201de:	d319      	bcc.n	20214 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   201e0:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   201e2:	f013 0f01 	tst.w	r3, #1
   201e6:	d017      	beq.n	20218 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   201e8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   201ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   201ee:	d324      	bcc.n	2023a <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   201f0:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   201f2:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   201f4:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   201f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   201fc:	d31f      	bcc.n	2023e <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   201fe:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   20200:	f013 0f01 	tst.w	r3, #1
   20204:	d01d      	beq.n	20242 <free_chunk+0x86>
	free_list_add(h, c);
   20206:	4629      	mov	r1, r5
   20208:	4620      	mov	r0, r4
   2020a:	f7ff ffae 	bl	2016a <free_list_add>
}
   2020e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   20210:	8879      	ldrh	r1, [r7, #2]
   20212:	e7de      	b.n	201d2 <free_chunk+0x16>
   20214:	8853      	ldrh	r3, [r2, #2]
   20216:	e7e4      	b.n	201e2 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   20218:	4620      	mov	r0, r4
   2021a:	f7ff ff7d 	bl	20118 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   2021e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   20220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20224:	d307      	bcc.n	20236 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   20226:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   20228:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   2022c:	4629      	mov	r1, r5
   2022e:	4620      	mov	r0, r4
   20230:	f7ff ff38 	bl	200a4 <merge_chunks>
   20234:	e7d8      	b.n	201e8 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   20236:	887a      	ldrh	r2, [r7, #2]
   20238:	e7f6      	b.n	20228 <free_chunk+0x6c>
   2023a:	5ba1      	ldrh	r1, [r4, r6]
   2023c:	e7d9      	b.n	201f2 <free_chunk+0x36>
   2023e:	8853      	ldrh	r3, [r2, #2]
   20240:	e7de      	b.n	20200 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   20242:	4620      	mov	r0, r4
   20244:	f7ff ff68 	bl	20118 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   20248:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   2024a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2024e:	d30c      	bcc.n	2026a <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   20250:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   20252:	462a      	mov	r2, r5
   20254:	1a69      	subs	r1, r5, r1
   20256:	4620      	mov	r0, r4
   20258:	f7ff ff24 	bl	200a4 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   2025c:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   2025e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20262:	d304      	bcc.n	2026e <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   20264:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   20266:	1aed      	subs	r5, r5, r3
   20268:	e7cd      	b.n	20206 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   2026a:	5ba1      	ldrh	r1, [r4, r6]
   2026c:	e7f1      	b.n	20252 <free_chunk+0x96>
   2026e:	5ba3      	ldrh	r3, [r4, r6]
   20270:	e7f9      	b.n	20266 <free_chunk+0xaa>

00020272 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   20272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   20274:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   20276:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2027a:	d311      	bcc.n	202a0 <alloc_chunk+0x2e>
   2027c:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2027e:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   20280:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   20284:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   20286:	fab3 f383 	clz	r3, r3
   2028a:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2028e:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   20292:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   20296:	f1bc 0f00 	cmp.w	ip, #0
   2029a:	d024      	beq.n	202e6 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   2029c:	2603      	movs	r6, #3
   2029e:	e010      	b.n	202c2 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   202a0:	2304      	movs	r3, #4
   202a2:	e7ec      	b.n	2027e <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   202a4:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   202a8:	e015      	b.n	202d6 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   202aa:	4621      	mov	r1, r4
   202ac:	f7ff fe42 	bl	1ff34 <free_list_remove_bidx>
				return c;
   202b0:	e021      	b.n	202f6 <alloc_chunk+0x84>
   202b2:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   202b4:	1d17      	adds	r7, r2, #4
   202b6:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   202ba:	3e01      	subs	r6, #1
   202bc:	d013      	beq.n	202e6 <alloc_chunk+0x74>
   202be:	45a4      	cmp	ip, r4
   202c0:	d011      	beq.n	202e6 <alloc_chunk+0x74>
			chunkid_t c = b->next;
   202c2:	1d14      	adds	r4, r2, #4
   202c4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   202c8:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   202cc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   202d0:	d3e8      	bcc.n	202a4 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   202d2:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   202d6:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   202da:	d9e6      	bls.n	202aa <alloc_chunk+0x38>
	if (big_heap(h)) {
   202dc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   202e0:	d3e7      	bcc.n	202b2 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   202e2:	68fc      	ldr	r4, [r7, #12]
   202e4:	e7e6      	b.n	202b4 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   202e6:	68c4      	ldr	r4, [r0, #12]
   202e8:	f1c3 0220 	rsb	r2, r3, #32
   202ec:	2301      	movs	r3, #1
   202ee:	4093      	lsls	r3, r2
   202f0:	425b      	negs	r3, r3

	if (bmask != 0U) {
   202f2:	401c      	ands	r4, r3
   202f4:	d101      	bne.n	202fa <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   202f6:	4620      	mov	r0, r4
   202f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   202fa:	fa94 f2a4 	rbit	r2, r4
   202fe:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   20302:	1d13      	adds	r3, r2, #4
   20304:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   20308:	4621      	mov	r1, r4
   2030a:	f7ff fe13 	bl	1ff34 <free_list_remove_bidx>
		return c;
   2030e:	e7f2      	b.n	202f6 <alloc_chunk+0x84>

00020310 <sys_heap_free>:
	if (mem == NULL) {
   20310:	b1c1      	cbz	r1, 20344 <sys_heap_free+0x34>
{
   20312:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   20314:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   20316:	4620      	mov	r0, r4
   20318:	f7ff fef3 	bl	20102 <mem_to_chunkid>
   2031c:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   2031e:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   20322:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   20324:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   20328:	d307      	bcc.n	2033a <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2032a:	685a      	ldr	r2, [r3, #4]
   2032c:	f022 0201 	bic.w	r2, r2, #1
   20330:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   20332:	4620      	mov	r0, r4
   20334:	f7ff ff42 	bl	201bc <free_chunk>
}
   20338:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2033a:	885a      	ldrh	r2, [r3, #2]
   2033c:	f022 0201 	bic.w	r2, r2, #1
   20340:	805a      	strh	r2, [r3, #2]
   20342:	e7f6      	b.n	20332 <sys_heap_free+0x22>
   20344:	4770      	bx	lr

00020346 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   20346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   20348:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   2034a:	2900      	cmp	r1, #0
   2034c:	d03c      	beq.n	203c8 <sys_heap_alloc+0x82>
   2034e:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   20350:	68aa      	ldr	r2, [r5, #8]
   20352:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   20356:	d939      	bls.n	203cc <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   20358:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   2035c:	d320      	bcc.n	203a0 <sys_heap_alloc+0x5a>
   2035e:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   20360:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   20362:	3407      	adds	r4, #7
   20364:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   20366:	4621      	mov	r1, r4
   20368:	4628      	mov	r0, r5
   2036a:	f7ff ff82 	bl	20272 <alloc_chunk>
	if (c == 0U) {
   2036e:	4607      	mov	r7, r0
   20370:	b370      	cbz	r0, 203d0 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   20372:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   20376:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   20378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2037c:	d312      	bcc.n	203a4 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   2037e:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   20380:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   20384:	d310      	bcc.n	203a8 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   20386:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   20388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2038c:	d317      	bcc.n	203be <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2038e:	6873      	ldr	r3, [r6, #4]
   20390:	f043 0301 	orr.w	r3, r3, #1
   20394:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   20396:	4639      	mov	r1, r7
   20398:	4628      	mov	r0, r5
   2039a:	f7ff fdc0 	bl	1ff1e <chunk_mem>
}
   2039e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   203a0:	2404      	movs	r4, #4
   203a2:	e7dd      	b.n	20360 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   203a4:	8873      	ldrh	r3, [r6, #2]
   203a6:	e7eb      	b.n	20380 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   203a8:	443c      	add	r4, r7
   203aa:	4622      	mov	r2, r4
   203ac:	4639      	mov	r1, r7
   203ae:	4628      	mov	r0, r5
   203b0:	f7ff fe3d 	bl	2002e <split_chunks>
		free_list_add(h, c + chunk_sz);
   203b4:	4621      	mov	r1, r4
   203b6:	4628      	mov	r0, r5
   203b8:	f7ff fed7 	bl	2016a <free_list_add>
   203bc:	e7e3      	b.n	20386 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   203be:	8873      	ldrh	r3, [r6, #2]
   203c0:	f043 0301 	orr.w	r3, r3, #1
   203c4:	8073      	strh	r3, [r6, #2]
   203c6:	e7e6      	b.n	20396 <sys_heap_alloc+0x50>
		return NULL;
   203c8:	2000      	movs	r0, #0
   203ca:	e7e8      	b.n	2039e <sys_heap_alloc+0x58>
   203cc:	2000      	movs	r0, #0
   203ce:	e7e6      	b.n	2039e <sys_heap_alloc+0x58>
		return NULL;
   203d0:	2000      	movs	r0, #0
   203d2:	e7e4      	b.n	2039e <sys_heap_alloc+0x58>

000203d4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   203d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203d8:	460d      	mov	r5, r1
   203da:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   203dc:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   203de:	424b      	negs	r3, r1
   203e0:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   203e4:	ea31 0303 	bics.w	r3, r1, r3
   203e8:	d04e      	beq.n	20488 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   203ea:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   203ee:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   203f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   203f4:	d346      	bcc.n	20484 <sys_heap_aligned_alloc+0xb0>
   203f6:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   203f8:	4598      	cmp	r8, r3
   203fa:	d200      	bcs.n	203fe <sys_heap_aligned_alloc+0x2a>
   203fc:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   203fe:	2c00      	cmp	r4, #0
   20400:	d070      	beq.n	204e4 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   20402:	68b2      	ldr	r2, [r6, #8]
   20404:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   20408:	d96e      	bls.n	204e8 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2040a:	1929      	adds	r1, r5, r4
   2040c:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   2040e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   20412:	d34a      	bcc.n	204aa <sys_heap_aligned_alloc+0xd6>
   20414:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   20416:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   20418:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2041a:	08c9      	lsrs	r1, r1, #3
   2041c:	4630      	mov	r0, r6
   2041e:	f7ff ff28 	bl	20272 <alloc_chunk>

	if (c0 == 0) {
   20422:	4607      	mov	r7, r0
   20424:	2800      	cmp	r0, #0
   20426:	d061      	beq.n	204ec <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   20428:	4601      	mov	r1, r0
   2042a:	4630      	mov	r0, r6
   2042c:	f7ff fd77 	bl	1ff1e <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   20430:	4440      	add	r0, r8
   20432:	4428      	add	r0, r5
   20434:	3801      	subs	r0, #1
   20436:	426d      	negs	r5, r5
   20438:	4005      	ands	r5, r0
   2043a:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2043e:	442c      	add	r4, r5
   20440:	3407      	adds	r4, #7
   20442:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   20446:	4629      	mov	r1, r5
   20448:	4630      	mov	r0, r6
   2044a:	f7ff fe5a 	bl	20102 <mem_to_chunkid>
   2044e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   20450:	1ba4      	subs	r4, r4, r6
   20452:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   20454:	4287      	cmp	r7, r0
   20456:	d32a      	bcc.n	204ae <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   20458:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   2045c:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   2045e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20462:	d32e      	bcc.n	204c2 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   20464:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   20466:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   2046a:	429c      	cmp	r4, r3
   2046c:	d32b      	bcc.n	204c6 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   2046e:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   20470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   20474:	d331      	bcc.n	204da <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   20476:	687b      	ldr	r3, [r7, #4]
   20478:	f043 0301 	orr.w	r3, r3, #1
   2047c:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   2047e:	4628      	mov	r0, r5
   20480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   20484:	2304      	movs	r3, #4
   20486:	e7b7      	b.n	203f8 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   20488:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   2048a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2048e:	d305      	bcc.n	2049c <sys_heap_aligned_alloc+0xc8>
   20490:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   20492:	429d      	cmp	r5, r3
   20494:	d904      	bls.n	204a0 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   20496:	f04f 0800 	mov.w	r8, #0
   2049a:	e7b0      	b.n	203fe <sys_heap_aligned_alloc+0x2a>
   2049c:	2304      	movs	r3, #4
   2049e:	e7f8      	b.n	20492 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   204a0:	4621      	mov	r1, r4
   204a2:	f7ff ff50 	bl	20346 <sys_heap_alloc>
   204a6:	4605      	mov	r5, r0
   204a8:	e7e9      	b.n	2047e <sys_heap_aligned_alloc+0xaa>
   204aa:	2304      	movs	r3, #4
   204ac:	e7b3      	b.n	20416 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   204ae:	4602      	mov	r2, r0
   204b0:	4639      	mov	r1, r7
   204b2:	4630      	mov	r0, r6
   204b4:	f7ff fdbb 	bl	2002e <split_chunks>
		free_list_add(h, c0);
   204b8:	4639      	mov	r1, r7
   204ba:	4630      	mov	r0, r6
   204bc:	f7ff fe55 	bl	2016a <free_list_add>
   204c0:	e7ca      	b.n	20458 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   204c2:	887b      	ldrh	r3, [r7, #2]
   204c4:	e7cf      	b.n	20466 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   204c6:	4622      	mov	r2, r4
   204c8:	4641      	mov	r1, r8
   204ca:	4630      	mov	r0, r6
   204cc:	f7ff fdaf 	bl	2002e <split_chunks>
		free_list_add(h, c_end);
   204d0:	4621      	mov	r1, r4
   204d2:	4630      	mov	r0, r6
   204d4:	f7ff fe49 	bl	2016a <free_list_add>
   204d8:	e7c9      	b.n	2046e <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   204da:	887b      	ldrh	r3, [r7, #2]
   204dc:	f043 0301 	orr.w	r3, r3, #1
   204e0:	807b      	strh	r3, [r7, #2]
   204e2:	e7cc      	b.n	2047e <sys_heap_aligned_alloc+0xaa>
		return NULL;
   204e4:	2500      	movs	r5, #0
   204e6:	e7ca      	b.n	2047e <sys_heap_aligned_alloc+0xaa>
   204e8:	2500      	movs	r5, #0
   204ea:	e7c8      	b.n	2047e <sys_heap_aligned_alloc+0xaa>
		return NULL;
   204ec:	2500      	movs	r5, #0
   204ee:	e7c6      	b.n	2047e <sys_heap_aligned_alloc+0xaa>

000204f0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   204f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204f2:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   204f4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   204f8:	d32a      	bcc.n	20550 <sys_heap_init+0x60>
   204fa:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   204fc:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   204fe:	1dc8      	adds	r0, r1, #7
   20500:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   20504:	440d      	add	r5, r1
   20506:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2050a:	1a2d      	subs	r5, r5, r0
   2050c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   2050e:	4606      	mov	r6, r0
	heap->heap = h;
   20510:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   20512:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   20514:	2300      	movs	r3, #0
   20516:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   20518:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2051c:	d31a      	bcc.n	20554 <sys_heap_init+0x64>
   2051e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   20520:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   20522:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   20526:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   20528:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2052c:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   20530:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   20534:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   20536:	f103 0e07 	add.w	lr, r3, #7
   2053a:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2053e:	2300      	movs	r3, #0
   20540:	4563      	cmp	r3, ip
   20542:	da09      	bge.n	20558 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   20544:	1d1a      	adds	r2, r3, #4
   20546:	2400      	movs	r4, #0
   20548:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   2054c:	3301      	adds	r3, #1
   2054e:	e7f7      	b.n	20540 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   20550:	2504      	movs	r5, #4
   20552:	e7d3      	b.n	204fc <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   20554:	2304      	movs	r3, #4
   20556:	e7e3      	b.n	20520 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   20558:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   2055a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2055e:	d333      	bcc.n	205c8 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   20560:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   20562:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   20566:	d331      	bcc.n	205cc <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   20568:	2300      	movs	r3, #0
   2056a:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   2056c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   20570:	d32f      	bcc.n	205d2 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   20572:	6843      	ldr	r3, [r0, #4]
   20574:	f043 0301 	orr.w	r3, r3, #1
   20578:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2057a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2057c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   2057e:	f02e 0307 	bic.w	r3, lr, #7
   20582:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   20584:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   20588:	d328      	bcc.n	205dc <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   2058a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   2058c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   2058e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   20592:	d325      	bcc.n	205e0 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   20594:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   20596:	f025 0307 	bic.w	r3, r5, #7
   2059a:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   2059c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   2059e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   205a2:	d31f      	bcc.n	205e4 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   205a4:	2400      	movs	r4, #0
   205a6:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   205a8:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   205aa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   205ae:	d31c      	bcc.n	205ea <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   205b0:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   205b2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   205b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   205b8:	d319      	bcc.n	205ee <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   205ba:	686b      	ldr	r3, [r5, #4]
   205bc:	f043 0301 	orr.w	r3, r3, #1
   205c0:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   205c2:	f7ff fdd2 	bl	2016a <free_list_add>
}
   205c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   205c8:	8043      	strh	r3, [r0, #2]
   205ca:	e7ca      	b.n	20562 <sys_heap_init+0x72>
   205cc:	2300      	movs	r3, #0
   205ce:	8003      	strh	r3, [r0, #0]
   205d0:	e7cc      	b.n	2056c <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   205d2:	8843      	ldrh	r3, [r0, #2]
   205d4:	f043 0301 	orr.w	r3, r3, #1
   205d8:	8043      	strh	r3, [r0, #2]
   205da:	e7ce      	b.n	2057a <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   205dc:	8066      	strh	r6, [r4, #2]
   205de:	e7d5      	b.n	2058c <sys_heap_init+0x9c>
   205e0:	52c1      	strh	r1, [r0, r3]
   205e2:	e7d8      	b.n	20596 <sys_heap_init+0xa6>
   205e4:	2400      	movs	r4, #0
   205e6:	806c      	strh	r4, [r5, #2]
   205e8:	e7de      	b.n	205a8 <sys_heap_init+0xb8>
   205ea:	52c2      	strh	r2, [r0, r3]
   205ec:	e7e1      	b.n	205b2 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   205ee:	886b      	ldrh	r3, [r5, #2]
   205f0:	f043 0301 	orr.w	r3, r3, #1
   205f4:	806b      	strh	r3, [r5, #2]
   205f6:	e7e4      	b.n	205c2 <sys_heap_init+0xd2>

000205f8 <extract_decimal>:
{
   205f8:	b410      	push	{r4}
   205fa:	4604      	mov	r4, r0
	const char *sp = *str;
   205fc:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   205fe:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   20600:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   20602:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   20606:	2909      	cmp	r1, #9
   20608:	d806      	bhi.n	20618 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   2060a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2060e:	3201      	adds	r2, #1
   20610:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   20614:	3830      	subs	r0, #48	; 0x30
   20616:	e7f3      	b.n	20600 <extract_decimal+0x8>
	*str = sp;
   20618:	6022      	str	r2, [r4, #0]
}
   2061a:	bc10      	pop	{r4}
   2061c:	4770      	bx	lr

0002061e <encode_uint>:
{
   2061e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20622:	b083      	sub	sp, #12
   20624:	4604      	mov	r4, r0
   20626:	460d      	mov	r5, r1
   20628:	9201      	str	r2, [sp, #4]
   2062a:	469a      	mov	sl, r3
   2062c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   20630:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   20632:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   20636:	2b6f      	cmp	r3, #111	; 0x6f
   20638:	d00f      	beq.n	2065a <encode_uint+0x3c>
   2063a:	d906      	bls.n	2064a <encode_uint+0x2c>
   2063c:	2b70      	cmp	r3, #112	; 0x70
   2063e:	d00f      	beq.n	20660 <encode_uint+0x42>
   20640:	2b78      	cmp	r3, #120	; 0x78
   20642:	d110      	bne.n	20666 <encode_uint+0x48>
		return 16;
   20644:	f04f 0910 	mov.w	r9, #16
   20648:	e026      	b.n	20698 <encode_uint+0x7a>
	switch (specifier) {
   2064a:	2b58      	cmp	r3, #88	; 0x58
   2064c:	d002      	beq.n	20654 <encode_uint+0x36>
   2064e:	f04f 090a 	mov.w	r9, #10
   20652:	e021      	b.n	20698 <encode_uint+0x7a>
		return 16;
   20654:	f04f 0910 	mov.w	r9, #16
   20658:	e01e      	b.n	20698 <encode_uint+0x7a>
		return 8;
   2065a:	f04f 0908 	mov.w	r9, #8
   2065e:	e01b      	b.n	20698 <encode_uint+0x7a>
		return 16;
   20660:	f04f 0910 	mov.w	r9, #16
   20664:	e018      	b.n	20698 <encode_uint+0x7a>
	switch (specifier) {
   20666:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   2066a:	e015      	b.n	20698 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2066c:	f1bb 0f19 	cmp.w	fp, #25
   20670:	d820      	bhi.n	206b4 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   20672:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   20674:	3237      	adds	r2, #55	; 0x37
   20676:	b2d2      	uxtb	r2, r2
   20678:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   2067c:	4632      	mov	r2, r6
   2067e:	463b      	mov	r3, r7
   20680:	4620      	mov	r0, r4
   20682:	4629      	mov	r1, r5
   20684:	f7df fd3c 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   20688:	42bd      	cmp	r5, r7
   2068a:	bf08      	it	eq
   2068c:	42b4      	cmpeq	r4, r6
   2068e:	d315      	bcc.n	206bc <encode_uint+0x9e>
   20690:	45d0      	cmp	r8, sl
   20692:	d913      	bls.n	206bc <encode_uint+0x9e>
		value /= radix;
   20694:	4604      	mov	r4, r0
   20696:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   20698:	464e      	mov	r6, r9
   2069a:	2700      	movs	r7, #0
   2069c:	464a      	mov	r2, r9
   2069e:	463b      	mov	r3, r7
   206a0:	4620      	mov	r0, r4
   206a2:	4629      	mov	r1, r5
   206a4:	f7df fd2c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   206a8:	2a09      	cmp	r2, #9
   206aa:	d8df      	bhi.n	2066c <encode_uint+0x4e>
   206ac:	b2d2      	uxtb	r2, r2
   206ae:	3230      	adds	r2, #48	; 0x30
   206b0:	b2d2      	uxtb	r2, r2
   206b2:	e7e1      	b.n	20678 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   206b4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   206b6:	3257      	adds	r2, #87	; 0x57
   206b8:	b2d2      	uxtb	r2, r2
   206ba:	e7dd      	b.n	20678 <encode_uint+0x5a>
	if (conv->flag_hash) {
   206bc:	9b01      	ldr	r3, [sp, #4]
   206be:	781b      	ldrb	r3, [r3, #0]
   206c0:	f013 0f20 	tst.w	r3, #32
   206c4:	d005      	beq.n	206d2 <encode_uint+0xb4>
		if (radix == 8) {
   206c6:	f1b9 0f08 	cmp.w	r9, #8
   206ca:	d006      	beq.n	206da <encode_uint+0xbc>
		} else if (radix == 16) {
   206cc:	f1b9 0f10 	cmp.w	r9, #16
   206d0:	d009      	beq.n	206e6 <encode_uint+0xc8>
}
   206d2:	4640      	mov	r0, r8
   206d4:	b003      	add	sp, #12
   206d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   206da:	9a01      	ldr	r2, [sp, #4]
   206dc:	7893      	ldrb	r3, [r2, #2]
   206de:	f043 0308 	orr.w	r3, r3, #8
   206e2:	7093      	strb	r3, [r2, #2]
   206e4:	e7f5      	b.n	206d2 <encode_uint+0xb4>
			conv->altform_0c = true;
   206e6:	9a01      	ldr	r2, [sp, #4]
   206e8:	7893      	ldrb	r3, [r2, #2]
   206ea:	f043 0310 	orr.w	r3, r3, #16
   206ee:	7093      	strb	r3, [r2, #2]
   206f0:	e7ef      	b.n	206d2 <encode_uint+0xb4>

000206f2 <outs>:
{
   206f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206f6:	4607      	mov	r7, r0
   206f8:	460e      	mov	r6, r1
   206fa:	4614      	mov	r4, r2
   206fc:	4698      	mov	r8, r3
	size_t count = 0;
   206fe:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20700:	e006      	b.n	20710 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   20702:	4631      	mov	r1, r6
   20704:	f814 0b01 	ldrb.w	r0, [r4], #1
   20708:	47b8      	blx	r7
		if (rc < 0) {
   2070a:	2800      	cmp	r0, #0
   2070c:	db09      	blt.n	20722 <outs+0x30>
		++count;
   2070e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20710:	4544      	cmp	r4, r8
   20712:	d3f6      	bcc.n	20702 <outs+0x10>
   20714:	f1b8 0f00 	cmp.w	r8, #0
   20718:	d102      	bne.n	20720 <outs+0x2e>
   2071a:	7823      	ldrb	r3, [r4, #0]
   2071c:	2b00      	cmp	r3, #0
   2071e:	d1f0      	bne.n	20702 <outs+0x10>
	return (int)count;
   20720:	4628      	mov	r0, r5
}
   20722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020726 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   20726:	4770      	bx	lr

00020728 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   20728:	2300      	movs	r3, #0
   2072a:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   2072c:	6003      	str	r3, [r0, #0]
}
   2072e:	4770      	bx	lr

00020730 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   20730:	6803      	ldr	r3, [r0, #0]
   20732:	b12b      	cbz	r3, 20740 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   20734:	6843      	ldr	r3, [r0, #4]
   20736:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   20738:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2073a:	2300      	movs	r3, #0
   2073c:	600b      	str	r3, [r1, #0]
}
   2073e:	4770      	bx	lr
		list->head = msg;
   20740:	6001      	str	r1, [r0, #0]
   20742:	e7f9      	b.n	20738 <log_list_add_tail+0x8>

00020744 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   20744:	6800      	ldr	r0, [r0, #0]
   20746:	4770      	bx	lr

00020748 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   20748:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2074a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2074c:	b108      	cbz	r0, 20752 <log_list_head_get+0xa>
		list->head = list->head->next;
   2074e:	6802      	ldr	r2, [r0, #0]
   20750:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   20752:	4770      	bx	lr

00020754 <dummy_timestamp>:
}
   20754:	2000      	movs	r0, #0
   20756:	4770      	bx	lr

00020758 <msg_filter_check>:
}
   20758:	2001      	movs	r0, #1
   2075a:	4770      	bx	lr

0002075c <default_get_timestamp>:
{
   2075c:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2075e:	f7f1 fb39 	bl	11dd4 <sys_clock_cycle_get_32>
}
   20762:	bd08      	pop	{r3, pc}

00020764 <z_log_get_s_mask>:
{
   20764:	b470      	push	{r4, r5, r6}
   20766:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   20768:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   2076a:	4605      	mov	r5, r0
	bool arm = false;
   2076c:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   2076e:	e001      	b.n	20774 <z_log_get_s_mask+0x10>
			arm = !arm;
   20770:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   20774:	f813 2b01 	ldrb.w	r2, [r3], #1
   20778:	b19a      	cbz	r2, 207a2 <z_log_get_s_mask+0x3e>
   2077a:	428d      	cmp	r5, r1
   2077c:	d211      	bcs.n	207a2 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   2077e:	2a25      	cmp	r2, #37	; 0x25
   20780:	d0f6      	beq.n	20770 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   20782:	2c00      	cmp	r4, #0
   20784:	d0f6      	beq.n	20774 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   20786:	f042 0620 	orr.w	r6, r2, #32
   2078a:	3e61      	subs	r6, #97	; 0x61
   2078c:	2e19      	cmp	r6, #25
   2078e:	d8f1      	bhi.n	20774 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   20790:	2a73      	cmp	r2, #115	; 0x73
   20792:	d002      	beq.n	2079a <z_log_get_s_mask+0x36>
			arg++;
   20794:	3501      	adds	r5, #1
			arm = false;
   20796:	2400      	movs	r4, #0
   20798:	e7ec      	b.n	20774 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   2079a:	2201      	movs	r2, #1
   2079c:	40aa      	lsls	r2, r5
   2079e:	4310      	orrs	r0, r2
   207a0:	e7f8      	b.n	20794 <z_log_get_s_mask+0x30>
}
   207a2:	bc70      	pop	{r4, r5, r6}
   207a4:	4770      	bx	lr

000207a6 <block_on_alloc>:
}
   207a6:	2000      	movs	r0, #0
   207a8:	4770      	bx	lr

000207aa <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   207aa:	2901      	cmp	r1, #1
   207ac:	d906      	bls.n	207bc <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   207ae:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   207b0:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   207b2:	2906      	cmp	r1, #6
   207b4:	d907      	bls.n	207c6 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   207b6:	3907      	subs	r1, #7
		cont = cont->next;
   207b8:	681b      	ldr	r3, [r3, #0]
   207ba:	e7fa      	b.n	207b2 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   207bc:	3104      	adds	r1, #4
   207be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   207c2:	6888      	ldr	r0, [r1, #8]
   207c4:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   207c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   207ca:	6848      	ldr	r0, [r1, #4]
}
   207cc:	4770      	bx	lr

000207ce <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   207ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207d2:	460d      	mov	r5, r1
   207d4:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   207d6:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   207d8:	2a03      	cmp	r2, #3
   207da:	d917      	bls.n	2080c <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   207dc:	2208      	movs	r2, #8
   207de:	3018      	adds	r0, #24
   207e0:	f000 fea1 	bl	21526 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   207e4:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   207e6:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   207e8:	b1b4      	cbz	r4, 20818 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   207ea:	46a0      	mov	r8, r4
   207ec:	2c07      	cmp	r4, #7
   207ee:	bf28      	it	cs
   207f0:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   207f4:	ea4f 0788 	mov.w	r7, r8, lsl #2
   207f8:	463a      	mov	r2, r7
   207fa:	4629      	mov	r1, r5
   207fc:	1d30      	adds	r0, r6, #4
   207fe:	f000 fe92 	bl	21526 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   20802:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   20806:	443d      	add	r5, r7
		cont = cont->next;
   20808:	6836      	ldr	r6, [r6, #0]
   2080a:	e7ed      	b.n	207e8 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   2080c:	0092      	lsls	r2, r2, #2
   2080e:	3014      	adds	r0, #20
   20810:	f000 fe89 	bl	21526 <memcpy>
		nargs  = 0U;
   20814:	2400      	movs	r4, #0
   20816:	e7e7      	b.n	207e8 <copy_args_to_msg+0x1a>
	}
}
   20818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002081c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2081c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20820:	461c      	mov	r4, r3
   20822:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   20826:	8903      	ldrh	r3, [r0, #8]
   20828:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2082c:	42a3      	cmp	r3, r4
   2082e:	d91f      	bls.n	20870 <log_msg_hexdump_data_op+0x54>
   20830:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   20832:	6811      	ldr	r1, [r2, #0]
   20834:	4421      	add	r1, r4
   20836:	4299      	cmp	r1, r3
   20838:	d901      	bls.n	2083e <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   2083a:	1b19      	subs	r1, r3, r4
   2083c:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   2083e:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20840:	2b0c      	cmp	r3, #12
   20842:	d919      	bls.n	20878 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   20844:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   20848:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2084a:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   2084c:	42a3      	cmp	r3, r4
   2084e:	d91e      	bls.n	2088e <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   20850:	42bb      	cmp	r3, r7
   20852:	bf28      	it	cs
   20854:	463b      	movcs	r3, r7
   20856:	461d      	mov	r5, r3

		if (put_op) {
   20858:	f1b9 0f00 	cmp.w	r9, #0
   2085c:	d010      	beq.n	20880 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   2085e:	461a      	mov	r2, r3
   20860:	4641      	mov	r1, r8
   20862:	eb0c 0004 	add.w	r0, ip, r4
   20866:	f000 fe5e 	bl	21526 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   2086a:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   2086c:	44a8      	add	r8, r5
   2086e:	e021      	b.n	208b4 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   20870:	2300      	movs	r3, #0
   20872:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   20874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   20878:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   2087c:	2600      	movs	r6, #0
   2087e:	e7e5      	b.n	2084c <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   20880:	461a      	mov	r2, r3
   20882:	eb0c 0104 	add.w	r1, ip, r4
   20886:	4640      	mov	r0, r8
   20888:	f000 fe4d 	bl	21526 <memcpy>
   2088c:	e7ed      	b.n	2086a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2088e:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   20890:	b91e      	cbnz	r6, 2089a <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   20892:	6946      	ldr	r6, [r0, #20]
   20894:	e001      	b.n	2089a <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   20896:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   20898:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   2089a:	2c1b      	cmp	r4, #27
   2089c:	d8fb      	bhi.n	20896 <log_msg_hexdump_data_op+0x7a>
   2089e:	e009      	b.n	208b4 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   208a0:	1931      	adds	r1, r6, r4
   208a2:	462a      	mov	r2, r5
   208a4:	3104      	adds	r1, #4
   208a6:	4640      	mov	r0, r8
   208a8:	f000 fe3d 	bl	21526 <memcpy>
		cont = cont->next;
   208ac:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   208ae:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   208b0:	44a8      	add	r8, r5
		offset = 0;
   208b2:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   208b4:	2f00      	cmp	r7, #0
   208b6:	d0dd      	beq.n	20874 <log_msg_hexdump_data_op+0x58>
   208b8:	2e00      	cmp	r6, #0
   208ba:	d0db      	beq.n	20874 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   208bc:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   208c0:	42bd      	cmp	r5, r7
   208c2:	bf28      	it	cs
   208c4:	463d      	movcs	r5, r7
		if (put_op) {
   208c6:	f1b9 0f00 	cmp.w	r9, #0
   208ca:	d0e9      	beq.n	208a0 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   208cc:	1930      	adds	r0, r6, r4
   208ce:	462a      	mov	r2, r5
   208d0:	4641      	mov	r1, r8
   208d2:	3004      	adds	r0, #4
   208d4:	f000 fe27 	bl	21526 <memcpy>
   208d8:	e7e8      	b.n	208ac <log_msg_hexdump_data_op+0x90>

000208da <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   208da:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   208dc:	f3bf 8f5b 	dmb	ish
   208e0:	e850 3f00 	ldrex	r3, [r0]
   208e4:	3301      	adds	r3, #1
   208e6:	e840 3200 	strex	r2, r3, [r0]
   208ea:	2a00      	cmp	r2, #0
   208ec:	d1f8      	bne.n	208e0 <log_msg_get+0x6>
   208ee:	f3bf 8f5b 	dmb	ish
}
   208f2:	4770      	bx	lr

000208f4 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   208f4:	7a40      	ldrb	r0, [r0, #9]
}
   208f6:	0900      	lsrs	r0, r0, #4
   208f8:	4770      	bx	lr

000208fa <log_msg_arg_get>:
{
   208fa:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   208fc:	7a43      	ldrb	r3, [r0, #9]
   208fe:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   20902:	d20a      	bcs.n	2091a <log_msg_arg_get+0x20>
   20904:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20906:	2a03      	cmp	r2, #3
   20908:	d804      	bhi.n	20914 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   2090a:	3104      	adds	r1, #4
   2090c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20910:	6840      	ldr	r0, [r0, #4]
   20912:	e003      	b.n	2091c <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   20914:	f7ff ff49 	bl	207aa <cont_arg_get>
   20918:	e000      	b.n	2091c <log_msg_arg_get+0x22>
		return 0;
   2091a:	2000      	movs	r0, #0
}
   2091c:	bd08      	pop	{r3, pc}

0002091e <log_msg_str_get>:
}
   2091e:	6900      	ldr	r0, [r0, #16]
   20920:	4770      	bx	lr

00020922 <log_msg_put>:
{
   20922:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   20924:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   20926:	f3bf 8f5b 	dmb	ish
   2092a:	e853 2f00 	ldrex	r2, [r3]
   2092e:	3a01      	subs	r2, #1
   20930:	e843 2100 	strex	r1, r2, [r3]
   20934:	2900      	cmp	r1, #0
   20936:	d1f8      	bne.n	2092a <log_msg_put+0x8>
   20938:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   2093c:	6843      	ldr	r3, [r0, #4]
   2093e:	b103      	cbz	r3, 20942 <log_msg_put+0x20>
}
   20940:	bd08      	pop	{r3, pc}
		msg_free(msg);
   20942:	f7f0 fc23 	bl	1118c <msg_free>
}
   20946:	e7fb      	b.n	20940 <log_msg_put+0x1e>

00020948 <msg_alloc>:
{
   20948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2094a:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2094c:	f7f0 fc02 	bl	11154 <log_msg_chunk_alloc>
	if (msg != NULL) {
   20950:	4607      	mov	r7, r0
   20952:	b140      	cbz	r0, 20966 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   20954:	2301      	movs	r3, #1
   20956:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   20958:	2200      	movs	r2, #0
   2095a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   2095c:	f04f 0300 	mov.w	r3, #0
   20960:	f362 0300 	bfi	r3, r2, #0, #1
   20964:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   20966:	b1f7      	cbz	r7, 209a6 <msg_alloc+0x5e>
   20968:	2d03      	cmp	r5, #3
   2096a:	d91c      	bls.n	209a6 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   2096c:	7a7b      	ldrb	r3, [r7, #9]
   2096e:	f36f 1307 	bfc	r3, #4, #4
   20972:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   20974:	7a3b      	ldrb	r3, [r7, #8]
   20976:	f043 0302 	orr.w	r3, r3, #2
   2097a:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2097c:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   2097e:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   20982:	2300      	movs	r3, #0
   20984:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   20986:	2d00      	cmp	r5, #0
   20988:	dd0d      	ble.n	209a6 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2098a:	f7f0 fbe3 	bl	11154 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2098e:	4604      	mov	r4, r0
   20990:	b128      	cbz	r0, 2099e <msg_alloc+0x56>
		*next = cont;
   20992:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   20994:	2300      	movs	r3, #0
   20996:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   20998:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   2099a:	3d07      	subs	r5, #7
   2099c:	e7f3      	b.n	20986 <msg_alloc+0x3e>
			msg_free(msg);
   2099e:	4638      	mov	r0, r7
   209a0:	f7f0 fbf4 	bl	1118c <msg_free>
			return NULL;
   209a4:	4627      	mov	r7, r4
}
   209a6:	4638      	mov	r0, r7
   209a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000209aa <log_msg_create_n>:
{
   209aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   209ac:	4607      	mov	r7, r0
   209ae:	460e      	mov	r6, r1
   209b0:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   209b2:	4610      	mov	r0, r2
   209b4:	f7ff ffc8 	bl	20948 <msg_alloc>
	if (msg != NULL) {
   209b8:	4605      	mov	r5, r0
   209ba:	b140      	cbz	r0, 209ce <log_msg_create_n+0x24>
		msg->str = str;
   209bc:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   209be:	7a43      	ldrb	r3, [r0, #9]
   209c0:	f364 1307 	bfi	r3, r4, #4, #4
   209c4:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   209c6:	4622      	mov	r2, r4
   209c8:	4631      	mov	r1, r6
   209ca:	f7ff ff00 	bl	207ce <copy_args_to_msg>
}
   209ce:	4628      	mov	r0, r5
   209d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000209d2 <log_msg_hexdump_create>:
{
   209d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   209d6:	4606      	mov	r6, r0
   209d8:	460f      	mov	r7, r1
   209da:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   209dc:	f643 75ff 	movw	r5, #16383	; 0x3fff
   209e0:	4295      	cmp	r5, r2
   209e2:	bf28      	it	cs
   209e4:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   209e6:	f7f0 fbb5 	bl	11154 <log_msg_chunk_alloc>
	if (msg == NULL) {
   209ea:	4681      	mov	r9, r0
   209ec:	2800      	cmp	r0, #0
   209ee:	d045      	beq.n	20a7c <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   209f0:	2301      	movs	r3, #1
   209f2:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   209f4:	7a03      	ldrb	r3, [r0, #8]
   209f6:	f043 0301 	orr.w	r3, r3, #1
   209fa:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   209fc:	8903      	ldrh	r3, [r0, #8]
   209fe:	f365 038f 	bfi	r3, r5, #2, #14
   20a02:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   20a04:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   20a06:	2c0c      	cmp	r4, #12
   20a08:	d927      	bls.n	20a5a <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   20a0a:	2208      	movs	r2, #8
   20a0c:	4639      	mov	r1, r7
   20a0e:	3018      	adds	r0, #24
   20a10:	f000 fd89 	bl	21526 <memcpy>
		msg->payload.ext.next = NULL;
   20a14:	2300      	movs	r3, #0
   20a16:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   20a1a:	f899 3008 	ldrb.w	r3, [r9, #8]
   20a1e:	f043 0302 	orr.w	r3, r3, #2
   20a22:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20a26:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   20a28:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   20a2a:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   20a2e:	b32d      	cbz	r5, 20a7c <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   20a30:	f7f0 fb90 	bl	11154 <log_msg_chunk_alloc>
		if (cont == NULL) {
   20a34:	4604      	mov	r4, r0
   20a36:	b1e8      	cbz	r0, 20a74 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   20a38:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   20a3c:	2300      	movs	r3, #0
   20a3e:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   20a40:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   20a42:	462e      	mov	r6, r5
   20a44:	2d1c      	cmp	r5, #28
   20a46:	bf28      	it	cs
   20a48:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   20a4a:	4632      	mov	r2, r6
   20a4c:	4639      	mov	r1, r7
   20a4e:	3004      	adds	r0, #4
   20a50:	f000 fd69 	bl	21526 <memcpy>
		data += chunk_length;
   20a54:	4437      	add	r7, r6
		length -= chunk_length;
   20a56:	1bad      	subs	r5, r5, r6
   20a58:	e7e9      	b.n	20a2e <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   20a5a:	462a      	mov	r2, r5
   20a5c:	4639      	mov	r1, r7
   20a5e:	3014      	adds	r0, #20
   20a60:	f000 fd61 	bl	21526 <memcpy>
		msg->hdr.params.generic.ext = 0;
   20a64:	f899 3008 	ldrb.w	r3, [r9, #8]
   20a68:	f36f 0341 	bfc	r3, #1, #1
   20a6c:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   20a70:	2500      	movs	r5, #0
   20a72:	e7da      	b.n	20a2a <log_msg_hexdump_create+0x58>
			msg_free(msg);
   20a74:	4648      	mov	r0, r9
   20a76:	f7f0 fb89 	bl	1118c <msg_free>
			return NULL;
   20a7a:	46a1      	mov	r9, r4
}
   20a7c:	4648      	mov	r0, r9
   20a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020a82 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   20a82:	b510      	push	{r4, lr}
   20a84:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   20a86:	2400      	movs	r4, #0
   20a88:	9400      	str	r4, [sp, #0]
   20a8a:	f7ff fec7 	bl	2081c <log_msg_hexdump_data_op>
}
   20a8e:	b002      	add	sp, #8
   20a90:	bd10      	pop	{r4, pc}

00020a92 <buffer_write>:
{
   20a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a94:	4607      	mov	r7, r0
   20a96:	460d      	mov	r5, r1
   20a98:	4614      	mov	r4, r2
   20a9a:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   20a9c:	4632      	mov	r2, r6
   20a9e:	4621      	mov	r1, r4
   20aa0:	4628      	mov	r0, r5
   20aa2:	47b8      	blx	r7
		buf += processed;
   20aa4:	4405      	add	r5, r0
	} while (len != 0);
   20aa6:	1a24      	subs	r4, r4, r0
   20aa8:	d1f8      	bne.n	20a9c <buffer_write+0xa>
}
   20aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020aac <color_prefix>:
{
   20aac:	b508      	push	{r3, lr}
   20aae:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   20ab0:	2201      	movs	r2, #1
   20ab2:	f7f0 fc03 	bl	112bc <color_print>
}
   20ab6:	bd08      	pop	{r3, pc}

00020ab8 <color_postfix>:
{
   20ab8:	b508      	push	{r3, lr}
   20aba:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   20abc:	2200      	movs	r2, #0
   20abe:	f7f0 fbfd 	bl	112bc <color_print>
}
   20ac2:	bd08      	pop	{r3, pc}

00020ac4 <postfix_print>:
{
   20ac4:	b538      	push	{r3, r4, r5, lr}
   20ac6:	4605      	mov	r5, r0
   20ac8:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   20aca:	f001 0101 	and.w	r1, r1, #1
   20ace:	f7ff fff3 	bl	20ab8 <color_postfix>
	newline_print(output, flags);
   20ad2:	4621      	mov	r1, r4
   20ad4:	4628      	mov	r0, r5
   20ad6:	f7f0 fc07 	bl	112e8 <newline_print>
}
   20ada:	bd38      	pop	{r3, r4, r5, pc}

00020adc <prefix_print>:
{
   20adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20ae0:	b083      	sub	sp, #12
   20ae2:	4604      	mov	r4, r0
   20ae4:	4615      	mov	r5, r2
   20ae6:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   20aea:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   20aee:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   20af2:	f011 0702 	ands.w	r7, r1, #2
   20af6:	d113      	bne.n	20b20 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   20af8:	4632      	mov	r2, r6
   20afa:	4649      	mov	r1, r9
   20afc:	4620      	mov	r0, r4
   20afe:	f7ff ffd5 	bl	20aac <color_prefix>
	length += ids_print(output, level_on, func_on,
   20b02:	9601      	str	r6, [sp, #4]
   20b04:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   20b08:	9300      	str	r3, [sp, #0]
   20b0a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   20b0e:	462a      	mov	r2, r5
   20b10:	4641      	mov	r1, r8
   20b12:	4620      	mov	r0, r4
   20b14:	f7f0 fc5a 	bl	113cc <ids_print>
}
   20b18:	4438      	add	r0, r7
   20b1a:	b003      	add	sp, #12
   20b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   20b20:	461a      	mov	r2, r3
   20b22:	f7f0 fb85 	bl	11230 <timestamp_print>
   20b26:	4607      	mov	r7, r0
   20b28:	e7e6      	b.n	20af8 <prefix_print+0x1c>

00020b2a <std_print>:
{
   20b2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20b2e:	b08e      	sub	sp, #56	; 0x38
   20b30:	af0e      	add	r7, sp, #56	; 0x38
   20b32:	4606      	mov	r6, r0
   20b34:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   20b36:	f7ff fef2 	bl	2091e <log_msg_str_get>
   20b3a:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   20b3c:	4630      	mov	r0, r6
   20b3e:	f7ff fed9 	bl	208f4 <log_msg_nargs_get>
   20b42:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   20b44:	0083      	lsls	r3, r0, #2
   20b46:	3307      	adds	r3, #7
   20b48:	f023 0307 	bic.w	r3, r3, #7
   20b4c:	ebad 0d03 	sub.w	sp, sp, r3
   20b50:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   20b52:	2400      	movs	r4, #0
   20b54:	4544      	cmp	r4, r8
   20b56:	d207      	bcs.n	20b68 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   20b58:	4621      	mov	r1, r4
   20b5a:	4630      	mov	r0, r6
   20b5c:	f7ff fecd 	bl	208fa <log_msg_arg_get>
   20b60:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   20b64:	3401      	adds	r4, #1
   20b66:	e7f5      	b.n	20b54 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   20b68:	4630      	mov	r0, r6
   20b6a:	f7ff fec3 	bl	208f4 <log_msg_nargs_get>
   20b6e:	280f      	cmp	r0, #15
   20b70:	d815      	bhi.n	20b9e <std_print+0x74>
   20b72:	e8df f010 	tbh	[pc, r0, lsl #1]
   20b76:	0010      	.short	0x0010
   20b78:	001d0017 	.word	0x001d0017
   20b7c:	002d0024 	.word	0x002d0024
   20b80:	00450038 	.word	0x00450038
   20b84:	00650054 	.word	0x00650054
   20b88:	008d0078 	.word	0x008d0078
   20b8c:	00bd00a4 	.word	0x00bd00a4
   20b90:	00f500d8 	.word	0x00f500d8
   20b94:	0114      	.short	0x0114
		print_formatted(output, str);
   20b96:	4651      	mov	r1, sl
   20b98:	4648      	mov	r0, r9
   20b9a:	f7f0 fb37 	bl	1120c <print_formatted>
}
   20b9e:	46bd      	mov	sp, r7
   20ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   20ba4:	682a      	ldr	r2, [r5, #0]
   20ba6:	4651      	mov	r1, sl
   20ba8:	4648      	mov	r0, r9
   20baa:	f7f0 fb2f 	bl	1120c <print_formatted>
		break;
   20bae:	e7f6      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   20bb0:	686b      	ldr	r3, [r5, #4]
   20bb2:	682a      	ldr	r2, [r5, #0]
   20bb4:	4651      	mov	r1, sl
   20bb6:	4648      	mov	r0, r9
   20bb8:	f7f0 fb28 	bl	1120c <print_formatted>
		break;
   20bbc:	e7ef      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   20bbe:	686b      	ldr	r3, [r5, #4]
   20bc0:	682a      	ldr	r2, [r5, #0]
   20bc2:	68a9      	ldr	r1, [r5, #8]
   20bc4:	9100      	str	r1, [sp, #0]
   20bc6:	4651      	mov	r1, sl
   20bc8:	4648      	mov	r0, r9
   20bca:	f7f0 fb1f 	bl	1120c <print_formatted>
		break;
   20bce:	e7e6      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20bd0:	686b      	ldr	r3, [r5, #4]
   20bd2:	682a      	ldr	r2, [r5, #0]
   20bd4:	68e9      	ldr	r1, [r5, #12]
   20bd6:	9101      	str	r1, [sp, #4]
   20bd8:	68a9      	ldr	r1, [r5, #8]
   20bda:	9100      	str	r1, [sp, #0]
   20bdc:	4651      	mov	r1, sl
   20bde:	4648      	mov	r0, r9
   20be0:	f7f0 fb14 	bl	1120c <print_formatted>
		break;
   20be4:	e7db      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20be6:	686b      	ldr	r3, [r5, #4]
   20be8:	682a      	ldr	r2, [r5, #0]
   20bea:	6929      	ldr	r1, [r5, #16]
   20bec:	9102      	str	r1, [sp, #8]
   20bee:	68e9      	ldr	r1, [r5, #12]
   20bf0:	9101      	str	r1, [sp, #4]
   20bf2:	68a9      	ldr	r1, [r5, #8]
   20bf4:	9100      	str	r1, [sp, #0]
   20bf6:	4651      	mov	r1, sl
   20bf8:	4648      	mov	r0, r9
   20bfa:	f7f0 fb07 	bl	1120c <print_formatted>
		break;
   20bfe:	e7ce      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20c00:	686b      	ldr	r3, [r5, #4]
   20c02:	682a      	ldr	r2, [r5, #0]
   20c04:	6969      	ldr	r1, [r5, #20]
   20c06:	9103      	str	r1, [sp, #12]
   20c08:	6929      	ldr	r1, [r5, #16]
   20c0a:	9102      	str	r1, [sp, #8]
   20c0c:	68e9      	ldr	r1, [r5, #12]
   20c0e:	9101      	str	r1, [sp, #4]
   20c10:	68a9      	ldr	r1, [r5, #8]
   20c12:	9100      	str	r1, [sp, #0]
   20c14:	4651      	mov	r1, sl
   20c16:	4648      	mov	r0, r9
   20c18:	f7f0 faf8 	bl	1120c <print_formatted>
		break;
   20c1c:	e7bf      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20c1e:	686b      	ldr	r3, [r5, #4]
   20c20:	682a      	ldr	r2, [r5, #0]
   20c22:	69a9      	ldr	r1, [r5, #24]
   20c24:	9104      	str	r1, [sp, #16]
   20c26:	6969      	ldr	r1, [r5, #20]
   20c28:	9103      	str	r1, [sp, #12]
   20c2a:	6929      	ldr	r1, [r5, #16]
   20c2c:	9102      	str	r1, [sp, #8]
   20c2e:	68e9      	ldr	r1, [r5, #12]
   20c30:	9101      	str	r1, [sp, #4]
   20c32:	68a9      	ldr	r1, [r5, #8]
   20c34:	9100      	str	r1, [sp, #0]
   20c36:	4651      	mov	r1, sl
   20c38:	4648      	mov	r0, r9
   20c3a:	f7f0 fae7 	bl	1120c <print_formatted>
		break;
   20c3e:	e7ae      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20c40:	686b      	ldr	r3, [r5, #4]
   20c42:	682a      	ldr	r2, [r5, #0]
   20c44:	69e9      	ldr	r1, [r5, #28]
   20c46:	9105      	str	r1, [sp, #20]
   20c48:	69a9      	ldr	r1, [r5, #24]
   20c4a:	9104      	str	r1, [sp, #16]
   20c4c:	6969      	ldr	r1, [r5, #20]
   20c4e:	9103      	str	r1, [sp, #12]
   20c50:	6929      	ldr	r1, [r5, #16]
   20c52:	9102      	str	r1, [sp, #8]
   20c54:	68e9      	ldr	r1, [r5, #12]
   20c56:	9101      	str	r1, [sp, #4]
   20c58:	68a9      	ldr	r1, [r5, #8]
   20c5a:	9100      	str	r1, [sp, #0]
   20c5c:	4651      	mov	r1, sl
   20c5e:	4648      	mov	r0, r9
   20c60:	f7f0 fad4 	bl	1120c <print_formatted>
		break;
   20c64:	e79b      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20c66:	686b      	ldr	r3, [r5, #4]
   20c68:	682a      	ldr	r2, [r5, #0]
   20c6a:	6a29      	ldr	r1, [r5, #32]
   20c6c:	9106      	str	r1, [sp, #24]
   20c6e:	69e9      	ldr	r1, [r5, #28]
   20c70:	9105      	str	r1, [sp, #20]
   20c72:	69a9      	ldr	r1, [r5, #24]
   20c74:	9104      	str	r1, [sp, #16]
   20c76:	6969      	ldr	r1, [r5, #20]
   20c78:	9103      	str	r1, [sp, #12]
   20c7a:	6929      	ldr	r1, [r5, #16]
   20c7c:	9102      	str	r1, [sp, #8]
   20c7e:	68e9      	ldr	r1, [r5, #12]
   20c80:	9101      	str	r1, [sp, #4]
   20c82:	68a9      	ldr	r1, [r5, #8]
   20c84:	9100      	str	r1, [sp, #0]
   20c86:	4651      	mov	r1, sl
   20c88:	4648      	mov	r0, r9
   20c8a:	f7f0 fabf 	bl	1120c <print_formatted>
		break;
   20c8e:	e786      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20c90:	686b      	ldr	r3, [r5, #4]
   20c92:	682a      	ldr	r2, [r5, #0]
   20c94:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20c96:	9107      	str	r1, [sp, #28]
   20c98:	6a29      	ldr	r1, [r5, #32]
   20c9a:	9106      	str	r1, [sp, #24]
   20c9c:	69e9      	ldr	r1, [r5, #28]
   20c9e:	9105      	str	r1, [sp, #20]
   20ca0:	69a9      	ldr	r1, [r5, #24]
   20ca2:	9104      	str	r1, [sp, #16]
   20ca4:	6969      	ldr	r1, [r5, #20]
   20ca6:	9103      	str	r1, [sp, #12]
   20ca8:	6929      	ldr	r1, [r5, #16]
   20caa:	9102      	str	r1, [sp, #8]
   20cac:	68e9      	ldr	r1, [r5, #12]
   20cae:	9101      	str	r1, [sp, #4]
   20cb0:	68a9      	ldr	r1, [r5, #8]
   20cb2:	9100      	str	r1, [sp, #0]
   20cb4:	4651      	mov	r1, sl
   20cb6:	4648      	mov	r0, r9
   20cb8:	f7f0 faa8 	bl	1120c <print_formatted>
		break;
   20cbc:	e76f      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20cbe:	686b      	ldr	r3, [r5, #4]
   20cc0:	682a      	ldr	r2, [r5, #0]
   20cc2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20cc4:	9108      	str	r1, [sp, #32]
   20cc6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20cc8:	9107      	str	r1, [sp, #28]
   20cca:	6a29      	ldr	r1, [r5, #32]
   20ccc:	9106      	str	r1, [sp, #24]
   20cce:	69e9      	ldr	r1, [r5, #28]
   20cd0:	9105      	str	r1, [sp, #20]
   20cd2:	69a9      	ldr	r1, [r5, #24]
   20cd4:	9104      	str	r1, [sp, #16]
   20cd6:	6969      	ldr	r1, [r5, #20]
   20cd8:	9103      	str	r1, [sp, #12]
   20cda:	6929      	ldr	r1, [r5, #16]
   20cdc:	9102      	str	r1, [sp, #8]
   20cde:	68e9      	ldr	r1, [r5, #12]
   20ce0:	9101      	str	r1, [sp, #4]
   20ce2:	68a9      	ldr	r1, [r5, #8]
   20ce4:	9100      	str	r1, [sp, #0]
   20ce6:	4651      	mov	r1, sl
   20ce8:	4648      	mov	r0, r9
   20cea:	f7f0 fa8f 	bl	1120c <print_formatted>
		break;
   20cee:	e756      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20cf0:	686b      	ldr	r3, [r5, #4]
   20cf2:	682a      	ldr	r2, [r5, #0]
   20cf4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   20cf6:	9109      	str	r1, [sp, #36]	; 0x24
   20cf8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20cfa:	9108      	str	r1, [sp, #32]
   20cfc:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20cfe:	9107      	str	r1, [sp, #28]
   20d00:	6a29      	ldr	r1, [r5, #32]
   20d02:	9106      	str	r1, [sp, #24]
   20d04:	69e9      	ldr	r1, [r5, #28]
   20d06:	9105      	str	r1, [sp, #20]
   20d08:	69a9      	ldr	r1, [r5, #24]
   20d0a:	9104      	str	r1, [sp, #16]
   20d0c:	6969      	ldr	r1, [r5, #20]
   20d0e:	9103      	str	r1, [sp, #12]
   20d10:	6929      	ldr	r1, [r5, #16]
   20d12:	9102      	str	r1, [sp, #8]
   20d14:	68e9      	ldr	r1, [r5, #12]
   20d16:	9101      	str	r1, [sp, #4]
   20d18:	68a9      	ldr	r1, [r5, #8]
   20d1a:	9100      	str	r1, [sp, #0]
   20d1c:	4651      	mov	r1, sl
   20d1e:	4648      	mov	r0, r9
   20d20:	f7f0 fa74 	bl	1120c <print_formatted>
		break;
   20d24:	e73b      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20d26:	686b      	ldr	r3, [r5, #4]
   20d28:	682a      	ldr	r2, [r5, #0]
   20d2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   20d2c:	910a      	str	r1, [sp, #40]	; 0x28
   20d2e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   20d30:	9109      	str	r1, [sp, #36]	; 0x24
   20d32:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20d34:	9108      	str	r1, [sp, #32]
   20d36:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20d38:	9107      	str	r1, [sp, #28]
   20d3a:	6a29      	ldr	r1, [r5, #32]
   20d3c:	9106      	str	r1, [sp, #24]
   20d3e:	69e9      	ldr	r1, [r5, #28]
   20d40:	9105      	str	r1, [sp, #20]
   20d42:	69a9      	ldr	r1, [r5, #24]
   20d44:	9104      	str	r1, [sp, #16]
   20d46:	6969      	ldr	r1, [r5, #20]
   20d48:	9103      	str	r1, [sp, #12]
   20d4a:	6929      	ldr	r1, [r5, #16]
   20d4c:	9102      	str	r1, [sp, #8]
   20d4e:	68e9      	ldr	r1, [r5, #12]
   20d50:	9101      	str	r1, [sp, #4]
   20d52:	68a9      	ldr	r1, [r5, #8]
   20d54:	9100      	str	r1, [sp, #0]
   20d56:	4651      	mov	r1, sl
   20d58:	4648      	mov	r0, r9
   20d5a:	f7f0 fa57 	bl	1120c <print_formatted>
		break;
   20d5e:	e71e      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20d60:	686b      	ldr	r3, [r5, #4]
   20d62:	682a      	ldr	r2, [r5, #0]
   20d64:	6b69      	ldr	r1, [r5, #52]	; 0x34
   20d66:	910b      	str	r1, [sp, #44]	; 0x2c
   20d68:	6b29      	ldr	r1, [r5, #48]	; 0x30
   20d6a:	910a      	str	r1, [sp, #40]	; 0x28
   20d6c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   20d6e:	9109      	str	r1, [sp, #36]	; 0x24
   20d70:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20d72:	9108      	str	r1, [sp, #32]
   20d74:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20d76:	9107      	str	r1, [sp, #28]
   20d78:	6a29      	ldr	r1, [r5, #32]
   20d7a:	9106      	str	r1, [sp, #24]
   20d7c:	69e9      	ldr	r1, [r5, #28]
   20d7e:	9105      	str	r1, [sp, #20]
   20d80:	69a9      	ldr	r1, [r5, #24]
   20d82:	9104      	str	r1, [sp, #16]
   20d84:	6969      	ldr	r1, [r5, #20]
   20d86:	9103      	str	r1, [sp, #12]
   20d88:	6929      	ldr	r1, [r5, #16]
   20d8a:	9102      	str	r1, [sp, #8]
   20d8c:	68e9      	ldr	r1, [r5, #12]
   20d8e:	9101      	str	r1, [sp, #4]
   20d90:	68a9      	ldr	r1, [r5, #8]
   20d92:	9100      	str	r1, [sp, #0]
   20d94:	4651      	mov	r1, sl
   20d96:	4648      	mov	r0, r9
   20d98:	f7f0 fa38 	bl	1120c <print_formatted>
		break;
   20d9c:	e6ff      	b.n	20b9e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   20d9e:	686b      	ldr	r3, [r5, #4]
   20da0:	682a      	ldr	r2, [r5, #0]
   20da2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   20da4:	910c      	str	r1, [sp, #48]	; 0x30
   20da6:	6b69      	ldr	r1, [r5, #52]	; 0x34
   20da8:	910b      	str	r1, [sp, #44]	; 0x2c
   20daa:	6b29      	ldr	r1, [r5, #48]	; 0x30
   20dac:	910a      	str	r1, [sp, #40]	; 0x28
   20dae:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   20db0:	9109      	str	r1, [sp, #36]	; 0x24
   20db2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   20db4:	9108      	str	r1, [sp, #32]
   20db6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   20db8:	9107      	str	r1, [sp, #28]
   20dba:	6a29      	ldr	r1, [r5, #32]
   20dbc:	9106      	str	r1, [sp, #24]
   20dbe:	69e9      	ldr	r1, [r5, #28]
   20dc0:	9105      	str	r1, [sp, #20]
   20dc2:	69a9      	ldr	r1, [r5, #24]
   20dc4:	9104      	str	r1, [sp, #16]
   20dc6:	6969      	ldr	r1, [r5, #20]
   20dc8:	9103      	str	r1, [sp, #12]
   20dca:	6929      	ldr	r1, [r5, #16]
   20dcc:	9102      	str	r1, [sp, #8]
   20dce:	68e9      	ldr	r1, [r5, #12]
   20dd0:	9101      	str	r1, [sp, #4]
   20dd2:	68a9      	ldr	r1, [r5, #8]
   20dd4:	9100      	str	r1, [sp, #0]
   20dd6:	4651      	mov	r1, sl
   20dd8:	4648      	mov	r0, r9
   20dda:	f7f0 fa17 	bl	1120c <print_formatted>
}
   20dde:	e6de      	b.n	20b9e <std_print+0x74>

00020de0 <log_output_flush>:
{
   20de0:	b510      	push	{r4, lr}
   20de2:	4604      	mov	r4, r0
		     output->control_block->offset,
   20de4:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   20de6:	6853      	ldr	r3, [r2, #4]
   20de8:	6812      	ldr	r2, [r2, #0]
   20dea:	6881      	ldr	r1, [r0, #8]
   20dec:	6800      	ldr	r0, [r0, #0]
   20dee:	f7ff fe50 	bl	20a92 <buffer_write>
	output->control_block->offset = 0;
   20df2:	6863      	ldr	r3, [r4, #4]
   20df4:	2200      	movs	r2, #0
   20df6:	601a      	str	r2, [r3, #0]
}
   20df8:	bd10      	pop	{r4, pc}

00020dfa <out_func>:
{
   20dfa:	b538      	push	{r3, r4, r5, lr}
   20dfc:	4605      	mov	r5, r0
   20dfe:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   20e00:	684b      	ldr	r3, [r1, #4]
   20e02:	681a      	ldr	r2, [r3, #0]
   20e04:	68cb      	ldr	r3, [r1, #12]
   20e06:	429a      	cmp	r2, r3
   20e08:	d00f      	beq.n	20e2a <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   20e0a:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20e0c:	f3bf 8f5b 	dmb	ish
   20e10:	e853 2f00 	ldrex	r2, [r3]
   20e14:	1c51      	adds	r1, r2, #1
   20e16:	e843 1000 	strex	r0, r1, [r3]
   20e1a:	2800      	cmp	r0, #0
   20e1c:	d1f8      	bne.n	20e10 <out_func+0x16>
   20e1e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   20e22:	68a3      	ldr	r3, [r4, #8]
   20e24:	549d      	strb	r5, [r3, r2]
}
   20e26:	2000      	movs	r0, #0
   20e28:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   20e2a:	4608      	mov	r0, r1
   20e2c:	f7ff ffd8 	bl	20de0 <log_output_flush>
   20e30:	e7eb      	b.n	20e0a <out_func+0x10>

00020e32 <log_output_msg_process>:
{
   20e32:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e34:	b085      	sub	sp, #20
   20e36:	4606      	mov	r6, r0
   20e38:	460c      	mov	r4, r1
   20e3a:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20e3c:	7a0b      	ldrb	r3, [r1, #8]
   20e3e:	f083 0301 	eor.w	r3, r3, #1
   20e42:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   20e46:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   20e48:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   20e4a:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   20e4e:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   20e50:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   20e54:	f011 0507 	ands.w	r5, r1, #7
   20e58:	d10f      	bne.n	20e7a <log_output_msg_process+0x48>
   20e5a:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   20e5c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   20e5e:	f013 0f01 	tst.w	r3, #1
   20e62:	d014      	beq.n	20e8e <log_output_msg_process+0x5c>
	} else if (raw_string) {
   20e64:	b9c5      	cbnz	r5, 20e98 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   20e66:	4631      	mov	r1, r6
   20e68:	4620      	mov	r0, r4
   20e6a:	f7f0 fb0f 	bl	1148c <raw_string_print>
	if (!raw_string) {
   20e6e:	b9cd      	cbnz	r5, 20ea4 <log_output_msg_process+0x72>
	log_output_flush(output);
   20e70:	4630      	mov	r0, r6
   20e72:	f7ff ffb5 	bl	20de0 <log_output_flush>
}
   20e76:	b005      	add	sp, #20
   20e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   20e7a:	9002      	str	r0, [sp, #8]
   20e7c:	f8cd c004 	str.w	ip, [sp, #4]
   20e80:	9500      	str	r5, [sp, #0]
   20e82:	4639      	mov	r1, r7
   20e84:	4630      	mov	r0, r6
   20e86:	f7ff fe29 	bl	20adc <prefix_print>
   20e8a:	4602      	mov	r2, r0
   20e8c:	e7e6      	b.n	20e5c <log_output_msg_process+0x2a>
		std_print(msg, output);
   20e8e:	4631      	mov	r1, r6
   20e90:	4620      	mov	r0, r4
   20e92:	f7ff fe4a 	bl	20b2a <std_print>
   20e96:	e7ea      	b.n	20e6e <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   20e98:	463b      	mov	r3, r7
   20e9a:	4631      	mov	r1, r6
   20e9c:	4620      	mov	r0, r4
   20e9e:	f7f0 facb 	bl	11438 <hexdump_print>
   20ea2:	e7e4      	b.n	20e6e <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   20ea4:	462a      	mov	r2, r5
   20ea6:	4639      	mov	r1, r7
   20ea8:	4630      	mov	r0, r6
   20eaa:	f7ff fe0b 	bl	20ac4 <postfix_print>
   20eae:	e7df      	b.n	20e70 <log_output_msg_process+0x3e>

00020eb0 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   20eb0:	2200      	movs	r2, #0
   20eb2:	6002      	str	r2, [r0, #0]
   20eb4:	6042      	str	r2, [r0, #4]
   20eb6:	6082      	str	r2, [r0, #8]
}
   20eb8:	4770      	bx	lr

00020eba <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   20eba:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   20ebc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   20ec0:	0089      	lsls	r1, r1, #2
   20ec2:	3138      	adds	r1, #56	; 0x38
}
   20ec4:	4408      	add	r0, r1
   20ec6:	4770      	bx	lr

00020ec8 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   20ec8:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   20eca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   20ece:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20ed2:	4770      	bx	lr

00020ed4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   20ed4:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   20ed6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   20eda:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20ede:	4770      	bx	lr

00020ee0 <get_status>:
{
   20ee0:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   20ee2:	b2c9      	uxtb	r1, r1
   20ee4:	f7ff ffe9 	bl	20eba <get_sub_data>
   20ee8:	6880      	ldr	r0, [r0, #8]
}
   20eea:	f000 0007 	and.w	r0, r0, #7
   20eee:	bd08      	pop	{r3, pc}

00020ef0 <set_off_state>:
	__asm__ volatile(
   20ef0:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ef4:	f3ef 8211 	mrs	r2, BASEPRI
   20ef8:	f383 8811 	msr	BASEPRI, r3
   20efc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20f00:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   20f02:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   20f06:	d001      	beq.n	20f0c <set_off_state+0x1c>
   20f08:	428b      	cmp	r3, r1
   20f0a:	d107      	bne.n	20f1c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   20f0c:	2301      	movs	r3, #1
   20f0e:	6003      	str	r3, [r0, #0]
	int err = 0;
   20f10:	2000      	movs	r0, #0
	__asm__ volatile(
   20f12:	f382 8811 	msr	BASEPRI, r2
   20f16:	f3bf 8f6f 	isb	sy
}
   20f1a:	4770      	bx	lr
		err = -EPERM;
   20f1c:	f04f 30ff 	mov.w	r0, #4294967295
   20f20:	e7f7      	b.n	20f12 <set_off_state+0x22>

00020f22 <set_starting_state>:
{
   20f22:	b410      	push	{r4}
	__asm__ volatile(
   20f24:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f28:	f3ef 8211 	mrs	r2, BASEPRI
   20f2c:	f383 8811 	msr	BASEPRI, r3
   20f30:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20f34:	6803      	ldr	r3, [r0, #0]
   20f36:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   20f3a:	f003 0307 	and.w	r3, r3, #7
   20f3e:	2b01      	cmp	r3, #1
   20f40:	d009      	beq.n	20f56 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   20f42:	428c      	cmp	r4, r1
   20f44:	d00a      	beq.n	20f5c <set_starting_state+0x3a>
		err = -EPERM;
   20f46:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   20f4a:	f382 8811 	msr	BASEPRI, r2
   20f4e:	f3bf 8f6f 	isb	sy
}
   20f52:	bc10      	pop	{r4}
   20f54:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   20f56:	6001      	str	r1, [r0, #0]
	int err = 0;
   20f58:	2000      	movs	r0, #0
   20f5a:	e7f6      	b.n	20f4a <set_starting_state+0x28>
		err = -EALREADY;
   20f5c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   20f60:	e7f3      	b.n	20f4a <set_starting_state+0x28>

00020f62 <set_on_state>:
	__asm__ volatile(
   20f62:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f66:	f3ef 8211 	mrs	r2, BASEPRI
   20f6a:	f383 8811 	msr	BASEPRI, r3
   20f6e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   20f72:	6803      	ldr	r3, [r0, #0]
   20f74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20f78:	f043 0302 	orr.w	r3, r3, #2
   20f7c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   20f7e:	f382 8811 	msr	BASEPRI, r2
   20f82:	f3bf 8f6f 	isb	sy
}
   20f86:	4770      	bx	lr

00020f88 <clkstarted_handle>:
{
   20f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f8a:	4606      	mov	r6, r0
   20f8c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   20f8e:	f7ff ff94 	bl	20eba <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   20f92:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   20f94:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   20f96:	2300      	movs	r3, #0
   20f98:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   20f9c:	f7ff ffe1 	bl	20f62 <set_on_state>
	if (callback) {
   20fa0:	b11d      	cbz	r5, 20faa <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20fa2:	463a      	mov	r2, r7
   20fa4:	4621      	mov	r1, r4
   20fa6:	4630      	mov	r0, r6
   20fa8:	47a8      	blx	r5
}
   20faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020fac <stop>:
{
   20fac:	b570      	push	{r4, r5, r6, lr}
   20fae:	4606      	mov	r6, r0
   20fb0:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   20fb2:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20fb4:	4621      	mov	r1, r4
   20fb6:	f7ff ff80 	bl	20eba <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   20fba:	4629      	mov	r1, r5
   20fbc:	3008      	adds	r0, #8
   20fbe:	f7ff ff97 	bl	20ef0 <set_off_state>
	if (err < 0) {
   20fc2:	2800      	cmp	r0, #0
   20fc4:	db06      	blt.n	20fd4 <stop+0x28>
	get_sub_config(dev, type)->stop();
   20fc6:	4621      	mov	r1, r4
   20fc8:	4630      	mov	r0, r6
   20fca:	f7ff ff7d 	bl	20ec8 <get_sub_config>
   20fce:	6843      	ldr	r3, [r0, #4]
   20fd0:	4798      	blx	r3
	return 0;
   20fd2:	2000      	movs	r0, #0
}
   20fd4:	bd70      	pop	{r4, r5, r6, pc}

00020fd6 <api_stop>:
{
   20fd6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   20fd8:	2280      	movs	r2, #128	; 0x80
   20fda:	f7ff ffe7 	bl	20fac <stop>
}
   20fde:	bd08      	pop	{r3, pc}

00020fe0 <async_start>:
{
   20fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fe4:	4606      	mov	r6, r0
   20fe6:	4690      	mov	r8, r2
   20fe8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   20fea:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20fec:	4629      	mov	r1, r5
   20fee:	f7ff ff64 	bl	20eba <get_sub_data>
   20ff2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   20ff4:	9906      	ldr	r1, [sp, #24]
   20ff6:	3008      	adds	r0, #8
   20ff8:	f7ff ff93 	bl	20f22 <set_starting_state>
	if (err < 0) {
   20ffc:	2800      	cmp	r0, #0
   20ffe:	db09      	blt.n	21014 <async_start+0x34>
	subdata->cb = cb;
   21000:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   21004:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   21006:	4629      	mov	r1, r5
   21008:	4630      	mov	r0, r6
   2100a:	f7ff ff5d 	bl	20ec8 <get_sub_config>
   2100e:	6803      	ldr	r3, [r0, #0]
   21010:	4798      	blx	r3
	return 0;
   21012:	2000      	movs	r0, #0
}
   21014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021018 <api_start>:
{
   21018:	b510      	push	{r4, lr}
   2101a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2101c:	2480      	movs	r4, #128	; 0x80
   2101e:	9400      	str	r4, [sp, #0]
   21020:	f7ff ffde 	bl	20fe0 <async_start>
}
   21024:	b002      	add	sp, #8
   21026:	bd10      	pop	{r4, pc}

00021028 <onoff_started_callback>:
{
   21028:	b510      	push	{r4, lr}
   2102a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2102c:	b2c9      	uxtb	r1, r1
   2102e:	f7ff ff51 	bl	20ed4 <get_onoff_manager>
	notify(mgr, 0);
   21032:	2100      	movs	r1, #0
   21034:	47a0      	blx	r4
}
   21036:	bd10      	pop	{r4, pc}

00021038 <hfclk_start>:
{
   21038:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2103a:	2001      	movs	r0, #1
   2103c:	f7f8 fddc 	bl	19bf8 <nrfx_clock_start>
}
   21040:	bd08      	pop	{r3, pc}

00021042 <lfclk_start>:
{
   21042:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   21044:	2000      	movs	r0, #0
   21046:	f7f8 fdd7 	bl	19bf8 <nrfx_clock_start>
}
   2104a:	bd08      	pop	{r3, pc}

0002104c <hfclk_stop>:
{
   2104c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2104e:	2001      	movs	r0, #1
   21050:	f003 f923 	bl	2429a <nrfx_clock_stop>
}
   21054:	bd08      	pop	{r3, pc}

00021056 <lfclk_stop>:
{
   21056:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   21058:	2000      	movs	r0, #0
   2105a:	f003 f91e 	bl	2429a <nrfx_clock_stop>
}
   2105e:	bd08      	pop	{r3, pc}

00021060 <blocking_start_callback>:
{
   21060:	b508      	push	{r3, lr}
   21062:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   21064:	f7fa fd5c 	bl	1bb20 <z_impl_k_sem_give>
}
   21068:	bd08      	pop	{r3, pc}

0002106a <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2106a:	4770      	bx	lr

0002106c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2106c:	4770      	bx	lr

0002106e <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   2106e:	4770      	bx	lr

00021070 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   21070:	1a40      	subs	r0, r0, r1
}
   21072:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   21076:	4770      	bx	lr

00021078 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   21078:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2107c:	009b      	lsls	r3, r3, #2
   2107e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21080:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21084:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   21088:	2200      	movs	r2, #0
   2108a:	601a      	str	r2, [r3, #0]
   2108c:	681b      	ldr	r3, [r3, #0]
}
   2108e:	4770      	bx	lr

00021090 <set_absolute_alarm>:
{
   21090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21092:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   21094:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   21098:	f7f0 fdb6 	bl	11c08 <get_comparator>
   2109c:	4607      	mov	r7, r0
   2109e:	e019      	b.n	210d4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   210a0:	2013      	movs	r0, #19
   210a2:	f003 ff4c 	bl	24f3e <z_impl_k_busy_wait>
}
   210a6:	e022      	b.n	210ee <set_absolute_alarm+0x5e>
		event_clear(chan);
   210a8:	4630      	mov	r0, r6
   210aa:	f7ff ffe5 	bl	21078 <event_clear>
		event_enable(chan);
   210ae:	4630      	mov	r0, r6
   210b0:	f7f0 fdb2 	bl	11c18 <event_enable>
		set_comparator(chan, cc_val);
   210b4:	4629      	mov	r1, r5
   210b6:	4630      	mov	r0, r6
   210b8:	f7f0 fd9c 	bl	11bf4 <set_comparator>
		now2 = counter();
   210bc:	f7f0 fdc0 	bl	11c40 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   210c0:	4284      	cmp	r4, r0
   210c2:	d01e      	beq.n	21102 <set_absolute_alarm+0x72>
   210c4:	1c81      	adds	r1, r0, #2
   210c6:	4628      	mov	r0, r5
   210c8:	f7ff ffd2 	bl	21070 <counter_sub>
	} while ((now2 != now) &&
   210cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   210d0:	d917      	bls.n	21102 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   210d2:	462f      	mov	r7, r5
		now = counter();
   210d4:	f7f0 fdb4 	bl	11c40 <counter>
   210d8:	4604      	mov	r4, r0
		set_comparator(chan, now);
   210da:	4601      	mov	r1, r0
   210dc:	4630      	mov	r0, r6
   210de:	f7f0 fd89 	bl	11bf4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   210e2:	4621      	mov	r1, r4
   210e4:	4638      	mov	r0, r7
   210e6:	f7ff ffc3 	bl	21070 <counter_sub>
   210ea:	2801      	cmp	r0, #1
   210ec:	d0d8      	beq.n	210a0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   210ee:	1ca7      	adds	r7, r4, #2
   210f0:	4639      	mov	r1, r7
   210f2:	4628      	mov	r0, r5
   210f4:	f7ff ffbc 	bl	21070 <counter_sub>
   210f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   210fc:	d9d4      	bls.n	210a8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   210fe:	463d      	mov	r5, r7
   21100:	e7d2      	b.n	210a8 <set_absolute_alarm+0x18>
}
   21102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021104 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   21104:	428b      	cmp	r3, r1
   21106:	d901      	bls.n	2110c <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   21108:	2000      	movs	r0, #0
	}
}
   2110a:	4770      	bx	lr
{
   2110c:	b538      	push	{r3, r4, r5, lr}
   2110e:	4615      	mov	r5, r2
   21110:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   21112:	461a      	mov	r2, r3
   21114:	4629      	mov	r1, r5
   21116:	f000 fa06 	bl	21526 <memcpy>
		return from_len;
   2111a:	4620      	mov	r0, r4
}
   2111c:	bd38      	pop	{r3, r4, r5, pc}

0002111e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2111e:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   21120:	f000 fa25 	bl	2156e <memset>
}
   21124:	bd08      	pop	{r3, pc}

00021126 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   21126:	09c3      	lsrs	r3, r0, #7
   21128:	005a      	lsls	r2, r3, #1
   2112a:	4413      	add	r3, r2
   2112c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   21130:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   21134:	b2c0      	uxtb	r0, r0
   21136:	4770      	bx	lr

00021138 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   21138:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2113a:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2113c:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   21140:	2a00      	cmp	r2, #0
   21142:	db03      	blt.n	2114c <gf_double+0x14>
   21144:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   21146:	f100 020f 	add.w	r2, r0, #15
   2114a:	e004      	b.n	21156 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2114c:	2487      	movs	r4, #135	; 0x87
   2114e:	e7fa      	b.n	21146 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   21150:	f813 0901 	ldrb.w	r0, [r3], #-1
   21154:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   21156:	7818      	ldrb	r0, [r3, #0]
   21158:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   2115c:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   21160:	428b      	cmp	r3, r1
   21162:	d1f5      	bne.n	21150 <gf_double+0x18>
	}
}
   21164:	bc10      	pop	{r4}
   21166:	4770      	bx	lr

00021168 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   21168:	b130      	cbz	r0, 21178 <tc_cmac_erase+0x10>
{
   2116a:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2116c:	2258      	movs	r2, #88	; 0x58
   2116e:	2100      	movs	r1, #0
   21170:	f7ff ffd5 	bl	2111e <_set>

	return TC_CRYPTO_SUCCESS;
   21174:	2001      	movs	r0, #1
}
   21176:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   21178:	2000      	movs	r0, #0
}
   2117a:	4770      	bx	lr

0002117c <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2117c:	b1a0      	cbz	r0, 211a8 <tc_cmac_init+0x2c>
{
   2117e:	b510      	push	{r4, lr}
   21180:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   21182:	2210      	movs	r2, #16
   21184:	2100      	movs	r1, #0
   21186:	f7ff ffca 	bl	2111e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2118a:	2210      	movs	r2, #16
   2118c:	2100      	movs	r1, #0
   2118e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21192:	f7ff ffc4 	bl	2111e <_set>
	s->leftover_offset = 0;
   21196:	2300      	movs	r3, #0
   21198:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2119a:	2200      	movs	r2, #0
   2119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   211a0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   211a4:	2001      	movs	r0, #1
}
   211a6:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   211a8:	2000      	movs	r0, #0
}
   211aa:	4770      	bx	lr

000211ac <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   211ac:	b338      	cbz	r0, 211fe <tc_cmac_setup+0x52>
{
   211ae:	b570      	push	{r4, r5, r6, lr}
   211b0:	460d      	mov	r5, r1
   211b2:	4616      	mov	r6, r2
   211b4:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   211b6:	b321      	cbz	r1, 21202 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   211b8:	2258      	movs	r2, #88	; 0x58
   211ba:	2100      	movs	r1, #0
   211bc:	f7ff ffaf 	bl	2111e <_set>
	s->sched = sched;
   211c0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   211c2:	4629      	mov	r1, r5
   211c4:	4630      	mov	r0, r6
   211c6:	f7f0 fe1d 	bl	11e04 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   211ca:	2210      	movs	r2, #16
   211cc:	2100      	movs	r1, #0
   211ce:	4620      	mov	r0, r4
   211d0:	f7ff ffa5 	bl	2111e <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   211d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   211d6:	4621      	mov	r1, r4
   211d8:	4620      	mov	r0, r4
   211da:	f7f0 fe71 	bl	11ec0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   211de:	f104 0510 	add.w	r5, r4, #16
   211e2:	4621      	mov	r1, r4
   211e4:	4628      	mov	r0, r5
   211e6:	f7ff ffa7 	bl	21138 <gf_double>
	gf_double (s->K2, s->K1);
   211ea:	4629      	mov	r1, r5
   211ec:	f104 0020 	add.w	r0, r4, #32
   211f0:	f7ff ffa2 	bl	21138 <gf_double>
	tc_cmac_init(s);
   211f4:	4620      	mov	r0, r4
   211f6:	f7ff ffc1 	bl	2117c <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   211fa:	2001      	movs	r0, #1
}
   211fc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   211fe:	2000      	movs	r0, #0
}
   21200:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   21202:	2000      	movs	r0, #0
   21204:	e7fa      	b.n	211fc <tc_cmac_setup+0x50>

00021206 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   21206:	2800      	cmp	r0, #0
   21208:	d062      	beq.n	212d0 <tc_cmac_update+0xca>
{
   2120a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2120e:	460e      	mov	r6, r1
   21210:	4617      	mov	r7, r2
   21212:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   21214:	2a00      	cmp	r2, #0
   21216:	d05d      	beq.n	212d4 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   21218:	2900      	cmp	r1, #0
   2121a:	d05e      	beq.n	212da <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2121c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   21220:	ea50 0301 	orrs.w	r3, r0, r1
   21224:	d05b      	beq.n	212de <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   21226:	f110 32ff 	adds.w	r2, r0, #4294967295
   2122a:	f141 33ff 	adc.w	r3, r1, #4294967295
   2122e:	6522      	str	r2, [r4, #80]	; 0x50
   21230:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   21232:	6c65      	ldr	r5, [r4, #68]	; 0x44
   21234:	b3a5      	cbz	r5, 212a0 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   21236:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   2123a:	4547      	cmp	r7, r8
   2123c:	d30d      	bcc.n	2125a <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2123e:	f105 0030 	add.w	r0, r5, #48	; 0x30
   21242:	4643      	mov	r3, r8
   21244:	4632      	mov	r2, r6
   21246:	4641      	mov	r1, r8
   21248:	4420      	add	r0, r4
   2124a:	f7ff ff5b 	bl	21104 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2124e:	3d10      	subs	r5, #16
   21250:	442f      	add	r7, r5
		data += remaining_space;
   21252:	4446      	add	r6, r8
		s->leftover_offset = 0;
   21254:	2300      	movs	r3, #0
   21256:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21258:	e013      	b.n	21282 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2125a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2125e:	463b      	mov	r3, r7
   21260:	4632      	mov	r2, r6
   21262:	4639      	mov	r1, r7
   21264:	4420      	add	r0, r4
   21266:	f7ff ff4d 	bl	21104 <_copy>
			s->leftover_offset += data_length;
   2126a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2126c:	443b      	add	r3, r7
   2126e:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   21270:	2001      	movs	r0, #1
   21272:	e030      	b.n	212d6 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   21274:	18e2      	adds	r2, r4, r3
   21276:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2127a:	5ce1      	ldrb	r1, [r4, r3]
   2127c:	404a      	eors	r2, r1
   2127e:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   21280:	3301      	adds	r3, #1
   21282:	2b0f      	cmp	r3, #15
   21284:	d9f6      	bls.n	21274 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   21286:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21288:	4621      	mov	r1, r4
   2128a:	4620      	mov	r0, r4
   2128c:	f7f0 fe18 	bl	11ec0 <tc_aes_encrypt>
   21290:	e006      	b.n	212a0 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   21292:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21294:	4621      	mov	r1, r4
   21296:	4620      	mov	r0, r4
   21298:	f7f0 fe12 	bl	11ec0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2129c:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2129e:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   212a0:	2f10      	cmp	r7, #16
   212a2:	d908      	bls.n	212b6 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   212a4:	2300      	movs	r3, #0
   212a6:	2b0f      	cmp	r3, #15
   212a8:	d8f3      	bhi.n	21292 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   212aa:	5cf0      	ldrb	r0, [r6, r3]
   212ac:	5ce5      	ldrb	r5, [r4, r3]
   212ae:	4068      	eors	r0, r5
   212b0:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   212b2:	3301      	adds	r3, #1
   212b4:	e7f7      	b.n	212a6 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   212b6:	b90f      	cbnz	r7, 212bc <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   212b8:	2001      	movs	r0, #1
   212ba:	e00c      	b.n	212d6 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   212bc:	463b      	mov	r3, r7
   212be:	4632      	mov	r2, r6
   212c0:	4639      	mov	r1, r7
   212c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   212c6:	f7ff ff1d 	bl	21104 <_copy>
		s->leftover_offset = data_length;
   212ca:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   212cc:	2001      	movs	r0, #1
   212ce:	e002      	b.n	212d6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   212d0:	2000      	movs	r0, #0
}
   212d2:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   212d4:	2001      	movs	r0, #1
}
   212d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   212da:	2000      	movs	r0, #0
   212dc:	e7fb      	b.n	212d6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   212de:	2000      	movs	r0, #0
   212e0:	e7f9      	b.n	212d6 <tc_cmac_update+0xd0>

000212e2 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   212e2:	b370      	cbz	r0, 21342 <tc_cmac_final+0x60>
{
   212e4:	b538      	push	{r3, r4, r5, lr}
   212e6:	460c      	mov	r4, r1
   212e8:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   212ea:	b361      	cbz	r1, 21346 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   212ec:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   212ee:	2a10      	cmp	r2, #16
   212f0:	d10d      	bne.n	2130e <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   212f2:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   212f4:	2300      	movs	r3, #0
   212f6:	2b0f      	cmp	r3, #15
   212f8:	d819      	bhi.n	2132e <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   212fa:	18e2      	adds	r2, r4, r3
   212fc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   21300:	5cc8      	ldrb	r0, [r1, r3]
   21302:	4050      	eors	r0, r2
   21304:	5ce2      	ldrb	r2, [r4, r3]
   21306:	4042      	eors	r2, r0
   21308:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2130a:	3301      	adds	r3, #1
   2130c:	e7f3      	b.n	212f6 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2130e:	f102 0030 	add.w	r0, r2, #48	; 0x30
   21312:	f1c2 0210 	rsb	r2, r2, #16
   21316:	2100      	movs	r1, #0
   21318:	4420      	add	r0, r4
   2131a:	f7ff ff00 	bl	2111e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2131e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   21320:	4423      	add	r3, r4
   21322:	2280      	movs	r2, #128	; 0x80
   21324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   21328:	f104 0120 	add.w	r1, r4, #32
   2132c:	e7e2      	b.n	212f4 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2132e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   21330:	4621      	mov	r1, r4
   21332:	4628      	mov	r0, r5
   21334:	f7f0 fdc4 	bl	11ec0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   21338:	4620      	mov	r0, r4
   2133a:	f7ff ff15 	bl	21168 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2133e:	2001      	movs	r0, #1
}
   21340:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   21342:	2000      	movs	r0, #0
}
   21344:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   21346:	2000      	movs	r0, #0
   21348:	e7fa      	b.n	21340 <tc_cmac_final+0x5e>

0002134a <abort_function>:
{
   2134a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2134c:	2000      	movs	r0, #0
   2134e:	f7ef faa7 	bl	108a0 <sys_reboot>
}
   21352:	bd08      	pop	{r3, pc}

00021354 <z_irq_spurious>:
{
   21354:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   21356:	2100      	movs	r1, #0
   21358:	2001      	movs	r0, #1
   2135a:	f000 f801 	bl	21360 <z_arm_fatal_error>
}
   2135e:	bd08      	pop	{r3, pc}

00021360 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21360:	b538      	push	{r3, r4, r5, lr}
   21362:	4604      	mov	r4, r0

	if (esf != NULL) {
   21364:	460d      	mov	r5, r1
   21366:	b111      	cbz	r1, 2136e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   21368:	4608      	mov	r0, r1
   2136a:	f7f1 fb59 	bl	12a20 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2136e:	4629      	mov	r1, r5
   21370:	4620      	mov	r0, r4
   21372:	f7fa f805 	bl	1b380 <z_fatal_error>
}
   21376:	bd38      	pop	{r3, r4, r5, pc}

00021378 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   21378:	b508      	push	{r3, lr}
   2137a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2137c:	6800      	ldr	r0, [r0, #0]
   2137e:	f7ff ffef 	bl	21360 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   21382:	bd08      	pop	{r3, pc}

00021384 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   21384:	b508      	push	{r3, lr}
	handler();
   21386:	f7f1 fb99 	bl	12abc <z_SysNmiOnReset>
	z_arm_int_exit();
   2138a:	f7f1 ff8f 	bl	132ac <z_arm_exc_exit>
}
   2138e:	bd08      	pop	{r3, pc}

00021390 <memory_fault_recoverable>:
}
   21390:	2000      	movs	r0, #0
   21392:	4770      	bx	lr

00021394 <fault_handle>:
{
   21394:	b508      	push	{r3, lr}
	*recoverable = false;
   21396:	2300      	movs	r3, #0
   21398:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   2139a:	1ecb      	subs	r3, r1, #3
   2139c:	2b09      	cmp	r3, #9
   2139e:	d81a      	bhi.n	213d6 <fault_handle+0x42>
   213a0:	e8df f003 	tbb	[pc, r3]
   213a4:	110d0905 	.word	0x110d0905
   213a8:	19191919 	.word	0x19191919
   213ac:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   213ae:	4611      	mov	r1, r2
   213b0:	f7f1 fe7e 	bl	130b0 <hard_fault>
}
   213b4:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   213b6:	2100      	movs	r1, #0
   213b8:	f7f1 fd98 	bl	12eec <mem_manage_fault>
		break;
   213bc:	e7fa      	b.n	213b4 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   213be:	2100      	movs	r1, #0
   213c0:	f7f1 fcbc 	bl	12d3c <bus_fault>
		break;
   213c4:	e7f6      	b.n	213b4 <fault_handle+0x20>
		reason = usage_fault(esf);
   213c6:	f7f1 fbed 	bl	12ba4 <usage_fault>
		break;
   213ca:	e7f3      	b.n	213b4 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   213cc:	4611      	mov	r1, r2
   213ce:	f7f1 fc9b 	bl	12d08 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   213d2:	2000      	movs	r0, #0
		break;
   213d4:	e7ee      	b.n	213b4 <fault_handle+0x20>
		reserved_exception(esf, fault);
   213d6:	f7f1 fedb 	bl	13190 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   213da:	2000      	movs	r0, #0
	return reason;
   213dc:	e7ea      	b.n	213b4 <fault_handle+0x20>

000213de <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   213de:	6843      	ldr	r3, [r0, #4]
   213e0:	1e5a      	subs	r2, r3, #1
		&&
   213e2:	4213      	tst	r3, r2
   213e4:	d106      	bne.n	213f4 <mpu_partition_is_valid+0x16>
		&&
   213e6:	2b1f      	cmp	r3, #31
   213e8:	d906      	bls.n	213f8 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   213ea:	6803      	ldr	r3, [r0, #0]
		&&
   213ec:	421a      	tst	r2, r3
   213ee:	d005      	beq.n	213fc <mpu_partition_is_valid+0x1e>
   213f0:	2000      	movs	r0, #0
   213f2:	4770      	bx	lr
   213f4:	2000      	movs	r0, #0
   213f6:	4770      	bx	lr
   213f8:	2000      	movs	r0, #0
   213fa:	4770      	bx	lr
   213fc:	2001      	movs	r0, #1
}
   213fe:	4770      	bx	lr

00021400 <mpu_configure_region>:
{
   21400:	b500      	push	{lr}
   21402:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   21404:	680b      	ldr	r3, [r1, #0]
   21406:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   21408:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2140a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2140c:	2b20      	cmp	r3, #32
   2140e:	d912      	bls.n	21436 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   21410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   21414:	d811      	bhi.n	2143a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   21416:	3b01      	subs	r3, #1
   21418:	fab3 f383 	clz	r3, r3
   2141c:	f1c3 031f 	rsb	r3, r3, #31
   21420:	005b      	lsls	r3, r3, #1
   21422:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   21426:	4313      	orrs	r3, r2
   21428:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2142a:	a901      	add	r1, sp, #4
   2142c:	f7f1 ffe6 	bl	133fc <region_allocate_and_init>
}
   21430:	b005      	add	sp, #20
   21432:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   21436:	2308      	movs	r3, #8
   21438:	e7f5      	b.n	21426 <mpu_configure_region+0x26>
		return REGION_4G;
   2143a:	233e      	movs	r3, #62	; 0x3e
   2143c:	e7f3      	b.n	21426 <mpu_configure_region+0x26>

0002143e <arm_core_mpu_configure_static_mpu_regions>:
{
   2143e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   21440:	f7f2 f83e 	bl	134c0 <mpu_configure_static_mpu_regions>
}
   21444:	bd08      	pop	{r3, pc}

00021446 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   21446:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   21448:	f7f2 f844 	bl	134d4 <mpu_configure_dynamic_mpu_regions>
}
   2144c:	bd08      	pop	{r3, pc}

0002144e <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2144e:	4602      	mov	r2, r0
   21450:	780b      	ldrb	r3, [r1, #0]
   21452:	b11b      	cbz	r3, 2145c <strcpy+0xe>
		*d = *s;
   21454:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   21458:	3101      	adds	r1, #1
   2145a:	e7f9      	b.n	21450 <strcpy+0x2>
	}

	*d = '\0';
   2145c:	7013      	strb	r3, [r2, #0]

	return dest;
}
   2145e:	4770      	bx	lr

00021460 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   21460:	4603      	mov	r3, r0
   21462:	b1a2      	cbz	r2, 2148e <strncpy+0x2e>
{
   21464:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   21466:	780c      	ldrb	r4, [r1, #0]
   21468:	b12c      	cbz	r4, 21476 <strncpy+0x16>
		*d = *s;
   2146a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   2146e:	3101      	adds	r1, #1
		d++;
		n--;
   21470:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   21472:	2a00      	cmp	r2, #0
   21474:	d1f7      	bne.n	21466 <strncpy+0x6>
	}

	while (n > 0) {
   21476:	b122      	cbz	r2, 21482 <strncpy+0x22>
		*d = '\0';
   21478:	2100      	movs	r1, #0
   2147a:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   2147e:	3a01      	subs	r2, #1
   21480:	e7f9      	b.n	21476 <strncpy+0x16>
	}

	return dest;
}
   21482:	bc10      	pop	{r4}
   21484:	4770      	bx	lr
		*d = '\0';
   21486:	2100      	movs	r1, #0
   21488:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2148c:	3a01      	subs	r2, #1
	while (n > 0) {
   2148e:	2a00      	cmp	r2, #0
   21490:	d1f9      	bne.n	21486 <strncpy+0x26>
   21492:	4770      	bx	lr

00021494 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   21494:	4603      	mov	r3, r0
	size_t n = 0;
   21496:	2000      	movs	r0, #0

	while (*s != '\0') {
   21498:	781a      	ldrb	r2, [r3, #0]
   2149a:	b112      	cbz	r2, 214a2 <strlen+0xe>
		s++;
   2149c:	3301      	adds	r3, #1
		n++;
   2149e:	3001      	adds	r0, #1
   214a0:	e7fa      	b.n	21498 <strlen+0x4>
	}

	return n;
}
   214a2:	4770      	bx	lr

000214a4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   214a4:	4603      	mov	r3, r0
	size_t n = 0;
   214a6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   214a8:	781a      	ldrb	r2, [r3, #0]
   214aa:	b122      	cbz	r2, 214b6 <strnlen+0x12>
   214ac:	4288      	cmp	r0, r1
   214ae:	d202      	bcs.n	214b6 <strnlen+0x12>
		s++;
   214b0:	3301      	adds	r3, #1
		n++;
   214b2:	3001      	adds	r0, #1
   214b4:	e7f8      	b.n	214a8 <strnlen+0x4>
	}

	return n;
}
   214b6:	4770      	bx	lr

000214b8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   214b8:	7803      	ldrb	r3, [r0, #0]
   214ba:	780a      	ldrb	r2, [r1, #0]
   214bc:	4293      	cmp	r3, r2
   214be:	d103      	bne.n	214c8 <strcmp+0x10>
   214c0:	b113      	cbz	r3, 214c8 <strcmp+0x10>
		s1++;
   214c2:	3001      	adds	r0, #1
		s2++;
   214c4:	3101      	adds	r1, #1
   214c6:	e7f7      	b.n	214b8 <strcmp>
	}

	return *s1 - *s2;
}
   214c8:	1a98      	subs	r0, r3, r2
   214ca:	4770      	bx	lr

000214cc <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   214cc:	b17a      	cbz	r2, 214ee <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   214ce:	1e53      	subs	r3, r2, #1
   214d0:	d00f      	beq.n	214f2 <memcmp+0x26>
{
   214d2:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   214d4:	7804      	ldrb	r4, [r0, #0]
   214d6:	780a      	ldrb	r2, [r1, #0]
   214d8:	4294      	cmp	r4, r2
   214da:	d103      	bne.n	214e4 <memcmp+0x18>
		c1++;
   214dc:	3001      	adds	r0, #1
		c2++;
   214de:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   214e0:	3b01      	subs	r3, #1
   214e2:	d1f7      	bne.n	214d4 <memcmp+0x8>
	}

	return *c1 - *c2;
   214e4:	7800      	ldrb	r0, [r0, #0]
   214e6:	780b      	ldrb	r3, [r1, #0]
   214e8:	1ac0      	subs	r0, r0, r3
}
   214ea:	bc10      	pop	{r4}
   214ec:	4770      	bx	lr
		return 0;
   214ee:	2000      	movs	r0, #0
   214f0:	4770      	bx	lr
	return *c1 - *c2;
   214f2:	7800      	ldrb	r0, [r0, #0]
   214f4:	780b      	ldrb	r3, [r1, #0]
   214f6:	1ac0      	subs	r0, r0, r3
}
   214f8:	4770      	bx	lr

000214fa <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   214fa:	1a43      	subs	r3, r0, r1
   214fc:	4293      	cmp	r3, r2
   214fe:	d30b      	bcc.n	21518 <memmove+0x1e>
	char *dest = d;
   21500:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   21502:	b17a      	cbz	r2, 21524 <memmove+0x2a>
{
   21504:	b410      	push	{r4}
			*dest = *src;
   21506:	f811 4b01 	ldrb.w	r4, [r1], #1
   2150a:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   2150e:	3a01      	subs	r2, #1
		while (n > 0) {
   21510:	2a00      	cmp	r2, #0
   21512:	d1f8      	bne.n	21506 <memmove+0xc>
		}
	}

	return d;
}
   21514:	bc10      	pop	{r4}
   21516:	4770      	bx	lr
		while (n > 0) {
   21518:	b11a      	cbz	r2, 21522 <memmove+0x28>
			n--;
   2151a:	3a01      	subs	r2, #1
			dest[n] = src[n];
   2151c:	5c8b      	ldrb	r3, [r1, r2]
   2151e:	5483      	strb	r3, [r0, r2]
   21520:	e7fa      	b.n	21518 <memmove+0x1e>
   21522:	4770      	bx	lr
   21524:	4770      	bx	lr

00021526 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   21526:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   21528:	ea80 0301 	eor.w	r3, r0, r1
   2152c:	f013 0f03 	tst.w	r3, #3
   21530:	d001      	beq.n	21536 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   21532:	4603      	mov	r3, r0
   21534:	e017      	b.n	21566 <memcpy+0x40>
   21536:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   21538:	f013 0f03 	tst.w	r3, #3
   2153c:	d00b      	beq.n	21556 <memcpy+0x30>
			if (n == 0) {
   2153e:	b1a2      	cbz	r2, 2156a <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   21540:	f811 4b01 	ldrb.w	r4, [r1], #1
   21544:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   21548:	3a01      	subs	r2, #1
   2154a:	e7f5      	b.n	21538 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   2154c:	f851 4b04 	ldr.w	r4, [r1], #4
   21550:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   21554:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   21556:	2a03      	cmp	r2, #3
   21558:	d8f8      	bhi.n	2154c <memcpy+0x26>
   2155a:	e004      	b.n	21566 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   2155c:	f811 4b01 	ldrb.w	r4, [r1], #1
   21560:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   21564:	3a01      	subs	r2, #1
	while (n > 0) {
   21566:	2a00      	cmp	r2, #0
   21568:	d1f8      	bne.n	2155c <memcpy+0x36>
	}

	return d;
}
   2156a:	bc10      	pop	{r4}
   2156c:	4770      	bx	lr

0002156e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2156e:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   21570:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   21572:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   21574:	f013 0f03 	tst.w	r3, #3
   21578:	d004      	beq.n	21584 <memset+0x16>
		if (n == 0) {
   2157a:	b19a      	cbz	r2, 215a4 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   2157c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   21580:	3a01      	subs	r2, #1
   21582:	e7f7      	b.n	21574 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   21584:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   21586:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   2158a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2158e:	2a03      	cmp	r2, #3
   21590:	d906      	bls.n	215a0 <memset+0x32>
		*(d_word++) = c_word;
   21592:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   21596:	3a04      	subs	r2, #4
   21598:	e7f9      	b.n	2158e <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   2159a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   2159e:	3a01      	subs	r2, #1
	while (n > 0) {
   215a0:	2a00      	cmp	r2, #0
   215a2:	d1fa      	bne.n	2159a <memset+0x2c>
	}

	return buf;
}
   215a4:	bc10      	pop	{r4}
   215a6:	4770      	bx	lr

000215a8 <_stdout_hook_default>:
}
   215a8:	f04f 30ff 	mov.w	r0, #4294967295
   215ac:	4770      	bx	lr

000215ae <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   215ae:	b084      	sub	sp, #16
   215b0:	ab04      	add	r3, sp, #16
   215b2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   215b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   215ba:	2b06      	cmp	r3, #6
   215bc:	d001      	beq.n	215c2 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   215be:	b004      	add	sp, #16
   215c0:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   215c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   215c6:	2201      	movs	r2, #1
   215c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   215cc:	f3bf 8f4f 	dsb	sy
        __WFE();
   215d0:	bf20      	wfe
    while (true)
   215d2:	e7fd      	b.n	215d0 <pm_power_state_set+0x22>

000215d4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   215d4:	b084      	sub	sp, #16
   215d6:	ab04      	add	r3, sp, #16
   215d8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   215dc:	2300      	movs	r3, #0
   215de:	f383 8811 	msr	BASEPRI, r3
   215e2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   215e6:	b004      	add	sp, #16
   215e8:	4770      	bx	lr

000215ea <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   215ea:	b510      	push	{r4, lr}
   215ec:	b08a      	sub	sp, #40	; 0x28
   215ee:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   215f0:	a905      	add	r1, sp, #20
   215f2:	f7f2 f86b 	bl	136cc <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   215f6:	4669      	mov	r1, sp
   215f8:	4620      	mov	r0, r4
   215fa:	f7f2 f867 	bl	136cc <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   215fe:	2210      	movs	r2, #16
   21600:	f10d 0101 	add.w	r1, sp, #1
   21604:	f10d 0015 	add.w	r0, sp, #21
   21608:	f7ff ff60 	bl	214cc <memcmp>
}
   2160c:	b00a      	add	sp, #40	; 0x28
   2160e:	bd10      	pop	{r4, pc}

00021610 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   21610:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   21612:	7803      	ldrb	r3, [r0, #0]
   21614:	780a      	ldrb	r2, [r1, #0]
   21616:	4293      	cmp	r3, r2
   21618:	d107      	bne.n	2162a <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   2161a:	2b01      	cmp	r3, #1
   2161c:	d00c      	beq.n	21638 <bt_uuid_cmp+0x28>
   2161e:	2b02      	cmp	r3, #2
   21620:	d00e      	beq.n	21640 <bt_uuid_cmp+0x30>
   21622:	b12b      	cbz	r3, 21630 <bt_uuid_cmp+0x20>
   21624:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   21628:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2162a:	f7ff ffde 	bl	215ea <uuid128_cmp>
   2162e:	e7fb      	b.n	21628 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   21630:	8840      	ldrh	r0, [r0, #2]
   21632:	884b      	ldrh	r3, [r1, #2]
   21634:	1ac0      	subs	r0, r0, r3
   21636:	e7f7      	b.n	21628 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   21638:	6840      	ldr	r0, [r0, #4]
   2163a:	684b      	ldr	r3, [r1, #4]
   2163c:	1ac0      	subs	r0, r0, r3
   2163e:	e7f3      	b.n	21628 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   21640:	2210      	movs	r2, #16
   21642:	3101      	adds	r1, #1
   21644:	3001      	adds	r0, #1
   21646:	f7ff ff41 	bl	214cc <memcmp>
   2164a:	e7ed      	b.n	21628 <bt_uuid_cmp+0x18>

0002164c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2164c:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2164e:	2a04      	cmp	r2, #4
   21650:	d00e      	beq.n	21670 <bt_uuid_create+0x24>
   21652:	2a10      	cmp	r2, #16
   21654:	d01b      	beq.n	2168e <bt_uuid_create+0x42>
   21656:	2a02      	cmp	r2, #2
   21658:	d001      	beq.n	2165e <bt_uuid_create+0x12>
   2165a:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2165c:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   2165e:	2300      	movs	r3, #0
   21660:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   21662:	784a      	ldrb	r2, [r1, #1]
   21664:	780b      	ldrb	r3, [r1, #0]
   21666:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2166a:	8043      	strh	r3, [r0, #2]
	return true;
   2166c:	2001      	movs	r0, #1
		break;
   2166e:	e7f5      	b.n	2165c <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   21670:	2301      	movs	r3, #1
   21672:	7003      	strb	r3, [r0, #0]
   21674:	78cc      	ldrb	r4, [r1, #3]
   21676:	788a      	ldrb	r2, [r1, #2]
   21678:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   2167c:	784d      	ldrb	r5, [r1, #1]
   2167e:	780a      	ldrb	r2, [r1, #0]
   21680:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   21684:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   21688:	6042      	str	r2, [r0, #4]
	return true;
   2168a:	4618      	mov	r0, r3
		break;
   2168c:	e7e6      	b.n	2165c <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   2168e:	2302      	movs	r3, #2
   21690:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   21694:	2210      	movs	r2, #16
   21696:	f7ff ff46 	bl	21526 <memcpy>
	return true;
   2169a:	2001      	movs	r0, #1
		break;
   2169c:	e7de      	b.n	2165c <bt_uuid_create+0x10>

0002169e <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2169e:	b510      	push	{r4, lr}
   216a0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   216a2:	2301      	movs	r3, #1
   216a4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   216a8:	2106      	movs	r1, #6
   216aa:	f7f8 f9e9 	bl	19a80 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   216ae:	b918      	cbnz	r0, 216b8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   216b0:	79a3      	ldrb	r3, [r4, #6]
   216b2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   216b6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   216b8:	bd10      	pop	{r4, pc}

000216ba <hci_disconn_complete_prio>:
{
   216ba:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   216bc:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   216be:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   216c2:	781b      	ldrb	r3, [r3, #0]
   216c4:	b103      	cbz	r3, 216c8 <hci_disconn_complete_prio+0xe>
}
   216c6:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   216c8:	4620      	mov	r0, r4
   216ca:	f7f4 fe51 	bl	16370 <bt_conn_lookup_handle>
	if (!conn) {
   216ce:	4605      	mov	r5, r0
   216d0:	b130      	cbz	r0, 216e0 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   216d2:	2101      	movs	r1, #1
   216d4:	f7f4 fe56 	bl	16384 <bt_conn_set_state>
	bt_conn_unref(conn);
   216d8:	4628      	mov	r0, r5
   216da:	f000 fbd3 	bl	21e84 <bt_conn_unref>
   216de:	e7f2      	b.n	216c6 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   216e0:	4620      	mov	r0, r4
   216e2:	f7f2 f88f 	bl	13804 <conn_handle_disconnected>
		return;
   216e6:	e7ee      	b.n	216c6 <hci_disconn_complete_prio+0xc>

000216e8 <set_event_mask>:
{
   216e8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   216ea:	2108      	movs	r1, #8
   216ec:	f640 4001 	movw	r0, #3073	; 0xc01
   216f0:	f7f2 fea6 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   216f4:	b1b8      	cbz	r0, 21726 <set_event_mask+0x3e>
   216f6:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   216f8:	2108      	movs	r1, #8
   216fa:	4408      	add	r0, r1
   216fc:	f002 f857 	bl	237ae <net_buf_simple_add>
	dst[0] = val;
   21700:	2310      	movs	r3, #16
   21702:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   21704:	2388      	movs	r3, #136	; 0x88
   21706:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   21708:	2200      	movs	r2, #0
   2170a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   2170c:	2302      	movs	r3, #2
   2170e:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   21710:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   21712:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   21714:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   21716:	2320      	movs	r3, #32
   21718:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   2171a:	4621      	mov	r1, r4
   2171c:	f640 4001 	movw	r0, #3073	; 0xc01
   21720:	f7f2 feca 	bl	144b8 <bt_hci_cmd_send_sync>
}
   21724:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   21726:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2172a:	e7fb      	b.n	21724 <set_event_mask+0x3c>

0002172c <bt_get_phy>:
	switch (hci_phy) {
   2172c:	2802      	cmp	r0, #2
   2172e:	d004      	beq.n	2173a <bt_get_phy+0xe>
   21730:	2803      	cmp	r0, #3
   21732:	d004      	beq.n	2173e <bt_get_phy+0x12>
   21734:	2801      	cmp	r0, #1
   21736:	d001      	beq.n	2173c <bt_get_phy+0x10>
		return 0;
   21738:	2000      	movs	r0, #0
}
   2173a:	4770      	bx	lr
   2173c:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
   2173e:	2004      	movs	r0, #4
   21740:	4770      	bx	lr

00021742 <bt_hci_disconnect>:
{
   21742:	b570      	push	{r4, r5, r6, lr}
   21744:	4605      	mov	r5, r0
   21746:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   21748:	2103      	movs	r1, #3
   2174a:	f240 4006 	movw	r0, #1030	; 0x406
   2174e:	f7f2 fe77 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   21752:	b168      	cbz	r0, 21770 <bt_hci_disconnect+0x2e>
   21754:	4606      	mov	r6, r0
   21756:	2103      	movs	r1, #3
   21758:	3008      	adds	r0, #8
   2175a:	f002 f828 	bl	237ae <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2175e:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   21760:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   21762:	2200      	movs	r2, #0
   21764:	4631      	mov	r1, r6
   21766:	f240 4006 	movw	r0, #1030	; 0x406
   2176a:	f7f2 fea5 	bl	144b8 <bt_hci_cmd_send_sync>
}
   2176e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   21770:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21774:	e7fb      	b.n	2176e <bt_hci_disconnect+0x2c>

00021776 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   21776:	8802      	ldrh	r2, [r0, #0]
   21778:	8843      	ldrh	r3, [r0, #2]
   2177a:	429a      	cmp	r2, r3
   2177c:	d819      	bhi.n	217b2 <bt_le_conn_params_valid+0x3c>
   2177e:	2a05      	cmp	r2, #5
   21780:	d919      	bls.n	217b6 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   21782:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   21786:	d818      	bhi.n	217ba <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   21788:	8881      	ldrh	r1, [r0, #4]
   2178a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   2178e:	d216      	bcs.n	217be <bt_le_conn_params_valid+0x48>
{
   21790:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   21792:	88c0      	ldrh	r0, [r0, #6]
   21794:	f1a0 020a 	sub.w	r2, r0, #10
   21798:	b292      	uxth	r2, r2
   2179a:	f640 4476 	movw	r4, #3190	; 0xc76
   2179e:	42a2      	cmp	r2, r4
   217a0:	d80f      	bhi.n	217c2 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   217a2:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   217a6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   217aa:	d20c      	bcs.n	217c6 <bt_le_conn_params_valid+0x50>
	return true;
   217ac:	2001      	movs	r0, #1
}
   217ae:	bc10      	pop	{r4}
   217b0:	4770      	bx	lr
		return false;
   217b2:	2000      	movs	r0, #0
   217b4:	4770      	bx	lr
   217b6:	2000      	movs	r0, #0
   217b8:	4770      	bx	lr
   217ba:	2000      	movs	r0, #0
   217bc:	4770      	bx	lr
		return false;
   217be:	2000      	movs	r0, #0
}
   217c0:	4770      	bx	lr
		return false;
   217c2:	2000      	movs	r0, #0
   217c4:	e7f3      	b.n	217ae <bt_le_conn_params_valid+0x38>
   217c6:	2000      	movs	r0, #0
   217c8:	e7f1      	b.n	217ae <bt_le_conn_params_valid+0x38>

000217ca <hci_le_read_remote_features>:
{
   217ca:	b538      	push	{r3, r4, r5, lr}
   217cc:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   217ce:	2102      	movs	r1, #2
   217d0:	f242 0016 	movw	r0, #8214	; 0x2016
   217d4:	f7f2 fe34 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   217d8:	b168      	cbz	r0, 217f6 <hci_le_read_remote_features+0x2c>
   217da:	4605      	mov	r5, r0
   217dc:	2102      	movs	r1, #2
   217de:	3008      	adds	r0, #8
   217e0:	f001 ffe5 	bl	237ae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   217e4:	8823      	ldrh	r3, [r4, #0]
   217e6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   217e8:	4629      	mov	r1, r5
   217ea:	f242 0016 	movw	r0, #8214	; 0x2016
   217ee:	f7f3 f937 	bl	14a60 <bt_hci_cmd_send>
	return 0;
   217f2:	2000      	movs	r0, #0
}
   217f4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   217f6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   217fa:	e7fb      	b.n	217f4 <hci_le_read_remote_features+0x2a>

000217fc <enh_conn_complete>:
{
   217fc:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   217fe:	f7f3 f983 	bl	14b08 <bt_hci_le_enh_conn_complete>
}
   21802:	bd08      	pop	{r3, pc}

00021804 <le_enh_conn_complete>:
{
   21804:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   21806:	6880      	ldr	r0, [r0, #8]
   21808:	f7ff fff8 	bl	217fc <enh_conn_complete>
}
   2180c:	bd08      	pop	{r3, pc}

0002180e <le_legacy_conn_complete>:
{
   2180e:	b510      	push	{r4, lr}
   21810:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   21812:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   21814:	780b      	ldrb	r3, [r1, #0]
   21816:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   2181a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2181e:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   21822:	78cb      	ldrb	r3, [r1, #3]
   21824:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   21828:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2182c:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   21830:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   21834:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   21838:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2183c:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   21840:	7c4b      	ldrb	r3, [r1, #17]
   21842:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   21846:	2207      	movs	r2, #7
   21848:	3104      	adds	r1, #4
   2184a:	a801      	add	r0, sp, #4
   2184c:	f7ff fe6b 	bl	21526 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   21850:	2400      	movs	r4, #0
   21852:	940a      	str	r4, [sp, #40]	; 0x28
   21854:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   21858:	2206      	movs	r2, #6
   2185a:	a90a      	add	r1, sp, #40	; 0x28
   2185c:	f10d 000b 	add.w	r0, sp, #11
   21860:	f7ff fe61 	bl	21526 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   21864:	9408      	str	r4, [sp, #32]
   21866:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   2186a:	2206      	movs	r2, #6
   2186c:	a908      	add	r1, sp, #32
   2186e:	f10d 0011 	add.w	r0, sp, #17
   21872:	f7ff fe58 	bl	21526 <memcpy>
	enh_conn_complete(&enh);
   21876:	4668      	mov	r0, sp
   21878:	f7ff ffc0 	bl	217fc <enh_conn_complete>
}
   2187c:	b00c      	add	sp, #48	; 0x30
   2187e:	bd10      	pop	{r4, pc}

00021880 <le_conn_param_req_reply>:
{
   21880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21882:	4606      	mov	r6, r0
   21884:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   21886:	210e      	movs	r1, #14
   21888:	f242 0020 	movw	r0, #8224	; 0x2020
   2188c:	f7f2 fdd8 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   21890:	b1c0      	cbz	r0, 218c4 <le_conn_param_req_reply+0x44>
   21892:	4607      	mov	r7, r0
   21894:	210e      	movs	r1, #14
   21896:	3008      	adds	r0, #8
   21898:	f001 ff89 	bl	237ae <net_buf_simple_add>
   2189c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2189e:	220e      	movs	r2, #14
   218a0:	2100      	movs	r1, #0
   218a2:	f7ff fe64 	bl	2156e <memset>
	cp->handle = sys_cpu_to_le16(handle);
   218a6:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   218a8:	882b      	ldrh	r3, [r5, #0]
   218aa:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   218ac:	886b      	ldrh	r3, [r5, #2]
   218ae:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   218b0:	88ab      	ldrh	r3, [r5, #4]
   218b2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   218b4:	88eb      	ldrh	r3, [r5, #6]
   218b6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   218b8:	4639      	mov	r1, r7
   218ba:	f242 0020 	movw	r0, #8224	; 0x2020
   218be:	f7f3 f8cf 	bl	14a60 <bt_hci_cmd_send>
}
   218c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   218c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   218c8:	e7fb      	b.n	218c2 <le_conn_param_req_reply+0x42>

000218ca <bt_init>:
{
   218ca:	b510      	push	{r4, lr}
	err = hci_init();
   218cc:	f7f3 f868 	bl	149a0 <hci_init>
	if (err) {
   218d0:	4604      	mov	r4, r0
   218d2:	b108      	cbz	r0, 218d8 <bt_init+0xe>
}
   218d4:	4620      	mov	r0, r4
   218d6:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   218d8:	f7f5 f930 	bl	16b3c <bt_conn_init>
		if (err) {
   218dc:	4604      	mov	r4, r0
   218de:	2800      	cmp	r0, #0
   218e0:	d1f8      	bne.n	218d4 <bt_init+0xa>
	bt_finalize_init();
   218e2:	f7f3 fcb7 	bl	15254 <bt_finalize_init>
	return 0;
   218e6:	e7f5      	b.n	218d4 <bt_init+0xa>

000218e8 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   218e8:	2000      	movs	r0, #0
   218ea:	4770      	bx	lr

000218ec <bt_lookup_id_addr>:
}
   218ec:	4608      	mov	r0, r1
   218ee:	4770      	bx	lr

000218f0 <bt_id_set_adv_random_addr>:
{
   218f0:	b508      	push	{r3, lr}
		return set_random_address(addr);
   218f2:	4608      	mov	r0, r1
   218f4:	f7f3 fd90 	bl	15418 <set_random_address>
}
   218f8:	bd08      	pop	{r3, pc}

000218fa <bt_id_set_adv_private_addr>:
{
   218fa:	b510      	push	{r4, lr}
   218fc:	b082      	sub	sp, #8
   218fe:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   21900:	2106      	movs	r1, #6
   21902:	4668      	mov	r0, sp
   21904:	f7f8 f8bc 	bl	19a80 <bt_rand>
	if (err) {
   21908:	b108      	cbz	r0, 2190e <bt_id_set_adv_private_addr+0x14>
}
   2190a:	b002      	add	sp, #8
   2190c:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   2190e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   21912:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   21916:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   2191a:	4669      	mov	r1, sp
   2191c:	4620      	mov	r0, r4
   2191e:	f7ff ffe7 	bl	218f0 <bt_id_set_adv_random_addr>
	if (err) {
   21922:	e7f2      	b.n	2190a <bt_id_set_adv_private_addr+0x10>

00021924 <bt_id_adv_random_addr_check>:
}
   21924:	2001      	movs	r0, #1
   21926:	4770      	bx	lr

00021928 <get_filter_policy>:
}
   21928:	2000      	movs	r0, #0
   2192a:	4770      	bx	lr

0002192c <get_adv_channel_map>:
{
   2192c:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   2192e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   21932:	d10b      	bne.n	2194c <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   21934:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   21936:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2193a:	d001      	beq.n	21940 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   2193c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   21940:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   21944:	d001      	beq.n	2194a <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   21946:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   2194a:	4770      	bx	lr
		channel_map &= ~0x01;
   2194c:	2006      	movs	r0, #6
   2194e:	e7f2      	b.n	21936 <get_adv_channel_map+0xa>

00021950 <hci_set_ad>:
{
   21950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21954:	b082      	sub	sp, #8
   21956:	4607      	mov	r7, r0
   21958:	460d      	mov	r5, r1
   2195a:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2195c:	2120      	movs	r1, #32
   2195e:	f7f2 fd6f 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   21962:	b300      	cbz	r0, 219a6 <hci_set_ad+0x56>
   21964:	4680      	mov	r8, r0
   21966:	2120      	movs	r1, #32
   21968:	3008      	adds	r0, #8
   2196a:	f001 ff20 	bl	237ae <net_buf_simple_add>
   2196e:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   21970:	2220      	movs	r2, #32
   21972:	2100      	movs	r1, #0
   21974:	f7ff fdfb 	bl	2156e <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   21978:	9400      	str	r4, [sp, #0]
   2197a:	4633      	mov	r3, r6
   2197c:	462a      	mov	r2, r5
   2197e:	211f      	movs	r1, #31
   21980:	1c60      	adds	r0, r4, #1
   21982:	f7f3 ffb1 	bl	158e8 <set_data_add>
	if (err) {
   21986:	4604      	mov	r4, r0
   21988:	b948      	cbnz	r0, 2199e <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   2198a:	2200      	movs	r2, #0
   2198c:	4641      	mov	r1, r8
   2198e:	4638      	mov	r0, r7
   21990:	f7f2 fd92 	bl	144b8 <bt_hci_cmd_send_sync>
   21994:	4604      	mov	r4, r0
}
   21996:	4620      	mov	r0, r4
   21998:	b002      	add	sp, #8
   2199a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2199e:	4640      	mov	r0, r8
   219a0:	f001 febb 	bl	2371a <net_buf_unref>
		return err;
   219a4:	e7f7      	b.n	21996 <hci_set_ad+0x46>
		return -ENOBUFS;
   219a6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   219aa:	e7f4      	b.n	21996 <hci_set_ad+0x46>

000219ac <set_ad>:
{
   219ac:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   219ae:	f242 0008 	movw	r0, #8200	; 0x2008
   219b2:	f7ff ffcd 	bl	21950 <hci_set_ad>
}
   219b6:	bd08      	pop	{r3, pc}

000219b8 <set_sd>:
{
   219b8:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   219ba:	f242 0009 	movw	r0, #8201	; 0x2009
   219be:	f7ff ffc7 	bl	21950 <hci_set_ad>
}
   219c2:	bd08      	pop	{r3, pc}

000219c4 <le_adv_update>:
{
   219c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219c8:	b089      	sub	sp, #36	; 0x24
   219ca:	4604      	mov	r4, r0
   219cc:	460d      	mov	r5, r1
   219ce:	4617      	mov	r7, r2
   219d0:	461e      	mov	r6, r3
   219d2:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   219d6:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   219da:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   219de:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
   219e2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   219e6:	9300      	str	r3, [sp, #0]
	struct bt_ad d[2] = {};
   219e8:	2300      	movs	r3, #0
   219ea:	9304      	str	r3, [sp, #16]
   219ec:	9305      	str	r3, [sp, #20]
   219ee:	9306      	str	r3, [sp, #24]
   219f0:	9307      	str	r3, [sp, #28]
	if (use_name) {
   219f2:	f1b9 0f00 	cmp.w	r9, #0
   219f6:	d119      	bne.n	21a2c <le_adv_update+0x68>
	if (!(ext_adv && scannable) || force_name_in_ad) {
   219f8:	f1bb 0f00 	cmp.w	fp, #0
   219fc:	d005      	beq.n	21a0a <le_adv_update+0x46>
   219fe:	f1ba 0f00 	cmp.w	sl, #0
   21a02:	d002      	beq.n	21a0a <le_adv_update+0x46>
   21a04:	9b00      	ldr	r3, [sp, #0]
   21a06:	2b00      	cmp	r3, #0
   21a08:	d047      	beq.n	21a9a <le_adv_update+0xd6>
		d[0].data = ad;
   21a0a:	9504      	str	r5, [sp, #16]
		d[0].len = ad_len;
   21a0c:	9705      	str	r7, [sp, #20]
		if (use_name && (!scannable || force_name_in_ad)) {
   21a0e:	f1b9 0f00 	cmp.w	r9, #0
   21a12:	d03b      	beq.n	21a8c <le_adv_update+0xc8>
   21a14:	f1ba 0f00 	cmp.w	sl, #0
   21a18:	d002      	beq.n	21a20 <le_adv_update+0x5c>
   21a1a:	9b00      	ldr	r3, [sp, #0]
   21a1c:	2b00      	cmp	r3, #0
   21a1e:	d04d      	beq.n	21abc <le_adv_update+0xf8>
			d[1].data = &data;
   21a20:	ab02      	add	r3, sp, #8
   21a22:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   21a24:	2301      	movs	r3, #1
   21a26:	9307      	str	r3, [sp, #28]
			d_len = 2;
   21a28:	2202      	movs	r2, #2
   21a2a:	e030      	b.n	21a8e <le_adv_update+0xca>
		const char *name = bt_get_name();
   21a2c:	f7f3 fcd6 	bl	153dc <bt_get_name>
   21a30:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   21a32:	b16d      	cbz	r5, 21a50 <le_adv_update+0x8c>
	for (i = 0; i < ad_len; i++) {
   21a34:	2200      	movs	r2, #0
   21a36:	4297      	cmp	r7, r2
   21a38:	d907      	bls.n	21a4a <le_adv_update+0x86>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   21a3a:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   21a3e:	3b08      	subs	r3, #8
   21a40:	b2db      	uxtb	r3, r3
   21a42:	2b01      	cmp	r3, #1
   21a44:	d910      	bls.n	21a68 <le_adv_update+0xa4>
	for (i = 0; i < ad_len; i++) {
   21a46:	3201      	adds	r2, #1
   21a48:	e7f5      	b.n	21a36 <le_adv_update+0x72>
	return false;
   21a4a:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   21a4c:	2b00      	cmp	r3, #0
   21a4e:	d152      	bne.n	21af6 <le_adv_update+0x132>
   21a50:	b17e      	cbz	r6, 21a72 <le_adv_update+0xae>
	for (i = 0; i < ad_len; i++) {
   21a52:	2200      	movs	r2, #0
   21a54:	4590      	cmp	r8, r2
   21a56:	d909      	bls.n	21a6c <le_adv_update+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   21a58:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   21a5c:	3b08      	subs	r3, #8
   21a5e:	b2db      	uxtb	r3, r3
   21a60:	2b01      	cmp	r3, #1
   21a62:	d911      	bls.n	21a88 <le_adv_update+0xc4>
	for (i = 0; i < ad_len; i++) {
   21a64:	3201      	adds	r2, #1
   21a66:	e7f5      	b.n	21a54 <le_adv_update+0x90>
			return true;
   21a68:	464b      	mov	r3, r9
   21a6a:	e7ef      	b.n	21a4c <le_adv_update+0x88>
	return false;
   21a6c:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   21a6e:	2b00      	cmp	r3, #0
   21a70:	d144      	bne.n	21afc <le_adv_update+0x138>
		data = (struct bt_data)BT_DATA(
   21a72:	9801      	ldr	r0, [sp, #4]
   21a74:	f7ff fd0e 	bl	21494 <strlen>
   21a78:	2309      	movs	r3, #9
   21a7a:	f88d 3008 	strb.w	r3, [sp, #8]
   21a7e:	f88d 0009 	strb.w	r0, [sp, #9]
   21a82:	9b01      	ldr	r3, [sp, #4]
   21a84:	9303      	str	r3, [sp, #12]
   21a86:	e7b7      	b.n	219f8 <le_adv_update+0x34>
			return true;
   21a88:	464b      	mov	r3, r9
   21a8a:	e7f0      	b.n	21a6e <le_adv_update+0xaa>
		d_len = 1;
   21a8c:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   21a8e:	a904      	add	r1, sp, #16
   21a90:	4620      	mov	r0, r4
   21a92:	f7ff ff8b 	bl	219ac <set_ad>
		if (err) {
   21a96:	4603      	mov	r3, r0
   21a98:	bb38      	cbnz	r0, 21aea <le_adv_update+0x126>
	if (scannable) {
   21a9a:	f1ba 0f00 	cmp.w	sl, #0
   21a9e:	d016      	beq.n	21ace <le_adv_update+0x10a>
		d[0].data = sd;
   21aa0:	9604      	str	r6, [sp, #16]
		d[0].len = sd_len;
   21aa2:	f8cd 8014 	str.w	r8, [sp, #20]
		if (use_name && !force_name_in_ad) {
   21aa6:	f1b9 0f00 	cmp.w	r9, #0
   21aaa:	d009      	beq.n	21ac0 <le_adv_update+0xfc>
   21aac:	9b00      	ldr	r3, [sp, #0]
   21aae:	bb03      	cbnz	r3, 21af2 <le_adv_update+0x12e>
			d[1].data = &data;
   21ab0:	ab02      	add	r3, sp, #8
   21ab2:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   21ab4:	2301      	movs	r3, #1
   21ab6:	9307      	str	r3, [sp, #28]
			d_len = 2;
   21ab8:	2202      	movs	r2, #2
   21aba:	e002      	b.n	21ac2 <le_adv_update+0xfe>
		d_len = 1;
   21abc:	2201      	movs	r2, #1
   21abe:	e7e6      	b.n	21a8e <le_adv_update+0xca>
		d_len = 1;
   21ac0:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   21ac2:	a904      	add	r1, sp, #16
   21ac4:	4620      	mov	r0, r4
   21ac6:	f7ff ff77 	bl	219b8 <set_sd>
		if (err) {
   21aca:	4603      	mov	r3, r0
   21acc:	b968      	cbnz	r0, 21aea <le_adv_update+0x126>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   21ace:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21ad0:	f3bf 8f5b 	dmb	ish
   21ad4:	e854 3f00 	ldrex	r3, [r4]
   21ad8:	f043 0304 	orr.w	r3, r3, #4
   21adc:	e844 3200 	strex	r2, r3, [r4]
   21ae0:	2a00      	cmp	r2, #0
   21ae2:	d1f7      	bne.n	21ad4 <le_adv_update+0x110>
   21ae4:	f3bf 8f5b 	dmb	ish
	return 0;
   21ae8:	2300      	movs	r3, #0
}
   21aea:	4618      	mov	r0, r3
   21aec:	b009      	add	sp, #36	; 0x24
   21aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d_len = 1;
   21af2:	2201      	movs	r2, #1
   21af4:	e7e5      	b.n	21ac2 <le_adv_update+0xfe>
			return -EINVAL;
   21af6:	f06f 0315 	mvn.w	r3, #21
   21afa:	e7f6      	b.n	21aea <le_adv_update+0x126>
   21afc:	f06f 0315 	mvn.w	r3, #21
   21b00:	e7f3      	b.n	21aea <le_adv_update+0x126>

00021b02 <valid_adv_param>:
{
   21b02:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   21b04:	6843      	ldr	r3, [r0, #4]
   21b06:	f413 6f80 	tst.w	r3, #1024	; 0x400
   21b0a:	d107      	bne.n	21b1c <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   21b0c:	6902      	ldr	r2, [r0, #16]
   21b0e:	b112      	cbz	r2, 21b16 <valid_adv_param+0x14>
   21b10:	f013 0f01 	tst.w	r3, #1
   21b14:	d004      	beq.n	21b20 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   21b16:	f7f3 ff4b 	bl	159b0 <valid_adv_ext_param>
}
   21b1a:	bd08      	pop	{r3, pc}
		return false;
   21b1c:	2000      	movs	r0, #0
   21b1e:	e7fc      	b.n	21b1a <valid_adv_param+0x18>
		return false;
   21b20:	2000      	movs	r0, #0
   21b22:	e7fa      	b.n	21b1a <valid_adv_param+0x18>

00021b24 <bt_le_adv_set_enable_legacy>:
{
   21b24:	b570      	push	{r4, r5, r6, lr}
   21b26:	b086      	sub	sp, #24
   21b28:	4605      	mov	r5, r0
   21b2a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   21b2c:	2101      	movs	r1, #1
   21b2e:	f242 000a 	movw	r0, #8202	; 0x200a
   21b32:	f7f2 fc85 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   21b36:	b1d0      	cbz	r0, 21b6e <bt_le_adv_set_enable_legacy+0x4a>
   21b38:	4606      	mov	r6, r0
	if (enable) {
   21b3a:	b19c      	cbz	r4, 21b64 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   21b3c:	2101      	movs	r1, #1
   21b3e:	3008      	adds	r0, #8
   21b40:	f001 fe46 	bl	237d0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   21b44:	9400      	str	r4, [sp, #0]
   21b46:	2306      	movs	r3, #6
   21b48:	f105 0210 	add.w	r2, r5, #16
   21b4c:	a903      	add	r1, sp, #12
   21b4e:	4630      	mov	r0, r6
   21b50:	f7f2 fc64 	bl	1441c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   21b54:	2200      	movs	r2, #0
   21b56:	4631      	mov	r1, r6
   21b58:	f242 000a 	movw	r0, #8202	; 0x200a
   21b5c:	f7f2 fcac 	bl	144b8 <bt_hci_cmd_send_sync>
}
   21b60:	b006      	add	sp, #24
   21b62:	bd70      	pop	{r4, r5, r6, pc}
   21b64:	2100      	movs	r1, #0
   21b66:	3008      	adds	r0, #8
   21b68:	f001 fe32 	bl	237d0 <net_buf_simple_add_u8>
   21b6c:	e7ea      	b.n	21b44 <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   21b6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21b72:	e7f5      	b.n	21b60 <bt_le_adv_set_enable_legacy+0x3c>

00021b74 <bt_le_adv_set_enable>:
{
   21b74:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   21b76:	f7ff ffd5 	bl	21b24 <bt_le_adv_set_enable_legacy>
}
   21b7a:	bd08      	pop	{r3, pc}

00021b7c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   21b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21b7e:	b083      	sub	sp, #12
   21b80:	4607      	mov	r7, r0
   21b82:	460e      	mov	r6, r1
   21b84:	4614      	mov	r4, r2
   21b86:	461d      	mov	r5, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   21b88:	f7f3 feaa 	bl	158e0 <adv_new_legacy>
	int err;

	if (!adv) {
   21b8c:	b148      	cbz	r0, 21ba2 <bt_le_adv_start+0x26>

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   21b8e:	9b08      	ldr	r3, [sp, #32]
   21b90:	9301      	str	r3, [sp, #4]
   21b92:	9500      	str	r5, [sp, #0]
   21b94:	4623      	mov	r3, r4
   21b96:	4632      	mov	r2, r6
   21b98:	4639      	mov	r1, r7
   21b9a:	f7f3 ffa5 	bl	15ae8 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
   21b9e:	b003      	add	sp, #12
   21ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
   21ba2:	f06f 000b 	mvn.w	r0, #11
   21ba6:	e7fa      	b.n	21b9e <bt_le_adv_start+0x22>

00021ba8 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   21ba8:	b530      	push	{r4, r5, lr}
   21baa:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   21bac:	f7f3 ff98 	bl	15ae0 <bt_le_adv_lookup_legacy>
	struct bt_conn *conn;
	bool persist_paused = false;
	int err;

	if (!adv) {
   21bb0:	b150      	cbz	r0, 21bc8 <bt_le_adv_resume+0x20>
   21bb2:	4604      	mov	r4, r0
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   21bb4:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21bb8:	f3bf 8f5b 	dmb	ish
   21bbc:	6903      	ldr	r3, [r0, #16]
   21bbe:	f3bf 8f5b 	dmb	ish
   21bc2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   21bc6:	d101      	bne.n	21bcc <bt_le_adv_resume+0x24>
	 */
	bt_conn_unref(conn);
	if (persist_paused) {
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   21bc8:	b003      	add	sp, #12
   21bca:	bd30      	pop	{r4, r5, pc}
   21bcc:	f3bf 8f5b 	dmb	ish
   21bd0:	6903      	ldr	r3, [r0, #16]
   21bd2:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   21bd6:	f013 0f40 	tst.w	r3, #64	; 0x40
   21bda:	d1f5      	bne.n	21bc8 <bt_le_adv_resume+0x20>
   21bdc:	f3bf 8f5b 	dmb	ish
   21be0:	6903      	ldr	r3, [r0, #16]
   21be2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   21be6:	f413 7f80 	tst.w	r3, #256	; 0x100
   21bea:	d0ed      	beq.n	21bc8 <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   21bec:	a901      	add	r1, sp, #4
   21bee:	f7f3 ff2d 	bl	15a4c <le_adv_start_add_conn>
	if (err) {
   21bf2:	2800      	cmp	r0, #0
   21bf4:	d1e8      	bne.n	21bc8 <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   21bf6:	2101      	movs	r1, #1
   21bf8:	4620      	mov	r0, r4
   21bfa:	f7ff ffbb 	bl	21b74 <bt_le_adv_set_enable>
	if (err) {
   21bfe:	b908      	cbnz	r0, 21c04 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   21c00:	2400      	movs	r4, #0
   21c02:	e011      	b.n	21c28 <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   21c04:	2100      	movs	r1, #0
   21c06:	9801      	ldr	r0, [sp, #4]
   21c08:	f7f4 fbbc 	bl	16384 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21c0c:	f3bf 8f5b 	dmb	ish
   21c10:	e855 4f00 	ldrex	r4, [r5]
   21c14:	f424 5380 	bic.w	r3, r4, #4096	; 0x1000
   21c18:	e845 3200 	strex	r2, r3, [r5]
   21c1c:	2a00      	cmp	r2, #0
   21c1e:	d1f7      	bne.n	21c10 <bt_le_adv_resume+0x68>
   21c20:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   21c24:	f3c4 3400 	ubfx	r4, r4, #12, #1
	bt_conn_unref(conn);
   21c28:	9801      	ldr	r0, [sp, #4]
   21c2a:	f000 f92b 	bl	21e84 <bt_conn_unref>
	if (persist_paused) {
   21c2e:	2c00      	cmp	r4, #0
   21c30:	d0ca      	beq.n	21bc8 <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21c32:	f3bf 8f5b 	dmb	ish
   21c36:	e855 3f00 	ldrex	r3, [r5]
   21c3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   21c3e:	e845 3200 	strex	r2, r3, [r5]
   21c42:	2a00      	cmp	r2, #0
   21c44:	d1f7      	bne.n	21c36 <bt_le_adv_resume+0x8e>
   21c46:	f3bf 8f5b 	dmb	ish
}
   21c4a:	e7bd      	b.n	21bc8 <bt_le_adv_resume+0x20>

00021c4c <tx_notify>:
{
   21c4c:	b570      	push	{r4, r5, r6, lr}
   21c4e:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   21c50:	e010      	b.n	21c74 <tx_notify+0x28>
   21c52:	f383 8811 	msr	BASEPRI, r3
   21c56:	f3bf 8f6f 	isb	sy
}
   21c5a:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   21c5c:	6262      	str	r2, [r4, #36]	; 0x24
   21c5e:	f383 8811 	msr	BASEPRI, r3
   21c62:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   21c66:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   21c68:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   21c6a:	f7f4 f93b 	bl	15ee4 <tx_free>
		cb(conn, user_data);
   21c6e:	4631      	mov	r1, r6
   21c70:	4620      	mov	r0, r4
   21c72:	47a8      	blx	r5
	__asm__ volatile(
   21c74:	f04f 0240 	mov.w	r2, #64	; 0x40
   21c78:	f3ef 8311 	mrs	r3, BASEPRI
   21c7c:	f382 8811 	msr	BASEPRI, r2
   21c80:	f3bf 8f6f 	isb	sy
	return list->head;
   21c84:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   21c86:	2800      	cmp	r0, #0
   21c88:	d0e3      	beq.n	21c52 <tx_notify+0x6>
	return node->next;
   21c8a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21c8c:	6222      	str	r2, [r4, #32]
	return list->tail;
   21c8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21c90:	4281      	cmp	r1, r0
   21c92:	d1e4      	bne.n	21c5e <tx_notify+0x12>
   21c94:	e7e2      	b.n	21c5c <tx_notify+0x10>

00021c96 <tx_complete_work>:
{
   21c96:	b508      	push	{r3, lr}
	tx_notify(conn);
   21c98:	3828      	subs	r0, #40	; 0x28
   21c9a:	f7ff ffd7 	bl	21c4c <tx_notify>
}
   21c9e:	bd08      	pop	{r3, pc}

00021ca0 <send_acl>:
{
   21ca0:	b570      	push	{r4, r5, r6, lr}
   21ca2:	4605      	mov	r5, r0
   21ca4:	460c      	mov	r4, r1
	switch (flags) {
   21ca6:	2a03      	cmp	r2, #3
   21ca8:	d819      	bhi.n	21cde <send_acl+0x3e>
   21caa:	e8df f002 	tbb	[pc, r2]
   21cae:	1602      	.short	0x1602
   21cb0:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   21cb2:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   21cb4:	2104      	movs	r1, #4
   21cb6:	f104 0008 	add.w	r0, r4, #8
   21cba:	f001 fd90 	bl	237de <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   21cbe:	f9b5 3000 	ldrsh.w	r3, [r5]
   21cc2:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   21cc6:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   21cc8:	89a3      	ldrh	r3, [r4, #12]
   21cca:	3b04      	subs	r3, #4
   21ccc:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   21cce:	2302      	movs	r3, #2
   21cd0:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   21cd2:	4620      	mov	r0, r4
   21cd4:	f7f2 feba 	bl	14a4c <bt_send>
}
   21cd8:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   21cda:	2601      	movs	r6, #1
   21cdc:	e7ea      	b.n	21cb4 <send_acl+0x14>
   21cde:	f06f 0015 	mvn.w	r0, #21
   21ce2:	e7f9      	b.n	21cd8 <send_acl+0x38>

00021ce4 <process_unack_tx>:
{
   21ce4:	b510      	push	{r4, lr}
   21ce6:	4604      	mov	r4, r0
   21ce8:	e028      	b.n	21d3c <process_unack_tx+0x58>
			conn->pending_no_cb--;
   21cea:	3b01      	subs	r3, #1
   21cec:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   21cee:	f382 8811 	msr	BASEPRI, r2
   21cf2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   21cf6:	4620      	mov	r0, r4
   21cf8:	f7f4 f930 	bl	15f5c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   21cfc:	f7f9 ff10 	bl	1bb20 <z_impl_k_sem_give>
			continue;
   21d00:	e01c      	b.n	21d3c <process_unack_tx+0x58>
	list->tail = node;
   21d02:	61a3      	str	r3, [r4, #24]
   21d04:	f382 8811 	msr	BASEPRI, r2
   21d08:	f3bf 8f6f 	isb	sy
		if (!node) {
   21d0c:	b350      	cbz	r0, 21d64 <process_unack_tx+0x80>
	__asm__ volatile(
   21d0e:	f04f 0240 	mov.w	r2, #64	; 0x40
   21d12:	f3ef 8311 	mrs	r3, BASEPRI
   21d16:	f382 8811 	msr	BASEPRI, r2
   21d1a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   21d1e:	68c2      	ldr	r2, [r0, #12]
   21d20:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   21d22:	2200      	movs	r2, #0
   21d24:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   21d26:	f383 8811 	msr	BASEPRI, r3
   21d2a:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   21d2e:	f7f4 f8d9 	bl	15ee4 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   21d32:	4620      	mov	r0, r4
   21d34:	f7f4 f912 	bl	15f5c <bt_conn_get_pkts>
   21d38:	f7f9 fef2 	bl	1bb20 <z_impl_k_sem_give>
	__asm__ volatile(
   21d3c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d40:	f3ef 8211 	mrs	r2, BASEPRI
   21d44:	f383 8811 	msr	BASEPRI, r3
   21d48:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   21d4c:	69e3      	ldr	r3, [r4, #28]
   21d4e:	2b00      	cmp	r3, #0
   21d50:	d1cb      	bne.n	21cea <process_unack_tx+0x6>
	return list->head;
   21d52:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   21d54:	2800      	cmp	r0, #0
   21d56:	d0d5      	beq.n	21d04 <process_unack_tx+0x20>
	return node->next;
   21d58:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   21d5a:	6163      	str	r3, [r4, #20]
	return list->tail;
   21d5c:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21d5e:	4288      	cmp	r0, r1
   21d60:	d1d0      	bne.n	21d04 <process_unack_tx+0x20>
   21d62:	e7ce      	b.n	21d02 <process_unack_tx+0x1e>
}
   21d64:	bd10      	pop	{r4, pc}

00021d66 <bt_conn_reset_rx_state>:
{
   21d66:	b510      	push	{r4, lr}
   21d68:	4604      	mov	r4, r0
	if (!conn->rx) {
   21d6a:	6900      	ldr	r0, [r0, #16]
   21d6c:	b118      	cbz	r0, 21d76 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   21d6e:	f001 fcd4 	bl	2371a <net_buf_unref>
	conn->rx = NULL;
   21d72:	2300      	movs	r3, #0
   21d74:	6123      	str	r3, [r4, #16]
}
   21d76:	bd10      	pop	{r4, pc}

00021d78 <conn_cleanup>:
{
   21d78:	b538      	push	{r3, r4, r5, lr}
   21d7a:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21d7c:	e004      	b.n	21d88 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   21d7e:	f7f4 f8b1 	bl	15ee4 <tx_free>
		net_buf_unref(buf);
   21d82:	4620      	mov	r0, r4
   21d84:	f001 fcc9 	bl	2371a <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   21d88:	2200      	movs	r2, #0
   21d8a:	2300      	movs	r3, #0
   21d8c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   21d90:	f001 fc97 	bl	236c2 <net_buf_get>
   21d94:	4604      	mov	r4, r0
   21d96:	b118      	cbz	r0, 21da0 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   21d98:	6960      	ldr	r0, [r4, #20]
   21d9a:	2800      	cmp	r0, #0
   21d9c:	d1ef      	bne.n	21d7e <conn_cleanup+0x6>
   21d9e:	e7f0      	b.n	21d82 <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   21da0:	4628      	mov	r0, r5
   21da2:	f7ff ffe0 	bl	21d66 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   21da6:	2200      	movs	r2, #0
   21da8:	2300      	movs	r3, #0
   21daa:	f105 0058 	add.w	r0, r5, #88	; 0x58
   21dae:	f7fa f8cf 	bl	1bf50 <k_work_reschedule>
}
   21db2:	bd38      	pop	{r3, r4, r5, pc}

00021db4 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21db4:	f3bf 8f5b 	dmb	ish
   21db8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   21dbc:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   21dc0:	b33b      	cbz	r3, 21e12 <conn_prepare_events+0x5e>
{
   21dc2:	b510      	push	{r4, lr}
   21dc4:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   21dc6:	7a83      	ldrb	r3, [r0, #10]
   21dc8:	b983      	cbnz	r3, 21dec <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   21dca:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21dcc:	f3bf 8f5b 	dmb	ish
   21dd0:	e853 2f00 	ldrex	r2, [r3]
   21dd4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   21dd8:	e843 1c00 	strex	ip, r1, [r3]
   21ddc:	f1bc 0f00 	cmp.w	ip, #0
   21de0:	d1f6      	bne.n	21dd0 <conn_prepare_events+0x1c>
   21de2:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   21de6:	f012 0f40 	tst.w	r2, #64	; 0x40
   21dea:	d10d      	bne.n	21e08 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   21dec:	7a83      	ldrb	r3, [r0, #10]
   21dee:	2b07      	cmp	r3, #7
   21df0:	d112      	bne.n	21e18 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   21df2:	f100 0338 	add.w	r3, r0, #56	; 0x38
   21df6:	2200      	movs	r2, #0
   21df8:	2104      	movs	r1, #4
   21dfa:	4620      	mov	r0, r4
   21dfc:	f003 f96e 	bl	250dc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   21e00:	2301      	movs	r3, #1
   21e02:	7323      	strb	r3, [r4, #12]
	return 0;
   21e04:	2000      	movs	r0, #0
}
   21e06:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   21e08:	f7ff ffb6 	bl	21d78 <conn_cleanup>
		return -ENOTCONN;
   21e0c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21e10:	e7f9      	b.n	21e06 <conn_prepare_events+0x52>
		return -ENOTCONN;
   21e12:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   21e16:	4770      	bx	lr
		return -ENOTCONN;
   21e18:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21e1c:	e7f3      	b.n	21e06 <conn_prepare_events+0x52>

00021e1e <bt_conn_recv>:
{
   21e1e:	b570      	push	{r4, r5, r6, lr}
   21e20:	4604      	mov	r4, r0
   21e22:	460d      	mov	r5, r1
   21e24:	4616      	mov	r6, r2
	tx_notify(conn);
   21e26:	f7ff ff11 	bl	21c4c <tx_notify>
		bt_acl_recv(conn, buf, flags);
   21e2a:	4632      	mov	r2, r6
   21e2c:	4629      	mov	r1, r5
   21e2e:	4620      	mov	r0, r4
   21e30:	f7f4 f964 	bl	160fc <bt_acl_recv>
}
   21e34:	bd70      	pop	{r4, r5, r6, pc}

00021e36 <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21e36:	f3bf 8f5b 	dmb	ish
   21e3a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   21e3e:	f3bf 8f5b 	dmb	ish
		if (!old) {
   21e42:	b1eb      	cbz	r3, 21e80 <bt_conn_ref+0x4a>
{
   21e44:	b410      	push	{r4}
   21e46:	e006      	b.n	21e56 <bt_conn_ref+0x20>
   21e48:	f3bf 8f5b 	dmb	ish
   21e4c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   21e50:	f3bf 8f5b 	dmb	ish
		if (!old) {
   21e54:	b193      	cbz	r3, 21e7c <bt_conn_ref+0x46>
   21e56:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
	} while (!atomic_cas(&conn->ref, old, old + 1));
   21e5a:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   21e5c:	f3bf 8f5b 	dmb	ish
   21e60:	e852 4f00 	ldrex	r4, [r2]
   21e64:	429c      	cmp	r4, r3
   21e66:	d104      	bne.n	21e72 <bt_conn_ref+0x3c>
   21e68:	e842 1c00 	strex	ip, r1, [r2]
   21e6c:	f1bc 0f00 	cmp.w	ip, #0
   21e70:	d1f6      	bne.n	21e60 <bt_conn_ref+0x2a>
   21e72:	f3bf 8f5b 	dmb	ish
   21e76:	d1e7      	bne.n	21e48 <bt_conn_ref+0x12>
}
   21e78:	bc10      	pop	{r4}
   21e7a:	4770      	bx	lr
			return NULL;
   21e7c:	2000      	movs	r0, #0
   21e7e:	e7fb      	b.n	21e78 <bt_conn_ref+0x42>
   21e80:	2000      	movs	r0, #0
}
   21e82:	4770      	bx	lr

00021e84 <bt_conn_unref>:
{
   21e84:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   21e86:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21e8a:	f3bf 8f5b 	dmb	ish
   21e8e:	e853 2f00 	ldrex	r2, [r3]
   21e92:	3a01      	subs	r2, #1
   21e94:	e843 2100 	strex	r1, r2, [r3]
   21e98:	2900      	cmp	r1, #0
   21e9a:	d1f8      	bne.n	21e8e <bt_conn_unref+0xa>
   21e9c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   21ea0:	7883      	ldrb	r3, [r0, #2]
   21ea2:	2b01      	cmp	r3, #1
   21ea4:	d000      	beq.n	21ea8 <bt_conn_unref+0x24>
}
   21ea6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21ea8:	f3bf 8f5b 	dmb	ish
   21eac:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   21eb0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   21eb4:	2b00      	cmp	r3, #0
   21eb6:	d1f6      	bne.n	21ea6 <bt_conn_unref+0x22>
		bt_le_adv_resume();
   21eb8:	f7ff fe76 	bl	21ba8 <bt_le_adv_resume>
}
   21ebc:	e7f3      	b.n	21ea6 <bt_conn_unref+0x22>

00021ebe <conn_lookup_handle>:
{
   21ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ec2:	4607      	mov	r7, r0
   21ec4:	460e      	mov	r6, r1
   21ec6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   21ec8:	2400      	movs	r4, #0
   21eca:	e003      	b.n	21ed4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   21ecc:	4628      	mov	r0, r5
   21ece:	f7ff ffd9 	bl	21e84 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   21ed2:	3401      	adds	r4, #1
   21ed4:	42b4      	cmp	r4, r6
   21ed6:	d21b      	bcs.n	21f10 <conn_lookup_handle+0x52>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   21ed8:	20c8      	movs	r0, #200	; 0xc8
   21eda:	fb00 7004 	mla	r0, r0, r4, r7
   21ede:	f7ff ffaa 	bl	21e36 <bt_conn_ref>
		if (!conn) {
   21ee2:	4605      	mov	r5, r0
   21ee4:	2800      	cmp	r0, #0
   21ee6:	d0f4      	beq.n	21ed2 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   21ee8:	7a83      	ldrb	r3, [r0, #10]
   21eea:	2b01      	cmp	r3, #1
   21eec:	d006      	beq.n	21efc <conn_lookup_handle+0x3e>
   21eee:	b25a      	sxtb	r2, r3
   21ef0:	2a00      	cmp	r2, #0
   21ef2:	d0eb      	beq.n	21ecc <conn_lookup_handle+0xe>
   21ef4:	3b07      	subs	r3, #7
   21ef6:	b2db      	uxtb	r3, r3
   21ef8:	2b01      	cmp	r3, #1
   21efa:	d8e7      	bhi.n	21ecc <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   21efc:	882b      	ldrh	r3, [r5, #0]
   21efe:	4543      	cmp	r3, r8
   21f00:	d102      	bne.n	21f08 <conn_lookup_handle+0x4a>
}
   21f02:	4628      	mov	r0, r5
   21f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   21f08:	4628      	mov	r0, r5
   21f0a:	f7ff ffbb 	bl	21e84 <bt_conn_unref>
			continue;
   21f0e:	e7e0      	b.n	21ed2 <conn_lookup_handle+0x14>
	return NULL;
   21f10:	2500      	movs	r5, #0
   21f12:	e7f6      	b.n	21f02 <conn_lookup_handle+0x44>

00021f14 <bt_conn_connected>:
{
   21f14:	b510      	push	{r4, lr}
   21f16:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   21f18:	f7f4 fee4 	bl	16ce4 <bt_l2cap_connected>
	notify_connected(conn);
   21f1c:	4620      	mov	r0, r4
   21f1e:	f7f4 f805 	bl	15f2c <notify_connected>
}
   21f22:	bd10      	pop	{r4, pc}

00021f24 <bt_conn_get_security>:
}
   21f24:	2001      	movs	r0, #1
   21f26:	4770      	bx	lr

00021f28 <bt_conn_add_le>:
{
   21f28:	b570      	push	{r4, r5, r6, lr}
   21f2a:	4606      	mov	r6, r0
   21f2c:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   21f2e:	f7f4 f8dd 	bl	160ec <acl_conn_new>
	if (!conn) {
   21f32:	4604      	mov	r4, r0
   21f34:	b168      	cbz	r0, 21f52 <bt_conn_add_le+0x2a>
	conn->id = id;
   21f36:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   21f38:	2207      	movs	r2, #7
   21f3a:	4629      	mov	r1, r5
   21f3c:	3088      	adds	r0, #136	; 0x88
   21f3e:	f7ff faf2 	bl	21526 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   21f42:	2301      	movs	r3, #1
   21f44:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   21f46:	2318      	movs	r3, #24
   21f48:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   21f4c:	2328      	movs	r3, #40	; 0x28
   21f4e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   21f52:	4620      	mov	r0, r4
   21f54:	bd70      	pop	{r4, r5, r6, pc}

00021f56 <bt_conn_is_peer_addr_le>:
{
   21f56:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   21f58:	7a03      	ldrb	r3, [r0, #8]
   21f5a:	428b      	cmp	r3, r1
   21f5c:	d001      	beq.n	21f62 <bt_conn_is_peer_addr_le+0xc>
		return false;
   21f5e:	2000      	movs	r0, #0
}
   21f60:	bd38      	pop	{r3, r4, r5, pc}
   21f62:	4604      	mov	r4, r0
   21f64:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   21f66:	2207      	movs	r2, #7
   21f68:	f100 0188 	add.w	r1, r0, #136	; 0x88
   21f6c:	4628      	mov	r0, r5
   21f6e:	f7ff faad 	bl	214cc <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   21f72:	b1a8      	cbz	r0, 21fa0 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   21f74:	78e3      	ldrb	r3, [r4, #3]
   21f76:	b14b      	cbz	r3, 21f8c <bt_conn_is_peer_addr_le+0x36>
   21f78:	2207      	movs	r2, #7
   21f7a:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   21f7e:	4628      	mov	r0, r5
   21f80:	f7ff faa4 	bl	214cc <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   21f84:	fab0 f080 	clz	r0, r0
   21f88:	0940      	lsrs	r0, r0, #5
   21f8a:	e7e9      	b.n	21f60 <bt_conn_is_peer_addr_le+0xa>
   21f8c:	2207      	movs	r2, #7
   21f8e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   21f92:	4628      	mov	r0, r5
   21f94:	f7ff fa9a 	bl	214cc <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   21f98:	fab0 f080 	clz	r0, r0
   21f9c:	0940      	lsrs	r0, r0, #5
   21f9e:	e7df      	b.n	21f60 <bt_conn_is_peer_addr_le+0xa>
		return true;
   21fa0:	2001      	movs	r0, #1
   21fa2:	e7dd      	b.n	21f60 <bt_conn_is_peer_addr_le+0xa>

00021fa4 <bt_conn_get_dst>:
}
   21fa4:	3088      	adds	r0, #136	; 0x88
   21fa6:	4770      	bx	lr

00021fa8 <bt_conn_le_conn_update>:
{
   21fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21faa:	4606      	mov	r6, r0
   21fac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   21fae:	210e      	movs	r1, #14
   21fb0:	f242 0013 	movw	r0, #8211	; 0x2013
   21fb4:	f7f2 fa44 	bl	14440 <bt_hci_cmd_create>
	if (!buf) {
   21fb8:	b1d0      	cbz	r0, 21ff0 <bt_conn_le_conn_update+0x48>
   21fba:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   21fbc:	210e      	movs	r1, #14
   21fbe:	3008      	adds	r0, #8
   21fc0:	f001 fbf5 	bl	237ae <net_buf_simple_add>
   21fc4:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   21fc6:	220e      	movs	r2, #14
   21fc8:	2100      	movs	r1, #0
   21fca:	f7ff fad0 	bl	2156e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   21fce:	8833      	ldrh	r3, [r6, #0]
   21fd0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   21fd2:	882b      	ldrh	r3, [r5, #0]
   21fd4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   21fd6:	886b      	ldrh	r3, [r5, #2]
   21fd8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   21fda:	88ab      	ldrh	r3, [r5, #4]
   21fdc:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   21fde:	88eb      	ldrh	r3, [r5, #6]
   21fe0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   21fe2:	2200      	movs	r2, #0
   21fe4:	4639      	mov	r1, r7
   21fe6:	f242 0013 	movw	r0, #8211	; 0x2013
   21fea:	f7f2 fa65 	bl	144b8 <bt_hci_cmd_send_sync>
}
   21fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   21ff0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   21ff4:	e7fb      	b.n	21fee <bt_conn_le_conn_update+0x46>

00021ff6 <l2cap_connected>:
}
   21ff6:	4770      	bx	lr

00021ff8 <l2cap_chan_recv>:
{
   21ff8:	b510      	push	{r4, lr}
   21ffa:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   21ffc:	6843      	ldr	r3, [r0, #4]
   21ffe:	691b      	ldr	r3, [r3, #16]
   22000:	4798      	blx	r3
	net_buf_unref(buf);
   22002:	4620      	mov	r0, r4
   22004:	f001 fb89 	bl	2371a <net_buf_unref>
}
   22008:	bd10      	pop	{r4, pc}

0002200a <l2cap_disconnected>:
{
   2200a:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2200c:	3010      	adds	r0, #16
   2200e:	f002 fd34 	bl	24a7a <k_work_cancel_delayable>
}
   22012:	bd08      	pop	{r3, pc}

00022014 <bt_l2cap_chan_remove>:
	return list->head;
   22014:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22016:	b103      	cbz	r3, 2201a <bt_l2cap_chan_remove+0x6>
   22018:	3b08      	subs	r3, #8
   2201a:	2200      	movs	r2, #0
   2201c:	e016      	b.n	2204c <bt_l2cap_chan_remove+0x38>
{
   2201e:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   22020:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   22024:	b142      	cbz	r2, 22038 <bt_l2cap_chan_remove+0x24>
	return node->next;
   22026:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   22028:	6014      	str	r4, [r2, #0]
	return list->tail;
   2202a:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2202c:	42a1      	cmp	r1, r4
   2202e:	d00a      	beq.n	22046 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   22030:	2200      	movs	r2, #0
   22032:	609a      	str	r2, [r3, #8]
}
   22034:	bc10      	pop	{r4}
   22036:	4770      	bx	lr
	return node->next;
   22038:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2203a:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   2203c:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2203e:	42a1      	cmp	r1, r4
   22040:	d1f6      	bne.n	22030 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   22042:	6542      	str	r2, [r0, #84]	; 0x54
}
   22044:	e7f4      	b.n	22030 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   22046:	6542      	str	r2, [r0, #84]	; 0x54
}
   22048:	e7f2      	b.n	22030 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2204a:	4613      	mov	r3, r2
   2204c:	b14b      	cbz	r3, 22062 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   2204e:	428b      	cmp	r3, r1
   22050:	d0e5      	beq.n	2201e <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22052:	f113 0208 	adds.w	r2, r3, #8
   22056:	d0f8      	beq.n	2204a <bt_l2cap_chan_remove+0x36>
	return node->next;
   22058:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2205a:	2b00      	cmp	r3, #0
   2205c:	d0f6      	beq.n	2204c <bt_l2cap_chan_remove+0x38>
   2205e:	3b08      	subs	r3, #8
   22060:	e7f4      	b.n	2204c <bt_l2cap_chan_remove+0x38>
   22062:	4770      	bx	lr

00022064 <bt_l2cap_chan_del>:
{
   22064:	b538      	push	{r3, r4, r5, lr}
   22066:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   22068:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   2206a:	6803      	ldr	r3, [r0, #0]
   2206c:	b123      	cbz	r3, 22078 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2206e:	686b      	ldr	r3, [r5, #4]
   22070:	b103      	cbz	r3, 22074 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   22072:	4798      	blx	r3
	chan->conn = NULL;
   22074:	2300      	movs	r3, #0
   22076:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   22078:	68e3      	ldr	r3, [r4, #12]
   2207a:	b10b      	cbz	r3, 22080 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2207c:	4620      	mov	r0, r4
   2207e:	4798      	blx	r3
	if (ops->released) {
   22080:	69eb      	ldr	r3, [r5, #28]
   22082:	b10b      	cbz	r3, 22088 <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   22084:	4620      	mov	r0, r4
   22086:	4798      	blx	r3
}
   22088:	bd38      	pop	{r3, r4, r5, pc}

0002208a <bt_l2cap_chan_add>:
{
   2208a:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   2208c:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   22090:	2400      	movs	r4, #0
   22092:	608c      	str	r4, [r1, #8]
	return list->tail;
   22094:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   22096:	b12c      	cbz	r4, 220a4 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   22098:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2209a:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   2209c:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   2209e:	60ca      	str	r2, [r1, #12]
}
   220a0:	bc10      	pop	{r4}
   220a2:	4770      	bx	lr
   220a4:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   220a6:	6503      	str	r3, [r0, #80]	; 0x50
}
   220a8:	e7f8      	b.n	2209c <bt_l2cap_chan_add+0x12>

000220aa <bt_l2cap_disconnected>:
{
   220aa:	b510      	push	{r4, lr}
	return list->head;
   220ac:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   220ae:	b140      	cbz	r0, 220c2 <bt_l2cap_disconnected+0x18>
   220b0:	3808      	subs	r0, #8
   220b2:	d008      	beq.n	220c6 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   220b4:	f110 0408 	adds.w	r4, r0, #8
   220b8:	d00a      	beq.n	220d0 <bt_l2cap_disconnected+0x26>
	return node->next;
   220ba:	6884      	ldr	r4, [r0, #8]
   220bc:	b144      	cbz	r4, 220d0 <bt_l2cap_disconnected+0x26>
   220be:	3c08      	subs	r4, #8
   220c0:	e006      	b.n	220d0 <bt_l2cap_disconnected+0x26>
   220c2:	4604      	mov	r4, r0
   220c4:	e004      	b.n	220d0 <bt_l2cap_disconnected+0x26>
   220c6:	4604      	mov	r4, r0
   220c8:	e002      	b.n	220d0 <bt_l2cap_disconnected+0x26>
   220ca:	4623      	mov	r3, r4
   220cc:	4620      	mov	r0, r4
   220ce:	461c      	mov	r4, r3
   220d0:	b158      	cbz	r0, 220ea <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   220d2:	f7ff ffc7 	bl	22064 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   220d6:	2c00      	cmp	r4, #0
   220d8:	d0f7      	beq.n	220ca <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   220da:	f114 0308 	adds.w	r3, r4, #8
   220de:	d0f5      	beq.n	220cc <bt_l2cap_disconnected+0x22>
	return node->next;
   220e0:	68a3      	ldr	r3, [r4, #8]
   220e2:	2b00      	cmp	r3, #0
   220e4:	d0f2      	beq.n	220cc <bt_l2cap_disconnected+0x22>
   220e6:	3b08      	subs	r3, #8
   220e8:	e7f0      	b.n	220cc <bt_l2cap_disconnected+0x22>
}
   220ea:	bd10      	pop	{r4, pc}

000220ec <bt_l2cap_create_pdu_timeout>:
{
   220ec:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   220ee:	3104      	adds	r1, #4
   220f0:	f7f4 fc42 	bl	16978 <bt_conn_create_pdu_timeout>
}
   220f4:	bd08      	pop	{r3, pc}

000220f6 <bt_l2cap_send_cb>:
{
   220f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220f8:	4605      	mov	r5, r0
   220fa:	460f      	mov	r7, r1
   220fc:	4614      	mov	r4, r2
   220fe:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   22100:	2104      	movs	r1, #4
   22102:	f102 0008 	add.w	r0, r2, #8
   22106:	f001 fb6a 	bl	237de <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2210a:	89a3      	ldrh	r3, [r4, #12]
   2210c:	3b04      	subs	r3, #4
   2210e:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   22110:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22112:	9b06      	ldr	r3, [sp, #24]
   22114:	4632      	mov	r2, r6
   22116:	4621      	mov	r1, r4
   22118:	4628      	mov	r0, r5
   2211a:	f7f4 f8a1 	bl	16260 <bt_conn_send_cb>
}
   2211e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022120 <l2cap_send_reject>:
{
   22120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22124:	b083      	sub	sp, #12
   22126:	4605      	mov	r5, r0
   22128:	4690      	mov	r8, r2
   2212a:	461c      	mov	r4, r3
   2212c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   22130:	1cbb      	adds	r3, r7, #2
   22132:	460a      	mov	r2, r1
   22134:	2101      	movs	r1, #1
   22136:	2000      	movs	r0, #0
   22138:	f7f4 fe10 	bl	16d5c <l2cap_create_le_sig_pdu>
	if (!buf) {
   2213c:	b1b0      	cbz	r0, 2216c <l2cap_send_reject+0x4c>
   2213e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   22140:	f100 0908 	add.w	r9, r0, #8
   22144:	2102      	movs	r1, #2
   22146:	4648      	mov	r0, r9
   22148:	f001 fb31 	bl	237ae <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2214c:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   22150:	b124      	cbz	r4, 2215c <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   22152:	463a      	mov	r2, r7
   22154:	4621      	mov	r1, r4
   22156:	4648      	mov	r0, r9
   22158:	f001 fb2f 	bl	237ba <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   2215c:	2300      	movs	r3, #0
   2215e:	9300      	str	r3, [sp, #0]
   22160:	4632      	mov	r2, r6
   22162:	2105      	movs	r1, #5
   22164:	4628      	mov	r0, r5
   22166:	f7ff ffc6 	bl	220f6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2216a:	b910      	cbnz	r0, 22172 <l2cap_send_reject+0x52>
}
   2216c:	b003      	add	sp, #12
   2216e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   22172:	4630      	mov	r0, r6
   22174:	f001 fad1 	bl	2371a <net_buf_unref>
}
   22178:	e7f8      	b.n	2216c <l2cap_send_reject+0x4c>

0002217a <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2217a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2217c:	b110      	cbz	r0, 22184 <bt_l2cap_le_lookup_tx_cid+0xa>
   2217e:	3808      	subs	r0, #8
   22180:	e000      	b.n	22184 <bt_l2cap_le_lookup_tx_cid+0xa>
   22182:	3808      	subs	r0, #8
   22184:	b148      	cbz	r0, 2219a <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   22186:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   2218a:	428b      	cmp	r3, r1
   2218c:	d005      	beq.n	2219a <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2218e:	f110 0308 	adds.w	r3, r0, #8
   22192:	d003      	beq.n	2219c <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   22194:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22196:	2800      	cmp	r0, #0
   22198:	d1f3      	bne.n	22182 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   2219a:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2219c:	4618      	mov	r0, r3
   2219e:	e7f1      	b.n	22184 <bt_l2cap_le_lookup_tx_cid+0xa>

000221a0 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   221a0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   221a2:	b110      	cbz	r0, 221aa <bt_l2cap_le_lookup_rx_cid+0xa>
   221a4:	3808      	subs	r0, #8
   221a6:	e000      	b.n	221aa <bt_l2cap_le_lookup_rx_cid+0xa>
   221a8:	3808      	subs	r0, #8
   221aa:	b148      	cbz	r0, 221c0 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   221ac:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   221b0:	428b      	cmp	r3, r1
   221b2:	d005      	beq.n	221c0 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   221b4:	f110 0308 	adds.w	r3, r0, #8
   221b8:	d003      	beq.n	221c2 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   221ba:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   221bc:	2800      	cmp	r0, #0
   221be:	d1f3      	bne.n	221a8 <bt_l2cap_le_lookup_rx_cid+0x8>
}
   221c0:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   221c2:	4618      	mov	r0, r3
   221c4:	e7f1      	b.n	221aa <bt_l2cap_le_lookup_rx_cid+0xa>

000221c6 <bt_l2cap_update_conn_param>:
{
   221c6:	b570      	push	{r4, r5, r6, lr}
   221c8:	b082      	sub	sp, #8
   221ca:	4605      	mov	r5, r0
   221cc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   221ce:	f7f4 fcd1 	bl	16b74 <get_ident>
   221d2:	4602      	mov	r2, r0
   221d4:	2308      	movs	r3, #8
   221d6:	2112      	movs	r1, #18
   221d8:	2000      	movs	r0, #0
   221da:	f7f4 fdbf 	bl	16d5c <l2cap_create_le_sig_pdu>
	if (!buf) {
   221de:	b1e0      	cbz	r0, 2221a <bt_l2cap_update_conn_param+0x54>
   221e0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   221e2:	2108      	movs	r1, #8
   221e4:	4408      	add	r0, r1
   221e6:	f001 fae2 	bl	237ae <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   221ea:	8823      	ldrh	r3, [r4, #0]
   221ec:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   221ee:	8863      	ldrh	r3, [r4, #2]
   221f0:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   221f2:	88a3      	ldrh	r3, [r4, #4]
   221f4:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   221f6:	88e3      	ldrh	r3, [r4, #6]
   221f8:	80c3      	strh	r3, [r0, #6]
   221fa:	2300      	movs	r3, #0
   221fc:	9300      	str	r3, [sp, #0]
   221fe:	4632      	mov	r2, r6
   22200:	2105      	movs	r1, #5
   22202:	4628      	mov	r0, r5
   22204:	f7ff ff77 	bl	220f6 <bt_l2cap_send_cb>
	if (err) {
   22208:	4604      	mov	r4, r0
   2220a:	b910      	cbnz	r0, 22212 <bt_l2cap_update_conn_param+0x4c>
}
   2220c:	4620      	mov	r0, r4
   2220e:	b002      	add	sp, #8
   22210:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   22212:	4630      	mov	r0, r6
   22214:	f001 fa81 	bl	2371a <net_buf_unref>
		return err;
   22218:	e7f8      	b.n	2220c <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   2221a:	f06f 040b 	mvn.w	r4, #11
   2221e:	e7f5      	b.n	2220c <bt_l2cap_update_conn_param+0x46>

00022220 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   22220:	4770      	bx	lr

00022222 <att_sent>:
{
   22222:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   22224:	684b      	ldr	r3, [r1, #4]
   22226:	695b      	ldr	r3, [r3, #20]
   22228:	b10b      	cbz	r3, 2222e <att_sent+0xc>
   2222a:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   2222c:	4798      	blx	r3
}
   2222e:	bd08      	pop	{r3, pc}

00022230 <range_is_valid>:
	if (!start || !end) {
   22230:	b120      	cbz	r0, 2223c <range_is_valid+0xc>
   22232:	b119      	cbz	r1, 2223c <range_is_valid+0xc>
	if (start > end) {
   22234:	4288      	cmp	r0, r1
   22236:	d806      	bhi.n	22246 <range_is_valid+0x16>
	return true;
   22238:	2001      	movs	r0, #1
}
   2223a:	4770      	bx	lr
		if (err) {
   2223c:	b10a      	cbz	r2, 22242 <range_is_valid+0x12>
			*err = 0U;
   2223e:	2300      	movs	r3, #0
   22240:	8013      	strh	r3, [r2, #0]
		return false;
   22242:	2000      	movs	r0, #0
   22244:	4770      	bx	lr
		if (err) {
   22246:	b102      	cbz	r2, 2224a <range_is_valid+0x1a>
			*err = start;
   22248:	8010      	strh	r0, [r2, #0]
		return false;
   2224a:	2000      	movs	r0, #0
   2224c:	4770      	bx	lr

0002224e <err_to_att>:
	if (err < 0 && err >= -0xff) {
   2224e:	f110 0fff 	cmn.w	r0, #255	; 0xff
   22252:	d201      	bcs.n	22258 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   22254:	200e      	movs	r0, #14
}
   22256:	4770      	bx	lr
		return -err;
   22258:	4240      	negs	r0, r0
   2225a:	b2c0      	uxtb	r0, r0
   2225c:	4770      	bx	lr

0002225e <attr_read_type_cb>:
{
   2225e:	b410      	push	{r4}
	if (!data->rsp->len) {
   22260:	68d4      	ldr	r4, [r2, #12]
   22262:	7823      	ldrb	r3, [r4, #0]
   22264:	b923      	cbnz	r3, 22270 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   22266:	3102      	adds	r1, #2
   22268:	7021      	strb	r1, [r4, #0]
	return true;
   2226a:	2001      	movs	r0, #1
}
   2226c:	bc10      	pop	{r4}
   2226e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   22270:	3102      	adds	r1, #2
   22272:	428b      	cmp	r3, r1
   22274:	d005      	beq.n	22282 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   22276:	8983      	ldrh	r3, [r0, #12]
   22278:	3b02      	subs	r3, #2
   2227a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2227c:	2000      	movs	r0, #0
   2227e:	6110      	str	r0, [r2, #16]
		return false;
   22280:	e7f4      	b.n	2226c <attr_read_type_cb+0xe>
	return true;
   22282:	2001      	movs	r0, #1
   22284:	e7f2      	b.n	2226c <attr_read_type_cb+0xe>

00022286 <attr_read_group_cb>:
	if (!data->rsp->len) {
   22286:	68d0      	ldr	r0, [r2, #12]
   22288:	7803      	ldrb	r3, [r0, #0]
   2228a:	b91b      	cbnz	r3, 22294 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2228c:	3104      	adds	r1, #4
   2228e:	7001      	strb	r1, [r0, #0]
	return true;
   22290:	2001      	movs	r0, #1
   22292:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   22294:	3104      	adds	r1, #4
   22296:	428b      	cmp	r3, r1
   22298:	d006      	beq.n	222a8 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2229a:	6891      	ldr	r1, [r2, #8]
   2229c:	898b      	ldrh	r3, [r1, #12]
   2229e:	3b04      	subs	r3, #4
   222a0:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   222a2:	2000      	movs	r0, #0
   222a4:	6110      	str	r0, [r2, #16]
		return false;
   222a6:	4770      	bx	lr
	return true;
   222a8:	2001      	movs	r0, #1
}
   222aa:	4770      	bx	lr

000222ac <att_prepare_write_req>:
}
   222ac:	2006      	movs	r0, #6
   222ae:	4770      	bx	lr

000222b0 <att_exec_write_req>:
}
   222b0:	2006      	movs	r0, #6
   222b2:	4770      	bx	lr

000222b4 <att_op_get_type>:
	switch (op) {
   222b4:	1e43      	subs	r3, r0, #1
   222b6:	2bd1      	cmp	r3, #209	; 0xd1
   222b8:	d874      	bhi.n	223a4 <att_op_get_type+0xf0>
   222ba:	e8df f003 	tbb	[pc, r3]
   222be:	696d      	.short	0x696d
   222c0:	696d696d 	.word	0x696d696d
   222c4:	696d696d 	.word	0x696d696d
   222c8:	696d696d 	.word	0x696d696d
   222cc:	696d696d 	.word	0x696d696d
   222d0:	6973736d 	.word	0x6973736d
   222d4:	736d696d 	.word	0x736d696d
   222d8:	7871736f 	.word	0x7871736f
   222dc:	73737373 	.word	0x73737373
   222e0:	73737373 	.word	0x73737373
   222e4:	73737373 	.word	0x73737373
   222e8:	73737373 	.word	0x73737373
   222ec:	73737373 	.word	0x73737373
   222f0:	73737373 	.word	0x73737373
   222f4:	73737373 	.word	0x73737373
   222f8:	73737373 	.word	0x73737373
   222fc:	73737373 	.word	0x73737373
   22300:	73737373 	.word	0x73737373
   22304:	73737373 	.word	0x73737373
   22308:	73737373 	.word	0x73737373
   2230c:	6b737373 	.word	0x6b737373
   22310:	73737373 	.word	0x73737373
   22314:	73737373 	.word	0x73737373
   22318:	73737373 	.word	0x73737373
   2231c:	73737373 	.word	0x73737373
   22320:	73737373 	.word	0x73737373
   22324:	73737373 	.word	0x73737373
   22328:	73737373 	.word	0x73737373
   2232c:	73737373 	.word	0x73737373
   22330:	73737373 	.word	0x73737373
   22334:	73737373 	.word	0x73737373
   22338:	73737373 	.word	0x73737373
   2233c:	73737373 	.word	0x73737373
   22340:	73737373 	.word	0x73737373
   22344:	73737373 	.word	0x73737373
   22348:	73737373 	.word	0x73737373
   2234c:	73737373 	.word	0x73737373
   22350:	73737373 	.word	0x73737373
   22354:	73737373 	.word	0x73737373
   22358:	73737373 	.word	0x73737373
   2235c:	73737373 	.word	0x73737373
   22360:	73737373 	.word	0x73737373
   22364:	73737373 	.word	0x73737373
   22368:	73737373 	.word	0x73737373
   2236c:	73737373 	.word	0x73737373
   22370:	73737373 	.word	0x73737373
   22374:	73737373 	.word	0x73737373
   22378:	73737373 	.word	0x73737373
   2237c:	73737373 	.word	0x73737373
   22380:	73737373 	.word	0x73737373
   22384:	73737373 	.word	0x73737373
   22388:	73737373 	.word	0x73737373
   2238c:	6b737373 	.word	0x6b737373
{
   22390:	2001      	movs	r0, #1
   22392:	4770      	bx	lr
		return ATT_COMMAND;
   22394:	2000      	movs	r0, #0
   22396:	4770      	bx	lr
		return ATT_RESPONSE;
   22398:	2002      	movs	r0, #2
   2239a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2239c:	2003      	movs	r0, #3
   2239e:	4770      	bx	lr
		return ATT_INDICATION;
   223a0:	2005      	movs	r0, #5
   223a2:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   223a4:	f010 0f40 	tst.w	r0, #64	; 0x40
   223a8:	d103      	bne.n	223b2 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   223aa:	2006      	movs	r0, #6
   223ac:	4770      	bx	lr
		return ATT_CONFIRMATION;
   223ae:	2004      	movs	r0, #4
   223b0:	4770      	bx	lr
		return ATT_COMMAND;
   223b2:	2000      	movs	r0, #0
}
   223b4:	4770      	bx	lr

000223b6 <att_chan_attach>:
{
   223b6:	b538      	push	{r3, r4, r5, lr}
   223b8:	4604      	mov	r4, r0
   223ba:	460d      	mov	r5, r1
	return list->head;
   223bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   223be:	b143      	cbz	r3, 223d2 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   223c0:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   223c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   223c6:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   223ca:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   223cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   223ce:	b122      	cbz	r2, 223da <att_chan_attach+0x24>
}
   223d0:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   223d2:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   223d4:	f002 f9f7 	bl	247c6 <z_impl_k_queue_init>
}
   223d8:	e7f2      	b.n	223c0 <att_chan_attach+0xa>
	list->tail = node;
   223da:	62a3      	str	r3, [r4, #40]	; 0x28
}
   223dc:	e7f8      	b.n	223d0 <att_chan_attach+0x1a>

000223de <chan_req_send>:
{
   223de:	b538      	push	{r3, r4, r5, lr}
   223e0:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   223e2:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   223e6:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   223e8:	2200      	movs	r2, #0
	while (buf) {
   223ea:	b11b      	cbz	r3, 223f4 <chan_req_send+0x16>
		bytes += buf->len;
   223ec:	899c      	ldrh	r4, [r3, #12]
   223ee:	4422      	add	r2, r4
		buf = buf->frags;
   223f0:	681b      	ldr	r3, [r3, #0]
   223f2:	e7fa      	b.n	223ea <chan_req_send+0xc>
   223f4:	4291      	cmp	r1, r2
   223f6:	d30a      	bcc.n	2240e <chan_req_send+0x30>
	chan->req = req;
   223f8:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
	buf = req->buf;
   223fc:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   223fe:	2200      	movs	r2, #0
   22400:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   22402:	4621      	mov	r1, r4
   22404:	f7f4 ff08 	bl	17218 <chan_send>
	if (err) {
   22408:	b100      	cbz	r0, 2240c <chan_req_send+0x2e>
		req->buf = buf;
   2240a:	60ac      	str	r4, [r5, #8]
}
   2240c:	bd38      	pop	{r3, r4, r5, pc}
		return -EMSGSIZE;
   2240e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22412:	e7fb      	b.n	2240c <chan_req_send+0x2e>

00022414 <bt_att_chan_req_send>:
{
   22414:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   22416:	f7ff ffe2 	bl	223de <chan_req_send>
}
   2241a:	bd08      	pop	{r3, pc}

0002241c <bt_att_status>:
{
   2241c:	b538      	push	{r3, r4, r5, lr}
   2241e:	f3bf 8f5b 	dmb	ish
   22422:	680b      	ldr	r3, [r1, #0]
   22424:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   22428:	f013 0f01 	tst.w	r3, #1
   2242c:	d007      	beq.n	2243e <bt_att_status+0x22>
   2242e:	4604      	mov	r4, r0
   22430:	3808      	subs	r0, #8
	if (!chan->att) {
   22432:	f854 3c08 	ldr.w	r3, [r4, #-8]
   22436:	b113      	cbz	r3, 2243e <bt_att_status+0x22>
	if (chan->req) {
   22438:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   2243c:	b102      	cbz	r2, 22440 <bt_att_status+0x24>
}
   2243e:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   22440:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   22442:	2d00      	cmp	r5, #0
   22444:	d0fb      	beq.n	2243e <bt_att_status+0x22>
	return node->next;
   22446:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   22448:	605a      	str	r2, [r3, #4]
	return list->tail;
   2244a:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2244c:	42a9      	cmp	r1, r5
   2244e:	d00e      	beq.n	2246e <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22450:	4629      	mov	r1, r5
   22452:	f7ff ffdf 	bl	22414 <bt_att_chan_req_send>
   22456:	2800      	cmp	r0, #0
   22458:	daf1      	bge.n	2243e <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   2245a:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   2245e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   22460:	602a      	str	r2, [r5, #0]
	list->head = node;
   22462:	605d      	str	r5, [r3, #4]
	return list->tail;
   22464:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   22466:	2a00      	cmp	r2, #0
   22468:	d1e9      	bne.n	2243e <bt_att_status+0x22>
	list->tail = node;
   2246a:	609d      	str	r5, [r3, #8]
}
   2246c:	e7e7      	b.n	2243e <bt_att_status+0x22>
	list->tail = node;
   2246e:	609a      	str	r2, [r3, #8]
}
   22470:	e7ee      	b.n	22450 <bt_att_status+0x34>

00022472 <att_req_send_process>:
{
   22472:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   22474:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   22476:	2e00      	cmp	r6, #0
   22478:	d038      	beq.n	224ec <att_req_send_process+0x7a>
   2247a:	4605      	mov	r5, r0
	return node->next;
   2247c:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2247e:	6043      	str	r3, [r0, #4]
	return list->tail;
   22480:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22482:	4296      	cmp	r6, r2
   22484:	d00d      	beq.n	224a2 <att_req_send_process+0x30>
	return list->head;
   22486:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22488:	b198      	cbz	r0, 224b2 <att_req_send_process+0x40>
   2248a:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2248e:	d012      	beq.n	224b6 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22490:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   22494:	d014      	beq.n	224c0 <att_req_send_process+0x4e>
	return node->next;
   22496:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   2249a:	b18c      	cbz	r4, 224c0 <att_req_send_process+0x4e>
   2249c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   224a0:	e00e      	b.n	224c0 <att_req_send_process+0x4e>
	list->tail = node;
   224a2:	6083      	str	r3, [r0, #8]
}
   224a4:	e7ef      	b.n	22486 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   224a6:	4631      	mov	r1, r6
   224a8:	f7ff ffb4 	bl	22414 <bt_att_chan_req_send>
   224ac:	2800      	cmp	r0, #0
   224ae:	db0c      	blt.n	224ca <att_req_send_process+0x58>
   224b0:	e01c      	b.n	224ec <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   224b2:	4604      	mov	r4, r0
   224b4:	e004      	b.n	224c0 <att_req_send_process+0x4e>
   224b6:	4604      	mov	r4, r0
   224b8:	e002      	b.n	224c0 <att_req_send_process+0x4e>
   224ba:	4623      	mov	r3, r4
   224bc:	4620      	mov	r0, r4
   224be:	461c      	mov	r4, r3
   224c0:	b178      	cbz	r0, 224e2 <att_req_send_process+0x70>
		if (!chan->req) {
   224c2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   224c6:	2b00      	cmp	r3, #0
   224c8:	d0ed      	beq.n	224a6 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   224ca:	2c00      	cmp	r4, #0
   224cc:	d0f5      	beq.n	224ba <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   224ce:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   224d2:	d0f3      	beq.n	224bc <att_req_send_process+0x4a>
	return node->next;
   224d4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   224d8:	2b00      	cmp	r3, #0
   224da:	d0ef      	beq.n	224bc <att_req_send_process+0x4a>
   224dc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   224e0:	e7ec      	b.n	224bc <att_req_send_process+0x4a>
	return list->head;
   224e2:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   224e4:	6033      	str	r3, [r6, #0]
	list->head = node;
   224e6:	606e      	str	r6, [r5, #4]
	return list->tail;
   224e8:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   224ea:	b103      	cbz	r3, 224ee <att_req_send_process+0x7c>
}
   224ec:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   224ee:	60ae      	str	r6, [r5, #8]
}
   224f0:	e7fc      	b.n	224ec <att_req_send_process+0x7a>

000224f2 <bt_att_chan_send>:
{
   224f2:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   224f4:	f7f4 fe90 	bl	17218 <chan_send>
}
   224f8:	bd08      	pop	{r3, pc}

000224fa <chan_req_sent>:
{
   224fa:	b508      	push	{r3, lr}
	if (chan->req) {
   224fc:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   22500:	b133      	cbz	r3, 22510 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   22502:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22506:	2300      	movs	r3, #0
   22508:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2250c:	f7f9 fd20 	bl	1bf50 <k_work_reschedule>
}
   22510:	bd08      	pop	{r3, pc}

00022512 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   22512:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22514:	f3bf 8f5b 	dmb	ish
   22518:	e850 3f00 	ldrex	r3, [r0]
   2251c:	f023 0302 	bic.w	r3, r3, #2
   22520:	e840 3200 	strex	r2, r3, [r0]
   22524:	2a00      	cmp	r2, #0
   22526:	d1f7      	bne.n	22518 <chan_cfm_sent+0x6>
   22528:	f3bf 8f5b 	dmb	ish
}
   2252c:	4770      	bx	lr

0002252e <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   2252e:	30f0      	adds	r0, #240	; 0xf0
   22530:	f3bf 8f5b 	dmb	ish
   22534:	e850 3f00 	ldrex	r3, [r0]
   22538:	f023 0301 	bic.w	r3, r3, #1
   2253c:	e840 3200 	strex	r2, r3, [r0]
   22540:	2a00      	cmp	r2, #0
   22542:	d1f7      	bne.n	22534 <chan_rsp_sent+0x6>
   22544:	f3bf 8f5b 	dmb	ish
}
   22548:	4770      	bx	lr

0002254a <process_queue>:
{
   2254a:	b570      	push	{r4, r5, r6, lr}
   2254c:	4605      	mov	r5, r0
   2254e:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   22550:	2200      	movs	r2, #0
   22552:	2300      	movs	r3, #0
   22554:	4608      	mov	r0, r1
   22556:	f001 f8b4 	bl	236c2 <net_buf_get>
	if (buf) {
   2255a:	b170      	cbz	r0, 2257a <process_queue+0x30>
   2255c:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   2255e:	2200      	movs	r2, #0
   22560:	4601      	mov	r1, r0
   22562:	4628      	mov	r0, r5
   22564:	f7f4 fe58 	bl	17218 <chan_send>
		if (err) {
   22568:	4605      	mov	r5, r0
   2256a:	b908      	cbnz	r0, 22570 <process_queue+0x26>
}
   2256c:	4628      	mov	r0, r5
   2256e:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   22570:	4631      	mov	r1, r6
   22572:	4620      	mov	r0, r4
   22574:	f002 f93f 	bl	247f6 <k_queue_prepend>
			return err;
   22578:	e7f8      	b.n	2256c <process_queue+0x22>
	return -ENOENT;
   2257a:	f06f 0501 	mvn.w	r5, #1
   2257e:	e7f5      	b.n	2256c <process_queue+0x22>

00022580 <bt_att_sent>:
{
   22580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22582:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   22584:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   22588:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   2258c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   22590:	b10b      	cbz	r3, 22596 <bt_att_sent+0x16>
		chan->sent(chan);
   22592:	4630      	mov	r0, r6
   22594:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   22596:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   2259a:	f3bf 8f5b 	dmb	ish
   2259e:	e853 2f00 	ldrex	r2, [r3]
   225a2:	f022 0210 	bic.w	r2, r2, #16
   225a6:	e843 2100 	strex	r1, r2, [r3]
   225aa:	2900      	cmp	r1, #0
   225ac:	d1f7      	bne.n	2259e <bt_att_sent+0x1e>
   225ae:	f3bf 8f5b 	dmb	ish
	if (!att) {
   225b2:	b145      	cbz	r5, 225c6 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   225b4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   225b8:	b133      	cbz	r3, 225c8 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   225ba:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   225be:	4630      	mov	r0, r6
   225c0:	f7ff ffc3 	bl	2254a <process_queue>
	if (!err) {
   225c4:	b9c0      	cbnz	r0, 225f8 <bt_att_sent+0x78>
}
   225c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   225c8:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   225ca:	2f00      	cmp	r7, #0
   225cc:	d0f5      	beq.n	225ba <bt_att_sent+0x3a>
	return node->next;
   225ce:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   225d0:	606b      	str	r3, [r5, #4]
	return list->tail;
   225d2:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   225d4:	42ba      	cmp	r2, r7
   225d6:	d00d      	beq.n	225f4 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   225d8:	4639      	mov	r1, r7
   225da:	4630      	mov	r0, r6
   225dc:	f7ff feff 	bl	223de <chan_req_send>
   225e0:	2800      	cmp	r0, #0
   225e2:	daf0      	bge.n	225c6 <bt_att_sent+0x46>
	return list->head;
   225e4:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   225e6:	603b      	str	r3, [r7, #0]
	list->head = node;
   225e8:	606f      	str	r7, [r5, #4]
	return list->tail;
   225ea:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   225ec:	2b00      	cmp	r3, #0
   225ee:	d1e4      	bne.n	225ba <bt_att_sent+0x3a>
	list->tail = node;
   225f0:	60af      	str	r7, [r5, #8]
}
   225f2:	e7e2      	b.n	225ba <bt_att_sent+0x3a>
	list->tail = node;
   225f4:	60ab      	str	r3, [r5, #8]
}
   225f6:	e7ef      	b.n	225d8 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   225f8:	f105 010c 	add.w	r1, r5, #12
   225fc:	4630      	mov	r0, r6
   225fe:	f7ff ffa4 	bl	2254a <process_queue>
   22602:	e7e0      	b.n	225c6 <bt_att_sent+0x46>

00022604 <att_send_process>:
{
   22604:	b570      	push	{r4, r5, r6, lr}
   22606:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   22608:	2200      	movs	r2, #0
   2260a:	2300      	movs	r3, #0
   2260c:	300c      	adds	r0, #12
   2260e:	f001 f858 	bl	236c2 <net_buf_get>
	if (!buf) {
   22612:	b360      	cbz	r0, 2266e <att_send_process+0x6a>
   22614:	4605      	mov	r5, r0
	return list->head;
   22616:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22618:	b158      	cbz	r0, 22632 <att_send_process+0x2e>
   2261a:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2261e:	d00c      	beq.n	2263a <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22620:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   22624:	d006      	beq.n	22634 <att_send_process+0x30>
	return node->next;
   22626:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   2262a:	b11c      	cbz	r4, 22634 <att_send_process+0x30>
   2262c:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   22630:	e000      	b.n	22634 <att_send_process+0x30>
   22632:	4604      	mov	r4, r0
   22634:	f06f 0301 	mvn.w	r3, #1
   22638:	e004      	b.n	22644 <att_send_process+0x40>
   2263a:	4604      	mov	r4, r0
   2263c:	e7fa      	b.n	22634 <att_send_process+0x30>
   2263e:	4622      	mov	r2, r4
   22640:	4620      	mov	r0, r4
   22642:	4614      	mov	r4, r2
   22644:	b188      	cbz	r0, 2266a <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   22646:	2200      	movs	r2, #0
   22648:	4629      	mov	r1, r5
   2264a:	f7ff ff52 	bl	224f2 <bt_att_chan_send>
		if (err >= 0) {
   2264e:	1e03      	subs	r3, r0, #0
   22650:	da0b      	bge.n	2266a <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22652:	2c00      	cmp	r4, #0
   22654:	d0f3      	beq.n	2263e <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22656:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   2265a:	d0f1      	beq.n	22640 <att_send_process+0x3c>
	return node->next;
   2265c:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   22660:	2a00      	cmp	r2, #0
   22662:	d0ed      	beq.n	22640 <att_send_process+0x3c>
   22664:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   22668:	e7ea      	b.n	22640 <att_send_process+0x3c>
	if (err < 0) {
   2266a:	2b00      	cmp	r3, #0
   2266c:	db00      	blt.n	22670 <att_send_process+0x6c>
}
   2266e:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   22670:	4629      	mov	r1, r5
   22672:	f106 000c 	add.w	r0, r6, #12
   22676:	f002 f8be 	bl	247f6 <k_queue_prepend>
   2267a:	e7f8      	b.n	2266e <att_send_process+0x6a>

0002267c <write_cb>:
{
   2267c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2267e:	b083      	sub	sp, #12
   22680:	4606      	mov	r6, r0
   22682:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   22684:	222a      	movs	r2, #42	; 0x2a
   22686:	4601      	mov	r1, r0
   22688:	6820      	ldr	r0, [r4, #0]
   2268a:	f000 fe4d 	bl	23328 <bt_gatt_check_perm>
   2268e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   22690:	b9e8      	cbnz	r0, 226ce <write_cb+0x52>
   22692:	4605      	mov	r5, r0
	if (!data->req) {
   22694:	7a23      	ldrb	r3, [r4, #8]
   22696:	b1a3      	cbz	r3, 226c2 <write_cb+0x46>
	uint8_t flags = 0U;
   22698:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
   2269a:	68b7      	ldr	r7, [r6, #8]
   2269c:	9301      	str	r3, [sp, #4]
   2269e:	8a63      	ldrh	r3, [r4, #18]
   226a0:	9300      	str	r3, [sp, #0]
   226a2:	8a23      	ldrh	r3, [r4, #16]
   226a4:	68e2      	ldr	r2, [r4, #12]
   226a6:	4631      	mov	r1, r6
   226a8:	6820      	ldr	r0, [r4, #0]
   226aa:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   226ac:	2800      	cmp	r0, #0
   226ae:	db02      	blt.n	226b6 <write_cb+0x3a>
   226b0:	8a23      	ldrh	r3, [r4, #16]
   226b2:	4298      	cmp	r0, r3
   226b4:	d007      	beq.n	226c6 <write_cb+0x4a>
		data->err = err_to_att(write);
   226b6:	f7ff fdca 	bl	2224e <err_to_att>
   226ba:	7520      	strb	r0, [r4, #20]
}
   226bc:	4628      	mov	r0, r5
   226be:	b003      	add	sp, #12
   226c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
   226c2:	2302      	movs	r3, #2
   226c4:	e7e9      	b.n	2269a <write_cb+0x1e>
	data->err = 0U;
   226c6:	2300      	movs	r3, #0
   226c8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   226ca:	2501      	movs	r5, #1
   226cc:	e7f6      	b.n	226bc <write_cb+0x40>
		return BT_GATT_ITER_STOP;
   226ce:	2500      	movs	r5, #0
   226d0:	e7f4      	b.n	226bc <write_cb+0x40>

000226d2 <bt_att_chan_send_rsp>:
{
   226d2:	b538      	push	{r3, r4, r5, lr}
   226d4:	4604      	mov	r4, r0
   226d6:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   226d8:	f7ff ff0b 	bl	224f2 <bt_att_chan_send>
	if (err) {
   226dc:	b900      	cbnz	r0, 226e0 <bt_att_chan_send_rsp+0xe>
}
   226de:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   226e0:	4629      	mov	r1, r5
   226e2:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   226e6:	f001 f80b 	bl	23700 <net_buf_put>
}
   226ea:	e7f8      	b.n	226de <bt_att_chan_send_rsp+0xc>

000226ec <att_chan_read>:
{
   226ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226f0:	b085      	sub	sp, #20
   226f2:	4680      	mov	r8, r0
   226f4:	4689      	mov	r9, r1
   226f6:	9202      	str	r2, [sp, #8]
   226f8:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   226fa:	6881      	ldr	r1, [r0, #8]
   226fc:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   226fe:	f8b0 0086 	ldrh.w	r0, [r0, #134]	; 0x86
	while (buf) {
   22702:	4613      	mov	r3, r2
	size_t bytes = 0;
   22704:	2200      	movs	r2, #0
	while (buf) {
   22706:	b11b      	cbz	r3, 22710 <att_chan_read+0x24>
		bytes += buf->len;
   22708:	8999      	ldrh	r1, [r3, #12]
   2270a:	440a      	add	r2, r1
		buf = buf->frags;
   2270c:	681b      	ldr	r3, [r3, #0]
   2270e:	e7fa      	b.n	22706 <att_chan_read+0x1a>
   22710:	4290      	cmp	r0, r2
   22712:	d804      	bhi.n	2271e <att_chan_read+0x32>
		return 0;
   22714:	2400      	movs	r4, #0
}
   22716:	4620      	mov	r0, r4
   22718:	b005      	add	sp, #20
   2271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   2271e:	9802      	ldr	r0, [sp, #8]
   22720:	f001 f825 	bl	2376e <net_buf_frag_last>
   22724:	4607      	mov	r7, r0
	size_t len, total = 0;
   22726:	f04f 0a00 	mov.w	sl, #0
   2272a:	e083      	b.n	22834 <att_chan_read+0x148>
		bytes += buf->len;
   2272c:	8999      	ldrh	r1, [r3, #12]
   2272e:	440a      	add	r2, r1
		buf = buf->frags;
   22730:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22732:	2b00      	cmp	r3, #0
   22734:	d1fa      	bne.n	2272c <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22736:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   22738:	f107 0608 	add.w	r6, r7, #8
   2273c:	4630      	mov	r0, r6
   2273e:	f001 f872 	bl	23826 <net_buf_simple_tailroom>
   22742:	4284      	cmp	r4, r0
   22744:	d32c      	bcc.n	227a0 <att_chan_read+0xb4>
   22746:	4630      	mov	r0, r6
   22748:	f001 f86d 	bl	23826 <net_buf_simple_tailroom>
   2274c:	4606      	mov	r6, r0
		if (!len) {
   2274e:	2e00      	cmp	r6, #0
   22750:	d032      	beq.n	227b8 <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   22752:	f8d9 4004 	ldr.w	r4, [r9, #4]
   22756:	68b9      	ldr	r1, [r7, #8]
   22758:	89ba      	ldrh	r2, [r7, #12]
   2275a:	9500      	str	r5, [sp, #0]
   2275c:	b2b3      	uxth	r3, r6
   2275e:	440a      	add	r2, r1
   22760:	4649      	mov	r1, r9
   22762:	9803      	ldr	r0, [sp, #12]
   22764:	47a0      	blx	r4
		if (read < 0) {
   22766:	1e04      	subs	r4, r0, #0
   22768:	db5a      	blt.n	22820 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   2276a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2276c:	b12b      	cbz	r3, 2277a <att_chan_read+0x8e>
   2276e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22770:	4621      	mov	r1, r4
   22772:	4638      	mov	r0, r7
   22774:	4798      	blx	r3
   22776:	2800      	cmp	r0, #0
   22778:	d061      	beq.n	2283e <att_chan_read+0x152>
		net_buf_add(frag, read);
   2277a:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   2277c:	4621      	mov	r1, r4
   2277e:	f107 0008 	add.w	r0, r7, #8
   22782:	f001 f814 	bl	237ae <net_buf_simple_add>
		total += read;
   22786:	44a2      	add	sl, r4
		offset += read;
   22788:	4425      	add	r5, r4
   2278a:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2278c:	f8b8 0086 	ldrh.w	r0, [r8, #134]	; 0x86
   22790:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   22792:	2200      	movs	r2, #0
	while (buf) {
   22794:	2b00      	cmp	r3, #0
   22796:	d049      	beq.n	2282c <att_chan_read+0x140>
		bytes += buf->len;
   22798:	8999      	ldrh	r1, [r3, #12]
   2279a:	440a      	add	r2, r1
		buf = buf->frags;
   2279c:	681b      	ldr	r3, [r3, #0]
   2279e:	e7f9      	b.n	22794 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   227a0:	f8b8 6086 	ldrh.w	r6, [r8, #134]	; 0x86
	while (buf) {
   227a4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   227a6:	2200      	movs	r2, #0
	while (buf) {
   227a8:	e002      	b.n	227b0 <att_chan_read+0xc4>
		bytes += buf->len;
   227aa:	8999      	ldrh	r1, [r3, #12]
   227ac:	440a      	add	r2, r1
		buf = buf->frags;
   227ae:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   227b0:	2b00      	cmp	r3, #0
   227b2:	d1fa      	bne.n	227aa <att_chan_read+0xbe>
   227b4:	1ab6      	subs	r6, r6, r2
   227b6:	e7ca      	b.n	2274e <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   227b8:	9b02      	ldr	r3, [sp, #8]
   227ba:	7998      	ldrb	r0, [r3, #6]
   227bc:	f7f6 fb6c 	bl	18e98 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   227c0:	2200      	movs	r2, #0
   227c2:	2300      	movs	r3, #0
   227c4:	f000 ff76 	bl	236b4 <net_buf_alloc_fixed>
			if (!frag) {
   227c8:	4607      	mov	r7, r0
   227ca:	b150      	cbz	r0, 227e2 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   227cc:	4601      	mov	r1, r0
   227ce:	f8dd b008 	ldr.w	fp, [sp, #8]
   227d2:	4658      	mov	r0, fp
   227d4:	f000 ffdc 	bl	23790 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   227d8:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	size_t bytes = 0;
   227dc:	4632      	mov	r2, r6
	while (buf) {
   227de:	465b      	mov	r3, fp
   227e0:	e004      	b.n	227ec <att_chan_read+0x100>
				return total;
   227e2:	4654      	mov	r4, sl
   227e4:	e797      	b.n	22716 <att_chan_read+0x2a>
		bytes += buf->len;
   227e6:	8999      	ldrh	r1, [r3, #12]
   227e8:	440a      	add	r2, r1
		buf = buf->frags;
   227ea:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   227ec:	2b00      	cmp	r3, #0
   227ee:	d1fa      	bne.n	227e6 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   227f0:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   227f2:	f107 0b08 	add.w	fp, r7, #8
   227f6:	4658      	mov	r0, fp
   227f8:	f001 f815 	bl	23826 <net_buf_simple_tailroom>
   227fc:	4284      	cmp	r4, r0
   227fe:	d304      	bcc.n	2280a <att_chan_read+0x11e>
   22800:	4658      	mov	r0, fp
   22802:	f001 f810 	bl	23826 <net_buf_simple_tailroom>
   22806:	4606      	mov	r6, r0
   22808:	e7a3      	b.n	22752 <att_chan_read+0x66>
   2280a:	f8b8 1086 	ldrh.w	r1, [r8, #134]	; 0x86
	while (buf) {
   2280e:	9b02      	ldr	r3, [sp, #8]
   22810:	e002      	b.n	22818 <att_chan_read+0x12c>
		bytes += buf->len;
   22812:	899a      	ldrh	r2, [r3, #12]
   22814:	4416      	add	r6, r2
		buf = buf->frags;
   22816:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22818:	2b00      	cmp	r3, #0
   2281a:	d1fa      	bne.n	22812 <att_chan_read+0x126>
   2281c:	1b8e      	subs	r6, r1, r6
   2281e:	e798      	b.n	22752 <att_chan_read+0x66>
			if (total) {
   22820:	f1ba 0f00 	cmp.w	sl, #0
   22824:	f43f af77 	beq.w	22716 <att_chan_read+0x2a>
				return total;
   22828:	4654      	mov	r4, sl
   2282a:	e774      	b.n	22716 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2282c:	4290      	cmp	r0, r2
   2282e:	d906      	bls.n	2283e <att_chan_read+0x152>
   22830:	45b3      	cmp	fp, r6
   22832:	d104      	bne.n	2283e <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22834:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   22838:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2283a:	2200      	movs	r2, #0
	while (buf) {
   2283c:	e779      	b.n	22732 <att_chan_read+0x46>
	return total;
   2283e:	4654      	mov	r4, sl
   22840:	e769      	b.n	22716 <att_chan_read+0x2a>

00022842 <read_cb>:
{
   22842:	b5f0      	push	{r4, r5, r6, r7, lr}
   22844:	b083      	sub	sp, #12
   22846:	4606      	mov	r6, r0
   22848:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   2284a:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   2284c:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   2284e:	2300      	movs	r3, #0
   22850:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   22852:	2215      	movs	r2, #21
   22854:	4631      	mov	r1, r6
   22856:	f000 fd67 	bl	23328 <bt_gatt_check_perm>
   2285a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2285c:	b118      	cbz	r0, 22866 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   2285e:	2500      	movs	r5, #0
}
   22860:	4628      	mov	r0, r5
   22862:	b003      	add	sp, #12
   22864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22866:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   22868:	2300      	movs	r3, #0
   2286a:	9301      	str	r3, [sp, #4]
   2286c:	9300      	str	r3, [sp, #0]
   2286e:	88a3      	ldrh	r3, [r4, #4]
   22870:	68a2      	ldr	r2, [r4, #8]
   22872:	4631      	mov	r1, r6
   22874:	4638      	mov	r0, r7
   22876:	f7ff ff39 	bl	226ec <att_chan_read>
	if (ret < 0) {
   2287a:	2800      	cmp	r0, #0
   2287c:	db01      	blt.n	22882 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   2287e:	2501      	movs	r5, #1
   22880:	e7ee      	b.n	22860 <read_cb+0x1e>
		data->err = err_to_att(ret);
   22882:	f7ff fce4 	bl	2224e <err_to_att>
   22886:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   22888:	e7ea      	b.n	22860 <read_cb+0x1e>

0002288a <find_info_cb>:
{
   2288a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2288e:	4606      	mov	r6, r0
   22890:	460f      	mov	r7, r1
   22892:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   22894:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   22898:	6893      	ldr	r3, [r2, #8]
   2289a:	b14b      	cbz	r3, 228b0 <find_info_cb+0x26>
	switch (data->rsp->format) {
   2289c:	68a3      	ldr	r3, [r4, #8]
   2289e:	781d      	ldrb	r5, [r3, #0]
   228a0:	2d01      	cmp	r5, #1
   228a2:	d013      	beq.n	228cc <find_info_cb+0x42>
   228a4:	2d02      	cmp	r5, #2
   228a6:	d02d      	beq.n	22904 <find_info_cb+0x7a>
   228a8:	2500      	movs	r5, #0
}
   228aa:	4628      	mov	r0, r5
   228ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   228b0:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   228b2:	2101      	movs	r1, #1
   228b4:	3008      	adds	r0, #8
   228b6:	f000 ff7a 	bl	237ae <net_buf_simple_add>
   228ba:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   228bc:	6833      	ldr	r3, [r6, #0]
   228be:	781b      	ldrb	r3, [r3, #0]
   228c0:	b913      	cbnz	r3, 228c8 <find_info_cb+0x3e>
   228c2:	2301      	movs	r3, #1
   228c4:	7003      	strb	r3, [r0, #0]
   228c6:	e7e9      	b.n	2289c <find_info_cb+0x12>
   228c8:	2302      	movs	r3, #2
   228ca:	e7fb      	b.n	228c4 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   228cc:	6833      	ldr	r3, [r6, #0]
   228ce:	f893 9000 	ldrb.w	r9, [r3]
   228d2:	f1b9 0f00 	cmp.w	r9, #0
   228d6:	d001      	beq.n	228dc <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   228d8:	2500      	movs	r5, #0
   228da:	e7e6      	b.n	228aa <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   228dc:	6860      	ldr	r0, [r4, #4]
   228de:	2104      	movs	r1, #4
   228e0:	3008      	adds	r0, #8
   228e2:	f000 ff64 	bl	237ae <net_buf_simple_add>
   228e6:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   228e8:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   228ea:	6832      	ldr	r2, [r6, #0]
   228ec:	68e3      	ldr	r3, [r4, #12]
   228ee:	8852      	ldrh	r2, [r2, #2]
   228f0:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   228f2:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   228f6:	6862      	ldr	r2, [r4, #4]
   228f8:	8992      	ldrh	r2, [r2, #12]
   228fa:	1a9b      	subs	r3, r3, r2
   228fc:	2b04      	cmp	r3, #4
   228fe:	d8d4      	bhi.n	228aa <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   22900:	464d      	mov	r5, r9
   22902:	e7d2      	b.n	228aa <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   22904:	6833      	ldr	r3, [r6, #0]
   22906:	781b      	ldrb	r3, [r3, #0]
   22908:	2b02      	cmp	r3, #2
   2290a:	d001      	beq.n	22910 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   2290c:	2500      	movs	r5, #0
   2290e:	e7cc      	b.n	228aa <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   22910:	6860      	ldr	r0, [r4, #4]
   22912:	2112      	movs	r1, #18
   22914:	3008      	adds	r0, #8
   22916:	f000 ff4a 	bl	237ae <net_buf_simple_add>
   2291a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2291c:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2291e:	68e0      	ldr	r0, [r4, #12]
   22920:	6831      	ldr	r1, [r6, #0]
   22922:	2210      	movs	r2, #16
   22924:	3101      	adds	r1, #1
   22926:	3002      	adds	r0, #2
   22928:	f7fe fdfd 	bl	21526 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2292c:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   22930:	6862      	ldr	r2, [r4, #4]
   22932:	8992      	ldrh	r2, [r2, #12]
   22934:	1a9b      	subs	r3, r3, r2
   22936:	2b12      	cmp	r3, #18
   22938:	d801      	bhi.n	2293e <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   2293a:	2500      	movs	r5, #0
   2293c:	e7b5      	b.n	228aa <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   2293e:	2501      	movs	r5, #1
   22940:	e7b3      	b.n	228aa <find_info_cb+0x20>

00022942 <att_chan_mtu_updated>:
{
   22942:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   22944:	6806      	ldr	r6, [r0, #0]
	return list->head;
   22946:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22948:	b15c      	cbz	r4, 22962 <att_chan_mtu_updated+0x20>
   2294a:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   2294e:	d00c      	beq.n	2296a <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22950:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   22954:	d006      	beq.n	22964 <att_chan_mtu_updated+0x22>
	return node->next;
   22956:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2295a:	b11b      	cbz	r3, 22964 <att_chan_mtu_updated+0x22>
   2295c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   22960:	e000      	b.n	22964 <att_chan_mtu_updated+0x22>
   22962:	4623      	mov	r3, r4
   22964:	2200      	movs	r2, #0
   22966:	4611      	mov	r1, r2
   22968:	e004      	b.n	22974 <att_chan_mtu_updated+0x32>
   2296a:	4623      	mov	r3, r4
   2296c:	e7fa      	b.n	22964 <att_chan_mtu_updated+0x22>
   2296e:	461d      	mov	r5, r3
   22970:	461c      	mov	r4, r3
   22972:	462b      	mov	r3, r5
   22974:	b1bc      	cbz	r4, 229a6 <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   22976:	4284      	cmp	r4, r0
   22978:	d009      	beq.n	2298e <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2297a:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
   2297e:	42a9      	cmp	r1, r5
   22980:	bf38      	it	cc
   22982:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   22984:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   22988:	42a2      	cmp	r2, r4
   2298a:	bf38      	it	cc
   2298c:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2298e:	2b00      	cmp	r3, #0
   22990:	d0ed      	beq.n	2296e <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   22992:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   22996:	d0eb      	beq.n	22970 <att_chan_mtu_updated+0x2e>
	return node->next;
   22998:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   2299c:	2d00      	cmp	r5, #0
   2299e:	d0e7      	beq.n	22970 <att_chan_mtu_updated+0x2e>
   229a0:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   229a4:	e7e4      	b.n	22970 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   229a6:	f8b0 3086 	ldrh.w	r3, [r0, #134]	; 0x86
   229aa:	428b      	cmp	r3, r1
   229ac:	d803      	bhi.n	229b6 <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   229ae:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   229b2:	4294      	cmp	r4, r2
   229b4:	d90a      	bls.n	229cc <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   229b6:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   229ba:	4282      	cmp	r2, r0
   229bc:	bf38      	it	cc
   229be:	4602      	movcc	r2, r0
   229c0:	4299      	cmp	r1, r3
   229c2:	bf38      	it	cc
   229c4:	4619      	movcc	r1, r3
   229c6:	6830      	ldr	r0, [r6, #0]
   229c8:	f7f6 f9c4 	bl	18d54 <bt_gatt_att_max_mtu_changed>
}
   229cc:	bd70      	pop	{r4, r5, r6, pc}

000229ce <att_get_fixed_chan>:
{
   229ce:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   229d0:	2104      	movs	r1, #4
   229d2:	f7ff fbd2 	bl	2217a <bt_l2cap_le_lookup_tx_cid>
}
   229d6:	3808      	subs	r0, #8
   229d8:	bd08      	pop	{r3, pc}

000229da <att_write_cmd>:
{
   229da:	b530      	push	{r4, r5, lr}
   229dc:	b085      	sub	sp, #20
   229de:	4605      	mov	r5, r0
   229e0:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   229e2:	f101 0008 	add.w	r0, r1, #8
   229e6:	f000 ff12 	bl	2380e <net_buf_simple_pull_le16>
   229ea:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   229ec:	68a2      	ldr	r2, [r4, #8]
   229ee:	89a1      	ldrh	r1, [r4, #12]
   229f0:	9102      	str	r1, [sp, #8]
   229f2:	9201      	str	r2, [sp, #4]
   229f4:	2100      	movs	r1, #0
   229f6:	9100      	str	r1, [sp, #0]
   229f8:	460a      	mov	r2, r1
   229fa:	4628      	mov	r0, r5
   229fc:	f7f4 ff52 	bl	178a4 <att_write_rsp>
}
   22a00:	b005      	add	sp, #20
   22a02:	bd30      	pop	{r4, r5, pc}

00022a04 <att_write_req>:
{
   22a04:	b530      	push	{r4, r5, lr}
   22a06:	b085      	sub	sp, #20
   22a08:	4605      	mov	r5, r0
   22a0a:	460c      	mov	r4, r1
   22a0c:	f101 0008 	add.w	r0, r1, #8
   22a10:	f000 fefd 	bl	2380e <net_buf_simple_pull_le16>
   22a14:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   22a16:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   22a18:	89a1      	ldrh	r1, [r4, #12]
   22a1a:	9102      	str	r1, [sp, #8]
   22a1c:	9201      	str	r2, [sp, #4]
   22a1e:	2200      	movs	r2, #0
   22a20:	9200      	str	r2, [sp, #0]
   22a22:	2213      	movs	r2, #19
   22a24:	2112      	movs	r1, #18
   22a26:	4628      	mov	r0, r5
   22a28:	f7f4 ff3c 	bl	178a4 <att_write_rsp>
}
   22a2c:	b005      	add	sp, #20
   22a2e:	bd30      	pop	{r4, r5, pc}

00022a30 <att_read_group_req>:
{
   22a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   22a32:	b089      	sub	sp, #36	; 0x24
   22a34:	4605      	mov	r5, r0
   22a36:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   22a38:	7b0c      	ldrb	r4, [r1, #12]
   22a3a:	3c04      	subs	r4, #4
   22a3c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   22a3e:	2c02      	cmp	r4, #2
   22a40:	d001      	beq.n	22a46 <att_read_group_req+0x16>
   22a42:	2c10      	cmp	r4, #16
   22a44:	d142      	bne.n	22acc <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   22a46:	2104      	movs	r1, #4
   22a48:	3008      	adds	r0, #8
   22a4a:	f000 fed8 	bl	237fe <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   22a4e:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   22a50:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   22a52:	4622      	mov	r2, r4
   22a54:	1d01      	adds	r1, r0, #4
   22a56:	a801      	add	r0, sp, #4
   22a58:	f7fe fdf8 	bl	2164c <bt_uuid_create>
   22a5c:	b3c8      	cbz	r0, 22ad2 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22a5e:	f10d 0216 	add.w	r2, sp, #22
   22a62:	4639      	mov	r1, r7
   22a64:	4630      	mov	r0, r6
   22a66:	f7ff fbe3 	bl	22230 <range_is_valid>
   22a6a:	b1f0      	cbz	r0, 22aaa <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   22a6c:	2300      	movs	r3, #0
   22a6e:	f88d 3018 	strb.w	r3, [sp, #24]
   22a72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22a76:	f8ad 301a 	strh.w	r3, [sp, #26]
   22a7a:	a906      	add	r1, sp, #24
   22a7c:	a801      	add	r0, sp, #4
   22a7e:	f7fe fdc7 	bl	21610 <bt_uuid_cmp>
   22a82:	b158      	cbz	r0, 22a9c <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   22a84:	2300      	movs	r3, #0
   22a86:	f88d 301c 	strb.w	r3, [sp, #28]
   22a8a:	f642 0301 	movw	r3, #10241	; 0x2801
   22a8e:	f8ad 301e 	strh.w	r3, [sp, #30]
   22a92:	a907      	add	r1, sp, #28
   22a94:	a801      	add	r0, sp, #4
   22a96:	f7fe fdbb 	bl	21610 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   22a9a:	b978      	cbnz	r0, 22abc <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   22a9c:	463b      	mov	r3, r7
   22a9e:	4632      	mov	r2, r6
   22aa0:	a901      	add	r1, sp, #4
   22aa2:	4628      	mov	r0, r5
   22aa4:	f7f4 ffb4 	bl	17a10 <att_read_group_rsp>
   22aa8:	e011      	b.n	22ace <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   22aaa:	2301      	movs	r3, #1
   22aac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22ab0:	2110      	movs	r1, #16
   22ab2:	4628      	mov	r0, r5
   22ab4:	f7f4 fe02 	bl	176bc <send_err_rsp>
		return 0;
   22ab8:	2000      	movs	r0, #0
   22aba:	e008      	b.n	22ace <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   22abc:	2310      	movs	r3, #16
   22abe:	4632      	mov	r2, r6
   22ac0:	4619      	mov	r1, r3
   22ac2:	4628      	mov	r0, r5
   22ac4:	f7f4 fdfa 	bl	176bc <send_err_rsp>
		return 0;
   22ac8:	2000      	movs	r0, #0
   22aca:	e000      	b.n	22ace <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   22acc:	2004      	movs	r0, #4
}
   22ace:	b009      	add	sp, #36	; 0x24
   22ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   22ad2:	200e      	movs	r0, #14
   22ad4:	e7fb      	b.n	22ace <att_read_group_req+0x9e>

00022ad6 <att_read_blob_req>:
{
   22ad6:	b500      	push	{lr}
   22ad8:	b083      	sub	sp, #12
	req = (void *)buf->data;
   22ada:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   22adc:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   22ade:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   22ae0:	9200      	str	r2, [sp, #0]
   22ae2:	220d      	movs	r2, #13
   22ae4:	210c      	movs	r1, #12
   22ae6:	f7f5 f829 	bl	17b3c <att_read_rsp>
}
   22aea:	b003      	add	sp, #12
   22aec:	f85d fb04 	ldr.w	pc, [sp], #4

00022af0 <att_read_req>:
{
   22af0:	b500      	push	{lr}
   22af2:	b083      	sub	sp, #12
	req = (void *)buf->data;
   22af4:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   22af6:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   22af8:	2200      	movs	r2, #0
   22afa:	9200      	str	r2, [sp, #0]
   22afc:	220b      	movs	r2, #11
   22afe:	210a      	movs	r1, #10
   22b00:	f7f5 f81c 	bl	17b3c <att_read_rsp>
}
   22b04:	b003      	add	sp, #12
   22b06:	f85d fb04 	ldr.w	pc, [sp], #4

00022b0a <att_read_type_req>:
{
   22b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b0c:	b087      	sub	sp, #28
   22b0e:	4605      	mov	r5, r0
   22b10:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   22b12:	7b0c      	ldrb	r4, [r1, #12]
   22b14:	3c04      	subs	r4, #4
   22b16:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   22b18:	2c02      	cmp	r4, #2
   22b1a:	d001      	beq.n	22b20 <att_read_type_req+0x16>
   22b1c:	2c10      	cmp	r4, #16
   22b1e:	d123      	bne.n	22b68 <att_read_type_req+0x5e>
   22b20:	2104      	movs	r1, #4
   22b22:	3008      	adds	r0, #8
   22b24:	f000 fe6b 	bl	237fe <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   22b28:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   22b2a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   22b2c:	4622      	mov	r2, r4
   22b2e:	1d01      	adds	r1, r0, #4
   22b30:	a801      	add	r0, sp, #4
   22b32:	f7fe fd8b 	bl	2164c <bt_uuid_create>
   22b36:	b1c8      	cbz	r0, 22b6c <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22b38:	f10d 0216 	add.w	r2, sp, #22
   22b3c:	4639      	mov	r1, r7
   22b3e:	4630      	mov	r0, r6
   22b40:	f7ff fb76 	bl	22230 <range_is_valid>
   22b44:	b138      	cbz	r0, 22b56 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   22b46:	463b      	mov	r3, r7
   22b48:	4632      	mov	r2, r6
   22b4a:	a901      	add	r1, sp, #4
   22b4c:	4628      	mov	r0, r5
   22b4e:	f7f5 f847 	bl	17be0 <att_read_type_rsp>
}
   22b52:	b007      	add	sp, #28
   22b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   22b56:	2301      	movs	r3, #1
   22b58:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22b5c:	2108      	movs	r1, #8
   22b5e:	4628      	mov	r0, r5
   22b60:	f7f4 fdac 	bl	176bc <send_err_rsp>
		return 0;
   22b64:	2000      	movs	r0, #0
   22b66:	e7f4      	b.n	22b52 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   22b68:	2004      	movs	r0, #4
   22b6a:	e7f2      	b.n	22b52 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   22b6c:	200e      	movs	r0, #14
   22b6e:	e7f0      	b.n	22b52 <att_read_type_req+0x48>

00022b70 <att_find_type_req>:
{
   22b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22b74:	b087      	sub	sp, #28
   22b76:	4607      	mov	r7, r0
   22b78:	460c      	mov	r4, r1
   22b7a:	2106      	movs	r1, #6
   22b7c:	f104 0008 	add.w	r0, r4, #8
   22b80:	f000 fe3d 	bl	237fe <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   22b84:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   22b86:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   22b88:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   22b8c:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22b90:	f10d 020e 	add.w	r2, sp, #14
   22b94:	4631      	mov	r1, r6
   22b96:	4628      	mov	r0, r5
   22b98:	f7ff fb4a 	bl	22230 <range_is_valid>
   22b9c:	b1d0      	cbz	r0, 22bd4 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   22b9e:	2300      	movs	r3, #0
   22ba0:	f88d 3010 	strb.w	r3, [sp, #16]
   22ba4:	f8ad 8012 	strh.w	r8, [sp, #18]
   22ba8:	f88d 3014 	strb.w	r3, [sp, #20]
   22bac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22bb0:	f8ad 3016 	strh.w	r3, [sp, #22]
   22bb4:	a905      	add	r1, sp, #20
   22bb6:	a804      	add	r0, sp, #16
   22bb8:	f7fe fd2a 	bl	21610 <bt_uuid_cmp>
   22bbc:	b998      	cbnz	r0, 22be6 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   22bbe:	7b23      	ldrb	r3, [r4, #12]
   22bc0:	9300      	str	r3, [sp, #0]
   22bc2:	464b      	mov	r3, r9
   22bc4:	4632      	mov	r2, r6
   22bc6:	4629      	mov	r1, r5
   22bc8:	4638      	mov	r0, r7
   22bca:	f7f5 f853 	bl	17c74 <att_find_type_rsp>
}
   22bce:	b007      	add	sp, #28
   22bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   22bd4:	2301      	movs	r3, #1
   22bd6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   22bda:	2106      	movs	r1, #6
   22bdc:	4638      	mov	r0, r7
   22bde:	f7f4 fd6d 	bl	176bc <send_err_rsp>
		return 0;
   22be2:	2000      	movs	r0, #0
   22be4:	e7f3      	b.n	22bce <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   22be6:	230a      	movs	r3, #10
   22be8:	462a      	mov	r2, r5
   22bea:	2106      	movs	r1, #6
   22bec:	4638      	mov	r0, r7
   22bee:	f7f4 fd65 	bl	176bc <send_err_rsp>
		return 0;
   22bf2:	2000      	movs	r0, #0
   22bf4:	e7eb      	b.n	22bce <att_find_type_req+0x5e>

00022bf6 <att_find_info_req>:
{
   22bf6:	b570      	push	{r4, r5, r6, lr}
   22bf8:	b082      	sub	sp, #8
   22bfa:	4604      	mov	r4, r0
	req = (void *)buf->data;
   22bfc:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   22bfe:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   22c00:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   22c02:	f10d 0206 	add.w	r2, sp, #6
   22c06:	4631      	mov	r1, r6
   22c08:	4628      	mov	r0, r5
   22c0a:	f7ff fb11 	bl	22230 <range_is_valid>
   22c0e:	b130      	cbz	r0, 22c1e <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   22c10:	4632      	mov	r2, r6
   22c12:	4629      	mov	r1, r5
   22c14:	4620      	mov	r0, r4
   22c16:	f7f5 f877 	bl	17d08 <att_find_info_rsp>
}
   22c1a:	b002      	add	sp, #8
   22c1c:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   22c1e:	2301      	movs	r3, #1
   22c20:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   22c24:	2104      	movs	r1, #4
   22c26:	4620      	mov	r0, r4
   22c28:	f7f4 fd48 	bl	176bc <send_err_rsp>
		return 0;
   22c2c:	2000      	movs	r0, #0
   22c2e:	e7f4      	b.n	22c1a <att_find_info_req+0x24>

00022c30 <bt_att_init>:
{
   22c30:	b508      	push	{r3, lr}
	bt_gatt_init();
   22c32:	f7f5 fbf3 	bl	1841c <bt_gatt_init>
}
   22c36:	bd08      	pop	{r3, pc}

00022c38 <att_confirm>:
{
   22c38:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   22c3a:	2300      	movs	r3, #0
   22c3c:	898a      	ldrh	r2, [r1, #12]
   22c3e:	6889      	ldr	r1, [r1, #8]
   22c40:	f7f5 f900 	bl	17e44 <att_handle_rsp>
}
   22c44:	bd08      	pop	{r3, pc}

00022c46 <att_chan_detach>:
{
   22c46:	b510      	push	{r4, lr}
   22c48:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   22c4a:	6800      	ldr	r0, [r0, #0]
   22c4c:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   22c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22c52:	2100      	movs	r1, #0
   22c54:	b1e3      	cbz	r3, 22c90 <att_chan_detach+0x4a>
   22c56:	4293      	cmp	r3, r2
   22c58:	d002      	beq.n	22c60 <att_chan_detach+0x1a>
   22c5a:	4619      	mov	r1, r3
   22c5c:	681b      	ldr	r3, [r3, #0]
   22c5e:	e7f9      	b.n	22c54 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   22c60:	b149      	cbz	r1, 22c76 <att_chan_detach+0x30>
	return node->next;
   22c62:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   22c66:	600b      	str	r3, [r1, #0]
	return list->tail;
   22c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   22c6a:	4293      	cmp	r3, r2
   22c6c:	d00b      	beq.n	22c86 <att_chan_detach+0x40>
	parent->next = child;
   22c6e:	2300      	movs	r3, #0
   22c70:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22c74:	e00c      	b.n	22c90 <att_chan_detach+0x4a>
	return node->next;
   22c76:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   22c7a:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   22c7c:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   22c7e:	4291      	cmp	r1, r2
   22c80:	d1f5      	bne.n	22c6e <att_chan_detach+0x28>
	list->tail = node;
   22c82:	6283      	str	r3, [r0, #40]	; 0x28
}
   22c84:	e7f3      	b.n	22c6e <att_chan_detach+0x28>
	list->tail = node;
   22c86:	6281      	str	r1, [r0, #40]	; 0x28
}
   22c88:	e7f1      	b.n	22c6e <att_chan_detach+0x28>
		net_buf_unref(buf);
   22c8a:	4618      	mov	r0, r3
   22c8c:	f000 fd45 	bl	2371a <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   22c90:	2200      	movs	r2, #0
   22c92:	2300      	movs	r3, #0
   22c94:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   22c98:	f000 fd13 	bl	236c2 <net_buf_get>
   22c9c:	4603      	mov	r3, r0
   22c9e:	2800      	cmp	r0, #0
   22ca0:	d1f3      	bne.n	22c8a <att_chan_detach+0x44>
	if (chan->req) {
   22ca2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   22ca6:	b12b      	cbz	r3, 22cb4 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   22ca8:	230e      	movs	r3, #14
   22caa:	2200      	movs	r2, #0
   22cac:	4611      	mov	r1, r2
   22cae:	4620      	mov	r0, r4
   22cb0:	f7f5 f8c8 	bl	17e44 <att_handle_rsp>
	chan->att = NULL;
   22cb4:	2300      	movs	r3, #0
   22cb6:	6023      	str	r3, [r4, #0]
}
   22cb8:	bd10      	pop	{r4, pc}

00022cba <bt_att_disconnected>:
{
   22cba:	b538      	push	{r3, r4, r5, lr}
   22cbc:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   22cbe:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   22cc2:	b125      	cbz	r5, 22cce <bt_att_disconnected+0x14>
   22cc4:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   22cc6:	f7ff ffbe 	bl	22c46 <att_chan_detach>
	return list->head;
   22cca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   22ccc:	b103      	cbz	r3, 22cd0 <bt_att_disconnected+0x16>
}
   22cce:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   22cd0:	4628      	mov	r0, r5
   22cd2:	f7f5 f903 	bl	17edc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   22cd6:	6820      	ldr	r0, [r4, #0]
   22cd8:	f7f6 f888 	bl	18dec <bt_gatt_disconnected>
   22cdc:	e7f7      	b.n	22cce <bt_att_disconnected+0x14>

00022cde <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   22cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ce2:	b082      	sub	sp, #8
   22ce4:	4607      	mov	r7, r0
   22ce6:	460d      	mov	r5, r1
   22ce8:	4614      	mov	r4, r2
   22cea:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   22cec:	f7f4 f97a 	bl	16fe4 <att_get>
	if (!att) {
   22cf0:	b158      	cbz	r0, 22d0a <bt_att_send+0x2c>
   22cf2:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   22cf4:	b17c      	cbz	r4, 22d16 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   22cf6:	9600      	str	r6, [sp, #0]
   22cf8:	4623      	mov	r3, r4
   22cfa:	462a      	mov	r2, r5
   22cfc:	2104      	movs	r1, #4
   22cfe:	4638      	mov	r0, r7
   22d00:	f7ff f9f9 	bl	220f6 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   22d04:	b002      	add	sp, #8
   22d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   22d0a:	4628      	mov	r0, r5
   22d0c:	f000 fd05 	bl	2371a <net_buf_unref>
		return -ENOTCONN;
   22d10:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22d14:	e7f6      	b.n	22d04 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   22d16:	4629      	mov	r1, r5
   22d18:	300c      	adds	r0, #12
   22d1a:	f000 fcf1 	bl	23700 <net_buf_put>
	att_send_process(att);
   22d1e:	4640      	mov	r0, r8
   22d20:	f7ff fc70 	bl	22604 <att_send_process>
	return 0;
   22d24:	2000      	movs	r0, #0
   22d26:	e7ed      	b.n	22d04 <bt_att_send+0x26>

00022d28 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   22d28:	b510      	push	{r4, lr}
   22d2a:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   22d2c:	f7f4 f95a 	bl	16fe4 <att_get>
	if (!att) {
   22d30:	b170      	cbz	r0, 22d50 <bt_att_req_send+0x28>
   22d32:	4603      	mov	r3, r0
	parent->next = child;
   22d34:	2200      	movs	r2, #0
   22d36:	6022      	str	r2, [r4, #0]
	return list->tail;
   22d38:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   22d3a:	b132      	cbz	r2, 22d4a <bt_att_req_send+0x22>
	parent->next = child;
   22d3c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22d3e:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   22d40:	4618      	mov	r0, r3
   22d42:	f7ff fb96 	bl	22472 <att_req_send_process>

	return 0;
   22d46:	2000      	movs	r0, #0
}
   22d48:	bd10      	pop	{r4, pc}
   22d4a:	6084      	str	r4, [r0, #8]
	list->head = node;
   22d4c:	6044      	str	r4, [r0, #4]
}
   22d4e:	e7f7      	b.n	22d40 <bt_att_req_send+0x18>
		return -ENOTCONN;
   22d50:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22d54:	e7f8      	b.n	22d48 <bt_att_req_send+0x20>

00022d56 <update_range>:
{
   22d56:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   22d58:	8804      	ldrh	r4, [r0, #0]
   22d5a:	42a2      	cmp	r2, r4
   22d5c:	d302      	bcc.n	22d64 <update_range+0xe>
   22d5e:	880d      	ldrh	r5, [r1, #0]
   22d60:	42ab      	cmp	r3, r5
   22d62:	d908      	bls.n	22d76 <update_range+0x20>
	if (*start > new_start) {
   22d64:	42a2      	cmp	r2, r4
   22d66:	d200      	bcs.n	22d6a <update_range+0x14>
		*start = new_start;
   22d68:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   22d6a:	880a      	ldrh	r2, [r1, #0]
   22d6c:	4293      	cmp	r3, r2
   22d6e:	d904      	bls.n	22d7a <update_range+0x24>
		*end = new_end;
   22d70:	800b      	strh	r3, [r1, #0]
	return true;
   22d72:	2001      	movs	r0, #1
   22d74:	e002      	b.n	22d7c <update_range+0x26>
		return false;
   22d76:	2000      	movs	r0, #0
   22d78:	e000      	b.n	22d7c <update_range+0x26>
	return true;
   22d7a:	2001      	movs	r0, #1
}
   22d7c:	bc30      	pop	{r4, r5}
   22d7e:	4770      	bx	lr

00022d80 <cf_set_value>:
{
   22d80:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   22d82:	2300      	movs	r3, #0
   22d84:	e001      	b.n	22d8a <cf_set_value+0xa>
   22d86:	3301      	adds	r3, #1
   22d88:	b29b      	uxth	r3, r3
   22d8a:	2b02      	cmp	r3, #2
   22d8c:	d824      	bhi.n	22dd8 <cf_set_value+0x58>
   22d8e:	08dd      	lsrs	r5, r3, #3
   22d90:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   22d94:	d90f      	bls.n	22db6 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22d96:	1944      	adds	r4, r0, r5
   22d98:	7a24      	ldrb	r4, [r4, #8]
   22d9a:	f003 0607 	and.w	r6, r3, #7
   22d9e:	40f4      	lsrs	r4, r6
   22da0:	f014 0f01 	tst.w	r4, #1
   22da4:	d0ef      	beq.n	22d86 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   22da6:	5d4c      	ldrb	r4, [r1, r5]
   22da8:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   22dac:	f016 0f01 	tst.w	r6, #1
   22db0:	d1e9      	bne.n	22d86 <cf_set_value+0x6>
			return false;
   22db2:	2000      	movs	r0, #0
   22db4:	e013      	b.n	22dde <cf_set_value+0x5e>
   22db6:	2300      	movs	r3, #0
   22db8:	e008      	b.n	22dcc <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   22dba:	5ccc      	ldrb	r4, [r1, r3]
   22dbc:	f004 0407 	and.w	r4, r4, #7
   22dc0:	18c5      	adds	r5, r0, r3
   22dc2:	7a2e      	ldrb	r6, [r5, #8]
   22dc4:	4334      	orrs	r4, r6
   22dc6:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   22dc8:	3301      	adds	r3, #1
   22dca:	b29b      	uxth	r3, r3
   22dcc:	4293      	cmp	r3, r2
   22dce:	d205      	bcs.n	22ddc <cf_set_value+0x5c>
   22dd0:	2b00      	cmp	r3, #0
   22dd2:	d0f2      	beq.n	22dba <cf_set_value+0x3a>
	return true;
   22dd4:	2001      	movs	r0, #1
   22dd6:	e002      	b.n	22dde <cf_set_value+0x5e>
   22dd8:	2300      	movs	r3, #0
   22dda:	e7f7      	b.n	22dcc <cf_set_value+0x4c>
   22ddc:	2001      	movs	r0, #1
}
   22dde:	bc70      	pop	{r4, r5, r6}
   22de0:	4770      	bx	lr

00022de2 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   22de2:	6010      	str	r0, [r2, #0]
}
   22de4:	2000      	movs	r0, #0
   22de6:	4770      	bx	lr

00022de8 <gatt_ccc_changed>:
{
   22de8:	b510      	push	{r4, lr}
   22dea:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   22dec:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22dee:	460b      	mov	r3, r1
   22df0:	2b00      	cmp	r3, #0
   22df2:	dd07      	ble.n	22e04 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   22df4:	8953      	ldrh	r3, [r2, #10]
   22df6:	4299      	cmp	r1, r3
   22df8:	d003      	beq.n	22e02 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   22dfa:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   22dfc:	68d3      	ldr	r3, [r2, #12]
   22dfe:	b103      	cbz	r3, 22e02 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   22e00:	4798      	blx	r3
}
   22e02:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   22e04:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   22e08:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   22e0c:	8924      	ldrh	r4, [r4, #8]
   22e0e:	428c      	cmp	r4, r1
   22e10:	d900      	bls.n	22e14 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   22e12:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22e14:	3301      	adds	r3, #1
   22e16:	e7eb      	b.n	22df0 <gatt_ccc_changed+0x8>

00022e18 <gatt_indicate_rsp>:
{
   22e18:	b510      	push	{r4, lr}
   22e1a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   22e1c:	68a3      	ldr	r3, [r4, #8]
   22e1e:	b113      	cbz	r3, 22e26 <gatt_indicate_rsp+0xe>
   22e20:	460a      	mov	r2, r1
		params->func(conn, params, err);
   22e22:	4621      	mov	r1, r4
   22e24:	4798      	blx	r3
	params->_ref--;
   22e26:	7da3      	ldrb	r3, [r4, #22]
   22e28:	3b01      	subs	r3, #1
   22e2a:	b2db      	uxtb	r3, r3
   22e2c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   22e2e:	68e2      	ldr	r2, [r4, #12]
   22e30:	b112      	cbz	r2, 22e38 <gatt_indicate_rsp+0x20>
   22e32:	b90b      	cbnz	r3, 22e38 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   22e34:	4620      	mov	r0, r4
   22e36:	4790      	blx	r2
}
   22e38:	bd10      	pop	{r4, pc}

00022e3a <match_uuid>:
	data->attr = attr;
   22e3a:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   22e3c:	8091      	strh	r1, [r2, #4]
}
   22e3e:	2000      	movs	r0, #0
   22e40:	4770      	bx	lr

00022e42 <gen_hash_m>:
{
   22e42:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e44:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22e46:	6806      	ldr	r6, [r0, #0]
   22e48:	7835      	ldrb	r5, [r6, #0]
   22e4a:	2d00      	cmp	r5, #0
   22e4c:	d161      	bne.n	22f12 <gen_hash_m+0xd0>
   22e4e:	4607      	mov	r7, r0
   22e50:	4614      	mov	r4, r2
	switch (u16->val) {
   22e52:	8873      	ldrh	r3, [r6, #2]
   22e54:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   22e58:	d019      	beq.n	22e8e <gen_hash_m+0x4c>
   22e5a:	d913      	bls.n	22e84 <gen_hash_m+0x42>
   22e5c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   22e60:	33ff      	adds	r3, #255	; 0xff
   22e62:	b29b      	uxth	r3, r3
   22e64:	2b04      	cmp	r3, #4
   22e66:	d85a      	bhi.n	22f1e <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   22e68:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22e6c:	2202      	movs	r2, #2
   22e6e:	f10d 010e 	add.w	r1, sp, #14
   22e72:	4620      	mov	r0, r4
   22e74:	f7fe f9c7 	bl	21206 <tc_cmac_update>
   22e78:	2800      	cmp	r0, #0
   22e7a:	d13a      	bne.n	22ef2 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   22e7c:	f06f 0315 	mvn.w	r3, #21
   22e80:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22e82:	e047      	b.n	22f14 <gen_hash_m+0xd2>
	switch (u16->val) {
   22e84:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22e88:	b29b      	uxth	r3, r3
   22e8a:	2b03      	cmp	r3, #3
   22e8c:	d845      	bhi.n	22f1a <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   22e8e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22e92:	2202      	movs	r2, #2
   22e94:	f10d 010e 	add.w	r1, sp, #14
   22e98:	4620      	mov	r0, r4
   22e9a:	f7fe f9b4 	bl	21206 <tc_cmac_update>
   22e9e:	b918      	cbnz	r0, 22ea8 <gen_hash_m+0x66>
			state->err = -EINVAL;
   22ea0:	f06f 0315 	mvn.w	r3, #21
   22ea4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22ea6:	e035      	b.n	22f14 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   22ea8:	8873      	ldrh	r3, [r6, #2]
   22eaa:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22eae:	2202      	movs	r2, #2
   22eb0:	f10d 010e 	add.w	r1, sp, #14
   22eb4:	4620      	mov	r0, r4
   22eb6:	f7fe f9a6 	bl	21206 <tc_cmac_update>
   22eba:	b180      	cbz	r0, 22ede <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   22ebc:	687e      	ldr	r6, [r7, #4]
   22ebe:	2000      	movs	r0, #0
   22ec0:	9000      	str	r0, [sp, #0]
   22ec2:	2310      	movs	r3, #16
   22ec4:	eb0d 0203 	add.w	r2, sp, r3
   22ec8:	4639      	mov	r1, r7
   22eca:	47b0      	blx	r6
		if (len < 0) {
   22ecc:	1e02      	subs	r2, r0, #0
   22ece:	db0a      	blt.n	22ee6 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   22ed0:	a904      	add	r1, sp, #16
   22ed2:	4620      	mov	r0, r4
   22ed4:	f7fe f997 	bl	21206 <tc_cmac_update>
   22ed8:	b138      	cbz	r0, 22eea <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   22eda:	2501      	movs	r5, #1
   22edc:	e01a      	b.n	22f14 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22ede:	f06f 0315 	mvn.w	r3, #21
   22ee2:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22ee4:	e016      	b.n	22f14 <gen_hash_m+0xd2>
			state->err = len;
   22ee6:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22ee8:	e014      	b.n	22f14 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22eea:	f06f 0315 	mvn.w	r3, #21
   22eee:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22ef0:	e010      	b.n	22f14 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   22ef2:	8873      	ldrh	r3, [r6, #2]
   22ef4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22ef8:	2202      	movs	r2, #2
   22efa:	f10d 010e 	add.w	r1, sp, #14
   22efe:	4620      	mov	r0, r4
   22f00:	f7fe f981 	bl	21206 <tc_cmac_update>
   22f04:	b108      	cbz	r0, 22f0a <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   22f06:	2501      	movs	r5, #1
   22f08:	e004      	b.n	22f14 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   22f0a:	f06f 0315 	mvn.w	r3, #21
   22f0e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22f10:	e000      	b.n	22f14 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   22f12:	2501      	movs	r5, #1
}
   22f14:	4628      	mov	r0, r5
   22f16:	b009      	add	sp, #36	; 0x24
   22f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22f1a:	2501      	movs	r5, #1
   22f1c:	e7fa      	b.n	22f14 <gen_hash_m+0xd2>
   22f1e:	2501      	movs	r5, #1
   22f20:	e7f8      	b.n	22f14 <gen_hash_m+0xd2>

00022f22 <sc_restore_rsp>:
{
   22f22:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   22f24:	f7f5 f856 	bl	17fd4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   22f28:	b188      	cbz	r0, 22f4e <sc_restore_rsp+0x2c>
   22f2a:	4603      	mov	r3, r0
   22f2c:	7a02      	ldrb	r2, [r0, #8]
   22f2e:	f012 0f01 	tst.w	r2, #1
   22f32:	d00c      	beq.n	22f4e <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22f34:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22f36:	f3bf 8f5b 	dmb	ish
   22f3a:	e853 2f00 	ldrex	r2, [r3]
   22f3e:	f042 0201 	orr.w	r2, r2, #1
   22f42:	e843 2100 	strex	r1, r2, [r3]
   22f46:	2900      	cmp	r1, #0
   22f48:	d1f7      	bne.n	22f3a <sc_restore_rsp+0x18>
   22f4a:	f3bf 8f5b 	dmb	ish
}
   22f4e:	bd08      	pop	{r3, pc}

00022f50 <find_ccc_cfg>:
{
   22f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   22f52:	b083      	sub	sp, #12
   22f54:	4607      	mov	r7, r0
   22f56:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22f58:	2400      	movs	r4, #0
   22f5a:	b11c      	cbz	r4, 22f64 <find_ccc_cfg+0x14>
	return NULL;
   22f5c:	2600      	movs	r6, #0
}
   22f5e:	4630      	mov	r0, r6
   22f60:	b003      	add	sp, #12
   22f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   22f64:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   22f68:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   22f6c:	b167      	cbz	r7, 22f88 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   22f6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22f72:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22f74:	3201      	adds	r2, #1
   22f76:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   22f7a:	4638      	mov	r0, r7
   22f7c:	f7fe ffeb 	bl	21f56 <bt_conn_is_peer_addr_le>
   22f80:	2800      	cmp	r0, #0
   22f82:	d1ec      	bne.n	22f5e <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22f84:	3401      	adds	r4, #1
   22f86:	e7e8      	b.n	22f5a <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   22f88:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   22f8c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   22f90:	2300      	movs	r3, #0
   22f92:	9300      	str	r3, [sp, #0]
   22f94:	f8cd 3003 	str.w	r3, [sp, #3]
   22f98:	2207      	movs	r2, #7
   22f9a:	4669      	mov	r1, sp
   22f9c:	3001      	adds	r0, #1
   22f9e:	f7fe fa95 	bl	214cc <memcmp>
   22fa2:	2800      	cmp	r0, #0
   22fa4:	d1ee      	bne.n	22f84 <find_ccc_cfg+0x34>
   22fa6:	e7da      	b.n	22f5e <find_ccc_cfg+0xe>

00022fa8 <clear_ccc_cfg>:
{
   22fa8:	b530      	push	{r4, r5, lr}
   22faa:	b083      	sub	sp, #12
   22fac:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22fae:	2500      	movs	r5, #0
   22fb0:	9500      	str	r5, [sp, #0]
   22fb2:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   22fb6:	2207      	movs	r2, #7
   22fb8:	4669      	mov	r1, sp
   22fba:	3001      	adds	r0, #1
   22fbc:	f7fe fab3 	bl	21526 <memcpy>
	cfg->id = 0U;
   22fc0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   22fc2:	8125      	strh	r5, [r4, #8]
}
   22fc4:	b003      	add	sp, #12
   22fc6:	bd30      	pop	{r4, r5, pc}

00022fc8 <clear_sc_cfg>:
{
   22fc8:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   22fca:	220c      	movs	r2, #12
   22fcc:	2100      	movs	r1, #0
   22fce:	f7fe face 	bl	2156e <memset>
}
   22fd2:	bd08      	pop	{r3, pc}

00022fd4 <bt_gatt_clear_sc>:
{
   22fd4:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22fd6:	f7f5 f827 	bl	18028 <find_sc_cfg>
	if (!cfg) {
   22fda:	b108      	cbz	r0, 22fe0 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   22fdc:	f7ff fff4 	bl	22fc8 <clear_sc_cfg>
}
   22fe0:	2000      	movs	r0, #0
   22fe2:	bd08      	pop	{r3, pc}

00022fe4 <sc_ccc_cfg_write>:
{
   22fe4:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22fe6:	2a02      	cmp	r2, #2
   22fe8:	d003      	beq.n	22ff2 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   22fea:	f7f5 f94b 	bl	18284 <sc_clear>
}
   22fee:	2002      	movs	r0, #2
   22ff0:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22ff2:	2300      	movs	r3, #0
   22ff4:	461a      	mov	r2, r3
   22ff6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22ffa:	7a00      	ldrb	r0, [r0, #8]
   22ffc:	f7f5 f88e 	bl	1811c <sc_save>
   23000:	e7f5      	b.n	22fee <sc_ccc_cfg_write+0xa>

00023002 <sc_reset>:
{
   23002:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   23004:	2204      	movs	r2, #4
   23006:	2100      	movs	r1, #0
   23008:	3008      	adds	r0, #8
   2300a:	f7fe fab0 	bl	2156e <memset>
}
   2300e:	bd08      	pop	{r3, pc}

00023010 <gatt_foreach_iter>:
	if (handle > end_handle) {
   23010:	4299      	cmp	r1, r3
   23012:	d822      	bhi.n	2305a <gatt_foreach_iter+0x4a>
{
   23014:	b538      	push	{r3, r4, r5, lr}
   23016:	4605      	mov	r5, r0
   23018:	460c      	mov	r4, r1
	if (handle < start_handle) {
   2301a:	4291      	cmp	r1, r2
   2301c:	d31f      	bcc.n	2305e <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   2301e:	9b04      	ldr	r3, [sp, #16]
   23020:	b123      	cbz	r3, 2302c <gatt_foreach_iter+0x1c>
   23022:	6801      	ldr	r1, [r0, #0]
   23024:	4618      	mov	r0, r3
   23026:	f7fe faf3 	bl	21610 <bt_uuid_cmp>
   2302a:	b9d0      	cbnz	r0, 23062 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   2302c:	9b05      	ldr	r3, [sp, #20]
   2302e:	b12b      	cbz	r3, 2303c <gatt_foreach_iter+0x2c>
   23030:	68eb      	ldr	r3, [r5, #12]
   23032:	9a05      	ldr	r2, [sp, #20]
   23034:	4293      	cmp	r3, r2
   23036:	d001      	beq.n	2303c <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   23038:	2001      	movs	r0, #1
   2303a:	e011      	b.n	23060 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   2303c:	9b06      	ldr	r3, [sp, #24]
   2303e:	881b      	ldrh	r3, [r3, #0]
   23040:	3b01      	subs	r3, #1
   23042:	9a06      	ldr	r2, [sp, #24]
   23044:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   23046:	9a08      	ldr	r2, [sp, #32]
   23048:	4621      	mov	r1, r4
   2304a:	4628      	mov	r0, r5
   2304c:	9b07      	ldr	r3, [sp, #28]
   2304e:	4798      	blx	r3
	if (!*num_matches) {
   23050:	9b06      	ldr	r3, [sp, #24]
   23052:	881b      	ldrh	r3, [r3, #0]
   23054:	b923      	cbnz	r3, 23060 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   23056:	2000      	movs	r0, #0
   23058:	e002      	b.n	23060 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2305a:	2000      	movs	r0, #0
}
   2305c:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2305e:	2001      	movs	r0, #1
}
   23060:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   23062:	2001      	movs	r0, #1
   23064:	e7fc      	b.n	23060 <gatt_foreach_iter+0x50>

00023066 <gatt_req_alloc>:
{
   23066:	b538      	push	{r3, r4, r5, lr}
   23068:	4605      	mov	r5, r0
   2306a:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2306c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   23070:	2100      	movs	r1, #0
   23072:	f7f4 febb 	bl	17dec <bt_att_req_alloc>
	if (!req) {
   23076:	4603      	mov	r3, r0
   23078:	b108      	cbz	r0, 2307e <gatt_req_alloc+0x18>
	req->func = func;
   2307a:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2307c:	60c4      	str	r4, [r0, #12]
}
   2307e:	4618      	mov	r0, r3
   23080:	bd38      	pop	{r3, r4, r5, pc}

00023082 <clear_cf_cfg>:
{
   23082:	b530      	push	{r4, r5, lr}
   23084:	b083      	sub	sp, #12
   23086:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   23088:	2500      	movs	r5, #0
   2308a:	9500      	str	r5, [sp, #0]
   2308c:	f8cd 5003 	str.w	r5, [sp, #3]
   23090:	2207      	movs	r2, #7
   23092:	4669      	mov	r1, sp
   23094:	3001      	adds	r0, #1
   23096:	f7fe fa46 	bl	21526 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2309a:	2201      	movs	r2, #1
   2309c:	4629      	mov	r1, r5
   2309e:	f104 0008 	add.w	r0, r4, #8
   230a2:	f7fe fa64 	bl	2156e <memset>
	atomic_set(cfg->flags, 0);
   230a6:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   230a8:	f3bf 8f5b 	dmb	ish
   230ac:	e854 3f00 	ldrex	r3, [r4]
   230b0:	e844 5200 	strex	r2, r5, [r4]
   230b4:	2a00      	cmp	r2, #0
   230b6:	d1f9      	bne.n	230ac <clear_cf_cfg+0x2a>
   230b8:	f3bf 8f5b 	dmb	ish
}
   230bc:	b003      	add	sp, #12
   230be:	bd30      	pop	{r4, r5, pc}

000230c0 <remove_cf_cfg>:
{
   230c0:	b570      	push	{r4, r5, r6, lr}
   230c2:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   230c4:	f7f4 ff86 	bl	17fd4 <find_cf_cfg>
	if (!cfg) {
   230c8:	b1e8      	cbz	r0, 23106 <remove_cf_cfg+0x46>
   230ca:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   230cc:	f104 0688 	add.w	r6, r4, #136	; 0x88
   230d0:	4631      	mov	r1, r6
   230d2:	7a20      	ldrb	r0, [r4, #8]
   230d4:	f7fe fc08 	bl	218e8 <bt_addr_le_is_bonded>
   230d8:	b918      	cbnz	r0, 230e2 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   230da:	4628      	mov	r0, r5
   230dc:	f7ff ffd1 	bl	23082 <clear_cf_cfg>
   230e0:	e011      	b.n	23106 <remove_cf_cfg+0x46>
   230e2:	2207      	movs	r2, #7
   230e4:	4631      	mov	r1, r6
   230e6:	1c68      	adds	r0, r5, #1
   230e8:	f7fe fa1d 	bl	21526 <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   230ec:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   230ee:	f3bf 8f5b 	dmb	ish
   230f2:	e855 3f00 	ldrex	r3, [r5]
   230f6:	f023 0302 	bic.w	r3, r3, #2
   230fa:	e845 3200 	strex	r2, r3, [r5]
   230fe:	2a00      	cmp	r2, #0
   23100:	d1f7      	bne.n	230f2 <remove_cf_cfg+0x32>
   23102:	f3bf 8f5b 	dmb	ish
}
   23106:	bd70      	pop	{r4, r5, r6, pc}

00023108 <bt_gatt_attr_read>:
{
   23108:	b510      	push	{r4, lr}
   2310a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2310e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   23112:	42a1      	cmp	r1, r4
   23114:	d80c      	bhi.n	23130 <bt_gatt_attr_read+0x28>
   23116:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   23118:	1a64      	subs	r4, r4, r1
   2311a:	42a3      	cmp	r3, r4
   2311c:	bfa8      	it	ge
   2311e:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   23120:	b29c      	uxth	r4, r3
   23122:	4622      	mov	r2, r4
   23124:	9b03      	ldr	r3, [sp, #12]
   23126:	4419      	add	r1, r3
   23128:	f7fe f9fd 	bl	21526 <memcpy>
}
   2312c:	4620      	mov	r0, r4
   2312e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   23130:	f06f 0406 	mvn.w	r4, #6
   23134:	e7fa      	b.n	2312c <bt_gatt_attr_read+0x24>

00023136 <read_ppcp>:
{
   23136:	b510      	push	{r4, lr}
   23138:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2313a:	2418      	movs	r4, #24
   2313c:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   23140:	2428      	movs	r4, #40	; 0x28
   23142:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   23146:	2400      	movs	r4, #0
   23148:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2314c:	242a      	movs	r4, #42	; 0x2a
   2314e:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   23152:	2408      	movs	r4, #8
   23154:	9402      	str	r4, [sp, #8]
   23156:	ac04      	add	r4, sp, #16
   23158:	9401      	str	r4, [sp, #4]
   2315a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2315e:	9400      	str	r4, [sp, #0]
   23160:	f7ff ffd2 	bl	23108 <bt_gatt_attr_read>
}
   23164:	b006      	add	sp, #24
   23166:	bd10      	pop	{r4, pc}

00023168 <read_appearance>:
{
   23168:	b510      	push	{r4, lr}
   2316a:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2316c:	f240 34c2 	movw	r4, #962	; 0x3c2
   23170:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   23174:	2402      	movs	r4, #2
   23176:	9402      	str	r4, [sp, #8]
   23178:	f10d 0416 	add.w	r4, sp, #22
   2317c:	9401      	str	r4, [sp, #4]
   2317e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   23182:	9400      	str	r4, [sp, #0]
   23184:	f7ff ffc0 	bl	23108 <bt_gatt_attr_read>
}
   23188:	b006      	add	sp, #24
   2318a:	bd10      	pop	{r4, pc}

0002318c <read_name>:
{
   2318c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23190:	b084      	sub	sp, #16
   23192:	4604      	mov	r4, r0
   23194:	460d      	mov	r5, r1
   23196:	4616      	mov	r6, r2
   23198:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   2319a:	f7f2 f91f 	bl	153dc <bt_get_name>
   2319e:	4680      	mov	r8, r0
				 strlen(name));
   231a0:	f7fe f978 	bl	21494 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   231a4:	b280      	uxth	r0, r0
   231a6:	9002      	str	r0, [sp, #8]
   231a8:	f8cd 8004 	str.w	r8, [sp, #4]
   231ac:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   231b0:	9300      	str	r3, [sp, #0]
   231b2:	463b      	mov	r3, r7
   231b4:	4632      	mov	r2, r6
   231b6:	4629      	mov	r1, r5
   231b8:	4620      	mov	r0, r4
   231ba:	f7ff ffa5 	bl	23108 <bt_gatt_attr_read>
}
   231be:	b004      	add	sp, #16
   231c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000231c4 <cf_read>:
{
   231c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   231c6:	b087      	sub	sp, #28
   231c8:	4604      	mov	r4, r0
   231ca:	460d      	mov	r5, r1
   231cc:	4616      	mov	r6, r2
   231ce:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   231d0:	2300      	movs	r3, #0
   231d2:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   231d6:	f7f4 fefd 	bl	17fd4 <find_cf_cfg>
	if (cfg) {
   231da:	b128      	cbz	r0, 231e8 <cf_read+0x24>
   231dc:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   231de:	2201      	movs	r2, #1
   231e0:	3108      	adds	r1, #8
   231e2:	a805      	add	r0, sp, #20
   231e4:	f7fe f99f 	bl	21526 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   231e8:	2301      	movs	r3, #1
   231ea:	9302      	str	r3, [sp, #8]
   231ec:	ab05      	add	r3, sp, #20
   231ee:	9301      	str	r3, [sp, #4]
   231f0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   231f4:	9300      	str	r3, [sp, #0]
   231f6:	463b      	mov	r3, r7
   231f8:	4632      	mov	r2, r6
   231fa:	4629      	mov	r1, r5
   231fc:	4620      	mov	r0, r4
   231fe:	f7ff ff83 	bl	23108 <bt_gatt_attr_read>
}
   23202:	b007      	add	sp, #28
   23204:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023206 <bt_gatt_attr_read_service>:
{
   23206:	b570      	push	{r4, r5, r6, lr}
   23208:	b086      	sub	sp, #24
   2320a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   2320e:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   23210:	7826      	ldrb	r6, [r4, #0]
   23212:	b146      	cbz	r6, 23226 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   23214:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   23216:	2610      	movs	r6, #16
   23218:	9602      	str	r6, [sp, #8]
   2321a:	9401      	str	r4, [sp, #4]
   2321c:	9500      	str	r5, [sp, #0]
   2321e:	f7ff ff73 	bl	23108 <bt_gatt_attr_read>
}
   23222:	b006      	add	sp, #24
   23224:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   23226:	8864      	ldrh	r4, [r4, #2]
   23228:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2322c:	2402      	movs	r4, #2
   2322e:	9402      	str	r4, [sp, #8]
   23230:	f10d 0416 	add.w	r4, sp, #22
   23234:	9401      	str	r4, [sp, #4]
   23236:	9500      	str	r5, [sp, #0]
   23238:	f7ff ff66 	bl	23108 <bt_gatt_attr_read>
   2323c:	e7f1      	b.n	23222 <bt_gatt_attr_read_service+0x1c>

0002323e <bt_gatt_attr_read_ccc>:
{
   2323e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23240:	b087      	sub	sp, #28
   23242:	4605      	mov	r5, r0
   23244:	460c      	mov	r4, r1
   23246:	4616      	mov	r6, r2
   23248:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2324a:	68c9      	ldr	r1, [r1, #12]
   2324c:	f7ff fe80 	bl	22f50 <find_ccc_cfg>
	if (cfg) {
   23250:	b190      	cbz	r0, 23278 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   23252:	8903      	ldrh	r3, [r0, #8]
   23254:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   23258:	2302      	movs	r3, #2
   2325a:	9302      	str	r3, [sp, #8]
   2325c:	f10d 0316 	add.w	r3, sp, #22
   23260:	9301      	str	r3, [sp, #4]
   23262:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   23266:	9300      	str	r3, [sp, #0]
   23268:	463b      	mov	r3, r7
   2326a:	4632      	mov	r2, r6
   2326c:	4621      	mov	r1, r4
   2326e:	4628      	mov	r0, r5
   23270:	f7ff ff4a 	bl	23108 <bt_gatt_attr_read>
}
   23274:	b007      	add	sp, #28
   23276:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   23278:	2300      	movs	r3, #0
   2327a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2327e:	e7eb      	b.n	23258 <bt_gatt_attr_read_ccc+0x1a>

00023280 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23280:	b1b8      	cbz	r0, 232b2 <bt_gatt_attr_value_handle+0x32>
{
   23282:	b510      	push	{r4, lr}
   23284:	b082      	sub	sp, #8
   23286:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23288:	2300      	movs	r3, #0
   2328a:	f88d 3004 	strb.w	r3, [sp, #4]
   2328e:	f642 0303 	movw	r3, #10243	; 0x2803
   23292:	f8ad 3006 	strh.w	r3, [sp, #6]
   23296:	a901      	add	r1, sp, #4
   23298:	6800      	ldr	r0, [r0, #0]
   2329a:	f7fe f9b9 	bl	21610 <bt_uuid_cmp>
   2329e:	b950      	cbnz	r0, 232b6 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   232a0:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   232a2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   232a4:	b940      	cbnz	r0, 232b8 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   232a6:	4620      	mov	r0, r4
   232a8:	f7f5 f8ec 	bl	18484 <bt_gatt_attr_get_handle>
   232ac:	3001      	adds	r0, #1
   232ae:	b280      	uxth	r0, r0
   232b0:	e002      	b.n	232b8 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   232b2:	2000      	movs	r0, #0
}
   232b4:	4770      	bx	lr
	uint16_t handle = 0;
   232b6:	2000      	movs	r0, #0
}
   232b8:	b002      	add	sp, #8
   232ba:	bd10      	pop	{r4, pc}

000232bc <bt_gatt_attr_read_chrc>:
{
   232bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232c0:	b08a      	sub	sp, #40	; 0x28
   232c2:	4605      	mov	r5, r0
   232c4:	460c      	mov	r4, r1
   232c6:	4616      	mov	r6, r2
   232c8:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   232ca:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   232ce:	f898 3006 	ldrb.w	r3, [r8, #6]
   232d2:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   232d6:	4608      	mov	r0, r1
   232d8:	f7ff ffd2 	bl	23280 <bt_gatt_attr_value_handle>
   232dc:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   232e0:	f8d8 1000 	ldr.w	r1, [r8]
   232e4:	780b      	ldrb	r3, [r1, #0]
   232e6:	b993      	cbnz	r3, 2330e <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   232e8:	884b      	ldrh	r3, [r1, #2]
   232ea:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   232ee:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   232f0:	9302      	str	r3, [sp, #8]
   232f2:	ab05      	add	r3, sp, #20
   232f4:	9301      	str	r3, [sp, #4]
   232f6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   232fa:	9300      	str	r3, [sp, #0]
   232fc:	463b      	mov	r3, r7
   232fe:	4632      	mov	r2, r6
   23300:	4621      	mov	r1, r4
   23302:	4628      	mov	r0, r5
   23304:	f7ff ff00 	bl	23108 <bt_gatt_attr_read>
}
   23308:	b00a      	add	sp, #40	; 0x28
   2330a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2330e:	2210      	movs	r2, #16
   23310:	3101      	adds	r1, #1
   23312:	f10d 0017 	add.w	r0, sp, #23
   23316:	f7fe f906 	bl	21526 <memcpy>
		value_len += 16U;
   2331a:	2313      	movs	r3, #19
   2331c:	e7e8      	b.n	232f0 <bt_gatt_attr_read_chrc+0x34>

0002331e <db_hash_process>:
{
   2331e:	b508      	push	{r3, lr}
	db_hash_gen(true);
   23320:	2001      	movs	r0, #1
   23322:	f7f5 f929 	bl	18578 <db_hash_gen>
}
   23326:	bd08      	pop	{r3, pc}

00023328 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   23328:	f012 0f01 	tst.w	r2, #1
   2332c:	d005      	beq.n	2333a <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2332e:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   23330:	f013 0f15 	tst.w	r3, #21
   23334:	d01a      	beq.n	2336c <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   23336:	684b      	ldr	r3, [r1, #4]
   23338:	b1d3      	cbz	r3, 23370 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2333a:	f012 0f02 	tst.w	r2, #2
   2333e:	d005      	beq.n	2334c <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23340:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   23342:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   23346:	d015      	beq.n	23374 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23348:	688b      	ldr	r3, [r1, #8]
   2334a:	b1ab      	cbz	r3, 23378 <bt_gatt_check_perm+0x50>
{
   2334c:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2334e:	7c8c      	ldrb	r4, [r1, #18]
   23350:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   23352:	f014 0f30 	tst.w	r4, #48	; 0x30
   23356:	d103      	bne.n	23360 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   23358:	f014 000c 	ands.w	r0, r4, #12
   2335c:	d10e      	bne.n	2337c <bt_gatt_check_perm+0x54>
}
   2335e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   23360:	f7fe fde0 	bl	21f24 <bt_conn_get_security>
   23364:	2802      	cmp	r0, #2
   23366:	d8f7      	bhi.n	23358 <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   23368:	2005      	movs	r0, #5
   2336a:	e7f8      	b.n	2335e <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2336c:	2002      	movs	r0, #2
   2336e:	4770      	bx	lr
   23370:	2002      	movs	r0, #2
   23372:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   23374:	2003      	movs	r0, #3
   23376:	4770      	bx	lr
   23378:	2003      	movs	r0, #3
}
   2337a:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2337c:	200f      	movs	r0, #15
   2337e:	e7ee      	b.n	2335e <bt_gatt_check_perm+0x36>

00023380 <bt_gatt_is_subscribed>:
	if (conn->state != BT_CONN_CONNECTED) {
   23380:	7a83      	ldrb	r3, [r0, #10]
   23382:	2b07      	cmp	r3, #7
   23384:	d001      	beq.n	2338a <bt_gatt_is_subscribed+0xa>
		return false;
   23386:	2000      	movs	r0, #0
}
   23388:	4770      	bx	lr
{
   2338a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2338c:	b085      	sub	sp, #20
   2338e:	4605      	mov	r5, r0
   23390:	460c      	mov	r4, r1
   23392:	4616      	mov	r6, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   23394:	6808      	ldr	r0, [r1, #0]
   23396:	2300      	movs	r3, #0
   23398:	f88d 3004 	strb.w	r3, [sp, #4]
   2339c:	f642 0303 	movw	r3, #10243	; 0x2803
   233a0:	f8ad 3006 	strh.w	r3, [sp, #6]
   233a4:	a901      	add	r1, sp, #4
   233a6:	f7fe f933 	bl	21610 <bt_uuid_cmp>
   233aa:	b940      	cbnz	r0, 233be <bt_gatt_is_subscribed+0x3e>
		struct bt_gatt_chrc *chrc = attr->user_data;
   233ac:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   233ae:	799b      	ldrb	r3, [r3, #6]
   233b0:	f013 0f30 	tst.w	r3, #48	; 0x30
   233b4:	d01f      	beq.n	233f6 <bt_gatt_is_subscribed+0x76>
		attr = bt_gatt_attr_next(attr);
   233b6:	4620      	mov	r0, r4
   233b8:	f7f5 f960 	bl	1867c <bt_gatt_attr_next>
   233bc:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   233be:	6820      	ldr	r0, [r4, #0]
   233c0:	2300      	movs	r3, #0
   233c2:	f88d 3008 	strb.w	r3, [sp, #8]
   233c6:	f642 1302 	movw	r3, #10498	; 0x2902
   233ca:	f8ad 300a 	strh.w	r3, [sp, #10]
   233ce:	a902      	add	r1, sp, #8
   233d0:	f7fe f91e 	bl	21610 <bt_uuid_cmp>
   233d4:	b988      	cbnz	r0, 233fa <bt_gatt_is_subscribed+0x7a>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   233d6:	6820      	ldr	r0, [r4, #0]
   233d8:	2300      	movs	r3, #0
   233da:	f88d 300c 	strb.w	r3, [sp, #12]
   233de:	f642 1302 	movw	r3, #10498	; 0x2902
   233e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   233e6:	a903      	add	r1, sp, #12
   233e8:	f7fe f912 	bl	21610 <bt_uuid_cmp>
   233ec:	b950      	cbnz	r0, 23404 <bt_gatt_is_subscribed+0x84>
	ccc = attr->user_data;
   233ee:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   233f0:	2400      	movs	r4, #0
   233f2:	b14c      	cbz	r4, 23408 <bt_gatt_is_subscribed+0x88>
	return false;
   233f4:	2000      	movs	r0, #0
}
   233f6:	b005      	add	sp, #20
   233f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		attr = bt_gatt_attr_next(attr);
   233fa:	4620      	mov	r0, r4
   233fc:	f7f5 f93e 	bl	1867c <bt_gatt_attr_next>
   23400:	4604      	mov	r4, r0
   23402:	e7e8      	b.n	233d6 <bt_gatt_is_subscribed+0x56>
		return false;
   23404:	2000      	movs	r0, #0
   23406:	e7f6      	b.n	233f6 <bt_gatt_is_subscribed+0x76>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   23408:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2340c:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   23410:	3201      	adds	r2, #1
   23412:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   23416:	4628      	mov	r0, r5
   23418:	f7fe fd9d 	bl	21f56 <bt_conn_is_peer_addr_le>
   2341c:	b130      	cbz	r0, 2342c <bt_gatt_is_subscribed+0xac>
		    (ccc_value & ccc->cfg[i].value)) {
   2341e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   23422:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   23426:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   23428:	4233      	tst	r3, r6
   2342a:	d1e4      	bne.n	233f6 <bt_gatt_is_subscribed+0x76>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   2342c:	3401      	adds	r4, #1
   2342e:	e7e0      	b.n	233f2 <bt_gatt_is_subscribed+0x72>

00023430 <bt_gatt_change_aware>:
{
   23430:	b510      	push	{r4, lr}
   23432:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   23434:	f7f4 fdce 	bl	17fd4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23438:	2800      	cmp	r0, #0
   2343a:	d042      	beq.n	234c2 <bt_gatt_change_aware+0x92>
   2343c:	7a02      	ldrb	r2, [r0, #8]
   2343e:	f012 0f01 	tst.w	r2, #1
   23442:	d101      	bne.n	23448 <bt_gatt_change_aware+0x18>
		return true;
   23444:	2001      	movs	r0, #1
}
   23446:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   23448:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2344c:	f3bf 8f5b 	dmb	ish
   23450:	68c2      	ldr	r2, [r0, #12]
   23452:	f3bf 8f5b 	dmb	ish
   23456:	f012 0f01 	tst.w	r2, #1
   2345a:	d134      	bne.n	234c6 <bt_gatt_change_aware+0x96>
	if (!req) {
   2345c:	b90c      	cbnz	r4, 23462 <bt_gatt_change_aware+0x32>
		return false;
   2345e:	4620      	mov	r0, r4
   23460:	e7f1      	b.n	23446 <bt_gatt_change_aware+0x16>
   23462:	f3bf 8f5b 	dmb	ish
   23466:	68c3      	ldr	r3, [r0, #12]
   23468:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2346c:	f013 0f02 	tst.w	r3, #2
   23470:	d10d      	bne.n	2348e <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23472:	f3bf 8f5b 	dmb	ish
   23476:	e851 3f00 	ldrex	r3, [r1]
   2347a:	f043 0302 	orr.w	r3, r3, #2
   2347e:	e841 3200 	strex	r2, r3, [r1]
   23482:	2a00      	cmp	r2, #0
   23484:	d1f7      	bne.n	23476 <bt_gatt_change_aware+0x46>
   23486:	f3bf 8f5b 	dmb	ish
	return false;
   2348a:	2000      	movs	r0, #0
   2348c:	e7db      	b.n	23446 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2348e:	f3bf 8f5b 	dmb	ish
   23492:	e851 3f00 	ldrex	r3, [r1]
   23496:	f023 0302 	bic.w	r3, r3, #2
   2349a:	e841 3200 	strex	r2, r3, [r1]
   2349e:	2a00      	cmp	r2, #0
   234a0:	d1f7      	bne.n	23492 <bt_gatt_change_aware+0x62>
   234a2:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   234a6:	f3bf 8f5b 	dmb	ish
   234aa:	e851 3f00 	ldrex	r3, [r1]
   234ae:	f043 0301 	orr.w	r3, r3, #1
   234b2:	e841 3200 	strex	r2, r3, [r1]
   234b6:	2a00      	cmp	r2, #0
   234b8:	d1f7      	bne.n	234aa <bt_gatt_change_aware+0x7a>
   234ba:	f3bf 8f5b 	dmb	ish
		return true;
   234be:	4620      	mov	r0, r4
   234c0:	e7c1      	b.n	23446 <bt_gatt_change_aware+0x16>
		return true;
   234c2:	2001      	movs	r0, #1
   234c4:	e7bf      	b.n	23446 <bt_gatt_change_aware+0x16>
		return true;
   234c6:	2001      	movs	r0, #1
   234c8:	e7bd      	b.n	23446 <bt_gatt_change_aware+0x16>

000234ca <bt_smp_recv>:
{
   234ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   234cc:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   234ce:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   234d0:	f04f 32ff 	mov.w	r2, #4294967295
   234d4:	f04f 33ff 	mov.w	r3, #4294967295
   234d8:	2100      	movs	r1, #0
   234da:	4608      	mov	r0, r1
   234dc:	f7fe fe06 	bl	220ec <bt_l2cap_create_pdu_timeout>
   234e0:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   234e2:	f100 0608 	add.w	r6, r0, #8
   234e6:	2101      	movs	r1, #1
   234e8:	4630      	mov	r0, r6
   234ea:	f000 f960 	bl	237ae <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   234ee:	2505      	movs	r5, #5
   234f0:	7005      	strb	r5, [r0, #0]
   234f2:	2101      	movs	r1, #1
   234f4:	4630      	mov	r0, r6
   234f6:	f000 f95a 	bl	237ae <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   234fa:	7005      	strb	r5, [r0, #0]
   234fc:	2300      	movs	r3, #0
   234fe:	9300      	str	r3, [sp, #0]
   23500:	4622      	mov	r2, r4
   23502:	2106      	movs	r1, #6
   23504:	4638      	mov	r0, r7
   23506:	f7fe fdf6 	bl	220f6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2350a:	b910      	cbnz	r0, 23512 <bt_smp_recv+0x48>
}
   2350c:	2000      	movs	r0, #0
   2350e:	b003      	add	sp, #12
   23510:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   23512:	4620      	mov	r0, r4
   23514:	f000 f901 	bl	2371a <net_buf_unref>
   23518:	e7f8      	b.n	2350c <bt_smp_recv+0x42>

0002351a <bt_smp_sign>:
}
   2351a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2351e:	4770      	bx	lr

00023520 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   23520:	2000      	movs	r0, #0
   23522:	4770      	bx	lr

00023524 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   23524:	4770      	bx	lr

00023526 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   23526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2352a:	4604      	mov	r4, r0
   2352c:	460d      	mov	r5, r1
   2352e:	4617      	mov	r7, r2
   23530:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23532:	7980      	ldrb	r0, [r0, #6]
   23534:	f7f5 fcb0 	bl	18e98 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   23538:	6a03      	ldr	r3, [r0, #32]
   2353a:	681b      	ldr	r3, [r3, #0]
   2353c:	f8d3 8000 	ldr.w	r8, [r3]
   23540:	463a      	mov	r2, r7
   23542:	4633      	mov	r3, r6
   23544:	4629      	mov	r1, r5
   23546:	4620      	mov	r0, r4
   23548:	47c0      	blx	r8
}
   2354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002354e <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   2354e:	b538      	push	{r3, r4, r5, lr}
   23550:	4604      	mov	r4, r0
   23552:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23554:	7980      	ldrb	r0, [r0, #6]
   23556:	f7f5 fc9f 	bl	18e98 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2355a:	7963      	ldrb	r3, [r4, #5]
   2355c:	f013 0f02 	tst.w	r3, #2
   23560:	d105      	bne.n	2356e <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   23562:	6a03      	ldr	r3, [r0, #32]
   23564:	681b      	ldr	r3, [r3, #0]
   23566:	689b      	ldr	r3, [r3, #8]
   23568:	4629      	mov	r1, r5
   2356a:	4620      	mov	r0, r4
   2356c:	4798      	blx	r3
}
   2356e:	bd38      	pop	{r3, r4, r5, pc}

00023570 <fixed_data_alloc>:
{
   23570:	b570      	push	{r4, r5, r6, lr}
   23572:	4604      	mov	r4, r0
   23574:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23576:	7980      	ldrb	r0, [r0, #6]
   23578:	f7f5 fc8e 	bl	18e98 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2357c:	6a03      	ldr	r3, [r0, #32]
   2357e:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   23580:	682a      	ldr	r2, [r5, #0]
   23582:	6819      	ldr	r1, [r3, #0]
   23584:	428a      	cmp	r2, r1
   23586:	bf28      	it	cs
   23588:	460a      	movcs	r2, r1
   2358a:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2358c:	685d      	ldr	r5, [r3, #4]
   2358e:	681e      	ldr	r6, [r3, #0]
   23590:	4620      	mov	r0, r4
   23592:	f7f5 fc89 	bl	18ea8 <net_buf_id>
}
   23596:	fb00 5006 	mla	r0, r0, r6, r5
   2359a:	bd70      	pop	{r4, r5, r6, pc}

0002359c <net_buf_reset>:
	buf->len  = 0U;
   2359c:	2300      	movs	r3, #0
   2359e:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   235a0:	6903      	ldr	r3, [r0, #16]
   235a2:	6083      	str	r3, [r0, #8]
}
   235a4:	4770      	bx	lr

000235a6 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   235a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235aa:	b083      	sub	sp, #12
   235ac:	4605      	mov	r5, r0
   235ae:	9101      	str	r1, [sp, #4]
   235b0:	4616      	mov	r6, r2
   235b2:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   235b4:	4610      	mov	r0, r2
   235b6:	4619      	mov	r1, r3
   235b8:	f001 fcc7 	bl	24f4a <sys_clock_timeout_end_calc>
   235bc:	4682      	mov	sl, r0
   235be:	9100      	str	r1, [sp, #0]
   235c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   235c4:	f3ef 8b11 	mrs	fp, BASEPRI
   235c8:	f383 8811 	msr	BASEPRI, r3
   235cc:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   235d0:	8b6b      	ldrh	r3, [r5, #26]
   235d2:	2b00      	cmp	r3, #0
   235d4:	d03f      	beq.n	23656 <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   235d6:	8b2a      	ldrh	r2, [r5, #24]
   235d8:	4293      	cmp	r3, r2
   235da:	d32f      	bcc.n	2363c <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   235dc:	8b6a      	ldrh	r2, [r5, #26]
   235de:	1e53      	subs	r3, r2, #1
   235e0:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
   235e2:	f38b 8811 	msr	BASEPRI, fp
   235e6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   235ea:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   235ec:	8b2b      	ldrh	r3, [r5, #24]
   235ee:	1a9b      	subs	r3, r3, r2
   235f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   235f4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
   235f8:	4628      	mov	r0, r5
   235fa:	f7f5 fc41 	bl	18e80 <pool_id>
   235fe:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   23600:	9b01      	ldr	r3, [sp, #4]
   23602:	2b00      	cmp	r3, #0
   23604:	d046      	beq.n	23694 <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   23606:	ea56 0307 	orrs.w	r3, r6, r7
   2360a:	d005      	beq.n	23618 <net_buf_alloc_len+0x72>
   2360c:	f1b7 3fff 	cmp.w	r7, #4294967295
   23610:	bf08      	it	eq
   23612:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23616:	d12b      	bne.n	23670 <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   23618:	4632      	mov	r2, r6
   2361a:	463b      	mov	r3, r7
   2361c:	a901      	add	r1, sp, #4
   2361e:	4620      	mov	r0, r4
   23620:	f7ff ff81 	bl	23526 <data_alloc>
   23624:	4605      	mov	r5, r0
   23626:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   23628:	2800      	cmp	r0, #0
   2362a:	d135      	bne.n	23698 <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2362c:	79a0      	ldrb	r0, [r4, #6]
   2362e:	f7f5 fc33 	bl	18e98 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   23632:	4621      	mov	r1, r4
   23634:	f001 f8df 	bl	247f6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   23638:	462c      	mov	r4, r5
}
   2363a:	e037      	b.n	236ac <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
   2363c:	2200      	movs	r2, #0
   2363e:	2300      	movs	r3, #0
   23640:	4628      	mov	r0, r5
   23642:	f7f8 fa31 	bl	1baa8 <z_impl_k_queue_get>
			if (buf) {
   23646:	4604      	mov	r4, r0
   23648:	2800      	cmp	r0, #0
   2364a:	d0c7      	beq.n	235dc <net_buf_alloc_len+0x36>
   2364c:	f38b 8811 	msr	BASEPRI, fp
   23650:	f3bf 8f6f 	isb	sy
				goto success;
   23654:	e7d4      	b.n	23600 <net_buf_alloc_len+0x5a>
   23656:	f38b 8811 	msr	BASEPRI, fp
   2365a:	f3bf 8f6f 	isb	sy
   2365e:	4632      	mov	r2, r6
   23660:	463b      	mov	r3, r7
   23662:	4628      	mov	r0, r5
   23664:	f7f8 fa20 	bl	1baa8 <z_impl_k_queue_get>
	if (!buf) {
   23668:	4604      	mov	r4, r0
   2366a:	2800      	cmp	r0, #0
   2366c:	d1c8      	bne.n	23600 <net_buf_alloc_len+0x5a>
   2366e:	e01d      	b.n	236ac <net_buf_alloc_len+0x106>
			int64_t remaining = end - sys_clock_tick_get();
   23670:	f7f9 f9f2 	bl	1ca58 <sys_clock_tick_get>
   23674:	ebba 0800 	subs.w	r8, sl, r0
   23678:	9b00      	ldr	r3, [sp, #0]
   2367a:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   2367e:	f1b8 0f01 	cmp.w	r8, #1
   23682:	f179 0300 	sbcs.w	r3, r9, #0
   23686:	db02      	blt.n	2368e <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
   23688:	4646      	mov	r6, r8
   2368a:	464f      	mov	r7, r9
   2368c:	e7c4      	b.n	23618 <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
   2368e:	2600      	movs	r6, #0
   23690:	2700      	movs	r7, #0
   23692:	e7c1      	b.n	23618 <net_buf_alloc_len+0x72>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   23694:	2300      	movs	r3, #0
   23696:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   23698:	2301      	movs	r3, #1
   2369a:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   2369c:	2300      	movs	r3, #0
   2369e:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   236a0:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   236a2:	9b01      	ldr	r3, [sp, #4]
   236a4:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   236a6:	4620      	mov	r0, r4
   236a8:	f7ff ff78 	bl	2359c <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   236ac:	4620      	mov	r0, r4
   236ae:	b003      	add	sp, #12
   236b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000236b4 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   236b4:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   236b6:	6a01      	ldr	r1, [r0, #32]
   236b8:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   236ba:	6809      	ldr	r1, [r1, #0]
   236bc:	f7ff ff73 	bl	235a6 <net_buf_alloc_len>
}
   236c0:	bd08      	pop	{r3, pc}

000236c2 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   236c2:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   236c4:	4605      	mov	r5, r0
   236c6:	f7f8 f9ef 	bl	1baa8 <z_impl_k_queue_get>
	if (!buf) {
   236ca:	4606      	mov	r6, r0
   236cc:	b190      	cbz	r0, 236f4 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   236ce:	4604      	mov	r4, r0
   236d0:	e00a      	b.n	236e8 <net_buf_get+0x26>
   236d2:	2200      	movs	r2, #0
   236d4:	2300      	movs	r3, #0
   236d6:	4628      	mov	r0, r5
   236d8:	f7f8 f9e6 	bl	1baa8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   236dc:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   236de:	7963      	ldrb	r3, [r4, #5]
   236e0:	f023 0301 	bic.w	r3, r3, #1
   236e4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   236e6:	4604      	mov	r4, r0
   236e8:	7963      	ldrb	r3, [r4, #5]
   236ea:	f013 0f01 	tst.w	r3, #1
   236ee:	d1f0      	bne.n	236d2 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   236f0:	2300      	movs	r3, #0
   236f2:	6023      	str	r3, [r4, #0]

	return buf;
}
   236f4:	4630      	mov	r0, r6
   236f6:	bd70      	pop	{r4, r5, r6, pc}

000236f8 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   236f8:	6883      	ldr	r3, [r0, #8]
   236fa:	440b      	add	r3, r1
   236fc:	6003      	str	r3, [r0, #0]
}
   236fe:	4770      	bx	lr

00023700 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   23700:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   23702:	460a      	mov	r2, r1
   23704:	6814      	ldr	r4, [r2, #0]
   23706:	b12c      	cbz	r4, 23714 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   23708:	7953      	ldrb	r3, [r2, #5]
   2370a:	f043 0301 	orr.w	r3, r3, #1
   2370e:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   23710:	4622      	mov	r2, r4
   23712:	e7f7      	b.n	23704 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   23714:	f001 f87a 	bl	2480c <k_queue_append_list>
}
   23718:	bd10      	pop	{r4, pc}

0002371a <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2371a:	b538      	push	{r3, r4, r5, lr}
   2371c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2371e:	e00f      	b.n	23740 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   23720:	4620      	mov	r0, r4
   23722:	f7ff ff14 	bl	2354e <data_unref>
			buf->__buf = NULL;
   23726:	2300      	movs	r3, #0
   23728:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   2372a:	2300      	movs	r3, #0
   2372c:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   2372e:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   23730:	79a0      	ldrb	r0, [r4, #6]
   23732:	f7f5 fbb1 	bl	18e98 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   23736:	69c3      	ldr	r3, [r0, #28]
   23738:	b16b      	cbz	r3, 23756 <net_buf_unref+0x3c>
			pool->destroy(buf);
   2373a:	4620      	mov	r0, r4
   2373c:	4798      	blx	r3
{
   2373e:	462c      	mov	r4, r5
	while (buf) {
   23740:	b184      	cbz	r4, 23764 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   23742:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   23744:	7923      	ldrb	r3, [r4, #4]
   23746:	3b01      	subs	r3, #1
   23748:	b2db      	uxtb	r3, r3
   2374a:	7123      	strb	r3, [r4, #4]
   2374c:	b953      	cbnz	r3, 23764 <net_buf_unref+0x4a>
		if (buf->__buf) {
   2374e:	6921      	ldr	r1, [r4, #16]
   23750:	2900      	cmp	r1, #0
   23752:	d1e5      	bne.n	23720 <net_buf_unref+0x6>
   23754:	e7e9      	b.n	2372a <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   23756:	79a0      	ldrb	r0, [r4, #6]
   23758:	f7f5 fb9e 	bl	18e98 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2375c:	4621      	mov	r1, r4
   2375e:	f001 f84a 	bl	247f6 <k_queue_prepend>
}
   23762:	e7ec      	b.n	2373e <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   23764:	bd38      	pop	{r3, r4, r5, pc}

00023766 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23766:	7902      	ldrb	r2, [r0, #4]
   23768:	3201      	adds	r2, #1
   2376a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2376c:	4770      	bx	lr

0002376e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2376e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   23770:	4618      	mov	r0, r3
   23772:	681b      	ldr	r3, [r3, #0]
   23774:	2b00      	cmp	r3, #0
   23776:	d1fb      	bne.n	23770 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23778:	4770      	bx	lr

0002377a <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2377a:	b570      	push	{r4, r5, r6, lr}
   2377c:	4604      	mov	r4, r0
   2377e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   23780:	6806      	ldr	r6, [r0, #0]
   23782:	b11e      	cbz	r6, 2378c <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   23784:	4608      	mov	r0, r1
   23786:	f7ff fff2 	bl	2376e <net_buf_frag_last>
   2378a:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2378c:	6025      	str	r5, [r4, #0]
}
   2378e:	bd70      	pop	{r4, r5, r6, pc}

00023790 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   23790:	b538      	push	{r3, r4, r5, lr}
   23792:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   23794:	b138      	cbz	r0, 237a6 <net_buf_frag_add+0x16>
   23796:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23798:	f7ff ffe9 	bl	2376e <net_buf_frag_last>
   2379c:	4629      	mov	r1, r5
   2379e:	f7ff ffec 	bl	2377a <net_buf_frag_insert>

	return head;
   237a2:	4620      	mov	r0, r4
}
   237a4:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   237a6:	4608      	mov	r0, r1
   237a8:	f7ff ffdd 	bl	23766 <net_buf_ref>
   237ac:	e7fa      	b.n	237a4 <net_buf_frag_add+0x14>

000237ae <net_buf_simple_add>:
	return buf->data + buf->len;
   237ae:	6802      	ldr	r2, [r0, #0]
   237b0:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   237b2:	4419      	add	r1, r3
   237b4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   237b6:	18d0      	adds	r0, r2, r3
   237b8:	4770      	bx	lr

000237ba <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   237ba:	b538      	push	{r3, r4, r5, lr}
   237bc:	460d      	mov	r5, r1
   237be:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   237c0:	4611      	mov	r1, r2
   237c2:	f7ff fff4 	bl	237ae <net_buf_simple_add>
   237c6:	4622      	mov	r2, r4
   237c8:	4629      	mov	r1, r5
   237ca:	f7fd feac 	bl	21526 <memcpy>
}
   237ce:	bd38      	pop	{r3, r4, r5, pc}

000237d0 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   237d0:	b510      	push	{r4, lr}
   237d2:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   237d4:	2101      	movs	r1, #1
   237d6:	f7ff ffea 	bl	237ae <net_buf_simple_add>
	*u8 = val;
   237da:	7004      	strb	r4, [r0, #0]

	return u8;
}
   237dc:	bd10      	pop	{r4, pc}

000237de <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   237de:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   237e0:	6800      	ldr	r0, [r0, #0]
   237e2:	1a40      	subs	r0, r0, r1
   237e4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   237e6:	889a      	ldrh	r2, [r3, #4]
   237e8:	4411      	add	r1, r2
   237ea:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   237ec:	4770      	bx	lr

000237ee <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   237ee:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   237f0:	8882      	ldrh	r2, [r0, #4]
   237f2:	1a52      	subs	r2, r2, r1
   237f4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   237f6:	6800      	ldr	r0, [r0, #0]
   237f8:	4408      	add	r0, r1
   237fa:	6018      	str	r0, [r3, #0]
}
   237fc:	4770      	bx	lr

000237fe <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   237fe:	4603      	mov	r3, r0
	void *data = buf->data;
   23800:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23802:	889a      	ldrh	r2, [r3, #4]
   23804:	1a52      	subs	r2, r2, r1
   23806:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   23808:	4401      	add	r1, r0
   2380a:	6019      	str	r1, [r3, #0]

	return data;
}
   2380c:	4770      	bx	lr

0002380e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2380e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   23810:	6803      	ldr	r3, [r0, #0]
   23812:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   23814:	2102      	movs	r1, #2
   23816:	f7ff ffea 	bl	237ee <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2381a:	4620      	mov	r0, r4
   2381c:	bd10      	pop	{r4, pc}

0002381e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2381e:	6802      	ldr	r2, [r0, #0]
   23820:	6880      	ldr	r0, [r0, #8]
}
   23822:	1a10      	subs	r0, r2, r0
   23824:	4770      	bx	lr

00023826 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   23826:	b538      	push	{r3, r4, r5, lr}
   23828:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2382a:	88c5      	ldrh	r5, [r0, #6]
   2382c:	f7ff fff7 	bl	2381e <net_buf_simple_headroom>
   23830:	1a2d      	subs	r5, r5, r0
   23832:	88a0      	ldrh	r0, [r4, #4]
}
   23834:	1a28      	subs	r0, r5, r0
   23836:	bd38      	pop	{r3, r4, r5, pc}

00023838 <endtx_isr>:
	return dev->config;
   23838:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2383a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2383c:	f04f 0140 	mov.w	r1, #64	; 0x40
   23840:	f3ef 8211 	mrs	r2, BASEPRI
   23844:	f381 8811 	msr	BASEPRI, r1
   23848:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2384c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   23850:	b131      	cbz	r1, 23860 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23852:	2100      	movs	r1, #0
   23854:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   23858:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2385c:	2101      	movs	r1, #1
   2385e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   23860:	f382 8811 	msr	BASEPRI, r2
   23864:	f3bf 8f6f 	isb	sy
}
   23868:	4770      	bx	lr

0002386a <uarte_nrfx_isr_int>:
{
   2386a:	b538      	push	{r3, r4, r5, lr}
   2386c:	4604      	mov	r4, r0
	return dev->config;
   2386e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23870:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   23872:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   23876:	f413 7f80 	tst.w	r3, #256	; 0x100
   2387a:	d002      	beq.n	23882 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2387c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   23880:	b9db      	cbnz	r3, 238ba <uarte_nrfx_isr_int+0x50>
	return dev->config;
   23882:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   23884:	685b      	ldr	r3, [r3, #4]
   23886:	f013 0f10 	tst.w	r3, #16
   2388a:	d015      	beq.n	238b8 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   2388c:	f04f 0240 	mov.w	r2, #64	; 0x40
   23890:	f3ef 8311 	mrs	r3, BASEPRI
   23894:	f382 8811 	msr	BASEPRI, r2
   23898:	f3bf 8f6f 	isb	sy
   2389c:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   238a0:	b112      	cbz	r2, 238a8 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   238a2:	2200      	movs	r2, #0
   238a4:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   238a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   238ac:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   238b0:	f383 8811 	msr	BASEPRI, r3
   238b4:	f3bf 8f6f 	isb	sy
}
   238b8:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   238ba:	f7ff ffbd 	bl	23838 <endtx_isr>
   238be:	e7e0      	b.n	23882 <uarte_nrfx_isr_int+0x18>

000238c0 <uarte_nrfx_configure>:
{
   238c0:	b570      	push	{r4, r5, r6, lr}
   238c2:	b082      	sub	sp, #8
   238c4:	4605      	mov	r5, r0
   238c6:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   238c8:	794b      	ldrb	r3, [r1, #5]
   238ca:	2b01      	cmp	r3, #1
   238cc:	d006      	beq.n	238dc <uarte_nrfx_configure+0x1c>
   238ce:	2b03      	cmp	r3, #3
   238d0:	d011      	beq.n	238f6 <uarte_nrfx_configure+0x36>
   238d2:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   238d6:	4618      	mov	r0, r3
   238d8:	b002      	add	sp, #8
   238da:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   238dc:	2300      	movs	r3, #0
   238de:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   238e2:	79a3      	ldrb	r3, [r4, #6]
   238e4:	2b03      	cmp	r3, #3
   238e6:	d140      	bne.n	2396a <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   238e8:	79e3      	ldrb	r3, [r4, #7]
   238ea:	b143      	cbz	r3, 238fe <uarte_nrfx_configure+0x3e>
   238ec:	2b01      	cmp	r3, #1
   238ee:	d010      	beq.n	23912 <uarte_nrfx_configure+0x52>
   238f0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   238f4:	e7ef      	b.n	238d6 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   238f6:	2310      	movs	r3, #16
   238f8:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   238fc:	e7f1      	b.n	238e2 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   238fe:	2300      	movs	r3, #0
   23900:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   23904:	7923      	ldrb	r3, [r4, #4]
   23906:	b183      	cbz	r3, 2392a <uarte_nrfx_configure+0x6a>
   23908:	2b02      	cmp	r3, #2
   2390a:	d02a      	beq.n	23962 <uarte_nrfx_configure+0xa2>
   2390c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23910:	e7e1      	b.n	238d6 <uarte_nrfx_configure+0x16>
	return dev->config;
   23912:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   23914:	685b      	ldr	r3, [r3, #4]
   23916:	f003 0201 	and.w	r2, r3, #1
   2391a:	f003 0302 	and.w	r3, r3, #2
   2391e:	4313      	orrs	r3, r2
   23920:	d026      	beq.n	23970 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   23922:	2301      	movs	r3, #1
   23924:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   23928:	e7ec      	b.n	23904 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2392a:	2300      	movs	r3, #0
   2392c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   23930:	6821      	ldr	r1, [r4, #0]
   23932:	4628      	mov	r0, r5
   23934:	f7f5 fac6 	bl	18ec4 <baudrate_set>
   23938:	4603      	mov	r3, r0
   2393a:	b9e0      	cbnz	r0, 23976 <uarte_nrfx_configure+0xb6>
	return dev->config;
   2393c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2393e:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23940:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   23944:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   23948:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2394c:	4331      	orrs	r1, r6
   2394e:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   23950:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   23954:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   23956:	3204      	adds	r2, #4
   23958:	e894 0003 	ldmia.w	r4, {r0, r1}
   2395c:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   23960:	e7b9      	b.n	238d6 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   23962:	230e      	movs	r3, #14
   23964:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   23968:	e7e2      	b.n	23930 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   2396a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2396e:	e7b2      	b.n	238d6 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   23970:	f06f 0385 	mvn.w	r3, #133	; 0x85
   23974:	e7af      	b.n	238d6 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   23976:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2397a:	e7ac      	b.n	238d6 <uarte_nrfx_configure+0x16>

0002397c <uarte_nrfx_config_get>:
{
   2397c:	460b      	mov	r3, r1
	return dev->data;
   2397e:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   23980:	6891      	ldr	r1, [r2, #8]
   23982:	6850      	ldr	r0, [r2, #4]
   23984:	e883 0003 	stmia.w	r3, {r0, r1}
}
   23988:	2000      	movs	r0, #0
   2398a:	4770      	bx	lr

0002398c <uarte_nrfx_err_check>:
	return dev->config;
   2398c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2398e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   23990:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   23994:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   23998:	4770      	bx	lr

0002399a <is_tx_ready>:
	return dev->config;
   2399a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2399c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2399e:	685b      	ldr	r3, [r3, #4]
   239a0:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   239a4:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   239a8:	b929      	cbnz	r1, 239b6 <is_tx_ready+0x1c>
   239aa:	b933      	cbnz	r3, 239ba <is_tx_ready+0x20>
   239ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   239b0:	b92b      	cbnz	r3, 239be <is_tx_ready+0x24>
   239b2:	2000      	movs	r0, #0
   239b4:	4770      	bx	lr
   239b6:	2001      	movs	r0, #1
   239b8:	4770      	bx	lr
   239ba:	2000      	movs	r0, #0
   239bc:	4770      	bx	lr
   239be:	2001      	movs	r0, #1
}
   239c0:	4770      	bx	lr

000239c2 <uarte_enable>:
	return dev->config;
   239c2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   239c4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   239c6:	2208      	movs	r2, #8
   239c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   239cc:	4770      	bx	lr

000239ce <tx_start>:
{
   239ce:	b510      	push	{r4, lr}
	return dev->config;
   239d0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   239d2:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   239d4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   239d8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   239dc:	2300      	movs	r3, #0
   239de:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   239e2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   239e6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   239ea:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   239ee:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   239f0:	685b      	ldr	r3, [r3, #4]
   239f2:	f013 0f10 	tst.w	r3, #16
   239f6:	d102      	bne.n	239fe <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   239f8:	2301      	movs	r3, #1
   239fa:	60a3      	str	r3, [r4, #8]
}
   239fc:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   239fe:	2101      	movs	r1, #1
   23a00:	f7ff ffdf 	bl	239c2 <uarte_enable>
    p_reg->INTENSET = mask;
   23a04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   23a08:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   23a0c:	e7f4      	b.n	239f8 <tx_start+0x2a>

00023a0e <uarte_nrfx_poll_in>:
{
   23a0e:	b410      	push	{r4}
	return dev->data;
   23a10:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   23a12:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   23a14:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23a16:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   23a1a:	b152      	cbz	r2, 23a32 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   23a1c:	7c62      	ldrb	r2, [r4, #17]
   23a1e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a20:	2000      	movs	r0, #0
   23a22:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23a26:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23a2a:	2201      	movs	r2, #1
   23a2c:	601a      	str	r2, [r3, #0]
}
   23a2e:	bc10      	pop	{r4}
   23a30:	4770      	bx	lr
		return -1;
   23a32:	f04f 30ff 	mov.w	r0, #4294967295
   23a36:	e7fa      	b.n	23a2e <uarte_nrfx_poll_in+0x20>

00023a38 <wait_tx_ready>:
{
   23a38:	b570      	push	{r4, r5, r6, lr}
   23a3a:	4606      	mov	r6, r0
   23a3c:	e014      	b.n	23a68 <wait_tx_ready+0x30>
		if (res) {
   23a3e:	b17d      	cbz	r5, 23a60 <wait_tx_ready+0x28>
	__asm__ volatile(
   23a40:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a44:	f3ef 8411 	mrs	r4, BASEPRI
   23a48:	f383 8811 	msr	BASEPRI, r3
   23a4c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   23a50:	4630      	mov	r0, r6
   23a52:	f7ff ffa2 	bl	2399a <is_tx_ready>
   23a56:	b9a0      	cbnz	r0, 23a82 <wait_tx_ready+0x4a>
	__asm__ volatile(
   23a58:	f384 8811 	msr	BASEPRI, r4
   23a5c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   23a60:	2021      	movs	r0, #33	; 0x21
   23a62:	2100      	movs	r1, #0
   23a64:	f7f8 fe0e 	bl	1c684 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   23a68:	2464      	movs	r4, #100	; 0x64
   23a6a:	4630      	mov	r0, r6
   23a6c:	f7ff ff95 	bl	2399a <is_tx_ready>
   23a70:	4605      	mov	r5, r0
   23a72:	2800      	cmp	r0, #0
   23a74:	d1e3      	bne.n	23a3e <wait_tx_ready+0x6>
   23a76:	2001      	movs	r0, #1
   23a78:	f000 fc2c 	bl	242d4 <nrfx_busy_wait>
   23a7c:	3c01      	subs	r4, #1
   23a7e:	d1f4      	bne.n	23a6a <wait_tx_ready+0x32>
   23a80:	e7dd      	b.n	23a3e <wait_tx_ready+0x6>
}
   23a82:	4620      	mov	r0, r4
   23a84:	bd70      	pop	{r4, r5, r6, pc}

00023a86 <rng_pool_put>:
{
   23a86:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   23a88:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   23a8a:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   23a8c:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   23a8e:	1a9a      	subs	r2, r3, r2
   23a90:	ea34 0202 	bics.w	r2, r4, r2
   23a94:	d008      	beq.n	23aa8 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   23a96:	18c2      	adds	r2, r0, r3
   23a98:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   23a9a:	3301      	adds	r3, #1
   23a9c:	b25b      	sxtb	r3, r3
   23a9e:	4023      	ands	r3, r4
   23aa0:	7083      	strb	r3, [r0, #2]
	return 0;
   23aa2:	2000      	movs	r0, #0
}
   23aa4:	bc10      	pop	{r4}
   23aa6:	4770      	bx	lr
		return -ENOBUFS;
   23aa8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23aac:	e7fa      	b.n	23aa4 <rng_pool_put+0x1e>

00023aae <rng_pool_init>:
	rngp->first_alloc = 0U;
   23aae:	2300      	movs	r3, #0
   23ab0:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   23ab2:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   23ab4:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   23ab6:	3901      	subs	r1, #1
   23ab8:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   23aba:	7102      	strb	r2, [r0, #4]
}
   23abc:	4770      	bx	lr

00023abe <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   23abe:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ac0:	b083      	sub	sp, #12
   23ac2:	460f      	mov	r7, r1
   23ac4:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   23ac6:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   23aca:	2400      	movs	r4, #0
	int res = -EINVAL;
   23acc:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   23ad0:	e00a      	b.n	23ae8 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   23ad2:	ab01      	add	r3, sp, #4
   23ad4:	462a      	mov	r2, r5
   23ad6:	1939      	adds	r1, r7, r4
   23ad8:	2000      	movs	r0, #0
   23ada:	f7f9 fbf7 	bl	1d2cc <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   23ade:	9b01      	ldr	r3, [sp, #4]
   23ae0:	42ab      	cmp	r3, r5
   23ae2:	d109      	bne.n	23af8 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   23ae4:	b950      	cbnz	r0, 23afc <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   23ae6:	442c      	add	r4, r5
	while (offset < length) {
   23ae8:	42a6      	cmp	r6, r4
   23aea:	d907      	bls.n	23afc <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   23aec:	1b33      	subs	r3, r6, r4
   23aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23af2:	d2ee      	bcs.n	23ad2 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   23af4:	461d      	mov	r5, r3
   23af6:	e7ec      	b.n	23ad2 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   23af8:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   23afc:	b003      	add	sp, #12
   23afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023b00 <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   23b00:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   23b02:	2200      	movs	r2, #0
   23b04:	4611      	mov	r1, r2
   23b06:	4610      	mov	r0, r2
   23b08:	f7f9 fbac 	bl	1d264 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   23b0c:	b900      	cbnz	r0, 23b10 <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   23b0e:	bd08      	pop	{r3, pc}
			return -EINVAL;
   23b10:	f06f 0015 	mvn.w	r0, #21
   23b14:	e7fb      	b.n	23b0e <entropy_cc3xx_rng_init+0xe>

00023b16 <event_packet_is_discardable>:
	switch (hdr->evt) {
   23b16:	7803      	ldrb	r3, [r0, #0]
   23b18:	2b3e      	cmp	r3, #62	; 0x3e
   23b1a:	d003      	beq.n	23b24 <event_packet_is_discardable+0xe>
   23b1c:	2bff      	cmp	r3, #255	; 0xff
   23b1e:	d00a      	beq.n	23b36 <event_packet_is_discardable+0x20>
   23b20:	2000      	movs	r0, #0
   23b22:	4770      	bx	lr
		switch (me->subevent) {
   23b24:	7883      	ldrb	r3, [r0, #2]
   23b26:	2b02      	cmp	r3, #2
   23b28:	d00c      	beq.n	23b44 <event_packet_is_discardable+0x2e>
   23b2a:	2b0d      	cmp	r3, #13
   23b2c:	d001      	beq.n	23b32 <event_packet_is_discardable+0x1c>
			return false;
   23b2e:	2000      	movs	r0, #0
   23b30:	4770      	bx	lr
		switch (me->subevent) {
   23b32:	2001      	movs	r0, #1
   23b34:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   23b36:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   23b38:	2b80      	cmp	r3, #128	; 0x80
   23b3a:	d001      	beq.n	23b40 <event_packet_is_discardable+0x2a>
			return false;
   23b3c:	2000      	movs	r0, #0
}
   23b3e:	4770      	bx	lr
			return true;
   23b40:	2001      	movs	r0, #1
   23b42:	4770      	bx	lr
		switch (me->subevent) {
   23b44:	2001      	movs	r0, #1
   23b46:	4770      	bx	lr

00023b48 <hci_driver_send>:
{
   23b48:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   23b4a:	8983      	ldrh	r3, [r0, #12]
   23b4c:	b183      	cbz	r3, 23b70 <hci_driver_send+0x28>
   23b4e:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   23b50:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   23b52:	b14b      	cbz	r3, 23b68 <hci_driver_send+0x20>
   23b54:	2b02      	cmp	r3, #2
   23b56:	d10e      	bne.n	23b76 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   23b58:	f7f5 fd80 	bl	1965c <acl_handle>
   23b5c:	4605      	mov	r5, r0
	if (!err) {
   23b5e:	b965      	cbnz	r5, 23b7a <hci_driver_send+0x32>
		net_buf_unref(buf);
   23b60:	4620      	mov	r0, r4
   23b62:	f7ff fdda 	bl	2371a <net_buf_unref>
   23b66:	e008      	b.n	23b7a <hci_driver_send+0x32>
		err = cmd_handle(buf);
   23b68:	f7f5 fd92 	bl	19690 <cmd_handle>
   23b6c:	4605      	mov	r5, r0
		break;
   23b6e:	e7f6      	b.n	23b5e <hci_driver_send+0x16>
		return -EINVAL;
   23b70:	f06f 0515 	mvn.w	r5, #21
   23b74:	e001      	b.n	23b7a <hci_driver_send+0x32>
	switch (type) {
   23b76:	f06f 0515 	mvn.w	r5, #21
}
   23b7a:	4628      	mov	r0, r5
   23b7c:	bd38      	pop	{r3, r4, r5, pc}

00023b7e <fetch_and_process_hci_evt>:
{
   23b7e:	b538      	push	{r3, r4, r5, lr}
   23b80:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23b82:	f04f 30ff 	mov.w	r0, #4294967295
   23b86:	f04f 31ff 	mov.w	r1, #4294967295
   23b8a:	f7f5 fcf5 	bl	19578 <multithreading_lock_acquire>
	if (!errcode) {
   23b8e:	4605      	mov	r5, r0
   23b90:	b110      	cbz	r0, 23b98 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   23b92:	b145      	cbz	r5, 23ba6 <fetch_and_process_hci_evt+0x28>
		return false;
   23b94:	2000      	movs	r0, #0
}
   23b96:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   23b98:	4620      	mov	r0, r4
   23b9a:	f7f5 ff5f 	bl	19a5c <hci_internal_evt_get>
   23b9e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   23ba0:	f7f5 fcf4 	bl	1958c <multithreading_lock_release>
   23ba4:	e7f5      	b.n	23b92 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   23ba6:	4620      	mov	r0, r4
   23ba8:	f7f5 fdb4 	bl	19714 <event_packet_process>
	return true;
   23bac:	2001      	movs	r0, #1
   23bae:	e7f2      	b.n	23b96 <fetch_and_process_hci_evt+0x18>

00023bb0 <fetch_and_process_acl_data>:
{
   23bb0:	b538      	push	{r3, r4, r5, lr}
   23bb2:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   23bb4:	f04f 30ff 	mov.w	r0, #4294967295
   23bb8:	f04f 31ff 	mov.w	r1, #4294967295
   23bbc:	f7f5 fcdc 	bl	19578 <multithreading_lock_acquire>
	if (!errcode) {
   23bc0:	4605      	mov	r5, r0
   23bc2:	b110      	cbz	r0, 23bca <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   23bc4:	b145      	cbz	r5, 23bd8 <fetch_and_process_acl_data+0x28>
		return false;
   23bc6:	2000      	movs	r0, #0
}
   23bc8:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   23bca:	4620      	mov	r0, r4
   23bcc:	f7e8 f9ad 	bl	bf2a <sdc_hci_data_get>
   23bd0:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   23bd2:	f7f5 fcdb 	bl	1958c <multithreading_lock_release>
   23bd6:	e7f5      	b.n	23bc4 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   23bd8:	4620      	mov	r0, r4
   23bda:	f7f5 fdd3 	bl	19784 <data_packet_process>
	return true;
   23bde:	2001      	movs	r0, #1
   23be0:	e7f2      	b.n	23bc8 <fetch_and_process_acl_data+0x18>

00023be2 <configure_supported_features>:
{
   23be2:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   23be4:	f7e0 f814 	bl	3c10 <sdc_support_adv>
			if (err) {
   23be8:	b948      	cbnz	r0, 23bfe <configure_supported_features+0x1c>
		err = sdc_support_slave();
   23bea:	f7e0 f841 	bl	3c70 <sdc_support_slave>
		if (err) {
   23bee:	b948      	cbnz	r0, 23c04 <configure_supported_features+0x22>
		err = sdc_support_dle();
   23bf0:	f7e0 f81e 	bl	3c30 <sdc_support_dle>
		if (err) {
   23bf4:	b948      	cbnz	r0, 23c0a <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   23bf6:	f7e0 f82b 	bl	3c50 <sdc_support_le_2m_phy>
		if (err) {
   23bfa:	b948      	cbnz	r0, 23c10 <configure_supported_features+0x2e>
}
   23bfc:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   23bfe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23c02:	e7fb      	b.n	23bfc <configure_supported_features+0x1a>
			return -ENOTSUP;
   23c04:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23c08:	e7f8      	b.n	23bfc <configure_supported_features+0x1a>
			return -ENOTSUP;
   23c0a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23c0e:	e7f5      	b.n	23bfc <configure_supported_features+0x1a>
			return -ENOTSUP;
   23c10:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23c14:	e7f2      	b.n	23bfc <configure_supported_features+0x1a>

00023c16 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   23c16:	f242 0332 	movw	r3, #8242	; 0x2032
   23c1a:	4298      	cmp	r0, r3
   23c1c:	d82b      	bhi.n	23c76 <command_generates_command_complete_event+0x60>
   23c1e:	f242 030d 	movw	r3, #8205	; 0x200d
   23c22:	4298      	cmp	r0, r3
   23c24:	d20b      	bcs.n	23c3e <command_generates_command_complete_event+0x28>
   23c26:	f240 4306 	movw	r3, #1030	; 0x406
   23c2a:	4298      	cmp	r0, r3
   23c2c:	d02b      	beq.n	23c86 <command_generates_command_complete_event+0x70>
   23c2e:	f240 431d 	movw	r3, #1053	; 0x41d
   23c32:	4298      	cmp	r0, r3
   23c34:	d001      	beq.n	23c3a <command_generates_command_complete_event+0x24>
		return true;
   23c36:	2001      	movs	r0, #1
   23c38:	4770      	bx	lr
	switch (hci_opcode) {
   23c3a:	2000      	movs	r0, #0
   23c3c:	4770      	bx	lr
   23c3e:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   23c42:	380d      	subs	r0, #13
   23c44:	2825      	cmp	r0, #37	; 0x25
   23c46:	d820      	bhi.n	23c8a <command_generates_command_complete_event+0x74>
   23c48:	e8df f000 	tbb	[pc, r0]
   23c4c:	1f1f1f13 	.word	0x1f1f1f13
   23c50:	1f131f1f 	.word	0x1f131f1f
   23c54:	1f1f131f 	.word	0x1f1f131f
   23c58:	1f1f1f13 	.word	0x1f1f1f13
   23c5c:	1f1f1f1f 	.word	0x1f1f1f1f
   23c60:	1f1f1f1f 	.word	0x1f1f1f1f
   23c64:	1f1f1f1f 	.word	0x1f1f1f1f
   23c68:	1f1f1f1f 	.word	0x1f1f1f1f
   23c6c:	1f1f1f1f 	.word	0x1f1f1f1f
   23c70:	131f      	.short	0x131f
   23c72:	2000      	movs	r0, #0
   23c74:	4770      	bx	lr
   23c76:	f242 0343 	movw	r3, #8259	; 0x2043
   23c7a:	4298      	cmp	r0, r3
   23c7c:	d001      	beq.n	23c82 <command_generates_command_complete_event+0x6c>
		return true;
   23c7e:	2001      	movs	r0, #1
}
   23c80:	4770      	bx	lr
	switch (hci_opcode) {
   23c82:	2000      	movs	r0, #0
   23c84:	4770      	bx	lr
   23c86:	2000      	movs	r0, #0
   23c88:	4770      	bx	lr
		return true;
   23c8a:	2001      	movs	r0, #1
   23c8c:	4770      	bx	lr

00023c8e <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23c8e:	230f      	movs	r3, #15
   23c90:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   23c92:	2304      	movs	r3, #4
   23c94:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   23c96:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   23c98:	2301      	movs	r3, #1
   23c9a:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   23c9c:	8081      	strh	r1, [r0, #4]
}
   23c9e:	4770      	bx	lr

00023ca0 <encode_command_complete_header>:
{
   23ca0:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   23ca2:	240e      	movs	r4, #14
   23ca4:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   23ca6:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   23ca8:	2201      	movs	r2, #1
   23caa:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   23cac:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   23cb0:	7143      	strb	r3, [r0, #5]
}
   23cb2:	bc10      	pop	{r4}
   23cb4:	4770      	bx	lr

00023cb6 <le_read_supported_states>:
	*buf = states1;
   23cb6:	238f      	movs	r3, #143	; 0x8f
   23cb8:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   23cba:	23c0      	movs	r3, #192	; 0xc0
   23cbc:	7103      	strb	r3, [r0, #4]
}
   23cbe:	4770      	bx	lr

00023cc0 <status_param_cmd_put>:
}
   23cc0:	2001      	movs	r0, #1
   23cc2:	4770      	bx	lr

00023cc4 <link_control_cmd_put>:
{
   23cc4:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   23cc6:	7842      	ldrb	r2, [r0, #1]
   23cc8:	f810 3b03 	ldrb.w	r3, [r0], #3
   23ccc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23cd0:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23cd2:	f240 4206 	movw	r2, #1030	; 0x406
   23cd6:	4293      	cmp	r3, r2
   23cd8:	d005      	beq.n	23ce6 <link_control_cmd_put+0x22>
   23cda:	f240 421d 	movw	r2, #1053	; 0x41d
   23cde:	4293      	cmp	r3, r2
   23ce0:	d004      	beq.n	23cec <link_control_cmd_put+0x28>
   23ce2:	2001      	movs	r0, #1
}
   23ce4:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   23ce6:	f7e8 fa4f 	bl	c188 <sdc_hci_cmd_lc_disconnect>
   23cea:	e7fb      	b.n	23ce4 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   23cec:	f7e8 fa4e 	bl	c18c <sdc_hci_cmd_lc_read_remote_version_information>
   23cf0:	e7f8      	b.n	23ce4 <link_control_cmd_put+0x20>

00023cf2 <controller_and_baseband_cmd_put>:
{
   23cf2:	b538      	push	{r3, r4, r5, lr}
   23cf4:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23cf6:	3003      	adds	r0, #3
   23cf8:	7865      	ldrb	r5, [r4, #1]
   23cfa:	7823      	ldrb	r3, [r4, #0]
   23cfc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23d00:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23d02:	f640 4463 	movw	r4, #3171	; 0xc63
   23d06:	42a3      	cmp	r3, r4
   23d08:	d02c      	beq.n	23d64 <controller_and_baseband_cmd_put+0x72>
   23d0a:	f101 0106 	add.w	r1, r1, #6
   23d0e:	dc16      	bgt.n	23d3e <controller_and_baseband_cmd_put+0x4c>
   23d10:	f640 4403 	movw	r4, #3075	; 0xc03
   23d14:	42a3      	cmp	r3, r4
   23d16:	d022      	beq.n	23d5e <controller_and_baseband_cmd_put+0x6c>
   23d18:	f640 442d 	movw	r4, #3117	; 0xc2d
   23d1c:	42a3      	cmp	r3, r4
   23d1e:	d105      	bne.n	23d2c <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   23d20:	7813      	ldrb	r3, [r2, #0]
   23d22:	3303      	adds	r3, #3
   23d24:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   23d26:	f7e8 f927 	bl	bf78 <sdc_hci_cmd_cb_read_transmit_power_level>
   23d2a:	e007      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   23d2c:	f640 4201 	movw	r2, #3073	; 0xc01
   23d30:	4293      	cmp	r3, r2
   23d32:	d102      	bne.n	23d3a <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   23d34:	f7e8 f922 	bl	bf7c <sdc_hci_cmd_cb_set_event_mask>
   23d38:	e000      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   23d3a:	2001      	movs	r0, #1
}
   23d3c:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   23d3e:	f640 447b 	movw	r4, #3195	; 0xc7b
   23d42:	42a3      	cmp	r3, r4
   23d44:	d011      	beq.n	23d6a <controller_and_baseband_cmd_put+0x78>
   23d46:	f640 447c 	movw	r4, #3196	; 0xc7c
   23d4a:	42a3      	cmp	r3, r4
   23d4c:	d105      	bne.n	23d5a <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   23d4e:	7813      	ldrb	r3, [r2, #0]
   23d50:	3302      	adds	r3, #2
   23d52:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   23d54:	f7e8 f91c 	bl	bf90 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   23d58:	e7f0      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   23d5a:	2001      	movs	r0, #1
   23d5c:	e7ee      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   23d5e:	f7e0 f8e9 	bl	3f34 <sdc_hci_cmd_cb_reset>
   23d62:	e7eb      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   23d64:	f7e8 f90f 	bl	bf86 <sdc_hci_cmd_cb_set_event_mask_page_2>
   23d68:	e7e8      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   23d6a:	7813      	ldrb	r3, [r2, #0]
   23d6c:	3304      	adds	r3, #4
   23d6e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   23d70:	f7e8 f900 	bl	bf74 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   23d74:	e7e2      	b.n	23d3c <controller_and_baseband_cmd_put+0x4a>

00023d76 <supported_commands>:
{
   23d76:	b510      	push	{r4, lr}
   23d78:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   23d7a:	222e      	movs	r2, #46	; 0x2e
   23d7c:	2100      	movs	r1, #0
   23d7e:	f7fd fbf6 	bl	2156e <memset>
	cmds->hci_disconnect = 1;
   23d82:	7823      	ldrb	r3, [r4, #0]
   23d84:	f043 0320 	orr.w	r3, r3, #32
   23d88:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   23d8a:	78a3      	ldrb	r3, [r4, #2]
   23d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23d90:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   23d92:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   23d94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   23d98:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   23d9a:	7aa3      	ldrb	r3, [r4, #10]
   23d9c:	f043 0304 	orr.w	r3, r3, #4
   23da0:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   23da2:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   23da4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   23da8:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   23daa:	7be3      	ldrb	r3, [r4, #15]
   23dac:	f043 0302 	orr.w	r3, r3, #2
   23db0:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   23db2:	7da3      	ldrb	r3, [r4, #22]
   23db4:	f043 0304 	orr.w	r3, r3, #4
   23db8:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   23dba:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   23dbc:	f043 03f7 	orr.w	r3, r3, #247	; 0xf7
   23dc0:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   23dc2:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   23dc4:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   23dc8:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   23dca:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   23dcc:	f043 03f3 	orr.w	r3, r3, #243	; 0xf3
   23dd0:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   23dd2:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   23dd4:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   23dd8:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   23dda:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   23dde:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   23de2:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   23de6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   23dea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   23dee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   23df2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   23df6:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   23dfa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   23dfe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   23e02:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   23e06:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   23e0a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   23e0e:	f043 0301 	orr.w	r3, r3, #1
   23e12:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   23e16:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   23e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23e1e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   23e22:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   23e26:	f043 0304 	orr.w	r3, r3, #4
   23e2a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   23e2e:	bd10      	pop	{r4, pc}

00023e30 <supported_features>:
{
   23e30:	b510      	push	{r4, lr}
   23e32:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   23e34:	2208      	movs	r2, #8
   23e36:	2100      	movs	r1, #0
   23e38:	f7fd fb99 	bl	2156e <memset>
	features->bdedr_not_supported = 1;
   23e3c:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   23e3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   23e42:	7123      	strb	r3, [r4, #4]
}
   23e44:	bd10      	pop	{r4, pc}

00023e46 <info_param_cmd_put>:
{
   23e46:	b538      	push	{r3, r4, r5, lr}
   23e48:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23e4a:	1d88      	adds	r0, r1, #6
   23e4c:	7865      	ldrb	r5, [r4, #1]
   23e4e:	7823      	ldrb	r3, [r4, #0]
   23e50:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23e54:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23e56:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   23e5a:	3b01      	subs	r3, #1
   23e5c:	2b08      	cmp	r3, #8
   23e5e:	d820      	bhi.n	23ea2 <info_param_cmd_put+0x5c>
   23e60:	e8df f003 	tbb	[pc, r3]
   23e64:	1f120b05 	.word	0x1f120b05
   23e68:	1f1f1f1f 	.word	0x1f1f1f1f
   23e6c:	19          	.byte	0x19
   23e6d:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   23e6e:	7813      	ldrb	r3, [r2, #0]
   23e70:	3308      	adds	r3, #8
   23e72:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   23e74:	f7e8 f93d 	bl	c0f2 <sdc_hci_cmd_ip_read_local_version_information>
   23e78:	e014      	b.n	23ea4 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   23e7a:	7813      	ldrb	r3, [r2, #0]
   23e7c:	3340      	adds	r3, #64	; 0x40
   23e7e:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   23e80:	f7ff ff79 	bl	23d76 <supported_commands>
		return 0;
   23e84:	2000      	movs	r0, #0
   23e86:	e00d      	b.n	23ea4 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   23e88:	7813      	ldrb	r3, [r2, #0]
   23e8a:	3308      	adds	r3, #8
   23e8c:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   23e8e:	f7ff ffcf 	bl	23e30 <supported_features>
		return 0;
   23e92:	2000      	movs	r0, #0
   23e94:	e006      	b.n	23ea4 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   23e96:	7813      	ldrb	r3, [r2, #0]
   23e98:	3306      	adds	r3, #6
   23e9a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   23e9c:	f7e8 f927 	bl	c0ee <sdc_hci_cmd_ip_read_bd_addr>
   23ea0:	e000      	b.n	23ea4 <info_param_cmd_put+0x5e>
   23ea2:	2001      	movs	r0, #1
}
   23ea4:	bd38      	pop	{r3, r4, r5, pc}

00023ea6 <le_supported_features>:
{
   23ea6:	b510      	push	{r4, lr}
   23ea8:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   23eaa:	2205      	movs	r2, #5
   23eac:	2100      	movs	r1, #0
   23eae:	f7fd fb5e 	bl	2156e <memset>
	features->le_encryption = 1;
   23eb2:	7823      	ldrb	r3, [r4, #0]
	features->ll_privacy = 1;
   23eb4:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   23eb8:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   23eba:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   23ebc:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   23ec0:	7063      	strb	r3, [r4, #1]
}
   23ec2:	bd10      	pop	{r4, pc}

00023ec4 <vs_zephyr_supported_commands>:
{
   23ec4:	b510      	push	{r4, lr}
   23ec6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   23ec8:	2202      	movs	r2, #2
   23eca:	2100      	movs	r1, #0
   23ecc:	f7fd fb4f 	bl	2156e <memset>
	cmds->read_version_info = 1;
   23ed0:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   23ed2:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   23ed6:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   23ed8:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   23eda:	f043 0307 	orr.w	r3, r3, #7
   23ede:	7063      	strb	r3, [r4, #1]
}
   23ee0:	bd10      	pop	{r4, pc}

00023ee2 <vs_supported_commands>:
{
   23ee2:	b510      	push	{r4, lr}
   23ee4:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   23ee6:	2201      	movs	r2, #1
   23ee8:	2100      	movs	r1, #0
   23eea:	f7fd fb40 	bl	2156e <memset>
	cmds->read_supported_vs_commands = 1;
   23eee:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   23ef0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   23ef4:	7023      	strb	r3, [r4, #0]
}
   23ef6:	bd10      	pop	{r4, pc}

00023ef8 <le_controller_cmd_put>:
{
   23ef8:	b538      	push	{r3, r4, r5, lr}
   23efa:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23efc:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   23efe:	3106      	adds	r1, #6
   23f00:	7865      	ldrb	r5, [r4, #1]
   23f02:	7823      	ldrb	r3, [r4, #0]
   23f04:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   23f08:	b21b      	sxth	r3, r3
	switch (opcode)	{
   23f0a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   23f0e:	3b01      	subs	r3, #1
   23f10:	2b4d      	cmp	r3, #77	; 0x4d
   23f12:	f200 80ce 	bhi.w	240b2 <le_controller_cmd_put+0x1ba>
   23f16:	e8df f003 	tbb	[pc, r3]
   23f1a:	2a27      	.short	0x2a27
   23f1c:	3c39cc31 	.word	0x3c39cc31
   23f20:	4c49463f 	.word	0x4c49463f
   23f24:	cccccccc 	.word	0xcccccccc
   23f28:	5c59564f 	.word	0x5c59564f
   23f2c:	655fcccc 	.word	0x655fcccc
   23f30:	75cc6e68 	.word	0x75cc6e68
   23f34:	cccc817b 	.word	0xcccc817b
   23f38:	89cccccc 	.word	0x89cccccc
   23f3c:	cccc968f 	.word	0xcccc968f
   23f40:	a29f9c99 	.word	0xa29f9c99
   23f44:	aca9cccc 	.word	0xaca9cccc
   23f48:	bfbcb6af 	.word	0xbfbcb6af
   23f4c:	cccccccc 	.word	0xcccccccc
   23f50:	cccccccc 	.word	0xcccccccc
   23f54:	cccccccc 	.word	0xcccccccc
   23f58:	cccccccc 	.word	0xcccccccc
   23f5c:	cccccccc 	.word	0xcccccccc
   23f60:	cccccccc 	.word	0xcccccccc
   23f64:	c9ccccc2 	.word	0xc9ccccc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   23f68:	f7e8 f8fd 	bl	c166 <sdc_hci_cmd_le_set_event_mask>
   23f6c:	e0a2      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   23f6e:	7813      	ldrb	r3, [r2, #0]
   23f70:	3303      	adds	r3, #3
   23f72:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   23f74:	4608      	mov	r0, r1
   23f76:	f7e8 f8d4 	bl	c122 <sdc_hci_cmd_le_read_buffer_size>
   23f7a:	e09b      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   23f7c:	7813      	ldrb	r3, [r2, #0]
   23f7e:	3308      	adds	r3, #8
   23f80:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   23f82:	4608      	mov	r0, r1
   23f84:	f7ff ff8f 	bl	23ea6 <le_supported_features>
		return 0;
   23f88:	2000      	movs	r0, #0
   23f8a:	e093      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   23f8c:	f7e8 f8f4 	bl	c178 <sdc_hci_cmd_le_set_random_address>
   23f90:	e090      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   23f92:	f7e8 f8e2 	bl	c15a <sdc_hci_cmd_le_set_adv_params>
   23f96:	e08d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   23f98:	7813      	ldrb	r3, [r2, #0]
   23f9a:	3301      	adds	r3, #1
   23f9c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   23f9e:	4608      	mov	r0, r1
   23fa0:	f7e8 f8bd 	bl	c11e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   23fa4:	e086      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   23fa6:	f7e8 f8d4 	bl	c152 <sdc_hci_cmd_le_set_adv_data>
   23faa:	e083      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   23fac:	f7e8 f8e8 	bl	c180 <sdc_hci_cmd_le_set_scan_response_data>
   23fb0:	e080      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   23fb2:	f7e8 f8d0 	bl	c156 <sdc_hci_cmd_le_set_adv_enable>
   23fb6:	e07d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   23fb8:	7813      	ldrb	r3, [r2, #0]
   23fba:	3301      	adds	r3, #1
   23fbc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   23fbe:	4608      	mov	r0, r1
   23fc0:	f7e8 f8bf 	bl	c142 <sdc_hci_cmd_le_read_white_list_size>
   23fc4:	e076      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   23fc6:	f7e8 f89c 	bl	c102 <sdc_hci_cmd_le_clear_white_list>
   23fca:	e073      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   23fcc:	f7e8 f895 	bl	c0fa <sdc_hci_cmd_le_add_device_to_white_list>
   23fd0:	e070      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   23fd2:	f7e8 f8ba 	bl	c14a <sdc_hci_cmd_le_remove_device_from_white_list>
   23fd6:	e06d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   23fd8:	7813      	ldrb	r3, [r2, #0]
   23fda:	3307      	adds	r3, #7
   23fdc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   23fde:	f7e8 f8a2 	bl	c126 <sdc_hci_cmd_le_read_channel_map>
   23fe2:	e067      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   23fe4:	f7e8 f8a5 	bl	c132 <sdc_hci_cmd_le_read_remote_features>
   23fe8:	e064      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   23fea:	7813      	ldrb	r3, [r2, #0]
   23fec:	3310      	adds	r3, #16
   23fee:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   23ff0:	f7e8 f889 	bl	c106 <sdc_hci_cmd_le_encrypt>
   23ff4:	e05e      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   23ff6:	7813      	ldrb	r3, [r2, #0]
   23ff8:	3308      	adds	r3, #8
   23ffa:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   23ffc:	4608      	mov	r0, r1
   23ffe:	f7e8 f88c 	bl	c11a <sdc_hci_cmd_le_rand>
   24002:	e057      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   24004:	7813      	ldrb	r3, [r2, #0]
   24006:	3302      	adds	r3, #2
   24008:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2400a:	f7e8 f882 	bl	c112 <sdc_hci_cmd_le_long_term_key_request_reply>
   2400e:	e051      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   24010:	7813      	ldrb	r3, [r2, #0]
   24012:	3302      	adds	r3, #2
   24014:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   24016:	f7e8 f878 	bl	c10a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   2401a:	e04b      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2401c:	7813      	ldrb	r3, [r2, #0]
   2401e:	3308      	adds	r3, #8
   24020:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   24022:	4608      	mov	r0, r1
   24024:	f7ff fe47 	bl	23cb6 <le_read_supported_states>
		return 0;
   24028:	2000      	movs	r0, #0
   2402a:	e043      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2402c:	7813      	ldrb	r3, [r2, #0]
   2402e:	3302      	adds	r3, #2
   24030:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   24032:	f7e8 f894 	bl	c15e <sdc_hci_cmd_le_set_data_length>
   24036:	e03d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   24038:	7813      	ldrb	r3, [r2, #0]
   2403a:	3304      	adds	r3, #4
   2403c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2403e:	4608      	mov	r0, r1
   24040:	f7e8 f87b 	bl	c13a <sdc_hci_cmd_le_read_suggested_default_data_length>
   24044:	e036      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   24046:	f7e8 f89d 	bl	c184 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2404a:	e033      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2404c:	f7e8 f853 	bl	c0f6 <sdc_hci_cmd_le_add_device_to_resolving_list>
   24050:	e030      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   24052:	f7e8 f878 	bl	c146 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   24056:	e02d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   24058:	f7e8 f851 	bl	c0fe <sdc_hci_cmd_le_clear_resolving_list>
   2405c:	e02a      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2405e:	7813      	ldrb	r3, [r2, #0]
   24060:	3301      	adds	r3, #1
   24062:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   24064:	4608      	mov	r0, r1
   24066:	f7e8 f866 	bl	c136 <sdc_hci_cmd_le_read_resolving_list_size>
   2406a:	e023      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2406c:	f7e8 f86f 	bl	c14e <sdc_hci_cmd_le_set_address_resolution_enable>
   24070:	e020      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   24072:	f7e8 f883 	bl	c17c <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   24076:	e01d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   24078:	7813      	ldrb	r3, [r2, #0]
   2407a:	3308      	adds	r3, #8
   2407c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2407e:	4608      	mov	r0, r1
   24080:	f7e8 f853 	bl	c12a <sdc_hci_cmd_le_read_max_data_length>
   24084:	e016      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   24086:	7813      	ldrb	r3, [r2, #0]
   24088:	3304      	adds	r3, #4
   2408a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2408c:	f7e8 f84f 	bl	c12e <sdc_hci_cmd_le_read_phy>
   24090:	e010      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   24092:	f7e8 f866 	bl	c162 <sdc_hci_cmd_le_set_default_phy>
   24096:	e00d      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   24098:	f7e8 f86a 	bl	c170 <sdc_hci_cmd_le_set_phy>
   2409c:	e00a      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2409e:	7813      	ldrb	r3, [r2, #0]
   240a0:	3302      	adds	r3, #2
   240a2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   240a4:	4608      	mov	r0, r1
   240a6:	f7e8 f84a 	bl	c13e <sdc_hci_cmd_le_read_transmit_power>
   240aa:	e003      	b.n	240b4 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   240ac:	f7e8 f862 	bl	c174 <sdc_hci_cmd_le_set_privacy_mode>
   240b0:	e000      	b.n	240b4 <le_controller_cmd_put+0x1bc>
   240b2:	2001      	movs	r0, #1
}
   240b4:	bd38      	pop	{r3, r4, r5, pc}

000240b6 <vs_cmd_put>:
{
   240b6:	b538      	push	{r3, r4, r5, lr}
   240b8:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   240ba:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   240bc:	3106      	adds	r1, #6
   240be:	7865      	ldrb	r5, [r4, #1]
   240c0:	7823      	ldrb	r3, [r4, #0]
   240c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   240c6:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   240ca:	42a3      	cmp	r3, r4
   240cc:	d90f      	bls.n	240ee <vs_cmd_put+0x38>
   240ce:	f64f 5405 	movw	r4, #64773	; 0xfd05
   240d2:	42a3      	cmp	r3, r4
   240d4:	d85b      	bhi.n	2418e <vs_cmd_put+0xd8>
   240d6:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   240da:	d319      	bcc.n	24110 <vs_cmd_put+0x5a>
   240dc:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   240e0:	2b05      	cmp	r3, #5
   240e2:	d850      	bhi.n	24186 <vs_cmd_put+0xd0>
   240e4:	e8df f003 	tbb	[pc, r3]
   240e8:	46434038 	.word	0x46434038
   240ec:	4c49      	.short	0x4c49
   240ee:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   240f2:	d801      	bhi.n	240f8 <vs_cmd_put+0x42>
   240f4:	2001      	movs	r0, #1
}
   240f6:	bd38      	pop	{r3, r4, r5, pc}
   240f8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   240fc:	3b01      	subs	r3, #1
   240fe:	2b09      	cmp	r3, #9
   24100:	d843      	bhi.n	2418a <vs_cmd_put+0xd4>
   24102:	e8df f003 	tbb	[pc, r3]
   24106:	0e07      	.short	0x0e07
   24108:	26424242 	.word	0x26424242
   2410c:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   24110:	2001      	movs	r0, #1
   24112:	e7f0      	b.n	240f6 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   24114:	7813      	ldrb	r3, [r2, #0]
   24116:	330c      	adds	r3, #12
   24118:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2411a:	4608      	mov	r0, r1
   2411c:	f7df ff1e 	bl	3f5c <sdc_hci_cmd_vs_zephyr_read_version_info>
   24120:	e7e9      	b.n	240f6 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   24122:	7813      	ldrb	r3, [r2, #0]
   24124:	3340      	adds	r3, #64	; 0x40
   24126:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   24128:	4608      	mov	r0, r1
   2412a:	f7ff fecb 	bl	23ec4 <vs_zephyr_supported_commands>
		return 0;
   2412e:	2000      	movs	r0, #0
   24130:	e7e1      	b.n	240f6 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   24132:	7813      	ldrb	r3, [r2, #0]
   24134:	3301      	adds	r3, #1
   24136:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   24138:	3316      	adds	r3, #22
   2413a:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2413c:	4608      	mov	r0, r1
   2413e:	f7e7 ff89 	bl	c054 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   24142:	e7d8      	b.n	240f6 <vs_cmd_put+0x40>
		*param_length_out +=
   24144:	7813      	ldrb	r3, [r2, #0]
   24146:	3320      	adds	r3, #32
   24148:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2414a:	4608      	mov	r0, r1
   2414c:	f7e7 ff35 	bl	bfba <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   24150:	e7d1      	b.n	240f6 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   24152:	f7e7 ffca 	bl	c0ea <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   24156:	e7ce      	b.n	240f6 <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   24158:	7813      	ldrb	r3, [r2, #0]
   2415a:	3340      	adds	r3, #64	; 0x40
   2415c:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2415e:	4608      	mov	r0, r1
   24160:	f7ff febf 	bl	23ee2 <vs_supported_commands>
		return 0;
   24164:	2000      	movs	r0, #0
   24166:	e7c6      	b.n	240f6 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   24168:	f7e7 ff20 	bl	bfac <sdc_hci_cmd_vs_llpm_mode_set>
   2416c:	e7c3      	b.n	240f6 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2416e:	f7e7 ff19 	bl	bfa4 <sdc_hci_cmd_vs_conn_update>
   24172:	e7c0      	b.n	240f6 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   24174:	f7e7 ff0e 	bl	bf94 <sdc_hci_cmd_vs_conn_event_extend>
   24178:	e7bd      	b.n	240f6 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2417a:	f7e7 ff19 	bl	bfb0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2417e:	e7ba      	b.n	240f6 <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   24180:	f7e7 ff12 	bl	bfa8 <sdc_hci_cmd_vs_event_length_set>
   24184:	e7b7      	b.n	240f6 <vs_cmd_put+0x40>
	switch (opcode)	{
   24186:	2001      	movs	r0, #1
   24188:	e7b5      	b.n	240f6 <vs_cmd_put+0x40>
   2418a:	2001      	movs	r0, #1
   2418c:	e7b3      	b.n	240f6 <vs_cmd_put+0x40>
   2418e:	2001      	movs	r0, #1
   24190:	e7b1      	b.n	240f6 <vs_cmd_put+0x40>

00024192 <cmd_put>:
{
   24192:	b570      	push	{r4, r5, r6, lr}
   24194:	b082      	sub	sp, #8
   24196:	460e      	mov	r6, r1
   24198:	7842      	ldrb	r2, [r0, #1]
   2419a:	7805      	ldrb	r5, [r0, #0]
   2419c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   241a0:	2304      	movs	r3, #4
   241a2:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   241a6:	0893      	lsrs	r3, r2, #2
   241a8:	2a23      	cmp	r2, #35	; 0x23
   241aa:	d80b      	bhi.n	241c4 <cmd_put+0x32>
   241ac:	b21a      	sxth	r2, r3
   241ae:	2a00      	cmp	r2, #0
   241b0:	d03a      	beq.n	24228 <cmd_put+0x96>
   241b2:	3b01      	subs	r3, #1
   241b4:	2b07      	cmp	r3, #7
   241b6:	d839      	bhi.n	2422c <cmd_put+0x9a>
   241b8:	e8df f003 	tbb	[pc, r3]
   241bc:	241e381a 	.word	0x241e381a
   241c0:	3038382a 	.word	0x3038382a
   241c4:	2b3f      	cmp	r3, #63	; 0x3f
   241c6:	d105      	bne.n	241d4 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   241c8:	f10d 0207 	add.w	r2, sp, #7
   241cc:	f7ff ff73 	bl	240b6 <vs_cmd_put>
   241d0:	4604      	mov	r4, r0
		break;
   241d2:	e000      	b.n	241d6 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   241d4:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   241d6:	4628      	mov	r0, r5
   241d8:	f7ff fd1d 	bl	23c16 <command_generates_command_complete_event>
   241dc:	b108      	cbz	r0, 241e2 <cmd_put+0x50>
   241de:	2c01      	cmp	r4, #1
   241e0:	d126      	bne.n	24230 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   241e2:	4622      	mov	r2, r4
   241e4:	4629      	mov	r1, r5
   241e6:	4630      	mov	r0, r6
   241e8:	f7ff fd51 	bl	23c8e <encode_command_status>
}
   241ec:	b002      	add	sp, #8
   241ee:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   241f0:	f7ff fd68 	bl	23cc4 <link_control_cmd_put>
   241f4:	4604      	mov	r4, r0
		break;
   241f6:	e7ee      	b.n	241d6 <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   241f8:	f10d 0207 	add.w	r2, sp, #7
   241fc:	f7ff fd79 	bl	23cf2 <controller_and_baseband_cmd_put>
   24200:	4604      	mov	r4, r0
		break;
   24202:	e7e8      	b.n	241d6 <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   24204:	f10d 0207 	add.w	r2, sp, #7
   24208:	f7ff fe1d 	bl	23e46 <info_param_cmd_put>
   2420c:	4604      	mov	r4, r0
		break;
   2420e:	e7e2      	b.n	241d6 <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   24210:	f10d 0207 	add.w	r2, sp, #7
   24214:	f7ff fd54 	bl	23cc0 <status_param_cmd_put>
   24218:	4604      	mov	r4, r0
		break;
   2421a:	e7dc      	b.n	241d6 <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   2421c:	f10d 0207 	add.w	r2, sp, #7
   24220:	f7ff fe6a 	bl	23ef8 <le_controller_cmd_put>
   24224:	4604      	mov	r4, r0
		break;
   24226:	e7d6      	b.n	241d6 <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   24228:	2401      	movs	r4, #1
   2422a:	e7d4      	b.n	241d6 <cmd_put+0x44>
   2422c:	2401      	movs	r4, #1
   2422e:	e7d2      	b.n	241d6 <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   24230:	4623      	mov	r3, r4
   24232:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24236:	4629      	mov	r1, r5
   24238:	4630      	mov	r0, r6
   2423a:	f7ff fd31 	bl	23ca0 <encode_command_complete_header>
}
   2423e:	e7d5      	b.n	241ec <cmd_put+0x5a>

00024240 <m_config_clock_source_get>:
}
   24240:	2001      	movs	r0, #1
   24242:	4770      	bx	lr

00024244 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24244:	4668      	mov	r0, sp
   24246:	f020 0107 	bic.w	r1, r0, #7
   2424a:	468d      	mov	sp, r1
   2424c:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2424e:	f7de fa95 	bl	277c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   24252:	f7ee fb53 	bl	128fc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24256:	f7ef f829 	bl	132ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2425a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2425e:	4685      	mov	sp, r0
   24260:	4770      	bx	lr

00024262 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24262:	4668      	mov	r0, sp
   24264:	f020 0107 	bic.w	r1, r0, #7
   24268:	468d      	mov	sp, r1
   2426a:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2426c:	f7de fa08 	bl	2680 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   24270:	f7ee fb44 	bl	128fc <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24274:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24278:	4685      	mov	sp, r0
   2427a:	4770      	bx	lr

0002427c <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2427c:	4668      	mov	r0, sp
   2427e:	f020 0107 	bic.w	r1, r0, #7
   24282:	468d      	mov	sp, r1
   24284:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   24286:	f7e7 f943 	bl	b510 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2428a:	f7ee fb37 	bl	128fc <_arch_isr_direct_pm>
   2428e:	f7ef f80d 	bl	132ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24296:	4685      	mov	sp, r0
   24298:	4770      	bx	lr

0002429a <nrfx_clock_stop>:
	switch (domain) {
   2429a:	2801      	cmp	r0, #1
   2429c:	d000      	beq.n	242a0 <nrfx_clock_stop+0x6>
   2429e:	4770      	bx	lr
{
   242a0:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   242a2:	f7df f861 	bl	3368 <mpsl_clock_hfclk_release>
}
   242a6:	bd08      	pop	{r3, pc}

000242a8 <nrfx_clock_enable>:
}
   242a8:	4770      	bx	lr

000242aa <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   242aa:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   242ac:	f7de fe7a 	bl	2fa4 <MPSL_IRQ_CLOCK_Handler>
}
   242b0:	bd08      	pop	{r3, pc}

000242b2 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   242b2:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   242b4:	f7f8 ff7a 	bl	1d1ac <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   242b8:	bd08      	pop	{r3, pc}

000242ba <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   242ba:	b510      	push	{r4, lr}
   242bc:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   242be:	f7ee f9a5 	bl	1260c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   242c2:	f7ee fa61 	bl	12788 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   242c6:	4620      	mov	r0, r4
   242c8:	f7ff fff3 	bl	242b2 <hw_cc3xx_init_internal>
	return res;
}
   242cc:	bd10      	pop	{r4, pc}

000242ce <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   242ce:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   242d0:	4780      	blx	r0
}
   242d2:	bd08      	pop	{r3, pc}

000242d4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   242d4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   242d6:	f000 fe32 	bl	24f3e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   242da:	bd08      	pop	{r3, pc}

000242dc <nrfx_gpiote_out_init>:
{
   242dc:	b508      	push	{r3, lr}
    nrfx_err_t err_code = gpiote_out_init(pin, p_config, false, 0);
   242de:	2300      	movs	r3, #0
   242e0:	461a      	mov	r2, r3
   242e2:	f7f6 f807 	bl	1a2f4 <gpiote_out_init>
}
   242e6:	bd08      	pop	{r3, pc}

000242e8 <nrfx_gpiote_in_init>:
{
   242e8:	b500      	push	{lr}
   242ea:	b083      	sub	sp, #12
    err_code = gpiote_in_init(pin, p_config, evt_handler, false, 0);
   242ec:	2300      	movs	r3, #0
   242ee:	9300      	str	r3, [sp, #0]
   242f0:	f7f6 f882 	bl	1a3f8 <gpiote_in_init>
}
   242f4:	b003      	add	sp, #12
   242f6:	f85d fb04 	ldr.w	pc, [sp], #4

000242fa <nrfx_gpiote_in_event_get>:
{
   242fa:	b510      	push	{r4, lr}
   242fc:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   242fe:	f7f5 fe0d 	bl	19f1c <pin_in_use_by_te>
   24302:	b910      	cbnz	r0, 2430a <nrfx_gpiote_in_event_get+0x10>
    return NRF_GPIOTE_EVENT_PORT;
   24304:	f44f 70be 	mov.w	r0, #380	; 0x17c
}
   24308:	bd10      	pop	{r4, pc}
        return nrf_gpiote_in_event_get((uint8_t)channel_port_get(pin));
   2430a:	4620      	mov	r0, r4
   2430c:	f7f5 fe54 	bl	19fb8 <channel_port_get>
   24310:	b2c0      	uxtb	r0, r0
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   24312:	0080      	lsls	r0, r0, #2
   24314:	f500 7080 	add.w	r0, r0, #256	; 0x100
   24318:	e7f6      	b.n	24308 <nrfx_gpiote_in_event_get+0xe>

0002431a <is_app_channel>:
{
   2431a:	b508      	push	{r3, lr}
    return are_app_channels(nrfx_ppi_channel_to_mask(channel));
   2431c:	2301      	movs	r3, #1
   2431e:	fa03 f000 	lsl.w	r0, r3, r0
   24322:	f7f6 fa17 	bl	1a754 <are_app_channels>
}
   24326:	bd08      	pop	{r3, pc}

00024328 <transfer_byte>:
{
   24328:	b430      	push	{r4, r5}
   2432a:	b082      	sub	sp, #8
    return p_reg->RXD;
   2432c:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
   24330:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   24332:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   24336:	6a0b      	ldr	r3, [r1, #32]
   24338:	698a      	ldr	r2, [r1, #24]
   2433a:	4293      	cmp	r3, r2
   2433c:	d203      	bcs.n	24346 <transfer_byte+0x1e>
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2433e:	694a      	ldr	r2, [r1, #20]
   24340:	f89d 4007 	ldrb.w	r4, [sp, #7]
   24344:	54d4      	strb	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   24346:	6a0b      	ldr	r3, [r1, #32]
   24348:	3301      	adds	r3, #1
   2434a:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2434c:	1c5a      	adds	r2, r3, #1
    if (p_cb->abort)
   2434e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   24352:	b13c      	cbz	r4, 24364 <transfer_byte+0x3c>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   24354:	690c      	ldr	r4, [r1, #16]
   24356:	4294      	cmp	r4, r2
   24358:	d900      	bls.n	2435c <transfer_byte+0x34>
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2435a:	610a      	str	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2435c:	698c      	ldr	r4, [r1, #24]
   2435e:	4294      	cmp	r4, r2
   24360:	d900      	bls.n	24364 <transfer_byte+0x3c>
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   24362:	618a      	str	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   24364:	690c      	ldr	r4, [r1, #16]
   24366:	4294      	cmp	r4, r2
   24368:	d808      	bhi.n	2437c <transfer_byte+0x54>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2436a:	698d      	ldr	r5, [r1, #24]
   2436c:	4295      	cmp	r5, r2
   2436e:	d80d      	bhi.n	2438c <transfer_byte+0x64>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   24370:	42a3      	cmp	r3, r4
   24372:	d310      	bcc.n	24396 <transfer_byte+0x6e>
   24374:	42ab      	cmp	r3, r5
   24376:	d210      	bcs.n	2439a <transfer_byte+0x72>
   24378:	2001      	movs	r0, #1
   2437a:	e004      	b.n	24386 <transfer_byte+0x5e>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2437c:	68cb      	ldr	r3, [r1, #12]
   2437e:	5c9b      	ldrb	r3, [r3, r2]
    p_reg->TXD = data;
   24380:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   24384:	2001      	movs	r0, #1
}
   24386:	b002      	add	sp, #8
   24388:	bc30      	pop	{r4, r5}
   2438a:	4770      	bx	lr
        nrf_spi_txd_set(p_spi, p_cb->orc);
   2438c:	7fcb      	ldrb	r3, [r1, #31]
   2438e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        return true;
   24392:	2001      	movs	r0, #1
   24394:	e7f7      	b.n	24386 <transfer_byte+0x5e>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   24396:	2001      	movs	r0, #1
   24398:	e7f5      	b.n	24386 <transfer_byte+0x5e>
   2439a:	2000      	movs	r0, #0
   2439c:	e7f3      	b.n	24386 <transfer_byte+0x5e>

0002439e <spim_int_enable>:
    if (!enable)
   2439e:	b919      	cbnz	r1, 243a8 <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   243a0:	2340      	movs	r3, #64	; 0x40
   243a2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   243a6:	4770      	bx	lr
    p_reg->INTENSET = mask;
   243a8:	2340      	movs	r3, #64	; 0x40
   243aa:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   243ae:	4770      	bx	lr

000243b0 <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   243b0:	f011 0f01 	tst.w	r1, #1
   243b4:	d009      	beq.n	243ca <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   243b6:	2301      	movs	r3, #1
   243b8:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   243bc:	f011 0f02 	tst.w	r1, #2
   243c0:	d007      	beq.n	243d2 <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   243c2:	2301      	movs	r3, #1
   243c4:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   243c8:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   243ca:	2300      	movs	r3, #0
   243cc:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   243d0:	e7f4      	b.n	243bc <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   243d2:	2300      	movs	r3, #0
   243d4:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   243d8:	4770      	bx	lr

000243da <irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   243da:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   243de:	b902      	cbnz	r2, 243e2 <irq_handler+0x8>
   243e0:	4770      	bx	lr
{
   243e2:	b508      	push	{r3, lr}
   243e4:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   243e6:	2200      	movs	r2, #0
   243e8:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   243ec:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        finish_transfer(p_cb);
   243f0:	4608      	mov	r0, r1
   243f2:	f7f6 fc35 	bl	1ac60 <finish_transfer>
}
   243f6:	bd08      	pop	{r3, pc}

000243f8 <spim_abort>:
{
   243f8:	b570      	push	{r4, r5, r6, lr}
   243fa:	4605      	mov	r5, r0
   243fc:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   243fe:	2301      	movs	r3, #1
   24400:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   24402:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24404:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   24408:	b923      	cbnz	r3, 24414 <spim_abort+0x1c>
   2440a:	2001      	movs	r0, #1
   2440c:	f7ff ff62 	bl	242d4 <nrfx_busy_wait>
   24410:	3c01      	subs	r4, #1
   24412:	d1f7      	bne.n	24404 <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   24414:	2300      	movs	r3, #0
   24416:	7773      	strb	r3, [r6, #29]
}
   24418:	bd70      	pop	{r4, r5, r6, pc}

0002441a <nrfx_spim_start_task_get>:
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2441a:	6800      	ldr	r0, [r0, #0]
}
   2441c:	3010      	adds	r0, #16
   2441e:	4770      	bx	lr

00024420 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   24420:	b508      	push	{r3, lr}
  _DoInit();
   24422:	f7f6 fe73 	bl	1b10c <_DoInit>
}
   24426:	bd08      	pop	{r3, pc}

00024428 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   24428:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2442a:	f7ff fff9 	bl	24420 <SEGGER_RTT_Init>

	return 0;
}
   2442e:	2000      	movs	r0, #0
   24430:	bd08      	pop	{r3, pc}

00024432 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   24432:	b148      	cbz	r0, 24448 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   24434:	68c3      	ldr	r3, [r0, #12]
   24436:	8818      	ldrh	r0, [r3, #0]
   24438:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2443c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   24440:	bf14      	ite	ne
   24442:	2000      	movne	r0, #0
   24444:	2001      	moveq	r0, #1
   24446:	4770      	bx	lr
		return false;
   24448:	2000      	movs	r0, #0
}
   2444a:	4770      	bx	lr

0002444c <k_heap_init>:
{
   2444c:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2444e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   24452:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   24454:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   24456:	f7fc f84b 	bl	204f0 <sys_heap_init>
}
   2445a:	bd10      	pop	{r4, pc}

0002445c <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24460:	b087      	sub	sp, #28
   24462:	4680      	mov	r8, r0
   24464:	9103      	str	r1, [sp, #12]
   24466:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24468:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2446c:	f000 fd6d 	bl	24f4a <sys_clock_timeout_end_calc>
   24470:	4681      	mov	r9, r0
   24472:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24474:	f108 0314 	add.w	r3, r8, #20
   24478:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   2447a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2447e:	f3ef 8511 	mrs	r5, BASEPRI
   24482:	f383 8811 	msr	BASEPRI, r3
   24486:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   2448a:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   2448e:	4654      	mov	r4, sl

	while (ret == NULL) {
   24490:	e00f      	b.n	244b2 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24492:	e9cd 6700 	strd	r6, r7, [sp]
   24496:	f108 020c 	add.w	r2, r8, #12
   2449a:	4629      	mov	r1, r5
   2449c:	9805      	ldr	r0, [sp, #20]
   2449e:	f7f7 fe37 	bl	1c110 <z_pend_curr>
   244a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   244a6:	f3ef 8511 	mrs	r5, BASEPRI
   244aa:	f383 8811 	msr	BASEPRI, r3
   244ae:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   244b2:	b9b4      	cbnz	r4, 244e2 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   244b4:	9a04      	ldr	r2, [sp, #16]
   244b6:	9903      	ldr	r1, [sp, #12]
   244b8:	4640      	mov	r0, r8
   244ba:	f7fb ff8b 	bl	203d4 <sys_heap_aligned_alloc>
   244be:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   244c0:	f7f8 faca 	bl	1ca58 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   244c4:	b96c      	cbnz	r4, 244e2 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   244c6:	ebb9 0600 	subs.w	r6, r9, r0
   244ca:	eb6b 0701 	sbc.w	r7, fp, r1
   244ce:	2e01      	cmp	r6, #1
   244d0:	f177 0300 	sbcs.w	r3, r7, #0
   244d4:	db05      	blt.n	244e2 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   244d6:	f1ba 0f00 	cmp.w	sl, #0
   244da:	d1da      	bne.n	24492 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   244dc:	f04f 0a01 	mov.w	sl, #1
   244e0:	e7d7      	b.n	24492 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   244e2:	f385 8811 	msr	BASEPRI, r5
   244e6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   244ea:	4620      	mov	r0, r4
   244ec:	b007      	add	sp, #28
   244ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000244f2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   244f2:	b570      	push	{r4, r5, r6, lr}
   244f4:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   244f6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   244fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   244fe:	f3ef 8511 	mrs	r5, BASEPRI
   24502:	f383 8811 	msr	BASEPRI, r3
   24506:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2450a:	f7fb ff01 	bl	20310 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2450e:	f104 000c 	add.w	r0, r4, #12
   24512:	f000 fc52 	bl	24dba <z_unpend_all>
   24516:	b920      	cbnz	r0, 24522 <k_heap_free+0x30>
	__asm__ volatile(
   24518:	f385 8811 	msr	BASEPRI, r5
   2451c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24520:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   24522:	4629      	mov	r1, r5
   24524:	4630      	mov	r0, r6
   24526:	f7f7 fd7d 	bl	1c024 <z_reschedule>
   2452a:	e7f9      	b.n	24520 <k_heap_free+0x2e>

0002452c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2452c:	68c2      	ldr	r2, [r0, #12]
   2452e:	6903      	ldr	r3, [r0, #16]
   24530:	431a      	orrs	r2, r3
   24532:	f012 0203 	ands.w	r2, r2, #3
   24536:	d10d      	bne.n	24554 <create_free_list+0x28>
	slab->free_list = NULL;
   24538:	2100      	movs	r1, #0
   2453a:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2453c:	e005      	b.n	2454a <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2453e:	6941      	ldr	r1, [r0, #20]
   24540:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   24542:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   24544:	68c1      	ldr	r1, [r0, #12]
   24546:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   24548:	3201      	adds	r2, #1
   2454a:	6881      	ldr	r1, [r0, #8]
   2454c:	4291      	cmp	r1, r2
   2454e:	d8f6      	bhi.n	2453e <create_free_list+0x12>
	return 0;
   24550:	2000      	movs	r0, #0
   24552:	4770      	bx	lr
		return -EINVAL;
   24554:	f06f 0015 	mvn.w	r0, #21
}
   24558:	4770      	bx	lr

0002455a <k_mem_slab_init>:
{
   2455a:	b510      	push	{r4, lr}
   2455c:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   2455e:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   24560:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   24562:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   24564:	2300      	movs	r3, #0
   24566:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   24568:	f7ff ffe0 	bl	2452c <create_free_list>
	if (rc < 0) {
   2456c:	2800      	cmp	r0, #0
   2456e:	db01      	blt.n	24574 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   24570:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   24572:	6064      	str	r4, [r4, #4]
}
   24574:	bd10      	pop	{r4, pc}

00024576 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24578:	4604      	mov	r4, r0
   2457a:	460d      	mov	r5, r1
	__asm__ volatile(
   2457c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24580:	f3ef 8611 	mrs	r6, BASEPRI
   24584:	f383 8811 	msr	BASEPRI, r3
   24588:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2458c:	6943      	ldr	r3, [r0, #20]
   2458e:	b163      	cbz	r3, 245aa <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   24590:	682b      	ldr	r3, [r5, #0]
   24592:	6962      	ldr	r2, [r4, #20]
   24594:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24596:	682b      	ldr	r3, [r5, #0]
   24598:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2459a:	69a3      	ldr	r3, [r4, #24]
   2459c:	3b01      	subs	r3, #1
   2459e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   245a0:	f386 8811 	msr	BASEPRI, r6
   245a4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   245a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   245aa:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   245ae:	f000 fbd9 	bl	24d64 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   245b2:	2800      	cmp	r0, #0
   245b4:	d0ec      	beq.n	24590 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   245b6:	682a      	ldr	r2, [r5, #0]
   245b8:	2100      	movs	r1, #0
   245ba:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   245be:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   245c0:	f000 fb59 	bl	24c76 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   245c4:	4631      	mov	r1, r6
   245c6:	4638      	mov	r0, r7
   245c8:	f7f7 fd2c 	bl	1c024 <z_reschedule>
			return;
   245cc:	e7ec      	b.n	245a8 <k_mem_slab_free+0x32>

000245ce <setup_thread_stack>:
{
   245ce:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   245d0:	3207      	adds	r2, #7
   245d2:	f022 0207 	bic.w	r2, r2, #7
   245d6:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   245da:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   245de:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   245e2:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   245e6:	2200      	movs	r2, #0
   245e8:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   245ec:	18c8      	adds	r0, r1, r3
   245ee:	bc10      	pop	{r4}
   245f0:	4770      	bx	lr

000245f2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   245f2:	f3ef 8005 	mrs	r0, IPSR
}
   245f6:	3800      	subs	r0, #0
   245f8:	bf18      	it	ne
   245fa:	2001      	movne	r0, #1
   245fc:	4770      	bx	lr

000245fe <k_thread_name_get>:
}
   245fe:	3078      	adds	r0, #120	; 0x78
   24600:	4770      	bx	lr

00024602 <z_impl_k_thread_start>:
{
   24602:	b508      	push	{r3, lr}
	z_sched_start(thread);
   24604:	f7f7 fed0 	bl	1c3a8 <z_sched_start>
}
   24608:	bd08      	pop	{r3, pc}

0002460a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2460a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2460c:	2400      	movs	r4, #0
   2460e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   24610:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   24612:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   24614:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   24616:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   24618:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2461a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2461c:	bc10      	pop	{r4}
   2461e:	4770      	bx	lr

00024620 <z_impl_k_thread_create>:
{
   24620:	b5f0      	push	{r4, r5, r6, r7, lr}
   24622:	b087      	sub	sp, #28
   24624:	4604      	mov	r4, r0
   24626:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2462a:	2500      	movs	r5, #0
   2462c:	9505      	str	r5, [sp, #20]
   2462e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   24630:	9504      	str	r5, [sp, #16]
   24632:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   24634:	9503      	str	r5, [sp, #12]
   24636:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24638:	9502      	str	r5, [sp, #8]
   2463a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2463c:	9501      	str	r5, [sp, #4]
   2463e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   24640:	9500      	str	r5, [sp, #0]
   24642:	f7f7 f8a3 	bl	1b78c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24646:	f1b7 3fff 	cmp.w	r7, #4294967295
   2464a:	bf08      	it	eq
   2464c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   24650:	d102      	bne.n	24658 <z_impl_k_thread_create+0x38>
}
   24652:	4620      	mov	r0, r4
   24654:	b007      	add	sp, #28
   24656:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   24658:	4632      	mov	r2, r6
   2465a:	463b      	mov	r3, r7
   2465c:	4620      	mov	r0, r4
   2465e:	f7f7 f883 	bl	1b768 <schedule_new_thread>
   24662:	e7f6      	b.n	24652 <z_impl_k_thread_create+0x32>

00024664 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   24664:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   24666:	f7ed f861 	bl	1172c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   2466a:	f7fc fcff 	bl	2106c <sys_clock_idle_exit>
}
   2466e:	bd08      	pop	{r3, pc}

00024670 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   24670:	b508      	push	{r3, lr}
	__asm__ volatile(
   24672:	f04f 0240 	mov.w	r2, #64	; 0x40
   24676:	f3ef 8311 	mrs	r3, BASEPRI
   2467a:	f382 8811 	msr	BASEPRI, r2
   2467e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   24682:	f7f7 f935 	bl	1b8f0 <pm_save_idle>
   24686:	e7f4      	b.n	24672 <idle+0x2>

00024688 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   24688:	4288      	cmp	r0, r1
   2468a:	da00      	bge.n	2468e <new_prio_for_inheritance+0x6>
   2468c:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2468e:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   24692:	db01      	blt.n	24698 <new_prio_for_inheritance+0x10>
   24694:	4608      	mov	r0, r1
   24696:	4770      	bx	lr
   24698:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2469c:	4770      	bx	lr

0002469e <adjust_owner_prio>:
{
   2469e:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   246a0:	6880      	ldr	r0, [r0, #8]
   246a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   246a6:	428b      	cmp	r3, r1
   246a8:	d101      	bne.n	246ae <adjust_owner_prio+0x10>
	return false;
   246aa:	2000      	movs	r0, #0
}
   246ac:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   246ae:	f7f7 fe99 	bl	1c3e4 <z_set_prio>
   246b2:	e7fb      	b.n	246ac <adjust_owner_prio+0xe>

000246b4 <z_impl_k_mutex_init>:
{
   246b4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   246b6:	2000      	movs	r0, #0
   246b8:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   246ba:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   246bc:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   246be:	605b      	str	r3, [r3, #4]
}
   246c0:	4770      	bx	lr

000246c2 <prepare_thread_to_run>:
{
   246c2:	b508      	push	{r3, lr}
   246c4:	2200      	movs	r2, #0
   246c6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   246ca:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   246cc:	f000 fad3 	bl	24c76 <z_ready_thread>
}
   246d0:	bd08      	pop	{r3, pc}

000246d2 <queue_insert>:
{
   246d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   246d6:	4605      	mov	r5, r0
   246d8:	460e      	mov	r6, r1
   246da:	4614      	mov	r4, r2
   246dc:	461f      	mov	r7, r3
   246de:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   246e2:	f100 0808 	add.w	r8, r0, #8
   246e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   246ea:	f3ef 8911 	mrs	r9, BASEPRI
   246ee:	f383 8811 	msr	BASEPRI, r3
   246f2:	f3bf 8f6f 	isb	sy
	if (is_append) {
   246f6:	b102      	cbz	r2, 246fa <queue_insert+0x28>
	return list->tail;
   246f8:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   246fa:	4640      	mov	r0, r8
   246fc:	f000 fb32 	bl	24d64 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   24700:	b9a0      	cbnz	r0, 2472c <queue_insert+0x5a>
	if (alloc) {
   24702:	b9e7      	cbnz	r7, 2473e <queue_insert+0x6c>
	node->next_and_flags = flags;
   24704:	2300      	movs	r3, #0
   24706:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24708:	b356      	cbz	r6, 24760 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2470a:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2470c:	f033 0303 	bics.w	r3, r3, #3
   24710:	d134      	bne.n	2477c <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24712:	6823      	ldr	r3, [r4, #0]
   24714:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24718:	6023      	str	r3, [r4, #0]
	return list->tail;
   2471a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2471c:	b35a      	cbz	r2, 24776 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2471e:	6813      	ldr	r3, [r2, #0]
   24720:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24724:	4323      	orrs	r3, r4
   24726:	6013      	str	r3, [r2, #0]
	list->tail = node;
   24728:	606c      	str	r4, [r5, #4]
}
   2472a:	e031      	b.n	24790 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   2472c:	4621      	mov	r1, r4
   2472e:	f7ff ffc8 	bl	246c2 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   24732:	4649      	mov	r1, r9
   24734:	4640      	mov	r0, r8
   24736:	f7f7 fc75 	bl	1c024 <z_reschedule>
		return 0;
   2473a:	2000      	movs	r0, #0
   2473c:	e032      	b.n	247a4 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   2473e:	2108      	movs	r1, #8
   24740:	2000      	movs	r0, #0
   24742:	f7f8 fd0f 	bl	1d164 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24746:	b120      	cbz	r0, 24752 <queue_insert+0x80>
		anode->data = data;
   24748:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   2474a:	2201      	movs	r2, #1
   2474c:	6002      	str	r2, [r0, #0]
		data = anode;
   2474e:	4604      	mov	r4, r0
   24750:	e7da      	b.n	24708 <queue_insert+0x36>
	__asm__ volatile(
   24752:	f389 8811 	msr	BASEPRI, r9
   24756:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2475a:	f06f 000b 	mvn.w	r0, #11
   2475e:	e021      	b.n	247a4 <queue_insert+0xd2>
	return list->head;
   24760:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24762:	6823      	ldr	r3, [r4, #0]
   24764:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24768:	4313      	orrs	r3, r2
   2476a:	6023      	str	r3, [r4, #0]
	list->head = node;
   2476c:	602c      	str	r4, [r5, #0]
	return list->tail;
   2476e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   24770:	b973      	cbnz	r3, 24790 <queue_insert+0xbe>
	list->tail = node;
   24772:	606c      	str	r4, [r5, #4]
}
   24774:	e00c      	b.n	24790 <queue_insert+0xbe>
	list->tail = node;
   24776:	606c      	str	r4, [r5, #4]
	list->head = node;
   24778:	602c      	str	r4, [r5, #0]
}
   2477a:	e009      	b.n	24790 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2477c:	6822      	ldr	r2, [r4, #0]
   2477e:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24782:	4313      	orrs	r3, r2
   24784:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24786:	6833      	ldr	r3, [r6, #0]
   24788:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2478c:	431c      	orrs	r4, r3
   2478e:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24790:	2104      	movs	r1, #4
   24792:	f105 0010 	add.w	r0, r5, #16
   24796:	f000 fcb8 	bl	2510a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2479a:	4649      	mov	r1, r9
   2479c:	4640      	mov	r0, r8
   2479e:	f7f7 fc41 	bl	1c024 <z_reschedule>
	return 0;
   247a2:	2000      	movs	r0, #0
}
   247a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000247a8 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   247a8:	b160      	cbz	r0, 247c4 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   247aa:	6803      	ldr	r3, [r0, #0]
   247ac:	f013 0f03 	tst.w	r3, #3
   247b0:	d008      	beq.n	247c4 <z_queue_node_peek+0x1c>
{
   247b2:	b510      	push	{r4, lr}
		ret = anode->data;
   247b4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   247b6:	b909      	cbnz	r1, 247bc <z_queue_node_peek+0x14>
		ret = anode->data;
   247b8:	4620      	mov	r0, r4
}
   247ba:	bd10      	pop	{r4, pc}
			k_free(anode);
   247bc:	f000 fccf 	bl	2515e <k_free>
		ret = anode->data;
   247c0:	4620      	mov	r0, r4
   247c2:	e7fa      	b.n	247ba <z_queue_node_peek+0x12>
}
   247c4:	4770      	bx	lr

000247c6 <z_impl_k_queue_init>:
	list->head = NULL;
   247c6:	2300      	movs	r3, #0
   247c8:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   247ca:	6043      	str	r3, [r0, #4]
   247cc:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   247d0:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   247d2:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   247d4:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   247d8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   247da:	6143      	str	r3, [r0, #20]
}
   247dc:	4770      	bx	lr

000247de <k_queue_append>:
{
   247de:	b500      	push	{lr}
   247e0:	b083      	sub	sp, #12
   247e2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   247e4:	2301      	movs	r3, #1
   247e6:	9300      	str	r3, [sp, #0]
   247e8:	2300      	movs	r3, #0
   247ea:	4619      	mov	r1, r3
   247ec:	f7ff ff71 	bl	246d2 <queue_insert>
}
   247f0:	b003      	add	sp, #12
   247f2:	f85d fb04 	ldr.w	pc, [sp], #4

000247f6 <k_queue_prepend>:
{
   247f6:	b500      	push	{lr}
   247f8:	b083      	sub	sp, #12
   247fa:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   247fc:	2100      	movs	r1, #0
   247fe:	9100      	str	r1, [sp, #0]
   24800:	460b      	mov	r3, r1
   24802:	f7ff ff66 	bl	246d2 <queue_insert>
}
   24806:	b003      	add	sp, #12
   24808:	f85d fb04 	ldr.w	pc, [sp], #4

0002480c <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   2480c:	b3a1      	cbz	r1, 24878 <k_queue_append_list+0x6c>
{
   2480e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24812:	4606      	mov	r6, r0
   24814:	4617      	mov	r7, r2
   24816:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   24818:	b38a      	cbz	r2, 2487e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2481a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2481e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24822:	f3ef 8811 	mrs	r8, BASEPRI
   24826:	f383 8811 	msr	BASEPRI, r3
   2482a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2482e:	4628      	mov	r0, r5
   24830:	f000 fa98 	bl	24d64 <z_unpend_first_thread>
   24834:	e006      	b.n	24844 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   24836:	4621      	mov	r1, r4
   24838:	f7ff ff43 	bl	246c2 <prepare_thread_to_run>
		head = *(void **)head;
   2483c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2483e:	4628      	mov	r0, r5
   24840:	f000 fa90 	bl	24d64 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24844:	b10c      	cbz	r4, 2484a <k_queue_append_list+0x3e>
   24846:	2800      	cmp	r0, #0
   24848:	d1f5      	bne.n	24836 <k_queue_append_list+0x2a>
	if (head != NULL) {
   2484a:	b13c      	cbz	r4, 2485c <k_queue_append_list+0x50>
	return list->tail;
   2484c:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2484e:	b18a      	cbz	r2, 24874 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24850:	6813      	ldr	r3, [r2, #0]
   24852:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24856:	431c      	orrs	r4, r3
   24858:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2485a:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2485c:	2104      	movs	r1, #4
   2485e:	f106 0010 	add.w	r0, r6, #16
   24862:	f000 fc52 	bl	2510a <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   24866:	4641      	mov	r1, r8
   24868:	4628      	mov	r0, r5
   2486a:	f7f7 fbdb 	bl	1c024 <z_reschedule>
	return 0;
   2486e:	2000      	movs	r0, #0
}
   24870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   24874:	6034      	str	r4, [r6, #0]
}
   24876:	e7f0      	b.n	2485a <k_queue_append_list+0x4e>
		return -EINVAL;
   24878:	f06f 0015 	mvn.w	r0, #21
}
   2487c:	4770      	bx	lr
		return -EINVAL;
   2487e:	f06f 0015 	mvn.w	r0, #21
   24882:	e7f5      	b.n	24870 <k_queue_append_list+0x64>

00024884 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24884:	b15a      	cbz	r2, 2489e <z_impl_k_sem_init+0x1a>
   24886:	428a      	cmp	r2, r1
   24888:	d30c      	bcc.n	248a4 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2488a:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2488c:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2488e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   24890:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   24892:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   24896:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   24898:	6143      	str	r3, [r0, #20]
	return 0;
   2489a:	2000      	movs	r0, #0
   2489c:	4770      	bx	lr
		return -EINVAL;
   2489e:	f06f 0015 	mvn.w	r0, #21
   248a2:	4770      	bx	lr
   248a4:	f06f 0015 	mvn.w	r0, #21
}
   248a8:	4770      	bx	lr

000248aa <cancel_async_locked>:
{
   248aa:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   248ac:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   248ae:	f012 0f02 	tst.w	r2, #2
   248b2:	d009      	beq.n	248c8 <cancel_async_locked+0x1e>
	return *flagp;
   248b4:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   248b6:	f012 000f 	ands.w	r0, r2, #15
   248ba:	d037      	beq.n	2492c <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   248bc:	f042 0202 	orr.w	r2, r2, #2
   248c0:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   248c2:	f002 000f 	and.w	r0, r2, #15
	return ret;
   248c6:	4770      	bx	lr
{
   248c8:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   248ca:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   248cc:	f022 0104 	bic.w	r1, r2, #4
   248d0:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   248d2:	f012 0f04 	tst.w	r2, #4
   248d6:	d011      	beq.n	248fc <cancel_async_locked+0x52>
	return list->head;
   248d8:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   248dc:	2100      	movs	r1, #0
   248de:	b16a      	cbz	r2, 248fc <cancel_async_locked+0x52>
   248e0:	4290      	cmp	r0, r2
   248e2:	d002      	beq.n	248ea <cancel_async_locked+0x40>
   248e4:	4611      	mov	r1, r2
   248e6:	6812      	ldr	r2, [r2, #0]
   248e8:	e7f9      	b.n	248de <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   248ea:	b191      	cbz	r1, 24912 <cancel_async_locked+0x68>
	return node->next;
   248ec:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   248ee:	600a      	str	r2, [r1, #0]
	return list->tail;
   248f0:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   248f4:	4293      	cmp	r3, r2
   248f6:	d016      	beq.n	24926 <cancel_async_locked+0x7c>
	parent->next = child;
   248f8:	2200      	movs	r2, #0
   248fa:	601a      	str	r2, [r3, #0]
	return *flagp;
   248fc:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   248fe:	f012 000f 	ands.w	r0, r2, #15
   24902:	d004      	beq.n	2490e <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   24904:	f042 0202 	orr.w	r2, r2, #2
   24908:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2490a:	f002 000f 	and.w	r0, r2, #15
}
   2490e:	bc10      	pop	{r4}
   24910:	4770      	bx	lr
	return node->next;
   24912:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   24914:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   24918:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2491c:	428b      	cmp	r3, r1
   2491e:	d1eb      	bne.n	248f8 <cancel_async_locked+0x4e>
	list->tail = node;
   24920:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   24924:	e7e8      	b.n	248f8 <cancel_async_locked+0x4e>
	list->tail = node;
   24926:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   2492a:	e7e5      	b.n	248f8 <cancel_async_locked+0x4e>
   2492c:	4770      	bx	lr

0002492e <work_timeout>:
{
   2492e:	b510      	push	{r4, lr}
   24930:	b082      	sub	sp, #8
   24932:	4603      	mov	r3, r0
   24934:	f04f 0240 	mov.w	r2, #64	; 0x40
   24938:	f3ef 8411 	mrs	r4, BASEPRI
   2493c:	f382 8811 	msr	BASEPRI, r2
   24940:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   24944:	2200      	movs	r2, #0
   24946:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   24948:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2494c:	f022 0108 	bic.w	r1, r2, #8
   24950:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24954:	f012 0f08 	tst.w	r2, #8
   24958:	d105      	bne.n	24966 <work_timeout+0x38>
	__asm__ volatile(
   2495a:	f384 8811 	msr	BASEPRI, r4
   2495e:	f3bf 8f6f 	isb	sy
}
   24962:	b002      	add	sp, #8
   24964:	bd10      	pop	{r4, pc}
   24966:	3810      	subs	r0, #16
		queue = dw->queue;
   24968:	699b      	ldr	r3, [r3, #24]
   2496a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2496c:	a901      	add	r1, sp, #4
   2496e:	f7f7 f943 	bl	1bbf8 <submit_to_queue_locked>
   24972:	e7f2      	b.n	2495a <work_timeout+0x2c>

00024974 <cancel_delayable_async_locked>:
{
   24974:	b510      	push	{r4, lr}
   24976:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   24978:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2497a:	f023 0208 	bic.w	r2, r3, #8
   2497e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24980:	f013 0f08 	tst.w	r3, #8
   24984:	d103      	bne.n	2498e <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   24986:	4620      	mov	r0, r4
   24988:	f7ff ff8f 	bl	248aa <cancel_async_locked>
}
   2498c:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   2498e:	3010      	adds	r0, #16
   24990:	f000 fa72 	bl	24e78 <z_abort_timeout>
		ret = true;
   24994:	e7f7      	b.n	24986 <cancel_delayable_async_locked+0x12>

00024996 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24996:	2300      	movs	r3, #0
   24998:	6003      	str	r3, [r0, #0]
   2499a:	6083      	str	r3, [r0, #8]
   2499c:	60c3      	str	r3, [r0, #12]
   2499e:	6041      	str	r1, [r0, #4]
}
   249a0:	4770      	bx	lr

000249a2 <k_work_submit_to_queue>:
{
   249a2:	b530      	push	{r4, r5, lr}
   249a4:	b083      	sub	sp, #12
   249a6:	9001      	str	r0, [sp, #4]
   249a8:	4608      	mov	r0, r1
	__asm__ volatile(
   249aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   249ae:	f3ef 8511 	mrs	r5, BASEPRI
   249b2:	f383 8811 	msr	BASEPRI, r3
   249b6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   249ba:	a901      	add	r1, sp, #4
   249bc:	f7f7 f91c 	bl	1bbf8 <submit_to_queue_locked>
   249c0:	4604      	mov	r4, r0
	__asm__ volatile(
   249c2:	f385 8811 	msr	BASEPRI, r5
   249c6:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   249ca:	2800      	cmp	r0, #0
   249cc:	dc02      	bgt.n	249d4 <k_work_submit_to_queue+0x32>
}
   249ce:	4620      	mov	r0, r4
   249d0:	b003      	add	sp, #12
   249d2:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   249d4:	f7f7 fe88 	bl	1c6e8 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   249d8:	2800      	cmp	r0, #0
   249da:	d0f8      	beq.n	249ce <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   249dc:	f7f7 fdbe 	bl	1c55c <z_impl_k_yield>
	return ret;
   249e0:	e7f5      	b.n	249ce <k_work_submit_to_queue+0x2c>

000249e2 <k_work_init_delayable>:
{
   249e2:	b538      	push	{r3, r4, r5, lr}
   249e4:	4604      	mov	r4, r0
   249e6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   249e8:	2230      	movs	r2, #48	; 0x30
   249ea:	2100      	movs	r1, #0
   249ec:	f7fc fdbf 	bl	2156e <memset>
   249f0:	6065      	str	r5, [r4, #4]
   249f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   249f6:	60e3      	str	r3, [r4, #12]
}
   249f8:	bd38      	pop	{r3, r4, r5, pc}

000249fa <k_work_schedule_for_queue>:
{
   249fa:	b510      	push	{r4, lr}
   249fc:	b082      	sub	sp, #8
   249fe:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   24a00:	f04f 0040 	mov.w	r0, #64	; 0x40
   24a04:	f3ef 8411 	mrs	r4, BASEPRI
   24a08:	f380 8811 	msr	BASEPRI, r0
   24a0c:	f3bf 8f6f 	isb	sy
	return *flagp;
   24a10:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   24a12:	f010 0f0e 	tst.w	r0, #14
   24a16:	d006      	beq.n	24a26 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   24a18:	2000      	movs	r0, #0
	__asm__ volatile(
   24a1a:	f384 8811 	msr	BASEPRI, r4
   24a1e:	f3bf 8f6f 	isb	sy
}
   24a22:	b002      	add	sp, #8
   24a24:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   24a26:	a801      	add	r0, sp, #4
   24a28:	f7f7 fa28 	bl	1be7c <schedule_for_queue_locked>
   24a2c:	e7f5      	b.n	24a1a <k_work_schedule_for_queue+0x20>

00024a2e <k_work_reschedule_for_queue>:
{
   24a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24a30:	b083      	sub	sp, #12
   24a32:	9001      	str	r0, [sp, #4]
   24a34:	460c      	mov	r4, r1
   24a36:	4616      	mov	r6, r2
   24a38:	461d      	mov	r5, r3
	__asm__ volatile(
   24a3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a3e:	f3ef 8711 	mrs	r7, BASEPRI
   24a42:	f383 8811 	msr	BASEPRI, r3
   24a46:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   24a4a:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   24a4c:	f023 0208 	bic.w	r2, r3, #8
   24a50:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24a52:	f013 0f08 	tst.w	r3, #8
   24a56:	d10b      	bne.n	24a70 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   24a58:	4632      	mov	r2, r6
   24a5a:	462b      	mov	r3, r5
   24a5c:	4621      	mov	r1, r4
   24a5e:	a801      	add	r0, sp, #4
   24a60:	f7f7 fa0c 	bl	1be7c <schedule_for_queue_locked>
	__asm__ volatile(
   24a64:	f387 8811 	msr	BASEPRI, r7
   24a68:	f3bf 8f6f 	isb	sy
}
   24a6c:	b003      	add	sp, #12
   24a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   24a70:	f101 0010 	add.w	r0, r1, #16
   24a74:	f000 fa00 	bl	24e78 <z_abort_timeout>
		ret = true;
   24a78:	e7ee      	b.n	24a58 <k_work_reschedule_for_queue+0x2a>

00024a7a <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   24a7a:	b510      	push	{r4, lr}
	__asm__ volatile(
   24a7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a80:	f3ef 8411 	mrs	r4, BASEPRI
   24a84:	f383 8811 	msr	BASEPRI, r3
   24a88:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   24a8c:	f7ff ff72 	bl	24974 <cancel_delayable_async_locked>
	__asm__ volatile(
   24a90:	f384 8811 	msr	BASEPRI, r4
   24a94:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   24a98:	bd10      	pop	{r4, pc}

00024a9a <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a9c:	460f      	mov	r7, r1
	__asm__ volatile(
   24a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24aa2:	f3ef 8611 	mrs	r6, BASEPRI
   24aa6:	f383 8811 	msr	BASEPRI, r3
   24aaa:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24aae:	f3bf 8f5b 	dmb	ish
   24ab2:	68c3      	ldr	r3, [r0, #12]
   24ab4:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   24ab8:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   24abc:	2b00      	cmp	r3, #0
   24abe:	bf14      	ite	ne
   24ac0:	2501      	movne	r5, #1
   24ac2:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   24ac4:	d107      	bne.n	24ad6 <k_work_cancel_delayable_sync+0x3c>
	bool need_wait = false;
   24ac6:	2000      	movs	r0, #0
	__asm__ volatile(
   24ac8:	f386 8811 	msr	BASEPRI, r6
   24acc:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   24ad0:	b948      	cbnz	r0, 24ae6 <k_work_cancel_delayable_sync+0x4c>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   24ad2:	4628      	mov	r0, r5
   24ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24ad6:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   24ad8:	f7ff ff4c 	bl	24974 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24adc:	4639      	mov	r1, r7
   24ade:	4620      	mov	r0, r4
   24ae0:	f7f7 f932 	bl	1bd48 <cancel_sync_locked>
   24ae4:	e7f0      	b.n	24ac8 <k_work_cancel_delayable_sync+0x2e>
		k_sem_take(&canceller->sem, K_FOREVER);
   24ae6:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   24aea:	f04f 32ff 	mov.w	r2, #4294967295
   24aee:	f04f 33ff 	mov.w	r3, #4294967295
   24af2:	f7f7 f83d 	bl	1bb70 <z_impl_k_sem_take>
   24af6:	e7ec      	b.n	24ad2 <k_work_cancel_delayable_sync+0x38>

00024af8 <thread_active_elsewhere>:
}
   24af8:	2000      	movs	r0, #0
   24afa:	4770      	bx	lr

00024afc <pended_on_thread>:
}
   24afc:	6880      	ldr	r0, [r0, #8]
   24afe:	4770      	bx	lr

00024b00 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   24b00:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24b04:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24b08:	4283      	cmp	r3, r0
   24b0a:	d001      	beq.n	24b10 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   24b0c:	1ac0      	subs	r0, r0, r3
   24b0e:	4770      	bx	lr
	return 0;
   24b10:	2000      	movs	r0, #0
}
   24b12:	4770      	bx	lr

00024b14 <z_unpend_thread_no_timeout>:
{
   24b14:	b538      	push	{r3, r4, r5, lr}
   24b16:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24b18:	2300      	movs	r3, #0
	__asm__ volatile(
   24b1a:	f04f 0240 	mov.w	r2, #64	; 0x40
   24b1e:	f3ef 8511 	mrs	r5, BASEPRI
   24b22:	f382 8811 	msr	BASEPRI, r2
   24b26:	f3bf 8f6f 	isb	sy
   24b2a:	b98b      	cbnz	r3, 24b50 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24b2c:	4620      	mov	r0, r4
   24b2e:	f7ff ffe5 	bl	24afc <pended_on_thread>
   24b32:	4621      	mov	r1, r4
   24b34:	f000 f822 	bl	24b7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24b38:	7b63      	ldrb	r3, [r4, #13]
   24b3a:	f023 0302 	bic.w	r3, r3, #2
   24b3e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24b40:	2300      	movs	r3, #0
   24b42:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   24b44:	f385 8811 	msr	BASEPRI, r5
   24b48:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24b4c:	2301      	movs	r3, #1
   24b4e:	e7ec      	b.n	24b2a <z_unpend_thread_no_timeout+0x16>
}
   24b50:	bd38      	pop	{r3, r4, r5, pc}

00024b52 <z_reschedule_irqlock>:
{
   24b52:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24b54:	4603      	mov	r3, r0
   24b56:	b920      	cbnz	r0, 24b62 <z_reschedule_irqlock+0x10>
   24b58:	f3ef 8205 	mrs	r2, IPSR
   24b5c:	b942      	cbnz	r2, 24b70 <z_reschedule_irqlock+0x1e>
   24b5e:	2201      	movs	r2, #1
   24b60:	e000      	b.n	24b64 <z_reschedule_irqlock+0x12>
   24b62:	2200      	movs	r2, #0
	if (resched(key)) {
   24b64:	b932      	cbnz	r2, 24b74 <z_reschedule_irqlock+0x22>
   24b66:	f383 8811 	msr	BASEPRI, r3
   24b6a:	f3bf 8f6f 	isb	sy
}
   24b6e:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24b70:	2200      	movs	r2, #0
   24b72:	e7f7      	b.n	24b64 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   24b74:	4618      	mov	r0, r3
   24b76:	f7ed fe1b 	bl	127b0 <arch_swap>
	return ret;
   24b7a:	e7f8      	b.n	24b6e <z_reschedule_irqlock+0x1c>

00024b7c <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   24b7c:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   24b7e:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   24b80:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24b82:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24b84:	2300      	movs	r3, #0
   24b86:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   24b88:	604b      	str	r3, [r1, #4]
}
   24b8a:	4770      	bx	lr

00024b8c <z_unpend_thread>:
{
   24b8c:	b538      	push	{r3, r4, r5, lr}
   24b8e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24b90:	2300      	movs	r3, #0
	__asm__ volatile(
   24b92:	f04f 0240 	mov.w	r2, #64	; 0x40
   24b96:	f3ef 8511 	mrs	r5, BASEPRI
   24b9a:	f382 8811 	msr	BASEPRI, r2
   24b9e:	f3bf 8f6f 	isb	sy
   24ba2:	b98b      	cbnz	r3, 24bc8 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24ba4:	4620      	mov	r0, r4
   24ba6:	f7ff ffa9 	bl	24afc <pended_on_thread>
   24baa:	4621      	mov	r1, r4
   24bac:	f7ff ffe6 	bl	24b7c <z_priq_dumb_remove>
   24bb0:	7b63      	ldrb	r3, [r4, #13]
   24bb2:	f023 0302 	bic.w	r3, r3, #2
   24bb6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24bb8:	2300      	movs	r3, #0
   24bba:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   24bbc:	f385 8811 	msr	BASEPRI, r5
   24bc0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24bc4:	2301      	movs	r3, #1
   24bc6:	e7ec      	b.n	24ba2 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   24bc8:	f104 0018 	add.w	r0, r4, #24
   24bcc:	f000 f954 	bl	24e78 <z_abort_timeout>
}
   24bd0:	bd38      	pop	{r3, r4, r5, pc}

00024bd2 <z_priq_dumb_best>:
{
   24bd2:	4603      	mov	r3, r0
	return list->head == list;
   24bd4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24bd6:	4283      	cmp	r3, r0
   24bd8:	d000      	beq.n	24bdc <z_priq_dumb_best+0xa>
}
   24bda:	4770      	bx	lr
	struct k_thread *thread = NULL;
   24bdc:	2000      	movs	r0, #0
	return thread;
   24bde:	e7fc      	b.n	24bda <z_priq_dumb_best+0x8>

00024be0 <add_to_waitq_locked>:
{
   24be0:	b570      	push	{r4, r5, r6, lr}
   24be2:	4605      	mov	r5, r0
   24be4:	460e      	mov	r6, r1
	unready_thread(thread);
   24be6:	f7f7 fa77 	bl	1c0d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24bea:	7b6b      	ldrb	r3, [r5, #13]
   24bec:	f043 0302 	orr.w	r3, r3, #2
   24bf0:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   24bf2:	b1b6      	cbz	r6, 24c22 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   24bf4:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   24bf6:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24bf8:	42a6      	cmp	r6, r4
   24bfa:	d019      	beq.n	24c30 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24bfc:	b164      	cbz	r4, 24c18 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24bfe:	4621      	mov	r1, r4
   24c00:	4628      	mov	r0, r5
   24c02:	f7ff ff7d 	bl	24b00 <z_sched_prio_cmp>
   24c06:	2800      	cmp	r0, #0
   24c08:	dc0c      	bgt.n	24c24 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24c0a:	b12c      	cbz	r4, 24c18 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   24c0c:	6873      	ldr	r3, [r6, #4]
   24c0e:	429c      	cmp	r4, r3
   24c10:	d002      	beq.n	24c18 <add_to_waitq_locked+0x38>
   24c12:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24c14:	2c00      	cmp	r4, #0
   24c16:	d1f1      	bne.n	24bfc <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   24c18:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   24c1a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   24c1c:	606b      	str	r3, [r5, #4]
	tail->next = node;
   24c1e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24c20:	6075      	str	r5, [r6, #4]
}
   24c22:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   24c24:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   24c26:	606b      	str	r3, [r5, #4]
	node->next = successor;
   24c28:	602c      	str	r4, [r5, #0]
	prev->next = node;
   24c2a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   24c2c:	6065      	str	r5, [r4, #4]
}
   24c2e:	e7f8      	b.n	24c22 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24c30:	2400      	movs	r4, #0
   24c32:	e7e3      	b.n	24bfc <add_to_waitq_locked+0x1c>

00024c34 <pend>:
{
   24c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c38:	4605      	mov	r5, r0
   24c3a:	460f      	mov	r7, r1
   24c3c:	4691      	mov	r9, r2
   24c3e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   24c40:	2400      	movs	r4, #0
	__asm__ volatile(
   24c42:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c46:	f3ef 8611 	mrs	r6, BASEPRI
   24c4a:	f383 8811 	msr	BASEPRI, r3
   24c4e:	f3bf 8f6f 	isb	sy
   24c52:	b94c      	cbnz	r4, 24c68 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   24c54:	4639      	mov	r1, r7
   24c56:	4628      	mov	r0, r5
   24c58:	f7ff ffc2 	bl	24be0 <add_to_waitq_locked>
	__asm__ volatile(
   24c5c:	f386 8811 	msr	BASEPRI, r6
   24c60:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24c64:	2401      	movs	r4, #1
   24c66:	e7f4      	b.n	24c52 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   24c68:	464a      	mov	r2, r9
   24c6a:	4643      	mov	r3, r8
   24c6c:	4628      	mov	r0, r5
   24c6e:	f7f7 f977 	bl	1bf60 <add_thread_timeout>
}
   24c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024c76 <z_ready_thread>:
{
   24c76:	b538      	push	{r3, r4, r5, lr}
   24c78:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   24c7a:	2300      	movs	r3, #0
	__asm__ volatile(
   24c7c:	f04f 0240 	mov.w	r2, #64	; 0x40
   24c80:	f3ef 8511 	mrs	r5, BASEPRI
   24c84:	f382 8811 	msr	BASEPRI, r2
   24c88:	f3bf 8f6f 	isb	sy
   24c8c:	e007      	b.n	24c9e <z_ready_thread+0x28>
			ready_thread(thread);
   24c8e:	4620      	mov	r0, r4
   24c90:	f7f7 fb4a 	bl	1c328 <ready_thread>
	__asm__ volatile(
   24c94:	f385 8811 	msr	BASEPRI, r5
   24c98:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24c9c:	2301      	movs	r3, #1
   24c9e:	b92b      	cbnz	r3, 24cac <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   24ca0:	4620      	mov	r0, r4
   24ca2:	f7ff ff29 	bl	24af8 <thread_active_elsewhere>
   24ca6:	2800      	cmp	r0, #0
   24ca8:	d1f4      	bne.n	24c94 <z_ready_thread+0x1e>
   24caa:	e7f0      	b.n	24c8e <z_ready_thread+0x18>
}
   24cac:	bd38      	pop	{r3, r4, r5, pc}

00024cae <z_thread_timeout>:
{
   24cae:	b570      	push	{r4, r5, r6, lr}
   24cb0:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   24cb2:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   24cb6:	2300      	movs	r3, #0
	__asm__ volatile(
   24cb8:	f04f 0240 	mov.w	r2, #64	; 0x40
   24cbc:	f3ef 8611 	mrs	r6, BASEPRI
   24cc0:	f382 8811 	msr	BASEPRI, r2
   24cc4:	f3bf 8f6f 	isb	sy
   24cc8:	e019      	b.n	24cfe <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24cca:	4628      	mov	r0, r5
   24ccc:	f7ff ff16 	bl	24afc <pended_on_thread>
   24cd0:	4629      	mov	r1, r5
   24cd2:	f7ff ff53 	bl	24b7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24cd6:	7b6b      	ldrb	r3, [r5, #13]
   24cd8:	f023 0302 	bic.w	r3, r3, #2
   24cdc:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   24cde:	2300      	movs	r3, #0
   24ce0:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24ce2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24ce6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   24cea:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   24cee:	4628      	mov	r0, r5
   24cf0:	f7f7 fb1a 	bl	1c328 <ready_thread>
	__asm__ volatile(
   24cf4:	f386 8811 	msr	BASEPRI, r6
   24cf8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24cfc:	2301      	movs	r3, #1
   24cfe:	b94b      	cbnz	r3, 24d14 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   24d00:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   24d04:	f013 0f28 	tst.w	r3, #40	; 0x28
   24d08:	d1f4      	bne.n	24cf4 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   24d0a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24d0e:	2b00      	cmp	r3, #0
   24d10:	d1db      	bne.n	24cca <z_thread_timeout+0x1c>
   24d12:	e7e6      	b.n	24ce2 <z_thread_timeout+0x34>
}
   24d14:	bd70      	pop	{r4, r5, r6, pc}

00024d16 <z_unpend1_no_timeout>:
{
   24d16:	b570      	push	{r4, r5, r6, lr}
   24d18:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   24d1a:	2300      	movs	r3, #0
	__asm__ volatile(
   24d1c:	f04f 0240 	mov.w	r2, #64	; 0x40
   24d20:	f3ef 8511 	mrs	r5, BASEPRI
   24d24:	f382 8811 	msr	BASEPRI, r2
   24d28:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   24d2c:	461c      	mov	r4, r3
   24d2e:	e00f      	b.n	24d50 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24d30:	f7ff fee4 	bl	24afc <pended_on_thread>
   24d34:	4621      	mov	r1, r4
   24d36:	f7ff ff21 	bl	24b7c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24d3a:	7b63      	ldrb	r3, [r4, #13]
   24d3c:	f023 0302 	bic.w	r3, r3, #2
   24d40:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24d42:	2300      	movs	r3, #0
   24d44:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   24d46:	f385 8811 	msr	BASEPRI, r5
   24d4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24d4e:	2301      	movs	r3, #1
   24d50:	b933      	cbnz	r3, 24d60 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   24d52:	4630      	mov	r0, r6
   24d54:	f7ff ff3d 	bl	24bd2 <z_priq_dumb_best>
		if (thread != NULL) {
   24d58:	4604      	mov	r4, r0
   24d5a:	2800      	cmp	r0, #0
   24d5c:	d1e8      	bne.n	24d30 <z_unpend1_no_timeout+0x1a>
   24d5e:	e7f2      	b.n	24d46 <z_unpend1_no_timeout+0x30>
}
   24d60:	4620      	mov	r0, r4
   24d62:	bd70      	pop	{r4, r5, r6, pc}

00024d64 <z_unpend_first_thread>:
{
   24d64:	b570      	push	{r4, r5, r6, lr}
   24d66:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   24d68:	2300      	movs	r3, #0
	__asm__ volatile(
   24d6a:	f04f 0240 	mov.w	r2, #64	; 0x40
   24d6e:	f3ef 8511 	mrs	r5, BASEPRI
   24d72:	f382 8811 	msr	BASEPRI, r2
   24d76:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   24d7a:	461c      	mov	r4, r3
   24d7c:	e013      	b.n	24da6 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24d7e:	f7ff febd 	bl	24afc <pended_on_thread>
   24d82:	4621      	mov	r1, r4
   24d84:	f7ff fefa 	bl	24b7c <z_priq_dumb_remove>
   24d88:	7b63      	ldrb	r3, [r4, #13]
   24d8a:	f023 0302 	bic.w	r3, r3, #2
   24d8e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24d90:	2300      	movs	r3, #0
   24d92:	60a3      	str	r3, [r4, #8]
   24d94:	f104 0018 	add.w	r0, r4, #24
   24d98:	f000 f86e 	bl	24e78 <z_abort_timeout>
	__asm__ volatile(
   24d9c:	f385 8811 	msr	BASEPRI, r5
   24da0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24da4:	2301      	movs	r3, #1
   24da6:	b933      	cbnz	r3, 24db6 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   24da8:	4630      	mov	r0, r6
   24daa:	f7ff ff12 	bl	24bd2 <z_priq_dumb_best>
		if (thread != NULL) {
   24dae:	4604      	mov	r4, r0
   24db0:	2800      	cmp	r0, #0
   24db2:	d1e4      	bne.n	24d7e <z_unpend_first_thread+0x1a>
   24db4:	e7f2      	b.n	24d9c <z_unpend_first_thread+0x38>
}
   24db6:	4620      	mov	r0, r4
   24db8:	bd70      	pop	{r4, r5, r6, pc}

00024dba <z_unpend_all>:
{
   24dba:	b538      	push	{r3, r4, r5, lr}
   24dbc:	4605      	mov	r5, r0
	int need_sched = 0;
   24dbe:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24dc0:	e006      	b.n	24dd0 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   24dc2:	4620      	mov	r0, r4
   24dc4:	f7ff fee2 	bl	24b8c <z_unpend_thread>
		z_ready_thread(thread);
   24dc8:	4620      	mov	r0, r4
   24dca:	f7ff ff54 	bl	24c76 <z_ready_thread>
		need_sched = 1;
   24dce:	2001      	movs	r0, #1
	return list->head == list;
   24dd0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24dd2:	42a5      	cmp	r5, r4
   24dd4:	d001      	beq.n	24dda <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24dd6:	2c00      	cmp	r4, #0
   24dd8:	d1f3      	bne.n	24dc2 <z_unpend_all+0x8>
}
   24dda:	bd38      	pop	{r3, r4, r5, pc}

00024ddc <z_sched_wake>:
{
   24ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24de0:	4606      	mov	r6, r0
   24de2:	4688      	mov	r8, r1
   24de4:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   24de6:	2300      	movs	r3, #0
	__asm__ volatile(
   24de8:	f04f 0240 	mov.w	r2, #64	; 0x40
   24dec:	f3ef 8511 	mrs	r5, BASEPRI
   24df0:	f382 8811 	msr	BASEPRI, r2
   24df4:	f3bf 8f6f 	isb	sy
	bool ret = false;
   24df8:	4699      	mov	r9, r3
   24dfa:	e01b      	b.n	24e34 <z_sched_wake+0x58>
   24dfc:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   24e00:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   24e02:	f7ff fe7b 	bl	24afc <pended_on_thread>
   24e06:	4621      	mov	r1, r4
   24e08:	f7ff feb8 	bl	24b7c <z_priq_dumb_remove>
   24e0c:	7b63      	ldrb	r3, [r4, #13]
   24e0e:	f023 0302 	bic.w	r3, r3, #2
   24e12:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   24e14:	2300      	movs	r3, #0
   24e16:	60a3      	str	r3, [r4, #8]
   24e18:	f104 0018 	add.w	r0, r4, #24
   24e1c:	f000 f82c 	bl	24e78 <z_abort_timeout>
			ready_thread(thread);
   24e20:	4620      	mov	r0, r4
   24e22:	f7f7 fa81 	bl	1c328 <ready_thread>
			ret = true;
   24e26:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   24e2a:	f385 8811 	msr	BASEPRI, r5
   24e2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   24e32:	2301      	movs	r3, #1
   24e34:	b933      	cbnz	r3, 24e44 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   24e36:	4630      	mov	r0, r6
   24e38:	f7ff fecb 	bl	24bd2 <z_priq_dumb_best>
		if (thread != NULL) {
   24e3c:	4604      	mov	r4, r0
   24e3e:	2800      	cmp	r0, #0
   24e40:	d1dc      	bne.n	24dfc <z_sched_wake+0x20>
   24e42:	e7f2      	b.n	24e2a <z_sched_wake+0x4e>
}
   24e44:	4648      	mov	r0, r9
   24e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024e4a <remove_timeout>:
{
   24e4a:	b538      	push	{r3, r4, r5, lr}
   24e4c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   24e4e:	f7f7 fcb9 	bl	1c7c4 <next>
   24e52:	b148      	cbz	r0, 24e68 <remove_timeout+0x1e>
   24e54:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   24e56:	6920      	ldr	r0, [r4, #16]
   24e58:	6965      	ldr	r5, [r4, #20]
   24e5a:	6913      	ldr	r3, [r2, #16]
   24e5c:	6951      	ldr	r1, [r2, #20]
   24e5e:	181b      	adds	r3, r3, r0
   24e60:	eb45 0101 	adc.w	r1, r5, r1
   24e64:	6113      	str	r3, [r2, #16]
   24e66:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   24e68:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   24e6a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   24e6c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24e6e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24e70:	2300      	movs	r3, #0
   24e72:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   24e74:	6063      	str	r3, [r4, #4]
}
   24e76:	bd38      	pop	{r3, r4, r5, pc}

00024e78 <z_abort_timeout>:
{
   24e78:	b570      	push	{r4, r5, r6, lr}
   24e7a:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   24e7c:	2300      	movs	r3, #0
	__asm__ volatile(
   24e7e:	f04f 0240 	mov.w	r2, #64	; 0x40
   24e82:	f3ef 8611 	mrs	r6, BASEPRI
   24e86:	f382 8811 	msr	BASEPRI, r2
   24e8a:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   24e8e:	f06f 0015 	mvn.w	r0, #21
   24e92:	e008      	b.n	24ea6 <z_abort_timeout+0x2e>
			remove_timeout(to);
   24e94:	4620      	mov	r0, r4
   24e96:	f7ff ffd8 	bl	24e4a <remove_timeout>
			ret = 0;
   24e9a:	4628      	mov	r0, r5
	__asm__ volatile(
   24e9c:	f386 8811 	msr	BASEPRI, r6
   24ea0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24ea4:	2301      	movs	r3, #1
   24ea6:	461d      	mov	r5, r3
   24ea8:	b91b      	cbnz	r3, 24eb2 <z_abort_timeout+0x3a>
	return node->next != NULL;
   24eaa:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   24eac:	2b00      	cmp	r3, #0
   24eae:	d1f1      	bne.n	24e94 <z_abort_timeout+0x1c>
   24eb0:	e7f4      	b.n	24e9c <z_abort_timeout+0x24>
}
   24eb2:	bd70      	pop	{r4, r5, r6, pc}

00024eb4 <z_get_next_timeout_expiry>:
{
   24eb4:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   24eb6:	2300      	movs	r3, #0
	__asm__ volatile(
   24eb8:	f04f 0240 	mov.w	r2, #64	; 0x40
   24ebc:	f3ef 8411 	mrs	r4, BASEPRI
   24ec0:	f382 8811 	msr	BASEPRI, r2
   24ec4:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   24ec8:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   24ecc:	b93b      	cbnz	r3, 24ede <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   24ece:	f7f7 fc91 	bl	1c7f4 <next_timeout>
	__asm__ volatile(
   24ed2:	f384 8811 	msr	BASEPRI, r4
   24ed6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24eda:	2301      	movs	r3, #1
   24edc:	e7f6      	b.n	24ecc <z_get_next_timeout_expiry+0x18>
}
   24ede:	bd10      	pop	{r4, pc}

00024ee0 <z_set_timeout_expiry>:
{
   24ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ee2:	4606      	mov	r6, r0
   24ee4:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   24ee6:	2300      	movs	r3, #0
	__asm__ volatile(
   24ee8:	f04f 0240 	mov.w	r2, #64	; 0x40
   24eec:	f3ef 8511 	mrs	r5, BASEPRI
   24ef0:	f382 8811 	msr	BASEPRI, r2
   24ef4:	f3bf 8f6f 	isb	sy
   24ef8:	e00a      	b.n	24f10 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   24efa:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   24efc:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24f00:	2801      	cmp	r0, #1
   24f02:	dd00      	ble.n	24f06 <z_set_timeout_expiry+0x26>
   24f04:	b97c      	cbnz	r4, 24f26 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   24f06:	f385 8811 	msr	BASEPRI, r5
   24f0a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   24f0e:	2301      	movs	r3, #1
   24f10:	461c      	mov	r4, r3
   24f12:	b97b      	cbnz	r3, 24f34 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   24f14:	f7f7 fc6e 	bl	1c7f4 <next_timeout>
			      || (ticks <= next_to);
   24f18:	f1b0 3fff 	cmp.w	r0, #4294967295
   24f1c:	d0ed      	beq.n	24efa <z_set_timeout_expiry+0x1a>
   24f1e:	42b0      	cmp	r0, r6
   24f20:	dbec      	blt.n	24efc <z_set_timeout_expiry+0x1c>
   24f22:	2401      	movs	r4, #1
   24f24:	e7ea      	b.n	24efc <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24f26:	4639      	mov	r1, r7
   24f28:	42b0      	cmp	r0, r6
   24f2a:	bfa8      	it	ge
   24f2c:	4630      	movge	r0, r6
   24f2e:	f7ec ff17 	bl	11d60 <sys_clock_set_timeout>
   24f32:	e7e8      	b.n	24f06 <z_set_timeout_expiry+0x26>
}
   24f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024f36 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   24f36:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   24f38:	f7f7 fd8e 	bl	1ca58 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   24f3c:	bd08      	pop	{r3, pc}

00024f3e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   24f3e:	b900      	cbnz	r0, 24f42 <z_impl_k_busy_wait+0x4>
   24f40:	4770      	bx	lr
{
   24f42:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   24f44:	f7ee fb46 	bl	135d4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   24f48:	bd08      	pop	{r3, pc}

00024f4a <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   24f4a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24f4c:	f1b1 3fff 	cmp.w	r1, #4294967295
   24f50:	bf08      	it	eq
   24f52:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   24f56:	d024      	beq.n	24fa2 <sys_clock_timeout_end_calc+0x58>
   24f58:	4604      	mov	r4, r0
   24f5a:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24f5c:	ea54 0105 	orrs.w	r1, r4, r5
   24f60:	d00d      	beq.n	24f7e <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24f62:	f06f 0101 	mvn.w	r1, #1
   24f66:	1a0a      	subs	r2, r1, r0
   24f68:	f04f 31ff 	mov.w	r1, #4294967295
   24f6c:	eb61 0305 	sbc.w	r3, r1, r5
   24f70:	2a00      	cmp	r2, #0
   24f72:	f173 0100 	sbcs.w	r1, r3, #0
   24f76:	db05      	blt.n	24f84 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   24f78:	4610      	mov	r0, r2
   24f7a:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   24f7c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   24f7e:	f7f7 fd6b 	bl	1ca58 <sys_clock_tick_get>
   24f82:	e7fb      	b.n	24f7c <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   24f84:	f7f7 fd68 	bl	1ca58 <sys_clock_tick_get>
   24f88:	4623      	mov	r3, r4
   24f8a:	462a      	mov	r2, r5
   24f8c:	2c01      	cmp	r4, #1
   24f8e:	f175 0400 	sbcs.w	r4, r5, #0
   24f92:	db03      	blt.n	24f9c <sys_clock_timeout_end_calc+0x52>
   24f94:	18c0      	adds	r0, r0, r3
   24f96:	eb42 0101 	adc.w	r1, r2, r1
   24f9a:	e7ef      	b.n	24f7c <sys_clock_timeout_end_calc+0x32>
   24f9c:	2301      	movs	r3, #1
   24f9e:	2200      	movs	r2, #0
   24fa0:	e7f8      	b.n	24f94 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   24fa2:	f04f 30ff 	mov.w	r0, #4294967295
   24fa6:	4601      	mov	r1, r0
   24fa8:	e7e8      	b.n	24f7c <sys_clock_timeout_end_calc+0x32>

00024faa <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   24faa:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   24fac:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   24fae:	2300      	movs	r3, #0
   24fb0:	6303      	str	r3, [r0, #48]	; 0x30
   24fb2:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   24fb6:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   24fb8:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   24fba:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   24fbc:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   24fbe:	6343      	str	r3, [r0, #52]	; 0x34
}
   24fc0:	4770      	bx	lr

00024fc2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24fc2:	b510      	push	{r4, lr}
   24fc4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   24fc6:	f7ff ff57 	bl	24e78 <z_abort_timeout>

	if (inactive) {
   24fca:	b9a0      	cbnz	r0, 24ff6 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   24fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24fce:	b10b      	cbz	r3, 24fd4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24fd0:	4620      	mov	r0, r4
   24fd2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   24fd4:	f104 0018 	add.w	r0, r4, #24
   24fd8:	f7ff fe9d 	bl	24d16 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   24fdc:	b158      	cbz	r0, 24ff6 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   24fde:	f7ff fe4a 	bl	24c76 <z_ready_thread>
	__asm__ volatile(
   24fe2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fe6:	f3ef 8011 	mrs	r0, BASEPRI
   24fea:	f383 8811 	msr	BASEPRI, r3
   24fee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24ff2:	f7ff fdae 	bl	24b52 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   24ff6:	bd10      	pop	{r4, pc}

00024ff8 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24ff8:	b108      	cbz	r0, 24ffe <poller_thread+0x6>
   24ffa:	3860      	subs	r0, #96	; 0x60
   24ffc:	4770      	bx	lr
}
   24ffe:	4770      	bx	lr

00025000 <signal_poller>:
{
   25000:	b538      	push	{r3, r4, r5, lr}
   25002:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   25004:	6880      	ldr	r0, [r0, #8]
   25006:	f7ff fff7 	bl	24ff8 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2500a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2500c:	f013 0f02 	tst.w	r3, #2
   25010:	d028      	beq.n	25064 <signal_poller+0x64>
   25012:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   25014:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   25018:	f06f 0001 	mvn.w	r0, #1
   2501c:	f04f 31ff 	mov.w	r1, #4294967295
   25020:	428b      	cmp	r3, r1
   25022:	bf08      	it	eq
   25024:	4282      	cmpeq	r2, r0
   25026:	d01f      	beq.n	25068 <signal_poller+0x68>
	z_unpend_thread(thread);
   25028:	4620      	mov	r0, r4
   2502a:	f7ff fdaf 	bl	24b8c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2502e:	2d08      	cmp	r5, #8
   25030:	d00a      	beq.n	25048 <signal_poller+0x48>
   25032:	2300      	movs	r3, #0
   25034:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   25038:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2503a:	f013 0f1f 	tst.w	r3, #31
   2503e:	d108      	bne.n	25052 <signal_poller+0x52>
	return node->next != NULL;
   25040:	69a3      	ldr	r3, [r4, #24]
   25042:	b123      	cbz	r3, 2504e <signal_poller+0x4e>
   25044:	2300      	movs	r3, #0
   25046:	e005      	b.n	25054 <signal_poller+0x54>
   25048:	f06f 0303 	mvn.w	r3, #3
   2504c:	e7f2      	b.n	25034 <signal_poller+0x34>
   2504e:	2301      	movs	r3, #1
   25050:	e000      	b.n	25054 <signal_poller+0x54>
   25052:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   25054:	b90b      	cbnz	r3, 2505a <signal_poller+0x5a>
		return 0;
   25056:	2000      	movs	r0, #0
   25058:	e005      	b.n	25066 <signal_poller+0x66>
	z_ready_thread(thread);
   2505a:	4620      	mov	r0, r4
   2505c:	f7ff fe0b 	bl	24c76 <z_ready_thread>
	return 0;
   25060:	2000      	movs	r0, #0
   25062:	e000      	b.n	25066 <signal_poller+0x66>
		return 0;
   25064:	2000      	movs	r0, #0
}
   25066:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   25068:	f06f 000a 	mvn.w	r0, #10
   2506c:	e7fb      	b.n	25066 <signal_poller+0x66>

0002506e <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2506e:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   25070:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25072:	7823      	ldrb	r3, [r4, #0]
   25074:	b173      	cbz	r3, 25094 <signal_triggered_work+0x26>
   25076:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2507a:	b15d      	cbz	r5, 25094 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2507c:	f1a4 0614 	sub.w	r6, r4, #20
   25080:	f104 0014 	add.w	r0, r4, #20
   25084:	f7ff fef8 	bl	24e78 <z_abort_timeout>
		twork->poll_result = 0;
   25088:	2300      	movs	r3, #0
   2508a:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2508c:	4631      	mov	r1, r6
   2508e:	4628      	mov	r0, r5
   25090:	f7ff fc87 	bl	249a2 <k_work_submit_to_queue>
	}

	return 0;
}
   25094:	2000      	movs	r0, #0
   25096:	bd70      	pop	{r4, r5, r6, pc}

00025098 <signal_poll_event>:
{
   25098:	b570      	push	{r4, r5, r6, lr}
   2509a:	4604      	mov	r4, r0
   2509c:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2509e:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   250a0:	b1d6      	cbz	r6, 250d8 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   250a2:	7873      	ldrb	r3, [r6, #1]
   250a4:	2b01      	cmp	r3, #1
   250a6:	d00d      	beq.n	250c4 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   250a8:	2b02      	cmp	r3, #2
   250aa:	d012      	beq.n	250d2 <signal_poll_event+0x3a>
		poller->is_polling = false;
   250ac:	2000      	movs	r0, #0
   250ae:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   250b0:	2300      	movs	r3, #0
   250b2:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   250b4:	68e3      	ldr	r3, [r4, #12]
   250b6:	f3c3 3145 	ubfx	r1, r3, #13, #6
   250ba:	430d      	orrs	r5, r1
   250bc:	f365 3352 	bfi	r3, r5, #13, #6
   250c0:	60e3      	str	r3, [r4, #12]
}
   250c2:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   250c4:	f7ff ff9c 	bl	25000 <signal_poller>
		poller->is_polling = false;
   250c8:	2300      	movs	r3, #0
   250ca:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   250cc:	4298      	cmp	r0, r3
   250ce:	daef      	bge.n	250b0 <signal_poll_event+0x18>
   250d0:	e7f7      	b.n	250c2 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   250d2:	f7ff ffcc 	bl	2506e <signal_triggered_work>
   250d6:	e7f7      	b.n	250c8 <signal_poll_event+0x30>
	int retcode = 0;
   250d8:	2000      	movs	r0, #0
   250da:	e7e9      	b.n	250b0 <signal_poll_event+0x18>

000250dc <k_poll_event_init>:
{
   250dc:	b430      	push	{r4, r5}
	event->poller = NULL;
   250de:	2400      	movs	r4, #0
   250e0:	6084      	str	r4, [r0, #8]
	event->type = type;
   250e2:	7b45      	ldrb	r5, [r0, #13]
   250e4:	f361 0504 	bfi	r5, r1, #0, #5
   250e8:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   250ea:	68c1      	ldr	r1, [r0, #12]
   250ec:	f364 3152 	bfi	r1, r4, #13, #6
   250f0:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   250f2:	f3c1 4107 	ubfx	r1, r1, #16, #8
   250f6:	f362 01c3 	bfi	r1, r2, #3, #1
   250fa:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   250fc:	89c2      	ldrh	r2, [r0, #14]
   250fe:	f364 120f 	bfi	r2, r4, #4, #12
   25102:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   25104:	6103      	str	r3, [r0, #16]
}
   25106:	bc30      	pop	{r4, r5}
   25108:	4770      	bx	lr

0002510a <z_handle_obj_poll_events>:
{
   2510a:	b508      	push	{r3, lr}
   2510c:	4603      	mov	r3, r0
	return list->head == list;
   2510e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25110:	4283      	cmp	r3, r0
   25112:	d009      	beq.n	25128 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   25114:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   25116:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   25118:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2511a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2511c:	2300      	movs	r3, #0
   2511e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   25120:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   25122:	b108      	cbz	r0, 25128 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   25124:	f7ff ffb8 	bl	25098 <signal_poll_event>
}
   25128:	bd08      	pop	{r3, pc}

0002512a <z_heap_aligned_alloc>:
{
   2512a:	b5d0      	push	{r4, r6, r7, lr}
   2512c:	b082      	sub	sp, #8
   2512e:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25130:	2000      	movs	r0, #0
   25132:	2304      	movs	r3, #4
   25134:	18d2      	adds	r2, r2, r3
   25136:	d20e      	bcs.n	25156 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   25138:	b978      	cbnz	r0, 2515a <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2513a:	2600      	movs	r6, #0
   2513c:	2700      	movs	r7, #0
   2513e:	e9cd 6700 	strd	r6, r7, [sp]
   25142:	f041 0104 	orr.w	r1, r1, #4
   25146:	4620      	mov	r0, r4
   25148:	f7ff f988 	bl	2445c <k_heap_aligned_alloc>
	if (mem == NULL) {
   2514c:	b108      	cbz	r0, 25152 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   2514e:	f840 4b04 	str.w	r4, [r0], #4
}
   25152:	b002      	add	sp, #8
   25154:	bdd0      	pop	{r4, r6, r7, pc}
   25156:	2001      	movs	r0, #1
   25158:	e7ee      	b.n	25138 <z_heap_aligned_alloc+0xe>
		return NULL;
   2515a:	2000      	movs	r0, #0
   2515c:	e7f9      	b.n	25152 <z_heap_aligned_alloc+0x28>

0002515e <k_free>:
	if (ptr != NULL) {
   2515e:	b130      	cbz	r0, 2516e <k_free+0x10>
{
   25160:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   25162:	1f01      	subs	r1, r0, #4
   25164:	f850 0c04 	ldr.w	r0, [r0, #-4]
   25168:	f7ff f9c3 	bl	244f2 <k_heap_free>
}
   2516c:	bd08      	pop	{r3, pc}
   2516e:	4770      	bx	lr

00025170 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   25170:	4770      	bx	lr
	...

00025174 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   25174:	f7f4 bdf4 	b.w	19d60 <SystemInit>
